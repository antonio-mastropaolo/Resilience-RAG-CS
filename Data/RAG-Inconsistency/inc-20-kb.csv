Id,method,comment,isConsistent,tokensLength
0,"public static JSONElement parse(InputStream is, String encoding) throws ConverterException {
          return parse(GrailsIOUtils.toString(is, encoding));
    }",Parses the given JSON and returns either a JSONObject or a JSONArray,1,44
1,"public static Counter newCounter(Class<?> klass, String name) {
        return DEFAULT_REGISTRY.newCounter(klass, name);
    }",Creates a new  com.yammer.metrics.core.Counter and registers it under the given class and name.,1,40
2,"public AngularCoordinates revert() {
        return new AngularCoordinates(rotation.revert(),
                                      rotation.applyInverseTo(rotationRate.negate()),
                                      rotation.applyInverseTo(rotationAcceleration.negate()));
    }",Revert a rotation/rotation rate/ rotation acceleration triplet.,1,54
3,"protected static ColumnMetadata getColumnDefinition(TableMetadata metadata, Raw rawId)
        {
            return rawId.prepare(metadata);
        }",Retrieves the ColumnMetadata corresponding to the specified raw ColumnIdentifier.,1,35
4,"public static Timer newTimer(Class<?> klass,
                                       String name) {
        return DEFAULT_REGISTRY.newTimer(klass, name);
    }","Creates a new  com.yammer.metrics.core.Timer and registers it under the given class and name, measuring elapsed time in milliseconds and invocations per second.",1,41
5,"public static double get(MetricKey<MethodLike> key, MethodLike node, MetricOptions options) {
        return FACADE.computeForOperation(key, node, options);
    }",Computes a metric identified by its key on a operation AST node.,1,48
6,"public static Object getValue(Annotation annotation, String attributeName) {
		if (annotation == null || !StringUtils.hasText(attributeName)) {
			return null;
		}
		try {
			Method method = annotation.annotationType().getDeclaredMethod(attributeName);
			ReflectionUtils.makeAccessible(method);
			return method.invoke(annotation);
		}
		catch (InvocationTargetException ex) {
			rethrowAnnotationConfigurationException(ex.getTargetException());
			throw new IllegalStateException(
					""Could not obtain value for annotation attribute '"" + attributeName + ""' in "" + annotation, ex);
		}
		catch (Throwable ex) {
			handleIntrospectionFailure(annotation.getClass(), ex);
			return null;
		}
	}","Retrieve the value of a named attribute, given an annotation instance.",1,195
7,"public boolean sendMessageToEndPoint(final String url, final String message, final boolean async) {
        final Future<Boolean> result = EXECUTOR_SERVICE.submit(new MessageSender(url, message,
                this.readTimeout, this.connectionTimeout, this.followRedirects));

        if (async) {
            return true;
        }

        try {
            return result.get();
        } catch (final Exception e) {
            return false;
        }
    }",Sends a message to a particular endpoint.,1,135
8,"public Module remove(long moduleId)
		throws NoSuchModuleException, SystemException {
		return remove(Long.valueOf(moduleId));
	}",Removes the module with the primary key from the database.,1,38
9,"@Override
    public Complex add(Complex addend) throws NullArgumentException {
        MathUtils.checkNotNull(addend);
        if (isNaN || addend.isNaN) {
            return NaN;
        }

        return createComplex(real + addend.getReal(),
                             imaginary + addend.getImaginary());
    }",Returns a  Complex whose value is  (this + addend).,1,87
10,"long getOldestVersionToKeep() {
        long v = oldestVersionToKeep.get();
        v = Math.max(v - versionsToKeep, INITIAL_VERSION);
        if (fileStore != null) {
            long storeVersion = lastStoredVersion;
            if (storeVersion != INITIAL_VERSION && storeVersion < v) {
                v = storeVersion;
            }
        }
        return v;
    }",Get the oldest version to retain.,1,112
11,"public T remove(Channel channel) {
        if (channel == null) {
            throw new NullPointerException(""channel"");
        }
        T removed = map.remove(channel);
        if (removed == null) {
            return initialValue(channel);
        } else {
            return removed;
        }
    }",Removes the variable and returns the removed value.,1,100
12,"public static RPCBlockWriteResponse decode(ByteBuf in) {
    long sessionId = in.readLong();
    long blockId = in.readLong();
    long offset = in.readLong();
    long length = in.readLong();
    short status = in.readShort();
    return new RPCBlockWriteResponse(sessionId, blockId, offset, length, Status.fromShort(status));
  }",Decode the input  ByteBuf into a  RPCBlockWriteResponse object and return it.,1,116
13,"public ReferenceCountingResourceHolder<List<T>> takeBatch(final int elementNum)
  {
    checkInitialized();
    try {
      return wrapObjects(takeObjects(elementNum));
    }
    catch (InterruptedException e) {
      throw Throwables.propagate(e);
    }
  }","Take resources from the pool, waiting if necessary until the elements of the given number become available.",1,76
14,"SimpleHttpResponse generateResponse(final HttpRequest request, final HttpCacheEntry entry) throws IOException {
        final Date now = new Date();
        final SimpleHttpResponse response = new SimpleHttpResponse(entry.getStatus());
        response.setVersion(HttpVersion.DEFAULT);

        response.setHeaders(entry.getAllHeaders());

        if (responseShouldContainEntity(request, entry)) {
            final Resource resource = entry.getResource();
            final Header h = entry.getFirstHeader(HttpHeaders.CONTENT_TYPE);
            final ContentType contentType = h != null ? ContentType.parse(h.getValue()) : null;
            final byte[] content = resource.get();
            addMissingContentLengthHeader(response, content);
            response.setBodyBytes(content, contentType);
        }

        final long age = this.validityStrategy.getCurrentAgeSecs(entry, now);
        if (age > 0) {
            if (age >= Integer.MAX_VALUE) {
                response.setHeader(HeaderConstants.AGE, ""2147483648"");
            } else {
                response.setHeader(HeaderConstants.AGE, """" + ((int) age));
            }
        }

        return response;
    }",If it is legal to use cached content in response response to the  HttpRequest then generate an  HttpResponse based on  HttpCacheEntry.,1,330
15,"public static ReviewMgr createInstance(String contextId)
        throws SecurityException
    {
        VUtil.assertNotNull(contextId, GlobalErrIds.CONTEXT_NULL, CLS_NM + "".createInstance"");
        if (!VUtil.isNotNullOrEmpty(reviewClassName))
        {
            if(GlobalIds.IS_REST)
            {
                reviewClassName = ReviewMgrRestImpl.class.getName();
            }
            else
            {
                reviewClassName = ReviewMgrImpl.class.getName();
            }
        }

        ReviewMgr reviewMgr = ( ReviewMgr ) ClassUtil.createInstance(reviewClassName);
        reviewMgr.setContextId(contextId);
        return reviewMgr;
    }",Create and return a reference to  ReviewMgr object.,1,154
16,"@SuppressWarnings(""unchecked"")
    @Override
    default <U, TRAVERSABLE extends HigherKinded<U, Traversable<?>>> List<U> flatten(Function<? super T, ? extends TRAVERSABLE> f) {
        Objects.requireNonNull(f, ""f is null"");
        return isEmpty() ? Nil.instance() : foldRight(nil(), (t, xs) -> xs.prependAll((Traversable<U>) f.apply(t)));
    }",Flattens a  List using a function  f.,1,133
17,"public boolean isExpanded() {
	return getDrawerFigure().isExpanded();
}",Returns the expansion state of the drawer,1,24
18,"public ViewGroup getStickySectionHeadersHolder() {
		return (ViewGroup) ((Activity) mRecyclerView.getContext()).findViewById(R.id.sticky_header_container);
	}",Returns the ViewGroup (FrameLayout) that will hold the headers when sticky.,1,42
19,"public static <C extends Comparable<E>, E> Rule<C> ge(E value) {
        return new GeRule<C, E>(value);
    }",Returns a rule which evaluates to true if the supplied input is greater than or equals to the given value.,1,52
20,"protected Element getField(final String fieldTypeFqn){
        
        if (null == fieldTypeFqn || """".equals(fieldTypeFqn.trim())){
            throw new IllegalArgumentException(""Passed an empty or null fieldTypeFqn."");
        }
        
        TypeElement classElement = getClassElement();
        TypeElement fieldType = asTypeElement(fieldTypeFqn);
        return checkElementsForType(ElementFilter.fieldsIn(classElement.getEnclosedElements()), fieldType);
    }",Gets the element representing a field of the given type.,1,111
21,"public static FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {
        return cache.getDateTimeInstance(style, null, timeZone, locale);
    }","Gets a date formatter instance using the specified style, time zone and locale.",1,48
22,"public String toString() {
        if (getUnit() instanceof CompoundUnit)
            return MeasureFormat.DEFAULT.formatCompound(doubleValue(getUnit()),
                    getUnit(), new StringBuffer(), null).toString();
        return getValue() + "" "" + getUnit();
    }",Returns the String representation of this measure,1,84
23,"public static CiConstant forFloat(float f) {
        return new CiConstant(CiKind.Float, f);
    }",Utility method to create a value type for a float constant.,1,34
24,"public static List<SavedAttachment> findExistingAttachments(
            Collection<? extends Attachment> attachments) {
        ArrayList<SavedAttachment> list = new ArrayList<SavedAttachment>();
        for (Attachment a : attachments) {
            if (a instanceof SavedAttachment) {
                list.add((SavedAttachment)a);
            }
        }
        return list;
    }",Return a list of the existing attachments in the list passed in.,1,102
25,"public List<Item> getItems() {
        synchronized (items) {
            return Collections.unmodifiableList(new ArrayList<Item>(items));
        }
    }",Returns a List of the items returned from a search.,1,47
26,"public static MongoClient create(final MongoClientSettings settings) {
        return new MongoClientImpl(settings, createCluster(settings, getStreamFactory(settings)));
    }",Create a new client with the given client settings.,1,43
27,"public CheServicesEnvironmentImpl parse(Environment environment) throws IllegalArgumentException,
                                                                            ServerException {

        checkNotNull(environment, ""Environment should not be null"");
        checkNotNull(environment.getRecipe(), ""Environment recipe should not be null"");
        checkNotNull(environment.getRecipe().getType(), ""Environment recipe type should not be null"");
        checkArgument(environment.getRecipe().getContent() != null || environment.getRecipe().getLocation() != null,
                      ""Recipe of environment must contain location or content"");

        CheServicesEnvironmentImpl composeEnvironment;
        String envType = environment.getRecipe().getType();
        switch (envType) {
            case ""compose"":
                composeEnvironment = parseCompose(environment.getRecipe());
                break;
            case ""dockerimage"":
            case ""dockerfile"":
                composeEnvironment = parseDocker(environment);
                break;
            default:
                throw new IllegalArgumentException(""Environment type "" + envType + "" is not supported"");
        }

        composeEnvironment.getServices().forEach((name, service) -> {
            ExtendedMachine extendedMachine = environment.getMachines().get(name);
            if (extendedMachine != null &&
                extendedMachine.getAttributes() != null &&
                extendedMachine.getAttributes().containsKey(""memoryLimitBytes"")) {

                try {
                    service.setMemLimit(Long.parseLong(extendedMachine.getAttributes().get(""memoryLimitBytes"")));
                } catch (NumberFormatException e) {
                    throw new IllegalArgumentException(
                            format(""Value of attribute 'memoryLimitBytes' of machine '%s' is illegal"", name));
                }
            }
        });

        return composeEnvironment;
    }",Parses  Environment into  CheServicesEnvironmentImpl.,1,409
28,"public static org.openldap.fortress.ReviewMgr createInstance(String contextId)
        throws SecurityException
    {
        VUtil.assertNotNull(contextId, GlobalErrIds.CONTEXT_NULL, CLS_NM + "".createInstance"");
        if (!VUtil.isNotNullOrEmpty(reviewClassName))
        {
            if(GlobalIds.IS_REST)
            {
                reviewClassName = ReviewMgrRestImpl.class.getName();
            }
            else
            {
                reviewClassName = ReviewMgrImpl.class.getName();
            }
        }

        ReviewMgr reviewMgr = ( org.openldap.fortress.ReviewMgr) ClassUtil.createInstance(reviewClassName);
        reviewMgr.setContextId(contextId);
        return reviewMgr;
    }",Create and return a reference to  org.openldap.fortress.ReviewMgr object.,1,165
29,"public SocksProtocolVersion protocolVersion() {
        return protocolVersion;
    }",Returns the  SocksProtocolVersion of this  SocksMessage,1,19
30,"public static Ticker adaptTicker(CryptsyGetMarketsReturn marketsReturnData, CurrencyPair currencyPair) {

    List<CryptsyMarketData> marketData = marketsReturnData.getReturnValue();

    String label = currencyPair.toString().replace(""_"", ""/"");

    CryptsyMarketData targetMarket = null;
    for (CryptsyMarketData currMarket : marketData) {
      if (currMarket.getLabel().equalsIgnoreCase(label)) {
        targetMarket = currMarket;
        break;
      }
    }

    BigDecimal last = targetMarket.getLast();
    BigDecimal bid = null;
    BigDecimal ask = null;
    BigDecimal high = targetMarket.getHigh();
    BigDecimal low = targetMarket.getLow();
    BigDecimal volume = targetMarket.get24hVolume();

    return new Ticker.Builder().currencyPair(currencyPair).last(last).bid(bid).ask(ask).high(high).low(low).volume(volume).build();
  }",Adapts CryptsyGetMarketsReturn DTO to XChange standard Ticker DTO Note:,1,259
31,"private State createState(Object propertyValue) {
		if(propertyValue == null) {
			return UnDefType.NULL;
		}

		Class<?> dataType = propertyValue.getClass();

		if (Date.class.isAssignableFrom(dataType)) {
			Calendar calendar = Calendar.getInstance();
			calendar.setTime((Date) propertyValue);
			return new DateTimeType(calendar);
		} else if (BigDecimal.class.isAssignableFrom(dataType)) {
			return new DecimalType((BigDecimal) propertyValue);
		} else if (Boolean.class.isAssignableFrom(dataType)) {
			if((Boolean) propertyValue) {
				return OnOffType.ON;
			} else {
				return OnOffType.OFF;
			}
		} else {
			return new StringType(propertyValue.toString());
		}
	}",Creates an openHAB  State in accordance to the class of the given  propertyValue.,1,231
32,"public double asDouble() {
        assert getKind() == Kind.Double;
        return Double.longBitsToDouble(primitive);
    }",Returns the primitive double value this constant represents.,1,39
33,"public RawLogTriplet newConnection(
        final String channel, final int sessionId, final int streamId, final long correlationId, final int termBufferLength)
    {
        if (termBufferLength > connectionTermBufferMaxLength)
        {
            throw new IllegalArgumentException(
                ""connection term buffer larger than max length: "" + termBufferLength + "" > "" + connectionTermBufferMaxLength);
        }

        return newInstance(subscriptionsDir, channel, sessionId, streamId, correlationId, termBufferLength);
    }",Create new  RawLogTriplet in the subscriptions directory for the supplied triplet.,1,120
34,"public Argument setArgName(String argName) {
    Objects.requireNonNull(argName);
    this.argName = argName;
    return this;
  }",Sets the argument name of this  Argument.,1,41
35,"public static boolean contains(IShape shape1, IShape shape2) {
		for (ICurve seg : shape2.getOutlineSegments()) {
			if (!contains(shape1, seg)) {
				return false;
			}
		}
		return true;
	}",Returns true if the second  IShape is fully contained by the first  IShape.,1,76
36,"@Override
    public Cartesian3D parse(final String source) throws MathParseException {
        ParsePosition parsePosition = new ParsePosition(0);
        Cartesian3D result = parse(source, parsePosition);
        if (parsePosition.getIndex() == 0) {
            throw new MathParseException(source,
                                         parsePosition.getErrorIndex(),
                                         Cartesian3D.class);
        }
        return result;
    }",Parses a string to produce a  Cartesian3D object.,1,108
37,"@Override
	public String getDefault() {
		OdfElement parentElement = (OdfElement)getOwnerElement();
		String defaultValue = null;
		if (parentElement != null) {
			defaultValue = DEFAULT_VALUE;			
		}
		return defaultValue;
	}",Returns the default value of @odf.attribute table:orientation dependent of its element name,1,73
38,"public final StringConstantOperand asStringConstant() {
    return (StringConstantOperand) this;
  }",Cast to an  StringConstantOperand.,1,25
39,"public boolean verify(byte[] data, byte[] signedData) {
        RSAPublicKeySpec keySpec = new RSAPublicKeySpec(modulus, exponent);
        try {
            KeyFactory keyFactory = KeyFactory.getInstance(IdentityConstants.CERTIFICATE_ALGORITHM);
            PublicKey key = keyFactory.generatePublic(keySpec);
            Signature signatureVerifier = Signature.getInstance(IdentityConstants.SIGNATURE_ALGORITHM);
            signatureVerifier.initVerify(key);
            signatureVerifier.update(data);
            return signatureVerifier.verify(signedData);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""Insufficient support for '"" + IdentityConstants.CERTIFICATE_ALGORITHM + ""', required for identity management"", e);
        } catch (InvalidKeySpecException e) {
            return false;
        } catch (SignatureException e) {
            return false;
        } catch (InvalidKeyException e) {
            return false;
        }
    }","Verifies that the signedData was created by this certificate's corresponding private certificate, over the given data.",1,227
40,"public String getMandoc() {
        String value;
        return mandoc != null ? mandoc : (value =
            threadConfig.get().getMandoc()) != null ? value :
            System.getProperty(""org.opengrok.indexer.analysis.Mandoc"");
    }","Gets the name of the mandoc program to use: either the last value passed successfully to  #setMandoc(java.lang.String), or  Configuration#getMandoc(), or the system property for  ""org.opengrok.indexer.analysis.Mandoc"", or  null as a default.",1,74
41,"public Vector2D toSubSpace(Vector<Euclidean3D> vector) {
        return toSubSpace((Point<Euclidean3D>) vector);
    }",Transform a space point into a sub-space point.,1,35
42,"public String getWorkingDir() {
        return getWorkDirRaw().replaceAll(""\\\\"", ""\\\\\\\\""); // in order to keep back slash for ognl expression evaluation
    }",Gets the work directory of this schedule 'workdir'/'project'/'schedule'.,1,39
43,"public static String readStream(InputStream stream) {
		return BUILD_PROPERTIES.readStream(stream);
	}",Wrapper.,1,29
44,"public static RPCBlockResponse decode(ByteBuf in) {
    long blockId = in.readLong();
    long offset = in.readLong();
    long length = in.readLong();
    short status = in.readShort();
    DataBuffer data = null;
    if (length > 0) {
      // TODO: look into accessing Netty ByteBuf directly, to avoid copying the data.
      ByteBuffer buffer = ByteBuffer.allocate((int) length);
      in.readBytes(buffer);
      data = new DataByteBuffer(buffer, (int) length);
    }
    return new RPCBlockResponse(blockId, offset, length, data, Status.fromShort(status));
  }",Decode the input  ByteBuf into a  RPCBlockResponse object and return it.,1,179
45,"public TextAnchor getTextAnchor() {
        String json = parse.get(layout, ""text-anchor"");
        if (json == null) {
            return null;
        }
        return TextAnchor.parse(json);
    }",Part of the text placed closest to the anchor (requires text-field).,1,67
46,"public static <T extends Collection<?>> T validIndex(T collection, int index, String message, Object... values) {
        Validate.notNull(collection);
        if (index < 0 || index >= collection.size()) {
            throw new IndexOutOfBoundsException(String.format(message, values));
        }
        return collection;
    }","Validates that the index is within the bounds of the argument collection; otherwise throwing an exception with the specified message. Validate.validIndex(myCollection, 2, ""The collection index is invalid: ""); If the collection is null, then the message of the exception is &quot;The validated object is null&quot;.",1,111
47,"public boolean isFollowSymlinks() {
        return (isReference())
            ? getRef(getProject()).isFollowSymlinks() : followSymlinks;
    }",Find out if the fileset wants to follow symbolic links.,1,41
48,"protected AccountID createAccountID(String userID, Map<String, String> accountProperties)
    {
        // serverAddress == null is OK because of registrarless support
        String serverAddress = accountProperties.get(SERVER_ADDRESS);

        return new SipAccountIDImpl(userID, accountProperties, serverAddress);
    }",Creates a new SipAccountIDImpl instance with a specific user,1,64
49,"static String asString(Object o) {
		if (o == null) {
			return null;
		} else if (o instanceof String) {
			return (String) o;
		} else if (o instanceof Boolean || o instanceof Number) {
			return o.toString();
		} else if (o instanceof Collection) {
			return ((Collection<?>) o).stream().map(item -> asString(item)).collect(Collectors.joining("", "", ""["", ""]""));
		} else if (o instanceof Optional) {
			final Optional<?> optional = (Optional<?>) o;
			return optional.isPresent() ? asString(optional.get()) : null;
		} else {
			return o.toString();
		}
	}","Converts an Object o to a String according to these rules:  Null and String values are passed back. Boolean and Number are mapped to their toString() value. Collection o1, o2, ...",1,254
50,"public static ExchangeFilterFunction basicAuthentication() {
		return basicAuthenticationInternal(
				request -> request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE).map(o -> (Credentials)o));
	}","Return a filter that adds an Authorization header for HTTP Basic Authentication, based on the  Credentials provided in the plain ClientRequest#attributes() request attributes.",1,49
51,"public String getPath(Uri uri) {
        final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;

        // DocumentProvider
        if (isKitKat && DocumentsContract.isDocumentUri(getApplicationContext(), uri)) {
            // ExternalStorageProvider
            if (isExternalStorageDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                final String type = split[0];

                if (""primary"".equalsIgnoreCase(type)) {
                    return Environment.getExternalStorageDirectory() + ""/"" + split[1];
                }
            }
            // DownloadsProvider
            else if (isDownloadsDocument(uri)) {

                final String id = DocumentsContract.getDocumentId(uri);
                final Uri contentUri = ContentUris.withAppendedId(Uri.parse(""content://downloads/public_downloads""),
                        Long.valueOf(id));

                return getDataColumn(getApplicationContext(), contentUri, null, null);
            }
            // MediaProvider
            else if (isMediaDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                final String type = split[0];

                Uri contentUri = null;
                if (""image"".equals(type)) {
                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                } else if (""video"".equals(type)) {
                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                } else if (""audio"".equals(type)) {
                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                }

                final String selection = ""_id=?"";
                final String[] selectionArgs = new String[] { split[1] };

                return getDataColumn(getApplicationContext(), contentUri, selection, selectionArgs);
            } 
        }
        // MediaStore (and general)
        else if (""content"".equalsIgnoreCase(uri.getScheme())) {

            // Return the remote address
            if (isGooglePhotosUri(uri))
                return uri.getLastPathSegment();

            return getDataColumn(getApplicationContext(), uri, null, null);
        }
        // File
        else if (""file"".equalsIgnoreCase(uri.getScheme())) {
            return uri.getPath();
        }
        return null;
    }",Translates a content URI of an content to a physical path on the disk,1,644
52,"public int getAdaptationSetIndex(int type) {
    int adaptationCount = adaptationSets.size();
    for (int i = 0; i < adaptationCount; i++) {
      if (adaptationSets.get(i).type == type) {
        return i;
      }
    }
    return C.INDEX_UNSET;
  }","Returns the index of the first adaptation set of a given type, or  C#INDEX_UNSET if no adaptation set of the specified type exists.",1,98
53,"public Plan plan(AnalyzedStatement analyzedStatement, PlannerContext plannerContext) {
        return process(analyzedStatement, plannerContext);
    }",dispatch plan creation based on analyzed statement,1,33
54,"public ChannelType getChannelType(Channel channel, Locale locale) {
        ChannelTypeUID channelTypeUID = channel.getChannelTypeUID();
        if (channelTypeUID != null) {
            return TypeResolver.resolve(channelTypeUID);
        }
        // fallback for lookup over the thing type
        ChannelUID channelUID = channel.getUID();
        ThingType thingType = this.getThingType(channelUID.getThingTypeUID(), locale);
        if (thingType != null) {
            channelTypeUID = thingType.getChannelTypeUID(channelUID);
            if (channelTypeUID != null) {
                return TypeResolver.resolve(channelTypeUID);
            }
        }
        return null;
    }",Returns the channel type for a given channel and locale.,1,166
55,"public UserCodeWrapper<T> getUserCodeWrapper() {
		return udf;
	}",Gets the function that is held by this operator.,1,22
56,"public boolean isUninterestingStreamEscape(Location location) {
		return uninterestingStreamEscapeSet.contains(location);
	}",Determine if an uninteresting stream escapes at given location.,1,27
57,"public long getWidth() {
		String sWidth = maColumnElement.getProperty(OdfTableColumnProperties.ColumnWidth);
		if (sWidth == null) {
			sWidth = DEFAULT_WIDTH;
		}
		return (long) (PositiveLength.parseDouble(sWidth, Unit.MILLIMETER) * 100);
	}",Get the width of the column (in 1/100th Millimeter).,1,81
58,"protected static ArrayList<WSDSample> getTestData(String wordTag) {

    ArrayList<WSDSample> instances = new ArrayList<WSDSample>();
    for (WordToDisambiguate wtd : seReader.getSensevalData(wordTag)) {

      String targetLemma = Loader.getLemmatizer().lemmatize(wtd.getWord(),
          wtd.getPosTag());

      WSDSample sample = new WSDSample(wtd.getSentence(), wtd.getPosTags(),
          wtd.getWordIndex(), targetLemma);
      sample.setSenseIDs(wtd.getSenseIDs());
      
      if (sample != null) {
        if (sample.getSenseIDs().get(0) != null
            && !sample.getSenseIDs().get(0).equalsIgnoreCase(""U"")) {
          instances.add(sample);
        }
      }

    }

    return instances;
  }","For a specific word, return the Semeval3 corresponding instances in form of  WSDSample",1,233
59,"public Definition remove(long definitionId)
		throws NoSuchDefinitionException, SystemException {
		return remove(Long.valueOf(definitionId));
	}",Removes the definition with the primary key from the database.,1,38
60,"public static Node createPackageView( SourceGroup group ) {
        return new PackageRootNode( group );
    }",Create a node which will contain package-oriented view.,1,33
61,"public RVMMethod resolveInterfaceMethod() throws IncompatibleClassChangeError, NoSuchMethodError {
    if (resolvedMember != null) return resolvedMember;

    // Hasn't been resolved yet. Do it now.
    RVMClass declaringClass = (RVMClass) type.resolve();
    if (!declaringClass.isResolved()) {
      declaringClass.resolve();
    }

    /* Interface method may be either in interface, or a miranda.
    */
    if (!declaringClass.isInterface() && !isMiranda()) {
      throw new IncompatibleClassChangeError();
    }
    RVMMethod ans = resolveInterfaceMethodInternal(declaringClass);
    if (ans == null) {
      throw new NoSuchMethodError(this.toString());
    }
    return ans;
  }",Find the RVMMethod that this member reference refers to using the search order specified in JVM spec 5.4.3.4.,1,174
62,"protected IViewer getContentViewer() {
		return domain.getAdapter(
				AdapterKey.get(IViewer.class, IDomain.CONTENT_VIEWER_ROLE));
	}",Returns the  IViewer of the  Domain that was previously injected.,1,38
63,"public Ava getAva()
    {
        switch ( nbAvas )
        {
            case 0:
                return null;

            case 1:
                return ava;

            default:
                return avas.get( 0 ).clone();
        }
    }","Return the unique Ava, or the first one of we have more than one",1,75
64,"public static List<ColumnDefinition> fromSchema(Row row, CFMetaData cfm)
    {
        if (row.cf == null)
            return Collections.emptyList();

        List<ColumnDefinition> cds = new ArrayList<ColumnDefinition>();
        for (UntypedResultSet.Row result : QueryProcessor.resultify(""SELECT * FROM system.schema_columns"", row))
        {
            try
            {
                IndexType index_type = null;
                Map<String,String> index_options = null;
                String index_name = null;
                Integer componentIndex = null;

                if (result.has(""index_type""))
                    index_type = IndexType.valueOf(result.getString(""index_type""));
                if (result.has(""index_options""))
                    index_options = FBUtilities.fromJsonMap(result.getString(""index_options""));
                if (result.has(""index_name""))
                    index_name = result.getString(""index_name"");
                if (result.has(""component_index""))
                    componentIndex = result.getInt(""component_index"");

                cds.add(new ColumnDefinition(cfm.getColumnDefinitionComparator(componentIndex).fromString(result.getString(""column_name"")),
                                             TypeParser.parse(result.getString(""validator"")),
                                             index_type,
                                             index_options,
                                             index_name,
                                             componentIndex));
            }
            catch (RequestValidationException e)
            {
                throw new RuntimeException(e);
            }
        }

        return cds;
    }",Deserialize columns from low-level representation,1,381
65,"public PodTemplate getTemplate(Label label) {
        for (PodTemplate t : templates) {
            if (label == null || label.matches(t.getLabelSet())) {
                return t;
            }
        }
        return null;
    }",Gets  PodTemplate that has the matching  Label.,1,77
66,"public static Outlink[] getOutlinks(final String plainText, String anchor, Configuration conf) {
    long start = System.currentTimeMillis();
    final List outlinks = new ArrayList();

    try {
      final PatternCompiler cp = new Perl5Compiler();
      final Pattern pattern = cp.compile(URL_PATTERN,
          Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.READ_ONLY_MASK
              | Perl5Compiler.MULTILINE_MASK);
      final PatternMatcher matcher = new Perl5Matcher();

      final PatternMatcherInput input = new PatternMatcherInput(plainText);

      MatchResult result;
      String url;

      //loop the matches
      while (matcher.contains(input, pattern)) {
        // if this is taking too long, stop matching
        //   (SHOULD really check cpu time used so that heavily loaded systems
        //   do not unnecessarily hit this limit.)
        if (System.currentTimeMillis() - start >= 60000L) {
          if (LOG.isWarnEnabled()) {
            LOG.warn(""Time limit exceeded for getOutLinks"");
          }
          break;
        }
        result = matcher.getMatch();
        url = result.group(0);
        try {
          Outlink outlink = new Outlink(url, anchor, conf);
          outlinks.add(new Outlink(url, anchor, conf));
        } catch (MalformedURLException mue) {
          LOG.warn(""Invalid url: '"" + url + ""', skipping."");
        }
      }
    } catch (Exception ex) {
      // if the matcher fails (perhaps a malformed URL) we just log it and move on
      if (LOG.isErrorEnabled()) { LOG.error(""getOutlinks"", ex); }
    }

    final Outlink[] retval;

    //create array of the Outlinks
    if (outlinks != null && outlinks.size() > 0) {
      retval = (Outlink[]) outlinks.toArray(new Outlink[0]);
    } else {
      retval = new Outlink[0];
    }

    return retval;
  }",Extracts Outlink from given plain text and adds anchor to the extracted Outlinks,1,507
67,"public KaleoNotification remove(KaleoNotification kaleoNotification)
		throws SystemException {
		return super.remove(kaleoNotification);
	}",Removes the kaleo notification from the database.,1,32
68,"@Override
    public Object parse(final CharSequence text, final ParsePosition pos) throws ParseException {
        if (parser == null) try {
            Constructor<? extends Parser> c = parserConstructor;
            if (c == null) {
                c = Class.forName(""org.apache.sis.io.wkt.GeodeticObjectParser"").asSubclass(Parser.class)
                         .getDeclaredConstructor(Symbols.class, Convention.class, Boolean.TYPE, Locale.class, Map.class);
                parserConstructor = c;
            }
            if (factories == null) {
                factories = new HashMap<>();
            }
            parser = c.newInstance(symbols, convention, false, getLocale(Locale.Category.DISPLAY), factories);
        } catch (ClassNotFoundException e) {
            throw (ParseException) new LocalizedParseException(getLocale(Locale.Category.DISPLAY),
                    Errors.Keys.MissingRequiredModule_1, new String[] {""sis-referencing""}, 0).initCause(e);
        } catch (ReflectiveOperationException e) {
            throw (ParseException) new ParseException(e.getMessage(), 0).initCause(e);
        }
        return parser.parseObject(text.toString(), pos);
    }",Creates an object from the given character sequence.,1,329
70,"public boolean addBean(Object o, boolean managed)
    {
        return addBean(o,managed?Managed.MANAGED:Managed.UNMANAGED);
    }","Adds the given bean, explicitly managing it or not.",1,41
71,"private List<Occupant> getOccupants(MUCRole role) throws NoResponseException, XMPPErrorException, NotConnectedException {
        MUCAdmin iq = new MUCAdmin();
        iq.setTo(room);
        iq.setType(IQ.Type.get);
        // Set the specified role. This may request the list of moderators/participants.
        MUCItem item = new MUCItem(role);
        iq.addItem(item);

        MUCAdmin answer = (MUCAdmin) connection.createPacketCollectorAndSend(iq).nextResultOrThrow();
        // Get the list of participants from the server's answer
        List<Occupant> participants = new ArrayList<Occupant>();
        for (MUCItem mucadminItem : answer.getItems()) {
            participants.add(new Occupant(mucadminItem));
        }
        return participants;
    }",Returns a list of Occupant that have the specified room role.,1,181
72,"public List<Long> getRequestsByStatus(RequestStatus status, int maxResults, boolean ascOrder) {
    return db.getRequestsByStatus(status, maxResults, ascOrder);
  }",Get first or last maxResults requests that are in the specified status,1,46
73,"public final TernaryVennModel3<E> getModel()
    {
        return model;
    }",Return the model for this ternary venn label.,1,25
74,"public static int keyCodeFromString(String symbolicName) {
        if (symbolicName == null) {
            throw new IllegalArgumentException(""symbolicName must not be null"");
        }

        final int count = KEYCODE_SYMBOLIC_NAMES.length;
        for (int i = 0; i < count; i++) {
            if (symbolicName.equals(KEYCODE_SYMBOLIC_NAMES[i])) {
                return i;
            }
        }

        try {
            return Integer.parseInt(symbolicName,10);
        } catch (NumberFormatException ex) {
            return -1;
        }
    }","Gets a keycode by its symbolic name such as ""KEYCODE_A"" or ""1001"" (if unknown).",1,161
75,"public static String getNumericPattern( double dValue )
	{
		if ( ChartUtil.mathEqual( dValue, (long) dValue ) )
		{
			// IF MANTISSA IS INSIGNIFICANT, SHOW LABELS AS INTEGERS
			return sNumericPattern;
		}

		final DecimalFormatSymbols dfs = new DecimalFormatSymbols( );
		String sValue = String.valueOf( dValue );
		int iEPosition = sValue.indexOf( dfs.getExponentSeparator( ) );

		if ( iEPosition > 0 )
		{
			dValue = Double.valueOf( sValue.substring( 0, iEPosition ) )
					.doubleValue( );

			if ( ChartUtil.mathEqual( dValue, Math.round( dValue ) ) )
			{
				// IF MANTISSA IS INSIGNIFICANT, SHOW LABELS AS INTEGERS
				return ""0E0""; //$NON-NLS-1$
			}
			else
			{
				sValue = String.valueOf( dValue );
			}
		}

		final int iDecimalPosition = sValue.indexOf( dfs.getDecimalSeparator( ) );
		// THIS RELIES ON THE FACT THAT IN ANY LOCALE, DECIMAL IS A DOT
		if ( iDecimalPosition >= 0 )
		{
			int n = sValue.length( );
			for ( int i = n - 1; i > 0; i-- )
			{
				if ( sValue.charAt( i ) == '0' )
				{
					n--;
				}
				else
				{
					break;
				}
			}
			final int iMantissaCount = n - 1 - iDecimalPosition;
			final StringBuffer sb = new StringBuffer( sNumericPattern );
			if ( iMantissaCount > 0 )
			{
				sb.append( '.' );
				for ( int i = 0; i < iMantissaCount; i++ )
				{
					sb.append( '0' );
				}
			}
			if ( iEPosition > 0 )
			{
				sb.append( ""E0"" ); //$NON-NLS-1$
			}
			return sb.toString( );
		}
		return sNumericPattern;
	}",Returns an auto computed decimal format pattern for category data or axis label.,1,548
76,"protected final long requestMarketData(String inSymbols,
                                           String inSource)
    {
        if(inSymbols != null &&
           !inSymbols.isEmpty()) {
            StringBuilder request = new StringBuilder();
            request.append(""type=marketdata:symbols="").append(inSymbols); //$NON-NLS-1$
            try {
                return strategy.getServicesProvider().requestMarketData(DataRequest.newRequestFromString(request.toString()),
                                                                        inSource);
            } catch (Exception e) {
                INVALID_MARKET_DATA_REQUEST.warn(this,
                                                 e,
                                                 strategy,
                                                 inSymbols,
                                                 inSource);
                return 0;
            }
        }
        INVALID_MARKET_DATA_REQUEST.warn(this,
                                         strategy,
                                         inSymbols,
                                         inSource);
        return 0;
    }",Requests market data from the given source.,1,191
77,"public P named(String name) {
      Preconditions.checkNotNull(name, ""Name is required"");
      Preconditions.checkNotNull(repetition, ""Repetition is required"");

      Type type = build(name);
      if (parent != null) {
        // if the parent is a GroupBuilder, add type to it
        if (GroupBuilder.class.isAssignableFrom(parent.getClass())) {
          GroupBuilder.class.cast(parent).addField(type);
        }
        return parent;
      } else {
        // no parent indicates that the Type object should be returned
        // the constructor check guarantees that returnClass is a Type
        return returnClass.cast(type);
      }
    }","Builds a  Type and returns the parent builder, if given, or the  Type that was built.",1,147
78,"public static Constant readUnsafeConstant(Kind kind, Object base, long displacement) {
        switch (kind) {
            case Boolean:
                return Constant.forBoolean(base == null ? unsafe.getByte(displacement) != 0 : unsafe.getBoolean(base, displacement));
            case Byte:
                return Constant.forByte(base == null ? unsafe.getByte(displacement) : unsafe.getByte(base, displacement));
            case Char:
                return Constant.forChar(base == null ? unsafe.getChar(displacement) : unsafe.getChar(base, displacement));
            case Short:
                return Constant.forShort(base == null ? unsafe.getShort(displacement) : unsafe.getShort(base, displacement));
            case Int:
                return Constant.forInt(base == null ? unsafe.getInt(displacement) : unsafe.getInt(base, displacement));
            case Long:
                return Constant.forLong(base == null ? unsafe.getLong(displacement) : unsafe.getLong(base, displacement));
            case Float:
                return Constant.forFloat(base == null ? unsafe.getFloat(displacement) : unsafe.getFloat(base, displacement));
            case Double:
                return Constant.forDouble(base == null ? unsafe.getDouble(displacement) : unsafe.getDouble(base, displacement));
            case Object:
                return Constant.forObject(unsafe.getObject(base, displacement));
            default:
                throw GraalInternalError.shouldNotReachHere();
        }
    }",Utility function for reading a value of this kind using a base address and a displacement.,1,428
79,"public int filterCountByG_L(long groupId, boolean latest)
		throws SystemException {
		if (!InlineSQLHelperUtil.isEnabled(groupId)) {
			return countByG_L(groupId, latest);
		}

		StringBundler query = new StringBundler(3);

		query.append(_FILTER_SQL_COUNT_ARTICLE_WHERE);

		query.append(_FINDER_COLUMN_G_L_GROUPID_2);

		query.append(_FINDER_COLUMN_G_L_LATEST_2);

		String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(),
				Article.class.getName(), _FILTER_COLUMN_PK,
				_FILTER_COLUMN_USERID, groupId);

		Session session = null;

		try {
			session = openSession();

			SQLQuery q = session.createSQLQuery(sql);

			q.addScalar(COUNT_COLUMN_NAME,
				com.liferay.portal.kernel.dao.orm.Type.LONG);

			QueryPos qPos = QueryPos.getInstance(q);

			qPos.add(groupId);

			qPos.add(latest);

			Long count = (Long)q.uniqueResult();

			return count.intValue();
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}",Filters by the user's permissions and counts all the articles where groupId = &#63; and latest = &#63;.,1,319
80,"public Text compactStores() throws IOException {
    Text midKey = null;
    if (this.closed.get()) {
      return midKey;
    }
    try {
      synchronized (writestate) {
        if (!writestate.compacting && writestate.writesEnabled) {
          writestate.compacting = true;
        } else {
          LOG.info(""NOT compacting region "" + getRegionName() +
              "": compacting="" + writestate.compacting + "", writesEnabled="" +
              writestate.writesEnabled);
            return midKey;
        }
      }
      LOG.info(""starting compaction on region "" + getRegionName());
      long startTime = System.currentTimeMillis();
      doRegionCompactionPrep();
      for (HStore store: stores.values()) {
        Text key = store.compact();
        if (key != null && midKey == null) {
          midKey = key;
        }
      }
      doRegionCompactionCleanup();
      LOG.info(""compaction completed on region "" + getRegionName() +
          "". Took "" +
          StringUtils.formatTimeDiff(System.currentTimeMillis(), startTime));
      
    } finally {
      synchronized (writestate) {
        writestate.compacting = false;
        writestate.notifyAll();
      }
    }
    return midKey;
  }",Called by compaction thread and after region is opened to compact the,1,358
81,"public KaleoTask remove(long kaleoTaskId)
		throws NoSuchTaskException, SystemException {
		return remove(Long.valueOf(kaleoTaskId));
	}",Removes the kaleo task with the primary key from the database.,1,38
82,"public List<String> verifyOAIharvester() {
    	String oaiSource = harvestRow.getOaiSource();
    	String oaiSetId = harvestRow.getOaiSetId();
    	String metaPrefix = harvestRow.getHarvestMetadataConfig();

    	return verifyOAIharvester(oaiSource, oaiSetId, metaPrefix, true);
    }",Verify OAI settings for the current collection,1,77
83,"private boolean isSimilar(EObject obj1, EObject obj2) throws FactoryException {
		boolean similar = false;

		// Defines all thresholds as constants.
		final double relationsThreshold = 0.9d;
		final double nameThreshold = 0.2d;
		final double triWayThreshold = 0.8d;
		final double softContentThreshold = 0.59d;
		final double strongContentTheshold = 0.9d;

		// Selects the content and general Threshold to consider
		double contentThreshold = softContentThreshold;
		double generalThreshold = THRESHOLD;
		if (currentStrategy == STRONG_STRATEGY) {
			contentThreshold = strongContentTheshold;
			generalThreshold = STRONGER_THRESHOLD;
		}

		if (haveSameXmiId(obj1, obj2)) {
			similar = true;
		} else {
			final double nameSimilarity = nameSimilarity(obj1, obj2);
			final boolean hasSameUri = hasSameUri(obj1, obj2);
			if (nameSimilarity == 1 && hasSameUri) {
				similar = true;
			} else {
				final double contentSimilarity = contentSimilarity(obj1, obj2);
				final double relationsSimilarity = relationsSimilarity(obj1, obj2);

				if (nameSimilarity > generalThreshold && relationsSimilarity > relationsThreshold) {
					similar = true;
				} else if (relationsSimilarity == 1 && hasSameUri) {
					similar = true;
				} else if (relationsSimilarity > generalThreshold && contentSimilarity > contentThreshold
						&& nameSimilarity > nameThreshold) {
					similar = true;
				} else if (contentSimilarity > triWayThreshold && nameSimilarity > triWayThreshold
						&& relationsSimilarity > triWayThreshold) {
					similar = true;
				} else if (contentSimilarity > generalThreshold && nameSimilarity > generalThreshold
						&& typeSimilarity(obj1, obj2) > generalThreshold) {
					similar = true;
				}
			}
		}
		return similar;
	}",Returns True if the 2 given  EObjects are considered similar.,1,508
84,"protected final Deque<ReportBase> getExecutionReports(OrderID inOrderID)
    {
        if (inOrderID == null) {
            return EMPTY_REPORTS;
        }
        return orderHistoryManager.getReportHistoryFor(inOrderID); 
    }",Gets the ReportBase values representing the order history of the given OrderID.,1,57
85,"public static CiConstant forShort(short i) {
        return get(CiKind.Short, i);
    }",Creates a boxed short constant.,1,32
86,"public static <T> Iterable<T> drop(final int n, final Iterable<T> xs) {
    if (n < 0) {
      throw new IllegalArgumentException(""Cannot drop a negative number of elements"");
    }
    if (xs instanceof List<?>) {
      final List<T> list = (List<T>) xs;
      if (n > (list.size() - 1)) {
        return Collections.emptyList();
      }
      return ((List<T>) xs).subList(n, list.size());
    }
    return new Range<>(n, Integer.MAX_VALUE, xs);
  }",Drop the first  n  xs and return the rest.,1,191
87,"private long touch(File file) {
        long origional = file.lastModified();
        if (origional == 0l) {
            return 0l; // cannot modify a file that does not exsist
        }
        long after = origional;
        do {
            file.setLastModified(System.currentTimeMillis());
        } while (origional == (after = file.lastModified()));
        return after;
    }","Changes the  File#lastModified() file.lastModified() timestamp, making sure the result differs from its current timestamp; may delay long enough to match file system resolution (2 seconds).",1,116
88,"private ValueRow getKey(Value[] values) {
        if (indexes != null) {
            Value[] r = new Value[indexes.length];
            for (int i = 0; i < indexes.length; i++) {
                r[i] = values[indexes[i]];
            }
            values = r;
        }
        return ValueRow.get(values);
    }",Reorder values if required and convert them into  ValueRow.,1,122
89,"public VaadinServiceSession getSession() {
        return session;
    }",Gets the Vaadin service session that has been initialized.,1,19
90,"public static boolean tryPlaceFluid(@Nullable EntityPlayer player, World world, BlockPos pos, IFluidHandler fluidSource, FluidStack resource)
    {
        if (world == null || resource == null || pos == null)
        {
            return false;
        }

        Fluid fluid = resource.getFluid();
        if (fluid == null || !fluid.canBePlacedInWorld())
        {
            return false;
        }

        if (fluidSource.drain(resource, false) == null)
        {
            return false;
        }

        // check that we can place the fluid at the destination
        IBlockState destBlockState = world.getBlockState(pos);
        Material destMaterial = destBlockState.getMaterial();
        boolean isDestNonSolid = !destMaterial.isSolid();
        boolean isDestReplaceable = destBlockState.getBlock().isReplaceable(world, pos);
        if (!world.isAirBlock(pos) && !isDestNonSolid && !isDestReplaceable)
        {
            return false; // Non-air, solid, unreplacable block. We can't put fluid here.
        }

        if (world.provider.doesWaterVaporize() && fluid.doesVaporize(resource))
        {
            FluidStack result = fluidSource.drain(resource, true);
            if (result != null)
            {
                result.getFluid().vaporize(player, world, pos, result);
                return true;
            }
        }
        else
        {
            // This fluid handler places the fluid block when filled
            IFluidHandler handler = getFluidBlockHandler(fluid, world, pos);
            FluidStack result = tryFluidTransfer(handler, fluidSource, resource, true);
            if (result != null)
            {
                SoundEvent soundevent = resource.getFluid().getEmptySound(resource);
                world.playSound(player, pos, soundevent, SoundCategory.BLOCKS, 1.0F, 1.0F);
                return true;
            }
        }
        return false;
    }",Tries to place a fluid resource into the world as a block and drains the fluidSource.,1,498
91,"IoBuffer write( byte[] keytabVersion, List<KeytabEntry> entries )
    {
        IoBuffer buffer = IoBuffer.allocate( 512 );
        putKeytabVersion( buffer, keytabVersion );
        putKeytabEntries( buffer, entries );
        buffer.flip();

        return buffer;
    }",Write the keytab version and entries into a  IoBuffer.,1,83
92,"public static Collection plus(Collection left, Collection right) {
        Collection answer;
        if (left instanceof Set)
            answer = new HashSet();
        else
            answer = new ArrayList(left.size() + right.size());
        answer.addAll(left);
        answer.addAll(right);
        return answer;
    }",Create a Collection as a union of two collections.,1,104
93,"public String getPassword()
    {
        return password;
    }",Get the optional password attribute associated for a User.,1,20
94,"public Class loadScriptByName(String scriptName) throws ResourceException, ScriptException {
        return loadScriptByName( scriptName, getClass().getClassLoader());
    }","Get the class of the scriptName in question, so that you can instantiate Groovy objects with caching and reloading.",1,42
95,"public int dotProduct(Ray r) {
	return x * r.x + y * r.y;
}",Calculates the dot product of this Ray with another.,1,37
96,"static BlobKey put(BlobService service, @Nullable JobID jobId, byte[] data, BlobKey.BlobType blobType)
			throws IOException {
		if (blobType == PERMANENT_BLOB) {
			if (service instanceof BlobServer) {
				return ((BlobServer) service).putPermanent(jobId, data);
			} else {
				// implement via JAR file upload instead:
				File tmpFile = Files.createTempFile(""blob"", "".jar"").toFile();
				try {
					FileUtils.writeByteArrayToFile(tmpFile, data);
					InetSocketAddress serverAddress = new InetSocketAddress(""localhost"", service.getPort());
					// uploading HA BLOBs works on BlobServer only (and, for now, via the BlobClient)
					Configuration clientConfig = new Configuration();
					List<Path> jars = Collections.singletonList(new Path(tmpFile.getAbsolutePath()));
					List<PermanentBlobKey> keys = BlobClient.uploadJarFiles(serverAddress, clientConfig, jobId, jars);
					assertEquals(1, keys.size());
					return keys.get(0);
				} finally {
					//noinspection ResultOfMethodCallIgnored
					tmpFile.delete();
				}
			}
		} else if (jobId == null) {
			return service.getTransientBlobService().putTransient(data);
		} else {
			return service.getTransientBlobService().putTransient(jobId, data);
		}
	}",Helper to choose the right  BlobServer#putTransient method.,1,347
97,"public static String getParserName() {
        try {
            SAXParserFactory factory = SAXParserFactory.newInstance();
            return factory.newSAXParser().getXMLReader().getClass().getName();
        } catch (Exception e) {
            return null;
        }
    }",Returns the fully qualified classname of an XML parser for,1,78
98,"static public String dateToString(Date d) {
        return ISO8601_FORMAT.get().format(d);
    }",Convert a date/time to an ISO 8601 string,1,33
99,"public Object getModel() {
        return transformationContextsRev.get(0).getTargetModel();
    }",Returns the context's target model.,1,28
100,"public static Beacon fromScanData(byte[] scanData, int rssi) {
        return fromScanData(scanData, rssi, null);
    }",Construct an Beacon from a Bluetooth LE packet collected by Android's Bluetooth APIs,1,40
101,"public Scan setTimeRange(long minStamp, long maxStamp) throws IOException {
    return (Scan) super.setTimeRange(minStamp, maxStamp);
  }","Set versions of columns only within the specified timestamp range, [minStamp, maxStamp).",1,43
102,"public static double get(OperationMetricKey key, ASTMethodOrConstructorDeclaration node) {
        // TODO:cf think about caching
        return TOP_LEVEL_PACKAGE.compute(key, node, false);
    }",Computes a metric identified by its code on a operation AST node.,1,43
103,"public static WebdavClient createOwnCloudClient(Uri uri, Context context, boolean followRedirects) {
        try {
            NetworkUtils.registerAdvancedSslContext(true, context);
        }  catch (GeneralSecurityException e) {
            Log.e(TAG, ""Advanced SSL Context could not be loaded. Default SSL management in the system will be used for HTTPS connections"", e);
            
        } catch (IOException e) {
            Log.e(TAG, ""The local server truststore could not be read. Default SSL management in the system will be used for HTTPS connections"", e);
        }
        
        WebdavClient client = new WebdavClient(NetworkUtils.getMultiThreadedConnManager());
        
        client.setDefaultTimeouts(DEFAULT_DATA_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT);
        client.setBaseUri(uri);
        client.setFollowRedirects(followRedirects);
        
        return client;
    }",Creates a WebdavClient to access a URL and sets the desired parameters for ownCloud client connections.,1,171
104,"public static int createByteFile(TachyonFS tfs, TachyonURI fileURI, WriteType op, int len)
      throws IOException {
    int fileId = tfs.createFile(fileURI);
    TachyonFile file = tfs.getFile(fileId);
    OutStream os = file.getOutStream(op);

    for (int k = 0; k < len; k ++) {
      os.write((byte) k);
    }
    os.close();

    return fileId;
  }",Creates a simple file with len bytes.,1,143
105,"public List getConditions()
    {
        return Collections.unmodifiableList( this.conditions );
    }",Retrieve the List of Conditions for this rule.,1,29
106,"public Range getVisibleRowRange() {
        if (!body.visualRowOrder.isEmpty()) {
            return Range.withLength(body.getTopRowLogicalIndex(),
                    body.visualRowOrder.size());
        } else {
            return Range.withLength(0, 0);
        }
    }",Gets the logical index range of currently visible rows.,1,78
107,"public <K, V> KTable<K, V> table(final String topic,
                                     final String storeName) {
        return table(null, null, null, topic, storeName);
    }",Create a  KTable for the specified topic.,1,60
108,"public byte[] getPayloadAsBytes() throws Exception
    {
        return (byte[]) trans.transform(payload);
    }",Converts the payload implementation into a String representation,1,37
109,"public FieldDescriptor getField(final String name) {
        FieldDescriptor[] fields = ((ClassDescriptor) getHolder()).getFields();
        for (int i = 0; i < fields.length; ++i) {
            FieldDescriptor field = fields[i];
            if ((field.hasNature(FieldDescriptorJDONature.class.getName()))
                    && (field.getFieldName().equals(name))) {
                return field;
            }
        }
        
        FieldDescriptor[] identities = ((ClassDescriptorImpl) getHolder()).getIdentities();
        for (int i = 0; i < identities.length; ++i) {
            FieldDescriptor field = identities[i];
            if ((field.hasNature(FieldDescriptorJDONature.class.getName()))
                    && (field.getFieldName().equals(name))) {
                return field;
            }
        }

        return null;
    }",Returns the  FieldDescriptor for the given name.,1,261
110,"public final static ResultMatrix getOutputFormat() {
    ResultMatrix	result;
    
    try {
      String[] options = Utils.splitOptions(get(""OutputFormat"", ResultMatrixPlainText.class.getName()));
      String classname = options[0];
      options[0]       = """";
      result           = (ResultMatrix) Utils.forName(ResultMatrix.class, classname, options);
    }
    catch (Exception e) {
      e.printStackTrace();
      result = new ResultMatrixPlainText();
    }
    
    // override with other default properties
    result.setMeanPrec(getMeanPrecision());
    result.setStdDevPrec(getStdDevPrecision());
    result.setShowAverage(getShowAverage());
    result.setShowStdDev(getShowStdDevs());
    result.setRemoveFilterName(getRemoveFilterClassnames());

    return result;
  }","returns the classname (and optional options) of the ResultMatrix class, responsible for the output format.",1,215
111,"public MongoClientSettings build() {
            return new MongoClientSettings(this);
        }",Build an instance of  MongoClientSettings.,1,24
112,"public File find( String location ) throws IOException {
        Resource resource = get( Paths.convert(location) );
        return Resources.find( resource );
    }",Performs file lookup.,1,55
113,"public Audio loadSound(String s) {
        try {
            Audio a = _audioFiles.get(s);
            if (a == null) {
                a = AudioLoader.getAudio(""OGG"", ResourceLoader.getResourceAsStream(""org/terasology/data/sounds/"" + s + "".ogg""));
                _audioFiles.put(s, a);
            }
            return a;
        } catch (IOException e) {
            Terasology.getInstance().getLogger().log(Level.SEVERE, e.getLocalizedMessage());
        }

        return null;
    }","Return an audio file, loading it from disk if it isn't in the cache yet",1,155
114,"public RuleDescr rule( PackageDescrBuilder pkg ) throws RecognitionException {
        RuleDescrBuilder rule = null;
        try {
            rule = helper.start( pkg,
                                 RuleDescrBuilder.class,
                                 null );

            // 'rule'
            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.RULE,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            if ( helper.validateIdentifierKey( DroolsSoftKeywords.WHEN ) ||
                 helper.validateIdentifierKey( DroolsSoftKeywords.THEN ) ||
                 helper.validateIdentifierKey( DroolsSoftKeywords.END ) ) {
                failMissingTokenException();
                return null; // in case it is backtracking
            }

            String name = stringId();
            if ( state.failed ) return null;
            if ( state.backtracking == 0 ) {
                rule.name( name );
                helper.setParaphrasesValue( DroolsParaphraseTypes.RULE,
                                            ""\"""" + name + ""\"""" );
                if ( input.LA( 1 ) != DRLLexer.EOF ) {
                    helper.emit( Location.LOCATION_RULE_HEADER );
                }
            }

            if ( helper.validateIdentifierKey( DroolsSoftKeywords.EXTENDS ) ) {
                // 'extends'
                match( input,
                       DRLLexer.ID,
                       DroolsSoftKeywords.EXTENDS,
                       null,
                       DroolsEditorType.KEYWORD );
                if ( state.failed ) return null;

                String parent = stringId();
                if ( state.backtracking == 0 ) rule.extendsRule( parent );
                if ( state.failed ) return null;
            }

            if ( state.backtracking == 0 && input.LA( 1 ) != DRLLexer.EOF ) {
                helper.emit( Location.LOCATION_RULE_HEADER );
            }

            while ( input.LA( 1 ) == DRLLexer.AT ) {
                // annotation*
                annotation( rule );
                if ( state.failed ) return null;
            }

            attributes( rule );

            if ( helper.validateIdentifierKey( DroolsSoftKeywords.WHEN ) ) {
                lhs( rule );
            } else {
                // creates an empty LHS
                rule.lhs();
            }

            rhs( rule );

            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.END,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

        } catch ( RecognitionException re ) {
            reportError( re );
        } finally {
            helper.end( RuleDescrBuilder.class,
                        rule );
        }
        return (rule != null) ? rule.getDescr() : null;
    }",rule := RULE stringId (EXTENDS stringId)? annotation attributes? lhs? rhs END,1,748
115,"public static ExtendedProperty getExtendedProperty( Chart cm, String propertyName )
	{
		for ( ExtendedProperty property : cm.getExtendedProperties( ) )
		{
			if ( property.getName( ).equals( propertyName ) )
			{
				return property;
			}
		}
		return null;
	}",Finds the ExtendedProperty in chart model according to property name,1,91
116,"public Object caseCurveFitting( CurveFitting object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Curve Fitting'.,1,25
117,"public boolean trySampling() {
        return !on || samplingCount.get() <= sampleNumPM;
    }",Is sampling allowed.,1,34
118,"public static byte[] toPrimitive(final Byte[] array) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_BYTE_ARRAY;
        }
        final byte[] result = new byte[array.length];
        for (int i = 0; i < array.length; i++) {
            result[i] = array[i].byteValue();
        }
        return result;
    }",Converts an array of object Bytes to primitives. This method returns null if null array input.,1,150
119,"public final ConditionOperand asCondition() {
    return (ConditionOperand) this;
  }",Cast to an  ConditionOperand.,1,25
120,"protected List getListEditParts( )
	{
		List listParts = new ArrayList( );
		for ( Iterator iter = getSelectedObjects( ).iterator( ); iter.hasNext( ); )
		{
			Object obj = iter.next( );
			if ( obj instanceof ListEditPart )
			{
				if ( !( listParts.contains( obj ) ) )
				{
					listParts.add( (ListEditPart) obj );
				}
			}
			else if ( obj instanceof ListBandEditPart )
			{
				Object parent = (ListEditPart) ( (ListBandEditPart) obj ).getParent( );
				if ( !( listParts.contains( parent ) ) )
				{
					listParts.add( parent );
				}
			}
			else
			{
				return Collections.EMPTY_LIST;
			}
		}
		return listParts;
	}",Gets list edit parts.,1,253
121,"public List<Input> getInputs() {
        return inputs;
    }",This method is used to obtain the meta-information descriptions of  Inputs defined by this type.,1,22
122,"public String getSQLKeywords() {
        debugCodeCall(""getSQLKeywords"");
        return ""LIMIT,MINUS,OFFSET,ROWNUM,SYSDATE,SYSTIME,SYSTIMESTAMP,TODAY"";
    }","Gets the comma-separated list of all SQL keywords that are not supported as table/column/index name, in addition to the SQL-2003 keywords.",1,30
123,"protected void mergeConfiguration(GraphAlgorithmWrappingBase other) {
		super.mergeConfiguration(other);

		EdgeDegreePair rhs = (EdgeDegreePair) other;

		reduceOnTargetId.mergeWith(rhs.reduceOnTargetId);
	}",The degree can be counted from either the edge source or target IDs.,1,52
124,"public ArrayList getPointerParts() {
        return fXPointerParts;
    }",Returns an ArrayList of XPointerPart objects,1,19
125,"public Object caseTrigger( Trigger object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Trigger'.,1,25
126,"public Optional<ResolvedTable> resolveTable(String... tablePath) {
		checkArgument(tablePath != null && tablePath.length != 0, ""Table path must not be null or empty."");

		List<String> userPath = asList(tablePath);

		List<List<String>> prefixes = asList(
			asList(currentCatalogName, currentDatabaseName),
			singletonList(currentCatalogName),
			emptyList()
		);

		for (List<String> prefix : prefixes) {
			Optional<ResolvedTable> potentialTable = lookupPath(prefix, userPath);
			if (potentialTable.isPresent()) {
				return potentialTable;
			}
		}

		return Optional.empty();
	}",Tries to resolve a table path to a  ResolvedTable.,1,185
127,"public Iterable<FileObserver> getObservers() {
        return observers;
    }",Returns the set of  FileObserver registered with this monitor.,1,22
128,"public <E> ListAttribute<X, E> getDeclaredList(String name, Class<E> elementType) {
        // get the attribute parameterized by <Owning type, return Type> - throw an IAE if not found (no need to check hierarchy)
        // Handles UC1 and UC2
        ListAttribute<X, E> anAttribute = (ListAttribute<X, E>) getList(name, elementType);
        // The following verification step will throw an appropriate IAException if required (type checking has been done, and we can discard the return attribute here)
        getDeclaredAttribute(name);
        // We return an attribute that has passed through both a get, (optionally a type check) and a declared inheritance check
        // all of which would throw an IAException before the return below.
        return anAttribute;
    }",Return the List-valued attribute declared by the managed type that corresponds to the specified name and Java element type.,1,94
129,"@Deprecated
    public MigrationVersion getInitialVersion() {
        LOG.warn(""Flyway.getInitialVersion() has been deprecated. Use getInitVersion() instead. Will be removed in Flyway 3.0."");
        return initVersion;
    }",Retrieves the version to tag an existing schema with when executing init.,1,33
130,"public static boolean isUiStyleDefault(String backStackEntryName) {
        return backStackEntryName != null && backStackEntryName.startsWith(ENTRY_NAME_REPLACE);
    }",Returns true if the backstack represents GuidedStepSupportFragment with  #UI_STYLE_REPLACE; false otherwise.,1,39
131,"public Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {
        return performRequest(method, endpoint, params, null, headers);
    }",Sends a request to the elasticsearch cluster that the current client points to.,1,65
132,"public List<Socks5AuthScheme> authSchemes() {
        return Collections.unmodifiableList(authSchemes);
    }",Returns the List of this  Socks5InitRequest,1,27
134,"public static NimbusClient getConfiguredClientAs(Map<String, Object> conf, String asUser, Integer timeout) {
        Nimbus.Iface override = _localOverrideClient;
        if (override != null) {
            return new NimbusClient(override);
        }
        Map<String, Object> fullConf = Utils.readStormConfig();
        fullConf.putAll(Utils.readCommandLineOpts());
        fullConf.putAll(conf);
        conf = fullConf;
        if (conf.containsKey(Config.STORM_DO_AS_USER)) {
            if (asUser != null && !asUser.isEmpty()) {
                LOG.warn(""You have specified a doAsUser as param {} and a doAsParam as config, config will take precedence."",
                         asUser, conf.get(Config.STORM_DO_AS_USER));
            }
            asUser = (String) conf.get(Config.STORM_DO_AS_USER);
        }

        if (asUser == null || asUser.isEmpty()) {
            //The user is not set so lets see what the request context is.
            ReqContext context = ReqContext.context();
            Principal principal = context.principal();
            asUser = principal == null ? null : principal.getName();
            LOG.debug(""Will impersonate {} based off of request context."", asUser);
        }

        List<String> seeds = (List<String>) conf.get(Config.NIMBUS_SEEDS);

        for (String host : seeds) {
            int port = Integer.parseInt(conf.get(Config.NIMBUS_THRIFT_PORT).toString());
            NimbusSummary nimbusSummary;
            NimbusClient client = null;
            try {
                client = new NimbusClient(conf, host, port, timeout, asUser);
                nimbusSummary = client.getClient().getLeader();
                if (nimbusSummary != null) {
                    String leaderNimbus = nimbusSummary.get_host() + "":"" + nimbusSummary.get_port();
                    if (shouldLogLeader(leaderNimbus)) {
                        LOG.info(""Found leader nimbus : {}"", leaderNimbus);
                    }
                    if (nimbusSummary.get_host().equals(host) && nimbusSummary.get_port() == port) {
                        NimbusClient ret = client;
                        client = null;
                        return ret;
                    }
                    try {
                        return new NimbusClient(conf, nimbusSummary.get_host(), nimbusSummary.get_port(), timeout, asUser);
                    } catch (TTransportException e) {
                        throw new RuntimeException(""Failed to create a nimbus client for the leader "" + leaderNimbus, e);
                    }
                }
            } catch (Exception e) {
                LOG.warn(""Ignoring exception while trying to get leader nimbus info from "" + host
                         + "". will retry with a different seed host."", e);
                continue;
            } finally {
                if (client != null) {
                    client.close();
                }
            }
            throw new NimbusLeaderNotFoundException(""Could not find a nimbus leader, please try again after some time."");
        }
        throw new NimbusLeaderNotFoundException(
            ""Could not find leader nimbus from seed hosts "" + seeds + "". ""
            + ""Did you specify a valid list of nimbus hosts for config ""
            + Config.NIMBUS_SEEDS + ""?"");
    }",Get a nimbus client as configured by conf.,1,786
135,"public boolean getKeyData(int keyCode, KeyData results)
    {
        if (results.meta.length >= KeyData.META_LENGTH) {
            return getKeyData_native(mPointer, keyCode, results);
        } else {
            throw new IndexOutOfBoundsException(""results.meta.length must be >= "" +
                                                KeyData.META_LENGTH);
        }
    }",Get the characters conversion data for a given keyCode.,1,87
136,"public AbsoluteDate getDate() {
        return currentIndex < 0 ? null : eventDateList.get(currentIndex).getDate();
    }",Get the current event date according to the propagator.,1,40
137,"public Map<EnumConstantDeclaration, String> getEnumValues() {
    Map<EnumConstantDeclaration, String> valueMap = new LinkedHashMap<EnumConstantDeclaration, String>();
    Collection<EnumConstantDeclaration> enumConstants = ((EnumDeclaration) getDelegate()).getEnumConstants();
    HashSet<String> enumValues = new HashSet<String>(enumConstants.size());
    for (EnumConstantDeclaration enumConstant : enumConstants) {
      String value = enumConstant.getSimpleName();
      XmlEnumValue enumValue = enumConstant.getAnnotation(XmlEnumValue.class);
      if (enumValue != null) {
        value = enumValue.value();
      }

      if (!enumValues.add(value)) {
        throw new ValidationException(enumConstant.getPosition(), ""Duplicate enum value: "" + value);
      }

      valueMap.put(enumConstant, value);
    }

    return valueMap;
  }",The map of constant declarations to their enum constant values.,1,236
138,"public Presence getPresenceResource(String userWithResource) {
        String key = getPresenceMapKey(userWithResource);
        String resource = StringUtils.parseResource(userWithResource);
        Map<String, Presence> userPresences = presenceMap.get(key);
        if (userPresences == null) {
            return new Presence(Presence.Type.unavailable);
        }
        else {
            return userPresences.get(resource);
        }
    }","Returns the presence info for a particular user's resource, or unavailable presence if the user is offline or if no presence information is available, such as when you are not subscribed to the user's presence updates.",1,116
139,"EncryptionZone getEZINodeForPath(INodesInPath iip) {
    final EncryptionZoneInt ezi = getEncryptionZoneForPath(iip);
    if (ezi == null) {
      return NULL_EZ;
    } else {
      return new EncryptionZone(getFullPathName(ezi), ezi.getKeyName(),
          ezi.getINodeId());
    }
  }",Returns an EncryptionZone representing the ez for a given path.,1,88
140,"JerseyClientRequestContext request() {
        return requestContext;
    }",Returns a reference to the mutable request context to be invoked.,1,17
141,"public boolean loadAccount(AccountID accountID)
    {
        String userID = accountID.getUserID();

        ProtocolProviderService service = createService(userID, accountID);

        Dictionary<String, String> properties = new Hashtable<String, String>();
        properties.put(PROTOCOL, protocolName);
        properties.put(USER_ID, userID);

        ServiceRegistration serviceRegistration =
            bundleContext.registerService(ProtocolProviderService.class
                .getName(), service, properties);

        if (serviceRegistration == null)
        {
            return false;
        }

        synchronized (registeredAccounts)
        {
            registeredAccounts.put(accountID, serviceRegistration);
        }

        return true;
    }",Creates a protocol provider for the given accountID and registers it in the bundle context.,1,188
142,"public int deflate(byte[] b) {
        return deflate(b, 0, b.length, NO_FLUSH);
    }",Compresses the input data and fills specified buffer with compressed data.,1,38
143,"public final AddressConstantOperand asAddressConstant() {
    return (AddressConstantOperand) this;
  }",Cast to an  AddressConstantOperand.,1,25
144,"public List<Affiliate> getOwners() throws NoResponseException, XMPPErrorException, NotConnectedException {
        return getAffiliatesByAdmin(MUCAffiliation.owner);
    }",Returns a list of Affiliate with the room owners.,1,37
145,"public EncryptedValue build(PrivateKeyInfo privateKeyInfo)
        throws CRMFException
    {
        PKCS8EncryptedPrivateKeyInfoBuilder encInfoBldr = new PKCS8EncryptedPrivateKeyInfoBuilder(privateKeyInfo);

        AlgorithmIdentifier intendedAlg = privateKeyInfo.getPrivateKeyAlgorithm();
        AlgorithmIdentifier symmAlg = encryptor.getAlgorithmIdentifier();
        DERBitString encSymmKey;

        try
        {
            PKCS8EncryptedPrivateKeyInfo encInfo = encInfoBldr.build(encryptor);

            wrapper.generateWrappedKey(encryptor.getKey());
            encSymmKey = new DERBitString(wrapper.generateWrappedKey(encryptor.getKey()));

            AlgorithmIdentifier keyAlg = wrapper.getAlgorithmIdentifier();
            ASN1OctetString valueHint = null;

            return new EncryptedValue(intendedAlg, symmAlg, encSymmKey, keyAlg, valueHint, new DERBitString(encInfo.getEncoded()));
        }
        catch (IOException e)
        {
            throw new CRMFException(""cannot encode encrypted private key: "" + e.getMessage(), e);
        }
        catch (IllegalStateException e)
        {
            throw new CRMFException(""cannot encode key: "" + e.getMessage(), e);
        }
        catch (OperatorException e)
        {
            throw new CRMFException(""cannot wrap key: "" + e.getMessage(), e);
        }
    }",Build an EncryptedValue structure containing the private key contained in the passed info structure.,1,311
146,"public static CiConstant forObject(Object o) {
        if (o == null) {
            return NULL_OBJECT;
        }
        return get(CiKind.Object, o);
    }",Creates a boxed object constant.,1,55
147,"private RandomGenerator getRan() {
        if (rand == null) {
            rand = new JDKRandomGenerator();
            rand.setSeed(System.currentTimeMillis());
        }
        return rand;
    }",Returns the RandomGenerator used to generate non-secure random data.,1,61
148,"public static ImageIcon getIcon(Class elementClass, boolean enabled)
    {
        String key = elementClass.getName();
        ImageIcon icon = (ImageIcon) (enabled ? 
                ICON_MAP.get(key) : DISABLED_ICON_MAP.get(key));

        if (icon != null)
        {
            return icon;
        }
        
        if (elementClass.getSuperclass() != null)
        {
            return getIcon(elementClass.getSuperclass(),enabled);
        }
        
        return null;
    }",Get icon/disabledicon which has previously been registered for this class object.,1,146
149,"public String deletePhone(@RequestParam(required = true)
            Long customerPhoneId, HttpServletRequest request) {
        customerPhoneService.deleteCustomerPhoneByIdAndCustomerId(customerPhoneId, customerState.getCustomerId(request));

        request.setAttribute(""phone.deletedPhone"", ""true"");

        return deletePhoneSuccessUrl + customerPhoneId;
    }",Completely deletes the customerPhone with the given customerPhoneId from the database.,1,76
150,"public RemoteOperationResult execute(FileDataStorageManager storageManager, Context context) {
        if (storageManager == null) {
            throw new IllegalArgumentException(""Trying to execute a sync operation with a "" +
                    ""NULL storage manager"");
        }
        if (storageManager.getAccount() == null) {
            throw new IllegalArgumentException(""Trying to execute a sync operation with a "" +
                    ""storage manager for a NULL account"");
        }
        mStorageManager = storageManager;
        return super.execute(mStorageManager.getAccount(), context, getUserAgent());
    }",Synchronously executes the operation on the received ownCloud account.,1,130
151,"public static synchronized Feed[] updateFeed(final Context context,
                                                 final Feed... newFeeds) {
        List<Feed> newFeedsList = new ArrayList<Feed>();
        List<Feed> updatedFeedsList = new ArrayList<Feed>();
        Feed[] resultFeeds = new Feed[newFeeds.length];
        PodDBAdapter adapter = new PodDBAdapter(context);
        adapter.open();

        for (int feedIdx = 0; feedIdx < newFeeds.length; feedIdx++) {

            final Feed newFeed = newFeeds[feedIdx];

            // Look up feed in the feedslist
            final Feed savedFeed = searchFeedByIdentifyingValueOrID(context, adapter,
                    newFeed);
            if (savedFeed == null) {
                if (BuildConfig.DEBUG)
                    Log.d(TAG,
                            ""Found no existing Feed with title ""
                                    + newFeed.getTitle() + "". Adding as new one.""
                    );
                // Add a new Feed
                newFeedsList.add(newFeed);
                resultFeeds[feedIdx] = newFeed;
            } else {
                if (BuildConfig.DEBUG)
                    Log.d(TAG, ""Feed with title "" + newFeed.getTitle()
                            + "" already exists. Syncing new with existing one."");

                Collections.sort(newFeed.getItems(), new FeedItemPubdateComparator());
                if (savedFeed.compareWithOther(newFeed)) {
                    if (BuildConfig.DEBUG)
                        Log.d(TAG,
                                ""Feed has updated attribute values. Updating old feed's attributes"");
                    savedFeed.updateFromOther(newFeed);
                }
                if (savedFeed.getPreferences().compareWithOther(newFeed.getPreferences())) {
                    if (BuildConfig.DEBUG)
                        Log.d(TAG, ""Feed has updated preferences. Updating old feed's preferences"");
                    savedFeed.getPreferences().updateFromOther(newFeed.getPreferences());
                }
                // Look for new or updated Items
                for (int idx = 0; idx < newFeed.getItems().size(); idx++) {
                    final FeedItem item = newFeed.getItems().get(idx);
                    FeedItem oldItem = searchFeedItemByIdentifyingValue(savedFeed,
                            item.getIdentifyingValue());
                    if (oldItem == null) {
                        // item is new
                        final int i = idx;
                        item.setFeed(savedFeed);
                        savedFeed.getItems().add(i, item);
                        item.setRead(false);
                    } else {
                        oldItem.updateFromOther(item);
                    }
                }
                // update attributes
                savedFeed.setLastUpdate(newFeed.getLastUpdate());
                savedFeed.setType(newFeed.getType());

                updatedFeedsList.add(savedFeed);
                resultFeeds[feedIdx] = savedFeed;
            }
        }

        adapter.close();

        try {
            DBWriter.addNewFeed(context, newFeedsList.toArray(new Feed[newFeedsList.size()])).get();
            DBWriter.setCompleteFeed(context, updatedFeedsList.toArray(new Feed[updatedFeedsList.size()])).get();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            e.printStackTrace();
        }

        return resultFeeds;
    }",Adds new Feeds to the database or updates the old versions if they already exists.,1,796
152,"public Collection getRules() {
        return rules;
    }",Returns the rules in this ruleset,1,19
153,"public static INDArray create(LongShapeDescriptor descriptor, boolean initialize) {
        if(descriptor.isEmpty() && descriptor.rank() == 0){
            return Nd4j.empty(descriptor.dataType());
        }
        if (initialize)
            return create(descriptor.dataType(), descriptor.getShape(), descriptor.getStride(), descriptor.getOrder());
        else
            return createUninitialized(descriptor.dataType(), descriptor.getShape(), descriptor.getOrder());
    }","Create an ndarray based on the given description,",1,137
154,"public static <T, U extends T> T inject(Collection self, U initialValue, Closure<? extends T> closure) {
        return inject(self.iterator(), initialValue, closure);
    }","Iterates through the given Collection, passing in the initial value to the 2-arg closure along with the first item.",1,65
155,"public List<Message> getMessages(final List<String> nodes) throws NoResponseException, XMPPErrorException, NotConnectedException {
        List<Message> messages = new ArrayList<Message>();
        OfflineMessageRequest request = new OfflineMessageRequest();
        for (String node : nodes) {
            OfflineMessageRequest.Item item = new OfflineMessageRequest.Item(node);
            item.setAction(""view"");
            request.addItem(item);
        }
        // Filter offline messages that were requested by this request
        PacketFilter messageFilter = new AndFilter(packetFilter, new PacketFilter() {
            public boolean accept(Packet packet) {
                OfflineMessageInfo info = (OfflineMessageInfo) packet.getExtension(""offline"",
                        namespace);
                return nodes.contains(info.getNode());
            }
        });
        PacketCollector messageCollector = connection.createPacketCollector(messageFilter);
        connection.createPacketCollectorAndSend(request).nextResultOrThrow();
        // Collect the received offline messages
        Message message = (Message) messageCollector.nextResult();
        while (message != null) {
            messages.add(message);
            message =
                    (Message) messageCollector.nextResult(
                            SmackConfiguration.getDefaultPacketReplyTimeout());
        }
        // Stop queuing offline messages
        messageCollector.cancel();
        return messages;
    }",Returns a List of the offline Messages whose stamp matches the specified request.,1,328
156,"private static List<FoundIndication> findIndications(FailureCause cause, Run build, PrintStream buildLog) {
        long start = System.currentTimeMillis();
        List<Indication> indicationList = cause.getIndications();
        List<FoundIndication> foundIndicationList = new LinkedList<>();
        for (Indication indication : indicationList) {
            Thread.currentThread().setName(""BFA-scanner-""
                                                   + build.getFullDisplayName() + "": ""
                                                   + cause.getName() + ""-""
                                                   + indication.getUserProvidedExpression());
            FoundIndication foundIndication = findIndication(indication, build, buildLog);
            if (foundIndication != null) {
                foundIndicationList.add(foundIndication);
            }
        }
        if (logger.isLoggable(Level.FINER)) {
            logger.log(Level.FINER, ""[BFA] [{0}] [{1}] {2}ms"", new Object[]
                    {build.getFullDisplayName(),
                            cause.getName(),
                            String.valueOf(System.currentTimeMillis() - start), });
        }
        return foundIndicationList;
    }",Finds the indications of a failure cause.,1,282
157,"protected Object getExpressionEvaluation(JSONObject json, String jsonTextField) {
        return getExpressionEvaluation(json, jsonTextField, testFeatures[0]);
    }",Helper method to create an Expression object from a JSON text field and evaluate the,1,39
158,"public Evaluation evaluate(DataSetIterator iterator) {
        return evaluate(iterator, null);
    }",Evaluate the network (classification performance),1,28
159,"public static Class getClass(Object obj) {
        return obj == null ? null : HibernateUtil.getClass(obj);
    }",Hibernate.getClass(obj) but null safe,1,42
160,"private boolean doRedundantLoadElimination() {
		if (!REDUNDANT_LOAD_ELIMINATION)
			return false;
		XField xfield = loadedFieldSet.getField(handle);
		if (xfield == null)
			return false;
		if (!xfield.isReferenceType())
			return false;

/*
		// NOTYET
		// Don't do FS for fields that are never read
		if (!loadedFieldSet.isLoaded(xfield))
			return false;
*/
		return true;
	}",Determine whether redundant load elimination and forward substitution should be performed for the heap location referenced by the current instruction.,1,87
161,"public T result() {
        if (AsyncResult.this.succeeded()) {
          return AsyncResult.this.result();
        } else if (AsyncResult.this.failed()) {
          return mapper.apply(AsyncResult.this.cause());
        } else {
          return null;
        }
      }",Apply a  mapper function on this async result.,1,92
162,"public OAuthConsumer remove(long oAuthConsumerId)
		throws NoSuchOAuthConsumerException, SystemException {
		return remove(Long.valueOf(oAuthConsumerId));
	}",Removes the o auth consumer with the primary key from the database.,1,38
163,"public WorkerClient acquireWorkerClient(String hostname) {
    if (hostname.equals(NetworkAddressUtils.getLocalHostName(ClientContext.getConf()))) {
      if (mLocalBlockWorkerClientPool != null) {
        return mLocalBlockWorkerClientPool.acquire();
      }
      // TODO: Recover from initial worker failure
      throw new RuntimeException(""No Tachyon worker available for host: "" + hostname);
    }
    return acquireRemoteWorkerClient(hostname);
  }","Obtains a worker client to the worker with the given hostname in the system, or throws exception if the worker is not available.",1,98
164,"public MotionRange getMotionRange(int rangeType) {
        if (rangeType < 0 || rangeType > MOTION_RANGE_LAST) {
            throw new IllegalArgumentException(""Requested range is out of bounds."");
        }
        
        return mMotionRanges[rangeType];
    }",Gets information about the range of values for a particular  MotionEvent coordinate.,1,65
165,"protected Control createButtonNew(Composite compButton) {
		return UIControlsFactory.createButton(compButton, Messages.MasterDetailsComposite_buttonNew);
	}",Creates the 'New' Control.,1,32
166,"public RequestFuture<Void> assignPartitions(final long now) {
        final RequestFuture<Void> future = newCoordinatorRequestFuture(now);
        if (future.isDone()) return future;

        // send a join group request to the coordinator
        List<String> subscribedTopics = new ArrayList<String>(subscriptions.subscribedTopics());
        log.debug(""(Re-)joining group {} with subscribed topics {}"", groupId, subscribedTopics);

        JoinGroupRequest request = new JoinGroupRequest(groupId,
                this.sessionTimeoutMs,
                subscribedTopics,
                this.consumerId,
                this.assignmentStrategy);

        // create the request for the coordinator
        log.debug(""Issuing request ({}: {}) to coordinator {}"", ApiKeys.JOIN_GROUP, request, this.consumerCoordinator.id());

        RequestCompletionHandler completionHandler = new RequestCompletionHandler() {
            @Override
            public void onComplete(ClientResponse resp) {
                handleJoinResponse(resp, future);
            }
        };

        sendCoordinator(ApiKeys.JOIN_GROUP, request.toStruct(), completionHandler, now);
        return future;
    }",Send a request to get a new partition assignment.,1,250
167,"public Collection<I> getMutated()
    {
        return mutated;
    }","Return the collection of mutated individuals, for mutated events.",1,23
168,"private SimpleCacheSpan getSpan(String key, long position) {
    CachedContent cachedContent = index.get(key);
    if (cachedContent == null) {
      return SimpleCacheSpan.createOpenHole(key, position);
    }
    while (true) {
      SimpleCacheSpan span = cachedContent.getSpan(position);
      if (span.isCached && !span.file.exists()) {
        // The file has been deleted from under us. It's likely that other files will have been
        // deleted too, so scan the whole in-memory representation.
        removeStaleSpansAndCachedContents();
        continue;
      }
      return span;
    }
  }",Returns the cache  SimpleCacheSpan corresponding to the provided lookup,1,142
169,"public PeriodType withHoursRemoved() {
        if (!hours().isSupported()) {
            return this;
        }
        return MaskedType.mask(this, 1 << 4);
    }",Returns a version of this PeriodType instance that does not support hours.,1,57
170,"public static ComplexNDArray ifftn(NDArray transform,int dimension,int numElements) {
        if(numElements < 1)
            throw new IllegalArgumentException(""No elements specified"");

        int[] finalShape = ArrayUtil.replace(transform.shape(), dimension, numElements);


        if(dimension == 0 && transform.shape().length <= 1)
            return new ComplexNDArray(transform);
        ComplexNDArray result = new ComplexNDArray(transform);
        int desiredElementsAlongDimension = result.size(dimension);

        if(numElements > desiredElementsAlongDimension) {
            result = ComplexNDArrayUtil.padWithZeros(result,finalShape);
        }

        else if(numElements < desiredElementsAlongDimension) {
            result = ComplexNDArrayUtil.truncate(result,finalShape);
        }

        result.iterateOverDimension(dimension,new IFFTSliceOp(result,numElements));

        assert Shape.shapeEquals(result.shape(),finalShape);


        return result;
    }","ND IFFT, computes along the first on singleton dimension of transform",1,256
171,"@Override
        public final List<String> getSuffix() {
            return Collections.unmodifiableList(suffix);
        }","Returns the suffixes that may be used with the name of the ""main"" file.",1,32
172,"public boolean isDiscontinued(Date checkDate) {
		if (voided)
			return false;
		if (checkDate == null)
			checkDate = new Date();

		if (discontinued == null || !discontinued)
			return false;
		
		if (startDate == null || checkDate.before(startDate)) { 
			return false; 
		} 
		if (discontinuedDate != null && discontinuedDate.after(checkDate)) { 
			return false; 
		}
		
		// guess we can't assume this has been filled correctly?
		/*
		if (discontinuedDate == null) { 
			return false; 
		} 
		*/
		return true;
	}",Convenience method to determine if order is discontinued at a given time,1,165
173,"public Gadget remove(Gadget gadget) throws SystemException {
		return super.remove(gadget);
	}",Removes the gadget from the database.,1,31
174,"public T block(Duration timeout) {
		BlockingMonoSubscriber<T> subscriber = new BlockingMonoSubscriber<>();
		onLastAssembly(this).subscribe(Operators.toCoreSubscriber(subscriber));
		return subscriber.blockingGet(timeout.toMillis(), TimeUnit.MILLISECONDS);
	}",Subscribe to this  Mono and block until a next signal is received or a timeout expires.,1,72
175,"public ValueStack pushScope(IRScope scope) {
        assert scope.caller == this.scope;
        RiMethod method = scope.method;
        ValueStack res = new ValueStack(scope, method.maxLocals(), maxStackSize() + method.maxStackSize());
        res.replaceStack(this);
        res.replaceLocks(this);
        return res;
    }",Creates a new ValueStack corresponding to inlining the specified method into this point in this value stack.,1,102
176,"public long getContainerDiskHint(Map<String, List<String>> packing) {
    long defaultInstanceDisk = Long.parseLong(context.getProperty(
        INSTANCE_DISK_DEFAULT, Long.toString(1 * Constants.GB)));
    long defaultContainerDisk =
        defaultInstanceDisk * getLargestContainerSize(packing) + DEFAULT_DISK_PADDING;

    List<TopologyAPI.Config.KeyValue> topologyConfig = topology.getTopologyConfig().getKvsList();

    return Long.parseLong(TopologyUtility.getConfigWithDefault(
        topologyConfig, Config.TOPOLOGY_CONTAINER_DISK_REQUESTED, defaultContainerDisk + """"));
  }",Provide disk per aurora container.,1,141
177,"static Set<DriverEventCode> getEnabledEventCodes(final String enabledLoggerEventCodes)
    {
        if (null == enabledLoggerEventCodes || """".equals(enabledLoggerEventCodes))
        {
            return EnumSet.noneOf(DriverEventCode.class);
        }

        final Set<DriverEventCode> eventCodeSet = new HashSet<>();
        final String[] codeIds = enabledLoggerEventCodes.split("","");

        for (final String codeId : codeIds)
        {
            switch (codeId)
            {
                case ""all"":
                    eventCodeSet.addAll(ALL_LOGGER_EVENT_CODES);
                    break;

                case ""admin"":
                    eventCodeSet.addAll(ADMIN_ONLY_EVENT_CODES);
                    break;

                default:
                {
                    DriverEventCode code = null;
                    try
                    {
                        code = DriverEventCode.valueOf(codeId);
                    }
                    catch (final IllegalArgumentException ignore)
                    {
                    }

                    if (null == code)
                    {
                        try
                        {
                            code = DriverEventCode.get(Integer.parseInt(codeId));
                        }
                        catch (final IllegalArgumentException ignore)
                        {
                        }
                    }

                    if (null != code)
                    {
                        eventCodeSet.add(code);
                    }
                    else
                    {
                        System.err.println(""unknown event code: "" + codeId);
                    }
                }
            }
        }

        return eventCodeSet;
    }",Get the  Set of  DriverEventCodes that are enabled for the logger.,1,368
178,"public IAnchor getEndAnchor() {
		return anchorsProperty.get(getEndAnchorKey());
	}","Returns the currently assigned end  IAnchor anchor, or null if no end  IAnchor anchor is assigned.",1,26
179,"SocketAddress address() {
        if (malformed) {
            return null;
        }
        if (address == null) {
            if (host == null) {
                return new InetSocketAddress(port);
            } else {
                return new InetSocketAddress(host, port);
            }
        }
        return address;
    }",Resolve the listening socket address for this Spec.,1,101
180,"public static SqlSession getSqlSession(SqlSessionFactory sessionFactory) {
    ExecutorType executorType = sessionFactory.getConfiguration().getDefaultExecutorType();
    return getSqlSession(sessionFactory, executorType, null);
  }",Creates a new MyBatis  SqlSession from the  SqlSessionFactory provided as a parameter and using its  DataSource and  ExecutorType,1,51
181,"static Constant readConstant(DataInput input) throws IOException,
            ClassFormatException {
        byte b = input.readByte(); // Read tag byte
        int skipSize;
        switch (b) {
            case Constants.CONSTANT_Class:
                return new ConstantClass(input);
            case Constants.CONSTANT_Integer:
                return new ConstantInteger(input);
            case Constants.CONSTANT_Float:
                return new ConstantFloat(input);
            case Constants.CONSTANT_Long:
                return new ConstantLong(input);
            case Constants.CONSTANT_Double:
                return new ConstantDouble(input);
            case Constants.CONSTANT_Utf8:
                return ConstantUtf8.getInstance(input);
            case Constants.CONSTANT_String:
            case Constants.CONSTANT_MethodType:
                skipSize = 2; // unsigned short
                break;
            case Constants.CONSTANT_MethodHandle:
                skipSize = 3; // unsigned byte, unsigned short
                break;
            case Constants.CONSTANT_Fieldref:
            case Constants.CONSTANT_Methodref:
            case Constants.CONSTANT_InterfaceMethodref:
            case Constants.CONSTANT_NameAndType:
            case Constants.CONSTANT_InvokeDynamic:
                skipSize = 4; // unsigned short, unsigned short
                break;
            default:
                throw new ClassFormatException(""Invalid byte tag in constant pool: "" + b);
        }
        Utility.skipFully(input, skipSize);
        return null;
    }","Read one constant from the given input, the type depends on a tag byte.",1,317
182,"@SafeVarargs
	public static Subrule subRule(RulePart... alternatives) {
		return new Subrule(alternatives);
	}",Shortcut for  new Subrule(alternatives).,1,35
183,"public ResultSet getExportedKeys(String catalog, String schema,
                                     String table) throws SQLException {

        return executeSelect(""SYSTEM_CROSSREFERENCE"",
                             ""PKTABLE_NAME = '"" + table
                             + ""' ORDER BY FKTABLE_NAME, KEY_SEQ"");
    }",Retrieves a description of the foreign key columns that reference the given table's primary key columns (the foreign keys exported by a table).,1,60
184,"public Collection getTransitions(StateMachine stateMachine)
    {
        return getSubvertices(stateMachine, transitionFilter);
    }",Returns the collection of Transition instances found in the argument StateMachine.,1,29
185,"private String getSupersession(final String table, final Integer code, final Locale locale) throws SQLException {
        String reason = null;
        Object replacedBy = null;
        try (ResultSet result = executeQuery(""Deprecation"",
                ""SELECT OBJECT_TABLE_NAME, DEPRECATION_REASON, REPLACED_BY"" +
                "" FROM [Deprecation] WHERE OBJECT_CODE = ?"", code))
        {
            while (result.next()) {
                if (tableMatches(table, result.getString(1))) {
                    reason     = getOptionalString (result, 2);
                    replacedBy = getOptionalInteger(result, 3);
                    break;
                }
            }
        }
        if (replacedBy == null) {
            replacedBy = '(' + Vocabulary.getResources(locale).getString(Vocabulary.Keys.None).toLowerCase(locale) + ')';
        } else {
            replacedBy = replacedBy.toString();
        }
        /*
         * Try to infer the method name from the table name. For example if the deprecated code was found in
         * the [Coordinate Reference System] table, then we declare createCoordinateReferenceSystem(String)
         * as the source of the log message.
         */
        String method = ""create"";
        for (final TableInfo info : TableInfo.EPSG) {
            if (tableMatches(info.table, table)) {
                method += info.type.getSimpleName();
                break;
            }
        }
        if (!quiet) {
            LogRecord record = Messages.getResources(locale).getLogRecord(Level.WARNING, Messages.Keys.DeprecatedCode_3,
                    Constants.EPSG + DefaultNameSpace.DEFAULT_SEPARATOR + code, replacedBy, reason);
            record.setLoggerName(Loggers.CRS_FACTORY);
            Logging.log(EPSGDataAccess.class, method, record);
        }
        return (String) replacedBy;
    }",Logs a warning saying that the given code is deprecated and returns the code of the proposed replacement.,1,417
186,"public boolean equals(Object obj) {
        if (obj instanceof MutableByte) {
            return value == ((MutableByte) obj).byteValue();
        }
        return false;
    }",Compares this object against the specified object.,1,59
187,"public static <T> T[] notEmpty(T[] array) {
        return notEmpty(array, DEFAULT_NOT_EMPTY_ARRAY_EXCEPTION_MESSAGE);
    }",Validate that the specified argument array is neither null nor a length of zero (no elements); otherwise throwing an exception.,1,38
188,"public boolean isIntegral(Request request)
    {
        if (_connector!=null)
            return _connector.isIntegral(request);
        return false;
    }",Find out if the request is INTEGRAL security.,1,44
189,"public long partBytes(int part) {
            if (numberOfParts == 1) {
                return length();
            }
            // First and last-but-one parts have a size equal to partBytes
            if (part < (numberOfParts - 1)) {
                return partBytes;
            }
            // Last part size is deducted from the length and the number of parts
            return length() % partBytes;
        }",Returns the size (in bytes) of a given part,1,87
190,"public static String join(Iterable<String> strings, char separator, char escape) {
		requireNonNull(strings, ""strings is null"");
		require(separator != escape, ""separator equals escape charater"");
		return Streamz
				.stream(strings)
				.map(s -> escape(s, separator, escape))
				.collect(joining(String.valueOf(separator)));
	}",Concatenates a given Iterable of strings using the given separator character.,1,109
191,"public Collection<String> getAccountAttributes() {
        try {
            if (info == null) {
                getRegistrationInfo();
            }
            Map<String, String> attributes = info.getAttributes();
            if (attributes != null) {
                return Collections.unmodifiableSet(attributes.keySet());
            }
        }
        catch (XMPPException xe) {
            xe.printStackTrace();
        }
        return Collections.emptySet();
    }",Returns an unmodifiable collection of the names of the required account attributes.,1,131
192,"public JTestDefinition build() {
            return new JTestDefinition(this);
        }","As one may expect, creates the object of  JLoadTest type with custom parameters.",1,24
193,"public static String stripIndent(CharSequence self) {
        String s = self.toString();
        if (s.length() == 0) return s;
        int runningCount = -1;
        try {
            for (String line : readLines((CharSequence) s)) {
                // don't take blank lines into account for calculating the indent
                if (isAllWhitespace((CharSequence) line)) continue;
                if (runningCount == -1) runningCount = line.length();
                runningCount = findMinimumLeadingSpaces(line, runningCount);
                if (runningCount == 0) break;
            }
        } catch (IOException e) {
            /* ignore */
        }
        return stripIndent(s, runningCount == -1 ? 0 : runningCount);
    }",Strip leading spaces from every line in a CharSequence.,1,212
194,"public static XIDListValue addIDToList(XID actorID, XField field, XID id) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XIDListValue) {
			XIDListValue listValue = (XIDListValue)value;
			
			// manipulate the contained list
			listValue = addIDToList(listValue, listValue.size(), id);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Appends a new  XID to the end of the  XIDListValue of the given  XField (only works if the  XValue of the  XField actually is a  XIDListValue),1,153
195,"public IETGraphObject getGraphObject() {
        return elementGraphObject;
    }",Returns GraphObject for this diagram element,1,19
196,"public static Parameter overrideSource(Parameter original, Parameter.Source source) {

        return new Parameter(
                    original.annotations,
                    original.annotation,
                    source,
                    source.name(),
                    original.rawType,
                    original.type,
                    original.encoded,
                    original.defaultValue);
    }",Create new parameter model by overriding  Parameter.Source source of the original parameter model.,1,83
197,"public Response writeAndRestartConfiguration(JSONObject request) {
    try {

      if (isOperator() == false) {
        return Response.status(401).build();
      }

      writeConfiguration(request);

      String rmHost = getRMHost();
      JSONObject data = (JSONObject) JSONValue.parse(String.format(restartRMRequestData, rmHost, rmHost));
      proxy.request(baseUrl + ""/requests/"").
          setData(data).
          post();

    } catch (WebApplicationException ex) {
      throw ex;
    } catch (Exception ex) {
      throw new ServiceFormattedException(ex.getMessage(), ex);
    }
    return readConfiguration();
  }",Sets capacity scheduler configuration and restart ResourceManager.,1,197
198,"private static boolean endsWith(CharSequence str, CharSequence suffix, boolean ignoreCase) {
        if (str == null || suffix == null) {
            return str == null && suffix == null;
        }
        if (suffix.length() > str.length()) {
            return false;
        }
        int strOffset = str.length() - suffix.length();
        return regionMatchesSequence(str, ignoreCase, strOffset, suffix, 0, suffix.length());
    }",Check if a CharSequence ends with a specified suffix (optionally case insensitive).,1,156
199,"public boolean equals(Object other) {
            if (this == other) return true;
            if (other == null || getClass() != other.getClass()) return false;
            Default<?> aDefault = (Default<?>) other;
            return instrumentedType.equals(aDefault.instrumentedType)
                    && fieldPool.equals(aDefault.fieldPool)
                    && auxiliaryTypes.equals(aDefault.auxiliaryTypes)
                    && instrumentedMethods.equals(aDefault.instrumentedMethods)
                    && loadedTypeInitializer.equals(aDefault.loadedTypeInitializer)
                    && typeInitializer.equals(aDefault.typeInitializer)
                    && typeAttributeAppender.equals(aDefault.typeAttributeAppender)
                    && asmVisitorWrapper.equals(aDefault.asmVisitorWrapper)
                    && annotationValueFilterFactory.equals(aDefault.annotationValueFilterFactory)
                    && annotationRetention == aDefault.annotationRetention
                    && auxiliaryTypeNamingStrategy.equals(aDefault.auxiliaryTypeNamingStrategy)
                    && implementationContextFactory.equals(aDefault.implementationContextFactory)
                    && typeValidation.equals(aDefault.typeValidation)
                    && typePool.equals(aDefault.typePool);
        }",Creates a type writer for rebasing a type.,1,268
200,"public Iterator getInstructions() {
        synchronized (instructions) {
            return Collections.unmodifiableList(new ArrayList(instructions)).iterator();
        }
    }",Returns an Iterator for the list of instructions that explain how to fill out the form and what the form is about.,1,45
201,"public BigDecimal getBigDecimal(String columnName) throws SQLException {
        return getResultSet().getBigDecimal(columnName);
    }",Retrieves the value of the designated column in the current row of this getResultSet() object as a java.math.BigDecimal with full precision.,1,33
202,"public int compareTo(DiscoverInfo.Identity other) {
            String otherLang = other.lang == null ? """" : other.lang;
            String thisLang = lang == null ? """" : lang;
            
            // This can be removed once the deprecated constructor is removed.
            String otherType = other.type == null ? """" : other.type;
            String thisType = type == null ? """" : type;

            if (category.equals(other.category)) {
                if (thisType.equals(otherType)) {
                    if (thisLang.equals(otherLang)) {
                        // Don't compare on name, XEP-30 says that name SHOULD
                        // be equals for all identities of an entity
                        return 0;
                    } else {
                        return thisLang.compareTo(otherLang);
                    }
                } else {
                    return thisType.compareTo(otherType);
                }
            } else {
                return category.compareTo(other.category);
            }
        }",Compares this identity with another one.,1,249
203,"@Override
    public MongoCursor<T> execute() {
        ServerConnectionProvider provider = getSession().createServerConnectionProvider(getServerConnectionProviderOptions());
        CommandResult commandResult = new CommandProtocol(namespace.getDatabaseName(), command, commandCodec, resultDecoder,
                                                          getBufferProvider(), provider.getServerDescription(), provider.getConnection(),
                                                          isCloseSession())
                                          .execute();

        if (mapReduce.isInline()) {
            return new InlineMongoCursor<T>(commandResult, (List<T>) commandResult.getResponse().get(""results""));
        } else {
            return new MongoQueryCursor(getResultsNamespaceFromResponse(commandResult.getResponse(), namespace.getDatabaseName()),
                                        new Find(),
                                        commandCodec,
                                        collectibleDecoder,
                                        getBufferProvider(),
                                        getSession(),
                                        isCloseSession());
        }
    }",Executing this will return a cursor with your results in.,1,216
204,"public static Value print_r(Env env,
			      @ReadOnly Value v,
			      @Optional boolean isReturn)
  {
    try {
      WriteStream out;
      
      if (isReturn) {
        StringWriter writer = new StringWriter();
        out = writer.openWrite();
        
        v.printR(env, out, 0, new IdentityHashMap<Value, String>());
        
        return new StringValueImpl(writer.getString());
      }
      else {
        out = env.getOut();
        
        v.printR(env, out, 0, new IdentityHashMap<Value, String>());
        
        return BooleanValue.TRUE;
      }
    } catch (IOException e) {
      throw new QuercusModuleException(e);
    }
  }",Prints a value.,1,220
205,"private static List<FoundFailureCause> findIndications(final Collection<FailureCause> causes,
                                                         Run build,
                                                         PrintStream buildLog) {
        List<FoundFailureCause> foundFailureCauses = new ArrayList<>();

        List<FailureCause> singleLineCauses = new ArrayList<>();
        List<FailureCause> notOnlySingleLineCauses = new ArrayList<>();

        for (FailureCause cause : causes) {
            boolean atLeast = false;
            for (Indication indication : cause.getIndications()) {
                if (indication instanceof MultilineBuildLogIndication) {
                    atLeast = true;
                }
            }

            if (atLeast) {
                notOnlySingleLineCauses.add(cause);
            } else {
                singleLineCauses.add(cause);
            }
        }

        try {
            try (BufferedReader reader = new BufferedReader(build.getLogReader())) {
                foundFailureCauses.addAll(
                        FailureReader.scanSingleLinePatterns(
                                singleLineCauses,
                                build,
                                reader,
                                build.getLogFile().getName()));
            }

            for (FailureCause cause : notOnlySingleLineCauses) {
                List<FoundIndication> foundIndications = new ArrayList<>();
                for (Indication indication : cause.getIndications()) {
                    long start = System.currentTimeMillis();

                    Thread.currentThread().setName(""BFA-scanner-""
                            + build.getFullDisplayName() + "": ""
                            + cause.getName() + ""-""
                            + indication.getUserProvidedExpression());

                    foundIndications.add(findIndication(indication, build, buildLog));

                    if (logger.isLoggable(Level.FINER)) {
                        logger.log(Level.FINER, ""[BFA] [{0}] [{1}] {2}ms"", new Object[]
                                {build.getFullDisplayName(),
                                        cause.getName(),
                                        String.valueOf(System.currentTimeMillis() - start),});
                    }
                }

                foundFailureCauses.add(new FoundFailureCause(cause, foundIndications));
            }

            return foundFailureCauses;
        } catch (IOException e) {
            buildLog.print(""Sorry, Alex tried to fix BFA plugin ASAP and didn't mention this corner case: "" + e);
        }

        return new ArrayList<>();
    }",Finds indications for all causes.,1,575
206,"public ByteBuffer getBufferWithoutHeader() {
    return ByteBuffer.wrap(buf.array(), buf.arrayOffset() + headerSize(),
        buf.limit() - headerSize() - totalChecksumBytes()).slice();
  }",Returns a buffer that does not include the header.,1,65
207,"public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {
		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class);
		if (annotation != null && StringUtils.hasText(annotation.value())) {
			return annotation.value();
		}
		else {
			Method method = returnType.getMethod();
			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, returnType.getContainingClass());
			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue);
		}
	}",Derive the model attribute name for the given return value using one of:  The method  ModelAttribute annotation value The declared return type if it is more specific than  Object The actual return value type,1,145
208,"protected AuroraController getController() {
    return new AuroraCLIController(
        Runtime.topologyName(runtime),
        Context.cluster(config),
        Context.role(config),
        Context.environ(config),
        AuroraContext.getHeronAuroraPath(config),
        Context.verbose(config));
  }",Get an AuroraController based on the config and runtime,1,76
209,"protected static boolean isWithin(final GeoPoint point, final Set<Edge> edgeSet) {
    for (final Edge edge : edgeSet) {
      if (!edge.plane.isWithin(point)) {
        return false;
      }
    }
    return true;
  }",Check if a point is within a set of edges.,1,82
210,"public static XBinaryValue toValue(Byte[] list) {
		return vf.createBinaryValue(Arrays.asList(list));
	}",Returns the content of the given  Byte array as an  XBinaryValue,1,36
211,"public static String join(Iterable<?> iterable, char separator) {
        if (iterable == null) {
            return null;
        }
        return join(iterable.iterator(), separator);
    }",Joins the elements of the provided Iterable into a single String containing the provided elements. No delimiter is added before or after the list.,1,65
212,"public Parameters withAllowNonSeamlessAdaptiveness(boolean allowNonSeamlessAdaptiveness) {
      if (allowNonSeamlessAdaptiveness == this.allowNonSeamlessAdaptiveness) {
        return this;
      }
      return new Parameters(preferredAudioLanguage, preferredTextLanguage,
          allowMixedMimeAdaptiveness, allowNonSeamlessAdaptiveness, maxVideoWidth, maxVideoHeight,
          maxVideoBitrate, exceedVideoConstraintsIfNecessary, exceedRendererCapabilitiesIfNecessary,
          viewportWidth, viewportHeight, viewportOrientationMayChange);
    }",Returns an instance with the provided seamless adaptiveness allowance.,1,88
213,"public int processNextJournalLogFiles() throws IOException {
    int numFilesProcessed = 0;
    while (mReader.isValid()) {
      // Process the new completed log file, if it exists.
      JournalInputStream inputStream = mReader.getNextInputStream();
      if (inputStream != null) {
        LOG.info(""Processing a completed log file."");
        JournalEntry entry;
        while ((entry = inputStream.getNextEntry()) != null) {
          mMaster.processJournalEntry(entry);
          // update the latest sequence number seen.
          mLatestSequenceNumber = inputStream.getLatestSequenceNumber();
        }
        inputStream.close();
        numFilesProcessed ++;
        LOG.info(""Finished processing the log file."");
      } else {
        return numFilesProcessed;
      }
    }
    LOG.info(""The checkpoint is out of date. Must reload checkpoint file. ""
        + mJournal.getCheckpointFilePath());
    return numFilesProcessed;
  }",Processes all the next completed journal log files.,1,210
214,"public static long ZDICT_optimizeTrainFromBuffer_fastCover(@NativeType(""void *"") ByteBuffer dictBuffer, @NativeType(""void const *"") ByteBuffer samplesBuffer, @NativeType(""size_t const *"") PointerBuffer samplesSizes, @NativeType(""ZDICT_fastCover_params_t *"") ZDICTFastCoverParams parameters) {
        if (CHECKS) {
            if (DEBUG) {
                check(samplesBuffer, getSamplesBufferSize(samplesSizes));
            }
        }
        return nZDICT_optimizeTrainFromBuffer_fastCover(memAddress(dictBuffer), dictBuffer.remaining(), memAddress(samplesBuffer), memAddress(samplesSizes), samplesSizes.remaining(), parameters.address());
    }",The same requirements as  #ZDICT_trainFromBuffer_fastCover trainFromBuffer_fastCover hold for all the parameters except  parameters.,1,143
215,"protected List<NodePart> findNestingNodes() {
		// find the first level visual parts (not considering nested graphs)
		List<IVisualPart<Node, ? extends Node>> rootChildren = getHost().getRoot().getChildrenUnmodifiable();

		// rootChildren.get(0) should be the GraphPart containing the
		// NodeContentParts
		List<IVisualPart<Node, ? extends Node>> graphChildren = rootChildren.size() > 0
				? rootChildren.get(0).getChildrenUnmodifiable()
				: Collections.<IVisualPart<Node, ? extends Node>> emptyList();

		// filter for NodePart
		List<NodePart> nestingNodeContentParts = PartUtils.filterParts(graphChildren, NodePart.class);

		// filter out all non-nesting nodes
		for (int i = nestingNodeContentParts.size() - 1; i >= 0; i--) {
			NodePart nodePart = nestingNodeContentParts.get(i);
			if (nodePart.getContent().getNestedGraph() == null) {
				nestingNodeContentParts.remove(i);
			}
		}
		return nestingNodeContentParts;
	}",Returns a  List containing all  NodeParts (within the currently rendered graph) that have a nested graph assigned to them.,1,252
216,"private Object[] getSiblings(Object item) {
		Object parent = getAncestor(item);
		if (parent == null) {
			return new Object[] {item };
		} else {
			return getChildren(parent);
		}
	}",Returns the siblings for a given item (including the item itself).,1,79
217,"protected List getFieldOrder() {
            return Arrays.asList(new String[] { ""Flags"", ""pDescription"",
                    ""pName"", ""pComment"" });
        }","The EnumPrinters function enumerates available printers, print servers, domains, or print providers.",1,52
218,"static ConversionContext of(String format, Locale locale) {
        return new ConversionContext() {
            @Override
            public Locale getLocale() {
                return locale;
            }

            @Override
            public Optional<String> getFormat() {
                return Optional.of(format);
            }
        };
    }",Creates a  ConversionContext for the given format and Locale,1,91
219,"public final DiagramEditorInternal getEditor() {
		return getContextButtonPad().getEditor();
	}",Returns the  DiagramEditorInternal for which the context button is displayed.,1,27
220,"private static String transform(Bundle bundle) throws ModuleManagementException {
        try {
            PersistentBundle persistentBundle = ModuleUtils.persist(bundle);
            String newLocation = persistentBundle.getLocation();
            logger.info(
                    ""Transformed bundle {} with location {} to be handled by the DX protocol handler under new location {}"",
                    new String[] { getDisplayName(bundle), bundle.getLocation(), newLocation });
            return newLocation;
        } catch (Exception e) {
            if (e instanceof ModuleManagementException) {
                // re-throw
                throw (ModuleManagementException) e;
            }
            String msg = ""Unable to transform bundle "" + bundle + "". Cause: "" + e.getMessage();
            logger.error(msg, e);
            throw new ModuleManagementException(msg, e);
        }
    }",Persists the bundle content in DX and returns the new location URL which handles the transformed bundle content.,1,203
221,"public Map<String, Definition> read(Object source) throws DefinitionsFactoryException {

        // Get out if we have not been initialized.
        if (!inited) {
            throw new DefinitionsFactoryException(
                ""Definitions reader has not been initialized."");
        }

        // This is an instance variable instead of a local variable because
        // we want to be able to call the addDefinition method to populate it.
        // But we reset the Map here, which, of course, has threading implications.
        definitions = new HashMap<String, Definition>();

        if (source == null) {
            // Perhaps we should throw an exception here.
            return null;
        }

        InputStream input;
        try {
            input = (InputStream) source;
        } catch (ClassCastException e) {
            throw new DefinitionsFactoryException(
                ""Invalid source type.  Requires java.io.InputStream."", e);
        }

        try {
            // set first object in stack
            //digester.clear();
            digester.push(this);
            // parse
            digester.parse(input);

        } catch (SAXException e) {
            throw new DefinitionsFactoryException(
                ""XML error reading definitions."", e);
        } catch (IOException e) {
            throw new DefinitionsFactoryException(
                ""I/O Error reading definitions."", e);
        }

        return definitions;
    }",Reads  Definition objects from a source.,1,277
222,"public Collection<UI> getRoots() {
        return Collections.unmodifiableCollection(uIs.values());
    }",Gets all the uIs of this application.,1,31
223,"private Collection<DirectoryOrObject> listInternal(final String prefix) throws IOException {
    Directory directory = new Directory(prefix, PATH_SEPARATOR_CHAR);
    Container container = mAccount.getContainer(mContainerName);
    return container.listDirectory(directory);
  }",Lists the files or folders which match the given prefix.,1,69
224,"private LockMode nextLockMode(LockMode mode) {
    return endsInWriteLock() ? LockMode.WRITE : mode;
  }","If mode is read but the lock list is write locked, returns LockMode.WRITE.",1,34
225,"public String createCommandLine(GPLoadMeta meta, boolean password) throws KettleException
	{
	   StringBuffer sbCommandLine = new StringBuffer(300);
	   
	   //  get path to the executable
	   sbCommandLine.append(getPath(meta.getGploadPath(), ""GPLoad.Exception.GPLoadPathMisssing"", true));
	   
	   //  get the path to the control file
	   sbCommandLine.append("" -f "");
	   sbCommandLine.append(getPath(meta.getControlFile(), ""GPLoad.Exception.ControlFilePathMissing"", false));
	   
	   //  get the path to the log file, if specified
	   String logfile = meta.getLogFile();
	   if (!Const.isEmpty(logfile)) {
   	  sbCommandLine.append("" -l "");
	     sbCommandLine.append(getPath(meta.getLogFile(), ""GPLoad.Exception.LogFilePathMissing"", false));
	   } 
	   return sbCommandLine.toString(); 
	}",Create the command line for GPLoad depending on the meta information supplied.,1,194
226,"public String getText( )
    {
    return this.text.getString( );
    }",Returns the text of this Question.,1,28
227,"public List<Affiliate> getMembers() throws NoResponseException, XMPPErrorException, NotConnectedException  {
        return getAffiliatesByAdmin(MUCAffiliation.member);
    }",Returns a list of Affiliate with the room members.,1,37
228,"public InputStream getInputStream(InputStream in) throws IOException {
    if (!saslClient.isComplete()) {
      throw new IOException(""Sasl authentication exchange hasn't completed yet"");
    }
    return new SaslInputStream(in, saslClient);
  }",Get a SASL wrapped InputStream.,1,64
229,"public static CiConstant forDouble(double d) {
        return get(CiKind.Double, d);
    }",Creates a boxed double constant.,1,32
230,"private ControlRegistry push(ControlRegistry controlRegistry) {
            add(controlRegistry);

            return controlRegistry;
        }",Pushes the ControlRegistry onto the top of this stack.,1,30
231,"private NameInformation createNameInformation(String name, Scope scope, Node rootNameNode) {
    // Check the scope. Currently we're only looking at globally scoped vars.
    String rootName = rootNameNode.getString();
    Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
    return nameInfo;
  }",Creates name information for a particular qualified name that occurs in a particular scope.,1,286
232,"public Set<ModelProperty> getModelProperties()
    {
        return Collections.unmodifiableSet(new HashSet<>(modelProperties.values()));
    }",Returns a  Set with the currently added properties.,1,39
233,"public boolean isAscending(int i) {
        return orderSpecs[i];
    }",Returns true if the property i should be orderd ascending.,1,25
234,"public List<DistributionSetRequestBodyPost> build() {
        return Lists.newArrayList(doBuild(name));
    }",Builds a list with a single entry of  DistributionSetRequestBodyPost which can directly be used to post on the RESTful-API.,1,30
235,"public static  IComplexNDArray fft(IComplexNDArray inputC,int numElements) {
        return Nd4j.getFFt().fft(inputC,numElements,inputC.shape().length - 1);
    }","1d discrete fourier transform, note that this will throw an exception if the passed in input isn't a vector.",1,51
236,"static public MojoModel load(String file) throws IOException {
        File f = new File(file);
        if (!f.exists())
            throw new FileNotFoundException(""File "" + file + "" cannot be found."");
        ContentReader cr = f.isDirectory()? new FolderContentReader(file) : new ArchiveContentReader(file);
        Map<String, Object> info = parseModelInfo(cr);
        String[] columns = (String[]) info.get(""[columns]"");
        String[][] domains = parseModelDomains(cr, columns.length, info.get(""[domains]""));
        String algo = (String) info.get(""algorithm"");
        if (algo == null)
            throw new IOException(""Model file does not contain information about the model's algorithm."");

        // Create and return a subclass instance
        switch (algo) {
            case ""Distributed Random Forest"":
                return new DrfModel(cr, info, columns, domains);
            case ""Gradient Boosting Method"":
                return new GbmModel(cr, info, columns, domains);
            default:
                throw new IOException(""Unsupported algorithm "" + algo + "" for raw models."");
        }
    }",Primary factory method for constructing MojoModel instances.,1,324
237,"static public XCommand createForcedUndoCommand(XEvent event) {
		
		if(event instanceof XAtomicEvent)
			return createForcedUndoCommand((XAtomicEvent)event);
		if(event instanceof XTransactionEvent)
			return createForcedUndoCommand((XTransactionEvent)event);
		
		throw new IllegalArgumentException(""unknown command class: "" + event);
	}",Create a forced  XCommand that undoes the given  XEvent.,1,83
238,"public double getWidth() {
		String sWidth = maColumnElement.getProperty(OdfTableColumnProperties.ColumnWidth);
		if (sWidth == null) {
			sWidth = DEFAULT_WIDTH;
		}
		return PositiveLength.parseDouble(sWidth, Unit.MILLIMETER) ;
	}",Get the width of the column (in Millimeter).,1,72
239,"public double getContainerCpuHint(Map<String, List<String>> packing) {
    List<TopologyAPI.Config.KeyValue> topologyConfig = topology.getTopologyConfig().getKvsList();
    double totalInstanceCpu = instanceCpuDefault * TopologyUtils.getTotalInstance(topology);
    // TODO(nbhagat): Add 1 more cpu for metrics manager also.
    // TODO(nbhagat): Use max cpu here. To get max use packing information.
    double defaultContainerCpu =
        (float) (1 + totalInstanceCpu / TopologyUtils.getNumContainers(topology));

    String cpuHint = TopologyUtils.getConfigWithDefault(
        topologyConfig, com.twitter.heron.api.Config.TOPOLOGY_CONTAINER_CPU_REQUESTED, Double.toString(defaultContainerCpu));

    return Double.parseDouble(cpuHint);
  }",Provide cpu per container.,1,156
240,"public static boolean parametersCompatible(Parameter[] source, Parameter[] target) {
        return parametersMatch(source, target, (sourceType, targetType) ->
            ClassHelper.getWrapper(targetType).getTypeClass().isAssignableFrom(ClassHelper.getWrapper(sourceType).getTypeClass())
        );
    }",Checks if two parameter arrays are type-compatible.,1,78
241,"public DryResultAction getPreviousResultAction() {
        AbstractResultAction<DryResult> previousBuild = getPreviousBuild();
        if (previousBuild instanceof DryResultAction) {
            return (DryResultAction)previousBuild;
        }
        throw new NoSuchElementException(""There is no previous build for action "" + this);
    }",Gets the DRY result of the previous build.,1,70
242,"public GlobalProperties filterBySemanticProperties(SemanticProperties props, int input) {

		if (props == null) {
			throw new NullPointerException(""SemanticProperties may not be null."");
		}

		GlobalProperties gp = new GlobalProperties();

		// filter partitioning
		switch(this.partitioning) {
			case FULL_REPLICATION:
				return gp;
			case RANGE_PARTITIONED:
				// check if ordering is preserved
				Ordering newOrdering = new Ordering();
				for (int i = 0; i < this.ordering.getInvolvedIndexes().size(); i++) {
					int sourceField = this.ordering.getInvolvedIndexes().get(i);
					FieldSet targetField = props.getForwardingTargetFields(input, sourceField);

					if (targetField == null || targetField.size() == 0) {
						// partitioning is destroyed
						newOrdering = null;
						break;
					} else {
						// use any field of target fields for now. We should use something like field equivalence sets in the future.
						if(targetField.size() > 1) {
							LOG.warn(""Found that a field is forwarded to more than one target field in "" +
									""semantic forwarded field information. Will only use the field with the lowest index."");
						}
						newOrdering.appendOrdering(targetField.toArray()[0], this.ordering.getType(i), this.ordering.getOrder(i));
					}
				}
				if(newOrdering != null) {
					gp.partitioning = PartitioningProperty.RANGE_PARTITIONED;
					gp.ordering = newOrdering;
					gp.partitioningFields = newOrdering.getInvolvedIndexes();
				}
				break;
			case HASH_PARTITIONED:
			case ANY_PARTITIONING:
			case CUSTOM_PARTITIONING:
				FieldList newPartitioningFields = new FieldList();
				for (int sourceField : this.partitioningFields) {
					FieldSet targetField = props.getForwardingTargetFields(input, sourceField);

					if (targetField == null || targetField.size() == 0) {
						newPartitioningFields = null;
						break;
					} else {
						// use any field of target fields for now.  We should use something like field equivalence sets in the future.
						if(targetField.size() > 1) {
							LOG.warn(""Found that a field is forwarded to more than one target field in "" +
									""semantic forwarded field information. Will only use the field with the lowest index."");
						}
						newPartitioningFields = newPartitioningFields.addField(targetField.toArray()[0]);
					}
				}
				if(newPartitioningFields != null) {
					gp.partitioning = this.partitioning;
					gp.partitioningFields = newPartitioningFields;
					gp.customPartitioner = this.customPartitioner;
				}
				break;
			case FORCED_REBALANCED:
			case RANDOM:
				gp.partitioning = this.partitioning;
				break;
			default:
				throw new RuntimeException(""Unknown partitioning type."");
		}

		// filter unique field combinations
		if (this.uniqueFieldCombinations != null) {
			Set<FieldSet> newUniqueFieldCombinations = new HashSet<FieldSet>();
			for (FieldSet fieldCombo : this.uniqueFieldCombinations) {
				FieldSet newFieldCombo = new FieldSet();
				for (Integer sourceField : fieldCombo) {
					FieldSet targetField = props.getForwardingTargetFields(input, sourceField);

					if (targetField == null || targetField.size() == 0) {
						newFieldCombo = null;
						break;
					} else {
						// use any field of target fields for now.  We should use something like field equivalence sets in the future.
						if(targetField.size() > 1) {
							LOG.warn(""Found that a field is forwarded to more than one target field in "" +
									""semantic forwarded field information. Will only use the field with the lowest index."");
						}
						newFieldCombo = newFieldCombo.addField(targetField.toArray()[0]);
					}
				}
				if (newFieldCombo != null) {
					newUniqueFieldCombinations.add(newFieldCombo);
				}
			}
			if(!newUniqueFieldCombinations.isEmpty()) {
				gp.uniqueFieldCombinations = newUniqueFieldCombinations;
			}
		}

		return gp;
	}",Filters these GlobalProperties by the fields that are forwarded to the output as described by the SemanticProperties.,1,947
243,"static <T> BodyInserter<T> of(BiFunction<ServerHttpResponse, Configuration, Mono<Void>> writer,
			Supplier<T> supplier) {

		Assert.notNull(writer, ""'writer' must not be null"");
		Assert.notNull(supplier, ""'supplier' must not be null"");

		return new BodyInserters.DefaultBodyInserter<T>(writer, supplier);
	}",Return a new  BodyInserter described by the given writer and supplier functions.,1,93
244,"public static Process execute(final List<String> commands, final List<String> envp, final File dir) throws IOException {
        return Runtime.getRuntime().exec((String[]) (commands == null ? null : commands.toArray(new String[commands.size()])),
                (String[]) (envp == null ? null : envp.toArray(new String[envp.size()])), dir);
    }","Executes the command specified by the list of strings given in the first parameter, with the environment defined by envp and under the working directory dir.",1,136
245,"public KaleoInstance remove(KaleoInstance kaleoInstance)
		throws SystemException {
		return super.remove(kaleoInstance);
	}",Removes the kaleo instance from the database.,1,32
246,"JerseyClientRequestContext request() {
            return requestContext;
        }",Returns a reference to the mutable request context to be invoked.,1,17
247,"public List<List<Object>> executeInsert(String sql) throws SQLException {
        Connection connection = createConnection();
        Statement statement = null;
        try {
            log.fine(sql);
            statement = getStatement(connection, sql);
            this.updateCount = statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
            ResultSet keys = statement.getGeneratedKeys();
            return calculateKeys(keys);
        }
        catch (SQLException e) {
            log.log(Level.FINE, ""Failed to execute: "" + sql, e);
            throw e;
        }
        finally {
            closeResources(connection, statement);
        }
    }",Executes the given SQL statement (typically an INSERT statement).,1,183
248,"public synchronized MucCreateConfigFormHandle createOrJoin(Resourcepart nickname) throws NoResponseException, XMPPErrorException,
                    InterruptedException, MucAlreadyJoinedException, NotConnectedException, NotAMucServiceException {
        MucEnterConfiguration mucEnterConfiguration = getEnterConfigurationBuilder(nickname).build();
        return createOrJoin(mucEnterConfiguration);
    }","Same as  #createOrJoin(Resourcepart, String, DiscussionHistory, long), but without a password, specifying a discussion history and using the connections default reply timeout.",1,64
249,"default Option<T> minBy(Comparator<? super T> comparator) {
        Objects.requireNonNull(comparator, ""comparator is null"");
        if (isEmpty()) {
            return None.instance();
        } else {
            final T value = reduce((t1, t2) -> comparator.compare(t1, t2) <= 0 ? t1 : t2);
            return new Some<>(value);
        }
    }",Calculates the minimum of this elements using a specific comparator.,1,130
250,"public OTMetric getOTMetric(final String name) {
		return getOTMetric(name, null, null, null);
	}",Returns the OTMetric for the provided parameters,1,36
251,"public static boolean compareDocuments(Document original, Document proposed) {
		boolean originalDocumentAdjusted = checkNamespaces(original, proposed);
		originalDocumentAdjusted |= addOrUpdateElements(original.getDocumentElement(), proposed.getDocumentElement(), originalDocumentAdjusted);
		originalDocumentAdjusted |= removeElements(original.getDocumentElement(), proposed.getDocumentElement(), originalDocumentAdjusted);
		return originalDocumentAdjusted;
	}",This method will compare the original document with the proposed document and return true if adjustments to the original document were necessary.,1,97
252,"public static <T extends Iterable<?>> T noNullElements(T iterable) {
        return noNullElements(iterable, DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EXCEPTION_MESSAGE);
    }",Validate that the specified argument iterable is neither null nor contains any elements that are null; otherwise throwing an exception.,1,41
253,"public boolean isChunked() {
        return hasEntity() && ChunkedOutput.class.isAssignableFrom(getEntity().getClass());
    }",Returns  true if the response entity is a  ChunkedOutput instance.,1,39
254,"public Value convertTo(int targetType, int precision, Mode mode, Object column, ExtTypeInfo extTypeInfo) {
        // converting NULL is done in ValueNull
        // converting BLOB to CLOB and vice versa is done in ValueLob
        if (getType() == targetType) {
            return this;
        }
        try {
            switch (targetType) {
            case NULL:
                return ValueNull.INSTANCE;
            case BOOLEAN:
                return convertToBoolean();
            case BYTE:
                return convertToByte(column);
            case SHORT:
                return convertToShort(column);
            case INT:
                return convertToInt(column);
            case LONG:
                return convertToLong(column);
            case DECIMAL:
                return convertToDecimal();
            case DOUBLE:
                return convertToDouble();
            case FLOAT:
                return convertToFloat();
            case DATE:
                return convertToDate();
            case TIME:
                return convertToTime();
            case TIMESTAMP:
                return convertToTimestamp(mode);
            case TIMESTAMP_TZ:
                return convertToTimestampTimeZone();
            case BYTES:
                return convertToBytes(mode);
            case STRING:
                return convertToString(mode);
            case STRING_IGNORECASE:
                return convertToStringIgnoreCase(mode);
            case STRING_FIXED:
                return convertToStringFixed(precision, mode);
            case JAVA_OBJECT:
                return convertToJavaObject();
            case ENUM:
                return convertToEnumInternal((ExtTypeInfoEnum) extTypeInfo);
            case BLOB:
                return convertToBlob();
            case CLOB:
                return convertToClob();
            case UUID:
                return convertToUuid();
            case GEOMETRY:
                return convertToGeometry((ExtTypeInfoGeometry) extTypeInfo);
            case Value.INTERVAL_YEAR:
            case Value.INTERVAL_MONTH:
            case Value.INTERVAL_YEAR_TO_MONTH:
                return convertToIntervalYearMonth(targetType);
            case Value.INTERVAL_DAY:
            case Value.INTERVAL_HOUR:
            case Value.INTERVAL_MINUTE:
            case Value.INTERVAL_SECOND:
            case Value.INTERVAL_DAY_TO_HOUR:
            case Value.INTERVAL_DAY_TO_MINUTE:
            case Value.INTERVAL_DAY_TO_SECOND:
            case Value.INTERVAL_HOUR_TO_MINUTE:
            case Value.INTERVAL_HOUR_TO_SECOND:
            case Value.INTERVAL_MINUTE_TO_SECOND:
                return convertToIntervalDayTime(targetType);
            case ARRAY:
                return convertToArray();
            case ROW:
                return convertToRow();
            case RESULT_SET:
                return convertToResultSet();
            default:
                if (JdbcUtils.customDataTypesHandler != null) {
                    return JdbcUtils.customDataTypesHandler.convert(this, targetType);
                }
                throw getDataConversionError(targetType);
            }
        } catch (NumberFormatException e) {
            throw DbException.get(ErrorCode.DATA_CONVERSION_ERROR_1, e, getString());
        }
    }",Compare a value to the specified type.,1,677
255,"public final int getMeasuredWidth() {
        return mMeasuredWidth & MEASURED_SIZE_MASK;
    }","Like  #getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by  #MEASURED_SIZE_MASK).",1,25
256,"private IoBuffer encodeAuthenticationPacket(final SocksProxyRequest request)
            throws UnsupportedEncodingException, GSSException {
        byte method = ((Byte) getSession().getAttribute(
                Socks5LogicHandler.SELECTED_AUTH_METHOD)).byteValue();

        switch (method) {
        case SocksProxyConstants.NO_AUTH:
            // In this case authentication is immediately considered as successfull
            // Next writeRequest() call will send the proxy request
            getSession().setAttribute(HANDSHAKE_STEP,
                    SocksProxyConstants.SOCKS5_REQUEST_STEP);
            break;

        case SocksProxyConstants.GSSAPI_AUTH:
            return encodeGSSAPIAuthenticationPacket(request);

        case SocksProxyConstants.BASIC_AUTH:
            // The basic auth scheme packet is sent
            byte[] user = request.getUserName().getBytes(""ASCII"");
            byte[] pwd = request.getPassword().getBytes(""ASCII"");
            IoBuffer buf = IoBuffer.allocate(3 + user.length + pwd.length);

            buf.put(SocksProxyConstants.BASIC_AUTH_SUBNEGOTIATION_VERSION);
            buf.put((byte) user.length);
            buf.put(user);
            buf.put((byte) pwd.length);
            buf.put(pwd);

            return buf;
        }

        return null;
    }",Encode the authentication packet for supported authentication methods.,1,282
257,"public int tierAlias() {
    return mTierAlias;
  }",Gets the tier alias of the location.,1,19
258,"public static List getAt(Collection coll, String property) {
        List<Object> answer = new ArrayList<Object>(coll.size());
        return getAtIterable(coll, property, answer);
    }",Support the subscript operator for Collection.,1,63
259,"public Observable<T> autoConnect(int numberOfSubscribers) {
        return autoConnect(numberOfSubscribers, Functions.emptyConsumer());
    }",Returns an Observable that automatically connects to this ConnectableObservable when the specified number of Subscribers subscribe to it.,1,35
260,"public static SipManager getInstance(Context context) {
        return (isApiSupported(context) ? new SipManager() : null);
    }",Gets a manager instance.,1,41
261,"public int register(final String alias, final Validator validator, final Setter setter) {
		if (locations != null)
			throw new GdxRuntimeException(""Cannot register an uniform after initialization"");
		final int existing = getUniformID(alias);
		if (existing >= 0) {
			validators.set(existing, validator);
			setters.set(existing, setter);
			return existing;
		}
		uniforms.add(alias);
		validators.add(validator);
		setters.add(setter);
		return uniforms.size - 1;
	}",Register an uniform which might be used by this shader.,1,158
262,"public static List<String> getPath() {
        return Arrays.asList(System.getenv(""PATH"").split("":""));
    }",This will return the environment variable PATH,1,43
263,"static List<Long> rangeClosed(long from, long toInclusive) {
        if (from > toInclusive) {
            return Nil.instance();
        } else if (toInclusive == Long.MIN_VALUE) {
            return List.of(Long.MIN_VALUE);
        } else {
            List<Long> result = Nil.instance();
            for (long i = toInclusive; i >= from; i--) {
                result = result.prepend(i);
            }
            return result;
        }
    }","Creates a List of long numbers starting from  from, extending to  toInclusive.",1,157
264,"public WriteConcern withWTimeout(final long wTimeout, final TimeUnit timeUnit) {
        notNull(""timeUnit"", timeUnit);
        long newWTimeOutMS = TimeUnit.MILLISECONDS.convert(wTimeout, timeUnit);
        isTrueArgument(""wTimeout >= 0"", wTimeout >= 0);
        isTrueArgument(""wTimeout <= "" + Integer.MAX_VALUE + "" ms"", newWTimeOutMS <= Integer.MAX_VALUE);
        return new WriteConcern(w, (int) newWTimeOutMS, fsync, journal);
    }",Constructs a new WriteConcern from the current one and the specified wTimeout in the given time unit.,1,129
265,"public static double get(ClassMetricKey key, ASTClassOrInterfaceDeclaration node) {
        return get(key, node, Version.STANDARD);
    }",Computes the standard value of the metric identified by its code on a class AST node.,1,40
266,"public Authentication get() {
        Jenkins h = Jenkins.getInstance();
        Secret userName = Secret.decrypt(props.getProperty(getPropertyKey()));
        if (userName==null) return Jenkins.ANONYMOUS; // failed to decrypt
        try {
            UserDetails u = h.getSecurityRealm().loadUserByUsername(userName.getPlainText());
            return new UsernamePasswordAuthenticationToken(u.getUsername(), """", u.getAuthorities());
        } catch (AuthenticationException e) {
            return Jenkins.ANONYMOUS;
        } catch (DataAccessException e) {
            return Jenkins.ANONYMOUS;
        }
    }",Gets the persisted authentication for this Jenkins.,1,167
267,"public double evaluate(final double[] values, final double[] weights, final double mean) {
        return evaluate(values, weights, mean, 0, values.length);
    }","Returns the weighted variance of the values in the input array, using the precomputed weighted mean value.",1,59
268,"@SuppressWarnings(""unchecked"")
  public static <T extends gobblin.dataset.Dataset> DatasetsFinder<T> instantiateDatasetFinder(Properties props, FileSystem fs,
      String def) throws IOException {
    String className = def;
    if (props.containsKey(DATASET_PROFILE_CLASS_KEY)) {
      className = props.getProperty(DATASET_PROFILE_CLASS_KEY);
    }
    try {
      Class<?> datasetFinderClass = Class.forName(className);
      return (DatasetsFinder<T>) datasetFinderClass.getConstructor(FileSystem.class, Properties.class).newInstance(fs,
          props);
    } catch (ClassNotFoundException exception) {
      throw new IOException(exception);
    } catch (NoSuchMethodException exception) {
      throw new IOException(exception);
    } catch (InstantiationException exception) {
      throw new IOException(exception);
    } catch (IllegalAccessException exception) {
      throw new IOException(exception);
    } catch (InvocationTargetException exception) {
      throw new IOException(exception);
    }

  }",Instantiate a  DatasetsFinder.,1,277
269,"private Object generateRandomDerivedValue(Object origValue, FieldSpec fieldSpec) {
    if (fieldSpec.isSingleValueField()) {
      // SV column
      return generateDerivedRandomValueHelper(origValue, fieldSpec.getDataType());
    } else {
      // MV column
      if (origValue == null) {
        return null;
      }
      Object[] origMultiValues = (Object[]) origValue;
      int length = origMultiValues.length;
      Object[] derivedMultiValues = new Object[length];
      for (int i = 0; i < length; i++) {
        derivedMultiValues[i] = generateDerivedRandomValueHelper(origMultiValues[i], fieldSpec.getDataType());
      }
      return derivedMultiValues;
    }
  }",Used for columns that are neither time (time related) columns (for which we retain value) or filter columns (for which we generate global dictionary 1:1 mapping between original and generated values).,1,196
270,"protected XmlRpcMember parseMemberElement(Element memberElement) {
    String name = null;
    XmlRpcElement value = null;

    NodeList children = memberElement.getChildNodes();
    int childCount = children.getLength();

    for (int i = 0; i < childCount; i++) {
      Node child = children.item(i);

      if (child instanceof Element) {
        String childName = child.getNodeName();

        if (XmlRpcEntity.NAME.equals(childName)) {
          Element nameElement = (Element) child;
          name = DomUtils.getTextValue(nameElement);

        } else if (XmlRpcEntity.VALUE.equals(childName)) {
          Element valueElement = (Element) value;
          value = this.parseValueElement(valueElement);

        } else {
          throw new XmlRpcParsingException(""Unexpected element '"" + childName
              + ""'"");
        }
      }
    }

    if (!StringUtils.hasText(name)) {
      throw new XmlRpcParsingException(""The struct member should have a name"");
    }

    return new XmlRpcMember(name, value);
  }",Parses the given XML element that contains a member of a XML-RPC complex structure.,1,316
271,"public static int parseTrueHdSyncframeAudioSampleCount(ByteBuffer buffer, int offset) {
    // TODO: Link to specification if available.
    boolean isMlp = (buffer.get(buffer.position() + offset + 7) & 0xFF) == 0xBB;
    return 40 << ((buffer.get(buffer.position() + offset + (isMlp ? 9 : 8)) >> 4) & 0x07);
  }",Reads the number of audio samples represented by a TrueHD syncframe.,1,115
272,"public static <T> boolean put(String key, T value) {
    // Validate
    HawkUtils.validateBuild();
    HawkUtils.checkNull(""Key"", key);

    // If the value is null, delete it
    if (value == null) return delete(key);

    // 1. Convert to text
    String plainText = HAWK.converter.toString(value);
    if (plainText == null) return false;

    // 2. Encrypt the text
    String cipherText = null;
    try {
      cipherText = HAWK.encryption.encrypt(key, plainText);
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (cipherText == null) return false;

    // 3. Serialize the given object along with the cipher text
    String encodedText = HAWK.serializer.serialize(cipherText, value);
    if (encodedText == null) return false;

    // 4. Save to the storage
    return HAWK.storage.put(key, encodedText);
  }","Saves any type including any collection, primitive values or custom objects",1,253
273,"public static ArithmeticOperatorFactory valueOf(AggregationExpression expression) {
			return new ArithmeticOperatorFactory(expression);
		}",Take the value resulting from the given @literal expression.,1,29
274,"public synchronized Collection<PacketExtension> getExtensions() {
        if (packetExtensions == null) {
            return Collections.emptyList();
        }
        return Collections.unmodifiableList(new ArrayList<PacketExtension>(packetExtensions));
    }",Returns an unmodifiable collection of the packet extensions attached to the packet.,1,64
275,"protected Frame parse_test_folder( String fname, int[] skippedColumns ) {
    File folder = FileUtils.locateFile(fname);
    File[] files = contentsOf(fname, folder);
    Arrays.sort(files);
    ArrayList<Key> keys = new ArrayList<>();
    for( File f : files )
      if( f.isFile() )
        keys.add(NFSFileVec.make(f)._key);
    Key[] res = new Key[keys.size()];
    keys.toArray(res);
    return ParseDataset.parse(skippedColumns, Key.make(), res);
  }",Find & parse a folder of CSV files.,1,179
276,"public static boolean equals(CharSequence text, Object o) {
        if (text == o) {
            return true;
        }

        if (text != null && o instanceof CharSequence) { // both non-null
            return textEquals(text, (CharSequence)o);
        }
        return false;
    }",Compare character sequence to another object.,1,96
277,"public I18nMessage arrayIsNotEmpty() {
    return createMessage(bundlePath, 22);
  }",Generates a  I18nMessage for an array which was expected to be empty but wasn't,1,25
278,"public double getHeight() {
		String sHeight = maRowElement.getProperty(OdfTableRowProperties.RowHeight);
		if (sHeight == null) {
			sHeight = maRowElement.getProperty(OdfTableRowProperties.MinRowHeight);
		}
		if (sHeight == null) {
			sHeight = DEFAULT_HEIGHT;
		}
		return PositiveLength.parseDouble(sHeight, Unit.MILLIMETER);
	}",Return the height of the row (in Millimeter).,1,103
279,"public AuthorizationServerEndpointsConfigurer authenticationManager(AuthenticationManager authenticationManager) {
		this.authenticationManager = authenticationManager;
		return this;
	}",The AuthenticationManager for the password grant.,1,32
280,"static MethodHandle lookupMethod(MethodHandles.Lookup lookup, Class<?> receiverClass, String name, Object args[], long recipe) {
         Method method = lookupMethodInternal(receiverClass, name, args.length - 1);
         MethodHandle handle = method.handle;

         if (recipe != 0) {
             MethodHandle filters[] = new MethodHandle[args.length];
             for (int i = 0; i < args.length; i++) {
                 // its a functional reference, replace the argument with an impl
                 if ((recipe & (1L << (i - 1))) != 0) {
                     filters[i] = lookupReference(lookup, method.arguments.get(i - 1).clazz, (String) args[i]);
                 }
             }
             handle = MethodHandles.filterArguments(handle, 0, filters);
         }
         
         return handle;
     }","Looks up handle for a dynamic method call, with lambda replacement",1,255
281,"public static String reverse(String str) {
        if (str == null) {
            return null;
        }
        return new StringBuilder(str).reverse().toString();
    }",Reverses a String as per  StringBuilder#reverse(). A null String returns null.,1,60
282,"private ExecutableType[] getExecutableTypes(final AnnotatedElement element) {
        final ValidateOnExecution validateExecutable = element.getAnnotation(ValidateOnExecution.class);
        return validateExecutable != null ? validateExecutable.type() : null;
    }",Return an array of executable types contained in  ValidateOnExecution annotation belonging to the  element.,1,62
283,"public MultiLayerNetwork fit(JavaRDD<LabeledPoint> rdd,int batchSize) {
        FeedForwardLayer outputLayer = (FeedForwardLayer) conf.getConf(conf.getConfs().size() - 1).getLayer();
        return fitDataSet(MLLibUtil.fromLabeledPoint(rdd, outputLayer.getNOut(), batchSize));
    }",Fit the given rdd given the context.,1,82
284,"private Object[] getChildren(Object input) {
		if (input == cachedParent) {
			return cachedChildren;
		}

		cachedParent = input;
		if (input instanceof IDifferenceGroup) {
			cachedChildren = getChildren((IDifferenceGroup)input);
		} else {
			cachedChildren = viewer.getFilteredChildren(input);
		}

		return cachedChildren;
	}",Return a (possibly empty) array of items which are the children of the input item.,1,107
285,"public static Collection<Object> getExtensionProviders() {
        return Collections.unmodifiableCollection(extensionProviders.values());
    }",Returns an unmodifiable collection of all PacketExtensionProvider instances.,1,33
286,"public static UriComponentsBuilder fromMethod(Class<?> controllerType, Method method, Object... args) {
		return fromMethodInternal(null, controllerType, method, args);
	}",Create a  UriComponentsBuilder from the mapping of a controller method and an array of method argument values.,1,52
287,"public static Process execute(final String[] commandArray, final List<String> envp, final File dir) throws IOException {
        return Runtime.getRuntime().exec(commandArray, (String[]) (envp == null ? null : envp.toArray(new String[envp.size()])), dir);
    }","Executes the command specified by the String array given in the first parameter, with the environment defined by envp and under the working directory dir.",1,99
288,"public int compare(String k1, String k2) {
        ModelProperty p1 = modelProperties.get(k1);
        ModelProperty p2 = modelProperties.get(k2);
        int res = getValueOrZero(p1.getPosition()).compareTo(getValueOrZero(p2.getPosition()));
        return res != 0? res : k1.compareTo(k2);
      }",Returns a  TreeMap where the keys are sorted by their respective property position values in ascending order.,1,103
289,"static Optional<Method> getMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {
		Preconditions.notNull(clazz, ""Class must not be null"");
		Preconditions.notBlank(methodName, ""Method name must not be null or blank"");

		try {
			return Optional.ofNullable(clazz.getMethod(methodName, parameterTypes));
		}
		catch (Throwable t) {
			return Optional.empty();
		}
	}",Get the  Method in the specified class with the specified name and parameter types.,1,118
290,"public Extract getExtract() {
    return extract;
  }",Attributes object for differing pull types.,1,19
291,"public Table getTable(final byte[] tableName) throws
        IOException {
      String table = Bytes.toString(tableName);
      Map<String, Table> tables = threadLocalTables.get();
      if (!tables.containsKey(table)) {
        tables.put(table, (Table)connectionCache.getTable(table));
      }
      return tables.get(table);
    }",Creates and returns a Table instance from a given table name.,1,109
292,"public Set<String> analysisFields() {
        Set<String> analysisFields = termFields();

        addIfNotNull(analysisFields, categorizationFieldName);
        addIfNotNull(analysisFields, summaryCountFieldName);

        for (Detector d : getDetectors()) {
            addIfNotNull(analysisFields, d.getFieldName());
        }

        // remove empty strings
        analysisFields.remove("""");

        return analysisFields;
    }",Return the set of fields required by the analysis.,1,108
293,"public static List<HostAddress> resolveXMPPDomain(String domain) {
        return resolveDomain(domain, 'c');
    }",Returns a list of HostAddresses under which the specified XMPP server can be reached at for client-to-server communication.,1,33
294,"public DubboRestServiceMetadata get(String serviceName, RequestMetadata requestMetadata) {
        return match(repository, serviceName, requestMetadata);
    }",Get a  DubboRestServiceMetadata by the specified service name if  RequestMetadata matched,1,36
295,"public static <A> BoundNullaryPredicate bind(Predicate<? super A> predicate, A arg) {
        return null == predicate ? null : new BoundNullaryPredicate(predicate, arg);
    }","Adapt the given, possibly-null,  Predicate Predicate to the  NullaryPredicate NullaryPredicate interface by binding the specified Object as a constant argument.",1,61
296,"public static JdbcSQLException getSQLException(int errorCode, String p1) {
        return getSQLException(errorCode, new String[] { p1 });
    }",Gets the SQL exception object for a specific error code.,1,45
297,"public static ResolvableType forClass(Class<?> sourceClass, Class<?> implementationClass) {
		Assert.notNull(sourceClass, ""Source class must not be null"");
		ResolvableType asType = forType(implementationClass).as(sourceClass);
		return (asType == NONE ? forType(sourceClass) : asType);
	}",Return a  ResolvableType for the specified  Class with a given implementation.,1,85
298,"boolean checkRequestParameters(final RestRequest request, final RestChannel channel) {
        // If JSONP is disabled and someone sends a callback parameter we should bail out before querying
        if (!settings.getAsBoolean(HTTP_JSON_ENABLE, false) && request.hasParam(""callback"")) {
            try {
                XContentBuilder builder = channel.newBuilder();
                builder.startObject().field(""error"",""JSONP is disabled."").endObject().string();
                RestResponse response = new BytesRestResponse(FORBIDDEN, builder);
                response.addHeader(""Content-Type"", ""application/javascript"");
                channel.sendResponse(response);
            } catch (IOException e) {
                logger.warn(""Failed to send response"", e);
            }
            return false;
        }

        // error_trace cannot be used when we disable detailed errors
        if (channel.detailedErrorsEnabled() == false && request.paramAsBoolean(""error_trace"", false)) {
            try {
                XContentBuilder builder = channel.newBuilder();
                builder.startObject().field(""error"",""error traces in responses are disabled."").endObject().string();
                RestResponse response = new BytesRestResponse(BAD_REQUEST, builder);
                response.addHeader(""Content-Type"", ""application/json"");
                channel.sendResponse(response);
            } catch (IOException e) {
                logger.warn(""Failed to send response"", e);
            }
            return false;
        }

        return true;
    }",Checks the request parameters against enabled settings for JSONP and error trace support,1,356
299,"private static Set<String> getModifiers(DetailAST defAST)
    {
        final AST modifiersAST = defAST.findFirstToken(TokenTypes.MODIFIERS);
        final Set<String> modifiersSet = new HashSet<>();
        if (modifiersAST != null) {
            AST modifier = modifiersAST.getFirstChild();
            while (modifier != null) {
                modifiersSet.add(modifier.getText());
                modifier = modifier.getNextSibling();
            }
        }
        return modifiersSet;

    }",Returns the set of modifier Strings for a VARIABLE_DEF or CLASS_DEF AST.,1,142
300,"private boolean isDeleted(Clustering clustering, Cell cell)
    {
        // If we're live, don't consider anything deleted, even if the cell ends up having as timestamp Long.MIN_VALUE
        // (which shouldn't happen in practice, but it would invalid to consider it deleted if it does).
        if (isLive())
            return false;

        if (cell.livenessInfo().timestamp() <= partitionDeletion.markedForDeleteAt())
            return true;

        // No matter what the counter cell's timestamp is, a tombstone always takes precedence. See CASSANDRA-7346.
        if (!partitionDeletion.isLive() && cell.isCounterCell())
            return true;

        return ranges != null && ranges.isDeleted(clustering, cell);
    }",Return whether a given cell is deleted by this deletion info.,1,130
301,"public FrameState popScope() {
        IRScope callingScope = scope.caller;
        assert callingScope != null;
        assert maxStackSize() >= scope.method.maxStackSize();
        FrameState res = new FrameState(callingScope, callingScope.method.maxLocals(), maxStackSize());
        res.replaceStack(this);
        res.replaceLocks(this);
        res.replaceLocals(scope.callerState());
        res.unsafe = unsafe;
        return res;
    }",Creates a new  FrameState corresponding to the state upon returning from this inlined method into the outer,1,131
302,"public Node getChildNode(int index)
	{
		if(childNodes.size()>index)
		{
			return childNodes.get(index);
		}
		return null;
	}",Get the childNode at an index,1,52
303,"public StackTraceElement[] getStackTrace() {
    return stackTrace;
  }",Stack traces are not currently populated by GWT.,1,21
304,"public static OrientBaseGraph getGraph() {
    ODatabaseRecord database = ODatabaseRecordThreadLocal.INSTANCE.get();
    if (!(database instanceof ODatabaseDocumentTx))
      database = new ODatabaseDocumentTx((ODatabaseRecordTx) database);

    return new OrientGraph((ODatabaseDocumentTx) database);
  }",Returns a Transactional OrientGraph implementation from the current database in thread local.,1,78
305,"public static RPCBlockWriteResponse decode(ByteBuf in) {
    Preconditions.checkNotNull(in);

    long userId = in.readLong();
    long blockId = in.readLong();
    long offset = in.readLong();
    long length = in.readLong();
    short status = in.readShort();
    return new RPCBlockWriteResponse(userId, blockId, offset, length, Status.fromShort(status));
  }",Decodes the input  ByteBuf into a  RPCBlockWriteResponse object and returns it.,1,126
306,"private int validateDBE() throws IOException {
    int incompatibilities = 0;

    LOG.info(""Validating Data Block Encodings"");

    try (Connection connection = ConnectionFactory.createConnection(getConf());
        Admin admin = connection.getAdmin()) {
      List<TableDescriptor> tableDescriptors = admin.listTableDescriptors();
      String encoding = """";

      for (TableDescriptor td : tableDescriptors) {
        ColumnFamilyDescriptor[] columnFamilies = td.getColumnFamilies();
        for (ColumnFamilyDescriptor cfd : columnFamilies) {
          try {
            encoding = Bytes.toString(cfd.getValue(DATA_BLOCK_ENCODING));
            // IllegalArgumentException will be thrown if encoding is incompatible with 2.0
            DataBlockEncoding.valueOf(encoding);
          } catch (IllegalArgumentException e) {
            incompatibilities++;
            LOG.warn(""Incompatible DataBlockEncoding for table: {}, cf: {}, encoding: {}"",
                td.getTableName().getNameAsString(), cfd.getNameAsString(), encoding);
          }
        }
      }
    }

    if (incompatibilities > 0) {
      LOG.warn(""There are {} column families with incompatible Data Block Encodings. Do not ""
          + ""upgrade until these encodings are converted to a supported one."", incompatibilities);
      LOG.warn(""Check http://hbase.apache.org/book.html#upgrade2.0.prefix-tree.removed ""
          + ""for instructions."");
    } else {
      LOG.info(""The used Data Block Encodings are compatible with HBase 2.0."");
    }
    return incompatibilities;
  }",Check DataBlockEncodings of column families are compatible.,1,330
307,"public static String delete(String str, String set) {
        if (str == null || str.length() == 0 || set == null || set.length() == 0) {
            return str;
        }
        String[] strs = new String[1];
        strs[0] = set;
        return delete(str, strs);
    }","Takes an argument in set-syntax, see evaluateSet, and deletes any of characters present in the specified string.",1,124
308,"public static GLFWErrorCallback errorfunThrow() {
		return new GLFWErrorCallback() {
			@Override
			public void invoke(int error, long description) {
				throw new IllegalStateException(String.format(""GLFW error [0x%X]: %s"", error, errorfunDescriptionString(description)));
			}
		};
	}",Returns a  GLFWErrorCallback instance that throws an  IllegalStateException when an error occurs.,1,82
309,"public OutStream getOutStream(WriteType writeType) throws IOException {
    if (isComplete()) {
      throw new IOException(""Overriding after completion not supported."");
    }

    if (writeType == null) {
      throw new IOException(""WriteType can not be null."");
    }

    return new FileOutStream(this, writeType, mUFSConf, mTachyonConf);
  }","Returns the  OutStream of this file, use the specified write type.",1,99
310,"public List<? extends FrameSlot> getSlots() {
        return Collections.unmodifiableList(slots);
    }",Current set of slots in the descriptor.,1,31
311,"public Member nextMember() {
        String[] original = null;
        try {
            original = readNextTokens();
        } catch (IOException e) {
            Toast.makeText(context, e.getMessage(), Toast.LENGTH_LONG).show();
        }
        if (original == null) {
            return null;
        }

        ContentValues values = new ContentValues();
        for (int i = 0; i < original.length; i++) {
            String column = MAPPING.get(header[i]);
            if (column != null) {
                String value = original[i];

                // clean names...
                if (column.equals(Member.FIRST_NAME) || column.equals(Member.LAST_NAME)) {
                    value = capitalize(value);
                }
                // ... and cities & countries
                if (column.equals(Member.CITY) || column.equals(Member.COUNTRY)) {
                    value = capitalize(value);
                }

                // clean phone numbers
                if (column.equals(Member.PHONE_HOME) || column.equals(Member.PHONE_MOBILE)
                        || column.equals(Member.PHONE_MOBILE_2)
                        || column.equals(Member.PHONE_OTHER)) {
                    if (!TextUtils.isEmpty(value)) {
                        value = value.replaceAll(""\\."", """");
                        value = value.replaceFirst(""0"", ""+33"");
                    }
                }

                // fix gender code
                if (column.equals(Member.GENDER)) {
                    if (""H"".equals(value)) { // H = 'Homme'
                        value = Member.GENDER_MALE;
                    }
                }

                // address has the same header twice in the CSV...
                if (column.equals(Member.ADDRESS)) {
                    value = value.toLowerCase(Locale.FRANCE);
                    if (values.containsKey(column)) {
                        if (TextUtils.isEmpty(value)) {
                            value = values.getAsString(column);
                        } else {
                            value = values.getAsString(column) + ""\n"" + value;
                        }
                    }
                }

                values.put(column, value);
            }
        }

        if (values.size() == 0) {
            return null;
        }
        return new Member(values);
    }","Read the next line from the CSV file, parse the data and convert them as a Member instance.",1,631
312,"public synchronized int getNumberOfFiles(String path) throws IOException {
    connect();
    try {
      return mMasterClient.user_getNumberOfFiles(path);
    } catch (TException e) {
      mConnected = false;
      throw new IOException(e);
    }
  }",Get the number of the files under the folder.,1,79
313,"private static boolean same(LIRInstruction op1, LIRInstruction op2) {
            assert op1 != null;
            assert op2 != null;

            if (op1 instanceof ValueMoveOp && op2 instanceof ValueMoveOp) {
                ValueMoveOp move1 = (ValueMoveOp) op1;
                ValueMoveOp move2 = (ValueMoveOp) op2;
                if (move1.getInput().equals(move2.getInput()) && move1.getResult().equals(move2.getResult())) {
                    // these moves are exactly equal and can be optimized
                    return true;
                }
            } else if (op1 instanceof LoadConstantOp && op2 instanceof LoadConstantOp) {
                LoadConstantOp move1 = (LoadConstantOp) op1;
                LoadConstantOp move2 = (LoadConstantOp) op2;
                if (move1.getConstant().equals(move2.getConstant()) && move1.getResult().equals(move2.getResult())) {
                    // these moves are exactly equal and can be optimized
                    return true;
                }
            }
            return false;
        }",Determines if two operations are both plain MoveOp moves that have the same source and plain MoveOp#getResult() destination operands.,1,263
314,"public static MultipartInserter fromMultipartData(String name, Object value) {
		Assert.notNull(name, ""'key' must not be null"");
		Assert.notNull(value, ""'value' must not be null"");
		return new DefaultMultipartInserter().with(name, value);
	}","Return a  MultipartInserter that writes the given parts, as multipart data.",1,69
315,"public static IProject getProjectFromName(String projectName) {
    IWorkspace workspace = ResourcesPlugin.getWorkspace();
    IStatus status = workspace.validateName(projectName, IResource.PROJECT);

    if (status.isOK()) {
      IProject project = workspace.getRoot().getProject(projectName);
      
      if (!project.exists())
        return null;
      
      return project;
    }
    return null;
  }",Returns the IProject by the specified name in the workspace.,1,122
316,"public Set<Object> getIdentifiers() {
        lock();
        try {
            return unmodifiableSetFromEconomicMap(EconomicMap.create(identifierToSlotMap));
        } finally {
            unlock();
        }
    }",Retrieve the current set of all the identifiers associated with this frame descriptor.,1,57
317,"@NonNull
        public PreparedDeleteCollectionOfObjects<T> prepare() {
            return new PreparedDeleteCollectionOfObjects<T>(
                    storIOContentResolver,
                    objects,
                    deleteResolver
            );
        }",Builds instance of  PreparedDeleteCollectionOfObjects.,1,45
318,"public int getConcurrency() throws SQLException {
        return getResultSet().getConcurrency();
    }",Retrieves the concurrency mode of this getResultSet() object.,1,29
319,"protected Statement createBindableStatement(PropertyNode propertyNode, Expression fieldExpression) {
        // create statementBody
        return new ExpressionStatement(
                new MethodCallExpression(
                        VariableExpression.THIS_EXPRESSION,
                        ""firePropertyChange"",
                        new ArgumentListExpression(
                                new Expression[]{
                                        new ConstantExpression(propertyNode.getName()),
                                        fieldExpression,
                                        new BinaryExpression(
                                                fieldExpression,
                                                Token.newSymbol(Types.EQUAL, 0, 0),
                                                new VariableExpression(""value""))})));
    }","Creates a statement body similar to: this.firePropertyChange(""field"", field, field = value)",1,124
320,"public static IFile findIResource(Resource eResource) {
		final URI uri = eResource.getURI();
		IFile iFile = null;
		if (uri != null) {
			if (uri.isPlatformResource()) {
				final IPath path = new Path(uri.trimFragment().toPlatformString(true));
				iFile = ResourcesPlugin.getWorkspace().getRoot().getFile(path);
			} else {
				// FIXME URI should be deresolved against the workspace root
				final IPath path = new Path(uri.trimFragment().path());
				iFile = (IFile)ResourcesPlugin.getWorkspace().getRoot().findMember(path);
			}
		}
		return iFile;
	}",This will try and find the  IFile containing the given EMF  Resource.,1,189
321,"private Observable<CategoryItem> getTitleCategories(String title) {
        return categoryClient.searchCategories(title.toLowerCase(), SEARCH_CATS_LIMIT)
                .map(name -> new CategoryItem(name, false));
    }",Return category for single title title is converted to lower case to make search case-insensitive,1,57
322,"// TODO make final
    protected URI getBaseUri() {
        if (testContainer != null) {
            // called from outside of JerseyTest constructor
            return testContainer.getBaseUri();
        }
        // called from within JerseyTest constructor
        return UriBuilder.fromUri(""http://localhost/"").port(getPort()).build();
    }",Returns the base URI of the tested application.,1,73
323,"private String toClassRefPath(MethodInfo methodInfo) {
        final String desc = methodInfo.getDescriptor();//e.g: ()Ljava/sql/Driver;

        int i = desc.indexOf(')');
        int i2;
        String classRefPath = null;//e.g: java.sql.Driver

        if (i < 0) {
            throw new RuntimeException(""parse descriptor error:"" + desc);
        }
        i += 1;
        char c = desc.charAt(i);
        int arrayDim = 0;
        while (c == '[') {
            ++arrayDim;
            c = desc.charAt(++i);
        }
        if (c == 'L') {
            i2 = desc.indexOf(';', ++i);
            classRefPath = desc.substring(i, i2++).replace('/', '.');
        }

        if (arrayDim > 0) {
            StringBuffer sbuf = new StringBuffer(classRefPath);
            while (arrayDim-- > 0) {
                sbuf.append(""[]"");
            }

            classRefPath = sbuf.toString();
        }

        return classRefPath;
    }","copy from javassist.bytecode.Descriptor#toCtClass(javassist.ClassPool, java.lang.String, int, javassist.CtClass[], int) convert methodInfo.getDescriptor() to class reference path e.g: convert ""()Ljava/sql/Driver"" to ""java.sql.Driver""",1,314
324,"public Element html(String html) {
        empty();
        append(html);
        return this;
    }",Set this element's inner HTML.,1,35
325,"public JCRPermission savePermission(final JCRPermission permission) throws RepositoryException {
        return JCRTemplate.getInstance().doExecuteWithSystemSession(new JCRCallback<JCRPermission>() {
            public JCRPermission doInJCR(JCRSessionWrapper session) throws RepositoryException {
                savePermission(permission, session);
                return permission;
            }
        });
    }",Creates or updates the specified  JCRPermission.,1,86
326,"public String toSQL(final Map<String, String> logicAndActualTableMap, final ShardingRule shardingRule) {
        StringBuilder result = new StringBuilder();
        for (Object each : segments) {
            if (!(each instanceof ShardingPlaceholder)) {
                result.append(each);
                continue;
            }
            String logicTableName = ((ShardingPlaceholder) each).getLogicTableName();
            String actualTableName = logicAndActualTableMap.get(logicTableName);
            if (each instanceof TablePlaceholder) {
                result.append(null == actualTableName ? logicTableName : actualTableName);
            } else if (each instanceof SchemaPlaceholder) {
                SchemaPlaceholder schemaPlaceholder = (SchemaPlaceholder) each;
                Optional<TableRule> tableRule = shardingRule.tryFindTableRuleByActualTable(actualTableName);
                if (!tableRule.isPresent() && Strings.isNullOrEmpty(shardingRule.getDefaultDataSourceName())) {
                    throw new ShardingJdbcException(""Cannot found schema name '%s' in sharding rule."", schemaPlaceholder.getLogicSchemaName());
                }
                // TODO 目前只能找到真实数据源名称. 未来需要在初始化sharding rule时创建connection,并验证连接是否正确,并获取出真实的schema的名字, 然后在这里替换actualDataSourceName为actualSchemaName
                // TODO 目前actualDataSourceName必须actualSchemaName一样,才能保证替换schema的场景不出错, 如: show columns xxx
                result.append(tableRule.get().getActualDatasourceNames().iterator().next());
            } else if (each instanceof IndexPlaceholder) {
                IndexPlaceholder indexPlaceholder = (IndexPlaceholder) each;
                result.append(indexPlaceholder.getLogicIndexName());
                if (!Strings.isNullOrEmpty(actualTableName)) {
                    result.append(""_"");
                    result.append(actualTableName);
                }
            } else {
                result.append(each);
            }
        }
        return result.toString();
    }",Convert to SQL string.,1,407
327,"public final String getStyle()
	{
		Session session = getSession();
		if (session == null)
		{
			throw new WicketRuntimeException(""Wicket Session object not avaiable"");
		}
		return session.getStyle();
	}",A convinient method.,1,69
328,"public CoGroupOperatorWithoutFunction equalTo(String... fields) {
				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()));
			}",Continues a CoGroup transformation and defines the fields of the second co-grouped  DataSet that should be used as grouping keys.,1,45
329,"protected ElementState getElementState()
    {
        return _elementStates[ _elementStateCount ];
    }",Return the state of the current element.,1,25
330,"public static JdbcSQLException getSQLException(int errorCode, String p1) {
        return getSQLException(errorCode, new String[] { p1 });
    }",Gets the SQL exception object for a specific error code.,1,45
331,"public int[] getReorderCodes() {
        if (m_reorderCodes_ != null) {
            return m_reorderCodes_.clone();
        } else {
            return LeadByteConstants.EMPTY_INT_ARRAY;
        }
    }",Retrieves the reordering codes for this collator.,1,57
332,"public static String expandString(String expression, Map<String, ? extends Object> context, TimeZone timeZone, Locale locale) {
        if (context == null || expression == null || !expression.contains(openBracket)) {
            return expression;
        }
        FlexibleStringExpander fse = FlexibleStringExpander.getInstance(expression);
        return fse.expandString(context, timeZone, locale);
    }",Evaluate an expression and return the result as a String.,1,119
333,"protected List<Metric> serializeGauge(String name, Gauge gauge) {
    List<Metric> metrics = new ArrayList<Metric>();
    try {
      metrics.add(new Metric(name, Double.parseDouble(gauge.getValue().toString())));
    } catch(NumberFormatException exception) {
      LOGGER.info(""Failed to serialize gauge metric. Not compatible with double value."");
    }
    return metrics;
  }",Extracts metrics from  com.codahale.metrics.Gauge.,1,111
334,"protected static XMLReader createParser() throws FOPException {
        try {
            SAXParserFactory factory = SAXParserFactory.newInstance();
            factory.setNamespaceAware(true);
            return factory.newSAXParser().getXMLReader();
        } catch (SAXException se) {
            throw new FOPException(""Coudn't create XMLReader"", se);
        } catch (ParserConfigurationException pce) {
            throw new FOPException(""Coudn't create XMLReader"", pce);
        }
    }",Creates XMLReader object using default SAXParserFactory,1,122
335,"protected boolean isAllowed(InetAddress address)
    {
        return _set.test(address);
    }",Check if specified request is allowed by current IPAccess rules.,1,28
336,"public <K, V> KTable<K, V> table(final AutoOffsetReset offsetReset,
                                     final String topic,
                                     final String storeName) {
        return table(offsetReset, null, null, topic, storeName);
    }",Create a  KTable for the specified topic.,1,68
337,"public static String escape(String str) {
        return StringEscapeUtils.escapeJava(str);
    }","Escapes any values it finds into their String form. So a tab becomes the characters '\\' and 't'. As of Lang 2.0, this calls  StringEscapeUtils#escapeJava(java.lang.String) behind the scenes.",1,29
338,"public OAuthToken remove(long oAuthTokenId)
		throws NoSuchOAuthTokenException, SystemException {
		return remove(Long.valueOf(oAuthTokenId));
	}",Removes the o auth token with the primary key from the database.,1,38
339,"static SchemaVersion extractSchemaVersion(String migrationName) {
		// Handle the description
		String description = null;
		int descriptionPos = migrationName.indexOf(""__"");
		if (descriptionPos != -1) {
			description = migrationName.substring(descriptionPos + 2).replaceAll(""_"", "" "");
			migrationName = migrationName.substring(0, descriptionPos);
		}

		return new SchemaVersion(migrationName.replace(""_"", "".""), description);
	}",Extracts the schema version from a migration name formatted as,1,136
340,"public ReceivedEmailAttributes build() {
    return new ReceivedEmailAttributes(id,
                                       subject,
                                       from,
                                       to,
                                       bcc,
                                       cc,
                                       replyTo,
                                       headers,
                                       receivedDate,
                                       sentDate,
                                       new EmailFlags(answered, deleted, draft, recent, seen));
  }",builds the new  ReceivedEmailAttributes instance.,1,81
341,"public IConverter lookup(Class clazz) throws NoSuchMethodException, IllegalArgumentException,
            InstantiationException, IllegalAccessException, InvocationTargetException
    {
        return lookup(clazz, null);
    }",Look up and return any registered  IConverterfor the specified destination class.,1,46
343,"public Argument setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }",Sets the default value of this  Argument.,1,32
344,"public boolean equals(Object o) {
        if (o == null) {
            return false;
        }
        if (!(o instanceof RenderState)) {
            return false;
        }
        RenderState rs = (RenderState) o;
        if (pointSprite != rs.pointSprite) {
            return false;
        }

        if (wireframe != rs.wireframe) {
            return false;
        }

        if (cullMode != rs.cullMode) {
            return false;
        }

        if (depthWrite != rs.depthWrite) {
            return false;
        }

        if (depthTest != rs.depthTest) {
            return false;
        }
        if (depthTest) {
            if (depthFunc != rs.depthFunc) {
                return false;
            }
        }

        if (colorWrite != rs.colorWrite) {
            return false;
        }

        if (blendEquation != rs.blendEquation) {
            return false;
        }
        
        if (blendEquationAlpha != rs.blendEquationAlpha) {
            return false;
        }

        if (blendMode != rs.blendMode) {
            return false;
        }

        if (alphaTest != rs.alphaTest) {
            return false;
        }
        if (alphaTest) {
            if (alphaFunc != rs.alphaFunc) {
                return false;
            }
        }

        if (alphaFallOff != rs.alphaFallOff) {
            return false;
        }

        if (offsetEnabled != rs.offsetEnabled) {
            return false;
        }

        if (offsetFactor != rs.offsetFactor) {
            return false;
        }

        if (offsetUnits != rs.offsetUnits) {
            return false;
        }

        if (stencilTest != rs.stencilTest) {
            return false;
        }

        if (stencilTest) {
            if (frontStencilStencilFailOperation != rs.frontStencilStencilFailOperation) {
                return false;
            }
            if (frontStencilDepthFailOperation != rs.frontStencilDepthFailOperation) {
                return false;
            }
            if (frontStencilDepthPassOperation != rs.frontStencilDepthPassOperation) {
                return false;
            }
            if (backStencilStencilFailOperation != rs.backStencilStencilFailOperation) {
                return false;
            }
            if (backStencilDepthFailOperation != rs.backStencilDepthFailOperation) {
                return false;
            }

            if (backStencilDepthPassOperation != rs.backStencilDepthPassOperation) {
                return false;
            }
            if (frontStencilFunction != rs.frontStencilFunction) {
                return false;
            }
            if (backStencilFunction != rs.backStencilFunction) {
                return false;
            }
        }

        if(lineWidth != rs.lineWidth){
            return false;
        }

        return true;
    }",returns true if the given renderState is equal to this one,1,787
345,"public int getCurrentThreadsBusy() {
        if (executor!=null) {
            if (executor instanceof ThreadPoolExecutor) {
                return ((ThreadPoolExecutor)executor).getActiveCount();
            } else {
                try {
                    Method m = IntrospectionUtils.findMethod(executor.getClass(), ""getActiveCount"", new Class[] {}); 
                    if (m!=null) {
                        return ((Integer)m.invoke(executor, null)).intValue();
                    } else {
                        return -1;
                    }
                }catch (Exception ignore) {
                    if (log.isDebugEnabled()) 
                        log.debug(""Unable to invoke getActiveCount"",ignore);
                    return -2;
                }
            }
        } else {
            return -1;
        }
    }",Return the amount of threads that are in use,1,219
346,"protected Control createButtonApply(Composite compButton) {
		return UIControlsFactory.createButton(compButton, Messages.MasterDetailsComposite_buttonApply);
	}",Creates the 'Apply' Control.,1,32
347,"public List<SoftwareModuleTypeRequestBodyPost> buildAsList(final int count) {
        final ArrayList<SoftwareModuleTypeRequestBodyPost> bodyList = Lists.newArrayList();
        for (int index = 0; index < count; index++) {
            bodyList.add(doBuild(key + index, name + index));
        }
        return bodyList;
    }",Builds a list of multiple  SoftwareModuleTypeRequestBodyPost to create multiple software module types at once.,1,99
348,"public static Model createModel(boolean install, URL... knowledgeNames) throws Exception {
		return createModel(new DefaultInputStreamFactory(), install, knowledgeNames);
	}",Create a Model with a given Knowledge base Names.,1,49
349,"public static Builder<URL> of(URL... urls)
	{
		checkForNull(urls, ""Cannot specify null for input URLs."");
		checkForEmpty(urls, ""Cannot specify an empty array for input URLs."");
		return Builder.ofUrls(Arrays.asList(urls));
	}",Indicate to make thumbnails from the specified  URLs.,1,65
350,"public int insert(byte[] code)
        throws BadBytecode
    {
        return insert0(currentPos, code, false);
    }",Inserts the given bytecode sequence before the next instruction that would be returned by next() (not before the instruction returned by the last call to next()).,1,39
351,"public String getProto() {
        return getScheme();
    }",Get protocol scheme.,1,21
352,"public GobblinMetrics getOrDefault(String id, Callable<? extends GobblinMetrics> valueLoader) {
    try {
      return this.metricsCache.get(id, valueLoader);
    } catch (ExecutionException ee) {
      throw Throwables.propagate(ee);
    }
  }",Get the  GobblinMetrics instance associated with a given ID.,1,76
353,"public StreamSource getStream(String uri) throws IOException {
        Source source = null;
        try {
            source = getURIResolver().resolve(uri, getBaseURL());
        } catch (TransformerException te) {
            log.error(""Attempt to resolve URI '"" + uri + ""' failed: "", te);
        }
        if (source != null) {
            if (source instanceof StreamSource) {
                return (StreamSource)source;
            } else {
                log.error(""Attempt to resolve URI returned unknown source"");
            }
        }
        return null;
    }",Get a stream source for a reference.,1,161
354,"public boolean supports(Object domainInstance) {
        if (domainInstance == null) {
            return false;
        }

        if ((restrictSupportToClass != null)
            && !restrictSupportToClass.isAssignableFrom(
                domainInstance.getClass())) {
            return false;
        }

        if (obtainIdentity(domainInstance) == null) {
            return false;
        } else {
            return true;
        }
    }",Indicates support for the passed object.,1,123
355,"public final Deque<ReportBase> get_execution_reports(OrderID inOrderID)
    {
        return getExecutionReports(inOrderID);
    }",Gets the ReportBase values representing the order history of the given OrderID.,1,31
356,"private static JavaMethodView make(Inspection inspection, TeleClassMethodActor teleClassMethodActor, MethodCodeKind codeKind) throws MaxVMBusyException {
        JavaMethodView javaMethodView = null;
        // If there are compilations, then inspect in association with the most recent
        final MaxCompilation compiledCode = inspection.vm().codeCache().latestCompilation(teleClassMethodActor);
        if (compiledCode != null) {
            return make(inspection, compiledCode, codeKind);
        }
        final MethodView methodView = teleClassMethodActorToMethodView.get(teleClassMethodActor);
        if (methodView == null) {
            final MethodViewManager methodViewManager = (MethodViewManager) ViewKind.METHODS.viewManager();
            final MethodViewContainer container = methodViewManager.activateView();
            inspection.vm().acquireLegacyVMAccess();
            try {
                javaMethodView = new JavaMethodView(inspection, container, teleClassMethodActor, codeKind);
                container.add(javaMethodView);
                teleClassMethodActorToMethodView.put(teleClassMethodActor, javaMethodView);
            } finally {
                inspection.vm().releaseLegacyVMAccess();
            }

        } else {
            javaMethodView = (JavaMethodView) methodView;
        }
        return javaMethodView;
    }","Display a view for a Java method, showing the kind of code requested if available.",1,282
357,"private Collection getAuthenticators( String type )
    {
        Collection result = ( Collection ) authenticators.get( type );
        if( result != null && result.size() > 0 )
        {
            return result;
        }
        else
        {
            return null;
        }
    }",Returns the list of  Authenticators with the specified type.,1,95
358,"public KaleoAction remove(long kaleoActionId)
		throws NoSuchActionException, SystemException {
		return remove(Long.valueOf(kaleoActionId));
	}",Removes the kaleo action with the primary key from the database.,1,38
359,"public static Point[] getIntersections(ICurve curve, IGeometry geom) {
		if (geom instanceof ICurve) {
			return getIntersections(curve, (ICurve) geom);
		} else if (geom instanceof IShape) {
			return getIntersections(curve, (IShape) geom);
		} else if (geom instanceof IPolyCurve) {
			return getIntersections(curve, (IPolyCurve) geom);
		} else if (geom instanceof IPolyShape) {
			return getIntersections(curve, (IPolyShape) geom);
		} else {
			throw new UnsupportedOperationException(""Not yet implemented."");
		}
	}",Delegates to the appropriate getIntersections() method for the passed-in  IGeometry depending on its type.,1,176
360,"public SelectedTag getDesignatedClass() {

    try {
      return new SelectedTag(m_ClassMode, TAGS_OPTIMIZE);
    } catch (Exception ex) {
      return null;
    }
  }",Gets the method to determine which class value to optimize.,1,55
361,"public static Credentials getPreferredResolver(ResolverOverrider resolverOverrider, DeployerOverrider deployerOverrider, ArtifactoryServer server) {
        if (resolverOverrider != null && resolverOverrider.isOverridingDefaultResolver()) {
            return resolverOverrider.getOverridingResolverCredentials();
        }

        if (deployerOverrider != null && deployerOverrider.isOverridingDefaultDeployer()) {
            return deployerOverrider.getOverridingDeployerCredentials();
        }

        return server.getResolvingCredentials();
    }",Decides and returns the preferred resolver credentials to use from this builder settings and selected server,1,112
362,"public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i < array.length; i++) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the index of the given value in the array starting at the given index.,1,187
363,"private static long createRemovedPageInfo(long pagePos, boolean isPinned) {
            long result = pagePos & ~1;
            if (isPinned) {
                result |= 1;
            }
            return result;
        }","Transforms saved page position into removed page info by replacing ""page type"" bit with ""pinned page"" flag.",1,65
364,"public boolean canShare() {
        if (this.getShareContent() == null) {
            return false;
        }
        final AccessToken accessToken = AccessToken.getCurrentAccessToken();
        if (accessToken == null) {
            return false;
        }
        final Set<String> permissions = accessToken.getPermissions();
        if (permissions == null || !permissions.contains(""publish_actions"")) {
            Log.w(TAG, ""The publish_actions permissions are missing, the share will fail unless"" +
                    "" this app was authorized to publish in another installation."");
        }

        return true;
    }",Returns true if the content can be shared.,1,156
365,"public static String format(InetAddress address) {
        return format(address, -1, true);
    }",Formats a network address (with optional host) for display purposes.,1,34
366,"private boolean shouldContinue(Exchange exchange, RedeliveryData data) {
        if (data.continuedPredicate != null) {
            return data.continuedPredicate.matches(exchange);
        }
        // do not continue by default
        return false;
    }",Determines whether or not to continue if we are exhausted.,1,62
367,"protected long add(final KeyValue kv) {
    lock.readLock().lock();
    try {
      return this.memstore.add(kv);
    } finally {
      lock.readLock().unlock();
    }
  }",Adds a value to the memstore,1,70
368,"static Set<String> getDescendants(String roleName, String contextId)
    {
        return HierUtil.getDescendants(roleName, getGraph(contextId));
    }",Recursively traverse the  com.jts.fortress.rbac.AdminRole graph and return all of the descendants of a given parent  com.jts.fortress.rbac.AdminRole#name.,1,42
369,"public Deferred<Object> shutdown() {
    final class HClientShutdown implements Callback<Object, ArrayList<Object>> {
      public Object call(final ArrayList<Object> args) {
        return client.shutdown();
      }
      public String toString() {
        return ""shutdown HBase client"";
      }
    }
    final class ShutdownErrback implements Callback<Object, Exception> {
      public Object call(final Exception e) {
        final Logger LOG = LoggerFactory.getLogger(ShutdownErrback.class);
        if (e instanceof DeferredGroupException) {
          final DeferredGroupException ge = (DeferredGroupException) e;
          for (final Object r : ge.results()) {
            if (r instanceof Exception) {
              LOG.error(""Failed to flush the compaction queue"", (Exception) r);
            }
          }
        } else {
          LOG.error(""Failed to flush the compaction queue"", e);
        }
        return client.shutdown();
      }
      public String toString() {
        return ""shutdown HBase client after error"";
      }
    }
    // First flush the compaction queue, then shutdown the HBase client.
    return enable_compactions
      ? compactionq.flush().addCallbacks(new HClientShutdown(),
                                         new ShutdownErrback())
      : client.shutdown();
  }",Gracefully shuts down this instance.,1,342
370,"public String getUsername() {

        // Attempt to pull from GET parameters first
        String get_password = getQueryParameter(""username"");
        if (get_password != null)
            return get_password;
        
        // Otherwise, resort to parameters anywhere in the request body
        return request.getParameter(""username"");

    }",Returns the username provided by the user in the request.,1,69
371,"@Deprecated
    public AttitudeProvider getNonRotatingLaw() {
        return nonRotatingLaw;
    }",Get the underlying non-rotating attitude provider.,1,22
372,"public Map<ValueSource, InjectionSite> getInjectionSites() {
        return mappings;
    }",Returns the injection sites for all the injectable values.,1,25
373,"public ProjectFacade getFacade() {
		ProjectFacade facade = new ProjectFacade();
		facade.setId(getId());
		facade.setName(getName());
		facade.setDescription(getDescription());
		facade.setVariables(getVariables());
		facade.setLogLevel(getLogLevel());
		facade.setNotifiers(getNotifiers());
		Iterator it = getVcsList().iterator();
		while (it.hasNext()) {
			Vcs vcs = (Vcs) it.next();
			facade.getVcsList().add(vcs.getFacade());
		}
		it = getBuilderList().iterator();
		while (it.hasNext()) {
			Builder builder = (Builder) it.next();
			facade.getBuilderList().add(builder.getFacade());
		}
		return facade;
	}",Gets the facade of this project.,1,231
374,"public boolean loadSelf(ClusterObject clusterObj, Object obj)
    throws Exception
  {
    return loadSelfImpl(clusterObj, obj, false);
  }",Load the session from the jdbc objectStore.,1,42
375,"public Object caseBlock( Block object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Block'.,1,25
376,"public Hashtable getTaskDefinitions() {
        return ComponentHelper.getComponentHelper(this).getTaskDefinitions();
    }",Returns the current task definition hashtable.,1,28
377,"public Iterable<NumberTextStyleElement> getTextStyles() {
	return mStylesBaseImpl.getTextStyles();
    }",Returns an iterator for all NumberTextStyleElement elements.,1,26
378,"public Subscription subscribe(String name) {
        return subscribe(name, Long.MAX_VALUE, TimeUnit.MILLISECONDS, false);
    }",Creates a named subscription from this query or returns the existing Subscription if one already existed.,1,38
379,"public Object getElementAt( int index ) {
		return ( ( Rule )list.get( index ) );
	}",Gets the element at the specified index,1,40
380,"public ApiResult post() {
        return setupRequest(Api.METHOD_POST);
    }",Sets up a POST request using the parameters so far specified.,1,24
381,"public Integer getDefaultQueryTimeout() {
        return defaultQueryTimeoutSeconds;
    }",Gets the default query timeout that will be used for  java.sql.Statement Statements created from this connection.,1,19
382,"public static UI getCurrent() {
        return currentUI.get();
    }",Gets the currently used UI.,1,25
383,"private String adjustNull(final String s) {
      return s == null ? XML_RPC_NULL_STRING : s;
    }",Adjust null value (by converting to  GitSSHHandler#XML_RPC_NULL_STRING),1,37
384,"public Blob build() {
    UniqueTarArchiveEntries uniqueTarArchiveEntries = new UniqueTarArchiveEntries();

    // Adds all the layer entries as tar entries.
    for (LayerEntry layerEntry : layerEntries) {
      // Adds the entries to uniqueTarArchiveEntries, which makes sure all entries are unique and
      // adds parent directories for each extraction path.
      uniqueTarArchiveEntries.add(
          new TarArchiveEntry(
              layerEntry.getSourceFile().toFile(), layerEntry.getAbsoluteExtractionPathString()));
    }

    // Gets the entries sorted by extraction path.
    List<TarArchiveEntry> sortedFilesystemEntries = uniqueTarArchiveEntries.getSortedEntries();

    Set<String> names = new HashSet<>();

    // Adds all the files to a tar stream.
    TarStreamBuilder tarStreamBuilder = new TarStreamBuilder();
    for (TarArchiveEntry entry : sortedFilesystemEntries) {
      // Strips out all non-reproducible elements from tar archive entries.
      entry.setModTime(0);
      entry.setGroupId(0);
      entry.setUserId(0);
      entry.setUserName("""");
      entry.setGroupName("""");

      Verify.verify(!names.contains(entry.getName()));
      names.add(entry.getName());

      tarStreamBuilder.addTarArchiveEntry(entry);
    }

    return tarStreamBuilder.toBlob();
  }",Builds and returns the layer  Blob.,1,269
385,"public static SequenceInterval decode(String token) throws InvalidSequenceIntervalException {
		try {
			int dash = token.indexOf('-');
			if (dash < 0) {
				long moment = Long.parseLong(token);
				return new SequenceInterval(moment, moment);
			} else {
				String begin = token.substring(0, dash);
				String end = token.substring(dash+1);
				return new SequenceInterval(Long.parseLong(begin), Long.parseLong(end));
			}
		} catch (NumberFormatException e) {
			throw new InvalidSequenceIntervalException(""Invalid interval: "" + token, e);
		} catch (IllegalArgumentException e) {
			throw new InvalidSequenceIntervalException(""Invalid interval: "" + token, e);
		}
	}",Decode a String representing a SequenceInterval.,1,222
386,"private static String getSmileyPattern(Collection<Smiley> smileys)
    {
        synchronized (smileyStrings)
        {
            boolean smileyStringsIsEqual;

            if (smileyRegex == null)
                smileyStringsIsEqual = false;
            else
            {
                smileyStringsIsEqual = true;

                int smileyStringIndex = 0;
                int smileyStringCount = smileyStrings.size();

                smileyLoop: for (Smiley smiley : smileys)
                    for (String smileyString : smiley.getSmileyStrings())
                        if ((smileyStringIndex < smileyStringCount)
                            && smileyString.equals(smileyStrings
                                .get(smileyStringIndex)))
                            smileyStringIndex++;
                        else
                        {
                            smileyStringsIsEqual = false;
                            break smileyLoop;
                        }
                if (smileyStringsIsEqual
                    && (smileyStringIndex != smileyStringCount))
                    smileyStringsIsEqual = false;
            }

            if (!smileyStringsIsEqual)
            {
                smileyStrings.clear();

                StringBuffer regex = new StringBuffer();

                regex.append(""(?<!(alt='|alt=\""))("");
                for (Smiley smiley : smileys)
                    for (String smileyString : smiley.getSmileyStrings())
                    {
                        smileyStrings.add(smileyString);

                        regex.append(
                            GuiUtils.replaceSpecialRegExpChars(smileyString))
                            .append(""|"");
                    }
                regex = regex.deleteCharAt(regex.length() - 1);
                regex.append(')');

                smileyRegex = regex.toString();
            }
            return smileyRegex;
        }
    }",Gets a regex string which matches the smiley strings of the specified Collection of Smileys.,1,397
387,"public static UriComponentsBuilder fromMethodCall(UriComponentsBuilder builder, Object invocationInfo) {
		Assert.isInstanceOf(MethodInvocationInfo.class, invocationInfo);
		MethodInvocationInfo info = (MethodInvocationInfo) invocationInfo;
		return fromMethod(builder, info.getControllerMethod(), info.getArgumentValues());
	}",An alternative to  #fromMethodCall(Object) that accepts a  UriComponentsBuilder representing the base URL.,1,74
388,"public static File getResource(URL url, boolean install) throws Exception {
		File resource = new File(URLToAbsolutePath(url));
		if(resource.exists()) {
			return resource;
		} else if (!install) {			
			return null;
		}
		try(InputStream is = url.openStream()) {
			install(url.openStream(), url);
		}
		return resource;
	}",Get a local mirror of the remote resource or null if does not exist.,1,128
389,"public static int indexOf(CharSequence seq, int searchChar, int startPos) {
        if (isEmpty(seq)) {
            return INDEX_NOT_FOUND;
        }
        return StringUtils.indexOfSequence(seq, searchChar, startPos);
    }","Finds the first index within a CharSequence from a start position, handling  null.",1,66
390,"public static boolean containsKey(PropertyKey key) {
    return PROPERTIES.hasValueSet(key);
  }",Checks if the configuration contains value for the given key.,1,29
391,"public VRGuiManager getVRGUIManager(){
		return guiManager;
	}",Get the GUI manager attached to this application.,1,18
392,"public List<MgmtTagRequestBodyPut> build() {
        return Lists.newArrayList(doBuild(name));
    }",Builds a list with a single entry of  MgmtTagRequestBodyPut which can directly be used in the RESTful-API.,1,30
393,"public static Character minus(Character left, Character right) {
        return (char)(left - right);
    }",Subtract one Character from by subtracting the ASCII value of the second Character from the ASCII value of the first Character.,1,38
394,"public static Object asType(Collection col, Class clazz) {
        if (col.getClass() == clazz) {
            return col;
        }
        if (clazz == List.class) {
            return asList(col);
        }
        if (clazz == Set.class) {
            if (col instanceof Set) return col;
            return new HashSet(col);
        }
        if (clazz == SortedSet.class) {
            if (col instanceof SortedSet) return col;
            return new TreeSet(col);
        }
        Object[] args = {col};
        try {
            return InvokerHelper.invokeConstructorOf(clazz, args);
        } catch (Exception e) {
            // ignore
        }
        return asType((Object) col, clazz);
    }",Converts the given collection to another type.,1,238
395,"public boolean hasAbstractSchemaName() {
		return rootObject != null &&
		      !rootObject.isNull();
	}","Determines whether the ""root"" object was parsed.",1,35
396,"private boolean isDistributedPreviousStatement(DetailAST comment) {
        final DetailAST previousSibling = comment.getPreviousSibling();
        return isDistributedExpression(comment)
            || isDistributedReturnStatement(previousSibling)
            || isDistributedThrowStatement(previousSibling);
    }",Checks whether the previous statement of a comment is distributed over two or more lines.,1,59
397,"public List<FullJid> getOccupants() {
        return new ArrayList<>(occupantsMap.keySet());
    }",Returns an List for the list of fully qualified occupants in the group chat.,1,33
398,"public ListenableFuture<SegmentsAndCommitMetadata> registerHandoff(SegmentsAndCommitMetadata segmentsAndCommitMetadata)
  {
    if (segmentsAndCommitMetadata == null) {
      return Futures.immediateFuture(null);

    } else {
      final List<SegmentIdWithShardSpec> waitingSegmentIdList = segmentsAndCommitMetadata.getSegments().stream()
                                                                                         .map(
                                                                                       SegmentIdWithShardSpec::fromDataSegment)
                                                                                         .collect(Collectors.toList());
      final Object metadata = Preconditions.checkNotNull(segmentsAndCommitMetadata.getCommitMetadata(), ""commitMetadata"");

      if (waitingSegmentIdList.isEmpty()) {
        return Futures.immediateFuture(
            new SegmentsAndCommitMetadata(
                segmentsAndCommitMetadata.getSegments(),
                ((AppenderatorDriverMetadata) metadata).getCallerMetadata()
            )
        );
      }

      log.debug(""Register handoff of segments: [%s]"", waitingSegmentIdList);

      final SettableFuture<SegmentsAndCommitMetadata> resultFuture = SettableFuture.create();
      final AtomicInteger numRemainingHandoffSegments = new AtomicInteger(waitingSegmentIdList.size());

      for (final SegmentIdWithShardSpec segmentIdentifier : waitingSegmentIdList) {
        handoffNotifier.registerSegmentHandoffCallback(
            new SegmentDescriptor(
                segmentIdentifier.getInterval(),
                segmentIdentifier.getVersion(),
                segmentIdentifier.getShardSpec().getPartitionNum()
            ),
            Execs.directExecutor(),
            () -> {
              log.debug(""Segment[%s] successfully handed off, dropping."", segmentIdentifier);
              metrics.incrementHandOffCount();

              final ListenableFuture<?> dropFuture = appenderator.drop(segmentIdentifier);
              Futures.addCallback(
                  dropFuture,
                  new FutureCallback<Object>()
                  {
                    @Override
                    public void onSuccess(Object result)
                    {
                      if (numRemainingHandoffSegments.decrementAndGet() == 0) {
                        List<DataSegment> segments = segmentsAndCommitMetadata.getSegments();
                        log.debug(""Successfully handed off [%d] segments."", segments.size());
                        resultFuture.set(
                            new SegmentsAndCommitMetadata(
                                segments,
                                ((AppenderatorDriverMetadata) metadata).getCallerMetadata()
                            )
                        );
                      }
                    }

                    @Override
                    public void onFailure(Throwable e)
                    {
                      log.warn(e, ""Failed to drop segment[%s]?!"", segmentIdentifier);
                      numRemainingHandoffSegments.decrementAndGet();
                      resultFuture.setException(e);
                    }
                  }
              );
            }
        );
      }

      return resultFuture;
    }
  }",Register the segments in the given  SegmentsAndCommitMetadata to be handed off and execute a background task which waits until the hand off completes.,1,580
399,"protected XMPPTCPConnection createConnection() {
        // Create the configuration for this new connection
        ConnectionConfiguration config = new ConnectionConfiguration(host, port);
        config.setCompressionEnabled(compressionEnabled);
        config.setSendPresence(sendInitialPresence());
        if (getSocketFactory() == null) {
            config.setSocketFactory(getSocketFactory());
        }
        return new XMPPTCPConnection(config);
    }",Creates a new XMPPTCPConnection using the connection preferences.,1,95
400,"public static boolean judgeNotNull(Object object, Object... objects) {
        boolean flag = true;
        if (object == null) return false;
        for (Object o : objects) {
            if (o == null) {
                flag = false;
                return flag;
            }
        }

        return flag;
    }",Judge if the Objects are all defined.,1,109
401,"public ListenableFuture<CommitLogPosition> forceFlush()
    {
        synchronized (data)
        {
            Memtable current = data.getView().getCurrentMemtable();
            for (ColumnFamilyStore cfs : concatWithIndexes())
                if (!cfs.data.getView().getCurrentMemtable().isClean())
                    return switchMemtableIfCurrent(current);
            return waitForFlushes();
        }
    }",Flush if there is unflushed data in the memtables,1,102
402,"public static List<WorkItem> collectIncremental(IResourceDelta delta) {
		// XXX deleted packages should be considered to remove markers
		List<WorkItem> result = new ArrayList<WorkItem>();
		List<IResourceDelta> foldersDelta = new ArrayList<IResourceDelta>();
		IResourceDelta affectedChildren[] = delta.getAffectedChildren();
		for (int i = 0; i < affectedChildren.length; i++) {
			IResourceDelta childDelta = affectedChildren[i];
			IResource child = childDelta.getResource();
			if(child.isDerived()) {
				continue;
			}
			int childType = child.getType();
			int deltaKind = childDelta.getKind();
			if (childType == IResource.FILE) {
				if ((deltaKind == IResourceDelta.ADDED || deltaKind == IResourceDelta.CHANGED)
						&& Util.isJavaFile(child)) {
					result.add(new WorkItem(child));
				}
			} else if (childType == IResource.FOLDER) {
				if(deltaKind == IResourceDelta.ADDED) {
					result.add(new WorkItem(child));
				} else if(deltaKind == IResourceDelta.REMOVED) {
					// TODO should just remove markers....
					IContainer parent = child.getParent();
					if(parent instanceof IProject) {
						// have to recompute entire project if one of root folders is removed
						result.clear();
						result.add(new WorkItem(parent));
						return result;
					}
					result.add(new WorkItem(parent));
				} else if(deltaKind != IResourceDelta.REMOVED) {
					foldersDelta.add(childDelta);
				}
			}
		}

		for (IResourceDelta childDelta : foldersDelta) {
			result.addAll(collectIncremental(childDelta));
		}
		return result;
	}",Returns a list of all Java source related files in a resource delta.,1,476
403,"public Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor) {
        return new ReschedulingRunnable(command, interval, executor, this);
    }",Schedules a periodic action that runs on the specified thread pool.,1,46
404,"public List<PwPolicy> getPolicies()
    {
        return this.policies;
    }",Used by  FortressAntTask#addPolicies() to retrieve list of PwPolicy as defined in input xml file.,1,25
405,"public static UserTransactionManager getInstance() {
        if (null == transactionManager) {
            synchronized (AtomikosUserTransaction.class) {
                if (null == transactionManager) {
                    transactionManager = new UserTransactionManager();
                }
            }
        }
        return transactionManager;
    }",Get singleton  UserTransactionManager lazily.,1,81
406,"public LegacyNumericConfig getNumericConfig() {
    return this.numericConfig;
  }",Returns the  LegacyNumericConfig associated with the lower and upper bounds.,1,21
407,"public int getWorkerTimeout()
    {
        return workerTimeout;
    }",How many seconds to keep the connection thread alive between connection requests,1,20
408,"public KaleoAction remove(KaleoAction kaleoAction)
		throws SystemException {
		return super.remove(kaleoAction);
	}",Removes the kaleo action from the database.,1,32
409,"SecurityContext generateNewContext() {
        SecurityContext context = null;

        if (securityContextClass == null) {
            context = SecurityContextHolder.createEmptyContext();

            return context;
        }

        try {
            context = securityContextClass.newInstance();
        } catch (Exception e) {
            ReflectionUtils.handleReflectionException(e);
        }
        return context;
    }","By default, calls  SecurityContextHolder#createEmptyContext() to obtain a new context (there should be no context present in the holder when this method is called).",1,107
410,"public String getAttributeIndex() {

    return m_AttIndex.getSingleIndex();
  }",Get the index of the attribute used.,1,24
411,"public int setSpeechRate(float speechRate) {
        synchronized (mStartLock) {
            int result = ERROR;
            if (!mStarted) {
                return result;
            }
            try {
                if (speechRate > 0) {
                    int rate = (int)(speechRate*100);
                    mCachedParams[Engine.PARAM_POSITION_RATE + 1] = String.valueOf(rate);
                    // the rate is not set here, instead it is cached so it will be associated
                    // with all upcoming utterances.
                    if (speechRate > 0.0f) {
                        result = SUCCESS;
                    } else {
                        result = ERROR;
                    }
                }
            } catch (NullPointerException e) {
                // TTS died; restart it.
                Log.e(""TextToSpeech.java - setSpeechRate"", ""NullPointerException"");
                e.printStackTrace();
                mStarted = false;
                initTts();
            } catch (IllegalStateException e) {
                // TTS died; restart it.
                Log.e(""TextToSpeech.java - setSpeechRate"", ""IllegalStateException"");
                e.printStackTrace();
                mStarted = false;
                initTts();
            } finally {
                return result;
            }
        }
    }",Sets the speech rate for the TextToSpeech engine.,1,286
412,"public boolean deleteBlock(long blockId) throws IOException {
    Long accessTimeMs = mLastBlockAccessTimeMs.remove(blockId);
    if (accessTimeMs == null) {
      LOG.warn(""Block does not exist in current StorageDir! blockId:{}"", blockId);
      return false;
    }
    String blockfile = getBlockFilePath(blockId);
    // Should check lock status here 
    if (!isBlockLocked(blockId)) {
      if (!mFs.delete(blockfile, false)) {
        LOG.error(""Failed to delete block file! filename:{}"", blockfile);
        return false;
      }
      deleteBlockId(blockId);
    } else {
      mToRemoveBlockIdSet.add(blockId);
      LOG.debug(""Add block file {} to remove list!"", blockfile);
    }
    return true;
  }","Remove a block from current StorageDir, once calling this method, the block will not be available any longer",1,188
413,"private List<Entry> reduceWithDouglasPeuker(List<Entry> entries, double epsilon) {
        // if a shape has 2 or less points it cannot be reduced
        if (epsilon <= 0 || entries.size() < 3) {
            return entries;
        }

        // first and last always stay
        keep[0] = true;
        keep[entries.size() - 1] = true;

        // first and last entry are entry point to recursion
        algorithmDouglasPeucker(entries, epsilon, 0, entries.size() - 1);

        // create a new array with series, only take the kept ones
        List<Entry> reducedEntries = new ArrayList<Entry>();
        for (int i = 0; i < entries.size(); i++) {
            if (keep[i]) {
                Entry curEntry = entries.get(i);
                reducedEntries.add(new Entry(curEntry.getVal(), curEntry.getXIndex()));
            }
        }
        return reducedEntries;
    }",uses the douglas peuker algorithm to reduce the given List of entries,1,247
414,"String createRollingFileName(final String fullFileName) {
        Assert.notNull(fullFileName, ""file name must be not null"");
        final int posExt = fullFileName.lastIndexOf('.');
        final String fileName;
        final String fileExt;
        if (posExt == -1) {
            fileName = fullFileName;
            fileExt = """";
        } else {
            fileName = fullFileName.substring(0, posExt);
            fileExt = fullFileName.substring(posExt); // including '.'
        }
        final int posSuffix = fileName.lastIndexOf('_');
        final String mainPart;
        final String suffix;
        if (posSuffix == -1) {
            mainPart = fileName;
            suffix = """";
        } else {
            mainPart = fileName.substring(0, posSuffix);
            suffix = fileName.substring(posSuffix + 1); // excluding '_'
        }
        if (NumberUtils.isDigits(suffix)) {
            return mainPart + ""_"" + (NumberUtils.toInt(suffix) + 1) + fileExt;
        } else if (suffix.length() > 0) {
            return mainPart + ""_"" + suffix + ""_1"" + fileExt;
        }
        return mainPart + ""_1"" + fileExt;
    }","Create new sequential file name, which will have _seqnumber before file extension.",1,357
415,"public Intent peekNextStartedActivity() {
    return ShadowApplication.getInstance().peekNextStartedActivity();
  }",Delegates to the application to return (without consuming) the next  Intent on the started activities stack.,1,27
416,"public RegisterValue asValue(Kind kind) {
        return values[kind.ordinal()];
    }",Gets this register as a plain RegisterValue value with a specified kind.,1,29
417,"public String toSQL(final RoutingUnit routingUnit, final Map<String, String> logicAndActualTables) {
        StringBuilder result = new StringBuilder();
        for (Object each : segments) {
            if (each instanceof Alterable) {
                result.append(((Alterable) each).toString(routingUnit, logicAndActualTables));
            } else {
                result.append(each);
            }
        }
        return result.toString();
    }",Convert to SQL.,1,128
418,"public static JSONValue parse(String jsonString) {
    if (jsonString == null) {
      throw new NullPointerException();
    }
    if (jsonString == """") {
      throw new IllegalArgumentException(""empty argument"");
    }
    try {
      return evaluate(jsonString);
    } catch (JavaScriptException ex) {
      throw new JSONException(ex);
    }
  }",Evaluates a trusted JSON string and returns its JSONValue representation.,1,117
419,"public static Connection getConnection(String driver, String url, Properties prop) throws SQLException {
        if (StringUtils.isNullOrEmpty(driver)) {
            JdbcDriverUtils.load(url);
        } else {
            Class d = ClassUtils.loadUserClass(driver);
            if (java.sql.Driver.class.isAssignableFrom(d)) {
                return DriverManager.getConnection(url, prop);
                //## Java 1.4 begin ##
            } else if (javax.naming.Context.class.isAssignableFrom(d)) {
                // JNDI context
                try {
                    Context context = (Context) d.newInstance();
                    DataSource ds = (DataSource) context.lookup(url);
                    String user = prop.getProperty(""user"");
                    String password = prop.getProperty(""password"");
                    if (StringUtils.isNullOrEmpty(user) && StringUtils.isNullOrEmpty(password)) {
                        return ds.getConnection();
                    }
                    return ds.getConnection(user, password);
                 } catch (InstantiationException e) {
                     throw Message.convert(e);
                 } catch (IllegalAccessException e) {
                     throw Message.convert(e);
                 } catch (NamingException e) {
                     throw Message.convert(e);
                 }
                 //## Java 1.4 end ##
             } else {
                // Don't know, but maybe it loaded a JDBC Driver
                return DriverManager.getConnection(url, prop);
             }
        }
        return DriverManager.getConnection(url, prop);
    }",Open a new database connection with the given settings.,1,390
420,"protected boolean isLinked(String channelId) {
        Channel channel = thing.getChannel(channelId);
        if (channel != null) {
            return isLinked(channel.getUID());
        } else {
            logger.debug(""Channel with ID '{},' does not exists in thing '{}' and is therefore not linked."", channelId,
                    thing.getUID());
            return false;
        }
    }",Returns whether at least one item is linked for the given channel ID.,1,96
421,"@Override
    public int getVariableTop() {
        return (int)settings.readOnly().variableTop;
    }",@icu Gets the variable top value of a Collator.,1,31
422,"public String getPath(Uri uri) {
        final boolean isKitKatOrLater = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;

        // DocumentProvider
        if (isKitKatOrLater && DocumentsContract.isDocumentUri(getApplicationContext(), uri)) {
            // ExternalStorageProvider
            if (UriUtils.isExternalStorageDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                final String type = split[0];

                if (""primary"".equalsIgnoreCase(type)) {
                    return Environment.getExternalStorageDirectory() + ""/"" + split[1];
                }
            }
            // DownloadsProvider
            else if (UriUtils.isDownloadsDocument(uri)) {

                final String id = DocumentsContract.getDocumentId(uri);
                final Uri contentUri = ContentUris.withAppendedId(Uri.parse(""content://downloads/public_downloads""),
                        Long.valueOf(id));

                return UriUtils.getDataColumn(getApplicationContext(), contentUri, null, null);
            }
            // MediaProvider
            else if (UriUtils.isMediaDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                final String type = split[0];

                Uri contentUri = null;
                if (""image"".equals(type)) {
                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                } else if (""video"".equals(type)) {
                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                } else if (""audio"".equals(type)) {
                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                }

                final String selection = ""_id=?"";
                final String[] selectionArgs = new String[] { split[1] };

                return UriUtils.getDataColumn(getApplicationContext(), contentUri, selection, selectionArgs);
            }
            // Documents providers returned as content://...
            else if (UriUtils.isContentDocument(uri)) {
                return uri.toString();
            }
        }
        // MediaStore (and general)
        else if (""content"".equalsIgnoreCase(uri.getScheme())) {

            // Return the remote address
            if (UriUtils.isGooglePhotosUri(uri))
                return uri.getLastPathSegment();

            return UriUtils.getDataColumn(getApplicationContext(), uri, null, null);
        }
        // File
        else if (""file"".equalsIgnoreCase(uri.getScheme())) {
            return uri.getPath();
        }
        return null;
    }",Translates a content URI of an content to a physical path on the disk,1,689
423,"private static boolean isTransactional(DatasetGraph dsg) {
        return ! (dsg instanceof TransactionalNotSupported) ;
    }",Returns true iff the given  DatasetGraph supports transactions properly.,1,33
424,"public Reader.Position proposeStopPosition(Reader.Progress proposedStopPosition) {
    synchronized (sourceIteratorLock) {
      if (readerIterator == null) {
        LOG.warn(""Iterator has not been initialized, returning null stop position."");
        return null;
      }
      return readerIterator.updateStopPosition(proposedStopPosition);
    }
  }",Relays the request to update the stop position to  ReaderIterator.,1,77
425,"public static RSocketOutboundGatewaySpec outboundGateway(String route, Object... routeVariables) {
		return new RSocketOutboundGatewaySpec(route, routeVariables);
	}",Create an  RSocketOutboundGatewaySpec builder for request-reply gateway based on provided  route and optional variables to expand route template.,1,40
426,"public WSRPConsumer remove(long wsrpConsumerId)
		throws NoSuchConsumerException, SystemException {
		return remove(Long.valueOf(wsrpConsumerId));
	}",Removes the w s r p consumer with the primary key from the database.,1,38
427,"public Object caseDialRegion( DialRegion object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Dial Region'.,1,25
428,"protected final Page newPage(final String pageClassName)
    {
        return getPageFactory().newPage(
                pageClassName, new PageParameters(request.getParameterMap()));
    }",Create a new page,1,48
429,"public String[] getAllCoprocessors() {
    // Need a set to remove duplicates, but since generated Coprocessor class
    // is not Comparable, make it a Set<String> instead of Set<Coprocessor>
    TreeSet<String> coprocessSet = new TreeSet<String>();
    for (Coprocessor coprocessor : getServerLoadPB().getCoprocessorsList()) {
      coprocessSet.add(coprocessor.getName());
    }

    for (HBaseProtos.RegionLoad rl : getServerLoadPB().getRegionLoadsList()) {
      for (Coprocessor coprocessor : rl.getCoprocessorsList()) {
        coprocessSet.add(coprocessor.getName());
      }
    }

    return coprocessSet.toArray(new String[0]);
  }",Return the RegionServer-level and Region-level coprocessors,1,157
430,"public static long memmove(@NativeType(""void *"") DoubleBuffer dest, @NativeType(""void const *"") DoubleBuffer src) {
        if (CHECKS) {
            check(dest, src.remaining());
        }
        return nmemmove(memAddress(dest), memAddress(src), Integer.toUnsignedLong(src.remaining()) << 3);
    }",Copies  count bytes from memory area  src to memory area  dest.,1,98
431,"public synchronized Collection<String> getNames() {
        if (map == null) {
            return Collections.emptySet();
        }
        return Collections.unmodifiableSet(new HashMap<String,String>(map).keySet());
    }",Returns an unmodifiable collection of the names that can be used to get values of the packet extension.,1,70
432,"public WSRPProducer remove(WSRPProducer wsrpProducer)
		throws SystemException {
		return super.remove(wsrpProducer);
	}",Removes the w s r p producer from the database.,1,32
433,"public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the last index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex will return  #INDEX_NOT_FOUND (-1).,1,172
434,"public SVNRevision remove(SVNRevision svnRevision)
		throws SystemException {
		return super.remove(svnRevision);
	}",Removes the s v n revision from the database.,1,32
435,"public static Object identity(Object self, Closure closure) {
        return DefaultGroovyMethods.with(self, closure);        
    }",Allows the closure to be called for the object reference self synonym for 'with()',1,38
436,"public long offer(final DirectBufferVector[] vectors)
    {
        return cluster.offer(id, responsePublication, vectors);
    }",Non-blocking publish by gathering buffer vectors into a message.,1,38
437,"public static Rule<CharSequence> containedIn(String s) {
        return new ContainedInRule(s);
    }",Creates a  Rule which evaluates to true when passed in a char sequence which is contained in the specified string.,1,32
438,"private RVMMethod resolveInterfaceMethodInternal(RVMClass declaringClass) {
    RVMMethod it = declaringClass.findDeclaredMethod(name, descriptor);
    if (it != null) {
      resolvedMember = it;
      return resolvedMember;
    }
    for (RVMClass intf : declaringClass.getDeclaredInterfaces()) {
      it = searchInterfaceMethods(intf);
      if (it != null) {
        resolvedMember = it;
        return resolvedMember;
      }
    }
    return null;
  }",Find the RVMMethod that this member reference refers to using the search order specified in JVM spec 5.4.3.4.,1,135
439,"public final BasicBlockOperand asBlock() {
    return (BasicBlockOperand) this;
  }",Cast to an  BasicBlockOperand.,1,25
440,"private static String readLhex(StringReader input)
            throws IOException {

        StringBuilder result = new StringBuilder();
        boolean quoted = false;

        int c = input.read();

        // Skip lws
        while (c == 32 || c == 9) {
            c = input.read();
        }

        if (c == '""') {
            quoted = true;
        } else if (c == -1 || !isHex(c)) {
            return null;
        } else {
            result.append((char) c);
        }
        c = input.read();

        while (c != -1 && isHex(c)) {
            result.append((char) c);
            c = input.read();
        }

        if (quoted) {
            if (c != '""') {
                return null;
            }
        } else {
            // Skip back so non-token character is available for next read
            input.skip(-1);
        }

        if (c != -1 && result.length() == 0) {
            return null;
        } else {
            return result.toString().toLowerCase(Locale.US);
        }
    }",LHEX can be read unambiguously with or without surrounding quotes so this parsing method for LHEX permits optional surrounding double quotes.,1,369
441,"public MasterSlaveServersConfig useMasterSlaveServers() {
        return useMasterSlaveServers(new MasterSlaveServersConfig());
    }",Init master/slave servers configuration.,1,26
442,"public static Object getDefaultValue(Annotation annotation, String attributeName) {
		if (annotation == null) {
			return null;
		}
		return getDefaultValue(annotation.annotationType(), attributeName);
	}","Retrieve the default value of a named attribute, given an annotation instance.",1,62
443,"protected AmazonWebServiceResponse<T> parseResponseMetadata(HttpResponse response) {
        AmazonWebServiceResponse<T> awsResponse = new AmazonWebServiceResponse<T>();
        String awsRequestId = response.getHeaders().get(Headers.REQUEST_ID);
        String hostId = response.getHeaders().get(Headers.EXTENDED_REQUEST_ID);

        Map<String, String> metadataMap = new HashMap<String, String>();
        metadataMap.put(ResponseMetadata.AWS_REQUEST_ID, awsRequestId);
        metadataMap.put(S3ResponseMetadata.HOST_ID, hostId);
        awsResponse.setResponseMetadata(new S3ResponseMetadata(metadataMap));

        return awsResponse;
    }","Parses the S3 response metadata (ex: AWS request ID) from the specified response, and returns a AmazonWebServiceResponse object ready for the result to be plugged in.",1,157
444,"public String toString() {
        return DurationFormatUtils.formatISO(getTime());
    }","Gets a summary of the time that the stopwatch recorded as a string. The format used is ISO8601-like, hours:minutes:seconds.milliseconds.",1,26
445,"public KaleoInstanceToken remove(KaleoInstanceToken kaleoInstanceToken)
		throws SystemException {
		return super.remove(kaleoInstanceToken);
	}",Removes the kaleo instance token from the database.,1,32
446,"public LocalProperties filterBySemanticProperties(SemanticProperties props, int input) {

		if (props == null) {
			throw new NullPointerException(""SemanticProperties may not be null."");
		}

		LocalProperties returnProps = new LocalProperties();

		// check if sorting is preserved
		if (this.ordering != null) {
			Ordering newOrdering = new Ordering();

			for (int i = 0; i < this.ordering.getInvolvedIndexes().size(); i++) {
				int sourceField = this.ordering.getInvolvedIndexes().get(i);
				FieldSet targetField = props.getForwardingTargetFields(input, sourceField);
				if (targetField == null || targetField.size() == 0) {
					if (i == 0) {
						// order fully destroyed
						newOrdering = null;
						break;
					} else {
						// order partially preserved
						break;
					}
				} else {
					// use any field of target fields for now.  We should use something like field equivalence sets in the future.
					if(targetField.size() > 1) {
						LOG.warn(""Found that a field is forwarded to more than one target field in "" +
								""semantic forwarded field information. Will only use the field with the lowest index."");
					}
					newOrdering.appendOrdering(targetField.toArray()[0], this.ordering.getType(i), this.ordering.getOrder(i));
				}
			}

			returnProps.ordering = newOrdering;
			if (newOrdering != null) {
				returnProps.groupedFields = newOrdering.getInvolvedIndexes();
			} else {
				returnProps.groupedFields = null;
			}
		}
		// check if grouping is preserved
		else if (this.groupedFields != null) {
			FieldList newGroupedFields = new FieldList();

			for (Integer sourceField : this.groupedFields) {
				FieldSet targetField = props.getForwardingTargetFields(input, sourceField);
				if (targetField == null || targetField.size() == 0) {
					newGroupedFields = null;
					break;
				} else {
					// use any field of target fields for now.  We should use something like field equivalence sets in the future.
					if(targetField.size() > 1) {
						LOG.warn(""Found that a field is forwarded to more than one target field in "" +
								""semantic forwarded field information. Will only use the field with the lowest index."");
					}
					newGroupedFields = newGroupedFields.addField(targetField.toArray()[0]);
				}
			}
			returnProps.groupedFields = newGroupedFields;
		}

		if (this.uniqueFields != null) {
			Set<FieldSet> newUniqueFields = new HashSet<FieldSet>();
			for (FieldSet fields : this.uniqueFields) {
				FieldSet newFields = new FieldSet();
				for (Integer sourceField : fields) {
					FieldSet targetField = props.getForwardingTargetFields(input, sourceField);

					if (targetField == null || targetField.size() == 0) {
						newFields = null;
						break;
					} else {
						// use any field of target fields for now.  We should use something like field equivalence sets in the future.
						if(targetField.size() > 1) {
							LOG.warn(""Found that a field is forwarded to more than one target field in "" +
									""semantic forwarded field information. Will only use the field with the lowest index."");
						}
						newFields = newFields.addField(targetField.toArray()[0]);
					}
				}
				if (newFields != null) {
					newUniqueFields.add(newFields);
				}
			}

			if (!newUniqueFields.isEmpty()) {
				returnProps.uniqueFields = newUniqueFields;
			} else {
				returnProps.uniqueFields = null;
			}
		}

		return returnProps;
	}",Filters these LocalProperties by the fields that are forwarded to the output as described by the SemanticProperties.,1,899
447,"public static boolean areEqual(EObject eObjectA, EObject eObjectB) {
		long a;
		long b;

		try {
			// collections are treated specially because the order
			// of root elements should not matter
			if (eObjectA instanceof IdEObjectCollection) {
				a = computeChecksum((IdEObjectCollection) eObjectA);
				b = computeChecksum((IdEObjectCollection) eObjectB);
			} else {
				a = computeChecksum(eObjectA);
				b = computeChecksum(eObjectB);
			}
		} catch (SerializationException e) {
			return false;
		}

		return a == b;
	}",Compares two  EObjects by checking whether the string representations of the EObjects are equal.,1,156
448,"public Object create( final String name )
        throws TypeException
    {
        final String className = getClassName( name );

        try
        {
            return getClassLoader().loadClass( className ).newInstance();
        }
        catch( final Exception e )
        {
            throw new TypeException( ""Unable to instantiate '"" + name + ""'"", e );
        }
    }",Create a type instance with appropriate name.,1,118
449,"public SocksCmdStatus cmdStatus() {
        return cmdStatus;
    }",Returns the  SocksCmdStatus of this  SocksCmdResponse,1,19
450,"public static StaticResource get(final Package basePackage, final String path,
			final Locale locale, final String style)
	{
		final String key = basePackage.getName() + '/' + SharedResources.path(path, locale, style);
		synchronized (resourceMap)
		{
			StaticResource resource = (StaticResource)resourceMap.get(key);
			if (resource == null)
			{
				resource = new StaticResource(basePackage, path, locale, style);
				resourceMap.put(key, resource);
			}
			return resource;
		}
	}",Gets the resource for a given set of criteria.,1,167
451,"public static Set<String> getValidEmailAddresses(String emails) {
    Set<String> validEmailAddresses = new HashSet<>();
    List<String> invalidEmailAddresses = new ArrayList<>();
    if (StringUtils.isBlank(emails)) {
      return Sets.newHashSet();
    } else {
      String[] emailArr = emails.split("","");
      for (String email : emailArr) {
        email = email.trim();
        if (isValidEmailAddress(email)) {
          validEmailAddresses.add(email);
        } else {
          invalidEmailAddresses.add(email);
        }
      }
    }
    if (invalidEmailAddresses.size() > 0) {
      LOG.warn(""Found invalid email addresses, please verify the email addresses: {}"", invalidEmailAddresses);
    }
    return validEmailAddresses;
  }",Parse and return a set of valid email addresses,1,222
452,"public Boolean next(ImmutableBytesWritable ptr, int position, int maxOffset, int extraSpan) {
        Boolean returnValue = next(ptr, position, maxOffset);
        readExtraFields(ptr, position + 1, maxOffset, extraSpan);
        return returnValue;
    }","Like  #next(org.apache.hadoop.hbase.io.ImmutableBytesWritable, int, int), but also includes the next  extraSpan additional fields in the bytes ptr.",1,76
453,"static ParameterBindingType of(String parameterBindingKindName) {

				for (ParameterBindingType type : values()) {
					if (type.name().equalsIgnoreCase(parameterBindingKindName.trim())) {
						return type;
					}
				}

				return AS_IS;
			}",Return the appropriate  ParameterBindingType for the given  String.,1,75
454,"public JIRAChangeItem remove(JIRAChangeItem jiraChangeItem)
		throws SystemException {
		return super.remove(jiraChangeItem);
	}",Removes the j i r a change item from the database.,1,32
455,"public static Path getPathGlobal(OptionValues options, OptionKey<String> baseNameOption, OptionKey<String> defaultDirectory, String extension) {
        return getPath(options, baseNameOption, defaultDirectory, extension, false);
    }","Generate a  Path using the format ""%s-%d_%s"" with the  baseNameOption, a  #globalTimeStamp global timestamp and an optional  extension .",1,60
456,"private static InternalMessage transformExtendedRequest( LdapMessageCodec codecMessage, int messageId )
    {
        ExtendedRequestCodec extendedRequest = codecMessage.getExtendedRequest();
        ExtendedRequestImpl internalMessage;

        if ( extendedRequest.getRequestName().equals( GracefulShutdownRequest.EXTENSION_OID ) )
        {
            internalMessage = new GracefulShutdownRequest( messageId );
        }
        else
        {
            internalMessage = new ExtendedRequestImpl( messageId );
        }

        // Codec : OID requestName -> Internal : String oid
        internalMessage.setOid( extendedRequest.getRequestName() );

        // Codec : OctetString requestValue -> Internal : byte [] payload
        internalMessage.setPayload( extendedRequest.getRequestValue() );

        return internalMessage;
    }",Transform an ExtendedRequest message from a CodecMessage to a,1,159
457,"public TimeValue getBatchSpan() {
        return batchSpan;
    }",Interval into which to batch seasonal data,1,19
458,"public static ReferencedEnvelope reference(Envelope e) {
        if (e == null) {
            return null;
        } else {
            if (e instanceof ReferencedEnvelope) {
                return (ReferencedEnvelope) e;
            }

            return new ReferencedEnvelope(e, null);
        }
    }",Utility method to ensure that an Envelope if a ReferencedEnvelope.,1,89
459,"public List<Item> getItems() {
        synchronized (items) {
            return Collections.unmodifiableList(new ArrayList<Item>(items));
        }
    }","Returns a List of item childs that holds information about affiliation, jids and nicks.",1,47
460,"public Optional<Column> resolve(final LogicalSchema schema, final KsqlConfig ksqlConfig) {
    if (shouldUseLegacy(ksqlConfig)) {
      return legacyKeyField
          .map(f -> Column.of(f.columnRef.source(), f.columnRef.name(), f.type));
    }

    return resolveLatest(schema);
  }",Resolve this  KeyField to the specific key  Column to use.,1,96
461,"public DateFormat getDateFormat() {
        return (DateFormat) this.dateFormat.clone();
    }",Returns a copy of the date formatter.,1,29
462,"public Document toDbObject(String inputCollectionName, AggregationOperationContext rootContext) {

		AggregationOperationContext context = rootContext;
		List<Document> operationDocuments = new ArrayList<Document>(operations.size());

		for (AggregationOperation operation : operations) {

			operationDocuments.add(operation.toDocument(context));

			if (operation instanceof FieldsExposingAggregationOperation) {

				FieldsExposingAggregationOperation exposedFieldsOperation = (FieldsExposingAggregationOperation) operation;

				if (operation instanceof InheritsFieldsAggregationOperation) {
					context = new InheritingExposedFieldsAggregationOperationContext(exposedFieldsOperation.getFields(), context);
				} else {
					context = new ExposedFieldsAggregationOperationContext(exposedFieldsOperation.getFields(), context);
				}
			}
		}

		Document command = new Document(""aggregate"", inputCollectionName);
		command.put(""pipeline"", operationDocuments);

		command = options.applyAndReturnPotentiallyChangedCommand(command);

		return command;
	}",Converts this  Aggregation specification to a  Document.,1,243
463,"public static boolean isLessRestrictive(final Restriction_type neededTemplateRestriction, final Restriction_type refdTemplateRestriction) {
		switch (neededTemplateRestriction) {
		case TR_NONE:
			return false;
		case TR_VALUE:
			return refdTemplateRestriction != Restriction_type.TR_VALUE;
		case TR_OMIT:
			return refdTemplateRestriction != Restriction_type.TR_VALUE && refdTemplateRestriction != Restriction_type.TR_OMIT;
		case TR_PRESENT:
			return refdTemplateRestriction != Restriction_type.TR_VALUE && refdTemplateRestriction != Restriction_type.TR_PRESENT;
		default:
			return true;
		}
	}",Checks if neededTemplateRestriction is satisfied by refd_tr.,1,142
464,"public String toString() {
		// @formatter:off
		return new ToStringBuilder(this)
				.append(""type"", this.type)
				.append(""testDescriptor"", this.testDescriptor)
				.append(""timestamp"", this.timestamp)
				.append(""payload"", this.payload)
				.toString();
		// @formatter:on
	}",Get the  payload of expected type  T.,1,92
465,"public boolean getStorageEncryption(ComponentName admin) {
        if (mService != null) {
            try {
                return mService.getStorageEncryption(admin);
            } catch (RemoteException e) {
                Log.w(TAG, ""Failed talking with device policy service"", e);
            }
        }
        return false;
    }",Called by an application that is administering the device to determine the requested setting for secure storage.,1,88
466,"@Override
    public Vector3D parse(final String source, final ParsePosition pos) {
        final double[] coordinates = parseCoordinates(3, source, pos);
        if (coordinates == null) {
            return null;
        }
        return new Vector3D(coordinates[0], coordinates[1], coordinates[2]);
    }",Parses a string to produce a  Vector3D object.,1,100
467,"private String[] listInternal(String path, boolean recursive) throws IOException {
    try {
      path = stripPrefixIfPresent(path);
      path = PathUtils.normalizePath(path, PATH_SEPARATOR);
      path = path.equals(PATH_SEPARATOR) ? """" : path;
      Directory directory = new Directory(path, '/');
      Container c = mAccount.getContainer(mContainerName);
      Collection<DirectoryOrObject> res = c.listDirectory(directory);
      Set<String> children = new HashSet<>();
      Iterator<DirectoryOrObject> iter = res.iterator();
      while (iter.hasNext()) {
        DirectoryOrObject dirobj = iter.next();
        String child = stripFolderSuffixIfPresent(dirobj.getName());
        String noPrefix = stripPrefixIfPresent(child, path);
        children.add(noPrefix);
      }
      return children.toArray(new String[children.size()]);
    } catch (Exception e) {
      LOG.error(""Failed to list path {}"", path, e);
      return null;
    }
  }","Lists the files in the given path, the paths will be their logical names and not contain the folder suffix.",1,299
468,"public String getPassword() {
		return determinePassword();
	}",Determine the password to use based on this configuration and the environment.,1,21
469,"private static float[][] computeCoVariance(float[] points) {
        float[][] array = new float[2][2];
        array[0][0] = 0;
        array[0][1] = 0;
        array[1][0] = 0;
        array[1][1] = 0;
        int count = points.length;
        for (int i = 0; i < count; i++) {
            float x = points[i];
            i++;
            float y = points[i];
            array[0][0] += x * x;
            array[0][1] += x * y;
            array[1][0] = array[0][1];
            array[1][1] += y * y;
        }
        array[0][0] /= (count / 2);
        array[0][1] /= (count / 2);
        array[1][0] /= (count / 2);
        array[1][1] /= (count / 2);

        return array;
    }",Calculates the variance-covariance matrix of a set of points.,1,344
470,"public boolean saveLog(File file) {
        if (!isReady()) {
            return false;
        }
        // If saving to the same file that's already being saved to, do nothing.
        if (file.equals(outputFile)) {
            return true;
        }
        // If saving to a file used by another active log,
        // quit to avoid write conflicts.
        for (LoggingStreamDaemon log : allLogs) {
            if (!log.equals(this) && file.equals(log.outputFile)) {
                return false;
            }
        }

        try {
            if (!file.exists()) {
                file.getParentFile().mkdirs();
                file.createNewFile();
            }
            FileWriter w = new FileWriter(file, false);
            try (FileReader r = new FileReader(outputFile)) {
                char[] buffer = new char[BUFFER_SIZE];
                int count;
                while (-1 != (count = r.read(buffer))) {
                    w.write(new String(buffer, 0, count));
                }
            }
            w.flush();
            writer.close();
            writer = w;
        } catch (IOException ioe) {
            return false;
        }
        outputFile.delete();
        outputFile = file;
        saveLog = true;
        allLogs.add(this);
        return true;
    }",Sets the logging stream to be continuously saved to a file.,1,364
471,"public static boolean contains(final boolean[] array, final boolean valueToFind) {
        return (indexOf(array, valueToFind) != -1);
    }",Checks if the value is in the given array. The method returns false if a null array is passed in.,1,49
472,"public List<GWTJahiaPublicationInfo> getPublicationInfo(List<String> uuids, boolean allSubTree,
                                                            boolean checkForUnpublication, Set<String> languages)
            throws GWTJahiaServiceException {
        final JCRSessionWrapper session = retrieveCurrentSession();

        return publication.getFullPublicationInfos(uuids, languages, session, allSubTree, checkForUnpublication);
    }",Get the publication status information for multiple nodes by their identifier.,1,84
473,"private final String getSchemaDirectory( Schema schema )
    {
        return ""schema"" + SEPARATOR_PATTERN + ""ou=schema"" + SEPARATOR_PATTERN
                        + ""cn="" + schema.getSchemaName() + SEPARATOR_PATTERN;
    }",Utility method to get a regex.Pattern fragment for the path for a schema directory.,1,62
474,"public RawLogBuffers newPublication(
        final String channel,
        final int sessionId,
        final int streamId,
        final long correlationId)
    {
        return newInstance(publicationsDir, channel, sessionId, streamId, correlationId, publicationTermBufferSize);
    }",Create new  RawLogBuffers in the publications directory for the supplied triplet.,1,69
475,"private HLog.Entry createAEntry(HLogKey hlogKey, List<KeyValue> kvs) {
    WALEdit edit = new WALEdit();
    for (KeyValue kv : kvs )
    edit.add(kv);
    return new HLog.Entry(hlogKey, edit);
  }",Creates a WALEdit for the passed KeyValues and returns a HLog.Entry instance composed of the WALEdit and passed HLogKey.,1,79
476,"protected MediaCodecInfo getDecoderInfo(MediaCodecSelector mediaCodecSelector,
      Format format, boolean requiresSecureDecoder) throws DecoderQueryException {
    return mediaCodecSelector.getDecoderInfo(format.sampleMimeType, requiresSecureDecoder);
  }",Returns a  MediaCodecInfo for a given format.,1,47
477,"public Node getEndDecoration() {
		return endDecoration;
	}","Returns the end decoration  Node of this  Connection, or null.",1,19
478,"private static MethodView make(Inspection inspection, MaxCodeLocation codeLocation, boolean interactiveForNative) throws MaxVMBusyException {
        if (codeLocation.hasAddress()) {
            return make(inspection, codeLocation.address(), interactiveForNative);
        }
        if (codeLocation.hasTeleClassMethodActor()) {
            // TODO (mlvdv)  Select the specified bytecode position
            return make(inspection, codeLocation.teleClassMethodActor(), MethodCodeKind.BYTECODES);
        }
        // Has neither machine nor bytecode location specified.
        return null;
    }",Makes a view displaying code for specified code location.,1,116
479,"public static FluidActionResult tryPlaceFluid(@Nullable EntityPlayer player, World world, BlockPos pos, @Nonnull ItemStack container, FluidStack resource)
    {
        ItemStack containerCopy = ItemHandlerHelper.copyStackWithSize(container, 1); // do not modify the input
        IFluidHandlerItem containerFluidHandler = getFluidHandler(containerCopy);
        if (containerFluidHandler != null && tryPlaceFluid(player, world, pos, containerFluidHandler, resource))
        {
            return new FluidActionResult(containerFluidHandler.getContainer());
        }
        return FluidActionResult.FAILURE;
    }","ItemStack version of  #tryPlaceFluid(EntityPlayer, World, BlockPos, IFluidHandler, FluidStack).",1,137
480,"public final NullConstantOperand asNullConstant() {
    return (NullConstantOperand) this;
  }",Cast to an  NullConstantOperand.,1,25
481,"public List<Integer> getSelectedPositions() {
		return new ArrayList<Integer>(mSelectedPositions);
	}",Retrieves the list of selected items.,1,30
482,"private SilvercrestWifiSocketResponse decryptResponsePacket(final String hexPacket)
            throws PacketIntegrityErrorException, NotOneResponsePacketException {

        if (!Pattern.matches(RESPONSE_PREFIX + REGEX_HEXADECIMAL_PAIRS, hexPacket)) {
            logger.trace(""The packet received is not one response! \nPacket:[{}]"", hexPacket);
            throw new NotOneResponsePacketException(""The packet received is not one response."");
        }

        logger.trace(""Response packet: {}"", hexPacket);
        String macAddress = hexPacket.substring(4, 16);
        logger.trace(""The mac address of the sender of the packet is: {}"", macAddress);
        String decryptedData = this.decrypt(hexPacket.substring(18, hexPacket.length()));

        logger.trace(""Response packet decrypted data: [{}] with lenght: {}"", decryptedData, decryptedData.length());

        SilvercrestWifiSocketResponseType responseType;
        // check packet integrity
        if (Pattern.matches(REGEX_START_OF_RECEIVED_PACKET_SEARCH_MAC_ADDRESS, decryptedData)) {
            responseType = SilvercrestWifiSocketResponseType.DISCOVERY;
            logger.trace(""Received answer of mac address search! lenght:{}"", decryptedData.length());

        } else if (Pattern.matches(REGEX_START_OF_RECEIVED_PACKET_HEART_BEAT, decryptedData)) {
            responseType = SilvercrestWifiSocketResponseType.ACK;
            logger.trace(""Received heart beat!"");

        } else if (Pattern.matches(REGEX_START_OF_RECEIVED_PACKET_CMD_GPIO_EVENT, decryptedData)) {
            logger.trace(""Received gpio event!"");
            String status = decryptedData.substring(20, 22);
            responseType = ""FF"".equalsIgnoreCase(status) ? SilvercrestWifiSocketResponseType.ON
                    : SilvercrestWifiSocketResponseType.OFF;
            logger.trace(""Socket status: {}"", responseType);

        } else if (Pattern.matches(REGEX_START_OF_RECEIVED_PACKET_RESPONSE_GPIO_CHANGE_REQUEST, decryptedData)) {
            logger.trace(""Received response from a gpio change request!"");
            String status = decryptedData.substring(20, 22);
            responseType = ""FF"".equalsIgnoreCase(status) ? SilvercrestWifiSocketResponseType.ON
                    : SilvercrestWifiSocketResponseType.OFF;
            logger.trace(""Socket status: {}"", responseType);

        } else if (Pattern.matches(REGEX_START_OF_RECEIVED_PACKET_QUERY_STATUS, decryptedData)) {
            logger.trace(""Received response from status query!"");
            String status = decryptedData.substring(20, 22);
            responseType = ""FF"".equalsIgnoreCase(status) ? SilvercrestWifiSocketResponseType.ON
                    : SilvercrestWifiSocketResponseType.OFF;
            logger.trace(""Socket status: {}"", responseType);

        } else {
            throw new PacketIntegrityErrorException(""The packet decrypted is with wrong format. \nPacket:["" + hexPacket
                    + ""]  \nDecryptedPacket:["" + decryptedData + ""]"");
        }

        SilvercrestWifiSocketVendor vendor = SilvercrestWifiSocketVendor.fromCode(decryptedData.substring(6, 8));
        if (vendor == null) {
            throw new PacketIntegrityErrorException(""Could not extract vendor from the decrypted packet. \nPacket:[""
                    + hexPacket + ""]  \nDecryptedPacket:["" + decryptedData + ""]"");
        }

        logger.trace(""Decrypt success. Packet is from socket with mac address [{}] and type is [{}] and vendor is [{}]"",
                macAddress, responseType, vendor);
        return new SilvercrestWifiSocketResponse(macAddress, responseType, vendor);
    }",STX - pkt nbr - CompanyCode - device - authCode 00 -- 0029 -- C1 -- 11 -- 7150 (Silvercrest) 00 -- 0029 -- C2 -- 11 -- 92DD (EasyHome),1,721
483,"public static <C extends Comparable<E>, E> Rule<C> le(E value) {
        return new LeRule<C, E>(value);
    }",Returns a rule which evaluates to true if the supplied input is less than or equals to the given value.,1,52
484,"public SdtBlock generateToc(int index, String instruction, STTabTlc leader, boolean skipPageNumbering) throws TocException {
    	
        MainDocumentPart documentPart = wordMLPackage.getMainDocumentPart();
        Document wmlDocumentEl = (Document)documentPart.getJaxbElement();
        Body body =  wmlDocumentEl.getBody();

    	TocFinder finder = new TocFinder();
		new TraversalUtil(body.getContent(), finder);
        SdtBlock sdt = finder.tocSDT;  
        if(sdt != null){
        	// OK
        	throw new TocException(""ToC already present; use updateToc instead"");
        }
        
        // Set sectPr, looking for it from index onwards
        List<Object> sublist = body.getContent().subList(index, body.getContent().size()); // end is exclusive       
    	SectPrFindFirst sf = new SectPrFindFirst();
		new TraversalUtil(sublist, sf);
        sectPr = sf.firstSectPr;
        
        sdt = createSdt();
        body.getContent().add(index, sdt);
        return generateToc(  sdt,  instruction, leader, skipPageNumbering);
    }","Generate Table of Contents using provided TOC instruction, and specified leader (eg dots) before page number, adding at the given index in the body of document",1,280
485,"public Invoker<T> in(Object target) {
    return newInvoker(name, type, target);
  }","Returns a new field access invoker, capable of accessing (read/write) the underlying field.",1,34
486,"public final List getSchemeNames() {
        return new ArrayList(registeredSchemes.keySet());
    }",Obtains the names of the registered schemes in their default order.,1,30
487,"public Optional<RDF> getRdfTermFactory() {
		return rdfTermFactory;
	}","Get the set  RDF, if any.",1,22
488,"public static XBooleanListValue removeBooleanFromList(XID actorID, XField field, int index) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XBooleanListValue) {
			XBooleanListValue listValue = (XBooleanListValue)value;
			
			// manipulate the contained list
			List<Boolean> list = XX.asList(listValue);
			list.remove(index);
			
			listValue = toBooleanListValue(list);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Removes a boolean from the  XBooleanListValue of the given  XField.,1,172
489,"public String getWwwAuthHeader() {
        return super.getResponse().getHeaderString(HttpHeaders.WWW_AUTHENTICATE);
    }",Get the  WWW-Authenticate header of the request that cause the exception.,1,30
490,"public String getPath(Uri uri) {
        String[] projection = { MediaStore.Images.Media.DATA };
        Cursor cursor = managedQuery(uri, projection, null, null, null);
        if (cursor != null) {
            int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
            cursor.moveToFirst();
            return cursor.getString(column_index);
        } 
        return null;
    }",Translates a content URI of an image to a physical path on the disk,1,129
491,"protected PackResources getResources()
    {
        return resources;
    }",Returns the pack resources.,1,20
492,"public boolean isKdcReachable(final String server, final int port, final ConnectionProtocol connectionProtocol) {
    int timeoutMillis = connectionTimeout * 1000;
    final KdcConfig config = KdcConfig.getDefaultConfig();
    config.setHostName(server);
    config.setKdcPort(port);
    config.setUseUdp(ConnectionProtocol.UDP == connectionProtocol);
    config.setTimeout(timeoutMillis);

    FutureTask<Boolean> future = new FutureTask<Boolean>(new Callable<Boolean>() {
      @Override
      public Boolean call() {
        try {
          KdcConnection connection = getKdcConnection(config);
          // we are only testing whether we can communicate with server and not
          // validating credentials
          connection.getTgt(""noUser@noRealm"", ""noPassword"");
        } catch (KerberosException e) {
          // unfortunately, need to look at msg as error 60 is a generic error code
          return !(e.getErrorCode() == ErrorType.KRB_ERR_GENERIC.getValue() &&
              e.getMessage().contains(""TimeOut""));
          //todo: evaluate other error codes to provide better information
          //todo: as there may be other error codes where we should return false
        } catch (Exception e) {
          // some bad unexpected thing occurred
          throw new RuntimeException(e);
        }
        return true;
      }
    });

    new Thread(future, ""ambari-kdc-verify"").start();
    Boolean result;
    try {
      // timeout after specified timeout
      result = future.get(timeoutMillis, TimeUnit.MILLISECONDS);

      if (result) {
        LOG.info(String.format(""Successfully connected to the KDC server at %s:%d over %s"",
            server, port, connectionProtocol.name()));
      } else {
        LOG.warn(String.format(""Failed to connect to the KDC server at %s:%d over %s"",
            server, port, connectionProtocol.name()));
      }
    } catch (InterruptedException e) {
      String message = String.format(""Interrupted while trying to communicate with KDC server at %s:%d over %s"",
          server, port, connectionProtocol.name());
      if (LOG.isDebugEnabled()) {
        LOG.warn(message, e);
      } else {
        LOG.warn(message);
      }

      result = false;
      future.cancel(true);
    } catch (ExecutionException e) {
      String message = String.format(""An unexpected exception occurred while attempting to communicate with the KDC server at %s:%d over %s"",
          server, port, connectionProtocol.name());
      if (LOG.isDebugEnabled()) {
        LOG.warn(message, e);
      } else {
        LOG.warn(message);
      }

      result = false;
    } catch (TimeoutException e) {
      String message = String.format(""Timeout occurred while attempting to to communicate with KDC server at %s:%d over %s"",
          server, port, connectionProtocol.name());
      if (LOG.isDebugEnabled()) {
        LOG.warn(message, e);
      } else {
        LOG.warn(message);
      }

      result = false;
      future.cancel(true);
    }

    return result;
  }",Attempt to communicate with KDC server over a specified communication protocol (TCP or UDP).,1,745
493,"public static Iterable<Edge> of(Set<? extends Vertex> vertices) {
		return new SetBased(vertices);
	}",Returns an iterable over all edges contained in the subgraph spanned by the given vertices.,1,39
494,"public UriBuilder uriTemplate(String uriTemplate)
   {
      Matcher match = uriPattern.matcher(uriTemplate);
      if (match.matches())
      {
         scheme(match.group(1));
         String host = match.group(2);
         if (host != null)
         {
            int at = host.indexOf('@');
            if (at > -1)
            {
               String user = host.substring(0, at);
               host = host.substring(at + 1);
               userInfo(user);
            }
         }
         host(host);
         if (match.group(4) != null) port(Integer.valueOf(match.group(4)));
         if (match.group(5) != null) path(match.group(5));
         if (match.group(7) != null) replaceQuery(match.group(7));
         if (match.group(9) != null) fragment(match.group(9));
         return this;
      }
      match = sspPattern.matcher(uriTemplate);
      if (match.matches())
      {
         scheme(match.group(1));
         schemeSpecificPart(match.group(2));
         return this;
      }

      match = pathPattern.matcher(uriTemplate);
      if (match.matches())
      {
         if (match.group(1) != null) path(match.group(1));
         if (match.group(3) != null) replaceQuery(match.group(3));
         if (match.group(5) != null) fragment(match.group(5));
         return this;
      }
      throw new RuntimeException(""Illegal uri template: "" + uriTemplate);

   }",You may put path parameters anywhere within the uriTemplate except port,1,498
496,"public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }
        final boolean[] result = new boolean[array.length];
        for (int i = 0; i < array.length; i++) {
            Boolean b = array[i];
            result[i] = (b == null ? valueForNull : b.booleanValue());
        }
        return result;
    }",Converts an array of object Booleans to primitives handling null. This method returns null if null array input.,1,182
497,"public List<Affiliate> getAdmins() throws NoResponseException, XMPPErrorException, NotConnectedException {
        return getAffiliatesByAdmin(MUCAffiliation.admin);
    }",Returns a list of Affiliate with the room administrators.,1,37
498,"public static <K, V, M> OutputOperatorSpec<M> createPartitionByOperatorSpec(
      OutputStreamImpl<K, V, M> outputStream, int opId) {
    return new OutputOperatorSpec<>(outputStream, OperatorSpec.OpCode.PARTITION_BY, opId);
  }",Creates a  OutputOperatorSpec for the partitionBy operator.,1,70
499,"public int compareTo(Object other) {
        if (other == this) {
            return 0;
        }
        if (other.getClass() != this.getClass()) {
            if (other.getClass().getName().equals(this.getClass().getName())) {
                return iName.compareTo( getNameInOtherClassLoader(other) );
            }
        }
        return iName.compareTo(((Enum) other).iName);
    }","Tests for order. The default ordering is alphabetic by name, but this can be overridden by subclasses. If the parameter is in a different class loader than this instance, reflection is used to compare the names.",1,132
500,"public static MediaFormat[] getMediaFormats(MediaType mediaType)
    {
        List<MediaFormat> mediaFormats = new ArrayList<MediaFormat>();

        for (MediaFormat[] formats : rtpPayloadTypeStrToMediaFormats.values())
            for (MediaFormat format : formats)
                if (format.getMediaType().equals(mediaType))
                    mediaFormats.add(format);
        for (MediaFormat format : rtpPayloadTypelessMediaFormats)
            if (format.getMediaType().equals(mediaType))
                mediaFormats.add(format);
        return mediaFormats.toArray(EMPTY_MEDIA_FORMATS);
    }",Gets the MediaFormats known to MediaUtils and being of the specified MediaType.,1,148
501,"static public DecimalType maximumSince(Item item, AbstractInstant timestamp, String serviceName) {
		Iterable<HistoricItem> result = getAllStatesSince(item, timestamp, serviceName);
		Iterator<HistoricItem> it = result.iterator();
		DecimalType maximum = (DecimalType) item.getStateAs(DecimalType.class);
		while(it.hasNext()) {
			State state = it.next().getState();
			if (state instanceof DecimalType) {
				DecimalType value = (DecimalType) state;
				if(maximum==null || value.compareTo(maximum)>0) {
					maximum = value;
				}
			}
		}
		return maximum;
	}",Gets the maximum value of the state of a given item since a certain point in time.,1,191
502,"public AccountInfo getCachedAccountInfo() {

    return exchangeEventListener.getAdapterInstance().getCachedAccountInfo();
  }",Retrieves cached AccountInfo.,1,28
503,"public static Alignment createAlignment() {
    return myFactory.createAlignment();
  }",Creates an alignment object.,1,25
504,"private static ColumnMetadata getClusteringColumnDefinition(TableMetadata tableMetadata, int index)
    {
        return tableMetadata.clusteringColumns().get(index);
    }",Returns the clustering ColumnMetadata for the specified position.,1,39
505,"public List<UserType> getOrderedUserTypes() {
    return orderedUserTypes;
  }",Gets the list of  UserTypes (in preference order) to use to look up uer accounts in the Ambari database.,1,22
506,"public PeriodType withWeeksRemoved() {
        if (!weeks().isSupported()) {
            return this;
        }
        return MaskedType.mask(this, 1 << 2);
    }",Returns a version of this PeriodType instance that does not support weeks.,1,57
507,"public Object caseAngle3D( Angle3D object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Angle3 D'.,1,25
508,"private ConditionEvaluationResult evaluate(TestExecutionCondition condition, TestExtensionContext context) {
		try {
			return condition.evaluate(context);
		}
		catch (Exception ex) {
			throw new IllegalStateException(
				String.format(""Failed to evaluate condition [%s]"", condition.getClass().getName()), ex);
		}
	}",Evaluate all  ContainerExecutionCondition and  TestExecutionCondition extensions registered for the supplied  ExtensionContext.,1,88
509,"public ReportBase getLatestReportFor(OrderID inOrderID)
    {
        SLF4JLoggerProxy.debug(OrderHistoryManager.class,
                               ""Searching order tracker for {}"", //$NON-NLS-1$
                               inOrderID);
        synchronized(orders) {
            OrderHistory history = orders.get(inOrderID);
            if(history != null) {
                return history.getLatestReport();
            }
            SLF4JLoggerProxy.debug(OrderHistoryManager.class,
                                   ""No history for {}"", //$NON-NLS-1$
                                   inOrderID);
            return null;
        }
    }",Gets the latest ReportBase for the given OrderID.,1,121
510,"@Deprecated
    @Override
    public String toString() {
        if (!LegacyPropertyHelper.isLegacyToStringEnabled()) {
            return super.toString();
        } else {
            return LegacyPropertyHelper.legacyPropertyToString(this);
        }
    }",Returns a string representation of this object.,1,64
511,"public synchronized static <T> Collection<T> getFromExtensions(ExtensionsConfig config, Class<T> serviceClass)
  {
    Collection<T> modulesToLoad = new ServiceLoadingFromExtensions<>(config, serviceClass).implsToLoad;
    extensionsMap.put(serviceClass, modulesToLoad);
    return modulesToLoad;
  }","Look for implementations for the given class from both classpath and extensions directory, using  java.util.ServiceLoader.",1,79
512,"public List<Layer> layers() {
        monitor.readLock().lock();
        try {
            return layerList;
        } finally {
            monitor.readLock().unlock();
        }
    }",Gets the list of layers for this map content.,1,61
513,"public static RequestManager with(View view) {
    return getRetriever(view.getContext()).get(view);
  }","Begin a load with Glide that will be tied to the lifecycle of the  Fragment,  android.app.Fragment, or  Activity that contains the View.",1,36
514,"protected XmlRpcArray parseDataElement(Element dataElement) {
    XmlRpcArray array = new XmlRpcArray();

    NodeList children = dataElement.getChildNodes();
    int childCount = children.getLength();

    for (int i = 0; i < childCount; i++) {
      Node child = children.item(i);

      if (child instanceof Element) {
        String childName = child.getNodeName();

        if (XmlRpcEntity.VALUE.equals(childName)) {
          Element valueElement = (Element) child;
          XmlRpcElement element = this.parseValueElement(valueElement);
          array.add(element);
        }
      }
    }
    return array;
  }",Parses the given XML element that contains the data of a XML-RPC array.,1,200
515,"public T getMaxEntryCountSet() {

        if (mDataSets == null || mDataSets.isEmpty())
            return null;

        T max = mDataSets.get(0);

        for (T set : mDataSets) {

            if (set.getEntryCount() > max.getEntryCount())
                max = set;
        }

        return max;
    }",Returns the DataSet object with the maximum number of entries or null if there are no DataSets.,1,111
516,"public boolean isProductionMode() {
        return deploymentConfiguration.isProductionMode();
    }",Returns true if the portlet is running in production mode.,1,23
517,"public static String node2String(Node node) {
        try {
            return XMLUtils.serializeNodeToXML(node);
        } catch (ProcessingException e) {
        }
        return """";
    }",Converts a org.w3c.dom.Node to a String.,1,57
518,"public double getContainerCpuHint(Map<String, List<String>> packing) {
    double defaultInstanceCpu = Double.parseDouble(
        context.getProperty(INSTANCE_CPU_DEFAULT, ""1.0""));
    List<TopologyAPI.Config.KeyValue> topologyConfig = topology.getTopologyConfig().getKvsList();
    double totalInstanceCpu = defaultInstanceCpu * TopologyUtility.getTotalInstance(topology);
    // TODO(nbhagat): Add 1 more cpu for metrics manager also.
    // TODO(nbhagat): Use max cpu here. To get max use packing information.
    float defaultContainerCpu =
        (float) (1 + totalInstanceCpu / TopologyUtility.getNumContainer(topology));
    return Double.parseDouble(TopologyUtility.getConfigWithDefault(
        topologyConfig, Config.TOPOLOGY_CONTAINER_CPU_REQUESTED, defaultContainerCpu + """"));
  }",Provide cpu per aurora container.,1,163
519,"@SuppressWarnings(""unchecked"")
	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {
		return (BodyInserter<T, ReactiveHttpOutputMessage>) EMPTY_INSERTER;
	}",Inserter that does not write.,1,49
520,"public boolean execute(String action, JSONArray args, CallbackContext callbackContext) {
        if (action.equals(""start"")) {
            this.callbackContext = callbackContext;
            if (this.status != AccelListener.RUNNING) {
                // If not running, then this is an async call, so don't worry about waiting
                // We drop the callback onto our stack, call start, and let start and the sensor callback fire off the callback down the road
                this.start();
            }
        }
        else if (action.equals(""stop"")) {
            if (this.status == AccelListener.RUNNING) {
                this.stop();
            }
        } else {
          // Unsupported action
            return false;
        }

        PluginResult result = new PluginResult(PluginResult.Status.NO_RESULT, """");
        result.setKeepCallback(true);
        callbackContext.sendPluginResult(result);
        return true;
    }",Executes the request.,1,204
521,"public static CipherTransformation convert(String name) {
    CipherTransformation[] transformations = CipherTransformation.values();
    for (CipherTransformation transformation : transformations) {
      if (transformation.getName().equals(name)) {
        return transformation;
      }
    }
    throw new IllegalArgumentException(""Invalid cipher name: "" + name);
  }","Convert to CipherTransformation from name,  #algoBlockSize is fixed for certain cipher transformation, just need to compare the name.",1,96
522,"static String getSchedulerClassName(ExecutionMode executionMode) {
		return ""eu.stratosphere.nephele.jobmanager.scheduler.DefaultScheduler"";
	}",Tries to read the class name of the  eu.stratosphere.nephele.jobmanager.scheduler.DefaultScheduler implementation from the global configuration which is set to be used for the provided execution mode.,1,24
523,"public static StoreFactory create(final String name, final StreamingConfig config) {
        return new StoreFactory() {
            @Override
            public <K> ValueFactory<K> withKeys(final Serializer<K> keySerializer, final Deserializer<K> keyDeserializer) {
                return new ValueFactory<K>() {
                    @Override
                    public <V> KeyValueFactory<K, V> withValues(final Serializer<V> valueSerializer,
                                                                final Deserializer<V> valueDeserializer) {
                        final Serdes<K, V> serdes =
                                new Serdes<>(name, keySerializer, keyDeserializer, valueSerializer, valueDeserializer, config);
                        return new KeyValueFactory<K, V>() {
                            @Override
                            public InMemoryKeyValueFactory<K, V> inMemory() {
                                return new InMemoryKeyValueFactory<K, V>() {
                                    private int capacity = Integer.MAX_VALUE;

                                    @Override
                                    public InMemoryKeyValueFactory<K, V> maxEntries(int capacity) {
                                        if (capacity < 1) throw new IllegalArgumentException(""The capacity must be positive"");
                                        this.capacity = capacity;
                                        return this;
                                    }

                                    @Override
                                    public StateStoreSupplier build() {
                                        if (capacity < Integer.MAX_VALUE) {
                                            return new InMemoryLRUCacheStoreSupplier<>(name, capacity, serdes, null);
                                        }
                                        return new InMemoryKeyValueStoreSupplier<>(name, serdes, null);
                                    }
                                };
                            }

                            @Override
                            public LocalDatabaseKeyValueFactory<K, V> localDatabase() {
                                return new LocalDatabaseKeyValueFactory<K, V>() {
                                    @Override
                                    public StateStoreSupplier build() {
                                        return new RocksDBKeyValueStoreSupplier<>(name, serdes, null);
                                    }
                                };
                            }
                        };
                    }
                };
            }
        };
    }",Begin to create a new  org.apache.kafka.streams.processor.StateStoreSupplier instance.,1,492
524,"public static XIDListValue removeIDFromList(XID actorID, XField field, XID id) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XIDListValue) {
			XIDListValue listValue = (XIDListValue)value;
			
			// manipulate the contained list
			List<XID> list = XX.asList(listValue);
			list.remove(id);
			
			listValue = toIDListValue(list);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Removes the first occurrence of the given  XID from the  XIDListValue of the given  XField,1,172
525,"protected InputStream createUnderStoreBlockInStream(long blockStart, long length, String path)
      throws IOException {
    return new UnderStoreBlockInStream(mContext, blockStart, length, mBlockSize,
        getUnderStoreStreamFactory(path, mContext));
  }",Creates and returns a  InputStream for the UFS.,1,61
527,"public Database determineDatabase(DataSource dataSource) {
		if (this.database != null) {
			return this.database;
		}
		try {
			String jdbcUrl = (String) JdbcUtils.extractDatabaseMetaData(dataSource,
					""getURL"");
			DatabasePlatform databasePlatform = DatabasePlatform.fromDatabaseDriver(
					DatabaseDriver.fromJdbcUrl(jdbcUrl));
			if (databasePlatform != null) {
				return databasePlatform.getDatabase();
			}
		}
		catch (MetaDataAccessException ex) {
			logger.warn(""Unable to determine jdbc url from datasource"", ex);
		}
		return Database.DEFAULT;
	}",Determine the  Database to use based on this configuration and the primary  DataSource.,1,161
528,"@Deprecated
	public String getDriverClassName() {
		return determineDriverClassName();
	}",Determine the driver to use based on this configuration and the environment.,1,24
529,"public Deferred<Boolean> storeTree(final TSDB tsdb, final boolean overwrite) {
    if (tree_id < 1 || tree_id > 65535) {
      throw new IllegalArgumentException(""Invalid Tree ID"");
    }
    
    // if there aren't any changes, save time and bandwidth by not writing to
    // storage
    boolean has_changes = false;
    for (Map.Entry<String, Boolean> entry : changed.entrySet()) {
      if (entry.getValue()) {
        has_changes = true;
        break;
      }
    }
    if (!has_changes) {
      LOG.debug(this + "" does not have changes, skipping sync to storage"");
      throw new IllegalStateException(""No changes detected in the tree"");
    }

    /**
     * Callback executed after loading a tree from storage so that we can
     * synchronize changes to the meta data and write them back to storage.
     */
    final class StoreTreeCB implements Callback<Deferred<Boolean>, Tree> {
      
      final private Tree local_tree;
      
      public StoreTreeCB(final Tree local_tree) {
        this.local_tree = local_tree;
      }
      
      /**
       * Synchronizes the stored tree object (if found) with the local tree 
       * and issues a CAS call to write the update to storage.
       * @return True if the CAS was successful, false if something changed 
       * in flight
       */
      @Override
      public Deferred<Boolean> call(final Tree fetched_tree) throws Exception {
        
        Tree stored_tree = fetched_tree;
        final byte[] original_tree = stored_tree == null ? new byte[0] : 
          stored_tree.toStorageJson();

        // now copy changes
        if (stored_tree == null) {
          stored_tree = local_tree;
        } else {
          stored_tree.copyChanges(local_tree, overwrite);
        }
        
        // reset the change map so we don't keep writing
        initializeChangedMap();
        
        final PutRequest put = new PutRequest(tsdb.uidTable(), 
            Tree.idToBytes(tree_id), NAME_FAMILY, TREE_QUALIFIER, 
            stored_tree.toStorageJson());
        return tsdb.getClient().compareAndSet(put, original_tree);
      }
    }
    
    // initiate the sync by attempting to fetch an existing tree from storage
    return fetchTree(tsdb, tree_id).addCallbackDeferring(new StoreTreeCB(this));
  }",Attempts to store the tree definition via a CompareAndSet call.,1,489
530,"public static CharSequence defaultIfEmpty(CharSequence str, CharSequence defaultStr) {
        return StringUtils.isEmpty(str) ? defaultStr : str;
    }","Returns either the passed in CharSequence, or if the CharSequence is empty or null, the value of defaultStr.",1,42
531,"private ThingUID bridgeDiscovered(ThingTypeUID bridgeThingTypeUID) {
        ThingUID thingUID = new ThingUID(bridgeThingTypeUID, Integer.toHexString(currentScannedPortName.hashCode()));
        final boolean smarty = THING_TYPE_SMARTY_BRIDGE.equals(bridgeThingTypeUID);
        final String label = String.format(""@text/thing-type.dsmr.%s.label"", smarty ? ""smartyBridge"" : ""dsmrBridge"");

        // Construct the configuration for this meter
        Map<String, Object> properties = new HashMap<>();
        properties.put(CONFIGURATION_SERIAL_PORT, currentScannedPortName);
        if (smarty) {
            properties.put(CONFIGURATION_DECRYPTION_KEY, CONFIGURATION_DECRYPTION_KEY_EMPTY);
        }
        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withThingType(bridgeThingTypeUID)
                .withProperties(properties).withLabel(label).build();

        logger.debug(""[{}] discovery result:{}"", currentScannedPortName, discoveryResult);

        thingDiscovered(discoveryResult);
        return thingUID;
    }",Creates a bridge.,1,224
532,"boolean expire() {
		synchronized (this) {
			boolean previous = this.expired;
			this.expired = true;
			return previous;
		}
	}",Mark this instance expired so it may no longer be used.,1,51
533,"public Intent getNextStartedService() {
    return ShadowApplication.getInstance().getNextStartedService();
  }",Delegates to the application to consume and return the next  Intent on the started services stack.,1,27
534,"public static LogEntryPathChangeType parse(final String code) {
    Validate.notEmpty(code, ""Given code was null or empty"");
    return parse(code.charAt(0));
  }",Parses given code and returns appropriate LogEntryPathChangeType.,1,48
535,"public ConfigurationDescriptor withConfig(String name)
    {
        return getRootDeclaration().withConfig(name);
    }",Adds another configuration to the root  DeclarationDescriptor,1,30
536,"public static Map<String, Attachment> findNewAttachments(Map<String, ? extends Attachment> attachments) {
        Map<String, Attachment> newAttachments = new HashMap<String, Attachment>();
        for (Map.Entry<String, ? extends Attachment> a : attachments.entrySet()) {
            if (!(a instanceof SavedAttachment)) {
                newAttachments.put(a.getKey(), a.getValue());
            }
        }
        return newAttachments;
    }",Return a map of the new attachments in the map passed in.,1,139
537,"private SyncedFolderDisplayItem createSyncedFolderFromMediaFolder(@NonNull MediaFolder mediaFolder) {
        return new SyncedFolderDisplayItem(
                UNPERSISTED_ID,
                mediaFolder.absolutePath,
                getString(R.string.instant_upload_path) + ""/"" + mediaFolder.folderName,
                true,
                false,
                false,
                AccountUtils.getCurrentOwnCloudAccount(this).name,
                0,
                false,
                mediaFolder.filePaths,
                mediaFolder.folderName,
                mediaFolder.numberOfFiles);
    }",creates a  SyncedFolderDisplayItem based on a  MediaFolder object instance.,1,109
538,"public Checkout remove(long checkoutId)
		throws NoSuchCheckoutException, SystemException {
		return remove(Long.valueOf(checkoutId));
	}",Removes the checkout with the primary key from the database.,1,38
539,"public static FragmentHandler printStringMessage(final int streamId)
    {
        return (buffer, offset, length, header) ->
        {
            final byte[] data = new byte[length];
            buffer.getBytes(offset, data);

            System.out.println(String.format(
                ""Message to stream %d from session %d (%d@%d) <<%s>>"",
                streamId, header.sessionId(), length, offset, new String(data)));
        };
    }","Return a reusable, parameterized  FragmentHandler that prints to stdout",1,124
540,"default <T> Optional<T> get(String key, Class<T> type){
        return getAdapted(key, Codecs.getCodec(type));
    }",Get the property keys as type T.,1,47
541,"public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass) {
		@SuppressWarnings(""unchecked"")
		QP queryParameter = (QP) queryParameters.get(parameterClass);
		if (queryParameter == null) {
			return Collections.emptyList();
		} else {
			return queryParameter.getValue();
		}
	}",Returns the value of the  MessageQueryParameter for the given class.,1,107
542,"public MeetupsRegistration remove(MeetupsRegistration meetupsRegistration)
		throws SystemException {
		return super.remove(meetupsRegistration);
	}",Removes the meetups registration from the database.,1,32
543,"public List<DistributionSetTypeRequestBodyPost> buildAsList(final int count) {
        final ArrayList<DistributionSetTypeRequestBodyPost> bodyList = Lists.newArrayList();
        for (int index = 0; index < count; index++) {
            bodyList.add(doBuild(name + index, key + index));
        }
        return bodyList;

    }",Builds a list of multiple  DistributionSetTypeRequestBodyPost to create multiple distribution set types at once.,1,100
544,"public static Integer tryParse(String string, int radix) {
    Long result = Longs.tryParse(string, radix);
    if (result == null || result.longValue() != result.intValue()) {
      return null;
    } else {
      return result.intValue();
    }
  }",Parses the specified string as a signed integer value using the specified radix.,1,99
545,"public XMLElement getChild(String path) {
        if (path.indexOf('/') != -1) {
            return getChildRecursive(PApplet.split(path, '/'), 0);
        }
        int childCount = getChildCount();
        for (int i = 0; i < childCount; i++) {
            XMLElement kid = getChild(i);
            String kidName = kid.getName();
            if (kidName != null && kidName.equals(path)) {
                return kid;
            }
        }
        return null;
    }",Returns the child XMLElement as specified by the index parameter.,1,167
546,"public static TachyonConf getConf() {
    return sTachyonConf;
  }",Returns the one and only static  TachyonConf object which is shared among all classes within the master process.,1,21
547,"public ProjectsEntry remove(long projectsEntryId)
		throws NoSuchProjectsEntryException, SystemException {
		return remove(Long.valueOf(projectsEntryId));
	}",Removes the projects entry with the primary key from the database.,1,38
548,"public static Map findAll(Map self, Closure closure) {
        Map answer = new HashMap(self.size());
        for (Iterator iter = self.entrySet().iterator(); iter.hasNext();) {
            Map.Entry entry = (Map.Entry) iter.next();
            if (InvokerHelper.asBool(callClosureForMapEntry(closure, entry))) {
                answer.put(entry.getKey(),entry.getValue());
            }
        }
        return answer;
    }",Finds all entries matching the closure condition.,1,146
549,"public int getSize() {
        return size;
    }",Returns the size of an array which is needed for storing all the slots in it using their  FrameSlot#getIndex() as a position in the array.,1,19
550,"public static Generic of(TypeDescription typeDescription) {
                    return typeDescription.isGenerified()
                            ? new ForGenerifiedErasure(typeDescription)
                            : new OfNonGenericType.OfErasure(typeDescription);
                }",Represents the supplied type description as a generified erasure if it is generified or as a non-generic type if not so.,1,50
551,"public static PolygonBuilder newPolygon() {
        return new PolygonBuilder();
    }",Create a new Polygon,1,25
552,"public static String readUTF( ObjectInput objectInput ) throws IOException
    {
        StringBuffer strBuf = null;

        // Read length of the string
        int strLength = objectInput.readInt();

        // Start reading the string
        strBuf = new StringBuffer( objectInput.readUTF() );

        if ( strLength == 0 && strBuf.toString().equals( ""null"" ) )
        {
            // The special case of a 'null' string
            return null;
        }
        else
        {
            while ( strLength > strBuf.length() )
            {
                strBuf.append( objectInput.readUTF() );
            }
            return strBuf.toString();
        }
    }",Reads in a string that has been encoded using a modified UTF-8 format.,1,181
554,"public int hashCode() {
        int total = 0;
        for (Iterator it = map.entrySet().iterator(); it.hasNext();) {
            Map.Entry entry = (Map.Entry) it.next();
            Object element = entry.getKey();
            MutableInteger count = (MutableInteger) entry.getValue();
            total += (element == null ? 0 : element.hashCode()) ^ count.value;
        }
        return total;
    }",Gets a hash code for the Bag compatable with the definition of equals.,1,151
555,"public ConditionsTreeNode or(SearchCondition condition) {
		try {
			ConditionsTreeNode tmp = new ConditionsTreeNode(condition);
			return or(tmp);
		} catch (Exception e) {
			// impossible
			return null;
		}
	}",Convenience method.,1,70
556,"public LoopType loop(Expression expression) {
        LoopType loop = getNodeFactory().createLoop();
        loop.setExpression(expression);
        addOutput(loop);
        return loop;
    }",Creates a loop which must evaluate to an integer that determines how many times the exchange should be sent down the rest of the route.,1,54
557,"@SuppressWarnings(""serial"")
	protected Set<? extends IFXOnTypePolicy> getTargetPolicies(Scene scene) {
		IVisualPart<Node, ? extends Node> targetPart = null;
		for (IViewer<Node> viewer : getDomain().getViewers().values()) {
			if (viewer instanceof FXViewer) {
				if (((FXViewer) viewer).getScene() == scene) {
					IVisualPart<Node, ? extends Node> part = viewer
							.getAdapter(new TypeToken<FocusModel<Node>>() {
							}).getFocused();
					if (part == null) {
						targetPart = viewer.getRootPart();
					} else {
						targetPart = part;
					}
					break;
				}
			}
		}
		if (targetPart == null) {
			return Collections.emptySet();
		}
		return getKeyPolicies(targetPart);
	}",Returns a  Set containing all  IFXOnTypePolicys that are installed on the target  IVisualPart for the given  Scene.,1,255
558,"public List<CMapSegment> getCMaps() {
        return cmaps;
    }",Returns this font's character to glyph mapping.,1,22
559,"boolean hasStereotype(Element element, List<String> stereotypes) {
        if (element == null) {
            return false;
        }
        if (stereotypes.contains(element.toString())) {
            return true;
        }
        AnnotationMetadata annotationMetadata = getAnnotationMetadata(element);
        for (String stereotype : stereotypes) {
            if(annotationMetadata.hasStereotype(stereotype)) {
                return true;
            }
        }
        return false;
    }",Return whether the given element is annotated with any of the given annotation stereotypes,1,131
560,"public RequestFuture<Map<TopicPartition, Long>> fetchOffsets(Set<TopicPartition> partitions, long now) {
        final RequestFuture<Map<TopicPartition, Long>> future = newCoordinatorRequestFuture(now);
        if (future.isDone()) return future;

        log.debug(""Fetching committed offsets for partitions: "" + Utils.join(partitions, "", ""));
        // construct the request
        OffsetFetchRequest request = new OffsetFetchRequest(this.groupId, new ArrayList<TopicPartition>(partitions));

        // send the request with a callback
        RequestCompletionHandler completionHandler = new RequestCompletionHandler() {
            @Override
            public void onComplete(ClientResponse resp) {
                handleOffsetResponse(resp, future);
            }
        };
        sendCoordinator(ApiKeys.OFFSET_FETCH, request.toStruct(), completionHandler, now);
        return future;
    }",Fetch the committed offsets for a set of partitions.,1,211
561,"AnalyzedRelation tryRewrite(AnalyzedRelation rel, CoordinatorTxnCtx transactionCtx) {
        WhereClause where = rel.where();
        if (!where.hasQuery()) {
            return null;
        }
        List<Candidate> rewriteCandidates = gatherRewriteCandidates(where.query());
        if (rewriteCandidates.isEmpty()) {
            return null;
        }
        AnalyzedRelation sourceRel = getSource(rel);
        if (sourceRel == null) {
            return null;
        }


        // Function to turn Ref(x) back into Field(rel, x); it's required for the MultiSourceSelect structure;
        // (a lot of logic that follows in the Planner after the rewrite is based on Fields)
        java.util.function.Function<? super Symbol, ? extends Symbol> refsToFields =
            RefReplacer.replaceRefs(r -> sourceRel.getField(r.column(), Operation.READ));

        removeRewriteCandidatesFromWhere(rel, rewriteCandidates);
        QuerySpec newTopQS = rel.querySpec().copyAndReplace(refsToFields);

        // Using MSS instead of TwoTableJoin so that the ""fetch-pushdown"" logic in the Planner is also applied
        HashMap<QualifiedName, AnalyzedRelation> sources = new LinkedHashMap<>(2);
        sources.put(rel.getQualifiedName(), sourceRel);

        ArrayList<JoinPair> semiJoinPairs = new ArrayList<>();
        int count = 0;
        for (Candidate rewriteCandidate : rewriteCandidates) {
            SelectSymbol selectSymbol = rewriteCandidate.subQuery;

            // Avoid name clashes if the subquery is on the same relation; e.g.: select * from t1 where x in (select * from t1)
            QualifiedName subQueryName = selectSymbol.relation().getQualifiedName().withPrefix(""S"" + count);
            count++;
            Symbol joinCondition = makeJoinCondition(rewriteCandidate, sourceRel);
            semiJoinPairs.add(JoinPair.of(
                rel.getQualifiedName(),
                subQueryName,
                rewriteCandidate.joinType,
                joinCondition
            ));
            sources.put(subQueryName, selectSymbol.relation());
        }

        // normalize is done to rewrite  SELECT * from t1, t2 to SELECT * from (select ... t1) t1, (select ... t2) t2
        // because planner logic expects AnalyzedRelation in the sources
        MultiSourceSelect mss = new MultiSourceSelect(
            rel.isDistinct(),
            sources,
            transform(rel.fields(), Field::path),
            newTopQS,
            semiJoinPairs
        );
        return relationNormalizer.normalize(mss, transactionCtx);
    }",Try to rewrite a AnalyzedRelation into a SemiJoin:  select x from t1 where x in (select id from t2) | v select t1.x from t1 SEMI JOIN (select id from t2) t2 on t1.x = t2.id  (Note that it's not possible to write a SemiJoin directly using SQL.,1,510
562,"public synchronized long requestSpace(long blockId, long requestSpaceBytes)
      throws IOException {
    if (!hasLocalWorker()) {
      return -1;
    }

    long toRequestSpaceBytes = Math.max(requestSpaceBytes, mUserQuotaUnitBytes);
    for (int attempt = 0; attempt < mUserFailedSpaceRequestLimits; attempt ++) {
      if (mWorkerClient.requestSpace(blockId, toRequestSpaceBytes)) {
        return toRequestSpaceBytes;
      }
    }
    return 0;
  }",Try to request space for certain block.,1,132
563,"public SchemeData get(int index) {
    return schemeDatas[index];
  }",Retrieves the  SchemeData at a given index.,1,25
564,"public boolean equals(Object obj) {
        if (obj instanceof MutableShort) {
            return (value == ((MutableShort) obj).shortValue());
        }
        return false;
    }",Compares this object against the specified object.,1,61
565,"public int findExplicitAnchorForward(int connectionIndex) {
		return findExplicitAnchor(connectionIndex, 1);
	}","Returns an explicit anchor index for the first explicit anchor that can be found when iterating the connection anchors forwards, starting at the given connection index.",1,28
566,"public MongoDatabaseFactory mongoDbFactory() {
		return new SimpleMongoClientDatabaseFactory(mongoClient(), getDatabaseName());
	}",Creates a  org.springframework.data.mongodb.core.SimpleMongoClientDatabaseFactory to be used by the  MongoTemplate.,1,31
567,"public Integer visitSizeOperation(String source) {
		changeTraceabilityIndicesIntegerReturn(source.length());

		return Integer.valueOf(source.length());
	}","Handles the ""String::size"" OCL operation directly from the traceability visitor as we need to alter recorded traceability information.",1,43
568,"public String resolve(final String key) {
		
		if (StringUtils.isBlank(key)) {
			return null;
		}

		//first check cache
		String value = (String) cache.get(key);
		if (value != null) {
			return encodeUrl(value);
		}
		
		//then check db
		RandomisedUrl randomisedUrl = null;
		
		HibernateCallback hcb = new HibernateCallback() {
	  		public Object doInHibernate(Session session) throws HibernateException, SQLException {
	  			Query q = session.getNamedQuery(QUERY_GET_URL);
	  			q.setParameter(KEY, key, Hibernate.STRING);
	  			q.setMaxResults(1);
	  			return q.uniqueResult();
			}
		};
	
		//will be either a RandomisedUrl or null
		randomisedUrl = (RandomisedUrl) getHibernateTemplate().execute(hcb);
		if(randomisedUrl == null) {
			//log
			log.warn(""Request for invalid record: "" + key);
			
			//post failure event
			postEvent(ShortenedUrlService.EVENT_GET_URL_BAD, PREFIX+key, false);
			
			return null;
		}
		
		//log
		log.debug(""Request for valid record: "" + key);
		
		//post success event
		postEvent(ShortenedUrlService.EVENT_GET_URL_OK, PREFIX+key, false);
		
		//add to cache
		String url = randomisedUrl.getUrl();
		addToCache(key, url);

		String encodedUrl = encodeUrl(url);
		if(StringUtils.isBlank(encodedUrl)) {
			return null;
		}
		
		log.debug(""URL: "" + encodedUrl);
		
		return encodedUrl;
	}",Gets the encoded URL for the given shortened URL.,1,423
569,"public Collection<Affiliate> getOwners() throws NoResponseException, XMPPErrorException, NotConnectedException {
        return getAffiliatesByAdmin(""owner"");
    }",Returns a collection of Affiliate with the room owners.,1,37
570,"public BluetoothSocket createRfcommSocket(int channel) throws IOException {
        return new BluetoothSocket(BluetoothSocket.TYPE_RFCOMM, -1, true, true, this, channel);
    }",Create an RFCOMM  BluetoothSocket ready to start a secure outgoing connection to this remote device.,1,49
571,"public static String expandString(String expression, Map<String, ? extends Object> context) {
        return expandString(expression, context, null, null);
    }",Evaluate an expression and return the result as a String.,1,51
572,"protected ConsistentKeyLockStatus writeSingleLock(KeyColumn lockID, StoreTransaction txh) throws Throwable {

        final StaticBuffer lockKey = serializer.toLockKey(lockID.getKey(), lockID.getColumn());
        StaticBuffer oldLockCol = null;

        for (int i = 0; i < lockRetryCount; i++) {
            WriteResult wr = tryWriteLockOnce(lockKey, oldLockCol, txh);
            if (wr.isSuccessful() && wr.getDurationNS() <= getLockWait(TimeUnit.NANOSECONDS)) {
//                log.debug(""Wrote lock {} to store {} using {}"", new Object[] { lockID, store.getName(), txh });
                return new ConsistentKeyLockStatus(
                        wr.getBeforeNS(), TimeUnit.NANOSECONDS,
                        wr.getBeforeNS() + lockExpireNS, TimeUnit.NANOSECONDS);
            }
            oldLockCol = wr.getLockCol();
            handleMutationFailure(lockID, lockKey, wr, txh);
        }
        tryDeleteLockOnce(lockKey, oldLockCol, txh);
        // TODO log exception or successful too-slow write here
        throw new TemporaryStorageException(""Lock write retry count exceeded"");
    }",Try to write a lock record remotely up to  conf#getLockRetryCount() times.,1,247
573,"public boolean hasTag(Class<? extends Tag> tag) {
        if (tag == StandardTags.StatementTag.class) {
            return hasStatementTag();
        } else {
            return false;
        }
    }","If this node  LLVMInstrumentableNode#hasStatementTag() is a statement for source-level instrumentatipon, this function considers the node to be tagged with  com.oracle.truffle.api.instrumentation.StandardTags.StatementTag.",1,65
574,"public List<Node> writeTo(Node.State toState, List<Node> nodes, Optional<String> reason) {
        try (NestedTransaction nestedTransaction = new NestedTransaction()) {
            List<Node> writtenNodes = writeTo(toState, nodes, reason, nestedTransaction);
            nestedTransaction.commit();
            return writtenNodes;
        }
    }","Writes the given nodes to the given state (whether or not they are already in this state or another), and returns a copy of the incoming nodes in their persisted state.",1,98
575,"public static MediaDirection parseString(String mediaDirectionName)
        throws IllegalArgumentException
    {
        if(SENDONLY.toString().equals(mediaDirectionName))
            return SENDONLY;

        if(RECVONLY.toString().equals(mediaDirectionName))
            return RECVONLY;

        if(SENDRECV.toString().equals(mediaDirectionName))
            return SENDRECV;

        if(INACTIVE.toString().equals(mediaDirectionName))
            return INACTIVE;

        throw new IllegalArgumentException(mediaDirectionName
                        + "" is not a currently supported MediaDirection"");
    }","Returns a MediaDirection value corresponding to the specified mediaDirectionName or in other words MediaType.SENDONLY for ""sendonly"", MediaType.RECVONLY for ""recvonly"", MediaType.INACTIVE for ""inactive"", and MediaType.SENDRECV for ""sendrecv"".",1,130
576,"public static OrderBook adaptOrderBook(MercadoBitcoinOrderBook mercadoBitcoinOrderBook, CurrencyPair currencyPair) {

    List<LimitOrder> asks = createOrders(currencyPair, OrderType.ASK, mercadoBitcoinOrderBook.getAsks());
    List<LimitOrder> bids = createOrders(currencyPair, OrderType.BID, mercadoBitcoinOrderBook.getBids());
    return new OrderBook(null, asks, bids);
  }",Adapts a com.xeiam.xchange.mercadobitcoin.dto.marketdata.OrderBook to a,1,97
577,"static ExchangeStrategies of(Supplier<Stream<HttpMessageReader<?>>> messageReaders,
			Supplier<Stream<HttpMessageWriter<?>>> messageWriters) {

		return new ExchangeStrategies() {
			@Override
			public Supplier<Stream<HttpMessageReader<?>>> messageReaders() {
				return checkForNull(messageReaders);
			}
			@Override
			public Supplier<Stream<HttpMessageWriter<?>>> messageWriters() {
				return checkForNull(messageWriters);
			}
			private <T> Supplier<Stream<T>> checkForNull(Supplier<Stream<T>> supplier) {
				return supplier != null ? supplier : Stream::empty;
			}
		};
	}",Return a new  ExchangeStrategies described by the given supplier functions.,1,181
578,"public double max() {
            return reduce(naturalDoubleMaxReducer(), -Double.MAX_VALUE);
        }","Returns the maximum element, or -Double.MAX_VALUE if empty",1,30
579,"private List<EinnahmeAusgabe> getWerte() throws RemoteException
  {
    List<EinnahmeAusgabe> list = new ArrayList<EinnahmeAusgabe>();

    Konto konto = (Konto) getKontoAuswahl().getValue();
    Date start  = (Date) this.getStart().getValue();
    Date end    = (Date) this.getEnd().getValue();
    
    // Uhrzeit zuruecksetzen, falls vorhanden
    if (start != null) start = HBCIProperties.startOfDay(start);
    if (end != null) end = HBCIProperties.startOfDay(end);

    // Wird nur ein Konto ausgewertet?
    if (konto != null)
    {
      list.add(new EinnahmeAusgabe(konto,start,end));
      return list;
    }
    
    // Alle Konten
    double summeAnfangssaldo = 0.0d;
    double summeEinnahmen    = 0.0d;
    double summeAusgaben     = 0.0d;
    double summeEndsaldo     = 0.0d;
    
    DBIterator it = de.willuhn.jameica.hbci.Settings.getDBService().createList(Konto.class);
    it.setOrder(""ORDER BY blz, kontonummer"");
    while (it.hasNext())
    {
      EinnahmeAusgabe ea = new EinnahmeAusgabe((Konto) it.next(),start,end);
      
      // Zu den Summen hinzufuegen
      summeAnfangssaldo += ea.getAnfangssaldo();
      summeEinnahmen    += ea.getEinnahmen();
      summeAusgaben     += ea.getAusgaben();
      summeEndsaldo     += ea.getEndsaldo();
      list.add(ea);
    }
    
    // Summenzeile noch hinten dran haengen
    EinnahmeAusgabe summen = new EinnahmeAusgabe();
    summen.setIsSumme(true);
    summen.setText(i18n.tr(""Summe""));
    summen.setAnfangssaldo(summeAnfangssaldo);
    summen.setAusgaben(summeAusgaben);
    summen.setEinnahmen(summeEinnahmen);
    summen.setEndsaldo(summeEndsaldo);
    summen.setEnddatum((Date) this.getStart().getValue());
    summen.setStartdatum((Date) this.getEnd().getValue());
    list.add(summen);
    
    return list;
  }",Ermittelt die Liste der Zeilen fuer die Tabelle.,1,541
580,"public static List select(EObject context, String locationPath) {
		LocationPath parsedPath = LocationParser.parse(locationPath);
		return select(context, parsedPath);
	}",Returns a list of EMFPointers built by walking a path from the context.,1,50
581,"public static boolean equals(CharSequence cs1, CharSequence cs2) {
        if (cs1 == cs2) {
            return true;
        }
        if (cs1 == null || cs2 == null) {
            return false;
        }
        if (cs1 instanceof String && cs2 instanceof String) {
            return cs1.equals(cs2);
        }
        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
    }","Compares two CharSequences, returning  true if they represent equal sequences of characters.  nulls are handled without exceptions.",1,157
582,"TableColumn getColumn(int index) {
        return (TableColumn) columns.get(index);
    }",Returns the column at the given index.,1,29
583,"public int insertExGap(int length) throws BadBytecode {
        return insertGapAt(currentPos, length, true).position;
    }",Inserts an exclusive gap before the next instruction that would be returned by next() (not before the instruction returned by the last call to next()).,1,37
584,"public static AbstractGroup fromString(String s, BibtexDatabase db, int version)
            throws Exception {
        if (s.startsWith(KeywordGroup.ID))
            return KeywordGroup.fromString(s, db, version);
        if (s.startsWith(AllEntriesGroup.ID))
            return AllEntriesGroup.fromString(s, db, version);
        if (s.startsWith(SearchGroup.ID))
            return SearchGroup.fromString(s, db, version);
        if (s.startsWith(ExplicitGroup.ID))
            return ExplicitGroup.fromString(s, db, version);
        return null; // unknown group
    }",Re-create a group instance from a textual representation.,1,165
585,"public String toString() {
        return this.getNick();
    }",Returns the nick of the user.,1,23
586,"public Iterable<Value> keys() {
        return new KeyIterable();
    }",Get the keys.,1,26
588,"public SocksMessageType type() {
        return type;
    }",Returns the  SocksMessageType of this  SocksMessage,1,19
589,"private GraphicsAlgorithm findVisibleGa(final GraphicsAlgorithm graphicsAlgorithm) {
        if (graphicsAlgorithm.getLineVisible() || graphicsAlgorithm.getFilled()) {
            return graphicsAlgorithm;
        }
        for (GraphicsAlgorithm ga : graphicsAlgorithm.getGraphicsAlgorithmChildren()) {
            GraphicsAlgorithm result = findVisibleGa(ga);
            if (result != null) {
                return result;
            }
        }
        return null;
    }","Given a graphics algorithm, find the first child that is not invisible.",1,113
590,"public static CharSequence parseContent(XmlPullParser parser)
                    throws XmlPullParserException, IOException {
        assert(parser.getEventType() == XmlPullParser.START_TAG);
        if (parser.isEmptyElementTag()) {
            return """";
        }
        // Advance the parser, since we want to parse the content of the current element
        parser.next();
        return parseContentDepth(parser, parser.getDepth());
    }",Returns the content of a element.,1,94
591,"public static <T> List<T> asImmutable(List<T> self) {
        return asUnmodifiable(new ArrayList<T>(self));
    }",A convenience method for creating an immutable List.,1,45
592,"public FilterHandlerMapping remove(FilterHandler handler)
    {
        Map<Pattern, FilterHandler> mappings = new TreeMap<Pattern, FilterHandler>(PatternComparator.INSTANCE);
        for (Pattern pattern : handler.getPatterns())
        {
            mappings.put(pattern, handler);
        }
        return remove(mappings);
    }",Returns a new  FilterHandlerMapping instance without a mapping for the given handler.,1,90
593,"protected BendConnectionPolicy getBendPolicy() {
		return bendPolicy;
	}",Returns the  BendConnectionPolicy of the host.,1,19
594,"public static FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {
        return cache.getInstance(pattern, timeZone, locale);
    }","Gets a formatter instance using the specified pattern, time zone and locale.",1,45
595,"boolean hasAvailableDiskSpace()
      throws IOException {
    return getVolumesLowOnSpace().size() == 0;
  }",Return true if disk space is available on all all the configured volumes.,1,33
596,"private ColumnFamily getThroughCache(UUID cfId, QueryFilter filter)
    {
        assert isRowCacheEnabled()
               : String.format(""Row cache is not enabled on column family ["" + name + ""]"");

        RowCacheKey key = new RowCacheKey(metadata.ksAndCFName, filter.key);

        // attempt a sentinel-read-cache sequence.  if a write invalidates our sentinel, we'll return our
        // (now potentially obsolete) data, but won't cache it. see CASSANDRA-3862
        // TODO: don't evict entire rows on writes (#2864)
        IRowCacheEntry cached = CacheService.instance.rowCache.get(key);
        if (cached != null)
        {
            if (cached instanceof RowCacheSentinel)
            {
                // Some other read is trying to cache the value, just do a normal non-caching read
                Tracing.trace(""Row cache miss (race)"");
                metric.rowCacheMiss.inc();
                return getTopLevelColumns(filter, Integer.MIN_VALUE);
            }

            ColumnFamily cachedCf = (ColumnFamily)cached;
            if (isFilterFullyCoveredBy(filter.filter, cachedCf, filter.timestamp))
            {
                metric.rowCacheHit.inc();
                Tracing.trace(""Row cache hit"");
                return filterColumnFamily(cachedCf, filter);
            }

            metric.rowCacheHitOutOfRange.inc();
            Tracing.trace(""Ignoring row cache as cached value could not satisfy query"");
            return getTopLevelColumns(filter, Integer.MIN_VALUE);
        }

        metric.rowCacheMiss.inc();
        Tracing.trace(""Row cache miss"");
        RowCacheSentinel sentinel = new RowCacheSentinel();
        boolean sentinelSuccess = CacheService.instance.rowCache.putIfAbsent(key, sentinel);
        ColumnFamily data = null;
        ColumnFamily toCache = null;
        try
        {
            // If we are explicitely asked to fill the cache with full partitions, we go ahead and query the whole thing
            if (metadata.getCaching().rowCache.cacheFullPartitions())
            {
                data = getTopLevelColumns(QueryFilter.getIdentityFilter(filter.key, name, filter.timestamp), Integer.MIN_VALUE);
                toCache = data;
                Tracing.trace(""Populating row cache with the whole partition"");
                if (sentinelSuccess && toCache != null)
                    CacheService.instance.rowCache.replace(key, sentinel, toCache);
                return filterColumnFamily(data, filter);
            }

            // Otherwise, if we want to cache the result of the query we're about to do, we must make sure this query
            // covers what needs to be cached. And if the user filter does not satisfy that, we sometimes extend said
            // filter so we can populate the cache but only if:
            //   1) we can guarantee it is a strict extension, i.e. that we will still fetch the data asked by the user.
            //   2) the extension does not make us query more than getRowsPerPartitionToCache() (as a mean to limit the
            //      amount of extra work we'll do on a user query for the purpose of populating the cache).
            //
            // In practice, we can only guarantee those 2 points if the filter is one that queries the head of the
            // partition (and if that filter actually counts CQL3 rows since that's what we cache and it would be
            // bogus to compare the filter count to the 'rows to cache' otherwise).
            if (filter.filter.isHeadFilter() && filter.filter.countCQL3Rows(metadata.comparator))
            {
                SliceQueryFilter sliceFilter = (SliceQueryFilter)filter.filter;
                int rowsToCache = metadata.getCaching().rowCache.rowsToCache;

                SliceQueryFilter cacheSlice = readFilterForCache();
                QueryFilter cacheFilter = new QueryFilter(filter.key, name, cacheSlice, filter.timestamp);

                // If the filter count is less than the number of rows cached, we simply extend it to make sure we do cover the
                // number of rows to cache, and if that count is greater than the number of rows to cache, we simply filter what
                // needs to be cached afterwards.
                if (sliceFilter.count < rowsToCache)
                {
                    toCache = getTopLevelColumns(cacheFilter, Integer.MIN_VALUE);
                    if (toCache != null)
                    {
                        Tracing.trace(""Populating row cache ({} rows cached)"", cacheSlice.lastCounted());
                        data = filterColumnFamily(toCache, filter);
                    }
                }
                else
                {
                    data = getTopLevelColumns(filter, Integer.MIN_VALUE);
                    if (data != null)
                    {
                        // The filter limit was greater than the number of rows to cache. But, if the filter had a non-empty
                        // finish bound, we may have gotten less than what needs to be cached, in which case we shouldn't cache it
                        // (otherwise a cache hit would assume the whole partition is cached which is not the case).
                        if (sliceFilter.finish().isEmpty() || sliceFilter.lastCounted() >= rowsToCache)
                        {
                            toCache = filterColumnFamily(data, cacheFilter);
                            Tracing.trace(""Caching {} rows (out of {} requested)"", cacheSlice.lastCounted(), sliceFilter.count);
                        }
                        else
                        {
                            Tracing.trace(""Not populating row cache, not enough rows fetched ({} fetched but {} required for the cache)"", sliceFilter.lastCounted(), rowsToCache);
                        }
                    }
                }

                if (sentinelSuccess && toCache != null)
                    CacheService.instance.rowCache.replace(key, sentinel, toCache);
                return data;
            }
            else
            {
                Tracing.trace(""Fetching data but not populating cache as query does not query from the start of the partition"");
                return getTopLevelColumns(filter, Integer.MIN_VALUE);
            }
        }
        finally
        {
            if (sentinelSuccess && toCache == null)
                invalidateCachedRow(key);
        }
    }","Fetch the row and columns given by filter.key if it is in the cache; if not, read it from disk and cache it",1,994
597,"public static Result restSearch() {
    DynamicForm form = Form.form().bindFromRequest(request());
    String appId = form.get(APP_ID);
    appId = appId != null ? appId.trim() : """";
    if (appId.contains(""job"")) {
      appId = appId.replaceAll(""job"", ""application"");
    }
    String flowExecId = form.get(FLOW_EXEC_ID);
    flowExecId = (flowExecId != null) ? flowExecId.trim() : null;
    if (!appId.isEmpty()) {
      AppResult result = AppResult.find.select(""*"")
          .fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS, ""*"")
          .fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + "".""
              + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS, ""*"")
          .where()
          .idEq(appId).findUnique();
      if (result != null) {
        return ok(Json.toJson(result));
      } else {
        return notFound(""Unable to find record on id: "" + appId);
      }
    } else if (flowExecId != null && !flowExecId.isEmpty()) {
      List<AppResult> results = AppResult.find
          .select(""*"")
          .fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS, ""*"")
          .fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + "".""
              + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS, ""*"")
          .where().eq(AppResult.TABLE.FLOW_EXEC_ID, flowExecId)
          .findList();
      return ok(Json.toJson(results));
    }

    int page = 1;
    if (request().queryString().containsKey(PAGE)) {
      page = Integer.parseInt(request().queryString().get(PAGE)[0]);
      if (page <= 0) {
        page = 1;
      }
    }

    ExpressionList<AppResult> searchQuery = AppResult.find.select(""*"").where();
    ExpressionList<AppResult> query = generateSearchQuery(searchQuery);
    List<AppResult> results = query
        .order().desc(AppResult.TABLE.FINISH_TIME)
        .setFirstRow((page - 1) * REST_PAGE_LENGTH)
        .setMaxRows(REST_PAGE_LENGTH)
        .fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS, ""*"")
        .fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + ""."" + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS, ""*"")
        .findList();
    return ok(Json.toJson(results));
  }",Grouping a list of AppResult by GroupBy enum.,1,695
598,"public static PolygonBuilder newPolygon(ShapeBuilder.Orientation orientation) {
        return new PolygonBuilder(orientation);
    }",Create a new Polygon,1,31
599,"public RegisterValue asValue(Kind kind) {
        return values[kind.ordinal()];
    }",Gets this register as a plain RegisterValue value with a specified kind.,1,29
600,"public static boolean deleteRealmFile(Context context, String fileName) {
        return deleteRealmFile(new RealmConfiguration.Builder(context)
                .name(fileName)
                .create()
        );
    }",Delete the Realm file from the filesystem for a custom named Realm.,1,54
601,"public int start() {

        trace(""start() entered"");

        int previousState = getState();

        if (serverThread != null) {
            trace(""start(): serverThread != null; no action taken"");

            return previousState;
        }

        serverThread = new ServerThread(""HSQLDB Server "");

        serverThread.start();
        trace(""start() exiting"");

        return previousState;
    }",Starts this server asynchronously.,1,111
602,"public static ShareFileFragment  newInstance(OCFile fileToShare, Account account) {
        ShareFileFragment fragment = new ShareFileFragment();
        Bundle args = new Bundle();
        args.putParcelable(ARG_FILE, fileToShare);
        args.putParcelable(ARG_ACCOUNT, account);
        fragment.setArguments(args);
        return fragment;
    }",Public factory method to create new ShareFileFragment instances.,1,90
603,"protected CoreAdminHandler createMultiCoreHandler() {
    return new CoreAdminHandler() {
      @Override
      public CoreContainer getCoreContainer() {
        return CoreContainer.this;
      }
    };
  }",Creates a CoreAdminHandler for this MultiCore.,1,53
604,"public Map<String, ColumnProperties> getColumns() {
    if (mElementKeyToColumnProperties == null) {
      refreshColumns();
    }
    return this.mElementKeyToColumnProperties;
 }",Return a map of elementKey to columns as represented by their  ColumnProperties.,1,50
605,"public RealmResults<E> findAllSorted(String fieldNames[], boolean sortAscending[]) {
        if (fieldNames == null) {
            throw new IllegalArgumentException(""fieldNames cannot be 'null'."");
        } else if (sortAscending == null) {
            throw new IllegalArgumentException(""sortAscending cannot be 'null'."");
        } else if (fieldNames.length == 0) {
            throw new IllegalArgumentException(""At least one field name must be specified."");
        } else if (fieldNames.length != sortAscending.length) {
            throw new IllegalArgumentException(String.format(""Number of field names (%d) and sort orders (%d) does not match."", fieldNames.length, sortAscending.length));
        }

        if (fieldNames.length == 1 && sortAscending.length == 1) {
            return findAllSorted(fieldNames[0], sortAscending[0]);
        } else {
            TableView tableView = query.findAll();
            List<Long> columnIndices = new ArrayList<Long>();
            List<TableView.Order> orders = new ArrayList<TableView.Order>();
            for (int i = 0; i < fieldNames.length; i++) {
                String fieldName = fieldNames[i];
                Long columnIndex = columns.get(fieldName);
                if (columnIndex == null || columnIndex < 0) {
                    throw new IllegalArgumentException(String.format(""Field name '%s' does not exist."", fieldName));
                }
                columnIndices.add(columnIndex);
            }
            for (int i = 0; i < sortAscending.length; i++) {
                orders.add(sortAscending[i] ? TableView.Order.ascending : TableView.Order.descending);
            }
            tableView.sort(columnIndices, orders);
            return new RealmResults<E>(realm, tableView, clazz);
        }
    }",Find all objects that fulfill the query conditions and sorted by specific field names.,1,495
606,"protected InputStream createUnderStoreBlockInStream(long blockStart, long length, String path)
      throws IOException {
    return new UnderStoreBlockInStream(blockStart, length, mBlockSize,
        getUnderStoreStreamFactory(path, mContext));
  }",Creates and returns a  InputStream for the UFS.,1,58
607,"public String getFontName() {
        Object value = library.getObject(entries, FONT_NAME);
        if (value instanceof Name) {
            return ((Name) value).getName();
        }
        else if (value instanceof String) {
            return (String) value;
        }
        return null;
    }",Returns the PostScript name of the getfont.,1,97
608,"public static int compareVersions(String version1, String version2) {
    ComparableVersion v1 = new ComparableVersion(version1);
    ComparableVersion v2 = new ComparableVersion(version2);
    return v1.compareTo(v2);
  }",Compares two version name strings using maven's ComparableVersion class.,1,64
609,"public static boolean isSimpleValueType(Class<?> clazz) {
		return (ClassUtils.isPrimitiveOrWrapper(clazz) ||
				Enum.class.isAssignableFrom(clazz) ||
				CharSequence.class.isAssignableFrom(clazz) ||
				Number.class.isAssignableFrom(clazz) ||
				Date.class.isAssignableFrom(clazz) ||
				URI.class == clazz || URL.class == clazz ||
				Locale.class == clazz || Class.class == clazz);
	}","Check if the given type represents a ""simple"" value type: a primitive, an enum, a String or other CharSequence, a Number, a Date, a URI, a URL, a Locale or a Class.",1,136
610,"public int getColumnIndex(String name){
		int columnCount = getColumnCount();
		for(int i=0; i<columnCount; i++){
			if(name.equals(getColumnName(i))){
				return i;
			}
		}
		return -1;
	}",Returns the index of a column based on its name index.,1,82
611,"public static String replace(final String original, final String toReplace, final String replacement) {
		String result = original;
		String previousResult;
		do {
			previousResult = result;
			result = replaceFirst(previousResult, toReplace, replacement);
		} while (!equals(previousResult, result));
		return result;
	}",Replaces all occurrences of one string within another.,1,103
612,"public DocumentRef createBook() throws Exception {
        DocumentModel doc = session.createDocumentModel(""/"", ""a_book"", ""Book"");
        doc = session.createDocument(doc);
        session.save();
        return doc.getRef();
    }","Creates a book at the root of repository, and save the session.",1,75
613,"public <T> T scope(String newName, Runnable runnable, Callable<T> callable, boolean sandbox, DebugConfig sandboxConfig, Object[] newContext) {
        DebugScope oldContext = getInstance();
        DebugConfig oldConfig = getConfig();
        boolean oldLogEnabled = oldContext.isLogEnabled();
        DebugScope newChild = null;
        if (sandbox) {
            newChild = new DebugScope(newName, newName, null, newContext);
            setConfig(sandboxConfig);
        } else {
            newChild = oldContext.createChild(newName, newContext);
        }
        instanceTL.set(newChild);
        newChild.updateFlags();
        try {
            return executeScope(runnable, callable);
        } finally {
            newChild.context = null;
            instanceTL.set(oldContext);
            setConfig(oldConfig);
            setLogEnabled(oldLogEnabled);
        }
    }",Runs a task in a new debug scope which is either a child of the current scope or a disjoint top level scope.,1,239
614,"public RealmAsyncTask changePasswordAsync(final String userId, final String newPassword, final Callback callback) {
        checkLooperThread(""Asynchronous changing password is only possible from looper threads."");
        if (callback == null) {
            throw new IllegalArgumentException(""Non-null 'callback' required."");
        }

        return new Request(SyncManager.NETWORK_POOL_EXECUTOR, callback) {
            @Override
            public SyncUser run() {
                changePassword(userId, newPassword);
                return SyncUser.this;
            }
        }.start();
    }",Changes another user's password asynchronously.,1,132
615,"public PointD getValuesByTouchPoint(float x, float y) {

        PointD result = PointD.getInstance(0,0);
        getValuesByTouchPoint(x,y,result);
        return result;
    }",Returns a recyclable PointD instance.,1,56
616,"private State createState(Class<?> dataType, Object propertyValue) {
		if (Date.class.isAssignableFrom(dataType)) {
			Calendar calendar = Calendar.getInstance();
			calendar.setTime((Date) propertyValue);
			return new DateTimeType(calendar);
		} else if (BigDecimal.class.isAssignableFrom(dataType)) {
			return new DecimalType((BigDecimal) propertyValue);
		} else {
			return new StringType(propertyValue.toString());
		}
	}",Creates an openHAB  State in accordance to the given  dataType.,1,138
617,"public static Set flatten(Set self) {
        return new HashSet(flatten(self, new LinkedList()));
    }",Flatten a set,1,39
618,"public InputStream retrieveJSON(String methType, URL url, List<NameValuePair> params)
            throws IOException {

        CloseableHttpClient client = HttpClients.createDefault();

        // Instantiates the method based on the methType parameter
        HttpRequestBase meth;
        if (methType.equals(""GET"")) {
            meth = new HttpGet();
        } else {
            meth = new HttpPost();
        }

        // Sets the URI, request parameters and request body (depending on method
        // type)
        URI uri;

        if (methType.equals(""GET"")) {
            // Builds the GET request
            try {
                uri = new URIBuilder(url.toString()).setParameters(params).build();
                meth.setURI(uri);
            } catch (URISyntaxException ex) {
                throw new IOException(ex.getMessage());
            }

            this.LOGGER.log(
                    Level.FINER, ""About to query GET "" + url.toString() + ""?"" + uri.getQuery());
        } else {
            // Builds the POST request
            try {
                uri = new URIBuilder(url.toString()).build();
                meth.setURI(uri);
            } catch (URISyntaxException ex) {
                throw new IOException(ex.getMessage());
            }

            HttpEntity body = EntityBuilder.create().chunked().setParameters(params).build();
            ((HttpPost) (meth)).setEntity(body);
            meth.setHeader(
                    HttpHeaders.CONTENT_TYPE,
                    ContentType.APPLICATION_FORM_URLENCODED.getMimeType());
            this.LOGGER.log(
                    Level.FINER,
                    ""About to query POST ""
                            + url.toString()
                            + "" with body: ""
                            + IOUtils.toString(body.getContent(), Charset.defaultCharset()));
        }

        // Adds authorization if login/password is set
        if (this.user != null && this.password != null) {
            meth.addHeader(
                    ""Authentication"", (new UsernamePasswordCredentials(user, password)).toString());
        }

        CloseableHttpResponse response;

        // Re-tries the request if necessary
        while (true) {

            // Executes the request (a POST, since the URL may get too long)
            response = client.execute(meth);

            // If HTTP error, throws an exception
            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                throw new IOException(
                        ""HTTP Status: ""
                                + response.getStatusLine().getStatusCode()
                                + "" for URL: ""
                                + uri
                                + "" response: ""
                                + response.toString());
            }

            // Retrieve the wait period is returned by the server
            int wait = 0;
            Header header = meth.getFirstHeader(""Retry-After"");
            if (header != null) {
                wait = Integer.valueOf(header.getValue());
            }

            // Exits if no retry is necessary
            if (wait == 0) {
                break;
            }

            try {
                Thread.sleep(wait * 1000);
            } catch (InterruptedException e) {
                LOGGER.log(Level.SEVERE, ""InterruptedException: "" + e.getMessage());
                throw new IOException(e);
            }
        }

        // Extracts and returns the response
        return response.getEntity().getContent();
    }","Helper method returning a JSON String out of a resource belonging to a ArcGIS ReST API instance (via a GET).If present, it sends authorisation.",1,831
619,"public I18nMessage arrayIsEmpty() {
    return createMessage(bundlePath, 18);
  }",Generates a  I18nMessage for an array which was expected to be not empty but was,1,25
620,"protected ChangeViewportOperation getChangeViewportOperation() {
		return (ChangeViewportOperation) super.getOperation();
	}",Returns an  ChangeViewportOperation that is extracted from the operation created by  #createOperation().,1,27
621,"protected ContentPartPool getContentPartPool() {
		return getHost().getRoot().getViewer()
				.getAdapter(ContentPartPool.class);
	}",Returns the  ContentPartPool that is used to recycle content parts in the context of an  IViewer.,1,38
622,"public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
        if (obj instanceof Date) {
            return format((Date) obj, toAppendTo);
        } else if (obj instanceof Calendar) {
            return format((Calendar) obj, toAppendTo);
        } else if (obj instanceof Long) {
            return format(((Long) obj).longValue(), toAppendTo);
        } else {
            throw new IllegalArgumentException(""Unknown class: "" +
                (obj == null ? ""<null>"" : obj.getClass().getName()));
        }
    }","Formats a Date, Calendar or Long (milliseconds) object.",1,180
623,"public boolean mkdirs(TachyonURI path) throws FileAlreadyExistException, InvalidPathException,
      IOException {
    return mkdirs(path, false);
  }",Convenience method for mkdirs with recursive set.,1,39
624,"protected boolean canBeDone() {
    return !nFoldCV();
  }","Whether the Job is done after building the model itself, or whether there's extra work to be done",1,22
625,"public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {

		if (handles.length < 1) {
			return null;
		} else if (handles.length == 1) {
			return handles[0];
		}

		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length);
		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length);

		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length);
		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length);

		for (OperatorSubtaskState handle: handles) {

			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState();
			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState();
			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState();
			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState();

			if (managedOperatorState != null) {
				mergedManagedOperatorState.addAll(managedOperatorState);
			}

			if (rawOperatorState != null) {
				mergedRawOperatorState.addAll(rawOperatorState);
			}

			if (managedKeyedState != null) {
				mergedManagedKeyedState.addAll(managedKeyedState);
			}

			if (rawKeyedState != null) {
				mergedRawKeyedState.addAll(rawKeyedState);
			}
		}

		return new OperatorSubtaskState(
			mergedManagedOperatorState,
			mergedRawOperatorState,
			mergedManagedKeyedState,
			mergedRawKeyedState);
	}","Takes the different  OperatorSubtaskState created by calling  #snapshot(long, long) on different instances of  AbstractStreamOperatorTestHarness (each one representing one subtask) and repacks them into a single  OperatorSubtaskState so that the parallelism of the test can change arbitrarily (i.e.",1,390
626,"protected boolean canHandleExtraction(ExtractValueRequest extractValueRequest, Property property) {
        return (
                extractValueRequest.getMetadata().getTargetClass().equals(SkuImpl.class.getName()) ||
                extractValueRequest.getMetadata().getTargetClass().equals(Sku.class.getName())
               ) 
                && !property.getName().contains(FieldManager.MAPFIELDSEPARATOR)
                && SupportedFieldType.MONEY.equals(extractValueRequest.getMetadata().getFieldType());
    }",Handle all Money fields that have declared themselves to be apart of a Sku,1,117
627,"public static ALContext create(ALDevice device, int frequency, int refresh, boolean sync) {
		IntBuffer attribs = BufferUtils.createIntBuffer(8);

		if ( frequency != 0 ) {
			attribs.put(ALC_FREQUENCY);
			attribs.put(frequency);
		}

		if ( refresh != 0 ) {
			attribs.put(ALC_REFRESH);
			attribs.put(refresh);
		}

		attribs.put(ALC_SYNC);
		attribs.put(sync ? ALC10.ALC_TRUE : ALC10.ALC_FALSE);

		attribs.put(0);
		attribs.flip();

		return ALContext.create(device, attribs);
	}","Creates an ALContext, using the specified device and attributes.",1,188
628,"Configuration processModelNode(ModelNode cache, Configuration configuration, List<AdditionalDependency> additionalDeps) {
        // process the basic clustered configuration
        processClusteredCacheModelNode(cache, configuration, additionalDeps);

        // process the invalidation-cache attributes and elements
        FluentConfiguration fluent = configuration.fluent();
        if (cache.hasDefined(ModelKeys.STATE_TRANSFER)) {
            ModelNode stateTransfer = cache.get(ModelKeys.STATE_TRANSFER) ;
            FluentConfiguration.StateRetrievalConfig fluentStateTransfer = fluent.stateRetrieval();
            if (stateTransfer.hasDefined(ModelKeys.ENABLED)) {
                fluentStateTransfer.fetchInMemoryState(stateTransfer.get(ModelKeys.ENABLED).asBoolean());
            }
            if (stateTransfer.hasDefined(ModelKeys.TIMEOUT)) {
                fluentStateTransfer.timeout(stateTransfer.get(ModelKeys.TIMEOUT).asLong());
            }
            if (stateTransfer.hasDefined(ModelKeys.FLUSH_TIMEOUT)) {
                fluentStateTransfer.logFlushTimeout(stateTransfer.get(ModelKeys.FLUSH_TIMEOUT).asLong());
            }
        }
        return configuration;
    }",Implementation of abstract method processModelNode suitable for invalidation cache,1,237
629,"public int copyRecursiveTo(final String fileMask, final String excludes, final FilePath target) throws IOException, InterruptedException {
        if(this.channel==target.channel) {
            // local to local copy.
            return act(new FileCallable<Integer>() {
                private static final long serialVersionUID = 1L;
                public Integer invoke(File base, VirtualChannel channel) throws IOException {
                    if(!base.exists())  return 0;
                    assert target.channel==null;

                    try {
                        class CopyImpl extends Copy {
                            private int copySize;

                            public CopyImpl() {
                                setProject(new org.apache.tools.ant.Project());
                            }

                            @Override
                            protected void doFileOperations() {
                                copySize = super.fileCopyMap.size();
                                super.doFileOperations();
                            }

                            public int getNumCopied() {
                                return copySize;
                            }
                        }

                        CopyImpl copyTask = new CopyImpl();
                        copyTask.setTodir(new File(target.remote));
                        copyTask.addFileset(Util.createFileSet(base,fileMask,excludes));
                        copyTask.setOverwrite(true);
                        copyTask.setIncludeEmptyDirs(false);

                        copyTask.execute();
                        return copyTask.getNumCopied();
                    } catch (BuildException e) {
                        throw new IOException2(""Failed to copy ""+base+""/""+fileMask+"" to ""+target,e);
                    }
                }
            });
        } else
        if(this.channel==null) {
            // local -> remote copy
            final Pipe pipe = Pipe.createLocalToRemote();

            Future<Void> future = target.actAsync(new FileCallable<Void>() {
                private static final long serialVersionUID = 1L;
                public Void invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        readFromTar(remote+'/'+fileMask, f,TarCompression.GZIP.extract(pipe.getIn()));
                        return null;
                    } finally {
                        pipe.getIn().close();
                    }
                }
            });
            int r = writeToTar(new File(remote),fileMask,excludes,TarCompression.GZIP.compress(pipe.getOut()));
            try {
                future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
            return r;
        } else {
            // remote -> local copy
            final Pipe pipe = Pipe.createRemoteToLocal();

            Future<Integer> future = actAsync(new FileCallable<Integer>() {
                private static final long serialVersionUID = 1L;
                public Integer invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        return writeToTar(f,fileMask,excludes,TarCompression.GZIP.compress(pipe.getOut()));
                    } finally {
                        pipe.getOut().close();
                    }
                }
            });
            try {
                readFromTar(remote+'/'+fileMask,new File(target.remote),TarCompression.GZIP.extract(pipe.getIn()));
            } catch (IOException e) {// BuildException or IOException
                try {
                    future.get(3,TimeUnit.SECONDS);
                    throw e;    // the remote side completed successfully, so the error must be local
                } catch (ExecutionException x) {
                    // report both errors
                    throw new IOException2(Functions.printThrowable(e),x);
                } catch (TimeoutException _) {
                    // remote is hanging
                    throw e;
                }
            }
            try {
                return future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
        }
    }",Copies the files that match the given file mask to the specified target node.,1,985
630,"public static List<MediaType> createFrom(Produces annotation) {
        if (annotation == null) {
            return WILDCARD_TYPE_SINGLETON_LIST;
        }

        return createFrom(annotation.value());
    }",Create an unmodifiable list of media types from the values declared in the  Produces annotation.,1,58
631,"public Vec[] makeCompatible( Frame f) {
    // Small data frames are always ""compatible""
    if (anyVec() == null)      // Or it is small
      return f.vecs();                 // Then must be compatible
    // Same VectorGroup is also compatible
    Vec v1 = anyVec();
    Vec v2 = f.anyVec();
    if(v1.length() != v2.length())
      throw new IllegalArgumentException(""Can not make vectors of different length compatible!"");
    if (v2 == null || v1.checkCompatible(v2))
      return f.vecs();
    // Ok, here make some new Vecs with compatible layout
    Key k = Key.make();
    H2O.submitTask(new RebalanceDataSet(this, f, k)).join();
    Frame f2 = (Frame)k.get();
    DKV.remove(k);
    for (Vec v : f2.vecs()) Scope.track(v._key);
    return f2.vecs();
  }","Return array of Vectors if 'f' is compatible with 'this', else return a new array of Vectors compatible with 'this' and a copy of 'f's data otherwise.",1,247
632,"Optional<CachedLayer> retrieve(DescriptorDigest layerDigest)
      throws IOException, CacheCorruptedException {
    Path layerDirectory = defaultCacheStorageFiles.getLayerDirectory(layerDigest);
    if (!Files.exists(layerDirectory)) {
      return Optional.empty();
    }

    DefaultCachedLayer.Builder cachedLayerBuilder =
        DefaultCachedLayer.builder().setLayerDigest(layerDigest);

    try (Stream<Path> filesInLayerDirectory = Files.list(layerDirectory)) {
      for (Path fileInLayerDirectory : filesInLayerDirectory.collect(Collectors.toList())) {
        if (DefaultCacheStorageFiles.isLayerFile(fileInLayerDirectory)) {
          if (cachedLayerBuilder.hasLayerBlob()) {
            throw new CacheCorruptedException(
                ""Multiple layer files found for layer with digest ""
                    + layerDigest.getHash()
                    + "" in directory: ""
                    + layerDirectory);
          }
          cachedLayerBuilder
              .setLayerBlob(Blobs.from(fileInLayerDirectory))
              .setLayerDiffId(DefaultCacheStorageFiles.getDiffId(fileInLayerDirectory))
              .setLayerSize(Files.size(fileInLayerDirectory));
        }
      }
    }

    return Optional.of(cachedLayerBuilder.build());
  }",Retrieves the  CachedLayer for the layer with digest  layerDigest.,1,270
633,"public int getExpansionMode() {
        switch (expansionMode) {
        case MULTIPLICATIVE:
            return MULTIPLICATIVE_MODE;
        case ADDITIVE:
            return ADDITIVE_MODE;
        default:
            throw new MathInternalError(); // Should never happen.
        }
    }",The expansion mode determines whether the internal storage array grows additively or multiplicatively when it is expanded.,1,65
634,"public Class parseClass(String text) throws CompilationFailedException {
        return parseClass(text, ""script"" + System.currentTimeMillis() +
                Math.abs(text.hashCode()) + "".groovy"");
    }",Parses the given text into a Java class capable of being run,1,62
635,"public Consumer newReceiver(final Consumer.Builder builder)
    {
        final ClientAdminThreadCursor adminThread = new ClientAdminThreadCursor(adminCommandBuffer);
        return new Consumer(adminThread, builder, receivers);
    }",Create a new receiver that will listen on  uk.co.real_logic.aeron.Destination,1,55
636,"public final Graph getResultGraph() {
        return resultGraph;
    }",Getter for the RDF ImmutableGraph holding the Results of the Query,1,21
637,"public static <T extends MethodDescription> ElementMatcher.Junction<T> takesArgument(int index, TypeDescription type) {
        return takesArgument(index, is(type));
    }",Matches  MethodDescriptions that define a given type erasure as a parameter at the given index.,1,51
638,"public Collection<XmlSuite> parse()
    throws ParserConfigurationException, SAXException, IOException 
  {
    // Each suite found is put in this map, keyed by their canonical
    // path to make sure we don't add a same file twice
    // (e.g. ""testng.xml"" and ""./testng.xml"")
    Map<String, XmlSuite> mapResult = new HashMap<String, XmlSuite>();
    XmlSuite mainXmlSuite = null;
    
    SAXParserFactory spf = null;
    try {
      spf = SAXParserFactory.newInstance();
    }
    catch(FactoryConfigurationError ex) {
      // If running with JDK 1.4
      try {
        Class cl = Class.forName(""org.apache.crimson.jaxp.SAXParserFactoryImpl"");
        spf = (SAXParserFactory) cl.newInstance();
      }
      catch(Exception ex2) {
        ex2.printStackTrace();
      }
    }
    spf.setValidating(true);
    SAXParser saxParser = spf.newSAXParser();
    
    mainXmlSuite = parseOneFile(saxParser, m_fileName, m_inputStream);
    String mainFilePath = new File(m_fileName).getCanonicalPath();
    mapResult.put(mainFilePath, mainXmlSuite);
    
    List<String> suiteFiles = mainXmlSuite.getSuiteFiles();
    if (suiteFiles.size() > 0) {
      
      List<String> toBeParsed = new ArrayList<String>();
      
      for (String path : suiteFiles) {
        String canonicalPath = new File(path).getCanonicalPath();
        if (! mapResult.containsKey(canonicalPath)) {
          toBeParsed.add(path);
        }
      }
      
    }
    
    return mapResult.values();

  }","Parses the TestNG test suite and returns the corresponding XmlSuite, and possibly, other XmlSuite that are pointed to by  tags.",1,400
639,"public static ModifierBuilder start() {
        final ModifierBuilder builder = new ModifierBuilder();
        builder.setTermModifier(TermModifier.NONE);
        return builder;
    }",Returns an empty  ModifierBuilder.,1,48
640,"@SuppressWarnings(""unchecked"")
        @Override
        public LeftProjection<L, R> filter(Predicate<? super L> predicate) {
            Objects.requireNonNull(predicate);
            if (either.isRight() || (either.isLeft() && predicate.test(asLeft()))) {
                return this;
            } else {
                return Nothing.<L, R>instance().left();
            }
        }","Returns  LeftProjection(Left(value)), if the underlying Either of this projection is a Left and the left value satisfies the given predicate.",1,121
641,"public Set<String> getTags() {
        return tags;
    }",This method is used to obtain the assigned to the  ModuleType -  #tags.,1,22
642,"public CompareToBuilder append(short[] lhs, short[] rhs) {
        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null) {
            comparison = -1;
            return this;
        }
        if (rhs == null) {
            comparison = +1;
            return this;
        }
        if (lhs.length != rhs.length) {
            comparison = (lhs.length < rhs.length) ? -1 : +1;
            return this;
        }
        for (int i = 0; i < lhs.length && comparison == 0; i++) {
            append(lhs[i], rhs[i]);
        }
        return this;
    }","Deep comparison of a short array.  Check if arrays are same using == Check if either is null, a null array is less than a non-null Check array length, a shorter length array is less than a longer length array Check array contents element by element using  #append(short, short)",1,254
643,"public AbstractProject<?,?> getRootProject() {
        if (this instanceof TopLevelItem) {
            return this;
        } else {
            ItemGroup p = this.getParent();
            if (p instanceof AbstractProject)
                return ((AbstractProject) p).getRootProject();
            return this;
        }
    }",Gets the nearest ancestor  TopLevelItem that's also an  AbstractProject.,1,94
644,"public static List<Method> getMethodsListWithAnnotation(final Class<?> cls, final Class<? extends Annotation> annotationCls) {
        return getMethodsListWithAnnotation(cls, annotationCls, false, false);
    }",Gets all class level public methods of the given class that are annotated with the given annotation.,1,58
645,"public String toSQL() {
        StringBuilder result = new StringBuilder();
        for (Object each : segments) {
            if (each instanceof Alterable) {
                result.append(((Alterable) each).toString(null, Collections.<String, String>emptyMap()));
            } else {
                result.append(each);
            }
        }
        return result.toString();
    }",Convert to SQL.,1,120
646,"public Class<PanelConsole> getViewClass()
    {
        Panel panel = getPanel();
        return PanelHelper.getConsolePanel(panel.getClassName());
    }",Returns the PanelConsole class corresponding to the panel's class name,1,44
647,"public static GLFWErrorCallback errorfunPrint(final PrintStream stream) {
		return new GLFWErrorCallback() {
			private final Map<Integer, String> ERROR_CODES = LWJGLUtil.getClassTokens(new TokenFilter() {
				@Override
				public boolean accept(Field field, int value) {
					return 0x10000 < value && value < 0x20000;
				}
			}, null, GLFW.class);

			@Override
			public void invoke(int error, long description) {
				String msg = errorfunDescriptionString(description);

				stream.printf(""[LWJGL] %s error\n"", ERROR_CODES.get(error));
				stream.println(""\tDescription : "" + msg);
				stream.println(""\tStacktrace  :"");
				StackTraceElement[] stack = Thread.currentThread().getStackTrace();
				for ( int i = 4; i < stack.length; i++ ) {
					stream.print(""\t\t"");
					stream.println(stack[i].toString());
				}
			}
		};
	}",Returns a  GLFWErrorCallback instance that prints the error in the specified  PrintStream.,1,294
648,"public static <T> DynamicValue<T> empty(String propertyName) {
        return new DynamicValue<T>(propertyName, null);
    }",Returns an empty  DynamicValue instance.,1,42
649,"public String getInvalidityInfoForTeamName(String teamName) {
        boolean isValidEmail = StringHelper.isMatching(teamName, REGEX_EMAIL);
        if (isValidEmail) {
            return TEAM_NAME_IS_VALID_EMAIL_ERROR_MESSAGE;
        }
        return getValidityInfoForAllowedName(TEAM_NAME_FIELD_NAME, TEAM_NAME_MAX_LENGTH, teamName);
    }","Checks if  teamName is a non-null non-empty string no longer than the specified length  TEAM_NAME_MAX_LENGTH, does not contain any invalid characters (| or %) and is not a valid email.",1,67
650,"public List<MUCItem> getItems() {
        synchronized (items) {
            return Collections.unmodifiableList(new ArrayList<>(items));
        }
    }","Returns a List of item children that holds information about roles, affiliation, jids and nicks.",1,46
651,"private String discoverFullJid(String calleeAddress)
    {
        String fullCalleeURI = null;
        DiscoverInfo discoverInfo = null;
        int bestPriority = -1;
        PresenceStatus jabberStatus = null;
        String calleeURI = null;

        Iterator<Presence> it
            = getProtocolProvider().getConnection().getRoster().getPresences(
                    calleeAddress);

        while(it.hasNext())
        {
            Presence presence = it.next();
            int priority
                = (presence.getPriority() == Integer.MIN_VALUE)
                    ? 0
                    : presence.getPriority();
            calleeURI = presence.getFrom();

            try
            {
                // check if the remote client supports telephony.
                discoverInfo
                    = protocolProvider.getDiscoveryManager().discoverInfo(
                            calleeURI);
            }
            catch (XMPPException ex)
            {
                logger.warn(""could not retrieve info for "" + fullCalleeURI, ex);
            }

            if (discoverInfo != null && discoverInfo.containsFeature(
                ProtocolProviderServiceJabberImpl.URN_XMPP_JINGLE))
            {
                if(priority > bestPriority)
                {
                    bestPriority = priority;
                    fullCalleeURI = calleeURI;
                    jabberStatus = OperationSetPersistentPresenceJabberImpl
                        .jabberStatusToPresenceStatus(
                                presence, protocolProvider);
                }
                else if(priority == bestPriority && jabberStatus != null)
                {
                    PresenceStatus tempStatus =
                        OperationSetPersistentPresenceJabberImpl
                           .jabberStatusToPresenceStatus(
                               presence, protocolProvider);
                    if(tempStatus.compareTo(jabberStatus) > 0)
                    {
                        fullCalleeURI = calleeURI;
                        jabberStatus = tempStatus;
                    }
                }
            }
        }

        if(logger.isInfoEnabled())
            logger.info(""Full JID for outgoing call: "" + fullCalleeURI
                            + "", priority "" + bestPriority);

        return fullCalleeURI;
    }",Discovers the resource for calleeAddress with the highest priority which supports either Jingle or Gtalk.,1,465
652,"@Transactional
  public SettingEntity merge(SettingEntity entity) {
    return entityManagerProvider.get().merge(entity);
  }",Update setting instance.,1,34
653,"public int sizeInBytes(CiKind kind) {
        return kind.sizeInBytes(referenceSize, arch.wordSize);
    }",Gets the size in bytes of the specified kind for this target.,1,32
654,"public static ConditionEvaluationReport get(
			ConfigurableListableBeanFactory beanFactory) {
		synchronized (beanFactory) {
			ConditionEvaluationReport report;
			if (beanFactory.containsSingleton(BEAN_NAME)) {
				report = beanFactory.getBean(BEAN_NAME, ConditionEvaluationReport.class);
			}
			else {
				report = new ConditionEvaluationReport();
				beanFactory.registerSingleton(BEAN_NAME, report);
			}
			locateParent(beanFactory.getParentBeanFactory(), report);
			return report;
		}
	}",Obtain a  ConditionEvaluationReport for the specified bean factory.,1,125
655,"Boolean isOverridden(String name, ASTFormalParameters params) throws NoSuchMethodException {
            List<Method> methods = getMethods(name, params.getParameterCount());

            if (methods.size() == 1) { // only one method with this name and parameter count, we can conclude
                return overridden.contains(methods.get(0));
            } else { // several overloads with same name and count, cannot be determined without comparing parameters
                Class<?>[] paramTypes = getParameterTypes(params);
                if (paramTypes == null) {
                    return false;
                }
                for (Method m : getMethods(name, paramTypes.length)) {
                    if (Arrays.equals(m.getParameterTypes(), paramTypes)) {
                        // we found our overload
                        return overridden.contains(m);
                    }
                }
                return false;
            }
        }",Tries to determine if the method with the given name and parameter count is overridden,1,206
656,"public static Outlink[] getOutlinks(final String plainText, Configuration conf) {
    return OutlinkExtractor.getOutlinks(plainText, """", conf);
  }",Extracts Outlink from given plain text.,1,45
657,"public Throwable catches(Exchange exchange, Throwable exception) {
        // use the exception iterator to walk the caused by hierachy
        Iterator<Throwable> it = ObjectHelper.createExceptionIterator(exception);
        while (it.hasNext()) {
            Throwable e = it.next();
            // see if we catch this type
            for (Class<?> type : exceptions) {
                if (type.isInstance(e) && matchesWhen(exchange)) {
                    return e;
                }
            }
        }

        // not found
        return null;
    }",Returns with the exception that is caught by this processor.,1,137
658,"public static boolean equalsIgnoreCase(CharSequence str1, CharSequence str2) {
        if (str1 == null || str2 == null) {
            return str1 == str2;
        } else {
            return regionMatchesSequence(str1, true, 0, str2, 0, Math.max(str1.length(), str2.length()));
        }
    }","Compares two CharSequences, returning  true if they are equal ignoring the case.  nulls are handled without exceptions.",1,108
659,"@Override
  public FtpFileSystem connect() throws ConnectionException {
    return new FtpFileSystem(setupClient(), getWorkingDir(), lockFactory);
  }",Creates and returns a new instance of  FtpFileSystem,1,41
660,"public static Form findForm(Control control) {
        while (control.getParent() != null && !(control.getParent() instanceof Page)) {
            control = (Control) control.getParent();
            if (control instanceof Form) {
                return (Form) control;
            }
        }
        return null;
    }",Find and return the specified controls parent Form or null if no Form is present.,1,103
661,"public EntryPointDeclarationDescr entryPointDeclaration( DeclareDescrBuilder ddb ) throws RecognitionException {
        EntryPointDeclarationDescrBuilder declare = null;
        try {
            declare = helper.start( ddb,
                                    EntryPointDeclarationDescrBuilder.class,
                                    null );

            String ep = """";

            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.ENTRY,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            match( input,
                   DRLLexer.MINUS,
                   null,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.POINT,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            ep = stringId();
            if ( state.failed ) return null;
            if( state.backtracking == 0 ) {
                declare.entryPointId( ep );
            }

            if( helper.validateIdentifierKey( DroolsSoftKeywords.END ) ) {
                // END?
                match( input,
                       DRLLexer.ID,
                       DroolsSoftKeywords.END,
                       null,
                       DroolsEditorType.KEYWORD );
                if ( state.failed ) return null;
            }

        } catch ( RecognitionException re ) {
            reportError( re );
        } finally {
            helper.end( EntryPointDeclarationDescrBuilder.class,
                        declare );
        }
        return (declare != null) ? declare.getDescr() : null;
    }",entryPointDeclaration := ENTRY-POINT stringId END?,1,424
662,"private ScriptException convertToScriptException(Throwable t, Map<String, List<String>> headers) {
        // create a script stack: this is just the script portion
        List<String> scriptStack = new ArrayList<>();
        for (StackTraceElement element : t.getStackTrace()) {
            if (WriterConstants.CLASS_NAME.equals(element.getClassName())) {
                // found the script portion
                int offset = element.getLineNumber();
                if (offset == -1) {
                    scriptStack.add(""<<< unknown portion of script >>>"");
                } else {
                    offset--; // offset is 1 based, line numbers must be!
                    int startOffset = executable.getPreviousStatement(offset);
                    if (startOffset == -1) {
                        assert false; // should never happen unless we hit exc in ctor prologue...
                        startOffset = 0;
                    }
                    int endOffset = executable.getNextStatement(startOffset);
                    if (endOffset == -1) {
                        endOffset = executable.getSource().length();
                    }
                    // TODO: if this is still too long, truncate and use ellipses
                    String snippet = executable.getSource().substring(startOffset, endOffset);
                    scriptStack.add(snippet);
                    StringBuilder pointer = new StringBuilder();
                    for (int i = startOffset; i < offset; i++) {
                        pointer.append(' ');
                    }
                    pointer.append(""^---- HERE"");
                    scriptStack.add(pointer.toString());
                }
                break;
            // but filter our own internal stacks (e.g. indy bootstrap)
            } else if (!shouldFilter(element)) {
                scriptStack.add(element.toString());
            }
        }
        // build a name for the script:
        final String name;
        if (PainlessScriptEngineService.INLINE_NAME.equals(executable.getName())) {
            name = executable.getSource();
        } else {
            name = executable.getName();
        }
        ScriptException scriptException = new ScriptException(""runtime error"", t, scriptStack, name, PainlessScriptEngineService.NAME);
        for (Map.Entry<String, List<String>> header : headers.entrySet()) {
            scriptException.addHeader(header.getKey(), header.getValue());
        }
        return scriptException;
    }",Adds stack trace and other useful information to exceptions thrown from a Painless script.,1,559
663,"public static Integer getOrder(Class<?> type) {
		return getOrder(type, null);
	}",Return the order on the specified  type.,1,33
664,"synchronized ClientLocationInfo lockBlock(long blockId, int blockLockId)
      throws IOException {
    if (blockId <= 0 || blockLockId < 0) {
      return null;
    }

    if (mLockedBlockIds.containsKey(blockId)) {
      mLockedBlockIds.get(blockId).add(blockLockId);
      return mLockedBlockIdToLocationInfo.get(blockId);
    }

    if (!mWorkerClient.isLocal()) {
      return null;
    }
    ClientLocationInfo locationInfo =
        mWorkerClient.lockBlock(blockId, mMasterClient.getUserId());

    if (locationInfo != null) {
      Set<Integer> lockIds = new HashSet<Integer>(4);
      lockIds.add(blockLockId);
      mLockedBlockIds.put(blockId, lockIds);
      mLockedBlockIdToLocationInfo.put(blockId, locationInfo);
      return locationInfo;
    }
    return null;
  }",Lock a block in certain StorageDir in the current TachyonFS.,1,232
665,"public MetafacadeBase createMetafacade(Object mappingObject)
    {
        return this.createMetafacade(mappingObject, null, null);
    }","Returns a metafacade for a mappingObject, depending on its mappingClass.",1,34
666,"public String getPath() {
        return canonicalPath;
    }",Returns the canonical path to where this Realm is persisted on disk.,1,19
667,"public static String format(InetAddress address) {
        return format(address, -1, true);
    }",Formats a network address (with optional host) for display purposes.,1,34
668,"public ElasticacheServersConfig useElasticacheServers() {
        return useElasticacheServers(new ElasticacheServersConfig());
    }",Init AWS Elasticache servers configuration.,1,26
669,"protected Object generateKey(Object result) {
			if (StringUtils.hasText(this.metadata.operation.getKey())) {
				EvaluationContext evaluationContext = createEvaluationContext(result);
				return evaluator.key(this.metadata.operation.getKey(), this.methodCacheKey, evaluationContext);
			}
			return this.metadata.keyGenerator.generate(this.target, this.metadata.method, this.args);
		}",Compute the key for the given caching operation.,1,110
670,"static public AttributeContext getContext(TilesRequestContext tilesContext) {
        Stack<AttributeContext> contextStack = getContextStack(tilesContext);
        if (!contextStack.isEmpty()) {
            return contextStack.peek();
        } else {
            return null;
        }
    }",Get attribute context from request.,1,74
671,"boolean isManaged(File file) {
        return VersioningManager.getInstance().getOwner(file) instanceof CVS && !Utils.isPartOfCVSMetadata(file);
    }",Tests whether a file or directory should receive the STATUS_NOTVERSIONED_NOTMANAGED status.,1,44
672,"public static byte[] decodeBase64(final byte[] data) {
        try {
            return Base64.decodeBase64(data);
        } catch (final Exception e) {
            LOGGER.error(""Base64 decoding failed"", e);
            return null;
        }
    }",Decode the byte[] in base64.,1,78
673,"public PatientIdentifier getPatientIdentifier(Integer identifierTypeId) {
		if (identifiers != null && identifiers.size() > 0) {
			PatientIdentifier found = null;
			for (PatientIdentifier id : identifiers) {
				if (id.getIdentifierType().getPatientIdentifierTypeId().equals(identifierTypeId)) {
					found = id;
					if (found.isPreferred())
						return found;
				}
			}
			return found;
		} else {
			return null;
		}
	}",Return's the first (preferred) patient identifier matching identifierTypeId,1,143
674,"protected FXBendConnectionPolicy getBendPolicy(
			IVisualPart<Node, ? extends Node> targetPart) {
		// retrieve the default bend policy
		return targetPart.getAdapter(FXBendConnectionPolicy.class);
	}",Returns the  FXBendConnectionPolicy that is installed on the given  IVisualPart.,1,44
675,"public boolean isFilterable(final RowSignature rowSignature)
  {
    return Filters.FILTERABLE_TYPES.contains(rowSignature.getColumnType(column));
  }",Check if this extraction can be used to build a filter on a Druid dataSource.,1,37
676,"public String extractSeeAlsoSection(String wikiText) {
        int seeAlsoStart = -1;
        String seeAlsoText = """";
        String seeAlsoTitle = ""==see also=="";
        Pattern seeAlsoPattern = Pattern.compile(seeAlsoTitle, Pattern.CASE_INSENSITIVE);
        Matcher seeAlsoMatcher = seeAlsoPattern.matcher(wikiText);

        if (seeAlsoMatcher.find()) {
            seeAlsoStart = wikiText.indexOf(seeAlsoMatcher.group());
        }


        if (seeAlsoStart > 0) {
            int nextHeadlineStart = wikiText.substring(seeAlsoStart + seeAlsoTitle.length()).indexOf(""=="");

            if (nextHeadlineStart > 0) {
                seeAlsoText = wikiText.substring(seeAlsoStart, seeAlsoStart + seeAlsoTitle.length() + nextHeadlineStart);

                wikiText = wikiText.substring(0, seeAlsoStart);
                wikiText += seeAlsoText.replaceAll(""\\[\\[(.*?)((\\||#).*?)?\\]\\]"", ""[[SEEALSO_$1]]"");
                wikiText += wikiText.substring(nextHeadlineStart);
            } else {
                seeAlsoText = wikiText.substring(seeAlsoStart);
                wikiText = wikiText.substring(0, seeAlsoStart);
                wikiText += seeAlsoText.replaceAll(""\\[\\[(.*?)((\\||#).*?)?\\]\\]"", ""[[SEEALSO_$1]]"");
            }
        }

        return wikiText;
    }","mark links of ""See Also"" section",1,346
677,"public Exchange createExchange(ExchangeSpecification exchangeSpecification) {

    Assert.notNull(exchangeSpecification, ""exchangeSpecfication cannot be null"");

    log.debug(""Creating exchange from specification"");

    String exchangeClassName = exchangeSpecification.getExchangeClassName();
    Exchange exchange = createExchangeWithoutSpecification(exchangeClassName);
    exchange.applySpecification(exchangeSpecification);
    return exchange;

  }",Create an Exchange object default ExchangeSpecification,1,87
678,"public TaskLock lock(final Task task, final Interval interval, long timeoutMs) throws InterruptedException
  {
    long nanos = TimeUnit.MILLISECONDS.toNanos(timeoutMs);
    giant.lockInterruptibly();
    try {
      Optional<TaskLock> taskLock;
      while (!(taskLock = tryLock(task, interval)).isPresent()) {
        if (nanos <= 0) {
          return null;
        }
        nanos = lockReleaseCondition.awaitNanos(nanos);
      }
      return taskLock.get();
    }
    finally {
      giant.unlock();
    }
  }","Acquires a lock on behalf of a task, waiting up to the specified wait time if necessary.",1,168
679,"public Literal color(String color) {
        if (color == null) {
            return null;
        }
        return ff.literal(convertToColor(color));
    }","Handles literal color definitions supplied as a string, returning a  Literal.",1,53
680,"private ControlRegistry pop() {
            ControlRegistry controlRegistry = peek();

            remove(size() - 1);

            return controlRegistry;
        }",Removes and return the ControlRegistry at the top of this stack.,1,46
681,"private static FieldSearchResult getField( final Class<?> componentClass,
    		final Class<?> targetClass,
    		final String fieldName,
            final boolean acceptPrivate,
            final boolean acceptPackage,
            final SimpleLogger logger )
    throws InvocationTargetException
    {
        try
        {
            // find the declared field in this class
            final Field field = targetClass.getDeclaredField( fieldName );

            // accept public and protected fields only and ensure accessibility
            return accept( componentClass, field, acceptPrivate, acceptPackage, logger );
        }
        catch ( NoSuchFieldException nsfe )
        {
            // thrown if no field is declared with the given name and
            // parameters
            if ( logger.isLogEnabled( LogService.LOG_DEBUG ) )
            {
                logger.log( LogService.LOG_DEBUG, ""Declared Field {0}.{1} not found"", new Object[]
                    { targetClass.getName(), fieldName }, null );
            }
        }
        catch ( Throwable throwable )
        {
            // unexpected problem accessing the field, don't let everything
            // blow up in this situation, just throw a declared exception
            throw new InvocationTargetException( throwable, ""Unexpected problem trying to get field "" + fieldName );
        }

        // caught and ignored exception, assume no field and continue search
        return null;
    }",Finds the field named  fieldName field in the given  targetClass.,1,276
682,"public XmlStringBuilder attribute(String name, Date value) {
        assert value != null;
        return attribute(name, XmppDateTime.formatXEP0082Date(value));
    }","Add a new attribute to this builder, with the  java.util.Date instance as its value, which will get formated with  XmppDateTime#formatXEP0082Date(Date).",1,49
683,"public List<MUCItem> getItems() {
        synchronized (items) {
            return Collections.unmodifiableList(new ArrayList<>(items));
        }
    }","Returns a List of item children that holds information about affiliation, jids and nicks.",1,46
684,"protected QName loadRef() {
    TypeDeclaration declaration = null;
    String elementDeclaration;
    try {
      if ((xmlElementRef != null) && (xmlElementRef.type() != XmlElementRef.DEFAULT.class)) {
        Class typeClass = xmlElementRef.type();
        elementDeclaration = typeClass.getName();
        declaration = getEnv().getTypeDeclaration(typeClass.getName());
      }
      else {
        TypeMirror accessorType = getAccessorType();
        elementDeclaration = accessorType.toString();
        if (accessorType instanceof DeclaredType) {
          declaration = ((DeclaredType) accessorType).getDeclaration();
        }
      }
    }
    catch (MirroredTypeException e) {
      //This exception implies the ref is within the source base.
      TypeMirror typeMirror = e.getTypeMirror();
      elementDeclaration = typeMirror.toString();
      if (typeMirror instanceof DeclaredType) {
        declaration = ((DeclaredType) typeMirror).getDeclaration();
      }
    }

    RootElementDeclaration refElement;
    if ((declaration instanceof ClassDeclaration) && (declaration.getAnnotation(XmlRootElement.class) != null)) {
      ClassDeclaration classDeclaration = (ClassDeclaration) declaration;
      refElement = new RootElementDeclaration(classDeclaration, ((EnunciateFreemarkerModel) FreemarkerModel.get()).findTypeDefinition(classDeclaration));
    }
    else {
      throw new ValidationException(getPosition(), elementDeclaration + "" is not a root element declaration."");
    }

    return new QName(refElement.getNamespace(), refElement.getName());
  }",Load the qname of the referenced root element declaration.,1,406
685,"public String getFragment() {
        return fragment;
    }",Gets currently set URI fragment.,1,19
686,"protected AnchorKey getWayAnchorKey(int index) {
		return new AnchorKey(getCurveNode(), WAY_POINT_ROLE_PREFIX + index);
	}",Returns the  AnchorKey for the given way anchor index.,1,36
687,"@Override
    @SuppressWarnings(""unchecked"")
    public Object clone() {
        return new ImplicationWhen(name, (ArrayList<Term>) cloneList(components), (ArrayList<Variable>) cloneList(openVariables), complexity);
    }",Clone an object,1,64
688,"public boolean getRetryWrites() {
        return retryWrites == null ? true : retryWrites;
    }","Returns true if writes should be retried if they fail due to a network error, and false otherwise Starting with the 3.11.0 release, the default value is true",1,32
689,"public List<DistributionSetTypeRequestBodyPost> build() {
        return Lists.newArrayList(doBuild(name, key));
    }",Builds a list with a single entry of  DistributionSetTypeRequestBodyPost which can directly be used in the RESTful-API.,1,33
690,"private CacheSpan getSpan(CacheSpan lookupSpan) {
    String key = lookupSpan.key;
    long offset = lookupSpan.position;
    TreeSet<CacheSpan> entries = getSpansForKey(key);
    if (entries == null) {
      return CacheSpan.createOpenHole(key, lookupSpan.position);
    }
    CacheSpan floorSpan = entries.floor(lookupSpan);
    if (floorSpan != null &&
        floorSpan.position <= offset && offset < floorSpan.position + floorSpan.length) {
      // The lookup position is contained within floorSpan.
      if (floorSpan.file.exists()) {
        return floorSpan;
      } else {
        // The file has been deleted from under us. It's likely that other files will have been
        // deleted too, so scan the whole in-memory representation.
        removeStaleSpans();
        return getSpan(lookupSpan);
      }
    }
    CacheSpan ceilEntry = entries.ceiling(lookupSpan);
    return ceilEntry == null ? CacheSpan.createOpenHole(key, lookupSpan.position) :
        CacheSpan.createClosedHole(key, lookupSpan.position,
            ceilEntry.position - lookupSpan.position);
  }",Returns the cache  CacheSpan corresponding to the provided lookup  CacheSpan.,1,273
691,"public static <T> Collection<T> dropRight(Iterable<T> self, int num) {
        Collection<T> selfCol = self instanceof Collection ? (Collection<T>) self : toList(self);
        if (selfCol.size() <= num) {
            return createSimilarCollection(selfCol, 0);
        }
        if (num <= 0) {
            Collection<T> ret = createSimilarCollection(selfCol, selfCol.size());
            ret.addAll(selfCol);
            return ret;
        }
        Collection<T> ret = createSimilarCollection(selfCol, selfCol.size() - num);
        ret.addAll(asList((Iterable<T>)selfCol).subList(0, selfCol.size() - num));
        return ret;
    }",Drops the given number of elements from the tail of this Iterable.,1,223
692,"public boolean pressHome() {
        Tracer.trace();
        waitForIdle();
        return mUiAutomationBridge.getInteractionController().sendKeyAndWaitForEvent(
                KeyEvent.KEYCODE_HOME, 0, AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED,
                KEY_PRESS_EVENT_TIMEOUT);
    }",Simulates a short press on the HOME button.,1,58
693,"public static int[] toPrimitive(final Integer[] array, final int valueForNull) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_INT_ARRAY;
        }
        final int[] result = new int[array.length];
        for (int i = 0; i < array.length; i++) {
            Integer b = array[i];
            result[i] = (b == null ? valueForNull : b.intValue());
        }
        return result;
    }",Converts an array of object Integer to primitives handling null. This method returns null if null array input.,1,182
694,"public MethodDelegation toField(String name, FieldLocator.Factory fieldLocatorFactory, MethodGraph.Compiler methodGraphCompiler) {
            return new MethodDelegation(new ImplementationDelegate.ForField.WithLookup(name, methodGraphCompiler, parameterBinders, matcher, fieldLocatorFactory),
                    TargetMethodAnnotationDrivenBinder.ParameterBinder.DEFAULTS,
                    MethodDelegationBinder.AmbiguityResolver.DEFAULT);
        }",Delegates any intercepted method to invoke a non- static method on the instance of the supplied field.,1,78
695,"synchronized boolean lockBlock(long blockId, int blockLockId) throws IOException {
    if (blockId <= 0 || blockLockId < 0) {
      return false;
    }

    if (mLockedBlockIds.containsKey(blockId)) {
      mLockedBlockIds.get(blockId).add(blockLockId);
      return true;
    }

    if (!mWorkerClient.isLocal()) {
      return false;
    }
    mWorkerClient.lockBlock(blockId, mMasterClient.getUserId());

    Set<Integer> lockIds = new HashSet<Integer>(4);
    lockIds.add(blockLockId);
    mLockedBlockIds.put(blockId, lockIds);
    return true;
  }",Lock a block in the current TachyonFS.,1,184
696,"public static long generateConsistentHash(final byte[] bytes) throws Exception
    {
        final byte[] digest = MessageDigest.getInstance(""SHA-1"").digest(bytes);

        // truncate by taking first 8 bytes
        return ((long)digest[0] << 56) |
               ((long)digest[1] << 48) |
               ((long)digest[2] << 40) |
               ((long)digest[3] << 32) |
               ((long)digest[4] << 24) |
               ((long)digest[5] << 16) |
               ((long)digest[6] << 8)  |
               ((long)digest[7]);
    }",Generate a consistent hash of the bytes that is represented as a long.,1,197
697,"public static IndexedStringMap emptyFrozenContextData() {
        return EMPTY_STRING_MAP;
    }",An empty pre-frozen IndexedStringMap.,1,21
698,"public Query like(String fieldName, Reader... readers) throws IOException {
    Map<String, Int> words = new HashMap<>();
    for (Reader r : readers) {
      addTermFrequencies(r, words, fieldName);
    }
    return createQuery(createQueue(words));
  }",Return a query that will return docs like the passed Readers.,1,93
699,"public static JFileChooser promptToOpenFile(String[] exts, String existingFileName) {
        return promptToOpenFile(exts, null, false);
    }",Prompts the user to choose a file or a directory from their filesystems for our own devious uses.,1,40
700,"public static PluginImpl getInstance() {
        return Jenkins.getInstance().getPlugin(PluginImpl.class);
    }",Returns the instance of this class.,1,32
701,"public Authentication get() {
        Jenkins h = Jenkins.getInstance();
        Secret userName = Secret.decrypt(props.getProperty(getPropertyKey()));
        if (userName==null) return Jenkins.ANONYMOUS; // failed to decrypt
        try {
            UserDetails u = h.getSecurityRealm().loadUserByUsername(userName.toString());
            return new UsernamePasswordAuthenticationToken(u.getUsername(), u.getPassword(), u.getAuthorities());
        } catch (AuthenticationException e) {
            return Jenkins.ANONYMOUS;
        } catch (DataAccessException e) {
            return Jenkins.ANONYMOUS;
        }
    }",Gets the persisted authentication for this Hudson.,1,170
702,"// TODO: detect cycles => private String toString(Object o, Set<Object> visited)
	public static Option<Number> toNumber(Object o) {
		return Option.of(internalToNumber(o));
	}",Converts an Object o to a Number according to these rules:  null -&gt; null Boolean b -&gt; b ? 1 : 0 Number n -&gt; n String s -&gt; toNumber(s) Object[] arr -&gt; toNumber(unbox(arr)) Collection c -&gt; toNumber(unbox(c)) Optional o -&gt; toNumber(unbox(o)) Object o -&gt; toNumber(o.toString()),1,38
703,"private ExtensionManager createExtensionManager() {
    DefaultExtensionManager extensionManager = new DefaultExtensionManager();
    extensionManager.setMuleContext(new DefaultMuleContext() {

      private ErrorTypeRepository errorTypeRepository = ErrorTypeRepositoryFactory.createDefaultErrorTypeRepository();
      private ErrorTypeLocator errorTypeLocator = ErrorTypeLocatorFactory.createDefaultErrorTypeLocator(errorTypeRepository);

      @Override
      public MuleRegistry getRegistry() {
        return new MuleRegistryHelper(new DefaultRegistryBroker(this), this);
      }

      @Override
      public ErrorTypeLocator getErrorTypeLocator() {
        return errorTypeLocator;
      }

      @Override
      public ErrorTypeRepository getErrorTypeRepository() {
        return errorTypeRepository;
      }

    });
    try {
      extensionManager.initialise();
    } catch (InitialisationException e) {
      throw new RuntimeException(""Error while initialising the extension manager"", e);
    }
    return extensionManager;
  }",Creates a  ExtensionManager needed for generating the metadata for an extension.,1,216
704,"public boolean triggerCheckpoint(long timestamp, boolean isPeriodic) {
		return triggerCheckpoint(timestamp, checkpointProperties, null, isPeriodic).isSuccess();
	}",Triggers a new standard checkpoint and uses the given timestamp as the checkpoint timestamp.,1,43
705,"int ll_removeFS_all(int fsAddr) {
    return (IS_ALLOW_DUP_ADD_2_INDEXES) ? 
        ll_removeFS_all_ret(fsAddr) : 
        ((ll_removeFS_ret(fsAddr)) ? 1 : 0);
  }",Remove this fsAddr from all defined indexes in this view for this type,1,52
706,"public static CallFrame getCurrentFrame() {
        final Stack stack = (Stack)callStack.get();
        if (stack != null && !stack.isEmpty()) {
            return (CallFrame)stack.peek();
        }
        return null;
    }",Use this method for getting the current call frame,1,80
707,"public PeriodType withMillisRemoved() {
        if (!millis().isSupported()) {
            return this;
        }
        return MaskedType.mask(this, 1 << 7);
    }",Returns a version of this PeriodType instance that does not support milliseconds.,1,57
708,"protected Set<? extends IFXOnTypePolicy> getTargetPolicies(KeyEvent event) {
		EventTarget target = event.getTarget();
		if (target instanceof Scene) {
			return getTargetPolicies((Scene) target);
		} else if (target instanceof Node) {
			Scene scene = ((Node) target).getScene();
			if (scene == null) {
				return Collections.emptySet();
			}
			return getTargetPolicies(scene);
		} else {
			return Collections.emptySet();
		}
	}",Returns a  Set containing all  IFXOnTypePolicys that are installed on the target  IVisualPart for the given  KeyEvent.,1,156
709,"public static <T> ComponentIdentifier<T> getIdentifier(String encodedString)
            throws LoadResourceException {
        try {
            if (encodedString != null) {
                Object decodedObject = SerilizationUtils.decode(encodedString);
                if (decodedObject instanceof ComponentIdentifier) {
                    return (ComponentIdentifier<T>) decodedObject;
                }
                throw new LoadResourceException(""The decoded object is "" //$NON-NLS-1$
                        + ""not of type 'IComponentIdentfier'.""); //$NON-NLS-1$
            }
        } catch (IOException e) {
            throw new LoadResourceException(
                    ""Could load the given component name"", e); //$NON-NLS-1$
        } catch (ClassNotFoundException e) {
            throw new LoadResourceException(
                    ""Problems during deserialization..."", e); //$NON-NLS-1$
        }
        return null;
    }",Returns a component identifier instance for the given encoded component identifier,1,195
710,"public ConfigModel build(){
            return new AreaConfigModel(this);
        }",Build a new ConfigModel instance.,1,23
711,"public synchronized SocketAndStreams get(SocketAddress remote) {

    if (capacity <= 0) { // disabled
      return null;
    }

    List<SocketAndStreams> sockStreamList = multimap.get(remote);
    if (sockStreamList == null) {
      return null;
    }

    Iterator<SocketAndStreams> iter = sockStreamList.iterator();
    while (iter.hasNext()) {
      SocketAndStreams candidate = iter.next();
      iter.remove();
      if (!candidate.sock.isClosed()) {
        return candidate;
      }
    }
    return null;
  }",Get a cached socket to the given address.,1,173
712,"public static double get(OperationMetricKey key, ASTMethodOrConstructorDeclaration node, MetricVersion version) {
        if (!key.getCalculator().supports(node)) {
            return Double.NaN;
        }

        MetricVersion safeVersion = (version == null) ? Version.STANDARD : version;

        return TOP_LEVEL_PACKAGE.compute(key, node, false, safeVersion);
    }",Computes a metric identified by its key on a operation AST node.,1,107
713,"public List validateSLD(InputStream xml) {
        return validateSLD(new InputSource(xml));
    }",validates against the SLD schema in the classpath,1,30
714,"protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {
		List<Mono<?>> asyncAttributes = null;
		for (Map.Entry<String, ?> entry : model.entrySet()) {
			Object value =  entry.getValue();
			if (value == null) {
				continue;
			}
			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value);
			if (adapter != null) {
				if (asyncAttributes == null) {
					asyncAttributes = new ArrayList<>();
				}
				String name = entry.getKey();
				if (adapter.isMultiValue()) {
					asyncAttributes.add(
							Flux.from(adapter.toPublisher(value))
									.collectList()
									.doOnSuccess(result -> {
										result = result != null ? result : Collections.emptyList();
										model.put(name, result);
									}));
				}
				else {
					asyncAttributes.add(
							Mono.from(adapter.toPublisher(value))
									.doOnSuccess(result -> {
										if (result != null) {
											model.put(name, result);
										}
										else {
											model.remove(name);
										}
									}));
				}
			}
		}
		return asyncAttributes != null ? Mono.when(asyncAttributes) : Mono.empty();
	}","Use the configured  ReactiveAdapterRegistry to adapt asynchronous model attributes to  Mono or  Mono> and resolve them to actual values via  Mono#zip(Mono, Mono), so that when the returned result  Mono completes, the model has its asynchronous attributes replaced with synchronous values.",1,401
715,"public static PackageData from(CompositeData data) {
        if(data == null){
            return null;
        }
        long exportingBundle = (Long) data.get(PackageStateMBean.EXPORTING_BUNDLE);
        long[] importingBundles = toLongPrimitiveArray((Long[]) data.get(PackageStateMBean.IMPORTING_BUNDLES));
        String name = (String) data.get(PackageStateMBean.NAME);
        boolean removalPending = (Boolean) data.get(PackageStateMBean.REMOVAL_PENDING);
        String version = (String) data.get(PackageStateMBean.VERSION);
        return new PackageData(exportingBundle,importingBundles,name, removalPending,version);
    }",Static factory method to create PackageData from CompositeData object.,1,171
716,"public Cell getColumnLatest(byte [] family, byte [] qualifier) {
    Cell [] kvs = raw(); // side effect possibly.
    if (kvs == null || kvs.length == 0) {
      return null;
    }
    int pos = binarySearch(kvs, family, qualifier);
    if (pos == -1) {
      return null;
    }
    KeyValue kv = KeyValueUtil.ensureKeyValue(kvs[pos]);
    if (kv.matchingColumn(family, qualifier)) {
      return kv;
    }
    return null;
  }",The Cell for the most recent timestamp for a given column.,1,172
717,"public static MongoClient create(final ConnectionString connectionString) {
        return create(MongoClientSettings.builder()
                                         .clusterSettings(ClusterSettings.builder()
                                                                         .applyConnectionString(connectionString)
                                                                         .build())
                                         .connectionPoolSettings(ConnectionPoolSettings.builder()
                                                                                       .applyConnectionString(connectionString)
                                                                                       .build())
                                         .serverSettings(ServerSettings.builder().build())
                                         .credentialList(connectionString.getCredentialList())
                                         .sslSettings(SSLSettings.builder()
                                                                 .applyConnectionString(connectionString)
                                                                 .build())
                                         .socketSettings(SocketSettings.builder()
                                                                       .applyConnectionString(connectionString)
                                                                       .build())
                                         .build());
    }",Create a new client with the given connection string.,1,161
718,"public long executeInsert() {
        mDatabase.lock();
        boolean logStats = mDatabase.mLogStats;
        long startTime = logStats ? SystemClock.elapsedRealtime() : 0;

        acquireReference();
        try {
            if (SQLiteDebug.DEBUG_SQL_STATEMENTS) {
                Log.v(TAG, ""executeInsert() for ["" + mSql + ""]"");
            }
            native_execute();
            if (logStats) {
                mDatabase.logTimeStat(false /* write */, startTime, SystemClock.elapsedRealtime());
            }
            return mDatabase.lastInsertRow();
        } finally {
            releaseReference();
            mDatabase.unlock();
        }
    }",Execute this SQL statement and return the ID of the most recently inserted row.,1,178
719,"private String getInstanceType(AttributeList atts, String currentPackage) {
        
        String type = null;
        
        //-- find xsi:type attribute
        String prefix = _namespaces.getNamespacePrefix(XSI_NAMESPACE);
        if (prefix == null) return null;
        prefix += ':';
        
        for (int i = 0; i < atts.getLength(); i++) {
            String attName = atts.getName(i);
            if (attName.startsWith(prefix)) {
                attName = attName.substring(prefix.length());
                if (attName.equals(XSI_TYPE)) {
                    type = atts.getValue(i);
                    break;
                }
            }
        }
        
        if (type != null) {
            if (type.startsWith(JAVA_PREFIX)) {
                return type.substring(JAVA_PREFIX.length());
            }
            //-- Retrieve the type corresponding to the schema name and
            //-- return it.
            XMLClassDescriptor classDesc =
                _cdResolver.resolveByXMLName(type, null, _loader);

            if (classDesc != null)
                return classDesc.getJavaClass().getName();
                
            //-- if class descriptor is not found here, then no descriptors
            //-- existed in memory...try to load one based on name of
            //-- Schema type
            String className = JavaNaming.toJavaClassName(type);
            classDesc = _cdResolver.resolve(className, _loader);
            if (classDesc != null) 
                return classDesc.getJavaClass().getName();
                
            //-- try to use ""current Package""
            className = currentPackage + '.' + className;
            classDesc = _cdResolver.resolve(className, _loader);
            if (classDesc != null) 
                return classDesc.getJavaClass().getName();
            
            
        }
        return null;
    } //-- getInstanceType",Returns the resolved instance type attribute (xsi:type).,1,449
720,"private static String toFunctionCall(ColorWithAlternatives color) {
        ColorSpace cs = color.getColorSpace();
        if (cs.isCS_sRGB() && !color.hasAlternativeColors()) {
            return toRGBFunctionCall(color);
        }
        if (cs instanceof CIELabColorSpace) {
            return toCIELabFunctionCall(color);
        }

        Color specColor = color;
        if (color.hasAlternativeColors()) {
            Color alt = color.getAlternativeColors()[0];
            if (ColorSpaces.isDeviceColorSpace(alt.getColorSpace())) {
                cs = alt.getColorSpace();
                specColor = alt;
            }
        }
        ColorSpaceOrigin origin = ColorSpaces.getColorSpaceOrigin(cs);
        String functionName;

        Color fallbackColor = getsRGBFallback(color);
        float[] rgb = fallbackColor.getColorComponents(null);
        assert rgb.length == 3;
        StringBuffer sb = new StringBuffer(40);
        sb.append(""("");
        sb.append(rgb[0]).append("","");
        sb.append(rgb[1]).append("","");
        sb.append(rgb[2]).append("","");
        String profileName = origin.getProfileName();
        sb.append(profileName).append("","");
        if (origin.getProfileURI() != null) {
            sb.append(""\"""").append(origin.getProfileURI()).append(""\"""");
        }

        if (cs instanceof NamedColorSpace) {
            NamedColorSpace ncs = (NamedColorSpace)cs;
            if (SEPARATION_PSEUDO_PROFILE.equalsIgnoreCase(profileName)) {
                functionName = ""fop-rgb-icc"";
            } else {
                functionName = ""fop-rgb-named-color"";
            }
            sb.append("","").append(ncs.getColorName());
        } else {
            functionName = ""fop-rgb-icc"";
            float[] colorComponents = specColor.getColorComponents(null);
            for (int ix = 0; ix < colorComponents.length; ix++) {
                sb.append("","");
                sb.append(colorComponents[ix]);
            }
        }
        sb.append("")"");
        return functionName + sb.toString();
    }",Create string representation of a fop-rgb-icc (or fop-rgb-named-color) function call from the given color.,1,611
721,"public static String nameOfPersist(int x) {
    switch( x ) {
    case ICE : return ""ICE"";
    case HDFS: return ""HDFS"";
    case S3  : return ""S3"";
    case NFS : return ""NFS"";
    case TCP : return ""TCP"";
    case GCS : return ""GCS"";
    default  : return null;
    }
  }","One of ICE, HDFS, S3, GCS, NFS or TCP, according to where this Value is persisted.",1,124
722,"static BackendListenerClient createBackendListenerClientImpl(Class<?> clientClass) {
        if (clientClass == null) { // failed to initialise the class
            return new ErrorBackendListenerClient();
        }
        try {
            return (BackendListenerClient) clientClass.newInstance();
        } catch (Exception e) {
            LOGGER.error(""Exception creating: "" + clientClass, e);
            return new ErrorBackendListenerClient();
        }
    }",Returns reference to  BackendListener,1,111
723,"protected boolean isAutoConfiguredDataSource() {
		try {
			BeanDefinition beanDefinition = this.beanFactory
					.getBeanDefinition(""dataSource"");
			return EmbeddedDatabaseConfiguration.class.getName().equals(
					beanDefinition.getFactoryBeanName());
		} catch (NoSuchBeanDefinitionException e) {
			return false;
		}
	}",Determines if the  dataSource being used by Spring was created from  EmbeddedDatabaseConfiguration.,1,84
724,"public FileSystem getFileSystem() {
        return fsc.getFileSystem();
    }",Returns the workspace file system implementation.,1,23
725,"@SuppressWarnings(""ReferenceEquality"")
  public boolean handleBuffer(ByteBuffer buffer, long presentationTimeUs)
      throws InitializationException, WriteException {
    Assertions.checkArgument(inputBuffer == null || buffer == inputBuffer);
    if (!isInitialized()) {
      initialize();
      if (playing) {
        play();
      }
    }

    if (needsPassthroughWorkarounds()) {
      // An AC-3 audio track continues to play data written while it is paused. Stop writing so its
      // buffer empties. See [Internal: b/18899620].
      if (audioTrack.getPlayState() == PLAYSTATE_PAUSED) {
        // We force an underrun to pause the track, so don't notify the listener in this case.
        hasData = false;
        return false;
      }

      // A new AC-3 audio track's playback position continues to increase from the old track's
      // position for a short time after is has been released. Avoid writing data until the playback
      // head position actually returns to zero.
      if (audioTrack.getPlayState() == PLAYSTATE_STOPPED
          && audioTrackUtil.getPlaybackHeadPosition() != 0) {
        return false;
      }
    }

    boolean hadData = hasData;
    hasData = hasPendingData();
    if (hadData && !hasData && audioTrack.getPlayState() != PLAYSTATE_STOPPED) {
      long elapsedSinceLastFeedMs = SystemClock.elapsedRealtime() - lastFeedElapsedRealtimeMs;
      listener.onUnderrun(bufferSize, C.usToMs(bufferSizeUs), elapsedSinceLastFeedMs);
    }

    if (inputBuffer == null) {
      // We are seeing this buffer for the first time.
      if (!buffer.hasRemaining()) {
        // The buffer is empty.
        return true;
      }

      if (passthrough && framesPerEncodedSample == 0) {
        // If this is the first encoded sample, calculate the sample size in frames.
        framesPerEncodedSample = getFramesPerEncodedSample(outputEncoding, buffer);
      }

      if (drainingPlaybackParameters != null) {
        if (!drainAudioProcessorsToEndOfStream()) {
          // Don't process any more input until draining completes.
          return false;
        }
        // Store the position and corresponding media time from which the parameters will apply.
        playbackParametersCheckpoints.add(new PlaybackParametersCheckpoint(
            drainingPlaybackParameters, Math.max(0, presentationTimeUs),
            framesToDurationUs(getWrittenFrames())));
        drainingPlaybackParameters = null;
        // The audio processors have drained, so flush them. This will cause any active speed
        // adjustment audio processor to start producing audio with the new parameters.
        resetAudioProcessors();
      }

      if (startMediaTimeState == START_NOT_SET) {
        startMediaTimeUs = Math.max(0, presentationTimeUs);
        startMediaTimeState = START_IN_SYNC;
      } else {
        // Sanity check that presentationTimeUs is consistent with the expected value.
        long expectedPresentationTimeUs = startMediaTimeUs
            + framesToDurationUs(getSubmittedFrames());
        if (startMediaTimeState == START_IN_SYNC
            && Math.abs(expectedPresentationTimeUs - presentationTimeUs) > 200000) {
          Log.e(TAG, ""Discontinuity detected [expected "" + expectedPresentationTimeUs + "", got ""
              + presentationTimeUs + ""]"");
          startMediaTimeState = START_NEED_SYNC;
        }
        if (startMediaTimeState == START_NEED_SYNC) {
          // Adjust startMediaTimeUs to be consistent with the current buffer's start time and the
          // number of bytes submitted.
          startMediaTimeUs += (presentationTimeUs - expectedPresentationTimeUs);
          startMediaTimeState = START_IN_SYNC;
          listener.onPositionDiscontinuity();
        }
      }

      if (passthrough) {
        submittedEncodedFrames += framesPerEncodedSample;
      } else {
        submittedPcmBytes += buffer.remaining();
      }

      inputBuffer = buffer;
    }

    if (passthrough) {
      // Passthrough buffers are not processed.
      writeBuffer(inputBuffer, presentationTimeUs);
    } else {
      processBuffers(presentationTimeUs);
    }

    if (!inputBuffer.hasRemaining()) {
      inputBuffer = null;
      return true;
    }
    return false;
  }","Attempts to process data from a  ByteBuffer, starting from its current position and ending at its limit (exclusive).",1,824
726,"public static HornetQConnectionFactory createConnectionFactory(final List<Pair<TransportConfiguration, TransportConfiguration>> staticConnectors)
   {
      return new HornetQConnectionFactory(staticConnectors);
   }",Creates a HornetQConnectionFactory using a List of TransportConfigurations and backups.,1,41
727,"private static List<FoundFailureCause> findIndications(final Collection<FailureCause> causes,
                                                         Run build,
                                                         PrintStream buildLog) {
        List<FoundFailureCause> foundFailureCauses = new ArrayList<>();

        List<FailureCause> singleLineCauses = new ArrayList<>();
        List<FailureCause> notOnlySingleLineCauses = new ArrayList<>();

        for (FailureCause cause : causes) {
            boolean atLeast = false;
            for (Indication indication : cause.getIndications()) {
                if (indication instanceof MultilineBuildLogIndication) {
                    atLeast = true;
                }
            }

            if (atLeast) {
                notOnlySingleLineCauses.add(cause);
            } else {
                singleLineCauses.add(cause);
            }
        }

        try {
            try (BufferedReader reader = new BufferedReader(build.getLogReader())) {
                foundFailureCauses.addAll(
                        FailureReader.scanSingleLinePatterns(
                                singleLineCauses,
                                build,
                                reader,
                                build.getLogFile().getName()));
            }

            for (FailureCause cause : notOnlySingleLineCauses) {
                List<FoundIndication> foundIndications = new ArrayList<>();
                for (Indication indication : cause.getIndications()) {
                    long start = System.currentTimeMillis();

                    Thread.currentThread().setName(""BFA-scanner-""
                            + build.getFullDisplayName() + "": ""
                            + cause.getName() + ""-""
                            + indication.getUserProvidedExpression());

                    final FoundIndication foundIndication = findIndication(indication, build, buildLog);
                    if (foundIndication != null) {
                        foundIndications.add(foundIndication);

                        if (logger.isLoggable(Level.FINER)) {
                            logger.log(Level.FINER, ""[BFA] [{0}] [{1}] {2}ms"", new Object[]{build.getFullDisplayName(),
                                    cause.getName(),
                                    String.valueOf(System.currentTimeMillis() - start),});
                        }
                    }
                }

                foundFailureCauses.add(new FoundFailureCause(cause, foundIndications));
            }

            return foundFailureCauses;
        } catch (IOException e) {
            buildLog.print(""[BFA] Exception during parsing file: "" + e);
        }

        return new ArrayList<>();
    }",Finds indications for all causes.,1,602
728,"public InternalDocumentRevision build() {
        DocumentRevisionOptions options = new DocumentRevisionOptions();
        options.sequence = sequence;
        options.docInternalId = docInternalId;
        options.deleted = deleted;
        options.current = current;
        options.parent = parent;
        options.attachments = attachments;
        return new InternalDocumentRevision(docId, revId, body, options);
    }",Builds and returns the  InternalDocumentRevision for this builder.,1,107
729,"public RealmResults<E> findAllSorted(String fieldName, boolean sortAscending) {
        TableView tableView = query.findAll();
        TableView.Order order = sortAscending ? TableView.Order.ascending : TableView.Order.descending;
        Long columnIndex = columns.get(fieldName);
        if (columnIndex == null || columnIndex < 0) {
            throw new IllegalArgumentException(String.format(""Field name '%s' does not exist."", fieldName));
        }
        tableView.sort(columnIndex, order);
        return new RealmResults<E>(realm, tableView, clazz);
    }",Find all objects that fulfill the query conditions and sorted by specific field name.,1,160
730,"public boolean equals(Object obj) {
        if (obj instanceof MutableInt) {
            return (value == ((MutableInt) obj).intValue());
        }
        return false;
    }",Compares this object to the specified object.,1,61
731,"public static boolean deleteRealmFile(Context context, String fileName) {
        return deleteRealm(new RealmConfiguration.Builder(context)
                        .name(fileName)
                        .build()
        );
    }",Deprecated: Use  #deleteRealm(RealmConfiguration) instead.,1,54
732,"public List<Item> getRosterItems() {
        synchronized (rosterItems) {
            return new ArrayList<Item>(rosterItems);
        }
    }",Returns a copied list of the roster items in the packet.,1,42
733,"protected BasePreferences findPreferences(String id)
	{
		if (id == null) {
			return null;
		}

		boolean isForCurrentUser = id.equals(sessionManager().getCurrentSessionUserId());
		Session session = sessionManager().getCurrentSession();

		// If we're getting the preferences for the current user, we can use the
		// version stored in the session if present.
		if (isForCurrentUser) {
			BasePreferences prefsFromSession = (BasePreferences) session.getAttribute(ATTR_PREFERENCE);

			if (prefsFromSession != null) {
				return new BasePreferences(prefsFromSession);
			}
		}

		// Otherwise, try the cache
		BasePreferences prefs = (BasePreferences) m_cache.get(id);

		// Failing that, try the storage
		if (prefs == null) {
			prefs = (BasePreferences) m_storage.get(id);
		}

		if (prefs != null) {
			// Refresh the cache
			m_cache.put(id, prefs);

			// And stash preferences on the current user's session if appropriate.
			if (isForCurrentUser) {
				session.setAttribute(ATTR_PREFERENCE, new BasePreferences(prefs));
			}
		}
		
		return prefs;
	}","Find the preferences object, in the user's session, cache or storage.",1,280
734,"protected PreparedStatementSetter newArgPreparedStatementSetter(Object[] args) {
		return new ArgumentPreparedStatementSetter(args);
	}",Create a new arg-based PreparedStatementSetter using the args passed in.,1,29
735,"protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus,
			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {

		int statusCode = responseStatus.code().value();
		String reason = responseStatus.reason();
		return applyStatusAndReason(statusCode, reason, response);
	}",Template method that handles the  ResponseStatus @ResponseStatus annotation.,1,90
736,"public static String getDateTimeString(final OffsetDateTime self) {
        return self.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
    }",Formats this date/time with the  java.time.format.DateTimeFormatter#ISO_OFFSET_DATE_TIME formatter.,1,33
737,"public long getContainerDiskHint(Map<String, List<String>> packing) {
    long defaultInstanceDisk = Long.parseLong(context.getProperty(
        INSTANCE_DISK_DEFAULT, Long.toString(1 * Constants.GB)));
    long defaultContainerDisk =
        defaultInstanceDisk * getLargestContainerSize(packing) + DEFAULT_DISK_PADDING;

    List<TopologyAPI.Config.KeyValue> topologyConfig = topology.getTopologyConfig().getKvsList();

    return Long.parseLong(TopologyUtility.getConfigWithDefault(
        topologyConfig, Config.TOPOLOGY_CONTAINER_DISK_REQUESTED, defaultContainerDisk + """"));
  }",Provide disk per aurora container.,1,141
738,"public Socks5CmdType cmdType() {
        return cmdType;
    }",Returns the  Socks5CmdType of this  Socks5CmdRequest,1,19
739,"public boolean containsHeader(String name, String value) {
        if (this.headers != null) {
            return this.headers.containsEntry(name, value);
        } else {
            return false;
        }
    }",Returns true if a header with the specified name and value has been added,1,69
740,"private Object getNextDiff(Object start) {
		return getNextItemWithDiff(start, false);
	}","Returns, from the given item, the next item that contains a diff.",1,28
741,"public static DataHandler rateReporterHandler(final RateReporter reporter)
    {
        return (buffer, offset, length, header) -> reporter.onMessage(1, length);
    }","Return a reusable, parameteried  uk.co.real_logic.aeron.common.concurrent.logbuffer.DataHandler that calls into a  RateReporter.",1,51
742,"public static Meter newMeter(ScheduledExecutorService tickThread, String eventType, TimeUnit rateUnit) {
        return new Meter(tickThread, eventType, rateUnit, Clock.DEFAULT);
    }",Creates a new  Meter.,1,50
743,"public StreamGraph getStreamGraph(String jobName, boolean clearTransformations) {
		StreamGraph streamGraph = getStreamGraphGenerator().setJobName(jobName).generate();
		if (clearTransformations) {
			this.transformations.clear();
		}
		return streamGraph;
	}",Getter of the  org.apache.flink.streaming.api.graph.StreamGraph StreamGraph of the streaming job with the option to clear previously registered  Transformation transformations.,1,70
744,"public synchronized Collection<String> getPropertyNames() {
        if (properties == null) {
            return Collections.emptySet();
        }
        return Collections.unmodifiableSet(new HashSet<String>(properties.keySet()));
    }",Returns an unmodifiable collection of all the property names that are set.,1,68
745,"public Checker createChecker(Configuration moduleConfig)
            throws Exception {
        if (checkstyleModules == null) {
            checkstyleModules = CheckUtil.getCheckstyleModules();
        }

        final String name = moduleConfig.getName();
        ModuleCreationOption moduleCreationOption = ModuleCreationOption.IN_CHECKER;

        for (Class<?> moduleClass : checkstyleModules) {
            if (moduleClass.getSimpleName().equals(name)
                    || moduleClass.getSimpleName().equals(name + ""Check"")) {
                if (ModuleReflectionUtils.isCheckstyleCheck(moduleClass)
                        || ModuleReflectionUtils.isTreeWalkerFilterModule(moduleClass)) {
                    moduleCreationOption = ModuleCreationOption.IN_TREEWALKER;
                }
                break;
            }
        }

        return createChecker(moduleConfig, moduleCreationOption);
    }",Creates  Checker instance based on the given  Configuration instance.,1,198
746,"public static String utf8ToString(boolean zeroTerminated, ByteBuffer source) throws CharConversionException {
        final StringBuilder sb = new StringBuilder();
        while (source.hasRemaining()) {
            final int c0 = source.get() & 0xff;
            if (zeroTerminated && c0 == 0) {
                break;
            }
            switch (c0 >> 4) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7: {
                    /* 0xxxxxxx */
                    sb.append((char) c0);
                    break;
                }
                case 12:
                case 13: {
                    /* 110x xxxx 10xx xxxx */
                    final int c1 = source.get();
                    if ((c1 & 0xC0) != 0x80) {
                        throw new CharConversionException();
                    }
                    sb.append((char) (((c0 & 0x1F) << 6) | (c1 & 0x3F)));
                    break;
                }
                case 14: {
                    /* 1110 xxxx 10xx xxxx 10xx xxxx */
                    final int c1 = source.get();
                    final int c2 = source.get();
                    if (((c1 & 0xC0) != 0x80) || ((c2 & 0xC0) != 0x80)) {
                        throw new CharConversionException();
                    }
                    sb.append((char) (((c0 & 0x0F) << 12) | ((c1 & 0x3F) << 6) | (c2 & 0x3F)));
                    break;
                }
                default: {
                    /* 10xx xxxx, 1111 xxxx */
                    throw new CharConversionException();
                }
            }
        }
        return sb.toString();
    }",Converts a byte buffer of UTF-8 data to a String.,1,496
747,"private static List<AbstractDbArtifact> map(final List<GridFSDBFile> dbFiles) {
        return dbFiles.stream().map(MongoDBArtifactStore::map).collect(Collectors.toList());
    }",Maps a list of  GridFSDBFile to a list of  AbstractDbArtifacts.,1,53
748,"default boolean execute(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode[] argsIncludingReceiver) {
        if (isSignaturePolymorphic()) {
            return applyPolymorphic(b, targetMethod, receiver, argsIncludingReceiver);
        } else if (receiver != null) {
            assert !targetMethod.isStatic();
            assert argsIncludingReceiver.length > 0;
            if (argsIncludingReceiver.length == 1) {
                return apply(b, targetMethod, receiver);
            } else if (argsIncludingReceiver.length == 2) {
                return apply(b, targetMethod, receiver, argsIncludingReceiver[1]);
            } else if (argsIncludingReceiver.length == 3) {
                return apply(b, targetMethod, receiver, argsIncludingReceiver[1], argsIncludingReceiver[2]);
            } else if (argsIncludingReceiver.length == 4) {
                return apply(b, targetMethod, receiver, argsIncludingReceiver[1], argsIncludingReceiver[2], argsIncludingReceiver[3]);
            } else if (argsIncludingReceiver.length == 5) {
                return apply(b, targetMethod, receiver, argsIncludingReceiver[1], argsIncludingReceiver[2], argsIncludingReceiver[3], argsIncludingReceiver[4]);
            } else {
                return defaultHandler(b, targetMethod, receiver, argsIncludingReceiver);
            }
        } else {
            assert targetMethod.isStatic();
            if (argsIncludingReceiver.length == 0) {
                return apply(b, targetMethod, null);
            } else if (argsIncludingReceiver.length == 1) {
                return apply(b, targetMethod, null, argsIncludingReceiver[0]);
            } else if (argsIncludingReceiver.length == 2) {
                return apply(b, targetMethod, null, argsIncludingReceiver[0], argsIncludingReceiver[1]);
            } else if (argsIncludingReceiver.length == 3) {
                return apply(b, targetMethod, null, argsIncludingReceiver[0], argsIncludingReceiver[1], argsIncludingReceiver[2]);
            } else if (argsIncludingReceiver.length == 4) {
                return apply(b, targetMethod, null, argsIncludingReceiver[0], argsIncludingReceiver[1], argsIncludingReceiver[2], argsIncludingReceiver[3]);
            } else if (argsIncludingReceiver.length == 5) {
                return apply(b, targetMethod, null, argsIncludingReceiver[0], argsIncludingReceiver[1], argsIncludingReceiver[2], argsIncludingReceiver[3], argsIncludingReceiver[4]);
            } else {
                return defaultHandler(b, targetMethod, receiver, argsIncludingReceiver);
            }

        }
    }",Executes this plugin against a set of invocation arguments.,1,707
749,"public boolean doesConstrain(QName type) {
        return type.equals(constrains);
    }",Whether this intent constrains the specified type.,1,27
750,"public TimeValue getBackgroundPersistInterval() {
        return backgroundPersistInterval;
    }",The background persistence interval,1,19
751,"public static <T> T findResult(Map<?, ?> self, Closure<T> closure) {
        for (Map.Entry<?, ?> entry : self.entrySet()) {
            T result = callClosureForMapEntry(closure, entry);
            if (result != null) {
                return result;
            }
        }
        return null;
    }","Returns the first non-null closure result found by passing each map entry to the closure, otherwise null is returned.",1,111
752,"public static Window getfocusStage() {
        Window fStage = null;
        for (Window win : windows) {
            if (win.isFocused()) {
                fStage = win;
            }
        }
        return fStage;
    }",Gets the Window with focus in the list,1,73
753,"public static double get(MetricKey<OperationMetric> key, ASTMethodOrConstructorDeclaration node, MetricVersion version) {
        if (!key.getCalculator().supports(node)) {
            return Double.NaN;
        }

        MetricVersion safeVersion = (version == null) ? Version.STANDARD : version;

        return TOP_LEVEL_PACKAGE.compute(key, node, false, safeVersion);
    }",Computes a metric identified by its key on a operation AST node.,1,110
754,"public static FsMasterResource createLeaderFileSystemMasterFromJournalCopy() throws Exception {
    String masterJournal = ServerConfiguration.get(PropertyKey.MASTER_JOURNAL_FOLDER);
    File tmpDirFile = Files.createTempDir();
    tmpDirFile.deleteOnExit();
    String tempDir = tmpDirFile.getAbsolutePath();
    FileUtils.copyDirectory(new File(masterJournal), new File(tempDir));
    return createFileSystemMasterFromJournal(true, null, tempDir);
  }","Creates a new leader  FileSystemMaster from a copy of the journal along with its dependencies, and returns the master registry and the journal system.",1,109
755,"public static boolean intersectPolygons (Polygon p1, Polygon p2, Polygon overlap) {
		//reusable points to trace edges around polygon
		floatArray2.clear();
		floatArray.clear();
		floatArray2.addAll(p1.getTransformedVertices());
		if (p1.getVertices().length == 0 || p2.getVertices().length == 0) {
			return false;
		}
		for (int i = 0; i < p2.getTransformedVertices().length; i += 2) {
			ep1.set(p2.getTransformedVertices()[i], p2.getTransformedVertices()[i+1]);
			//wrap around to beginning of array if index points to end;
			if (i < p2.getTransformedVertices().length - 2) {
				ep2.set(p2.getTransformedVertices()[i + 2], p2.getTransformedVertices()[i + 3]);
			} else {
				ep2.set(p2.getTransformedVertices()[0], p2.getTransformedVertices()[1]);
			}
			if (floatArray2.size == 0) {
				return false;
			}
			s.set(floatArray2.get(floatArray2.size - 2), floatArray2.get(floatArray2.size - 1));
			for (int j = 0; j < floatArray2.size; j += 2) {
				e.set(floatArray2.get(j), floatArray2.get(j + 1));
				//determine if point is inside clip edge
				if (Intersector.pointLineSide(ep2, ep1, e) > 0) {
					if (!(Intersector.pointLineSide(ep2, ep1, s) > 0)) {
						Intersector.intersectLines(s, e, ep1, ep2, ip);
						if (floatArray.size >= 2) {
							if (!((floatArray.get(floatArray.size - 2) == ip.x) && (floatArray.get(floatArray.size - 1) == ip.y))) {
								floatArray.add(ip.x);
								floatArray.add(ip.y);
							}
						} else {
							floatArray.add(ip.x);
							floatArray.add(ip.y);
						}
					}
					floatArray.add(e.x);
					floatArray.add(e.y);
				} else if (Intersector.pointLineSide(ep2, ep1, s) > 0) {
					Intersector.intersectLines(s, e, ep1, ep2, ip);
					floatArray.add(ip.x);
					floatArray.add(ip.y);
				}
				s.set(e.x, e.y);
			}
			floatArray2.clear();
			floatArray2.addAll(floatArray);
			floatArray.clear();
		}
		if (! (floatArray2.size == 0)) {
			overlap.setVertices(floatArray2.toArray());
			return true;
		} else {
			return false;
		}
	}",Intersects two resulting polygons with the same winding and sets the overlap polygon resulting from the intersection.,1,789
756,"public double get() {
    double se = ((double) tp) / (tp + fn); // sensitivity
    double sp = ((double) tn) / (tn + fp); // specificity
    
    return se * sp;
  }",Calculates the fitness corresponding to this evaluation.,1,81
757,"public static Blob toBlob(ListOfJsonTemplate template) {
    return toBlob(template.getList());
  }",Convert a  ListOfJsonTemplate to a  Blob of the JSON string.,1,31
758,"public JIRAIssue remove(JIRAIssue jiraIssue) throws SystemException {
		return super.remove(jiraIssue);
	}",Removes the j i r a issue from the database.,1,31
759,"public final Control getButtonRemove() {
		return (Control) getUIControl(BIND_ID_REMOVE);
	}",Return the 'Remove' control.,1,28
760,"public List<String> clearCache(Collection<String> repositories) throws HistoryException {
        List<String> clearedRepos = new ArrayList<>();
        HistoryCache cache = historyCache;

        if (!useCache()) {
            return clearedRepos;
        }

        for (Repository r : getReposFromString(repositories)) {
            try {
                cache.clear(r);
                clearedRepos.add(r.getDirectoryName());
                LOGGER.log(Level.INFO,
                        ""History cache for {0} cleared."", r.getDirectoryName());
            } catch (HistoryException e) {
                LOGGER.log(Level.WARNING,
                        ""Clearing history cache for repository {0} failed: {1}"",
                        new Object[]{r.getDirectoryName(), e.getLocalizedMessage()});
            }
        }

        return clearedRepos;
    }",Remove history data for a list of repositories.,1,212
761,"private Description matchArguments(VisitorState state, final Symbol.MethodSymbol calleeSymbol,
                                     Iterator<? extends ExpressionTree> actualParams) {
    Symbol.VarSymbol lastFormalParam = null;
    for (Symbol.VarSymbol formalParam : calleeSymbol.getParameters()) {
      lastFormalParam = formalParam;
      // It appears that for some reason, the Tree for implicit Enum constructors
      // includes an invocation of super(), but the target symbol has the signature
      // Enum(String, int). This resulted in NoSuchElementExceptions.
      // It is safe to return no match in this case, since even if this could happen
      // in another scenario, a non-existent actual parameter can't possibly
      // be a non-constant parameter for a @CompileTimeConstant formal.
      if (!actualParams.hasNext()) {
        return Description.NO_MATCH;
      }
      ExpressionTree actualParam = actualParams.next();
      if (hasCompileTimeConstantAnnotation(
          state, formalParam)) {
        if (!compileTimeConstExpressionMatcher.matches(actualParam, state)) {
          return handleMatch(actualParam, state);
        }
      }
    }

    // If the last formal parameter is a vararg and has the @CompileTimeConstant annotation,
    // we need to check the remaining args as well.
    if (lastFormalParam == null || (lastFormalParam.flags() & Flags.VARARGS) == 0) {
      return Description.NO_MATCH;
    }
    if (!hasCompileTimeConstantAnnotation(
        state, lastFormalParam)) {
      return Description.NO_MATCH;
    }
    while (actualParams.hasNext()) {
      ExpressionTree actualParam = actualParams.next();
      if (!compileTimeConstExpressionMatcher.matches(actualParam, state)) {
        return handleMatch(actualParam, state);
      }
    }
    return Description.NO_MATCH;
  }",Matches formal parameters with  com.google.errorprone.annotations.CompileTimeConstant annotations against corresponding actual parameters.,1,346
762,"private Message doReceive(MessageConsumer consumer, long timeout) throws JMSException {
		if (timeout == RECEIVE_TIMEOUT_NO_WAIT) {
			return consumer.receiveNoWait();
		}
		else if (timeout > 0) {
			return consumer.receive(timeout);
		}
		else {
			return consumer.receive();
		}
	}",Actually receive a message from the given consumer.,1,99
763,"public Attachment remove(Attachment attachment) throws SystemException {
		return super.remove(attachment);
	}",Removes the attachment from the database.,1,31
764,"public SimpleFeature buildFeature(String id) {
        // ensure id
        if (id == null) {
            id = SimpleFeatureBuilder.createDefaultFeatureId();
        }

        Object[] values = this.values;
        Map<Object, Object>[] userData = this.userData;
        Map<Object, Object> featureUserData = this.featureUserData;
        reset();
        SimpleFeature sf = factory.createSimpleFeature(values, featureType, id);

        // handle the per attribute user data
        if (userData != null) {
            for (int i = 0; i < userData.length; i++) {
                if (userData[i] != null) {
                    sf.getProperty(featureType.getDescriptor(i).getName())
                            .getUserData()
                            .putAll(userData[i]);
                }
            }
        }

        // handle the feature wide user data
        if (featureUserData != null) {
            sf.getUserData().putAll(featureUserData);
        }

        return sf;
    }",Builds the feature.,1,276
765,"public static XIntegerListValue addIntegerToList(XID actorID, XField field, int integer) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XIntegerListValue) {
			XIntegerListValue listValue = (XIntegerListValue)value;
			
			// manipulate the contained list
			listValue = addIntegerToList(listValue, listValue.size(), integer);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Appends a new Integer to end of the  XIntegerListValue of the given  XField,1,153
766,"private SwitchCompat getCanEditSwitch() {
        return (SwitchCompat) getView().findViewById(R.id.canEditSwitch);
    }",Shortcut to access  SwitchCompat R.id.canEditSwitch,1,34
767,"public SWTBotMenu menu(final String text) {
		return menu(text, false, 0);
	}",Gets the menu item matching the given text.,1,33
768,"public int search() {
        RuntimeEnvironment env = RuntimeEnvironment.getInstance();
        return search(
                env.hasProjects() ? env.getProjects() : new ArrayList<Project>(),
                new File(env.getDataRootFile(), IndexDatabase.INDEX_DIR));
    }",Execute a search without authorization.,1,79
769,"public OrchestrationConfiguration getOrchestrationConfiguration() {
        return new OrchestrationConfiguration(getName(), new ZookeeperRegistryCenter(registryCenter), overwrite);
    }",Get orchestration master-slave rule configuration from yaml.,1,37
770,"protected PreparedStatementSetter newArgTypePreparedStatementSetter(Object[] args, int[] argTypes) {
		return new ArgumentTypePreparedStatementSetter(args, argTypes);
	}",Create a new arg-type-based PreparedStatementSetter using the args and types passed in.,1,39
771,"protected Event convertMessage(Message message) {
        String name = message.toString();
        int pos = name.indexOf('|');
        return new NamedEvent(name.substring(pos + 1));
    }",Convert the message contents to a cache event.,1,65
772,"public IDomain getDomain() {
		return domain;
	}",Returns the  Domain that was previously injected into this editor.,1,19
773,"public final List<JPQLQueryProblem> problems() {
		return problems;
	}",Returns the list of  JPQLQueryProblem JPQLQueryProblems describing issues found in the query.,1,24
774,"public void getBarBounds(BarEntry e, RectF outputRect){

        RectF bounds = outputRect;

        IBarDataSet set = mData.getDataSetForEntry(e);

        if (set == null) {
            bounds.set(Float.MIN_VALUE, Float.MIN_VALUE, Float.MIN_VALUE, Float.MIN_VALUE);
            return;
        }

        float y = e.getY();
        float x = e.getX();

        float barWidth = mData.getBarWidth();

        float left = x - barWidth / 2f;
        float right = x + barWidth / 2f;
        float top = y >= 0 ? y : 0;
        float bottom = y <= 0 ? y : 0;

        bounds.set(left, top, right, bottom);

        getTransformer(set.getAxisDependency()).rectValueToPixel(outputRect);

    }",The passed outputRect will be assigned the values of the bounding box of the specified Entry in the specified DataSet.,1,259
775,"public float getScale() {
        return this.j2dScale;
    }",Pixel drawing j2dScale.,1,21
776,"public static Timer newTimer(Class<?> klass,
                                       String name,
                                       TimeUnit durationUnit,
                                       TimeUnit rateUnit) {
        return DEFAULT_REGISTRY.newTimer(klass, name, durationUnit, rateUnit);
    }",Creates a new  com.yammer.metrics.core.Timer and registers it under the given class and name.,1,59
777,"public static StrLookup<String> systemPropertiesLookup() {
        Properties systemProperties = null;

        try {
            systemProperties = System.getProperties();
        } catch (final SecurityException ex) {
            // Squelched.  All lookup(String) will return null.
        }

        Properties properties = copyProperties(systemProperties);
        @SuppressWarnings(""unchecked"") // System property keys and values are always Strings
        final Map<String, String> propertiesMap = (Map) properties;

        return new MapStrLookup<String>(propertiesMap);
    }",Returns a new lookup which uses a copy of the current  System#getProperties() System properties.,1,128
778,"public synchronized byte[] getDigest() {
        if (digest == null) {
            final char[] content = data();
            final byte[] bytes = new byte[content.length * 2];

            for (int i = 0; i < content.length; i++) {
                bytes[i * 2]     = (byte)  (content[i] & 0x00ff);
                bytes[i * 2 + 1] = (byte) ((content[i] & 0xff00) >> 8);
            }

            try {
                final MessageDigest md = MessageDigest.getInstance(""SHA-1"");
                if (name != null) {
                    md.update(name.getBytes(StandardCharsets.UTF_8));
                }
                if (base != null) {
                    md.update(base.getBytes(StandardCharsets.UTF_8));
                }
                if (getURL() != null) {
                    md.update(getURL().toString().getBytes(StandardCharsets.UTF_8));
                }
                digest = md.digest(bytes);
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException(e);
            }
        }
        return digest;
    }",Get a message digest for this source.,1,353
779,"public static Object sum(Iterator<Object> self, Object initialValue, Closure closure) {
        return sum(toList(self), initialValue, closure, false);
    }",Sums the result of applying a closure to each item of an Iterator to some initial value.,1,52
780,"TaskDef getDynamicTaskDefinition(WorkflowTask taskToSchedule) throws TerminateWorkflowException { //TODO this is a common pattern in code base can be moved to DAO
        return Optional.ofNullable(metadataDAO.getTaskDef(taskToSchedule.getName()))
                .orElseThrow(() -> {
                    String reason = String.format(""Invalid task specified.  Cannot find task by name %s in the task definitions"",
                            taskToSchedule.getName());
                    return new TerminateWorkflowException(reason);
                });
    }",This method gets the TaskDefinition from the MetadataDao based on the  WorkflowTask#getName(),1,92
781,"public static Field field(String name, String target) {
		Assert.hasText(target, ""Target must not be null or empty!"");
		return new AggregationField(name, target);
	}",Creates a  Field with the given  name and  target.,1,51
782,"public static UriBuilder fromPath(String path) throws IllegalArgumentException
   {
      UriBuilder b = newInstance();
      b.replacePath(path);
      return b;
   }",Create a new instance representing a relative URI initialized from a,1,50
783,"public List<WebElement> getAllMethodsMarkedDefinedStatus(JunitMethodsState methodState) {
    List<WebElement> definedMethods = null;
    switch (methodState) {
      case PASSED:
        definedMethods = passedMethods;
        break;
      case FAILED:
        definedMethods = failedMethods;
        break;
      case IGNORED:
        definedMethods = ignoredMethods;
        break;
    }
    return definedMethods;
  }",Get all defined methods from result tree and return as list WebElements.,1,104
784,"public Integer termId()
    {
        return termId;
    }",Get the current term id at which a publication will start.,1,20
785,"public List<Note> getMatchingNotes(String pattern) {
		
		// Getting sorting criteria from preferences
		SharedPreferences prefs = PreferenceManager
				.getDefaultSharedPreferences(ctx);
		String sort_column = prefs.getString(Constants.PREF_SORTING_COLUMN,
				KEY_TITLE);

		// Select All Query
		String selectQuery = ""SELECT * FROM "" + TABLE_NOTES + "" WHERE ""
				+ KEY_TITLE + "" LIKE '%"" + pattern + ""%' "" + "" OR ""
				+ KEY_CONTENT + "" LIKE '%"" + pattern + ""%' "" + "" ORDER BY ""
				+ sort_column;
		
		return getNotes(selectQuery);
	}",Getting notes matching pattern with title or content text,1,158
786,"public CountDownLatch preparePeriod(final MediaPeriod mediaPeriod, final long positionUs) {
    final ConditionVariable prepareCalled = new ConditionVariable();
    final CountDownLatch preparedCountDown = new CountDownLatch(1);
    runOnPlaybackThread(
        new Runnable() {
          @Override
          public void run() {
            mediaPeriod.prepare(
                new MediaPeriod.Callback() {
                  @Override
                  public void onPrepared(MediaPeriod mediaPeriod) {
                    preparedCountDown.countDown();
                  }

                  @Override
                  public void onContinueLoadingRequested(MediaPeriod source) {
                    // Do nothing.
                  }
                },
                positionUs);
            prepareCalled.open();
          }
        });
    prepareCalled.block();
    return preparedCountDown;
  }","Calls  MediaPeriod#prepare(MediaPeriod.Callback, long) on the playback thread and blocks until the method has been called.",1,193
787,"public FutureRecordMetadata tryAppend(byte[] key, byte[] value, CompressionType compression, Callback callback) {
        if (!this.records.hasRoomFor(key, value)) {
            return null;
        } else {
            this.records.append(0L, key, value, compression);
            FutureRecordMetadata future = new FutureRecordMetadata(this.produceFuture, this.recordCount);
            if (callback != null)
                thunks.add(new Thunk(callback, this.recordCount));
            this.recordCount++;
            return future;
        }
    }",Append the record to the current record set and return the relative offset within that record set,1,159
788,"public CreateDirectoryOptions build() {
      return new CreateDirectoryOptions(this);
    }",Builds a new instance of  CreateDirectoryOptions.,1,24
789,"public JcaTlsCrypto create(SecureRandom keyRandom, SecureRandom nonceRandom)
    {
        return new JcaTlsCrypto(helper, keyRandom, nonceRandom);
    }",Create a new JcaTlsCrypto using the current builder configuration.,1,39
790,"public Collection<Rule> getRules() {
        return Collections.unmodifiableList(new ArrayList<Rule>(rules));
    }",Returns a Collection of the rules in the packet.,1,35
791,"public Object caseQuery( Query object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Query'.,1,25
792,"public Histogram newHistogram(Class<?> klass,
                                        String name,
                                        String scope,
                                        boolean biased) {
        return newHistogram(createName(klass, name, scope), biased);
    }","Creates a new  Histogram and registers it under the given class, name, and scope.",1,58
793,"public static int encodeLatitude(double latitude) {
    GeoUtils.checkLatitude(latitude);
    // the maximum possible value cannot be encoded without overflow
    if (latitude == 90.0D) {
      latitude = Math.nextDown(latitude);
    }
    return (int) Math.floor(latitude / LATITUDE_DECODE);
  }",Quantizes double (64 bit) latitude into 32 bits (rounding down: in the direction of -90),1,79
794,"protected boolean isAllowed(InetAddress address)
    {
        boolean allowed = _set.test(address);
        if (LOG.isDebugEnabled())
            LOG.debug(""{} {} {}"", this, allowed ? ""allowed"" : ""denied"", address);
        return allowed;
    }",Check sif specified address is allowed by current IPAccess rules.,1,81
795,"protected List<Metric> serializeSnapshot(String name, Snapshot snapshot) {
    List<Metric> metrics = new ArrayList<Metric>();

    metrics.add(serializeValue(name, snapshot.getMean(), ""mean""));
    metrics.add(serializeValue(name, snapshot.getMin(), ""min""));
    metrics.add(serializeValue(name, snapshot.getMax(), ""max""));
    metrics.add(serializeValue(name, snapshot.getMedian(), ""median""));
    metrics.add(serializeValue(name, snapshot.get75thPercentile(), ""75percentile""));
    metrics.add(serializeValue(name, snapshot.get95thPercentile(), ""95percentile""));
    metrics.add(serializeValue(name, snapshot.get99thPercentile(), ""99percentile""));
    metrics.add(serializeValue(name, snapshot.get999thPercentile(), ""999percentile""));

    return metrics;
  }",Extracts metrics from  com.codahale.metrics.Snapshot.,1,244
796,"public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type) {
		return doesNotHaveBean(type, Scope.INCLUDE_ANCESTORS);
	}",Verifies that the application context (or ancestors) does not contain any beans of the given type.,1,36
797,"public Socks5AuthScheme authScheme() {
        return authScheme;
    }",Returns the  Socks5AuthScheme of this  Socks5InitResponse,1,19
798,"private String findDefaultMatch(String actionRef, String outcome) {
        String returnViewId = null;

        Assert.assert_it(null != caseListMap);

        List caseList = (List)caseListMap.get(""*""); 

        if (caseList == null) {
            return null;
        }

        // We need to evaluate actionref/outcome in the follow
        // order:  1)elements specifying both from-action-ref and from-outcome
        // 2) elements specifying only from-outcome
        // 3) elements specifying only from-action-ref
        // 4) elements where both from-action-ref and from-outcome are null

        returnViewId = determineViewFromActionRefOutcome(caseList, actionRef, outcome);
        return returnViewId;
    }","This method will extract the cases for which a from-view-id is an asterisk """".",1,132
799,"public static Parser.Charset charset(String charset) {
		return new Parser.Charset(charset);
	}",Shortcut for  new Parser.Charset(charset).,1,33
800,"public Attributes getUserAttributes() {
        Attributes attrs = new BasicAttributes(true);
		Attribute attr;
		PropertyIterator iter = getArguments().iterator();

		while (iter.hasNext()) {
			Argument item = (Argument) iter.next().getObjectValue();
			attr = attrs.get(item.getName());
			if (attr == null) {
				attr = getBasicAttribute(item.getName(), item.getValue());
			} else {
				attr.add(item.getValue());
			}
			attrs.put(attr);
		}
		return attrs;
	}","Collect all the values from the table (Arguments), using this create the",1,180
801,"public Status remove(Status status) throws SystemException {
		return super.remove(status);
	}",Removes the status from the database.,1,31
802,"public URI toUri() {
        return toUri(true);
    }",Returns the absolute  URI representation of this  TruffleFile.,1,22
803,"public static int indexOf(CharSequence seq, int searchChar) {
        if (isEmpty(seq)) {
            return INDEX_NOT_FOUND;
        }
        return StringUtils.indexOfSequence(seq, searchChar, 0);
    }","Finds the first index within a CharSequence, handling  null.",1,61
804,"public static PayPalAccountNonce fromJson(String json) throws JSONException {
        PayPalAccountNonce payPalAccountNonce = new PayPalAccountNonce();
        payPalAccountNonce.fromJson(PayPalAccountNonce.getJsonObjectForType(API_RESOURCE_KEY, json));
        return payPalAccountNonce;
    }",Convert an API response to a  PayPalAccountNonce.,1,59
805,"public static File getProjectFile(VCSContext context){
        if (context == null) return null;
        Node [] nodes = context.getElements().lookupAll(Node.class).toArray(new Node[0]);
        File root = null;
        for (Node node : nodes) {
            Node tmpNode = node;
            Project project = (Project) tmpNode.getLookup().lookup(Project.class);

            while (project == null) {
                tmpNode = tmpNode.getParentNode();
                if (tmpNode ==  null) {
                    Mercurial.LOG.log(Level.FINE, ""getParent(): No project for {0}"",  // NOI18N
                        node.toString());
                    break;
                }
                project = (Project) tmpNode.getLookup().lookup(Project.class);
            } 
            if (project != null) {
                FileObject fo = project.getProjectDirectory();
                root = FileUtil.toFile(fo);
                return root;
            }
        }
        return root;
    }",Returns File object for Project Directory,1,290
806,"public static boolean equalTree(XBaseObject objectA, XBaseObject objectB) {
		
		if(objectA == null && objectB == null) {
			return true;
		}
		
		// one of them is null, the other isn't
		if(objectA == null || objectB == null) {
			return false;
		}
		
		if(!objectA.getID().equals(objectB.getID())) {
			return false;
		}
		
		for(XID fieldId : objectA) {
			
			XBaseField fieldA = objectA.getField(fieldId);
			XBaseField fieldB = objectB.getField(fieldId);
			
			if(fieldB == null) {
				return false;
			}
			
			if(!equalTree(fieldA, fieldB)) {
				return false;
			}
			
		}
		
		for(XID fieldId : objectB) {
			
			if(objectA.getField(fieldId) == null) {
				return false;
			}
			
		}
		
		return true;
	}","Check if two  XBaseObjects have the same  XID and the same  XBaseFields as defined by  #equalTree(XBaseField, XBaseField).",1,288
807,"public int scanNext(final AvailabilityHandler handler, final int mtuLength)
    {
        int length = 0;

        if (!isComplete())
        {
            final int tail = tailVolatile();
            final int offset = this.offset;
            if (tail > offset)
            {
                int padding = 0;

                do
                {
                    int alignedFrameLength = align(waitForFrameLength(offset + length), FRAME_ALIGNMENT);

                    if (PADDING_FRAME_TYPE == frameType(offset + length))
                    {
                        padding = alignedFrameLength - alignedHeaderLength;
                        alignedFrameLength = alignedHeaderLength;
                    }

                    length += alignedFrameLength;

                    if (length > mtuLength)
                    {
                        length -= alignedFrameLength;
                        padding = 0;
                        break;
                    }
                }
                while ((offset + length + padding) < tail);

                if (length > 0)
                {
                    this.offset += (length + padding);
                    handler.onAvailable(logBuffer(), offset, length);
                }
            }
        }

        return length;
    }",Scan forward in the buffer for available frames limited by what will fit in mtuLength.,1,317
808,"private ReplicaInfo getReplicaInfo(ExtendedBlock b)
      throws ReplicaNotFoundException {
    ReplicaInfo info = volumeMap.get(b.getBlockPoolId(), b.getLocalBlock());
    if (info == null) {
      throw new ReplicaNotFoundException(
          ReplicaNotFoundException.NON_EXISTENT_REPLICA + b);
    }
    return info;
  }",Get the meta info of a block stored in volumeMap.,1,89
809,"public EvictionPlan freeSpace(long bytesToBeAvailable, BlockStoreLocation location)
      throws IOException {
    List<Pair<Long, BlockStoreLocation>> toMove = new ArrayList<Pair<Long, BlockStoreLocation>>();
    List<Long> toEvict = new ArrayList<Long>();
    EvictionPlan plan = new EvictionPlan(toMove, toEvict);
    StorageDir candidateDir = cascadingEvict(bytesToBeAvailable, location, plan);

    if (candidateDir == null) {
      return null;
    }
    if (plan.isEmpty()) {
      return plan;
    }

    // assure all blocks are in the store, if not, remove from plan and lru cache
    Iterator<Pair<Long, BlockStoreLocation>> moveIt = plan.toMove().iterator();
    while (moveIt.hasNext()) {
      long id = moveIt.next().getFirst();
      if (!mMetaManager.hasBlockMeta(id)) {
        mLRUCache.remove(id);
        moveIt.remove();
      }
    }
    Iterator<Long> evictIt = plan.toEvict().iterator();
    while (evictIt.hasNext()) {
      long id = evictIt.next();
      if (!mMetaManager.hasBlockMeta(id)) {
        mLRUCache.remove(id);
        evictIt.remove();
      }
    }

    return EvictorUtils.legalCascadingPlan(bytesToBeAvailable, plan, mMetaManager) ? plan : null;
  }",A recursive implementation of cascading LRU eviction.,1,373
810,"public synchronized Admin getHBaseAdmin()
  throws IOException {
    if (hbaseAdmin == null){
      hbaseAdmin = new HBaseAdminForTests(getConfiguration());
    }
    return hbaseAdmin;
  }",Returns a Admin instance.,1,57
811,"static public Date stringToDate(String s) {
        try {
            return ISO8601_FORMAT.get().parse(s);
        } catch (ParseException e) {
            return null;
        }
    }",Parse an ISO 8601 formatted string into a Java Date.,1,60
812,"public static Parser.Range range(char from, char to) {
		return new Parser.Range(from, to);
	}","Shortcut for  new Parser.Range(from, to).",1,41
813,"public String sessionOptionsToJson() {
        if(sessionOptionsConfigProto == null)
            return null;
        try {
            return org.nd4j.shade.protobuf.util.JsonFormat.printer().print(sessionOptionsConfigProto);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }",Write out the session options used by this  org.nd4j.tensorflow.conversion.graphrunner.GraphRunner a s a json string using the  org.nd4j.shade.protobuf.util.JsonFormat,1,91
814,"public Set<String> getEntityNamesByGroup(String groupName) {
        Map<String, String> gc = getGroupCache();
        Set<String> enames = FastSet.newInstance();

        if (groupName == null || groupName.length() <= 0) return enames;
        if (gc == null || gc.size() == 0) return enames;
        for (Map.Entry<String, String> entry: gc.entrySet()) {
            if (groupName.equals(entry.getValue())) enames.add(entry.getKey());
        }
        return enames;
    }",Creates a Set with names of all of the entities for a given group,1,180
816,"protected InitBinderDataBinderFactory createDataBinderFactory(List<InvocableHandlerMethod> binderMethods)
			throws Exception {

		return new ServletRequestDataBinderFactory(binderMethods, getWebBindingInitializer());
	}",Template method to create a new InitBinderDataBinderFactory instance.,1,41
818,"public ProjectedDocumentRevision buildProjected() {
        return new ProjectedDocumentRevision(docId, revId, deleted, attachments, body, database);
    }",Builds and returns the  ProjectedDocumentRevision for this builder.,1,39
819,"public UI getRootForRequest(WrappedRequest request)
            throws RootRequiresMoreInformationException {
        UI uI = UI.getCurrent();
        if (uI != null) {
            return uI;
        }
        Integer rootId = getRootId(request);

        synchronized (this) {
            BrowserDetails browserDetails = request.getBrowserDetails();
            boolean hasBrowserDetails = browserDetails != null
                    && browserDetails.getUriFragment() != null;

            uI = uIs.get(rootId);

            if (uI == null && isRootPreserved()) {
                // Check for a known root
                if (!retainOnRefreshRoots.isEmpty()) {

                    Integer retainedRootId;
                    if (!hasBrowserDetails) {
                        throw new RootRequiresMoreInformationException();
                    } else {
                        String windowName = browserDetails.getWindowName();
                        retainedRootId = retainOnRefreshRoots.get(windowName);
                    }

                    if (retainedRootId != null) {
                        rootId = retainedRootId;
                        uI = uIs.get(rootId);
                    }
                }
            }

            if (uI == null) {
                // Throws exception if root can not yet be created
                uI = getRoot(request);

                // Initialize some fields for a newly created root
                if (uI.getApplication() == null) {
                    uI.setApplication(this);
                }
                if (uI.getRootId() < 0) {

                    if (rootId == null) {
                        // Get the next id if none defined
                        rootId = Integer.valueOf(nextRootId++);
                    }
                    uI.setRootId(rootId.intValue());
                    uIs.put(rootId, uI);
                }
            }

            // Set thread local here so it is available in init
            UI.setCurrent(uI);

            if (!initedRoots.contains(rootId)) {
                boolean initRequiresBrowserDetails = isRootPreserved()
                        || !uI.getClass()
                                .isAnnotationPresent(EagerInit.class);
                if (!initRequiresBrowserDetails || hasBrowserDetails) {
                    uI.doInit(request);

                    // Remember that this root has been initialized
                    initedRoots.add(rootId);

                    // init() might turn on preserve so do this afterwards
                    if (isRootPreserved()) {
                        // Remember this root
                        String windowName = request.getBrowserDetails()
                                .getWindowName();
                        retainOnRefreshRoots.put(windowName, rootId);
                    }
                }
            }
        } // end synchronized block

        return uI;
    }",Finds the  UI to which a particular request belongs.,1,603
820,"public static String replace(final String text, String searchString, final String replacement) {
		if (isEmpty(text) || isEmpty(searchString) || replacement == null) {
			return text;
		}
		int start = 0;
		int end = text.indexOf(searchString, start);
		if (end == INDEX_NOT_FOUND) {
			return text;
		}
		final int replLength = searchString.length();
		int increase = replacement.length() - replLength;
		increase = (increase < 0 ? 0 : increase) * 16;
		final StringBuilder buf = new StringBuilder(text.length() + increase);
		while (end != INDEX_NOT_FOUND) {
			buf.append(text.substring(start, end)).append(replacement);
			start = end + replLength;
			end = text.indexOf(searchString, start);
		}
		buf.append(text.substring(start));
		return buf.toString();
	}","The modified implementation is based on StringUtils#replace(String text, String searchString, String replacement, int max), Apache commons-lang3-3.6 Replaces all occurrences of a String within another String. A  null reference passed to this method is a no-op.",1,298
821,"protected InfiniteCanvasViewer getViewer() {
		return (InfiniteCanvasViewer) getHost().getRoot().getViewer();
	}",Returns the  InfiniteCanvasViewer in which to open the creation menu.,1,33
822,"private static int getMaxInputSize(MediaCodecInfo codecInfo, Format format) {
    if (format.maxInputSize != Format.NO_VALUE) {
      // The format defines an explicit maximum input size. Add the total size of initialization
      // data buffers, as they may need to be queued in the same input buffer as the largest sample.
      int totalInitializationDataSize = 0;
      int initializationDataCount = format.initializationData.size();
      for (int i = 0; i < initializationDataCount; i++) {
        totalInitializationDataSize += format.initializationData.get(i).length;
      }
      return format.maxInputSize + totalInitializationDataSize;
    } else {
      // Calculated maximum input sizes are overestimates, so it's not necessary to add the size of
      // initialization data.
      return getMaxInputSize(codecInfo, format.sampleMimeType, format.width, format.height);
    }
  }",Returns a maximum input buffer size for a given codec and format.,1,173
823,"public CompareToBuilder append(char[] lhs, char[] rhs) {
        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null) {
            comparison = -1;
            return this;
        }
        if (rhs == null) {
            comparison = +1;
            return this;
        }
        if (lhs.length != rhs.length) {
            comparison = (lhs.length < rhs.length) ? -1 : +1;
            return this;
        }
        for (int i = 0; i < lhs.length && comparison == 0; i++) {
            append(lhs[i], rhs[i]);
        }
        return this;
    }","Deep comparison of a char array.  Check if arrays are same using == Check if either is null, a null array is less than a non-null Check array length, a shorter length array is less than a longer length array Check array contents element by element using  #append(char, char)",1,254
824,"public BatchedDataStream<OUT> groupBy(int... fields) {
		return new BatchedDataStream<OUT>(dataStream.groupBy(fields), batchSize, slideSize);
	}",Groups the elements of the  BatchedDataStream by the given key positions to be used with grouped operators.,1,47
825,"static CharSeq ofAll(char[] array) {
        Objects.requireNonNull(array, ""array is null"");
        return new CharSeq(String.valueOf(array));
    }",Creates a CharSeq based on the elements of a char array.,1,48
826,"public static List<Card> getCreaturesInPlay() {
        final List<Card> creats = AllZoneUtil.getCardsIn(ZoneType.Battlefield);
        return CardListUtil.filter(creats, Presets.CREATURES);
    }",use to get a List of all creatures on the battlefield for both.,1,56
827,"public boolean scheduleBuild(int quietPeriod, Cause c, Action... actions) {
        if (isDisabled())
            return false;

        List<Action> queueActions = new ArrayList(Arrays.asList(actions));
        if (isParameterized() && Util.filter(queueActions, ParametersAction.class).isEmpty()) {
            queueActions.add(new ParametersAction(getDefaultParametersValues()));
        }

        return Hudson.getInstance().getQueue().add(
                this,
                quietPeriod,
                queueActions.toArray(new Action[queueActions.size()]));
    }",Schedules a build.,1,161
828,"public String generateVariantURI(final HttpHost host, final HttpRequest request, final HttpCacheEntry entry) {
        if (!entry.hasVariants()) {
            return generateKey(host, request);
        }
        return generateVariantKey(request, entry) + generateKey(host, request);
    }",Computes a key for the given  HttpHost and  HttpRequest that can be used as a unique identifier for cached resources.,1,83
829,"public IStringConverter getConverter()
	{
		final IStringConverter stringConverter;
		final IConverter converter = (IConverter)getSession().getConverter();
		if(converter instanceof IStringConverter)
		{
			stringConverter = (IStringConverter)converter;
		}
		else
		{
			// A user provided converter that is not a IStringConverter. Wrap
			// that converter to act as a IStringConverter
			stringConverter = new IStringConverter()
			{
				/**
				 * @see wicket.util.convert.IStringConverter#toString(java.lang.Object)
				 */
				public String toString(Object value)
				{
					return (String)converter.convert(value, String.class);
				}

				/**
				 * @see wicket.util.convert.IConverter#convert(java.lang.Object, java.lang.Class)
				 */
				public Object valueOf(String string)
				{
					return converter.convert(string, null); // converts to default
				}

				/**
				 * @see wicket.util.convert.IConverter#convert(java.lang.Object, java.lang.Class)
				 */
				public Object convert(Object value, Class c)
				{
					return converter.convert(value, c);
				}
			};
		}
		return stringConverter;
	}",Gets the converter that should be used by this component.,1,228
830,"public AngularCoordinates revert() {
        return new AngularCoordinates(rotation.revert(),
                                      rotation.applyInverseTo(rotationRate).negate(),
                                      rotation.applyInverseTo(rotationAcceleration).negate());
    }",Revert a rotation/rotation rate/ rotation acceleration triplet.,1,54
831,"public static Long[] toObject(final long[] array) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_LONG_OBJECT_ARRAY;
        }
        final Long[] result = new Long[array.length];
        for (int i = 0; i < array.length; i++) {
            result[i] = new Long(array[i]);
        }
        return result;
    }",Converts an array of primitive longs to objects. This method returns null if null array input.,1,151
832,"public boolean isBluetoothScoOn() {
        if (AudioSystem.getForceUse(AudioSystem.FOR_COMMUNICATION) == AudioSystem.FORCE_BT_SCO) {
            return true;
        } else {
            return false;
        }
    }",Checks whether communications use Bluetooth SCO.,1,58
833,"public static MultilevelMetadataKeyBuilder newKey(String id, String partName) {
    return new MultilevelMetadataKeyBuilder(id, partName);
  }","Creates and returns new instance of a  MultilevelMetadataKeyBuilder, to help building a new  MetadataKey represented by the given @param id",1,37
834,"public SocksAddressType addressType() {
        return addressType;
    }",Returns the  SocksAddressType of this  SocksCmdRequest,1,19
835,"public ClientDependencyInfo generateClientDependencyInfo() {
    ClientDependencyInfo ret = new ClientDependencyInfo();
    ret.id = mId;
    ret.parents = new ArrayList<Integer>(mParentFiles.size());
    ret.parents.addAll(mParentFiles);
    ret.children = new ArrayList<Integer>(mChildrenFiles.size());
    ret.children.addAll(mChildrenFiles);
    ret.data = BufferUtils.cloneByteBufferList(mData);
    return ret;
  }","Generate a ClientDependencyInfo, which is used for the thrift server.",1,124
836,"public Value convert(Value v, Mode mode) {
        try {
            return v.convertTo(type, MathUtils.convertLongToInt(precision), mode);
        } catch (DbException e) {
            if (e.getErrorCode() == ErrorCode.DATA_CONVERSION_ERROR_1) {
                String target = (table == null ? """" : table.getName() + "": "") +
                        getCreateSQL();
                throw DbException.get(
                        ErrorCode.DATA_CONVERSION_ERROR_1,
                        v.getSQL() + "" ("" + target + "")"");
            }
            throw e;
        }
    }",Convert a value to this column's type using the given  Mode.,1,175
837,"public String getName()
    {
        return name.get(matcher()).toLowerCase();
    }",Gets the value part (eg 'form' in 'html:form' or 'form') converted to all lower case characters.,1,31
838,"public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the last index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex will return  #INDEX_NOT_FOUND (-1).,1,172
839,"public synchronized long requestSpace(long blockId, long requestSpaceBytes)
      throws IOException {
    if (!hasLocalWorker()) {
      return -1;
    }

    long toRequestSpaceBytes = Math.max(requestSpaceBytes, mUserQuotaUnitBytes);
    for (int attempt = 0; attempt < mUserFailedSpaceRequestLimits; attempt ++) {
      if (mWorkerClient.requestSpace(blockId, toRequestSpaceBytes)) {
        return toRequestSpaceBytes;
      }
    }
    return 0;
  }",Try to request space for certain block.,1,132
840,"public boolean validate() {

    if (validators == null || validators.size() == 0) {
      return true;
    }

    CharSequence text = getText();
    boolean isEmpty = text.length() == 0;

    boolean isValid = true;
    for (MaterialETValidator validator : validators) {
      //noinspection ConstantConditions
      isValid = isValid && validator.isValid(text, isEmpty);
      if (!isValid) {
        setError(validator.getErrorMessage());
        break;
      }
    }

    postInvalidate();
    return isValid;
  }","Check all validators, sets the error text if not",1,177
841,"public ImportDescr importStatement( PackageDescrBuilder pkg ) throws RecognitionException {
        ImportDescrBuilder imp = null;
        try {
            imp = helper.start( pkg,
                                ImportDescrBuilder.class,
                                null );

            // import
            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.IMPORT,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            String kwd;
            if ( helper.validateIdentifierKey( kwd = DroolsSoftKeywords.FUNCTION ) ||
                 helper.validateIdentifierKey( kwd = DroolsSoftKeywords.STATIC ) ) {
                // function
                match( input,
                       DRLLexer.ID,
                       kwd,
                       null,
                       DroolsEditorType.KEYWORD );
                if ( state.failed ) return null;
            }

            // qualifiedIdentifier
            String target = qualifiedIdentifier();
            if ( state.failed ) return null;

            if ( input.LA( 1 ) == DRLLexer.DOT && input.LA( 2 ) == DRLLexer.STAR ) {
                // .*
                match( input,
                       DRLLexer.DOT,
                       null,
                       null,
                       DroolsEditorType.IDENTIFIER );
                if ( state.failed ) return null;
                match( input,
                       DRLLexer.STAR,
                       null,
                       null,
                       DroolsEditorType.IDENTIFIER );
                if ( state.failed ) return null;
                target += "".*"";
            }
            if ( state.backtracking == 0 ) imp.target( target );

        } catch ( RecognitionException re ) {
            reportError( re );
        } finally {
            helper.end( ImportDescrBuilder.class,
                        imp );
        }
        return (imp != null) ? imp.getDescr() : null;
    }",importStatement := IMPORT (FUNCTION|STATIC)? qualifiedIdentifier (DOT STAR)?,1,501
842,"public static Client client(Object proxy) {
        if (proxy instanceof Client) {
            return (Client)proxy;
        }
        return null;
    }",Converts proxy to Client,1,49
843,"public static RPCUfsBlockReadRequest decode(ByteBuf in) {
    long blockId = in.readLong();
    long offset = in.readLong();
    long length = in.readLong();
    long sessionId = in.readLong();
    boolean noCache = in.readBoolean();
    return new RPCUfsBlockReadRequest(blockId, offset, length, sessionId, noCache);
  }",Decodes the input  ByteBuf into a  RPCUfsBlockReadRequest object and returns it.,1,111
844,"public boolean isBluetoothScoOn() {
        IAudioService service = getService();
        try {
            return service.isBluetoothScoOn();
        } catch (RemoteException e) {
            Log.e(TAG, ""Dead object in isBluetoothScoOn"", e);
            return false;
        }
    }",Checks whether communications use Bluetooth SCO.,1,79
845,"public InputStream getInputStream() {
		return new FastByteArrayInputStream(this);
	}",Get an  InputStream to retrieve the data in this OutputStream.,1,24
846,"public ListAssert onProperty(String propertyName) {
    isNotNull();
    if (actual.isEmpty()) return new ListAssert(emptyList());
    return new ListAssert(propertyValues(propertyName, actual));
  }",Creates a new instance of  ListAssert whose target list contains the values of the given property name from the elements of this  ListAssert's list.,1,62
848,"public int getScope()
    {
        return scope;
    }",Gets the scope constant for this node.,1,20
849,"public boolean removeAll (Array<T> array, boolean identity) {
		int size = this.size;
		int startSize = size;
		T[] items = this.items;
		if (identity) {
			for (int i = 0, n = array.size; i < n; i++) {
				T item = array.get(i);
				for (int ii = 0, nn = size; ii < nn; ii++) {
					if (item.equals(items[ii])) {
						removeIndex(ii);
						size--;
						break;
					}
				}
			}
		} else {
			for (int i = 0, n = array.size; i < n; i++) {
				T item = array.get(i);
				for (int ii = 0, nn = size; ii < nn; ii++) {
					if (item == items[ii]) {
						removeIndex(ii);
						size--;
						break;
					}
				}
			}
		}
		return size != startSize;
	}",Removes from this array all of elements contained in the specified array.,1,347
850,"public MimeType getMimeType(byte[] data) {
        assert data != null;

        // First, check for XML descriptions (level by level)
        for (MimeInfo info : xmls) {
            MimeType type = info.getType();
            if (type.matchesXML(data)) {
                return type;
            }
        }

        // Then, check for magic bytes
        for (Magic magic : magics) {
            if (magic.eval(data)) {
                return magic.getType();
            }
        }

        return null;
    }",Returns the MIME type that best matches the given first few bytes of a document stream.,1,144
851,"public static  IComplexNDArray ifft(IComplexNDArray inputC) {
        return Nd4j.getFFt().ifft(inputC);
    }","1d discrete fourier transform, note that this will throw an exception if the passed in input isn't a vector.",1,33
852,"protected IVisualPart<Node, ? extends Node> getTargetPart() {
		return targetPart;
	}",Returns the target part of this policy.,1,29
853,"public boolean hasMatchingSig(QualifiedName qname, String fieldName, FieldSigMask sigMask) {
        ClassStats clazz = getClassStats(qname, false);

        return clazz != null && clazz.hasMatchingSig(fieldName, sigMask);
    }",Returns true if the signature of the field designated by its name and the qualified name of its class is covered by the mask.,1,67
854,"private int getColor(Map<String, String> card) {
            boolean suspended = ""True"".equals(card.get(""suspended""));
            int flag = new Integer(card.get(""flags""));
            boolean marked = card.get(""tags"").matches("".*[Mm]arked.*"");
            switch (flag) {
                case 1:
                   return R.attr.flagRed;
                case 2:
                   return R.attr.flagOrange;
                case 3:
                  return R.attr.flagGreen;
                case 4:
                   return R.attr.flagBlue;
                default:
                    if (marked) {
                        return R.attr.markedColor;
                    } else {
                        if (suspended) {
                            return R.attr.suspendedColor;
                        } else {
                            return android.R.attr.colorBackground;
                        }
                    }
            }
        }",Get the background color of items in the card list based on the Card,1,242
855,"public WallEntry remove(WallEntry wallEntry) throws SystemException {
		return super.remove(wallEntry);
	}",Removes the wall entry from the database.,1,31
856,"public DefaultBehavior getDefault() {
        return defaultBehavior;
    }",Get the default behavior.,1,19
857,"protected byte[] serializeValue(String name, Object value, String... path) {
    String str = stringifyValue(name, value, path);
    if(!Strings.isNullOrEmpty(str)) {
      return str.getBytes(Charsets.UTF_8);
    } else {
      return null;
    }
  }",Serializes a single metric key-value pair to send to Kafka.,1,93
858,"public VaadinSession getSession() {
        return session;
    }",Gets the vaadin session to which the rendered view belongs.,1,19
859,"public AgendaGroup getNextFocus() {
        AgendaGroupImpl agendaGroup = null;
        // Iterate untill we find a populate AgendaModule or we reach the MAIN, default, AgendaGroup
        while ( true ) {
            agendaGroup = (AgendaGroupImpl) this.focusStack.getLast();  
            
            boolean empty = agendaGroup.isEmpty(); 
            
            // No populated queus found so pop the focusStack and repeat            
            if (  empty && (this.focusStack.size() > 1 ) ) {
                this.focusStack.removeLast();
            } else {
                agendaGroup =  (empty)? null : agendaGroup;
                break;
            }
        } 
        
        return agendaGroup;
    }",Returns the next populated Agenda Group.,1,160
860,"public static List<PropertyNode> getAllProperties(ClassNode type, boolean includeSuperProperties, boolean includeStatic, boolean includePseudoGetters, boolean includePseudoSetters, boolean superFirst) {
        return getAllProperties(type, type, new HashSet<String>(), includeSuperProperties, includeStatic, includePseudoGetters, includePseudoSetters, superFirst);
    }",Get all properties including JavaBean pseudo properties matching JavaBean getter or setter conventions.,1,83
861,"public static Double[] toObject(final double[] array) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_DOUBLE_OBJECT_ARRAY;
        }
        final Double[] result = new Double[array.length];
        for (int i = 0; i < array.length; i++) {
            result[i] = new Double(array[i]);
        }
        return result;
    }",Converts an array of primitive doubles to objects. This method returns null if null array input.,1,151
862,"protected ChangeViewportPolicy determineViewportPolicy() {
		return getHost().getRoot().getAdapter(ChangeViewportPolicy.class);
	}",Returns the  ChangeViewportPolicy that is to be used for changing the viewport.,1,32
863,"public static double get(MetricKey<ASTUserClassOrInterface<?>> key, ASTUserClass node, MetricOptions options) {
        return FACADE.computeForType(key, node, options);
    }","Computes a metric identified by its code on a class AST node, possibly selecting metric options with the  options parameter.",1,51
864,"public boolean pressBack() {
        Tracer.trace();
        waitForIdle();
        return mUiAutomationBridge.getInteractionController().sendKeyAndWaitForEvent(
                KeyEvent.KEYCODE_BACK, 0, AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED,
                KEY_PRESS_EVENT_TIMEOUT);
    }",Simulates a short press on the BACK button.,1,58
865,"public Boolean reliable()
    {
        return reliable;
    }","Get the subscription semantics for if loss is acceptable, or not, for a reliable message delivery.",1,20
866,"public IObservableValue getPositionEngine() {
		return mPositionEngine;
	}",Returns an observable reference to the position engine service.,1,19
867,"public static XEvent toEvent(MiniElement element, XAddress context) throws ParsingError {
		if(element == null) {
			return null;
		} else if(element.getType().equals(XTRANSACTIONEVENT_ELEMENT)) {
			return toTransactionEvent(element, context);
		} else {
			return toAtomicEvent(element, context, null);
		}
	}",Get the  XEvent represented by the given XML/JSON element.,1,104
868,"protected int index(char c) {
    if (lazy) {
      int index = indexActual(c);
      if (index != -1) {
        return index;
      }
      if (font.canDisplay(c)) {
        // create the glyph
        addGlyph(c);
        // now where did i put that?      
        return indexActual(c);
        
      } else {
        return -1;
      }

    } else {
      return indexActual(c);
    }
  }",Get index for the character.,1,137
869,"public boolean processed(final Object id) {
        return _processed.contains(id);
    }",Returns true if the given systemID or stream has been marked as processed.,1,29
870,"public ECPoint decrypt(ECPair pair)
    {
        if (key == null)
        {
            throw new IllegalStateException(""ECElGamalDecryptor not initialised"");
        }

        ECPoint tmp = pair.getX().multiply(key.getD());

        return pair.getY().add(tmp.negate());
    }",Decrypt an EC pair producing the original EC point.,1,92
871,"public static <T extends Collection<?>> T validIndex(T collection, int index) {
        return validIndex(collection, index, DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE, index);
    }","Validates that the index is within the bounds of the argument collection; otherwise throwing an exception. Validate.validIndex(myCollection, 2); If the index is invalid, then the message of the exception is &quot;The validated collection index is invalid: &quot; followed by the index.",1,52
872,"boolean areCgroupStatsAvailable() {
        if (!Files.exists(PathUtils.get(""/proc/self/cgroup""))) {
            return false;
        }
        if (!Files.exists(PathUtils.get(""/sys/fs/cgroup/cpu""))) {
            return false;
        }
        if (!Files.exists(PathUtils.get(""/sys/fs/cgroup/cpuacct""))) {
            return false;
        }
        if (!Files.exists(PathUtils.get(""/sys/fs/cgroup/memory""))) {
            return false;
        }
        return true;
    }","Checks if cgroup stats are available by checking for the existence of  /proc/self/cgroup,  /sys/fs/cgroup/cpu,  /sys/fs/cgroup/cpuacct and  /sys/fs/cgroup/memory.",1,141
873,"public static int lastIndexOf(ByteBuffer buffer, byte valueToFind, int startIndex)
    {
        assert buffer != null;

        if (startIndex < buffer.position())
        {
            return -1;
        }
        else if (startIndex >= buffer.limit())
        {
            startIndex = buffer.limit() - 1;
        }

        for (int i = startIndex; i >= buffer.position(); i--)
        {
            if (valueToFind == buffer.get(i))
                return i;
        }

        return -1;
    }",ByteBuffer adaptation of org.apache.commons.lang.ArrayUtils.lastIndexOf method,1,177
874,"public static CiConstant forChar(char i) {
        return get(CiKind.Char, i);
    }",Creates a boxed char constant.,1,32
875,"default Collection<URL> getResources(String... expressions) {
        return getResources(Arrays.asList(expressions));
    }",Resolves resource expressions to a list of  URLs.,1,36
876,"protected boolean isSkippedInnerClass(final AnnotatedNode node) {
        if (node instanceof ClassNode) {
            ClassNode type = (ClassNode) node;
            if (type.getOuterClass() != null) {
                MethodNode enclosingMethod = type.getEnclosingMethod();
                if (enclosingMethod != null && isSkipMode(enclosingMethod)) {
                    return true;
                }
            }
        }
        return false;
    }","Tests if a node is an inner class node, and if it is, then checks if the enclosing method is skipped.",1,120
877,"public static <T extends Iterable<?>> T noNullElements(T iterable, String message, Object... values) {
        Validate.notNull(iterable);
        int i = 0;
        for (Iterator<?> it = iterable.iterator(); it.hasNext(); i++) {
            if (it.next() == null) {
                Object[] values2 = ArrayUtils.addAll(values, i);
                throw new IllegalArgumentException(String.format(message, values2));
            }
        }
        return iterable;
    }",Validate that the specified argument iterable is neither null nor contains any elements that are null; otherwise throwing an exception with the specified message.,1,164
878,"public int getW(){
        if (_wValue instanceof Integer)
            return (Integer) _wValue;
        else
            return -999;
    }","Gets the number of servers to write to if W is not a string value, returns -999.",1,43
879,"public static List<Pointer<?>> select(Object context, LocationPath path) {
		if (path == null)
			return Collections.emptyList();
		if (path.getInitialContext() != null)
			return select(createPointer((EObject) path.getInitialContext()
					.resolveContext()), path.getSteps());
		return select(createPointer(context), path.getSteps());
	}",Returns a list of Pointers built by applying a LocationPath onto the context.,1,119
880,"public long executeInsert() {
        if (!mDatabase.isOpen()) {
            throw new IllegalStateException(""database "" + mDatabase.getPath() + "" already closed"");
        }
        long timeStart = SystemClock.uptimeMillis();
        mDatabase.lock();

        acquireReference();
        try {
            mDatabase.closePendingStatements();
            native_execute();
            mDatabase.logTimeStat(mSql, timeStart);
            return (mDatabase.lastChangeCount() > 0) ? mDatabase.lastInsertRow() : -1;
        } finally {
            releaseReference();
            mDatabase.unlock();
        }
    }",Execute this SQL statement and return the ID of the row inserted due to this call.,1,170
881,"private synchronized boolean isStateUpdateCompleted(StateUpdatesHolder localPendingStateUpdates) {
    return localPendingStateUpdates.mNonLazyStateUpdates.equals(
        mPendingStateUpdates.mNonLazyStateUpdates);
  }",The state update is completed if there are no new non-lazy state updates enqueued.,1,35
882,"public DocumentRevision getCurrentRevision() {
        for(DocumentRevisionNode n : leafs) {
            if(n.getData().isCurrent()) {
                return n.getData();
            }
        }
        throw new IllegalStateException(""No current revision found."");
    }",Returns the  DocumentRevision that is the current winning revision for this  DocumentRevisionTree.,1,72
883,"public Matrix4 set (Matrix4 matrix) {
		return this.set(matrix.val);
	}",Sets the matrix to the given matrix.,1,30
884,"public CreateOptions build() {
      return new CreateOptions(this);
    }",Builds a new instance of  CreateOptions.,1,24
885,"public static long getContentLength(HttpMessage message, long defaultValue) {
        String value = message.headers().get(HttpHeaderNames.CONTENT_LENGTH);
        if (value != null) {
            return Long.parseLong(value);
        }

        // We know the content length if it's a Web Socket message even if
        // Content-Length header is missing.
        long webSocketContentLength = getWebSocketContentLength(message);
        if (webSocketContentLength >= 0) {
            return webSocketContentLength;
        }

        // Otherwise we don't.
        return defaultValue;
    }","Returns the length of the content or the specified default value if the message does not have the  ""Content-Length"" header.",1,125
886,"private Object getPreviousSibling(Object item) {
		Object[] siblings = getSiblings(item);
		for (int i = 0; i < siblings.length; ++i) {
			if (siblings[i] == item) {
				if (--i >= 0) {
					return siblings[i];
				} else {
					return null;
				}
			}
		}
		return null;
	}",Returns the previous sibling of the given item.,1,130
887,"public static Scheduler getForegroundThreadScheduler() {
    return ShadowLooper.getUiThreadScheduler();
  }",Return the foreground thread scheduler (e.g the UI thread scheduler).,1,25
888,"public RightProjection<Option<L>, Option<R>> filter(Predicate<? super R> predicate) {
            Objects.requireNonNull(predicate);
            if (either.isLeft() || (either.isRight() && predicate.test(asRight()))) {
                return new RightProjection<>(either.bimap(Some::new, Some::new));
            } else {
                return new RightProjection<>(new Right<>(None.instance()));
            }
        }","Returns   RightProjection(Right(Some(value))), if the underlying  Either of this projection is a  Right and the right value satisfies the given predicate  RightProjection(Right(None))) if the underlying  Either of this projection is a  Right and the right value does not satisfy the given predicate  RightProjection(Left(Some(value))) otherwise, i.e.",1,141
889,"public static Striped<Semaphore> lazyWeakSemaphore(int stripes, final int permits) {
    return lazy(stripes, new Supplier<Semaphore>() {
      @Override public Semaphore get() {
        return new Semaphore(permits, false);
      }
    });
  }","Creates a  Striped with lazily initialized, weakly referenced semaphores, with the specified number of permits.",1,82
890,"public static boolean waitCompleted(FileSystem fs, TachyonURI uri)
      throws IOException, TachyonException, InterruptedException {
    return FileSystemUtils.waitCompleted(fs, uri, -1, TimeUnit.MILLISECONDS);
  }","Shortcut for  waitCompleted(fs, uri, -1, TimeUnit.MILLISECONDS), i.e., wait for an indefinite amount of time.",1,57
891,"public static int memStrLen2(ByteBuffer buffer, int from) {
		int to = from;
		while ( to < buffer.limit() ) {
			if ( buffer.get(to) == 0 && to < buffer.limit() - 1 && buffer.get(to + 1) == 0 )
				break;
			to += 2;
		}
		return (to - from) >> 1;
	}",Calculates the number of UTF16 code units of the null-terminated string in  buffer that starts at index  from.,1,140
892,"public static <T> List<T> nonNullElements(List<T> l) {
    Collection<T> nonNullElements = nonNullElements((Collection<T>)l);
    if (nonNullElements == null)  return null;
    return unmodifiableList(new ArrayList<T>(nonNullElements));
  }",Returns a new unmodifiable list containing the non-null elements of the given list.,1,84
893,"protected SegmentMetadataImpl extractSegmentMetadata(final String rawTableName, final String segmentNameStr) {
    String baseDirStr = StringUtil.join(""/"", _controllerConf.getDataDir(), rawTableName);
    String segFileStr = StringUtil.join(""/"", baseDirStr, segmentNameStr);
    String tempMetadataDirStr = StringUtil.join(""/"", baseDirStr, segmentNameStr + METADATA_TEMP_DIR_SUFFIX);
    File tempMetadataDir = new File(tempMetadataDirStr);

    try {
      Preconditions.checkState(tempMetadataDir.mkdirs(), ""Failed to create directory: %s"", tempMetadataDirStr);

      // Extract metadata.properties
      InputStream metadataPropertiesInputStream =
          TarGzCompressionUtils.unTarOneFile(new FileInputStream(new File(segFileStr)),
              V1Constants.MetadataKeys.METADATA_FILE_NAME);
      Preconditions.checkNotNull(metadataPropertiesInputStream, ""%s does not exist"",
          V1Constants.MetadataKeys.METADATA_FILE_NAME);
      Path metadataPropertiesPath =
          FileSystems.getDefault().getPath(tempMetadataDirStr, V1Constants.MetadataKeys.METADATA_FILE_NAME);
      Files.copy(metadataPropertiesInputStream, metadataPropertiesPath);

      // Extract creation.meta
      InputStream creationMetaInputStream =
          TarGzCompressionUtils.unTarOneFile(new FileInputStream(new File(segFileStr)),
              V1Constants.SEGMENT_CREATION_META);
      Preconditions.checkNotNull(creationMetaInputStream, ""%s does not exist"", V1Constants.SEGMENT_CREATION_META);
      Path creationMetaPath = FileSystems.getDefault().getPath(tempMetadataDirStr, V1Constants.SEGMENT_CREATION_META);
      Files.copy(creationMetaInputStream, creationMetaPath);

      // Load segment metadata
      return new SegmentMetadataImpl(tempMetadataDir);
    } catch (Exception e) {
      throw new RuntimeException(""Exception extracting and reading segment metadata for "" + segmentNameStr, e);
    } finally {
      FileUtils.deleteQuietly(tempMetadataDir);
    }
  }",Extract the segment metadata files from the tar-zipped segment file that is expected to be in the directory for the table.,1,401
894,"public List<String> getOccupants() {
        return Collections.unmodifiableList(new ArrayList<String>(occupantsMap.keySet()));
    }",Returns an Iterator (of Strings) for the list of fully qualified occupants in the group chat.,1,39
895,"public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {
    Field f = createField( field, externalVal, boost);
    return f==null ? new Fieldable[]{} : new Fieldable[]{f};
  }","Given a  org.apache.solr.schema.SchemaField, create one or more  org.apache.lucene.document.Fieldable instances",1,78
896,"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
        ByteBuffer byteData = readToByteBuffer(in);
        return parseByteData(byteData, charsetName, baseUri, parser);
    }","Parses a Document from an input steam, using the provided Parser.",1,68
897,"@SuppressWarnings(""unchecked"")
	public Graph<K, VV, EV> addVertex(final Vertex<K, VV> vertex) {
		List<Vertex<K, VV>> newVertex = new ArrayList<Vertex<K, VV>>();
		newVertex.add(vertex);

		return addVertices(newVertex);
	}",Adds the input vertex to the graph.,1,92
898,"public static Wallet adaptAccountInfo(ANXAccountInfo anxAccountInfo) {

    // Adapt to XChange DTOs
    Wallet wallet = new Wallet(anxAccountInfo.getLogin(), percentToFactor(anxAccountInfo.getTradeFee()),
        ANXAdapters.adaptWallets(anxAccountInfo.getWallets()));
    return wallet;
  }",Adapts a ANXAccountInfo to a Wallet,1,70
899,"protected boolean isSatisfiable() {
		return computeLeftSide().compareTo(degree) >= 0;
	}",tests if the constraint is still satisfiable.,1,31
900,"public CompareToBuilder append(byte[] lhs, byte[] rhs) {
        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null) {
            comparison = -1;
            return this;
        }
        if (rhs == null) {
            comparison = +1;
            return this;
        }
        if (lhs.length != rhs.length) {
            comparison = (lhs.length < rhs.length) ? -1 : +1;
            return this;
        }
        for (int i = 0; i < lhs.length && comparison == 0; i++) {
            append(lhs[i], rhs[i]);
        }
        return this;
    }","Deep comparison of a byte array.  Check if arrays are same using == Check if either is null, a null array is less than a non-null Check array length, a shorter length array is less than a longer length array Check array contents element by element using  #append(byte, byte)",1,254
901,"public static JSONObject get(final String pageKey) {
        return (JSONObject) CACHE.get(pageKey);
    }",Gets a cached page with the specified page key.,1,35
902,"public BoundingVolume merge(BoundingVolume volume) {
        return mergeLocal(volume);
    }",merge combines this bounding box locally with a second bounding volume.,1,25
903,"public long getLocalSourceID()
    {
        return this.localSourceID;
    }",Gets the synchronization source (SSRC) identifier of the local peer or -1 if it is not yet known.,1,22
904,"private MulePluginLoaderDescriptor build() {
      checkArgument(!isBlank(id), ""ID cannot be a blank"");
      return new MulePluginLoaderDescriptor(id, properties);
    }",Creates and returns a new  MulePluginLoaderDescriptor according to the values set,1,43
905,"public Presence getPresence(String user) {
        String key = getPresenceMapKey(StringUtils.parseBareAddress(user));
        Map<String, Presence> userPresences = presenceMap.get(key);
        if (userPresences == null) {
            return null;
        }
        else {
            // Find the resource with the highest priority
            // Might be changed to use the resource with the highest availability instead.
            Presence presence = null;

            for (String resource : userPresences.keySet()) {
                Presence p = userPresences.get(resource);
                // Chose presence with highest priority first.
                if (presence == null || p.getPriority() > presence.getPriority()) {
                    presence = p;
                }
                // If equal priority, choose ""most available"" by the mode value.
                else if (p.getPriority() == presence.getPriority()) {
                    if (p.getMode().compareTo(presence.getMode()) < 0) {
                        presence = p;
                    }
                }
            }
            if (presence == null) {
                return new Presence(Presence.Type.unavailable);
            }
            else {
                return presence;
            }
        }
    }",Returns the presence info for a particular user.,1,298
906,"public static String getCanonicalName( Plugin plugin )
    {
        return XMPPServer.getInstance().getPluginManager().getCanonicalName( plugin );
    }","Returns the canonical name for the plugin, derived from the plugin archive file name.",1,42
907,"public static OutputStream leftShift(OutputStream self, byte[] value) throws IOException {
        self.write(value);
        self.flush();
        return self;
    }",Overloads the left shift operator to provide an append mechanism to add bytes to a stream,1,52
908,"private static String readerToString(Reader scriptReader) throws ScriptException {
        StringBuilder buffer = new StringBuilder();
        BufferedReader reader;
        if (scriptReader instanceof BufferedReader) {
            reader = (BufferedReader) scriptReader;
        } else {
            reader = new BufferedReader(scriptReader);
        }
        try {
            String line;
            while ((line = reader.readLine()) != null) {
                buffer.append(line).append('\n');
            }
            return buffer.toString();
        } catch (IOException e) {
            throw new ScriptException(e);
        }
    }",Read from a reader into a local buffer and return a String with the contents of the reader.,1,179
909,"public boolean contains(JingleSession session)
    {
        return findCallPeer(session) != null;
    }",Returns true if session matches the jingle session established with one of the peers in this call.,1,31
910,"public static ServerFanOutSender bindTo(String grinderID,
                                          String addressString,
                                          int port)
    throws CommunicationException {

    final Acceptor acceptor = new Acceptor(addressString, port);

    try {
      final String senderID =
        addressString + "":"" + acceptor.getPort() + "":"" +
        InetAddress.getLocalHost().getHostName();

      return new ServerFanOutSender(grinderID, senderID, acceptor, 3);
    }
    catch (UnknownHostException e) {
      throw new CommunicationException(""Can't get local host"", e);
    }
  }",Factory method that creates a ServerFanOutSender that listens on the given address.,1,162
911,"public V replace(K key, V value) {
        if (value == null)
            throw new NullPointerException();
        int hash = hash(key);
        return segmentFor(hash).replace(key, hash, value);
    }",Replace entry for key only if currently mapped to some value.,1,76
912,"private List<String> cleanRoutines(String schema) {
        @SuppressWarnings({""unchecked""}) List<Map<String, String>> routineNames =
                jdbcTemplate.queryForList(
                        ""SELECT routine_name, routine_type FROM information_schema.routines WHERE routine_schema=?"",
                        new Object[]{schema});

        List<String> statements = new ArrayList<String>();
        for (Map<String, String> row : routineNames) {
            String routineName = row.get(""routine_name"");
            String routineType = row.get(""routine_type"");
            statements.add(""DROP "" + routineType + "" `"" + schema + ""`.`"" + routineName + ""`"");
        }
        return statements;
    }",Generate the statements to clean the routines in this schema.,1,194
913,"private Chat getUserChat(String userJID) {
        if (matchMode == MatchMode.NONE) {
            return null;
        }
        
        Chat match = jidChats.get(userJID);
	
        if (match == null && (matchMode == MatchMode.BARE_JID)) {
            match = baseJidChats.get(StringUtils.parseBareAddress(userJID));
        }
        return match;
    }","Try to get a matching chat for the given user JID, based on the  MatchMode.",1,115
914,"public String toJson() {
        return toJson(JsonWriterSettings.builder().outputMode(JsonMode.RELAXED).build());
    }","Gets a JSON representation of this document using the  org.bson.json.JsonMode#RELAXED output mode, and otherwise the default settings of  JsonWriterSettings.Builder.",1,37
915,"public Setter getParentProperty() {
		return parentPropertyMethod;
	}",Returns the method or field annotated with  ParentProperty @ParentProperty.,1,19
916,"HttpURLConnection openConnection(int threadId, long rangeStart, long rangeEnd) throws IOException {
        return openConnection(urls[current], threadId, rangeStart, rangeEnd);
    }",Open connection,1,49
917,"private String readString(int len) {
        byte[] buff = data;
        int p = pos;
        char[] chars = new char[len];
        for (int i = 0; i < len; i++) {
            int x = buff[p++] & 0xff;
            if (x < 0x80) {
                chars[i] = (char) x;
            } else if (x >= 0xe0) {
                chars[i] = (char) (((x & 0xf) << 12) + ((buff[p++] & 0x3f) << 6) + (buff[p++] & 0x3f));
            } else {
                chars[i] = (char) (((x & 0x1f) << 6) + (buff[p++] & 0x3f));
            }
        }
        pos = p;
        return new String(chars);
    }",Read a String from the byte array.,1,291
918,"private static boolean checkInList(final DatanodeID node,
      final Set<String> hostsList,
      final boolean isExcludeList) {
    final InetAddress iaddr;

    try {
      iaddr = InetAddress.getByName(node.getIpAddr());
    } catch (UnknownHostException e) {
      LOG.warn(""Unknown IP: "" + node.getIpAddr(), e);
      return isExcludeList;
    }

    // if include list is empty, host is in include list
    if ( (!isExcludeList) && (hostsList.isEmpty()) ){
      return true;
    }
    return // compare ipaddress(:port)
    (hostsList.contains(iaddr.getHostAddress().toString()))
        || (hostsList.contains(iaddr.getHostAddress().toString() + "":""
            + node.getXferPort()))
        // compare hostname(:port)
        || (hostsList.contains(iaddr.getHostName()))
        || (hostsList.contains(iaddr.getHostName() + "":"" + node.getXferPort()))
        || ((node instanceof DatanodeInfo) && hostsList
            .contains(((DatanodeInfo) node).getHostName()));
  }",Check if the given DatanodeID is in the given (include or exclude) list.,1,298
919,"public String get(String key) {
        Object o = variables.get(key);
        if(o instanceof String) {
            return (String) o;
        } else if (o != null) {
            return o.toString();
        } else {
            return null;
        }
    }","Gets the value of a variable, converted to a String.",1,97
920,"public KaleoTask remove(KaleoTask kaleoTask) throws SystemException {
		return super.remove(kaleoTask);
	}",Removes the kaleo task from the database.,1,31
921,"@Override
    public SyncUser get(String key) {
        if (key.equals(UserStore.CURRENT_USER_KEY) && cachedCurrentUser != null) {
            return cachedCurrentUser;
        }

        String userData = sp.getString(key, """");
        if (userData.equals("""")) {
            return null;
        }

        try {
            String userSerialisedAndDecrypted = cipherClient.decrypt(userData);
            SyncUser user = SyncUser.fromJson(userSerialisedAndDecrypted);
            if (UserStore.CURRENT_USER_KEY.equals(key)) {
                cachedCurrentUser = user;
            }
            return user;
        } catch (KeyStoreException e) {
            e.printStackTrace();
            return null;
        }
    }",Retrieves the  SyncUser by decrypting first the serialised Json.,1,197
922,"public BuildExecutorArgs createBuilderArgs() {
    return BuildExecutorArgs.builder()
        .setConsole(getConsole())
        .setBuckEventBus(getBuckEventBus())
        .setPlatform(getPlatform())
        .setClock(getClock())
        .setRootCell(getRootCell())
        .setExecutors(getExecutors())
        .setProjectFilesystemFactory(getProjectFilesystemFactory())
        .setBuildInfoStoreManager(getBuildInfoStoreManager())
        .build();
  }",Create  BuildExecutorArgs using  DistBuildExecutorArgs.,1,101
923,"public boolean hasExtension(String elementName, String namespace) {
        if (elementName == null) {
            return hasExtension(namespace);
        }
        QName key = new QName(namespace, elementName);
        synchronized (extensionElements) {
            return extensionElements.containsKey(key);
        }
    }",Check if a stanza extension with the given element and namespace exists.,1,88
924,"public static void await(String name, long time, TimeUnit unit) throws InterruptedException {
    try (LockResource r = new LockResource(sLock)) {
      while (!sTimers.containsKey(name)) {
        if (!sCondition.await(time, unit)) {
          throw new RuntimeException(
              ""Timed out waiting for thread "" + name + "" to be ready for scheduling"");
        }
      }
    }
  }","Waits until the given thread can be executed, throwing an unchecked exception of the given timeout expires.",1,119
925,"public Histogram newHistogram(Class<?> klass,
                                        String name) {
        return newHistogram(klass, name, false);
    }",Creates a new non-biased  Histogram and registers it under the given class and name.,1,40
926,"public JcaTlsCrypto create(SecureRandom random)
    {
        try
        {
            if (random == null)
            {
                if (helper instanceof DefaultJcaJceHelper)
                {
                    random = SecureRandom.getInstance(""DEFAULT"");
                }
                else
                {
                    random = SecureRandom.getInstance(""DEFAULT"", helper.createDigest(""SHA-512"").getProvider());
                }
            }

            return create(random, new NonceEntropySource(helper, random));
        }
        catch (GeneralSecurityException e)
        {
            throw Exceptions.illegalStateException(""unable to create JcaTlsCrypto: "" + e.getMessage(), e);
        }
    }",Create a new JcaTlsCrypto using the current builder configuration and the passed in entropy source..,1,174
927,"public static BlockInStream create(FileSystemContext context, BlockInfo info,
      WorkerNetAddress dataSource, BlockInStreamSource dataSourceType, InStreamOptions options)
      throws IOException {
    URIStatus status = options.getStatus();
    OpenFileOptions readOptions = options.getOptions();

    boolean promote = readOptions.getReadType().isPromote();

    long blockId = info.getBlockId();
    long blockSize = info.getLength();

    // Construct the partial read request
    Protocol.ReadRequest.Builder builder =
        Protocol.ReadRequest.newBuilder().setBlockId(blockId).setPromote(promote);
    if (status.isPersisted()) { // Add UFS fallback options
      builder.setOpenUfsBlockOptions(options.getOpenUfsBlockOptions(blockId));
    }

    boolean shortCircuit = Configuration.getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED);
    boolean sourceSupportsDomainSocket = !NettyUtils.isDomainSocketSupported(dataSource);
    boolean sourceIsLocal = dataSourceType == BlockInStreamSource.LOCAL;

    // Short circuit
    if (sourceIsLocal && shortCircuit && !sourceSupportsDomainSocket) {
      LOG.debug(""Creating short circuit input stream for block {} @ {}"", blockId, dataSource);
      try {
        return createLocalBlockInStream(context, dataSource, blockId, blockSize, options);
      } catch (NotFoundException e) {
        // Failed to do short circuit read because the block is not available in Alluxio.
        // We will try to read from via netty. So this exception is ignored.
        LOG.warn(""Failed to create short circuit input stream for block {} @ {}. Falling back to ""
            + ""network transfer"", blockId, dataSource);
      }
    }

    // Netty
    LOG.debug(""Creating netty input stream for block {} @ {} from client {} reading through {}"",
        blockId, dataSource, NetworkAddressUtils.getClientHostName(), dataSource);
    return createNettyBlockInStream(context, dataSource, dataSourceType, builder.buildPartial(),
        blockSize, options);
  }",Creates a  BlockInStream.,1,415
928,"public static String substring(CharSequence str, int start) {
        if (str == null) {
            return null;
        }

        // handle negatives, which means last n characters
        if (start < 0) {
            start = str.length() + start; // remember start is negative
        }

        if (start < 0) {
            start = 0;
        }
        if (start > str.length()) {
            return EMPTY;
        }

        return sequenceToString(str.subSequence(start, str.length()));
    }",Gets a substring from the specified CharSequence avoiding exceptions. A negative start position can be used to start  n characters from the end of the CharSequence. A  null CharSequence will return  null.,1,157
929,"protected Bson writeMapInternal(Map<Object, Object> obj, Bson dbo, TypeInformation<?> propertyType) {

		for (Map.Entry<Object, Object> entry : obj.entrySet()) {

			Object key = entry.getKey();
			Object val = entry.getValue();

			if (conversions.isSimpleType(key.getClass())) {

				String simpleKey = prepareMapKey(key);
				if (val == null || conversions.isSimpleType(val.getClass())) {
					writeSimpleInternal(val, dbo, simpleKey);
				} else if (val instanceof Collection || val.getClass().isArray()) {
					addToMap(dbo, simpleKey,
							writeCollectionInternal(asCollection(val), propertyType.getMapValueType(), new BasicDBList()));
				} else {
					Document newDbo = new Document();
					TypeInformation<?> valueTypeInfo = propertyType.isMap() ? propertyType.getMapValueType()
							: ClassTypeInformation.OBJECT;
					writeInternal(val, newDbo, valueTypeInfo);
					addToMap(dbo, simpleKey, newDbo);
				}
			} else {
				throw new MappingException(""Cannot use a complex object as a key value."");
			}
		}

		return dbo;
	}",Writes the given  Map to the given  Document considering the given  TypeInformation.,1,345
930,"public static RPCBlockResponse decode(ByteBuf in) {
    long blockId = in.readLong();
    long offset = in.readLong();
    long length = in.readLong();
    short status = in.readShort();
    DataBuffer data = null;
    if (length > 0) {
      // TODO: look into accessing Netty ByteBuf directly, to avoid copying the data.
      ByteBuffer buffer = ByteBuffer.allocate((int) length);
      in.readBytes(buffer);
      data = new DataByteBuffer(buffer, (int) length);
    }
    return new RPCBlockResponse(blockId, offset, length, data, Status.fromShort(status));
  }",Decode the input  ByteBuf into a  RPCBlockResponse object and return it.,1,179
931,"public InputStream getBinaryStream(long pos, long length) throws SQLException {
        try {
            debugCodeCall(""getBinaryStream(pos, length)"");
            checkClosed();
            return value.getInputStream(pos, length);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }","Returns the input stream, starting from an offset.",1,84
932,"public Map getFields() {
        final Map fields = new HashMap();

        for (int i = 0, size = getControls().size(); i < size; i++) {
            Control control = (Control) getControls().get(i);

            // To support behavioural compatiblity with Click 1.4 we add both
            // the Field and FieldSet instances to map.
            if (control instanceof Field || control instanceof FieldSet) {
                fields.put(control.getName(), control);
            }
        }

        return fields;
    }","Return the Map of form fields and fieldsets (including buttons), keyed on field name.",1,149
933,"private static int getMaxInputSize(Format format) {
    if (format.maxInputSize != Format.NO_VALUE) {
      // The format defines an explicit maximum input size.
      return format.maxInputSize;
    }
    return getMaxInputSize(format.sampleMimeType, format.width, format.height);
  }",Returns a maximum input size for a given format.,1,71
934,"public KaleoTimer remove(long kaleoTimerId)
		throws NoSuchTimerException, SystemException {
		return remove(Long.valueOf(kaleoTimerId));
	}",Removes the kaleo timer with the primary key from the database.,1,38
935,"public double itemSimilarity(Item item1, Item item2) {
    int compare = item1.compareTo(item2);
    if (compare == 0) {
      return 1.0;
    }
    Item first;
    Item second;
    if (compare < 0) {
      first = item1;
      second = item2;
    } else {
      first = item2;
      second = item1;
    }
    Map<Item, Double> nextMap = similarityMaps.get(first);
    if (nextMap == null) {
      return Double.NaN;
    }
    Double similarity = nextMap.get(second);
    return similarity == null ? Double.NaN : similarity;
  }",Returns the similarity between two items.,1,208
936,"public Iterator get(String text) {
        return get(text, 0);
    }",Gets an iterator of the objects associated with the longest prefix matching string key.,1,28
937,"protected HttpResponse handleErrors(HttpResponse results) {
    if (results == null) {
      return new HttpResponseBuilder()
          .setHttpStatusCode(HttpServletResponse.SC_NOT_FOUND)
          .setResponse(ERROR_FETCHING_DATA.getBytes())
          .create();
    }
    if (results.isError()) {
      return results;
    }

    return null;
  }",Process errors when fetching uri using request pipeline and return the error response to be returned to the user if any.,1,98
938,"public static String parseServer(String XMPPAddress) {
        if (XMPPAddress == null) {
            return null;
        }
        int atIndex = XMPPAddress.indexOf(""@"");
        // If the String ends with '@', return the empty string.
        if (atIndex + 1 > XMPPAddress.length() || atIndex < 0) {
            return """";
        }
        int slashIndex = XMPPAddress.indexOf(""/"");
        if (slashIndex > 0) {
            return XMPPAddress.substring(atIndex + 1, slashIndex);
        }
        else {
            return XMPPAddress.substring(atIndex + 1);
        }
    }",Returns the name portion of a XMPP address.,1,175
939,"private static String padding(int repeat) {
        while (spaces.length() < repeat)  {
            spaces = spaces.concat(spaces);
        }
        return spaces.substring(0, repeat);
    }",Returns a string containing the requested number of space characters (' ').,1,65
940,"static List<CompilerMessage> parseModernStream( int exitCode, BufferedReader input )
        throws IOException
    {
        List<CompilerMessage> errors = new ArrayList<CompilerMessage>();

        String line;

        StringBuilder buffer;

        while ( true )
        {
            // cleanup the buffer
            buffer = new StringBuilder(); // this is quicker than clearing it

            // most errors terminate with the '^' char
            do
            {
                line = input.readLine();

                if ( line == null )
                {
                    return errors;
                }

                // TODO: there should be a better way to parse these
                if ( ( buffer.length() == 0 ) && line.startsWith( ""error: "" ) )
                {
                    errors.add( new CompilerMessage( line, true ) );
                }
                else if ( ( buffer.length() == 0 ) && isNote( line ) )
                {
                    // skip, JDK 1.5 telling us deprecated APIs are used but -Xlint:deprecation isn't set
                }
                else
                {
                    buffer.append( line );

                    buffer.append( EOL );
                }
            }
            while ( !line.endsWith( ""^"" ) );

            // add the error bean
            errors.add( parseModernError( exitCode, buffer.toString() ) );
        }
    }",Parse the output from the compiler into a list of CompilerMessage objects,1,340
941,"static Scheduler callRequireNonNull(@NonNull Supplier<Scheduler> s) {
        try {
            return ObjectHelper.requireNonNull(s.get(), ""Scheduler Supplier result can't be null"");
        } catch (Throwable ex) {
            throw ExceptionHelper.wrapOrThrow(ex);
        }
    }",Wraps the call to the Scheduler creation supplier in try-catch and propagates thrown checked exceptions as RuntimeException and enforces that result is not null.,1,73
942,"public Serializable getLabeledValue(String label) {
        return exceptionContext.getLabeledValue(label);
    }",Retrieves a contextual data value associated with the label.,1,27
943,"public PaData[] getPreAuthData()
    {
        return preAuthData;
    }",Returns an array of  PaDatas.,1,22
945,"public Collection<SourceSection> getSourceSectionsAtLine(LineLocation line) {
        Collection<SourceSection> sourceSectionList = lineToSourceSectionsMap.get(line);

        if (sourceSectionList == null)
            sourceSectionList = new ArrayList<>(1);

        return sourceSectionList;
    }",Returns a collection of  SourceSections at the given  LineLocation.,1,72
946,"public Vector3D add(double factor, Vector3D v) {
    return new Vector3D(x + factor * v.x, y + factor * v.y, z + factor * v.z);
  }",Add a scaled vector to the instance.,1,68
947,"public Element.ItemElem getItem() {
        return propStructure.getItem(itemKey);
    }",Gets Element.ItemElem represented by this node.,1,26
948,"public static double get(OperationMetricKey key, ASTAnyTypeDeclaration node, MetricVersion version, ResultOption option) {

        MetricVersion safeVersion = (version == null) ? Version.STANDARD : version;
        return option == null ? Double.NaN
                              : TOP_LEVEL_PACKAGE.computeWithResultOption(key, node, false, safeVersion, option);
    }","Compute the sum, average, or highest value of the operation metric on all operations of the class node.",1,100
949,"private static ArtifactClassLoaderHolder createClassLoaderTestRunner(Class<?> klass) throws IOException
    {
        List<String> extensionBasePackages = getAnnotationAttributeFromHierarchy(klass, ArtifactClassLoaderRunnerConfig.class, ""extensionBasePackage"");
        List<Class[]> exportClassesList = getAnnotationAttributeFromHierarchy(klass, ArtifactClassLoaderRunnerConfig.class, ""exportClasses"");
        Set<Class> exportedClasses = exportClassesList.stream().flatMap(Arrays::stream).collect(toSet());

        final File targetTestClassesFolder = new File(klass.getProtectionDomain().getCodeSource().getLocation().getPath());

        ArtifactIsolatedClassLoaderBuilder builder = new ArtifactIsolatedClassLoaderBuilder();
        builder.setRootArtifactClassesFolder(new File(targetTestClassesFolder.getParentFile(), ""classes""));
        builder.setRootArtifactTestClassesFolder(targetTestClassesFolder);
        builder.setExclusions(splitCommaSeparatedAttributeValues(""exclusions"", klass));
        builder.setExtraBootPackages(splitCommaSeparatedAttributeValues(""extraBootPackages"", klass));
        builder.setExtensionBasePackages(extensionBasePackages);
        builder.setExportClasses(exportedClasses);

        return builder.build();
    }",Creates the  ArtifactClassLoaderHolder with the isolated class loaders.,1,256
950,"public static <T> T[] validIndex(T[] array, int index) {
        return validIndex(array, index, DEFAULT_VALID_INDEX_ARRAY_EXCEPTION_MESSAGE, index);
    }","Validates that the index is within the bounds of the argument array; otherwise throwing an exception. Validate.validIndex(myArray, 2); If the array is null, then the message of the exception is &quot;The validated object is null&quot;. If the index is invalid, then the message of the exception is &quot;The validated array index is invalid: &quot; followed by the index.",1,49
951,"public static Map<String, Attachment> findNewAttachments(Map<String, ? extends Attachment> attachments) {
        Map<String, Attachment> newAttachments = new HashMap<String, Attachment>();
        for (Map.Entry<String, ? extends Attachment> a : attachments.entrySet()) {
            if (!(a instanceof SavedAttachment)) {
                newAttachments.put(a.getKey(), a.getValue());
            }
        }
        return newAttachments;
    }",Return a map of the new attachments in the map passed in.,1,139
952,"public WSDLService getService(QName qName){
	    return (WSDLService)this.services.get(qName);
	    
	}",Will return the WSDLService  if found otherwise return null.,1,33
953,"public byte[] getAvatar()
    {
        Iterator<Contact> i = this.getContacts();
        byte[] contactImage = null;

        while(i.hasNext())
        {
            Contact protoContact = i.next();

            try
            {
                contactImage = protoContact.getImage();

                if (contactImage != null && contactImage.length > 0)
                {
                    this.storeAvatar(protoContact, contactImage);

                    cachedAvatar = contactImage;
                }
            }
            catch (Exception ex)
            {
                logger.error(""Failed to load contact photo."", ex);
            }
        }

        return cachedAvatar;
    }","Queries the underlying contacts for an avatar, caches all existing images, and returns one of them.",1,185
954,"public Response getComponents(@Context HttpHeaders headers, @Context UriInfo ui) {
    return handleRequest(headers, null, ui, Request.Type.GET,
        createResourceDefinition(null, m_clusterName, m_serviceName));
  }",Handles GET: /clusters/clusterID/services/serviceID/components,1,60
955,"public DownloadAction[] load(Deserializer... deserializers) throws IOException {
    if (!actionFile.exists()) {
      return new DownloadAction[0];
    }
    InputStream inputStream = null;
    try {
      inputStream = atomicFile.openRead();
      DataInputStream dataInputStream = new DataInputStream(inputStream);
      int version = dataInputStream.readInt();
      if (version > VERSION) {
        throw new IOException(""Unsupported action file version: "" + version);
      }
      int actionCount = dataInputStream.readInt();
      DownloadAction[] actions = new DownloadAction[actionCount];
      for (int i = 0; i < actionCount; i++) {
        actions[i] = DownloadAction.deserializeFromStream(deserializers, dataInputStream);
      }
      return actions;
    } finally {
      Util.closeQuietly(inputStream);
    }
  }",Loads  DownloadActions from file.,1,247
956,"public String getParameterClassName(int param) throws SQLException {
        try {
            debugCodeCall(""getParameterClassName"", param);
            ParameterInterface p = getParameter(param);
            int type = p.getType();
            if (type == Value.UNKNOWN) {
                type = Value.STRING;
            }
            return DataType.getTypeClassName(type);
        } catch (Throwable e) {
            throw logAndConvert(e);
        }
    }",Returns the Java class name of the parameter.,1,129
957,"public SVNCommitPacket doCollectCommitItems(File[] paths, boolean keepLocks, boolean force, boolean recursive) throws SVNException {
        SVNDepth depth = recursive ? SVNDepth.INFINITY : SVNDepth.EMPTY;
        return doCollectCommitItems(paths, keepLocks, force, depth, null);
    }",Collects commit items (containing detailed information on each Working Copy item that was changed and need to be committed to the repository) into a single  SVNCommitPacket.,1,80
958,"public static boolean isEmpty(CharSequence cs) {
        return cs == null || cs.length() == 0;
    }","Checks if a CharSequence is empty ("""") or null.",1,43
959,"public static LoggerFactory<?> getLoggerFactory() {
        return factory;
    }","Returns the factory used for obtaining  Logger instances, or  null if none.",1,24
960,"public SyncUser getUser() {
        return configuration.getUser();
    }",Returns the  SyncUser defined by the  SyncConfiguration that is used to connect to the,1,23
961,"private RVMMethod resolveInternal(RVMClass declaringClass) {
    if (!declaringClass.isResolved()) {
      declaringClass.resolve();
    }
    for (RVMClass c = declaringClass; c != null; c = c.getSuperClass()) {
      if (DBG) {
        VM.sysWrite(""Checking for <"" + name + "","" + descriptor + ""> in class "" + c + ""..."");
      }

      RVMMethod it = c.findDeclaredMethod(name, descriptor);
      if (it != null) {
        if (DBG) {
          VM.sysWriteln(""...found <"" + name + "","" + descriptor + ""> in class "" + c);
        }
        resolvedMember = it;
        return resolvedMember;
      }
      if (DBG) {
        VM.sysWriteln(""...NOT found <"" + name + "","" + descriptor + ""> in class "" + c);
      }
    }
    if (!VM.fullyBooted) {
      VM.sysWrite(""VM_MethodReference.resolveInternal():"");
      VM.sysWrite("" Unable to find a method named "");
      name.sysWrite();
      VM.sysWrite("" with descriptor "");
      descriptor.sysWrite();
      VM.sysWrite("" in the class "");
      declaringClass.getDescriptor().sysWrite();
      if (VM.runningVM) {
        VM.sysWriteln("", while booting the VM"");
      } else {
        VM.sysWriteln("", while writing the boot image"");
      }
      VM.sysFail(
          ""VM_MethodReference.resolveInternal(): Unable to resolve a method during VM booting or boot image writing"");
    }
    throw new NoSuchMethodError(this.toString());
  }",Find the RVMMethod that this member reference refers to using the search order specified in JVM spec 5.4.3.3.,1,433
962,"private Item getItem(String itemname) {
        Item item = itemRegistry.get(itemname);
        return item;
    }",convenience shortcut,1,37
963,"public boolean isDeleted(Column column)
    {
        return isDeleted(column.name(), column.timestamp());
    }",Return whether a given column is deleted by the container having this deletion info.,1,37
964,"public static Integer getOrder(Class<?> type) {
		Order order = AnnotationUtils.findAnnotation(type, Order.class);
		if (order != null) {
			return order.value();
		}
		Integer priorityOrder = getPriority(type);
		if (priorityOrder != null) {
			return priorityOrder;
		}
		return null;
	}",Return the order on the specified  type.,1,110
965,"UnderFileSystem get(String path, Object ufsConf, Configuration configuration) {
      UnderFileSystem cachedFs = null;
      Key key = new Key(new AlluxioURI(path));
      cachedFs = mUnderFileSystemMap.get(key);
      if (cachedFs != null) {
        return cachedFs;
      }
      UnderFileSystem fs = UnderFileSystemRegistry.create(path, configuration, ufsConf);
      cachedFs = mUnderFileSystemMap.putIfAbsent(key, fs);
      if (cachedFs == null) {
        return fs;
      } else {
        try {
          // This is actually a no-op since none of the alluxio UFS implementation has a real
          // close implementation.
          fs.close();
        } catch (IOException e) {
          // Should never happen for now.
          throw new RuntimeException(e);
        }
        return cachedFs;
      }
    }",Gets a UFS instance from the cache if exists.,1,212
966,"public SocksAddressType addressType() {
        return addressType;
    }",Returns the  SocksAddressType of this  SocksCmdResponse,1,19
967,"public Segment deserializeSingle(String singleSegmentJsonStr) throws IOException {
        Segment segment = gson.fromJson(singleSegmentJsonStr, Segment.class);
        return segment;
    }",Single segment json string deserialize.,1,46
968,"public float featureWeighedAverage(T feature, K category, Classifier<T, K> calculator) {
        return this.featureWeighedAverage(feature, category,
                calculator, 1.0f, 0.5f);
    }","Retrieves the weighed average P(feature|category) with overall weight of 1.0, an assumed probability of 0.5 and the given object to use for probability calculation.",1,56
969,"public int setSpeechRate(float speechRate) {
        if (speechRate > 0.0f) {
            int intRate = (int)(speechRate * 100);
            if (intRate > 0) {
                synchronized (mStartLock) {
                    mParams.putInt(Engine.KEY_PARAM_RATE, intRate);
                }
                return SUCCESS;
            }
        }
        return ERROR;
    }",Sets the speech rate.,1,105
970,"public PluginResult execute(String action, JSONArray args) {
		PluginResult.Status status = PluginResult.Status.OK;
		String result = """";		
		try {
			if (action.equals(""isAvailable"")) {
				boolean b = this.isAvailable();
				return new PluginResult(status, b);
			}
			else if (action.equals(""isWifiActive"")) {
				boolean b = this.isWifiActive();
				return new PluginResult(status, b);
			}
			else if (action.equals(""isReachable"")) {
				boolean b = this.isReachable(args.getString(0));
				return new PluginResult(status, b);
			}
			return new PluginResult(status, result);
		} catch (JSONException e) {
			return new PluginResult(PluginResult.Status.JSON_EXCEPTION);
		}
	}",Executes the request and returns CommandResult.,1,250
971,"public static CiConstant forByte(byte i) {
        return get(CiKind.Byte, i);
    }",Creates a boxed byte constant.,1,32
972,"public Socks4CmdType cmdType() {
        return cmdType;
    }",Returns the  Socks4CmdType of this  Socks4Request,1,19
973,"public boolean isSelectable() {
        if (selectable == null) {
            return hasListeners(ValueChangeEvent.class);
        }
        return selectable;
    }",Returns whether table is selectable.,1,47
974,"public String getResponseName()
    {
        return ( ( oid == null ) ? """" : oid );
    }",Gets the OID uniquely identifying this Intermediate response (a.k.a.,1,42
975,"public static HostsFileEntries parseSilently(Charset... charsets) {
        File hostsFile = locateHostsFile();
        try {
            return parse(hostsFile, charsets);
        } catch (IOException e) {
            if (logger.isWarnEnabled()) {
                logger.warn(""Failed to load and parse hosts file at "" + hostsFile.getPath(), e);
            }
            return HostsFileEntries.EMPTY;
        }
    }",Parse hosts file at standard OS location using the given  Charsets one after each other until we were able to parse something or none is left.,1,112
976,"public final EnterableState getFirstChild() {
        if (!children.isEmpty()) {
            return children.get(0);
        }
        return null;
    }",Get the first immediate child of the SCXML root.,1,49
977,"public static double get(MetricKey<ASTMethod> key, ASTMethod node, MetricOptions options) {
        return FACADE.computeForOperation(key, node, options);
    }","Computes a metric identified by its key on a operation AST node, possibly selecting metric options with the  options parameter.",1,48
978,"private static int createRemovedPageInfo(long pagePos, boolean isPinned) {
            int result = ((int) (pagePos >>> 32)) & ~0x3F | ((int) pagePos) & 0x3E;
            if (isPinned) {
                result |= 1;
            }
            return result;
        }","Transforms saved page position into removed page info, by eliminating page offset and replacing ""page type"" bit with ""pinned page"" flag.",1,93
979,"public Object caseGanttSeries( GanttSeries object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Gantt Series'.,1,25
980,"public boolean pressMenu() {
        return pressKeyCode(KeyEvent.KEYCODE_MENU);
    }",Helper method to do a short press on MENU button,1,24
981,"private boolean accept(File file) {

        String absolutePath = file.getAbsolutePath();

        if (!includedNames.isEmpty()
                && // the filter should not affect directory names
                (!(file.isDirectory() || includedNames.match(file)))) {
            LOGGER.log(Level.FINER, ""not including {0}"", absolutePath);
            return false;
        }

        if (ignoredNames.ignore(file)) {
            LOGGER.log(Level.FINER, ""ignoring {0}"", absolutePath);
            return false;
        }

        if (!file.canRead()) {
            LOGGER.log(Level.WARNING, ""Could not read {0}"", absolutePath);
            return false;
        }

        try {
            String canonicalPath = file.getCanonicalPath();
            if (!absolutePath.equals(canonicalPath)
                && !acceptSymlink(absolutePath, canonicalPath)) {

                LOGGER.log(Level.FINE, ""Skipped symlink ''{0}'' -> ''{1}''"",
                    new Object[]{absolutePath, canonicalPath});
                return false;
            }
            //below will only let go files and directories, anything else is considered special and is not added
            if (!file.isFile() && !file.isDirectory()) {
                LOGGER.log(Level.WARNING, ""Ignored special file {0}"",
                    absolutePath);
                return false;
            }
        } catch (IOException exp) {
            LOGGER.log(Level.WARNING, ""Failed to resolve name: {0}"",
                absolutePath);
            LOGGER.log(Level.FINE, ""Stack Trace: "", exp);
        }

        if (file.isDirectory()) {
            // always accept directories so that their files can be examined
            return true;
        }

        if (HistoryGuru.getInstance().hasHistory(file)) {
            // versioned files should always be accepted
            return true;
        }

        // this is an unversioned file, check if it should be indexed
        RuntimeEnvironment env = RuntimeEnvironment.getInstance();
        boolean res = !env.isIndexVersionedFilesOnly();
        if (!res) {
            LOGGER.log(Level.FINER, ""not accepting unversioned {0}"",
                absolutePath);
        }
        return res;
    }",Check if I should accept this file into the index database,1,516
982,"private TachyonURI getPath(Inode inode) {
    synchronized (ROOT_LOCK) {
      if (inode.getId() == 1) {
        return new TachyonURI(TachyonURI.SEPARATOR);
      }
      if (inode.getParentId() == 1) {
        return new TachyonURI(TachyonURI.SEPARATOR + inode.getName());
      }
      return getPath(mFileIdToInodes.get(inode.getParentId())).join(inode.getName());
    }
  }",Get the uri specified by a given inode.,1,131
983,"public I18nMessage invalidNumberType(Object value, String numberType) {
    return createMessage(bundlePath, 2, value, numberType);
  }",Generates a  I18nMessage for a number type validation that failed,1,39
984,"protected WebApplicationContext findWebApplicationContext() {
		if (this.webApplicationContext != null) {
			// the user has injected a context at construction time -> use it
			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {
				if (!((ConfigurableApplicationContext)this.webApplicationContext).isActive()) {
					// the context has not yet been refreshed -> do so before returning it
					((ConfigurableApplicationContext)this.webApplicationContext).refresh();
				}
			}
			return this.webApplicationContext;
		}
		String attrName = getContextAttribute();
		if (attrName != null) {
			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName);
		}
		else {
			return WebApplicationContextUtils.getWebApplicationContext(getServletContext());
		}
	}","Return the  WebApplicationContext passed in at construction time, if available.",1,169
985,"public synchronized FileInfo getFileStatus(int fileId, boolean useCachedMetadata)
      throws IOException {
    return getFileStatus(fileId, TachyonURI.EMPTY_URI, useCachedMetadata);
  }",Get FileInfo object based on fileId.,1,45
986,"public static XSType convertType(Simpletype simpletype) {
        
        if (simpletype == null) return null;
        
        XSType xsType = null;
        
        
        //-- enumerated types
        if (simpletype.hasFacet(""enumeration"")) {
            String className 
                = JavaXMLNaming.toJavaClassName(simpletype.getName());
                
            XSClass xsClass = new XSClass(new JClass(className));
            xsClass.setAsEnumertated(true);
            return xsClass;
        }
        
        //-- determine base type
        Simpletype base = simpletype;
        while ((base != null) && (!(base instanceof BuiltInType))) {
            base = base.getBase();
        }
        if (base == null) {
            String className 
                = JavaXMLNaming.toJavaClassName(simpletype.getName());
            xsType = new XSClass(new JClass(className));
        }
        else {
            switch ( ((BuiltInType)base).getType() ) {
                
                //-- ID
                case BuiltInType.ID_TYPE:
                    return new XSId();
                //-- IDREF
                case BuiltInType.IDREF_TYPE:
                    return new XSIdRef();
                //-- NCName
                case BuiltInType.NCNAME_TYPE:
                    return new XSNCName();
                //-- NMTOKEN
                case BuiltInType.NMTOKEN_TYPE:
                    return new XSNMToken();
                //-- binary
                case BuiltInType.BINARY_TYPE:
                    return new XSBinary();
                //-- boolean
                case BuiltInType.BOOLEAN_TYPE:
                    return new XSBoolean();
                //-- double
                case BuiltInType.DOUBLE_TYPE:
                    return new XSReal();
                //-- integer
                case BuiltInType.INTEGER_TYPE:
                {
                    XSInteger xsInteger = new XSInteger();
                    readIntegerFacets(simpletype, xsInteger);
                    return xsInteger;
                }
                //-- negative-integer 
                case BuiltInType.NEGATIVE_INTEGER_TYPE:
                {
                    XSInteger xsInteger = new XSNegativeInteger();
                    readIntegerFacets(simpletype, xsInteger);
                    return xsInteger;
                }
                //-- positive-integer
                case BuiltInType.POSITIVE_INTEGER_TYPE:
                {
                    XSInteger xsInteger = new XSPositiveInteger();
                    readIntegerFacets(simpletype, xsInteger);
                    return xsInteger;
                }
                case BuiltInType.LONG_TYPE:
                    return new XSLong();
                //-- string
                case BuiltInType.STRING_TYPE:
                    return toXSString(simpletype);
                //-- timeInstant
                case BuiltInType.TIME_INSTANT_TYPE:
                    return new XSTimeInstant();
                default:
                    //-- error
                    String className 
                        = JavaXMLNaming.toJavaClassName(simpletype.getName());
                    xsType = new XSClass(new JClass(className));
                    break;
                
            }
        }
        return xsType;
        
    } //-- convertType",Converts the given Simpletype to the appropriate XSType.,1,691
987,"public static UnderFileSystem get(String path, Map<String, String> ufsConf) {
      Preconditions.checkArgument(path != null, ""path may not be null"");

      return UFS_CACHE.get(path, ufsConf);
    }",Gets the  UnderFileSystem instance according to its scheme and configuration.,1,63
988,"public Object jsxGet_onload() {
        if (onload_ == null) {
            // NB: for IE, the onload of window is the one of the body element but not for Mozilla.
            final HtmlPage page = (HtmlPage) webWindow_.getEnclosedPage();
            final List listTagNames = Arrays.asList(new String[] {""body"", ""frameset""});
            final List listElements = page.getDocumentElement().getHtmlElementsByTagNames(listTagNames);
            if (!listElements.isEmpty()) {
                return ((HtmlElement) listElements.get(0)).getEventHandler(""onload"");
            }
            else {
                return null;
            }
        }
        else {
            return onload_;
        }
    }",Return the onload property (caution this is not necessary a function if something else has been set),1,175
989,"public Node getStartDecoration() {
		return startDecoration;
	}","Returns the start decoration  Node of this  Connection, or null.",1,19
990,"public static Object getAt(Matcher matcher, int idx) {
        try {
            int count = getCount(matcher);
            if (idx < -count || idx >= count) {
                throw new IndexOutOfBoundsException(""index is out of range "" + (-count) + "".."" + (count - 1) + "" (index = "" + idx + "")"");
            }
            idx = normaliseIndex(idx, count);
            matcher.reset();
            for (int i = 0; i <= idx; i++) {
                matcher.find();
            }

            if (hasGroup(matcher)) {
                // are we using groups?
                // yes, so return the specified group as list
                ArrayList list = new ArrayList(matcher.groupCount());
                for (int i = 0; i <= matcher.groupCount(); i++) {
                    list.add(matcher.group(i));
                }
                return list;
            } else {
                // not using groups, so return the nth
                // occurrence of the pattern
                return matcher.group();
            }
        }
        catch (IllegalStateException ex) {
            return null;
        }
    }","Support the subscript operator, e.g.",1,323
991,"public JIRAChangeGroup remove(JIRAChangeGroup jiraChangeGroup)
		throws SystemException {
		return super.remove(jiraChangeGroup);
	}",Removes the j i r a change group from the database.,1,32
992,"public final TestStatistics getStatistics()
	{
	    return m_statistics;
	}",Get the  TestStatistics.,1,22
993,"public KaleoCondition remove(KaleoCondition kaleoCondition)
		throws SystemException {
		return super.remove(kaleoCondition);
	}",Removes the kaleo condition from the database.,1,32
994,"// providing this method to save resources creating a Stream - makes no sense for collections in general
    static <T> Stream<T> ofAll(Iterator<? extends T> iterator) {
        Objects.requireNonNull(iterator, ""iterator is null"");
        if (iterator.hasNext()) {
            return new Cons<>(iterator.next(), () -> Stream.ofAll(iterator));
        } else {
            return Nil.instance();
        }
    }",Creates a Stream based on an Iterator.,1,111
995,"public static BufferedWriter newWriter(Path self, String charset, boolean append) throws IOException {
        return newWriter(self, charset, append, false);
    }",Helper method to create a buffered writer for a file without writing a BOM.,1,50
996,"public static List<Object> findAnnotatedFieldValues(Object instance, Class<? extends Annotation> annotationType) {
		Preconditions.notNull(instance, ""instance must not be null"");

		List<Field> fields = findAnnotatedFields(instance.getClass(), annotationType, ModifierSupport::isNotStatic,
			HierarchyTraversalMode.TOP_DOWN);

		return ReflectionUtils.readFieldValues(fields, instance);
	}","Find the values of all non-static plain Field fields of the supplied  instance that are annotated or meta-annotated with the specified  annotationType, using top-down search semantics within the type hierarchy.",1,98
997,"public static Stage getfirstStage() {
        return stages.get(0);
    }",Gets the first Stage in the list,1,26
998,"protected BendOperation getBendOperation() {
		return (BendOperation) ((AbstractCompositeOperation) super.getOperation())
				.getOperations().get(0);
	}",Returns an  BendOperation that is extracted from the operation created by  #createOperation().,1,44
999,"public String endpoint()
    {
        return endpoint;
    }",Get the endpoint address:port pairing for the channel.,1,20
1000,"public int getFetchSize() throws SQLException {
        return getResultSet().getFetchSize();
    }",Retrieves the fetch size for this getResultSet() object.,1,29
1001,"public static <T> Set<T> getProviders(Services services, Class<T> contract) {
        final Collection<Provider<T>> hk2Providers = services.forContract(contract).all();
        if (hk2Providers.isEmpty()) {
            return Sets.newLinkedHashSet();
        } else {
            return Sets.newLinkedHashSet(Collections2.transform(hk2Providers, new ProviderToService<T>()));
        }
    }",Get the set of all providers registered for the given service provider contract in the underlying  Services HK2 services container.,1,119
1002,"public Set<RosterEntry> getEntries() {
        Set<RosterEntry> allEntries = new HashSet<RosterEntry>();
        // Loop through all roster groups and add their entries to the answer
        for (RosterGroup rosterGroup : getGroups()) {
            allEntries.addAll(rosterGroup.getEntries());
        }
        // Add the roster unfiled entries to the answer
        allEntries.addAll(unfiledEntries);

        return allEntries;
    }","Returns a set of all entries in the roster, including entries that don't belong to any groups.",1,91
1003,"public Class<? extends ActionBean> getActionBeanClass()
    {
        return m_beanClass;
    }",Returns the ActionBean class that is the parent of the event method used to instantiate the HandlerInfo object.,1,27
1004,"public T singleResult(Context context, CriteriaQuery criteriaQuery) throws SQLException {
//        List<T> list = list(context, criteriaQuery, cacheable, clazz, maxResults, offset);
//        if(CollectionUtils.isNotEmpty(list))
//        {
//            return list.get(0);
//        }else{
//            return null;
//        }
//
        Query query = this.getHibernateSession(context).createQuery(criteriaQuery);
        return (T) query.getSingleResult();

    }",Retrieve a single result from the query.,1,76
1005,"protected PooledConnection borrowConnection(long now, PooledConnection con) throws SQLException {
        //we have a connection, lets set it up
        
        //flag to see if we need to nullify
        boolean setToNull = false;
        try {
            con.lock();
            if (!con.isDiscarded() && !con.isInitialized()) {
                //attempt to connect
                con.connect();
            }
            if ((!con.isDiscarded()) && con.validate(PooledConnection.VALIDATE_BORROW)) {
                //set the timestamp
                con.setTimestamp(now);
                if (getPoolProperties().isLogAbandoned()) {
                    //set the stack trace for this pool
                    con.setStackTrace(getThreadDump());
                }
                if (!busy.offer(con)) {
                    log.debug(""Connection doesn't fit into busy array, connection will not be traceable."");
                }
                return con;
            }
            //if we reached here, that means the connection
            //is either discarded or validation failed.
            //we will make one more attempt
            //in order to guarantee that the thread that just acquired
            //the connection shouldn't have to poll again.
            try {
                con.reconnect();
                if (con.validate(PooledConnection.VALIDATE_INIT)) {
                    //set the timestamp
                    con.setTimestamp(now);
                    if (getPoolProperties().isLogAbandoned()) {
                        //set the stack trace for this pool
                        con.setStackTrace(getThreadDump());
                    }
                    if (!busy.offer(con)) {
                        log.debug(""Connection doesn't fit into busy array, connection will not be traceable."");
                    }
                    return con;
                } else {
                    //validation failed.
                    release(con);
                    setToNull = true;
                    throw new SQLException(""Failed to validate a newly established connection."");
                }
            } catch (Exception x) {
                release(con);
                setToNull = true;
                if (x instanceof SQLException) {
                    throw (SQLException)x;
                } else {
                    SQLException ex  = new SQLException(x.getMessage());
                    ex.initCause(x);
                    throw ex;
                }
            }
        } finally {
            con.unlock();
            if (setToNull) {
                con = null;
            }
        }
    }",Validates and configures a previously idle connection,1,503
1006,"public String versionString() {
        return versionString(version.major, version.minor);
    }",Return computer readable  String containing version numbers in   '.'  format.,1,29
1007,"public int getExposureCompensation() {
            return getInt(KEY_EXPOSURE_COMPENSATION);
        }",Gets the current exposure compensation setting.,1,22
1008,"protected DefaultComponentDefinition addInjectionPoint(Field field) {
        requiredComponents.add(field.getType());
        fieldInjectionPoints.add(new DefaultFieldInjectionPoint(this,field, null));
        return this;
    }",Adds an injection point for a field.,1,54
1009,"public Pointer origin() {
        if (memoryStatus().isForwarded() || memoryStatus().isDead()) {
            return lastValidPointer;
        }
        Pointer pointer = reference.toOrigin();
        lastValidPointer = pointer;
        return pointer;
    }","The current ""origin"" of the object in VM memory, which may change through GC as long as the object remains live.",1,76
1010,"public boolean epsilonEquals (float x, float y, float z) {
		return epsilonEquals(x, y, z, MathUtils.FLOAT_ROUNDING_ERROR);
	}",Compares this vector with the other vector using MathUtils.FLOAT_ROUNDING_ERROR for fuzzy equality testing,1,47
1011,"public Object parse() {
        final Object value = parseLiteral();
        skipWhiteSpace();
        if (pos < length) {
            throw expectedError(pos, ""eof"", toString(peek()));
        }
        return value;
    }",Public parse method.,1,77
1012,"private Address getSymbol(String symbolName, String argSignature) {
    // Convert file name from unicode to filesystem character set
    // (assume file name is ascii, for now).
    //
    final byte[] asciiName = StringUtilities.stringToBytesNullTerminated(symbolName);
    final byte[] asciiArgs = (argSignature != null) ? StringUtilities.stringToBytesNullTerminated(argSignature) : null;
    return SysCall.sysCall.sysDlsym(libHandler, asciiName, asciiArgs);
  }",Look up a symbol in this dynamic library,1,102
1013,"public static String[] split(String str) {
        return split( str,
                      null,
                      -1 );
    }","Splits the provided text into an array, using whitespace as the separator.",1,40
1014,"public Set<String> getGroupNames() {
        getGroupCache();
        if (this.groupNames == null) return null;
        Set<String> newSet = FastSet.newInstance();
        newSet.addAll(this.groupNames);
        return newSet;
    }",Creates a Set with all of the groupNames defined in the specified XML Entity Group Descriptor file.,1,75
1015,"public List<Task> getMappedTasks(TaskMapperContext taskMapperContext) throws TerminateWorkflowException {

        logger.debug(""TaskMapperContext {} in UserDefinedTaskMapper"", taskMapperContext);

        WorkflowTask taskToSchedule = taskMapperContext.getTaskToSchedule();
        Workflow workflowInstance = taskMapperContext.getWorkflowInstance();
        String taskId = taskMapperContext.getTaskId();
        int retryCount = taskMapperContext.getRetryCount();

        TaskDef taskDefinition = Optional.ofNullable(taskToSchedule.getTaskDefinition())
                .orElseThrow(() -> {
                    String reason = String.format(""Invalid task specified. Cannot find task by name %s in the task definitions"", taskToSchedule.getName());
                    return new TerminateWorkflowException(reason);
                });

        Map<String, Object> input = parametersUtils.getTaskInputV2(taskToSchedule.getInputParameters(), workflowInstance, taskId, taskDefinition);

        Task userDefinedTask = new Task();
        userDefinedTask.setTaskType(taskToSchedule.getType());
        userDefinedTask.setTaskDefName(taskToSchedule.getName());
        userDefinedTask.setReferenceTaskName(taskToSchedule.getTaskReferenceName());
        userDefinedTask.setWorkflowInstanceId(workflowInstance.getWorkflowId());
        userDefinedTask.setWorkflowType(workflowInstance.getWorkflowName());
        userDefinedTask.setCorrelationId(workflowInstance.getCorrelationId());
        userDefinedTask.setScheduledTime(System.currentTimeMillis());
        userDefinedTask.setTaskId(taskId);
        userDefinedTask.setInputData(input);
        userDefinedTask.setStatus(Task.Status.SCHEDULED);
        userDefinedTask.setRetryCount(retryCount);
        userDefinedTask.setCallbackAfterSeconds(taskToSchedule.getStartDelay());
        userDefinedTask.setWorkflowTask(taskToSchedule);
        return Arrays.asList(userDefinedTask);
    }",This method maps a  WorkflowTask of type  TaskType#USER_DEFINED to a  Task in a  Task.Status#SCHEDULED state,1,380
1016,"public OutputStream getOutputStream(OutputStream out) throws IOException {
    if (!saslClient.isComplete()) {
      throw new IOException(""Sasl authentication exchange hasn't completed yet"");
    }
    return new SaslOutputStream(out, saslClient);
  }",Get a SASL wrapped OutputStream.,1,64
1017,"@Override
	public String getDefault() {
		return null;
	}",Returns the default value of @odf.attribute draw:path-stretchpoint-y.,1,22
1018,"public static MethodDelegation to(Object delegate, MethodLookupEngine methodLookupEngine) {
        return new MethodDelegation(new InstrumentationDelegate.ForStaticFieldInstance(nonNull(delegate)),
                defaultParameterBinders(),
                defaultDefaultsProvider(),
                defaultAmbiguityResolver(),
                defaultAssigner(),
                methodLookupEngine.getReachableMethods(new TypeDescription.ForLoadedType(delegate.getClass()))
                        .filter(not(isStatic().or(isPrivate()).or(isConstructor())))
        );
    }",Identical to  net.bytebuddy.instrumentation.MethodDelegation#to(Object) but uses an explicit  net.bytebuddy.instrumentation.method.MethodLookupEngine.,1,116
1019,"public Name parse( String dn ) throws InvalidNameException
    {
        return new DN( dn );
    }",Parse a String and return a DN if the String is a valid DN,1,36
1020,"public SQLUnit toSQL(final Map<String, String> logicAndActualTableMap, final ShardingRule shardingRule) {
        StringBuilder result = new StringBuilder();
        for (Object each : segments) {
            if (!(each instanceof ShardingPlaceholder)) {
                result.append(each);
                continue;
            }
            String logicTableName = ((ShardingPlaceholder) each).getLogicTableName();
            String actualTableName = logicAndActualTableMap.get(logicTableName);
            if (each instanceof TablePlaceholder) {
                result.append(null == actualTableName ? logicTableName : actualTableName);
            } else if (each instanceof SchemaPlaceholder) {
                SchemaPlaceholder schemaPlaceholder = (SchemaPlaceholder) each;
                Optional<TableRule> tableRule = shardingRule.tryFindTableRuleByActualTable(actualTableName);
                if (!tableRule.isPresent() && Strings.isNullOrEmpty(shardingRule.getShardingDataSourceNames().getDefaultDataSourceName())) {
                    throw new ShardingJdbcException(""Cannot found schema name '%s' in sharding rule."", schemaPlaceholder.getLogicSchemaName());
                }
                // TODO 目前只能找到真实数据源名称. 未来需要在初始化sharding rule时创建connection,并验证连接是否正确,并获取出真实的schema的名字, 然后在这里替换actualDataSourceName为actualSchemaName
                // TODO 目前actualDataSourceName必须actualSchemaName一样,才能保证替换schema的场景不出错, 如: show columns xxx
                result.append(tableRule.get().getActualDatasourceNames().iterator().next());
            } else if (each instanceof IndexPlaceholder) {
                IndexPlaceholder indexPlaceholder = (IndexPlaceholder) each;
                result.append(indexPlaceholder.getLogicIndexName());
                if (!Strings.isNullOrEmpty(actualTableName)) {
                    result.append(""_"");
                    result.append(actualTableName);
                }
            } else {
                result.append(each);
            }
        }
        return new SQLUnit(result.toString(), new ArrayList<>(Collections.singleton(parameters)));
    }",Convert to SQL unit.,1,431
1021,"public final CharSequence urlFor(final PageMap pageMap, final Class pageClass,
			final PageParameters parameters)
	{
		final IRequestTarget target = new BookmarkablePageRequestTarget(pageMap == null
				? PageMap.DEFAULT_NAME
				: pageMap.getName(), pageClass, parameters);
		final IRequestCodingStrategy requestCodingStrategy = getProcessor()
				.getRequestCodingStrategy();
		return requestCodingStrategy.encode(this, target);
	}",Returns a bookmarkable URL that references a given page class using a given set of page parameters.,1,114
1022,"public static HornetQConnectionFactory createConnectionFactory(final TransportConfiguration connectorConfig,
                                   final TransportConfiguration backupConnectorConfig)
   {
      return new HornetQConnectionFactory(connectorConfig, backupConnectorConfig);
   }",Creates a HornetQConnectionFactory using a single pair of live-backup TransportConfiguration.,1,43
1023,"public static String getSiteConfigUsePreferredUrls()
	{
		org.sakaiproject.citation.api.ConfigurationService instance = getInstance();
		if (instance == null)
		{
			return ""false"";
		}
		return instance.getSiteConfigUsePreferredUrls();
	}","How should we use ""preferred"" URLs found by Library Search as the title link?",1,72
1024,"private UnderFileSystemBlockMeta getBlockMeta(long sessionId, long blockId)
      throws BlockDoesNotExistException {
    Key key = new Key(sessionId, blockId);
    UnderFileSystemBlockMeta blockMeta = mBlocks.get(key);
    if (blockMeta == null) {
      try {
        throw new BlockDoesNotExistException(ExceptionMessage.UFS_BLOCK_DOES_NOT_EXIST_FOR_SESSION,
            blockId, sessionId);
      } catch (Throwable e) {
        LOG.error(""UFS Block does not exist."", e);
        throw e;
      }
    }
    return blockMeta;
  }",Gets the  UnderFileSystemBlockMeta for a session ID and block ID pair.,1,143
1025,"@Deprecated
        @Override
        public String toString() {
            getLogger()
                    .log(Level.WARNING,
                            ""You are using IndexedContainerProperty.toString() instead of getValue() to get the value for a {0}.""
                                    + "" This will not be supported starting from Vaadin 7.1 ""
                                    + ""(your debugger might call toString() and cause this message to appear)."",
                            getClass().getSimpleName());
            Object v = getValue();
            if (v == null) {
                return null;
            }
            return v.toString();
        }",Returns the value of the Property in human readable textual format.,1,109
1026,"public static SQLExecuteCallback<Integer> getPreparedUpdateSQLExecuteCallback(final DatabaseType databaseType, final boolean isExceptionThrown) {
        return new SQLExecuteCallback<Integer>(databaseType, isExceptionThrown) {
            
            @Override
            protected Integer executeSQL(final StatementExecuteUnit statementExecuteUnit) throws SQLException {
                return ((PreparedStatement) statementExecuteUnit.getStatement()).executeUpdate();
            }
        };
    }",Get update callback.,1,100
1027,"public final CharSequence urlFor(final IRequestTarget requestTarget)
	{
		return getRequestCycle().urlFor(requestTarget);
	}",Returns a URL that references the given request target.,1,34
1028,"public TableOperation createSort(List<Expression> orders, TableOperation child) {
		failIfStreaming();

		List<Expression> convertedOrders = orders.stream()
			.map(f -> f.accept(orderWrapper))
			.collect(Collectors.toList());
		return new SortTableOperation(convertedOrders, child);
	}",Creates a valid  SortTableOperation operation.,1,90
1029,"public Iterator<RuleSet> getRegisteredRuleSets() throws RuleSetNotFoundException {
	String rulesetsProperties = null;
	try {
	    StringBuilder allRulesetFilenames = new StringBuilder();
	    for (Language language : Language.findWithRuleSupport()) {
		    Properties props = new Properties();
		    rulesetsProperties = ""rulesets/"" + language.getTerseName() + ""/rulesets.properties"";
		    props.load(ResourceLoader.loadResourceAsStream(rulesetsProperties));
		    String rulesetFilenames = props.getProperty(""rulesets.filenames"");
		    if (allRulesetFilenames.length() > 0) {
			allRulesetFilenames.append("","");
		    }
		    allRulesetFilenames.append(rulesetFilenames);
	    }
	    return createRuleSets(allRulesetFilenames.toString()).getRuleSetsIterator();
	} catch (IOException ioe) {
	    throw new RuntimeException(
		    ""Couldn't find "" + rulesetsProperties + ""; please ensure that the rulesets directory is on the classpath.  Here's the current classpath: ""
			    + System.getProperty(""java.class.path""));
	}
    }","Returns an Iterator of RuleSet objects loaded from descriptions from the ""rulesets.properties"" resource for each Languages with Rule support.",1,250
1030,"public static String stripAccents(CharSequence input) {
        if(input == null) {
            return null;
        }
        try {
            String result = null;
            if (java6Available) {
                result = removeAccentsJava6(input);
            } else if (sunAvailable) {
                result = removeAccentsSUN(input);
            } else {
            	throw new UnsupportedOperationException(""The stripAccents(CharSequence) method requires at least Java 1.6 or a SUN JVM"");
            }
            // Note that none of the above methods correctly remove ligatures...
            return result;
        } catch(IllegalArgumentException iae) {
            throw new RuntimeException(""IllegalArgumentException occurred during 1.6 backcompat code"", iae);
        } catch(IllegalAccessException iae) {
            throw new RuntimeException(""IllegalAccessException occurred during 1.6 backcompat code"", iae);
        } catch(InvocationTargetException ite) {
            throw new RuntimeException(""InvocationTargetException occurred during 1.6 backcompat code"", ite);
        } catch(SecurityException se) {
            throw new RuntimeException(""SecurityException occurred during 1.6 backcompat code"", se);
        }
    }",Removes diacritics (~= accents) from a string.,1,246
1031,"public static boolean isMatch(AttributeDescriptor a, AttributeDescriptor b, boolean strict) {
        if (a == b) {
            return true;
        }

        if (b == null) {
            return false;
        }

        if (a == null) {
            return false;
        }

        if (a.equals(b)) {
            return true;
        }

        if (strict) {
            if (a.getLocalName().equals(b.getLocalName())
                    && a.getType().getBinding().equals(b.getType().getBinding())) {
                return true;
            }
        } else {
            if (a.getLocalName().equals(b.getLocalName()) && a.getClass().equals(b.getClass())) {
                return true;
            }
        }

        return false;
    }",Quickly check descriptors compatibility.,1,257
1032,"public List<Long> popPersistedFiles() {
    List<Long> toReturn = Lists.newArrayList();
    synchronized (mPersistedFiles) {
      toReturn.addAll(mPersistedFiles);
      mPersistedFiles.clear();
      return toReturn;
    }
  }",Populates the persisted files.,1,68
1033,"private Location getBestRecentLocation() throws LocationException {
        BestLocationListener locationListener = new BestLocationListener();
        locationListener.updateLastKnownLocation((LocationManager) getContext().getSystemService(
                Context.LOCATION_SERVICE));
        Location location = locationListener.getLastKnownLocation();
        if (location != null) {
            return location;
        }
        throw new LocationException();
    }",Convenience method for getting the most recent Location,1,102
1034,"public static List<EmailAttachment> mapToEmailAttachments(Object payload) {
    return payload instanceof DefaultMultiPartPayload
        ? ((DefaultMultiPartPayload) payload)
            .getNonBodyParts().stream().map(p -> new EmailAttachment(((PartAttributes) p.getAttributes()).getName(),
                                                                     p.getPayload().getValue(),
                                                                     p.getPayload().getDataType().getMediaType()))
            .collect(toList())
        : emptyList();
  }",Transforms the attachments in a  MultiPartPayload into a  List of  EmailAttachments.,1,125
1035,"protected JavaType getJavaType(Type type, Class<?> contextClass) {
		return (contextClass != null) ?
			TypeFactory.type(type, TypeFactory.type(contextClass)) :
			TypeFactory.type(type);
	}",Return the Jackson  JavaType for the specified type and context class.,1,65
1036,"public Object getBackPageIdentifier()
    {
        return null;
    }",Implements the WizardPage.getBackPageIdentifier to return the back identifier.,1,20
1037,"public MulticastSocket createMulticastSocket() throws IOException {
        return new ManagedMulticastSocketBinding(socketBindings, getSocketAddress());
    }",Create a multicast socket.,1,33
1038,"public WSRPConsumerPortlet remove(WSRPConsumerPortlet wsrpConsumerPortlet)
		throws SystemException {
		return super.remove(wsrpConsumerPortlet);
	}",Removes the w s r p consumer portlet from the database.,1,32
1039,"public static VaadinServletRequest cast(VaadinRequest request) {
        if (request instanceof CombinedRequest) {
            CombinedRequest combinedRequest = (CombinedRequest) request;
            request = combinedRequest.getSecondRequest();
        }
        return (VaadinServletRequest) request;
    }",Helper method to get a  VaadinServletRequest from a  VaadinRequest.,1,70
1040,"public boolean done(long baseOffset, long logAppendTime, RuntimeException exception) {
        final FinalState tryFinalState = (exception == null) ? FinalState.SUCCEEDED : FinalState.FAILED;

        if (tryFinalState == FinalState.SUCCEEDED) {
            log.trace(""Successfully produced messages to {} with base offset {}."", topicPartition, baseOffset);
        } else {
            log.trace(""Failed to produce messages to {} with base offset {}."", topicPartition, baseOffset, exception);
        }

        if (this.finalState.compareAndSet(null, tryFinalState)) {
            completeFutureAndFireCallbacks(baseOffset, logAppendTime, exception);
            return true;
        }

        if (this.finalState.get() != FinalState.SUCCEEDED) {
            if (tryFinalState == FinalState.SUCCEEDED) {
                // Log if a previously unsuccessful batch succeeded later on.
                log.debug(""ProduceResponse returned {} for {} after batch with base offset {} had already been {}."",
                    tryFinalState, topicPartition, baseOffset, this.finalState.get());
            } else {
                // FAILED --> FAILED and ABORTED --> FAILED transitions are ignored.
                log.debug(""Ignored state transition {} -> {} for {} batch with base offset {}"",
                    this.finalState.get(), tryFinalState, topicPartition, baseOffset);
            }
        } else {
            // A SUCCESSFUL batch must not attempt another state change.
            throw new IllegalStateException(""A "" + this.finalState.get() + "" batch must not attempt another state change to "" + tryFinalState);
        }
        return false;
    }",Finalize the state of a batch.,1,330
1041,"@RequiresSession
  public AdminSettingEntity findByName(String name) {
    if (StringUtils.isBlank(name)) {
      return null;
    }
    TypedQuery<AdminSettingEntity> query = entityManagerProvider.get()
            .createNamedQuery(""adminSettingByName"", AdminSettingEntity.class);
    query.setParameter(""name"", name);
    return daoUtils.selectOne(query);
  }",Find an admin setting with the given name.,1,98
1042,"public Client client() {
        return client.get();
    }",Get the client that is configured for this test.,1,23
1043,"public int getResponseStatus() {
        return getResponseContext().getStatus();
    }","Provides response status captured when  #writeResponseStatusAndHeaders(long, org.glassfish.jersey.server.JerseyContainerResponseContext) has been invoked.",1,25
1044,"public Vector2f getScrollContainerSize() {
        return new Vector2f(container.getSize().x - padding.y - padding.w, container.getSize().y - padding.x - padding.z);
    }","Get the size of the area which will be scrolled, excluding the padding and the scrollbar width.",1,63
1045,"public static KerberosTcpProtocolCodecFactory getInstance()
    {
        return INSTANCE;
    }",Returns the singleton  KerberosTcpProtocolCodecFactory.,1,22
1046,"public String getPayloadAsString(String encoding) throws Exception {
        return new String(getPayloadAsBytes(), encoding);        
    }",Converts the message implementation into a String representation,1,37
1047,"public static float fastAbs(float d) {
        return (d >= 0) ? d : -d;
    }",Returns the absolute value (float variant),1,40
1048,"public List<GroovyRowResult> rows(String sql, int offset, int maxRows, Closure metaClosure) throws SQLException {
        AbstractQueryCommand command = createQueryCommand(sql);
        ResultSet rs = null;
        try {
            rs = command.execute();
            List<GroovyRowResult> result = asList(sql, rs, offset, maxRows, metaClosure);
            rs = null;
            return result;
        } finally {
            command.closeResources(rs);
        }
    }","Performs the given SQL query and return a ""page"" of rows from the result set.",1,139
1049,"public URL getValuesFileURL() {
        return valuesFileURL;
    }",Getter for valuesFileURL,1,19
1050,"public Object remove(Object key) {
        if (key == null) {
            return null;
        }
        purgeBeforeWrite();
        return super.remove(key);
    }",Removes the specified mapping from this map.,1,56
1051,"public int rm(String[] argv) throws IOException {
    if (argv.length != 2) {
      System.out.println(""Usage: tfs rm <path>"");
      return -1;
    }
    TachyonURI path = new TachyonURI(argv[1]);
    TachyonFS tachyonClient = createFS(path);
    TachyonFile tFile = tachyonClient.getFile(path);
    if (tFile != null && tFile.isDirectory()) {
      System.out.println(""can't remove a directory, please try rmr <path>"");
      return -1;
    }

    if (tachyonClient.delete(path, false)) {
      System.out.println(path + "" has been removed"");
      return 0;
    } else {
      return -1;
    }
  }",Removes the file specified by argv.,1,211
1052,"public boolean ensureSynced(Stream<Location> locations) throws IOException {
        final Optional<Location> max = locations.max(Location::compareTo);
        // we only need to sync the max location since it will sync all other
        // locations implicitly
        if (max.isPresent()) {
            return ensureSynced(max.get());
        } else {
            return false;
        }
    }",Ensures that all locations in the given stream have been synced / written to the underlying storage.,1,94
1053,"public int getClock() {
    return getMinClock(PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId));
  }",Get minimal clock of all partitions of matrix,1,35
1054,"public static String tr(final CharSequence self, CharSequence sourceSet, CharSequence replacementSet) throws ClassNotFoundException {
        return (String) InvokerHelper.invokeStaticMethod(""org.codehaus.groovy.util.StringUtil"", ""tr"", new Object[]{self.toString(), sourceSet.toString(), replacementSet.toString()});
    }",Translates a CharSequence by replacing characters from the sourceSet with characters from replacementSet.,1,84
1055,"public ImmutableConfiguration getConfiguration()
    {
        return configuration;
    }",Returns the newly created  ImmutableConfiguration object.,1,20
1056,"public Collection getInitialStates(StateMachine stateMachine)
    {
        return getSubvertices(stateMachine, initialStateFilter);
    }",Returns the collection of Pseudostate instances of kind 'initial' found in the argument StateMachine.,1,29
1057,"RootReference[] collectUndoLogRootReferences() {
        BitSet opentransactions = openTransactions.get();
        RootReference[] undoLogRootReferences = new RootReference[opentransactions.length()];
        for (int i = opentransactions.nextSetBit(0); i >= 0; i = opentransactions.nextSetBit(i+1)) {
            MVMap<Long, Object[]> undoLog = undoLogs[i];
            if (undoLog != null) {
                RootReference rootReference = undoLog.getRoot();
                if (rootReference.needFlush()) {
                    // abort attempt to collect snapshots for all undo logs
                    // because map's append buffer can't be flushed from a non-owning thread
                    return null;
                }
                undoLogRootReferences[i] = rootReference;
            }
        }
        return undoLogRootReferences;
    }",Get the root references (snapshots) for undo-log maps.,1,190
1058,"public Object defaultCase( EObject object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'EObject'.,1,25
1059,"public static String substring(String str, int start, int end) {
        if (str == null) {
            return null;
        }

        // handle negatives
        if (end < 0) {
            end = str.length() + end; // remember end is negative
        }
        if (start < 0) {
            start = str.length() + start; // remember start is negative
        }

        // check length next
        if (end > str.length()) {
            end = str.length();
        }

        // if start is greater than end, return """"
        if (start > end) {
            return EMPTY;
        }

        if (start < 0) {
            start = 0;
        }
        if (end < 0) {
            end = 0;
        }

        return str.substring(start, end);
    }",Gets a substring from the specified String avoiding exceptions. A negative start position can be used to start/end  n characters from the end of the String. The returned substring starts with the character in the  start position and ends before the  end position.,1,249
1060,"public static Set<String> toSet(CharSequence self) {
        return new HashSet<String>(toList(self));
    }",Converts the given CharSequence into a Set of unique String of one character.,1,38
1061,"public IFolder getTraceSupplementaryFolder(String supplFolderPath) {
        TmfProjectElement project = getProject();
        IProject projectResource = project.getResource();
        IFolder supplFolderParent = projectResource.getFolder(TmfCommonConstants.TRACE_SUPPLEMENTARY_FOLDER_NAME);
        IFolder folder = supplFolderParent.getFolder(supplFolderPath);
        return folder;
    }",Returns the trace specific supplementary folder under the project's supplementary folder.,1,80
1062,"public Vector4f getAsSrgb(){
        Vector4f srgb = new Vector4f();
        float invGama = 1f/GAMMA;
        srgb.x = (float)Math.pow(r, invGama);
        srgb.y = (float)Math.pow(g, invGama);
        srgb.z = (float)Math.pow(b, invGama);
        srgb.w = a;
        
        return srgb;
    }",Get the color in sRGB color space as a Vector4f,1,119
1063,"public static Config load(ClassLoader loader, Config config, ConfigResolveOptions resolveOptions) {
        return defaultOverrides(loader).withFallback(config).withFallback(defaultReference(loader))
                .resolve(resolveOptions);
    }","Like  #load(Config,ConfigResolveOptions) but allows you to specify a class loader other than the context class loader.",1,57
1064,"public static BigDecimal getRandom(BigDecimal bg, Class c) {
        return new BigDecimal(_rand.nextDouble());
    }",Returns a random Castor recurringDuration,1,38
1065,"public static ConfigModel of(String name) {
        return new Builder(name).setRequired(false).build();
    }",Creates a new ConfigModel.,1,38
1066,"public synchronized Peer get(DatanodeID dnId, boolean isDomain) {

    if (capacity <= 0) { // disabled
      return null;
    }

    List<Value> sockStreamList = multimap.get(new Key(dnId, isDomain));
    if (sockStreamList == null) {
      return null;
    }

    Iterator<Value> iter = sockStreamList.iterator();
    while (iter.hasNext()) {
      Value candidate = iter.next();
      iter.remove();
      if (!candidate.getPeer().isClosed()) {
        return candidate.getPeer();
      }
    }
    return null;
  }",Get a cached peer connected to the given DataNode.,1,192
1067,"public static Template getTemplate(final String templateDirName,
                                       final String templateName) {
        Template ret = null;

        try {
            try {
                if (""mobile"".equals(templateDirName)) {
                    return MOBILE_CFG.getTemplate(templateName);
                }
            } catch (final Exception e) {
                LOGGER.log(Level.SEVERE,
                           ""Can not load mobile template[templateDirName={0}, templateName={1}]"",
                           new Object[]{templateDirName,
                                        templateName});
                return null;
            }

            if (cacheEnabled) {
                ret = CACHE.get(templateDirName + File.separator + templateName);
            }

            if (null != ret) {
                LOGGER.log(Level.FINEST,
                           ""Got template[templateName={0}] from cache"",
                           templateName);
                return ret;
            }

            ret = MAIN_CFG.getTemplate(templateName);

            if (cacheEnabled) {
                CACHE.put(templateDirName + File.separator + templateName,
                          ret);
                LOGGER.log(Level.FINEST,
                           ""Got template[templateName={0}], then put it into template cache"",
                           templateName);
            }

            return ret;
        } catch (final IOException e) {
            LOGGER.log(Level.SEVERE, ""Gets template[name=""
                                     + templateName + ""] failed"", e);
            return null;
        }
    }",Gets a FreeMarker plain Template template with the specified template directory name and template name.,1,348
1068,"public static Log getLog(Class<?> source) {
		synchronized (logs) {
			Log log = new DeferredLog();
			logs.put(log, source);
			return log;
		}
	}",Get a  Log instance for the specified source that will be automatically  DeferredLog#switchTo(Class) switched then the  AbstractPageRequest context is prepared.,1,65
1069,"private static boolean getBrightness(Context context) {
        try {
            IPowerManager power = IPowerManager.Stub.asInterface(
                    ServiceManager.getService(""power""));
            if (power != null) {
                int brightness = Settings.System.getInt(context.getContentResolver(),
                        Settings.System.SCREEN_BRIGHTNESS);
                return brightness > 100;
            }
        } catch (Exception e) {
            Log.d(TAG, ""getBrightness: "" + e);
        }
        return false;
    }",Gets state of brightness.,1,145
1070,"public String[] returnAllFolders(String folder) throws KettleException {
    	
    	Folder dfolder=null;
    	String[] retval=null;
    	try {
    		if(Const.isEmpty(folder)) {
    			// Default folder
    			dfolder=getStore().getDefaultFolder();
    		}else {
    			dfolder = getStore().getFolder(folder);
    		}
    		retval= returnAllFolders(dfolder);
    	}catch(Exception e) {
    	} finally {
    		try {
    			if(dfolder!=null) dfolder.close(false);
    		}catch(Exception e){};
    	}
    	return retval;
    }",Returns all subfolders of the folder folder,1,170
1071,"private List<String> cleanViews(String schema) {
        @SuppressWarnings({""unchecked""}) List<Map<String, String>> viewNames =
                jdbcTemplate.queryForList(
                        ""SELECT table_name FROM information_schema.views WHERE table_schema=?"",
                        new Object[]{schema});

        List<String> statements = new ArrayList<String>();
        for (Map<String, String> row : viewNames) {
            String viewName = row.get(""table_name"");
            statements.add(""DROP VIEW `"" + schema + ""`.`"" + viewName + ""`"");
        }
        return statements;
    }",Generate the statements to clean the views in this schema.,1,167
1072,"default Collection<URL> getResources(Collection<String> expressions) {
        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        if (cl == null) {
            cl = getClass().getClassLoader();
        }
        return getResources(cl, expressions);
    }",Resolves resource expressions to a list of  URLs.,1,83
1073,"public Future<CompletedCheckpoint> triggerCheckpoint(long timestamp, CheckpointOptions options) throws Exception {
		switch (options.getCheckpointType()) {
			case SAVEPOINT:
				return triggerSavepoint(timestamp, options.getTargetLocation());

			case FULL_CHECKPOINT:
				CheckpointTriggerResult triggerResult =
					triggerCheckpoint(timestamp, checkpointProperties, checkpointDirectory, false);

				if (triggerResult.isSuccess()) {
					return triggerResult.getPendingCheckpoint().getCompletionFuture();
				} else {
					Throwable cause = new Exception(""Failed to trigger checkpoint: "" + triggerResult.getFailureReason().message());
					return FlinkCompletableFuture.completedExceptionally(cause);
				}

			default:
				throw new IllegalArgumentException(""Unknown checkpoint type: "" + options.getCheckpointType());
		}
	}",Test method to trigger a checkpoint/savepoint.,1,199
1074,"public PreparedStatement prepareStatement( String query, 
											   String dataSetType )
		throws DataException
	{
	    return prepareStatement( query, dataSetType, null );
	}",Creates a  PreparedStatement instance of the specified data set type and query text.,1,48
1075,"public static List<Properties> loadJobConfigs(Properties properties)
      throws ConfigurationException {
    List<Properties> jobConfigs = Lists.newArrayList();
    loadJobConfigsRecursive(jobConfigs, properties, getJobConfigurationFileExtensions(properties),
        new File(properties.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY)));
    return jobConfigs;
  }",Load job configurations from job configuration files stored under the root job configuration file directory.,1,81
1076,"Ticker getTicker() {
    return expiresAfterAccess() || expiresAfterWrite() || refreshes() || isRecordingStats()
        ? (ticker == null) ? Ticker.systemTicker() : ticker
        : Ticker.disabledTicker();
  }",Specifies a nanosecond-precision time source for use in determining when entries should be expired or refreshed.,1,73
1077,"private List<Object> writeCollectionInternal(Collection<?> source, TypeInformation<?> type, Collection sink) {

		TypeInformation<?> componentType = null;

		List<Object> collection = sink instanceof List ? (List) sink : new ArrayList<>(sink);

		if (type != null) {
			componentType = type.getComponentType();
		}

		for (Object element : source) {

			Class<?> elementType = element == null ? null : element.getClass();

			if (elementType == null || conversions.isSimpleType(elementType)) {
				collection.add(getPotentiallyConvertedSimpleWrite(element));
			} else if (element instanceof Collection || elementType.isArray()) {
				collection.add(writeCollectionInternal(asCollection(element), componentType, new BasicDBList()));
			} else {
				Document document = new Document();
				writeInternal(element, document, componentType);
				collection.add(document);
			}
		}

		return collection;
	}",Populates the given  Collection sink with converted values from the given  Collection source.,1,307
1078,"public Socks5AddressType addressType() {
        return addressType;
    }",Returns the  Socks5AddressType of this  Socks5CmdResponse,1,19
1079,"public static <T> T[] sort(T[] self, boolean mutate, Comparator<T> comparator) {
        T[] answer = mutate ? self : self.clone();
        Arrays.sort(answer, comparator);
        return answer;
    }",Modifies this array so that its elements are in sorted order as determined by the given comparator.,1,81
1080,"@Override
    public UI getRoot() {
        ClientConnector connector = this;
        while (connector != null) {
            if (connector instanceof UI) {
                return (UI) connector;
            }
            connector = connector.getParent();
        }
        return null;
    }",Finds a UI ancestor of this connector.,1,87
1081,"public COSBase getToUnicode()
    {
        return font.getDictionaryObject( COSName.TO_UNICODE );
    }",This will get the ToUnicode object.,1,29
1082,"public static String getRelativeToCanonical(String path, String canonical)
        throws IOException {
        try {
            return getRelativeToCanonical(path, canonical, null, null);
        } catch (ForbiddenSymlinkException e) {
            // should not get here with allowedSymlinks==null
            return path;
        }
    }","Calls  #getRelativeToCanonical(String, String, Set, Set) with  path,  canonical,  allowedSymlinks=null, and  canonicalRoots=null (to disable validation of links).",1,76
1083,"@Override
    public long getLastUsed() {
        return lastUsedMillis;
    }",Gets the last time this object was used in milliseconds.,1,22
1084,"public List<IAnchor> getOldAnchors() {
		return oldAnchors;
	}",Returns the list of  IAnchors which will replace the connection's anchors upon undoing.,1,22
1085,"public static <T> Iterable<T> able(final Iterable<T> iterable) {
		if (iterable == null) {
			return Collections.emptyList();
		}
		return iterable;
	}",Create an  Iterable for the given iterable.,1,63
1086,"public static VaadinRequest getCurrentRequest() {
        return CurrentInstance.get(VaadinRequest.class);
    }",Gets the currently processed Vaadin request.,1,28
1087,"public long executeInsert() {
        long timeStart = SystemClock.uptimeMillis();
        mDatabase.lock();

        acquireReference();
        try {
            native_execute();
            mDatabase.logTimeStat(mSql, timeStart);
            return (mDatabase.lastChangeCount() > 0) ? mDatabase.lastInsertRow() : -1;
        } finally {
            releaseReference();
            mDatabase.unlock();
        }
    }",Execute this SQL statement and return the ID of the row inserted due to this call.,1,118
1088,"public JwtMutator authorities(Converter<Jwt, Collection<GrantedAuthority>> authoritiesConverter) {
			Assert.notNull(authoritiesConverter, ""authoritiesConverter cannot be null"");
			this.authorities = authoritiesConverter.convert(this.jwt);
			return this;
		}",Provides the configured  Jwt so that custom authorities can be derived from it,1,62
1089,"public static String asString(ModelNode value, String defaultValue) {
        return value.isDefined() ? value.asString() : defaultValue;
    }","Returns the value of the node as a string, or the specified default value if the node is undefined.",1,45
1090,"public byte[] getGradesSpreadsheet(String ref) throws IdUnusedException, PermissionException
	{
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		if (gradeSheetExporter.getGradesSpreadsheet(out, ref)) {
			return out.toByteArray();
		}

		return null;
	}","Access the grades spreadsheet for the reference, either for an assignment or all assignments in a context.",1,77
1091,"private static String[] splitHeaderContentType(String sb) {
        int aStart;
        int aEnd;
        int bStart;
        int bEnd;
        int cStart;
        int cEnd;
        aStart = HttpPostBodyUtil.findNonWhitespace(sb, 0);
        aEnd =  sb.indexOf(';');
        if (aEnd == -1) {
            return new String[] { sb, """", """" };
        }
        bStart = HttpPostBodyUtil.findNonWhitespace(sb, aEnd + 1);
        if (sb.charAt(aEnd - 1) == ' ') {
            aEnd--;
        }
        bEnd =  sb.indexOf(';', bStart);
        if (bEnd == -1) {
            bEnd = HttpPostBodyUtil.findEndOfString(sb);
            return new String[] { sb.substring(aStart, aEnd), sb.substring(bStart, bEnd), """" };
        }
        cStart = HttpPostBodyUtil.findNonWhitespace(sb, bEnd + 1);
        if (sb.charAt(bEnd - 1) == ' ') {
            bEnd--;
        }
        cEnd = HttpPostBodyUtil.findEndOfString(sb);
        return new String[] { sb.substring(aStart, aEnd), sb.substring(bStart, bEnd), sb.substring(cStart, cEnd) };
    }",Split the very first line (Content-Type value) in 3 Strings,1,376
1092,"public IFile getHrefAsFile()
	{
		return XSLCore.resolveFile(getStylesheet().getFile(), getHref());
	}","Gets the included file as a source file, if possible (returned file may be null and need not exist).",1,36
1093,"public static HashMap<String, Integer> getNumberOfAttributes(final IComponent spoutOrBolt,
			final Collection<String> rawOutputs)
					throws IllegalArgumentException {
		final StormOutputFieldsDeclarer declarer = new StormOutputFieldsDeclarer();
		spoutOrBolt.declareOutputFields(declarer);

		for (Entry<String, Integer> schema : declarer.outputSchemas.entrySet()) {
			int declaredNumberOfAttributes = schema.getValue();
			if ((declaredNumberOfAttributes < 0) || (declaredNumberOfAttributes > 25)) {
				throw new IllegalArgumentException(
						""Provided bolt declares non supported number of output attributes. Must be in range [0;25] but ""
								+ ""was "" + declaredNumberOfAttributes);
			}

			if (rawOutputs != null && rawOutputs.contains(schema.getKey())) {
				if (declaredNumberOfAttributes != 1) {
					throw new IllegalArgumentException(
							""Ouput type is requested to be raw type, but provided bolt declares more then one output ""
									+ ""attribute."");
				}
				schema.setValue(-1);
			}
		}

		return declarer.outputSchemas;
	}",Computes the number of output attributes used by a  AbstractStormSpoutWrapper or  StormBoltWrapper per declared output stream.,1,257
1094,"public SocksAuthStatus authStatus() {
        return authStatus;
    }",Returns the  SocksAuthStatus of this  SocksAuthResponse,1,19
1095,"public long executeInsert() {
        BlockGuard.getThreadPolicy().onWriteToDisk();
        if (!mDatabase.isOpen()) {
            throw new IllegalStateException(""database "" + mDatabase.getPath() + "" already closed"");
        }
        long timeStart = SystemClock.uptimeMillis();
        mDatabase.lock();

        acquireReference();
        try {
            native_execute();
            mDatabase.logTimeStat(mSql, timeStart);
            return (mDatabase.lastChangeCount() > 0) ? mDatabase.lastInsertRow() : -1;
        } finally {
            releaseReference();
            mDatabase.unlock();
        }
    }",Execute this SQL statement and return the ID of the row inserted due to this call.,1,174
1096,"public Iterator<Element> iterateNonZero() {
      return iterator();
    }",Currently delegates to  #iterator().,1,24
1097,"public static Collection split(Object self, Closure closure) {
        List accept = new ArrayList();
        List reject = new ArrayList();
        return split(closure, accept, reject, InvokerHelper.asIterator(self));
    }",Splits all items into two lists based on the closure condition.,1,74
1098,"public int getEndChar(){
        return chunk.getEnd();
    }",Getter for the end character position of the text,1,22
1099,"public PointD getValuesByTouchPoint(float x, float y, AxisDependency axis) {
        return getTransformer(axis).getValuesByTouchPoint(x, y);
    }",Returns the xPx and yPx values in the chart at the given touch point (encapsulated in a PointD).,1,43
1100,"public static <T> BodyInsertor<T> fromObject(T body) {
		Assert.notNull(body, ""'body' must not be null"");
		return BodyInsertor.of(
				(response, configuration) -> writeWithMessageWriters(response, configuration,
						Mono.just(body), ResolvableType.forInstance(body)),
				() -> body);
	}",Return a  BodyInsertor that writes the given single object.,1,95
1101,"private BlobCacheService createBlobCache() {
		BlobCacheService blobService =
			new BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));

		return blobService;
	}",Creates a  BlobCacheService mock that is suitable to be used in the tests above.,1,49
1102,"public ArrayList<String> splitPostgisSQLScript(InputStream inputStream) throws Exception {

        StringBuilder contents = new StringBuilder();

        ArrayList<String> statements = new ArrayList<String>();
        try {
            // use buffering, reading one line at a time
            // FileReader always assumes default encoding is OK!
            BufferedReader input = new BufferedReader(new InputStreamReader(new DataInputStream(
                    inputStream)));
            try {
                String line = null;
                PostgisIgnoreOperator pio = new PostgisIgnoreOperator();
                while ((line = input.readLine()) != null) {
                    String trimedLine = line.trim();
                    if (trimedLine.startsWith(""--"") || trimedLine.equals("""")) {
                        continue;
                    }

                    for (String opr : pio.getOperators()) {
                        if (countMatches(trimedLine, opr) % 2 == 1) {
                            pio.setReverseStatus(opr);
                        }
                    }
                    contents.append(trimedLine + NEWLINE);

                    if (trimedLine.endsWith("";"") && pio.isAllClosed()) {
                        statements.add(contents.toString());
                        pio.reset();
                        contents.setLength(0);
                    }

                }

                return statements;

            } finally {
                input.close();
            }
        } catch (Exception e) {
            throw e;
        }

    }",there are a number of limitation when using this method.,1,382
1103,"public static DecodedJWT decode(String token) throws JWTDecodeException {
        return new JWTDecoder(token);
    }",Decode a given Json Web Token.,1,33
1104,"public boolean peekSample(DecoderInputBuffer buffer) {
    return infoQueue.peekSample(buffer, extrasHolder);
  }","Fills  buffer with information about the current sample, but does not write its data.",1,30
1105,"public List<Rule> getRules() {
        return Collections.unmodifiableList(rules);
    }",Returns a unmodifiable List of the rules in the packet.,1,27
1106,"HttpUploadTask getTask(Intent intent) {
        String taskClass = intent.getStringExtra(PARAM_TASK_CLASS);

        if (taskClass == null) {
            return null;
        }

        HttpUploadTask uploadTask = null;

        try {
            Class<?> task = Class.forName(taskClass);

            if (HttpUploadTask.class.isAssignableFrom(task)) {
                uploadTask = HttpUploadTask.class.cast(task.newInstance());
                uploadTask.init(this, intent);
            } else {
                Log.e(TAG, taskClass + "" does not extend HttpUploadTask!"");
            }

        } catch (Exception ignored) { }

        return uploadTask;
    }",Creates a new task instance based on the requested task class in the intent.,1,187
1107,"public boolean checkTableExists(String tablename) throws KettleDatabaseException
	{
		try
		{
			log.logDebug(toString(), ""Checking if table [""+tablename+""] exists!"");
			
            // Just try to read from the table.
            String sql = databaseMeta.getSQLTableExists(tablename);
            try
            {
                getOneRow(sql);
                return true;
            }
            catch(KettleDatabaseException e)
            {
                return false;
            }
            
            /*
			if (getDatabaseMetaData()!=null)
			{
				ResultSet alltables = getDatabaseMetaData().getTables(null, null, ""%"" , new String[] { ""TABLE"", ""VIEW"", ""SYNONYM"" } );
				boolean found = false;
				if (alltables!=null)
				{
                    while (alltables.next() && !found)
					{
                        String schemaName = alltables.getString(""TABLE_SCHEM"");
						String name       = alltables.getString(""TABLE_NAME"");
						if ( tablename.equalsIgnoreCase(name) || 
                             ( schemaName!=null && tablename.equalsIgnoreCase( databaseMeta.getSchemaTableCombination(schemaName, name)) )
                           )
						{
							log.logDebug(toString(), ""table [""+tablename+""] was found!"");
							found=true;
						}
					}
					alltables.close();

					return found;
				}
				else
				{
					throw new KettleDatabaseException(""Unable to read table-names from the database meta-data."");
				}
			}
			else
			{
				throw new KettleDatabaseException(""Unable to get database meta-data from the database."");
			}
            */
		}
		catch(Exception e)
		{
			throw new KettleDatabaseException(""Unable to check if table [""+tablename+""] exists on connection [""+databaseMeta.getName()+""]"", e);
		}
	}",See if the table specified exists by reading,1,165
1108,"public Node parse() {
        stream = new TokenStream();

        lexer = new Lexer(source, stream) {

            @Override
            protected boolean skipComments() {
                return false;
            }

            @Override
            protected boolean isStringDelimiter(final char ch) {
                return ch == '\""';
            }

            // ECMA 15.12.1.1 The JSON Lexical Grammar - JSONWhiteSpace
            @Override
            protected boolean isWhitespace(final char ch) {
                return Lexer.isJsonWhitespace(ch);
            }

            @Override
            protected boolean isEOL(final char ch) {
                return Lexer.isJsonEOL(ch);
            }

            // ECMA 15.12.1.1 The JSON Lexical Grammar - JSONNumber
            @Override
            protected void scanNumber() {
                // Record beginning of number.
                final int startPosition = position;
                // Assume value is a decimal.
                TokenType valueType = TokenType.DECIMAL;

                // floating point can't start with a ""."" with no leading digit before
                if (ch0 == '.') {
                    error(Lexer.message(""json.invalid.number""), STRING, position, limit);
                }

                // First digit of number.
                final int digit = convertDigit(ch0, 10);

                // skip first digit
                skip(1);

                if (digit != 0) {
                    // Skip over remaining digits.
                    while (convertDigit(ch0, 10) != -1) {
                        skip(1);
                    }
                }

                if (ch0 == '.' || ch0 == 'E' || ch0 == 'e') {
                    // Must be a double.
                    if (ch0 == '.') {
                        // Skip period.
                        skip(1);

                        boolean mantissa = false;
                        // Skip mantissa.
                        while (convertDigit(ch0, 10) != -1) {
                            mantissa = true;
                            skip(1);
                        }

                        if (! mantissa) {
                            // no digit after "".""
                            error(Lexer.message(""json.invalid.number""), STRING, position, limit);
                        }
                    }

                    // Detect exponent.
                    if (ch0 == 'E' || ch0 == 'e') {
                        // Skip E.
                        skip(1);
                        // Detect and skip exponent sign.
                        if (ch0 == '+' || ch0 == '-') {
                            skip(1);
                        }
                        boolean exponent = false;
                        // Skip exponent.
                        while (convertDigit(ch0, 10) != -1) {
                            exponent = true;
                            skip(1);
                        }

                        if (! exponent) {
                            // no digit after ""E""
                            error(Lexer.message(""json.invalid.number""), STRING, position, limit);
                        }
                    }

                    valueType = TokenType.FLOATING;
                }

                // Add number token.
                add(valueType, startPosition);
            }

            // ECMA 15.12.1.1 The JSON Lexical Grammar - JSONEscapeCharacter
            @Override
            protected boolean isEscapeCharacter(final char ch) {
                switch (ch) {
                    case '""':
                    case '/':
                    case '\\':
                    case 'b':
                    case 'f':
                    case 'n':
                    case 'r':
                    case 't':
                    // could be unicode escape
                    case 'u':
                        return true;
                    default:
                        return false;
                }
            }
        };

        k = -1;

        next();

        final Node resultNode = jsonLiteral();
        expect(EOF);

        return resultNode;
    }",Public parsed method - start lexing a new token stream for a JSON script,1,871
1109,"public MeetupsRegistration remove(long meetupsRegistrationId)
		throws NoSuchMeetupsRegistrationException, SystemException {
		return remove(Long.valueOf(meetupsRegistrationId));
	}",Removes the meetups registration with the primary key from the database.,1,38
1110,"@Override
	public String getDefault() {
		OdfElement parentElement = (OdfElement)getOwnerElement();
		String defaultValue = null;
		if (parentElement != null) {
			if( parentElement instanceof TableFilterConditionElement ){
				defaultValue = DEFAULT_VALUE_TEXT;
			}else if( parentElement instanceof TableSortByElement ){
				defaultValue = DEFAULT_VALUE_AUTOMATIC;
			}else if( parentElement instanceof TableSortGroupsElement ){
				defaultValue = DEFAULT_VALUE_AUTOMATIC;
			}			
		}
		return defaultValue;
	}",Returns the default value of @odf.attribute table:data-type dependent of its element name,1,137
1111,"public boolean equals(Object o) {
        if (o == null) {
            return false;
        }
        if (!(o instanceof RenderState)) {
            return false;
        }
        RenderState rs = (RenderState) o;
        if (pointSprite != rs.pointSprite) {
            return false;
        }

        if (wireframe != rs.wireframe) {
            return false;
        }

        if (cullMode != rs.cullMode) {
            return false;
        }

        if (depthWrite != rs.depthWrite) {
            return false;
        }

        if (depthTest != rs.depthTest) {
            return false;
        }
        if (depthTest) {
            if (depthFunc != rs.depthFunc) {
                return false;
            }
        }

        if (colorWrite != rs.colorWrite) {
            return false;
        }

        if (blendMode != rs.blendMode) {
            return false;
        }

        if (alphaTest != rs.alphaTest) {
            return false;
        }
        if (alphaTest) {
            if (alphaFunc != rs.alphaFunc) {
                return false;
            }
        }

        if (alphaFallOff != rs.alphaFallOff) {
            return false;
        }

        if (offsetEnabled != rs.offsetEnabled) {
            return false;
        }

        if (offsetFactor != rs.offsetFactor) {
            return false;
        }

        if (offsetUnits != rs.offsetUnits) {
            return false;
        }

        if (stencilTest != rs.stencilTest) {
            return false;
        }

        if (stencilTest) {
            if (frontStencilStencilFailOperation != rs.frontStencilStencilFailOperation) {
                return false;
            }
            if (frontStencilDepthFailOperation != rs.frontStencilDepthFailOperation) {
                return false;
            }
            if (frontStencilDepthPassOperation != rs.frontStencilDepthPassOperation) {
                return false;
            }
            if (backStencilStencilFailOperation != rs.backStencilStencilFailOperation) {
                return false;
            }
            if (backStencilDepthFailOperation != rs.backStencilDepthFailOperation) {
                return false;
            }

            if (backStencilDepthPassOperation != rs.backStencilDepthPassOperation) {
                return false;
            }
            if (frontStencilFunction != rs.frontStencilFunction) {
                return false;
            }
            if (backStencilFunction != rs.backStencilFunction) {
                return false;
            }
        }

        if(lineWidth != rs.lineWidth){
            return false;
        }

        return true;
    }",returns true if the given renderState is equall to this one,1,734
1112,"public List<JahiaTemplatesPackage> getDependencies() {
        return Collections.unmodifiableList(new ArrayList<>(dependencies.values()));
    }",Returns a read-only list of modules which this module depends on.,1,38
1113,"public GalleryReportListResult getAppReports(final int start, final int count) {
    final List<GalleryAppReport> reports = new ArrayList<GalleryAppReport>();
    try {
      runJobWithRetries(new JobRetryHelper() {
        @Override
        public void run(Objectify datastore) {
          datastore = ObjectifyService.begin();
          for (GalleryAppReportData reportData : datastore.query(GalleryAppReportData.class).filter(""resolved"", false).order(""-dateCreated"").offset(start).limit(count)) {
            User reporter = storageIo.getUser(reportData.reporterId);
            User offender = storageIo.getUser(reportData.offenderId);
            GalleryApp app = getGalleryApp(reportData.galleryKey.getId());
            GalleryAppReport galleryReport = new GalleryAppReport(reportData.id,reportData.reportText, app, offender, reporter,
                reportData.dateCreated, reportData.resolved);
            reports.add(galleryReport);
          }
        }
      });
    } catch (ObjectifyException e) {
        throw CrashReport.createAndLogError(LOG, null, ""error in galleryStorageIo.getAppReports (all)"", e);
    }
    Objectify datastore = ObjectifyService.begin();
    int totalCount = datastore.query(GalleryAppReportData.class).filter(""resolved"", false).count();
    return new GalleryReportListResult(reports, totalCount);
  }",Returns a wrapped class which contains a list of reports (flags) for unresolved app and total number of results in database,1,352
1114,"@Override
    @SuppressWarnings(""unchecked"")
    public Object clone() {
        return new ConjunctionParallel(name, (ArrayList<Term>) cloneList(components), (ArrayList<Variable>) cloneList(openVariables), complexity);
    }",Clone an object,1,64
1115,"private List<Occupant> getOccupants(MUCRole role) throws NoResponseException, XMPPErrorException, NotConnectedException {
        MUCAdmin iq = new MUCAdmin();
        iq.setTo(room);
        iq.setType(IQ.Type.get);
        // Set the specified role. This may request the list of moderators/participants.
        MUCItem item = new MUCItem(role);
        iq.addItem(item);

        MUCAdmin answer = (MUCAdmin) connection.createPacketCollectorAndSend(iq).nextResultOrThrow();
        // Get the list of participants from the server's answer
        List<Occupant> participants = new ArrayList<Occupant>();
        for (MUCItem mucadminItem : answer.getItems()) {
            participants.add(new Occupant(mucadminItem));
        }
        return participants;
    }",Returns a list of Occupant that have the specified room role.,1,181
1116,"public static <T> List<T> getAt(List<T> self, Collection indices) {
        List<T> answer = new ArrayList<T>(indices.size());
        for (Object value : indices) {
            if (value instanceof Range) {
                answer.addAll(getAt(self, (Range) value));
            } else if (value instanceof List) {
                answer.addAll(getAt(self, (List) value));
            } else {
                int idx = DefaultTypeTransformation.intUnbox(value);
                answer.add(getAt(self, idx));
            }
        }
        return answer;
    }",Select a List of items from a List using a Collection to identify the indices to be selected.,1,190
1117,"static public HistoricItem maximumSince(Item item, AbstractInstant timestamp) {
		if(isDefaultServiceAvailable()) {
			return maximumSince(item, timestamp, defaultService);
		} else {
			return null;
		}
	}",Gets the historic item with the maximum value of the state of a given item since a certain point in time.,1,64
1118,"public static boolean isJavaVersionAtLeast(float requiredVersion) {
        return (JAVA_VERSION_FLOAT >= requiredVersion);
    }",Is the Java version at least the requested version. Example input:  1.2f to test for JDK 1.2 1.31f to test for JDK 1.3.1,1,31
1119,"private List<ArtifactPluginDescriptor> createApplicationPluginDescriptors()
    {
        List<ArtifactPluginDescriptor> pluginDescriptors = new LinkedList<>();

        for (File pluginExpandedFolder : getContainerAppPluginsFolder().listFiles((FileFilter) DirectoryFileFilter.DIRECTORY))
        {
            final ArtifactPluginDescriptor appPluginDescriptor = pluginDescriptorFactory.create(pluginExpandedFolder);
            pluginDescriptors.add(appPluginDescriptor);
        }

        return pluginDescriptors;
    }",For each plugin expanded in container application plugins folder it creates an  ArtifactPluginDescriptor for it and adds the descriptor the given list.,1,102
1120,"protected void mergeConfiguration(GraphAlgorithmWrappingBase other) {
		super.mergeConfiguration(other);

		EdgeTargetDegree rhs = (EdgeTargetDegree) other;

		reduceOnSourceId.mergeWith(rhs.reduceOnSourceId);
	}",The degree can be counted from either the edge source or target IDs.,1,52
1121,"public static ClassFileLocator of(DynamicType dynamicType) {
            Map<String, byte[]> classFiles = new HashMap<String, byte[]>();
            for (Map.Entry<TypeDescription, byte[]> entry : dynamicType.getAllTypes().entrySet()) {
                classFiles.put(entry.getKey().getName(), entry.getValue());
            }
            return new Simple(classFiles);
        }",Creates a class file locator that represents all types of a dynamic type.,1,119
1122,"public ConfigDef define(String name, Type type, Importance importance, String documentation) {
        return define(name, type, NO_DEFAULT_VALUE, null, importance, documentation);
    }",Define a new configuration with no default value and no special validation logic,1,55
1123,"public String getText() {
        return raw.getValue();
    }",Returns the raw raw body of the document.,1,23
1125,"public int getCount() {
    return month.daysInMonth + firstPositionInMonth();
  }",Returns the number of days in a month plus the amount required to off-set for the first day to the correct position within the week.,1,27
1126,"String getPageSegmentNameFor(String uri) {
        return (String)pageSegmentMap.get(uri);
    }",Returns the page segment name for a given URI if it actually represents a page segment.,1,28
1127,"public static Model createModel(URL... knowledgeNames) throws Exception {
		return createModel(new DefaultInputStreamFactory(), true, knowledgeNames);
	}",Create a Model with a given Knowledge base Names.,1,44
1128,"private State getStateFromConfig(Config pilightConfig, PilightBindingConfig bindingConfig) {
		Location loc = pilightConfig.getConfig().get(bindingConfig.getLocation());
		if (loc != null) {
			Device dev = loc.getDevices().get(bindingConfig.getDevice());
			
			if (dev != null) {
				String devType = dev.getType().toString();
				if (devType.equals(DeviceType.SWITCH) || devType.equals(DeviceType.DIMMER)) {
					OnOffType state = OnOffType.valueOf(dev.getState().toUpperCase());
					
					if (dev.getDimlevel() != null && dev.getDimlevel() > 0) {
						if (state.equals(OnOffType.ON))
							return new PercentType(getPercentageFromDimLevel(dev.getDimlevel().toString()));
						else
							return PercentType.ZERO;
					}
					
					return state;
				} else if (devType.equals(DeviceType.VALUE)) {
					bindingConfig.setScale(dev.getScale());
					
					String property = bindingConfig.getProperty();
					if (dev.getProperties().containsKey(property)) {
						String value = dev.getProperties().get(property);
						return getStateFromProperty(value, bindingConfig);
					}
				}
			}
		}
		return null;
	}",Gets the state for item in  bindingConfig from  pilightConfig,1,373
1129,"public static String getDateString(final OffsetDateTime self) {
        return self.format(DateTimeFormatter.ISO_OFFSET_DATE);
    }",Formats this date/time with the  java.time.format.DateTimeFormatter#ISO_OFFSET_DATE formatter.,1,33
1130,"public DslElementSyntaxBuilder withChild(String name, DslElementSyntax child)
    {
        if (child == null)
        {
            throw new IllegalArgumentException(""Invalid child declaration, child element should not be null"");
        }

        this.namedChilds.put(name, child);
        return this;
    }",Adds a  DslElementSyntax childElement declaration to  this  DslElementSyntax that can be referenced by  name,1,74
1131,"public JTableCellFixture cell(TableCellFinder cellFinder) {
    return new JTableCellFixture(this, driver.cell(target, cellFinder));
  }",Returns a fixture that manages the table cell found by the given  TableCellFinder.,1,38
1132,"public String getSharedStringProperty(String propertyName) {
		EMFStoreProperty property = sharedProperties.get(propertyName);
		if (property == null || property.getValue() == null) {
			return null;
		}
		return ((PropertyStringValue) property.getValue()).getValue();
	}",Retrieves a shared string property.,1,88
1133,"public static <F extends Field<F>> Matrix<F> valueOf(Vector<F> diagonal, 
            F zero) {
        return SparseMatrix.valueOf(diagonal, zero);
    }",Returns the sparse square matrix having the specified diagonal vector.,1,56
1134,"public static String getMessage(String key) throws MissingResourceException
    {
        
        String message = getMessage(key.trim(), DEFAULTLOCALE);
      
        return message;
    }",et the i18n message string for a given key and use the default Locale,1,53
1135,"public LabelPattern getKeyPattern() {
        JabRefPreferences.keyPattern = new LabelPattern();
        Preferences pre = Preferences.userNodeForPackage(net.sf.jabref.labelPattern.LabelPattern.class);
        try {
            String[] keys = pre.keys();
            if (keys.length > 0) {
                for (String key : keys) {
                    JabRefPreferences.keyPattern.addLabelPattern(key, pre.get(key, null));
                }
            }
        } catch (BackingStoreException ex) {
            LOGGER.info(""BackingStoreException in JabRefPreferences.getKeyPattern"", ex);
        }
        return JabRefPreferences.keyPattern;
    }",Fetches key patterns from preferences Not cached,1,169
1136,"public static Buffer getPayload(final Message msg) {

        Objects.requireNonNull(msg);
        if (msg.getBody() == null) {
            LOG.trace(""message has no body"");
            return null;
        }

        if (msg.getBody() instanceof Data) {
            Data body = (Data) msg.getBody();
            return Buffer.buffer(body.getValue().getArray());
        } else if (msg.getBody() instanceof AmqpValue) {
            AmqpValue body = (AmqpValue) msg.getBody();
            if (body.getValue() instanceof byte[]) {
                return Buffer.buffer((byte[])body.getValue());
            }
            else if (body.getValue() instanceof String) {
                return Buffer.buffer((String) body.getValue());
            }
        }

        LOG.debug(""unsupported body type [{}]"", msg.getBody().getClass().getName());
        return null;
    }",Gets a message's body as Buffer object.,1,281
1137,"public boolean isEqualToAnotherInstructor(InstructorAttributes instructor) {
        JsonParser parser = new JsonParser();
        return parser.parse(getJsonString()).equals(parser.parse(instructor.getJsonString()));
    }",Compares this instructor with another instructor.,1,57
1138,"public RegexHighlightGrammar create(int flags) {
            return new RegexHighlightGrammar(Pattern.compile(getRegexString(), flags),
                                             getGroupNamesToCssClasses());
        }",Builds the grammar.,1,43
1139,"public BaseDescr declare( PackageDescrBuilder pkg ) throws RecognitionException {
        BaseDescr declaration = null;
        try {
            DeclareDescrBuilder declare = helper.start( pkg,
                                                        DeclareDescrBuilder.class,
                                                        null );

            // 'declare'
            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.DECLARE,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;
            
            if ( helper.validateIdentifierKey( DroolsSoftKeywords.ENTRY ) ) {
                // entry point declaration
                declaration = entryPointDeclaration( declare );
            } else if( helper.validateIdentifierKey( DroolsSoftKeywords.WINDOW ) ) {
                // window declaration
                declaration = windowDeclaration( declare );
            } else if ( helper.validateIdentifierKey( DroolsSoftKeywords.TRAIT ) ) {
                // trait type declaration
                // 'trait'
                match( input,
                       DRLLexer.ID,
                       DroolsSoftKeywords.TRAIT,
                       null,
                       DroolsEditorType.KEYWORD );
                if ( state.failed ) return null;

                declaration = typeDeclaration( declare, true );
            } else if ( helper.validateIdentifierKey( DroolsSoftKeywords.ENUM ) ) {
                match( input,
                        DRLLexer.ID,
                        DroolsSoftKeywords.ENUM,
                        null,
                        DroolsEditorType.KEYWORD );
                if ( state.failed ) return null;

                declaration = enumDeclaration( declare );
            } else {
                // class type declaration
                declaration = typeDeclaration( declare, false );
            }

        } catch ( RecognitionException re ) {
            reportError( re );
        }
        return declaration;
    }",declare := DECLARE | (ENTRY-POINT) => entryPointDeclaration | (WINDOW) => windowDeclaration | (TRAIT) => typeDeclaration (trait) | (ENUM) => enumDeclaration | typeDeclaration (class),1,434
1140,"@NonNull
    private String collect() {
        final StringBuilder result = new StringBuilder();

        // Include the default SharedPreferences
        final Map<String, SharedPreferences> sharedPrefs = new TreeMap<String, SharedPreferences>();
        sharedPrefs.put(""default"", PreferenceManager.getDefaultSharedPreferences(context));

        // Add in any additional SharedPreferences
        for (final String sharedPrefId : config.additionalSharedPreferences()) {
            sharedPrefs.put(sharedPrefId, context.getSharedPreferences(sharedPrefId, Context.MODE_PRIVATE));
        }

        // Iterate over all included preference files and add the preferences from each.
        for (Map.Entry<String, SharedPreferences> entry : sharedPrefs.entrySet()) {
            final String sharedPrefId = entry.getKey();
            final SharedPreferences prefs = entry.getValue();

            final Map<String, ?> prefEntries = prefs.getAll();

            // Show that we have no preferences saved for that preference file.
            if (prefEntries.isEmpty()) {
                result.append(sharedPrefId).append('=').append(""empty\n"");
                continue;
            }

            // Add all non-filtered preferences from that preference file.
            for (final Map.Entry<String, ?> prefEntry : prefEntries.entrySet()) {
                if (filteredKey(prefEntry.getKey())) {
                    if (ACRA.DEV_LOGGING)
                        ACRA.log.d(LOG_TAG, ""Filtered out sharedPreference="" + sharedPrefId + ""  key="" + prefEntry.getKey() + "" due to filtering rule"");
                } else {
                    final Object prefValue = prefEntry.getValue();
                    result.append(sharedPrefId).append('.').append(prefEntry.getKey()).append('=');
                    result.append(prefValue == null ? ""null"" : prefValue.toString());
                    result.append('\n');
                }
            }
            result.append('\n');
        }

        return result.toString();
    }",Collects all key/value pairs in SharedPreferences and writes them in a result String.,1,481
1141,"public Type remove(Type type) throws SystemException {
		return super.remove(type);
	}",Removes the type from the database.,1,31
1142,"public static String toString(List<?> list, String separator) {
		if (list == null) {
			return null;
		}

		StringBuffer buffer = new StringBuffer(""[ "");
		for (int i = 0; i < list.size(); i++) {
			buffer.append(list.get(i).toString());
			if (i + 1 < list.size()) {
				buffer.append(separator);
			}
		}

		buffer.append("" ]"");
		return buffer.toString();
	}","Turn the given list into an attractive string, with the separator of you choosing.",1,174
1143,"public Object caseEStringToDataSetMapEntry( Map.Entry object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'EString To Data Set Map Entry'.,1,27
1144,"public ProjectsEntry remove(ProjectsEntry projectsEntry)
		throws SystemException {
		return super.remove(projectsEntry);
	}",Removes the projects entry from the database.,1,32
1145,"public Exchange createExchange(String exchangeClassName, String apiKey, String secretKey) {

    Assert.notNull(exchangeClassName, ""exchangeClassName cannot be null"");

    log.debug(""Creating default exchange from class name"");

    Exchange exchange = createExchangeWithoutSpecification(exchangeClassName);

    ExchangeSpecification defaultExchangeSpecification = exchange.getDefaultExchangeSpecification();
    if (apiKey != null)
      defaultExchangeSpecification.setApiKey(apiKey);
    if (secretKey != null)
      defaultExchangeSpecification.setSecretKey(secretKey);
    exchange.applySpecification(defaultExchangeSpecification);

    return exchange;
  }",Create an Exchange object with default ExchangeSpecification with authentication info and API keys provided through parameters,1,140
1146,"@Override
	public String getDefault() {
		OdfElement parentElement = (OdfElement)getOwnerElement();
		String defaultValue = null;
		if (parentElement != null) {
			defaultValue = DEFAULT_VALUE;			
		}
		return defaultValue;
	}",Returns the default value of @odf.attribute table:protected dependent of its element name,1,73
1147,"public Transformer<? super T, ? extends T>[] getTransformers() {
        return FunctorUtils.copy(iTransformers);
    }",Gets the transformers.,1,40
1148,"public NodeClassIterable successors() {
        return getNodeClass().getSuccessorIterable(this);
    }",Returns an  NodeClassIterable iterable which can be used to traverse all non-null successor edges of this node.,1,26
1149,"public V apply(K key) {
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }",Returns a function which performs a map lookup with a default value.,1,40
1150,"public JIRAAction remove(long jiraActionId)
		throws NoSuchJIRAActionException, SystemException {
		return remove(Long.valueOf(jiraActionId));
	}",Removes the j i r a action with the primary key from the database.,1,38
1151,"@Override
    public Double unmarshal(final GO_Measure value) {
        if (value != null) {
            final Measure measure = value.measure;
            if (measure != null) {
                return measure.value;
            }
        }
        return null;
    }",Allows JAXB to generate a Double object using the value found in the adapter.,1,83
1152,"public static List<ColumnDefinition> fromSchema(Row serializedColumns, CFMetaData cfm)
    {
        List<ColumnDefinition> cds = new ArrayList<>();

        String query = String.format(""SELECT * FROM %s.%s"", Keyspace.SYSTEM_KS, SystemKeyspace.SCHEMA_COLUMNS_CF);
        for (UntypedResultSet.Row row : QueryProcessor.resultify(query, serializedColumns))
        {
            Type type = row.has(TYPE)
                      ? Enum.valueOf(Type.class, row.getString(TYPE).toUpperCase())
                      : Type.REGULAR;

            Integer componentIndex = null;
            if (row.has(COMPONENT_INDEX))
                componentIndex = row.getInt(COMPONENT_INDEX);
            else if (type == Type.CLUSTERING_KEY && cfm.isSuper())
                componentIndex = 1; // A ColumnDefinition for super columns applies to the column component

            ByteBuffer name = cfm.getComponentComparator(componentIndex, type).fromString(row.getString(COLUMN_NAME));

            AbstractType<?> validator;
            try
            {
                validator = TypeParser.parse(row.getString(VALIDATOR));
            }
            catch (RequestValidationException e)
            {
                throw new RuntimeException(e);
            }

            IndexType indexType = null;
            if (row.has(INDEX_TYPE))
                indexType = IndexType.valueOf(row.getString(INDEX_TYPE));

            Map<String, String> indexOptions = null;
            if (row.has(INDEX_OPTIONS))
                indexOptions = FBUtilities.fromJsonMap(row.getString(INDEX_OPTIONS));

            String indexName = null;
            if (row.has(INDEX_NAME))
                indexName = row.getString(INDEX_NAME);

            cds.add(new ColumnDefinition(name, validator, indexType, indexOptions, indexName, componentIndex, type));
        }

        return cds;
    }",Deserialize columns from storage-level representation,1,476
1153,"public Collection<Parameter> getParameters() {
		return(parameters.values());
	}",Get a Collection containing all parameters.,1,27
1154,"public static Traversal.Admin<?, ?> getTraversal(final Graph graph, final Configuration configuration) {
        return VertexProgram.<TraversalVertexProgram>createVertexProgram(graph, configuration).getTraversal();
    }",A helper method to yield a  Traversal from the  Graph and provided  Configuration.,1,56
1155,"public MemorySegment nextSegment() {
		final MemorySegment seg = getNextBuffer();
		if (seg != null) {
			return seg;
		} else {
			try {
				spillPartition();
			} catch (IOException ioex) {
				throw new RuntimeException(""Error spilling Hash Join Partition"" + (ioex.getMessage() == null ?
					""."" : "": "" + ioex.getMessage()), ioex);
			}
			
			MemorySegment fromSpill = getNextBuffer();
			if (fromSpill == null) {
				throw new RuntimeException(""BUG in Hybrid Hash Join: Spilling did not free a buffer."");
			} else {
				return fromSpill;
			}
		}
	}",This is the method called by the partitions to request memory to serialize records.,1,193
1156,"public static HornetQConnectionFactory createConnectionFactory(final ClientSessionFactory sessionFactory)
   {
      return new HornetQConnectionFactory(sessionFactory);
   }",Creates a HornetQConnectionFactory using the ClientSessionFactory for its underlying connection.,1,32
1157,"public static MethodDelegation toInstanceField(TypeDescription typeDescription, String fieldName) {
        return toInstanceField(nonNull(typeDescription), isValidIdentifier(fieldName), MethodGraph.Compiler.DEFAULT);
    }",Creates an implementation where method calls are delegated to an instance that is manually stored in a field  fieldName that is defined for the instrumented type.,1,48
1158,"public boolean addEvent(PendingEvent pe, long position) {
        if (shouldRecordEvent(pe)) {
            long timestamp = System.currentTimeMillis() - this.startTime;
            Event e = EventCopier.copyEvent(pe.getEvent());
            PendingEvent newPendingEvent = new PendingEvent(pe.getEntity(), e);
            RecordedEvent re;
            if (pe.getComponent() == null) {
                re = new RecordedEvent(newPendingEvent.getEntity().getId(), newPendingEvent.getEvent(), timestamp, position);
            } else {
                re = new RecordedEvent(newPendingEvent.getEntity().getId(), newPendingEvent.getEvent(), newPendingEvent.getComponent(), timestamp, position);
            }
            return RecordedEventStore.add(re);
        } else {
            return false;
        }
    }",Receives a PendingEvent and add it as a RecordedEvent in the RecordedEventStore if it is an event type that should be recorded.,1,230
1159,"public boolean matches(Object obj) {
                YamlSeq seq;
                if(obj instanceof YamlSeq) {
                    seq = (YamlSeq) obj;
                } else {
                    return false;
                }
                
                if(seq.raw().size()!=matchers.length) {
                    return false;
                }
                
                for(int i=0; i<matchers.length; i++) {
                    if(!matchers[i].matches(seq.get(i))) {
                        return false;
                    }
                }
                
                return true;
            }",Matches a YamlSeq,1,162
1160,"public UploadInfo getUploadInfo() {

        HttpSession session = WebContextFactory.get().getSession();
        TransferStatus status = (TransferStatus) session.getAttribute(UploadController.UPLOAD_STATUS);

        if (status != null) {
            return new UploadInfo(status.getBytesTransfered(), status.getBytesTotal());
        }
        return new UploadInfo(0L, 0L);
    }",Returns info about any ongoing upload within the current session.,1,109
1161,"protected StringBuffer createSpacedLabel(final StringBuffer text, final int length,
            final int align) {
        return createSpacedLabel(text, length, align, ' ');
    }",Creates the spaced label with a blank fill character.,1,51
1162,"public FieldAngularCoordinates<T> revert() {
        return new FieldAngularCoordinates<T>(rotation.revert(),
                                              rotation.applyInverseTo(rotationRate.negate()),
                                              rotation.applyInverseTo(rotationAcceleration.negate()));
    }",Revert a FieldRotation/FieldRotation/FieldRotation acceleration triplet.,1,60
1163,"public static Set<String> getTrimmedStrings(Collection<String> strings) {
    Set<String> trimmedStrings = new HashSet<String>();
    for (String string: strings) {
      trimmedStrings.add(string.trim());
    }
    return trimmedStrings;
  }",Trims all the strings in a Collection and returns a Set.,1,80
1164,"public static String normalizeLanguageCode(String language) {
    return language == null ? null : new Locale(language).getLanguage();
  }",Returns a normalized RFC 5646 language code.,1,46
1165,"public Dataset<OutputT> output(OutputHint... outputHints) {
      Flow flow = input.getFlow();
      MapElements<InputT, OutputT> map =
          new MapElements<>(name, flow, input, mapper, Sets.newHashSet(outputHints));
      flow.add(map);

      return map.output();
    }",The mapping function that takes input element and outputs the OutputT type element.,1,97
1166,"public static byte[] decode( String s ) throws java.io.IOException {
        // Signal: We never use gzip, avoid trying to unzip.
        // return decode( s, NO_OPTIONS );
        return decode( s, DONT_GUNZIP );
    }",Signal modified:,1,50
1167,"public static ClientResponse copyFromError(ClientResponse copy)
   {
      if (copy instanceof BaseClientResponse)
      {
         BaseClientResponse base = (BaseClientResponse) copy;
         InputStream is = null;
         if (copy.getHeaders().containsKey(""Content-Type""))
         {
            try
            {
               is = base.streamFactory.getInputStream();
               byte[] bytes = ReadFromStream.readFromStream(1024, is);
               is = new ByteArrayInputStream(bytes);
            }
            catch (IOException e)
            {
               // ignored
            }
         }
         final InputStream theIs = is;
         BaseClientResponse tmp = new BaseClientResponse(new BaseClientResponse.BaseClientResponseStreamFactory()
         {
            InputStream stream;

            public InputStream getInputStream() throws IOException
            {
               return theIs;
            }

            public void performReleaseConnection()
            {
            }
         });
         tmp.executor = base.executor;
         tmp.status = base.status;
         tmp.providerFactory = base.providerFactory;
         tmp.headers = new CaseInsensitiveMap<String>();
         tmp.headers.putAll(base.headers);
         tmp.headers.remove(""Content-Encoding""); // remove encoding because we will have already extracted byte array
         return tmp;
      }
      else
      {
         InputStream is = null;
         if (copy.getHeaders().containsKey(""Content-Type""))
         {
            GenericType<byte[]> gt = new GenericType<byte[]>()
            {
            };
            try
            {
               byte[] bytes = (byte[]) copy.getEntity(gt);
               is = new ByteArrayInputStream(bytes);
            }
            catch (Exception ignore)
            {
            }
         }
         final InputStream theIs = is;
         BaseClientResponse tmp = new BaseClientResponse(new BaseClientResponse.BaseClientResponseStreamFactory()
         {
            InputStream stream;

            public InputStream getInputStream() throws IOException
            {
               return theIs;
            }

            public void performReleaseConnection()
            {
            }
         });
         tmp.status = copy.getStatus();
         tmp.providerFactory = ResteasyProviderFactory.getInstance();
         tmp.headers = new CaseInsensitiveMap<String>();
         tmp.headers.putAll(copy.getHeaders());
         tmp.headers.remove(""Content-Encoding""); // remove encoding because we will have already extracted byte array
         return tmp;
      }
   }",Store entity within a byte array input stream because we want to release the connection if a ClientResponseFailure is thrown.,1,633
1168,"public ClientId fetchHost(String nickname) {
		ClientId clientId = null;
		Cursor cur = mDb.query(true, TABLE_HOSTS,
				new String[] {KEY_ROWID, FIELD_HOST_NICKNAME, FIELD_HOST_ADDRESS, FIELD_HOST_PORT, FIELD_HOST_PASSWORD},
				FIELD_HOST_NICKNAME + ""=\"""" + nickname + ""\"""", null, null, null, null, null);
		if (cur != null) {
			if (cur.moveToFirst()) {
				clientId = new ClientId(cur);
			}
			cur.close();
		}
		return clientId;
	}",Fetch single host by nickname,1,164
1169,"static public XModelCommand createImmediateUndoCommand(XModelEvent event) {
		
		if(event.getChangeType() == ChangeType.REMOVE) {
			
			return MemoryModelCommand.createAddCommand(event.getTarget(), XCommand.SAFE,
			        event.getObjectId());
			
		} else {
			
			assert event.getChangeType() == ChangeType.ADD : ""unexpected change type for model events: ""
			        + event.getChangeType();
			
			long newRev = event.getOldModelRevision() + 1;
			
			return MemoryModelCommand.createRemoveCommand(event.getTarget(), newRev,
			        event.getObjectId());
			
		}
		
	}","Create a  XModelCommand that undoes the given  XModelEvent but will fail if there have been any conflicting changes since then, even if they have also been undone as the revision number remains changed.",1,167
1170,"public List<Short> getFunctionalColorGroup() {
        return colorGroup;
    }",Returns the functional color group id's as  List of this  FunctionalColorGroupEnum.,1,22
1171,"public Timer newTimer(Class<?> klass,
                                String name,
                                TimeUnit durationUnit,
                                TimeUnit rateUnit) {
        return newTimer(klass, name, null, durationUnit, rateUnit);
    }",Creates a new  Timer and registers it under the given class and name.,1,58
1172,"public DependencyInfo generateClientDependencyInfo() {
    DependencyInfo ret = new DependencyInfo();
    ret.id = mId;
    ret.parents = new ArrayList<Integer>(mParentFiles.size());
    ret.parents.addAll(mParentFiles);
    ret.children = new ArrayList<Integer>(mChildrenFiles.size());
    ret.children.addAll(mChildrenFiles);
    ret.data = BufferUtils.cloneByteBufferList(mData);
    return ret;
  }","Generate a DependencyInfo, which is used for the thrift server.",1,124
1173,"public List<Cell> list() {
    return isEmpty()? null: Arrays.asList(raw());
  }",Create a sorted list of the Cell's in this result.,1,37
1174,"private Object getPreviousDiff(Object start) {
		return getPreviousItemWithDiff(start);
	}","Returns, from the given item, the previous item that contains a diff.",1,25
1175,"public HttpRequest basic(final String name, final String password) {
		return authorization(""Basic "" + Base64.encode(name + "":"" + password));
	}",Set the 'Authorization' header to given values in Basic authentication format,1,55
1176,"public FunctionNode getDefiningFunction(Symbol symbol) {
        if (symbol.isTemp()) {
            return null;
        }
        final String name = symbol.getName();
        for (final Iterator<LexicalContextNode> iter = new NodeIterator<>(LexicalContextNode.class); iter.hasNext();) {
            final LexicalContextNode next = iter.next();
            if (next instanceof Block && ((Block)next).getExistingSymbol(name) == symbol) {
                while (iter.hasNext()) {
                    final LexicalContextNode next2 = iter.next();
                    if (next2 instanceof FunctionNode) {
                        return ((FunctionNode)next2);
                    }
                }
                throw new AssertionError(""Defining block for symbol "" + name + "" has no function in the context"");
            }
        }
        throw new AssertionError(""Couldn't find symbol "" + name + "" in the context"");
    }",Get the function in which a symbol is defined,1,251
1177,"static boolean execute(GraphBuilderContext b, ResolvedJavaMethod targetMethod, InvocationPlugin plugin, Receiver receiver, ValueNode[] argsIncludingReceiver) {
        if (plugin.isSignaturePolymorphic()) {
            return plugin.applyPolymorphic(b, targetMethod, receiver, argsIncludingReceiver);
        } else if (receiver != null) {
            assert !targetMethod.isStatic();
            assert argsIncludingReceiver.length > 0;
            if (argsIncludingReceiver.length == 1) {
                return plugin.apply(b, targetMethod, receiver);
            } else if (argsIncludingReceiver.length == 2) {
                return plugin.apply(b, targetMethod, receiver, argsIncludingReceiver[1]);
            } else if (argsIncludingReceiver.length == 3) {
                return plugin.apply(b, targetMethod, receiver, argsIncludingReceiver[1], argsIncludingReceiver[2]);
            } else if (argsIncludingReceiver.length == 4) {
                return plugin.apply(b, targetMethod, receiver, argsIncludingReceiver[1], argsIncludingReceiver[2], argsIncludingReceiver[3]);
            } else if (argsIncludingReceiver.length == 5) {
                return plugin.apply(b, targetMethod, receiver, argsIncludingReceiver[1], argsIncludingReceiver[2], argsIncludingReceiver[3], argsIncludingReceiver[4]);
            } else {
                return plugin.defaultHandler(b, targetMethod, receiver, argsIncludingReceiver);
            }
        } else {
            assert targetMethod.isStatic();
            if (argsIncludingReceiver.length == 0) {
                return plugin.apply(b, targetMethod, null);
            } else if (argsIncludingReceiver.length == 1) {
                return plugin.apply(b, targetMethod, null, argsIncludingReceiver[0]);
            } else if (argsIncludingReceiver.length == 2) {
                return plugin.apply(b, targetMethod, null, argsIncludingReceiver[0], argsIncludingReceiver[1]);
            } else if (argsIncludingReceiver.length == 3) {
                return plugin.apply(b, targetMethod, null, argsIncludingReceiver[0], argsIncludingReceiver[1], argsIncludingReceiver[2]);
            } else if (argsIncludingReceiver.length == 4) {
                return plugin.apply(b, targetMethod, null, argsIncludingReceiver[0], argsIncludingReceiver[1], argsIncludingReceiver[2], argsIncludingReceiver[3]);
            } else if (argsIncludingReceiver.length == 5) {
                return plugin.apply(b, targetMethod, null, argsIncludingReceiver[0], argsIncludingReceiver[1], argsIncludingReceiver[2], argsIncludingReceiver[3], argsIncludingReceiver[4]);
            } else {
                return plugin.defaultHandler(b, targetMethod, receiver, argsIncludingReceiver);
            }

        }
    }",Executes a given plugin against a set of invocation arguments by dispatching to the  apply(...) method that matches the number of arguments or to  #applyPolymorphic if  plugin is plain #isSignaturePolymorphic() signature polymorphic.,1,742
1178,"public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(
			P publisher, ParameterizedTypeReference<T> typeRef) {

		return (message, context) ->
				writeWithMessageWriters(message, context, publisher, ResolvableType.forType(typeRef.getType()));
	}",Inserter to write the given  Publisher.,1,87
1179,"public static Source fromText(CharSequence chars, String description) {
        CompilerAsserts.neverPartOfCompilation(""do not call Source.fromText from compiled code"");
        return new LiteralSource(description, chars.toString());
    }",Creates an anonymous source from literal text: not named and not indexed.,1,52
1180,"public long asLong() {
        assert getKind() == Kind.Long || getKind().getStackKind() == Kind.Int || getKind() == Kind.Jsr;
        return primitive;
    }",Returns the primitive long value this constant represents.,1,66
1181,"public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {
		// Check for XML files and redirect them to the XmlBeanDefinitionReader
		String filename = encodedResource.getResource().getFilename();
		if (StringUtils.endsWithIgnoreCase(filename, "".xml"")) {
			return this.xmlBeanDefinitionReader.loadBeanDefinitions(encodedResource);
		}

		Closure beans = new Closure(this) {
			public Object call(Object[] args) {
				invokeBeanDefiningClosure((Closure) args[0]);
				return null;
			}
		};
		Binding binding = new Binding() {
			@Override
			public void setVariable(String name, Object value) {
				if (currentBeanDefinition != null) {
					applyPropertyToBeanDefinition(name, value);
				}
				else {
					super.setVariable(name, value);
				}
			}
		};
		binding.setVariable(""beans"", beans);

		int countBefore = getRegistry().getBeanDefinitionCount();
		try {
			GroovyShell shell = new GroovyShell(getResourceLoader().getClassLoader(), binding);
			shell.evaluate(encodedResource.getReader(), encodedResource.getResource().getFilename());
		}
		catch (Throwable ex) {
			throw new BeanDefinitionParsingException(new Problem(""Error evaluating Groovy script: "" + ex.getMessage(),
					new Location(encodedResource.getResource()), null, ex));
		}
		return getRegistry().getBeanDefinitionCount() - countBefore;
	}",Load bean definitions from the specified Groovy script or XML file.,1,389
1182,"protected ExitStatus mapResult(Object result) {
		if (result instanceof ExitStatus) {
			return (ExitStatus) result;
		}
		return ExitStatus.COMPLETED;
	}","If the result is an  ExitStatus already just return that, otherwise return  ExitStatus#COMPLETED.",1,50
1183,"public TachyonFileSystem getClient(TachyonConf tachyonConf) throws IOException {
    final TachyonFileSystem fs = TachyonFileSystemFactory.get();
    mClients.add(fs);
    return fs;
  }",Returns a  tachyon.client.file.TachyonFileSystem client.,1,51
1184,"private UIFileInfo getUiFileInfo(FileSystem fileSystem, TachyonURI filePath)
      throws BlockDoesNotExistException, FileDoesNotExistException, InvalidPathException,
      IOException, TachyonException {
    URIStatus status;
    try {
      status = fileSystem.getStatus(filePath);
    } catch (TachyonException e) {
      throw new FileDoesNotExistException(filePath.toString());
    }
    UIFileInfo uiFileInfo = new UIFileInfo(status.getInfo());
    boolean blockExistOnWorker = false;
    for (long blockId : status.getBlockIds()) {
      if (mBlockDataManager.hasBlockMeta(blockId)) {
        blockExistOnWorker = true;
        BlockMeta blockMeta = mBlockDataManager.getVolatileBlockMeta(blockId);
        long blockSize = blockMeta.getBlockSize();
        // The block last access time is not available. Use -1 for now.
        // It's not necessary to show location information here since
        // we are viewing at the context of this worker.
        uiFileInfo.addBlock(blockMeta.getBlockLocation().tierAlias(), blockId, blockSize, -1);
      }
    }
    if (!blockExistOnWorker) {
      throw new FileDoesNotExistException(filePath.toString());
    }
    return uiFileInfo;
  }","Gets the  UIFileInfo object that represents the file id, or the file path if file id is -1.",1,269
1185,"public TasksEntry remove(long tasksEntryId)
		throws NoSuchTasksEntryException, SystemException {
		return remove(Long.valueOf(tasksEntryId));
	}",Removes the tasks entry with the primary key from the database.,1,38
1186,"public static double get(MetricKey<ASTMethodOrConstructorDeclaration> key, ASTMethodOrConstructorDeclaration node, MetricVersion version) {
        return FACADE.computeForOperation(key, node, version);
    }",Computes a metric identified by its key on a operation AST node.,1,48
1187,"public final CharSequence urlFor(final IBehavior behaviour,
			final RequestListenerInterface listener)
	{
		return getRequestCycle().urlFor(this, behaviour, listener);
	}",Gets a URL for the listener interface on a behaviour (e.g.,1,48
1188,"public List<AbstractLesson> getLessons(WebSession s, Category category, List<String> roles) {
        if (s.isHackedAdmin()) {
            roles.add(AbstractLesson.HACKED_ADMIN_ROLE);
        }
        return getLessons(category, roles);
    }",Getter for the field lessons.,1,71
1189,"public DataSource dataSource() throws SQLException {
        Preconditions.checkState(isValidConfiguration(), ""The orchestration configuration is invalid, please choose one from Sharding rule and Master-slave rule."");
        return isShardingRule() ? createShardingDataSource() : isEncryptRule() ? createEncryptDataSource() : createMasterSlaveDataSource();
    }",Get data source bean.,1,65
1190,"public final LocationOperand asLocation() {
    return (LocationOperand) this;
  }",Cast to an  LocationOperand.,1,25
1191,"public static HornetQConnectionFactory createConnectionFactory()
   {
      return new HornetQConnectionFactory();
   }",Creates a HornetQConnectionFactory using all the defaults.,1,26
1192,"@RunsInCurrentThread
  public static Point centerOf(Node n) {
    Bounds bounds = n.get$boundsInLocal();
    return new Point(n.localToScene(bounds.get$width() / 2, bounds.get$height() / 2));
  }",Returns the coordinates of the center of the given  Node.,1,70
1193,"public Collection<Affiliate> getOutcasts() throws NoResponseException, XMPPErrorException, NotConnectedException {
        return getAffiliatesByAdmin(""outcast"");
    }",Returns a collection of Affiliate with the room outcasts.,1,37
1194,"public synchronized String[] getRemoteUuids(String address) {
        mContext.enforceCallingOrSelfPermission(BLUETOOTH_PERM, ""Need BLUETOOTH permission"");
        if (!BluetoothAdapter.checkBluetoothAddress(address)) {
            return null;
        }
        String value = getRemoteDeviceProperty(address, ""UUIDs"");
        String[] uuids = null;
        // The UUIDs are stored as a "","" separated string.
        if (value != null)
             uuids = value.split("","");
        return uuids;
    }",Gets the remote features encoded as bit mask.,1,124
1195,"public ExtensionModel getExtensionModel(Artifact plugin, Class extensionClass) {
    final StaticVersionResolver versionResolver = new StaticVersionResolver(plugin.getVersion());
    return extensionsInfrastructure.discoverExtension(extensionClass, versionResolver);
  }",Discovers the extension and builds the  ExtensionModel.,1,56
1196,"public List<OfflineMessageHeader> getHeaders() throws NoResponseException, XMPPErrorException, NotConnectedException {
        List<OfflineMessageHeader> answer = new ArrayList<OfflineMessageHeader>();
        DiscoverItems items = ServiceDiscoveryManager.getInstanceFor(connection).discoverItems(
                null, namespace);
        for (DiscoverItems.Item item : items.getItems()) {
            answer.add(new OfflineMessageHeader(item));
        }
        return answer;
    }",Returns a List of OfflineMessageHeader that keep information about the offline message.,1,115
1197,"public final Markup getMarkup(final MarkupContainer container, final boolean enforceReload)
	{
		return getMarkup(container, container.getClass(), enforceReload);
	}",Get the markup associated with the container.,1,47
1198,"public TextAnchor getTextAnchor() {
    	Object value = layout.get(""text-anchor"");
		if (value != null && ""left"".equalsIgnoreCase((String) value)) {
			return TextAnchor.LEFT;
		} else if (value != null && ""right"".equalsIgnoreCase((String) value)){
			return TextAnchor.RIGHT;
		} else if (value != null && ""top"".equalsIgnoreCase((String) value)){
			return TextAnchor.TOP;
		} else if (value != null && ""bottom"".equalsIgnoreCase((String) value)){
			return TextAnchor.BOTTOM;
		} else if (value != null && ""top-left"".equalsIgnoreCase((String) value)){
			return TextAnchor.TOP_LEFT;
		} else if (value != null && ""top-right"".equalsIgnoreCase((String) value)){
			return TextAnchor.TOP_RIGHT;
		} else if (value != null && ""bottom-left"".equalsIgnoreCase((String) value)){
			return TextAnchor.BOTTOM_LEFT;
		} else if (value != null && ""bottom-right"".equalsIgnoreCase((String) value)){
			return TextAnchor.BOTTOM_RIGHT;
		} else {
			return TextAnchor.CENTER;
		}
    }",Optional enum.,1,373
1199,"public ExitStatus and(ExitStatus status) {
		if (status == null) {
			return this;
		}
		return and(status.continuable).replaceExitCode(status.exitCode).addExitDescription(status.exitDescription);
	}","Create a new  ExitStatus with a logical combination of the continuable flag, and a concatenation of the codes.",1,64
1200,"public static int getPrediction( float[] preds, double data[] ) {
    int best=1, tieCnt=0;   // Best class; count of ties 
    for( int c=2; c<preds.length; c++) {
      if( preds[best] < preds[c] ) {
        best = c;               // take the max index
        tieCnt=0;               // No ties
      } else if (preds[best] == preds[c]) {
        tieCnt++;               // Ties
      }
    }
    if( tieCnt==0 ) return best-1; // Return zero-based best class
    // Tie-breaking logic
    float res = preds[best];    // One of the tied best results
    long hash = 0;              // hash for tie-breaking
    if( data != null ) 
      for( double d : data ) hash ^= Double.doubleToRawLongBits(d);
    int idx = (int)hash%(tieCnt+1);  // Which of the ties we'd like to keep
    for( best=1; best<preds.length; best++)
      if( res == preds[best] && --idx < 0 )
        return best-1;          // Return best
    throw H2O.fail();           // Should Not Reach Here
  }",Utility function to get a best prediction from an array of class prediction distribution.,1,327
1201,"public static IStatus error(final String message, final Throwable thr) {
		return new Status(IStatus.ERROR, getPluginId(), 0,	message, thr);
	}",Utility to create an error status for this plug-in.,1,54
1202,"public SocksAuthScheme authScheme() {
        return authScheme;
    }",Returns the  SocksAuthScheme of this  SocksInitResponse,1,19
1203,"public static byte[] serialize(Object obj, DataHandler dataHandler) {
        try {
            JavaObjectSerializer dbJavaObjectSerializer = null;
            if (dataHandler != null) {
                dbJavaObjectSerializer = dataHandler.getJavaObjectSerializer();
            }
            if (dbJavaObjectSerializer != null) {
                return dbJavaObjectSerializer.serialize(obj);
            }
            if (serializer != null) {
                return serializer.serialize(obj);
            }
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            ObjectOutputStream os = new ObjectOutputStream(out);
            os.writeObject(obj);
            return out.toByteArray();
        } catch (Throwable e) {
            throw DbException.get(ErrorCode.SERIALIZATION_FAILED_1, e, e.toString());
        }
    }","Serialize the object to a byte array, eventually using the serializer specified by the connection info.",1,212
1204,"public static Closeable create(final URI uri, SSLContext context, final ApplicationHandler appHandler) throws ProcessingException {
        return create(uri, context, new SimpleContainer(appHandler));
    }",Creates HttpServer instance.,1,56
1205,"synchronized public Collection<ContentObserver> getContentObservers( Uri uri ) {
    CopyOnWriteArraySet<ContentObserver> observers = contentObservers.get(uri);
    return (observers == null) ? Collections.<ContentObserver>emptyList() : observers;
  }",Returns the content observers registered with the given URI.,1,69
1206,"public static InvocationHandlerAdapter of(InvocationHandler invocationHandler, String fieldName) {
        return new ForStaticDelegation(nonNull(invocationHandler), isValidIdentifier(fieldName), false);
    }",Creates an instrumentation for any instance of an  java.lang.reflect.InvocationHandler that delegates all method interceptions to the given instance which will be stored in a  static field.,1,46
1207,"public static BlockInStream create(FileSystemContext context, BlockInfo info,
      WorkerNetAddress dataSource, BlockInStreamSource dataSourceType, InStreamOptions options)
      throws IOException {
    URIStatus status = options.getStatus();
    OpenFileOptions readOptions = options.getOptions();

    boolean promote = readOptions.getReadType().isPromote();

    long blockId = info.getBlockId();
    long blockSize = info.getLength();

    // Construct the partial read request
    Protocol.ReadRequest.Builder builder =
        Protocol.ReadRequest.newBuilder().setBlockId(blockId).setPromote(promote);
    // Add UFS fallback options
    builder.setOpenUfsBlockOptions(options.getOpenUfsBlockOptions(blockId));

    boolean shortCircuit = Configuration.getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED);
    boolean sourceSupportsDomainSocket = NettyUtils.isDomainSocketSupported(dataSource);
    boolean sourceIsLocal = dataSourceType == BlockInStreamSource.LOCAL;

    // Short circuit
    if (sourceIsLocal && shortCircuit && !sourceSupportsDomainSocket) {
      LOG.debug(""Creating short circuit input stream for block {} @ {}"", blockId, dataSource);
      try {
        return createLocalBlockInStream(context, dataSource, blockId, blockSize, options);
      } catch (NotFoundException e) {
        // Failed to do short circuit read because the block is not available in Alluxio.
        // We will try to read via netty. So this exception is ignored.
        LOG.warn(""Failed to create short circuit input stream for block {} @ {}. Falling back to ""
            + ""network transfer"", blockId, dataSource);
      }
    }

    // Netty
    LOG.debug(""Creating netty input stream for block {} @ {} from client {} reading through {}"",
        blockId, dataSource, NetworkAddressUtils.getClientHostName(), dataSource);
    return createNettyBlockInStream(context, dataSource, dataSourceType, builder.buildPartial(),
        blockSize, options);
  }",Creates a  BlockInStream.,1,399
1209,"public T create(final Environment sourceEnv) throws InfrastructureException, ValidationException {

    Map<String, InternalMachineConfig> machines = new HashMap<>();
    List<Warning> warnings = new ArrayList<>();
    if (sourceEnv.getWarnings() != null) {
      warnings.addAll(sourceEnv.getWarnings());
    }

    InternalRecipe recipe = recipeRetriever.getRecipe(sourceEnv.getRecipe());

    for (Map.Entry<String, ? extends MachineConfig> machineEntry :
        sourceEnv.getMachines().entrySet()) {
      MachineConfig machineConfig = machineEntry.getValue();

      List<Installer> installers;
      try {
        installers = installerRegistry.getOrderedInstallers(machineConfig.getInstallers());
      } catch (InstallerException e) {
        throw new InfrastructureException(e);
      }

      machines.put(
          machineEntry.getKey(),
          new InternalMachineConfig(
              installers,
              normalizeServers(machineConfig.getServers()),
              machineConfig.getEnv(),
              machineConfig.getAttributes()));
    }

    machinesValidator.validate(machines);

    return doCreate(recipe, machines, warnings);
  }",Creates a valid instance of InternalEnvironment.,1,314
1210,"public static ValueTimestamp parse(String s, Mode mode) {
        try {
            return parseTry(s, mode);
        } catch (Exception e) {
            throw DbException.get(ErrorCode.INVALID_DATETIME_CONSTANT_2,
                    e, ""TIMESTAMP"", s);
        }
    }","Parse a string to a ValueTimestamp, using the given  Mode.",1,81
1211,"public <M> M getData(final DataKey<M> key) {
        if (data == null) {
            return null;
        }
        return (M) data.get(key);
    }",Gets data for this component using the given key.,1,63
1212,"public double DistanceToPoint(double latitude, double longitude) {
    return GeometryUtil.distanceBetween(this, new GeoPoint(latitude, longitude));
  }","Compute the distance, in meters, between a `Marker` and a `latitude`, `longitude` point.",1,43
1213,"public String getReadResponse() {
        return getPropertyAsString(STORE_RESPONSE);
    }",return whether the sampler should store the response,1,22
1215,"public Chat createPrivateChat(String occupant) {
        return new Chat(connection, occupant);
    }",Returns a new Chat for sending private messages to a given room occupant.,1,30
1216,"public DateTimeFieldType getUpperLimit() {
        return iUpperLimit;
    }",Gets the field type that represents the upper limit of comparison.,1,19
1217,"public PaletteDrawer getCategory() {
	return (PaletteDrawer)getPaletteEntry();
}",Convenience method that provides access to the PaletteDrawer that is the model.,1,23
1218,"public static byte[] normalize(byte[] bytes) {
        JSONByteArrayTarget target = new JSONByteArrayTarget();
        parse(bytes, target);
        return target.getResult();
    }",Converts bytes into normalized JSON representation.,1,56
1219,"protected BlockInStream createUnderStoreBlockInStream(long blockStart, long length, String path)
      throws IOException {
    return new UnderStoreBlockInStream(blockStart, length, mBlockSize,
        getUnderStoreStreamFactory(path, mContext));
  }",Creates and returns a  BlockInStream for the UFS.,1,58
1220,"static Expression catenateExpressions(List<Expression> expressions) {
        if(expressions == null || expressions.size() == 0)
            throw new IllegalArgumentException(""You should provide at least one expression in the list"");
        
        if(expressions.size()==1) {
        	return expressions.get(0);
        } else {
        	return ff.function(""Concatenate"", expressions.toArray(new Expression[] {}));
        }
    }",Given an expression list will create an expression concatenating them.,1,123
1221,"@Override
	public String getDefault() {
		return null;
	}",Returns the default value of @odf.attribute chart:auto-size.,1,22
1222,"public Timer newTimer(MetricName metricName,
                                TimeUnit durationUnit,
                                TimeUnit rateUnit) {
        final Metric existingMetric = metrics.get(metricName);
        if (existingMetric != null) {
            return (Timer) existingMetric;
        }
        return getOrAdd(metricName,
                        new Timer(newMeterTickThreadPool(), durationUnit, rateUnit));
    }",Creates a new  Timer and registers it under the given metric name.,1,98
1223,"protected boolean add(SimpleFeature feature, boolean fire) {

        // This cast is neccessary to keep with the contract of Set!
        if (feature == null)
            return false; // cannot add null!
        final String ID = feature.getID();
        if (ID == null)
            return false; // ID is required!
        if (contents.containsKey(ID))
            return false; // feature all ready present

        if (this.schema == null) {
            this.schema = feature.getFeatureType();
        }
        SimpleFeatureType childType = (SimpleFeatureType) getSchema();
        // if ( childType==null ){
        // //this.childType=
        // }else{
        if (!feature.getFeatureType().equals(childType))
            LOGGER.warning(""Feature Collection contains a heterogeneous"" + "" mix of features"");

        // }
        // TODO check inheritance with FeatureType here!!!
        contents.put(ID, feature);
//        if (fire) {
//            fireChange(feature, CollectionEvent.FEATURES_ADDED);
//        }
        return true;
    }",Add a feature (safely to the internal collection).,1,225
1224,"public RealmResults<E> findAllSortedAsync(String fieldNames[], final Sort[] sortOrders) {
        checkQueryIsNotReused();
        checkSortParameters(fieldNames, sortOrders);

        if (fieldNames.length == 1 && sortOrders.length == 1) {
            return findAllSortedAsync(fieldNames[0], sortOrders[0]);

        } else {
            final WeakReference<Handler> weakHandler = getWeakReferenceHandler();

            // Handover the query (to be used by a worker thread)
            final long handoverQueryPointer = query.handoverQuery(realm.sharedGroupManager.getNativePointer());

            // We need to use the same configuration to open a background SharedGroup to perform the query
            final RealmConfiguration realmConfiguration = realm.getConfiguration();

            final long indices[] = new long[fieldNames.length];
            for (int i = 0; i < fieldNames.length; i++) {
                String fieldName = fieldNames[i];
                Long columnIndex = schema.getFieldIndex(fieldName);
                if (columnIndex == null || columnIndex < 0) {
                    throw new IllegalArgumentException(String.format(""Field name '%s' does not exist."", fieldName));
                }
                indices[i] = columnIndex;
            }

            // capture the query arguments for future retries & update
            argumentsHolder = new ArgumentsHolder(ArgumentsHolder.TYPE_FIND_ALL_MULTI_SORTED);
            argumentsHolder.sortOrders = sortOrders;
            argumentsHolder.columnIndices = indices;

            // prepare the promise result
            RealmResults<E> realmResults = new RealmResults<E>(realm, query, clazz);
            final WeakReference<RealmResults<?>> weakRealmResults = new WeakReference<RealmResults<?>>(realmResults, realm.getReferenceQueue());
            realm.addAsyncRealmResults(weakRealmResults, this);

            final Future<Long> pendingQuery = Realm.asyncQueryExecutor.submit(new Callable<Long>() {
                @Override
                public Long call() throws Exception {
                    if (!Thread.currentThread().isInterrupted()) {
                        SharedGroup sharedGroup = null;

                        try {
                            sharedGroup = new SharedGroup(realmConfiguration.getPath(),
                                    SharedGroup.IMPLICIT_TRANSACTION,
                                    realmConfiguration.getDurability(),
                                    realmConfiguration.getEncryptionKey());

                            // run the query & handover the table view for the caller thread
                            long handoverTableViewPointer = query.findAllMultiSortedWithHandover(sharedGroup.getNativePointer(),
                                    sharedGroup.getNativeReplicationPointer(), handoverQueryPointer, indices, sortOrders);

                            QueryUpdateTask.Result result = QueryUpdateTask.Result.newRealmResultsResponse();
                            result.updatedTableViews.put(weakRealmResults, handoverTableViewPointer);
                            result.versionID = sharedGroup.getVersion();
                            sendMessageToHandler(weakHandler, HandlerController.REALM_COMPLETED_ASYNC_QUERY, result);

                            return handoverTableViewPointer;
                        } catch (Exception e) {
                            RealmLog.e(e.getMessage());
                            sendMessageToHandler(weakHandler, HandlerController.REALM_ASYNC_BACKGROUND_EXCEPTION, new Error(e));

                        } finally {
                            if (sharedGroup != null) {
                                sharedGroup.close();
                            }
                        }
                    } else {
                        TableQuery.nativeCloseQueryHandover(handoverQueryPointer);
                    }

                    return INVALID_NATIVE_POINTER;
                }
            });

            realmResults.setPendingQuery(pendingQuery);
            return realmResults;
        }
    }","Similar to  #findAllSorted(String[], Sort[]) but runs asynchronously from a worker thread.",1,788
1225,"public static boolean intersectPolygons (Polygon p1, Polygon p2, Polygon overlap) {
		//reusable points to trace edges around polygon
		floatArray2.clear();
		floatArray.clear();
		floatArray2.addAll(p1.getTransformedVertices());
		if (p1.getVertices().length == 0 || p2.getVertices().length == 0) {
			return false;
		}
		for (int i = 0; i < p2.getTransformedVertices().length; i += 2) {
			ep1.set(p2.getTransformedVertices()[i], p2.getTransformedVertices()[i+1]);
			//wrap around to beginning of array if index points to end;
			if (i < p2.getTransformedVertices().length - 2) {
				ep2.set(p2.getTransformedVertices()[i + 2], p2.getTransformedVertices()[i + 3]);
			} else {
				ep2.set(p2.getTransformedVertices()[0], p2.getTransformedVertices()[1]);
			}
			if (floatArray2.size == 0) {
				return false;
			}
			s.set(floatArray2.get(floatArray2.size - 2), floatArray2.get(floatArray2.size - 1));
			for (int j = 0; j < floatArray2.size; j += 2) {
				e.set(floatArray2.get(j), floatArray2.get(j + 1));
				//determine if point is inside clip edge
				if (Intersector.pointLineSide(ep2, ep1, e) > 0) {
					if (!(Intersector.pointLineSide(ep2, ep1, s) > 0)) {
						Intersector.intersectLines(s, e, ep1, ep2, ip);
						if (floatArray.size < 2 || floatArray.get(floatArray.size-2) != ip.x || floatArray.get(floatArray.size-1) != ip.y)
						{
							floatArray.add(ip.x);
							floatArray.add(ip.y);
						}
					}
					floatArray.add(e.x);
					floatArray.add(e.y);
				} else if (Intersector.pointLineSide(ep2, ep1, s) > 0) {
					Intersector.intersectLines(s, e, ep1, ep2, ip);
					floatArray.add(ip.x);
					floatArray.add(ip.y);
				}
				s.set(e.x, e.y);
			}
			floatArray2.clear();
			floatArray2.addAll(floatArray);
			floatArray.clear();
		}
		if (! (floatArray2.size == 0)) {
			overlap.setVertices(floatArray2.toArray());
			return true;
		} else {
			return false;
		}
	}",Intersects two resulting polygons with the same winding and sets the overlap polygon resulting from the intersection.,1,742
1226,"public static ChangePasswordUdpProtocolCodecFactory getInstance()
    {
        return INSTANCE;
    }",Returns the singleton instance of  ChangePasswordUdpProtocolCodecFactory.,1,22
1227,"public static Operator createUnionCascade(List<Operator> operators) {
		return createUnionCascade((Operator[]) operators.toArray(new Operator[operators.size()]));
	}","Takes a list of operators and creates a cascade of unions of this inputs, if needed.",1,50
1228,"public ExitStatus and(ExitStatus status) {
		if (status == null) {
			return this;
		}
		ExitStatus result = and(status.continuable).addExitDescription(status.exitDescription);
		if (result.continuable || !status.continuable) {
			result = result.replaceExitCode(status.exitCode);
		}
		return result;
	}","Create a new  ExitStatus with a logical combination of the continuable flag, and a concatenation of the descriptions.",1,104
1229,"private int getDiscretizerParallelism(WindowTransformation transformation) {
		return isLocal
				|| (transformation == WindowTransformation.REDUCEWINDOW && WindowUtils
						.isParallelPolicy(getTrigger(), getEviction(), dataStream.getParallelism()))
				|| (discretizerKey != null) ? dataStream.environment.getParallelism() : 1;

	}",Returns the parallelism for the stream discretizer.,1,91
1230,"public static Rule<Date> after(Date when) {
        Preconditions.checkNotNull(when, ""When"");
        return new AfterRule(when);
    }",Creates a  Rule which evaluates to true when passed in a date which is after the specified date.,1,46
1231,"public static Object getField(Object targetObject, Class<?> targetClass, String name) {
		Assert.isTrue(targetObject != null || targetClass != null,
			""Either targetObject or targetClass for the field must be specified"");

		Object ultimateTarget = (targetObject != null ? AopTestUtils.getUltimateTargetObject(targetObject) : null);

		if (targetClass == null) {
			targetClass = ultimateTarget.getClass();
		}

		Field field = ReflectionUtils.findField(targetClass, name);
		if (field == null) {
			throw new IllegalArgumentException(String.format(""Could not find field '%s' on %s or target class [%s]"",
					name, safeToString(ultimateTarget), targetClass));
		}

		if (logger.isDebugEnabled()) {
			logger.debug(String.format(""Getting field '%s' from %s or target class [%s]"", name,
					safeToString(ultimateTarget), targetClass));
		}
		ReflectionUtils.makeAccessible(field);
		return ReflectionUtils.getField(field, ultimateTarget);
	}",Get the value of the plain Field field with the given  name from the provided  targetObject/ targetClass.,1,258
1232,"public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {
		return (message, context) ->
				writeWithMessageWriters(message, context, Mono.just(body), ResolvableType.forInstance(body));
	}",Inserter to write the given object.,1,67
1233,"public static AlluxioStatusException from(Throwable ex) {
    try {
      throw ex;
    } catch (IOException e) {
      return fromIOException(e);
    } catch (AlluxioException e) {
      return fromAlluxioException(e);
    } catch (RuntimeException e) {
      return fromRuntimeException(e);
    } catch (Exception e) {
      return new UnknownException(e);
    } catch (Throwable t) {
      return new InternalException(t);
    }
  }",Converts throwables to Alluxio status exceptions.,1,146
1234,"public static CiConstant forJsr(int i) {
        return new CiConstant(CiKind.Jsr, i);
    }",Utility method to create a value type for an address (jsr/ret address) constant.,1,34
1235,"public boolean contains(byte[] fingerprint)
        throws PGPException
    {
        return getPublicKey(fingerprint) != null;
    }","Return true if a key matching the passed in fingerprint is present, false otherwise.",1,38
1236,"public static CharSequence getMimeType(CharSequence contentTypeValue) {
        if (contentTypeValue == null) {
            throw new NullPointerException(""contentTypeValue"");
        }

        int indexOfSemicolon = AsciiString.indexOfIgnoreCaseAscii(contentTypeValue, SEMICOLON, 0);
        if (indexOfSemicolon != AsciiString.INDEX_NOT_FOUND) {
            return contentTypeValue.subSequence(0, indexOfSemicolon);
        } else {
            return contentTypeValue.length() > 0 ? contentTypeValue : null;
        }
    }",Fetch MIME type part from Content-Type header value as a char sequence.,1,132
1237,"private boolean updateState(State previous,State next)
    {
        if (!isTransitionAllowed(previous,next))
            throw new IllegalStateException();
        
        return _state.compareAndSet(previous,next); 
    }",Tries to update the current state to the given new state.,1,60
1238,"public static SharedLibrary loadNative(Configuration name, String... defaultNames) {
		if ( defaultNames.length == 1 || name.get() != null )
			return loadNative(name.get(defaultNames[0]));
		else {
			if ( defaultNames.length == 0 )
				throw new RuntimeException(""No default names specified."");

			SharedLibrary library = null;
			try {
				library = Library.loadNative(defaultNames[0]); // try first
			} catch (Exception e) {
				for ( int i = 1; i < defaultNames.length; i++ ) { // try alternatives
					try {
						library = Library.loadNative(defaultNames[i]);
						break;
					} catch (Exception ignored) {
					}
				}
				if ( library == null )
					throw new RuntimeException(""Failed to load library."", e); // original exception
			}
			return library;
		}
	}",Loads a shared library using  #loadNative(String) with the name specified by  name.,1,275
1239,"private static XAResourceProducer instanciate(String xaResourceClassName) throws ClassNotFoundException, IllegalAccessException, InstantiationException {
        Class clazz = Thread.currentThread().getContextClassLoader().loadClass(xaResourceClassName);

        // resource classes are instanciated via reflection so that there is no hard class binding between this internal
        // transaction manager service and 3rd party libraries like the JMS ones.
        // This allows using the TM with a 100% JDBC application without requiring JMS libraries.

        if (XADataSource.class.isAssignableFrom(clazz)) {
            return (XAResourceProducer) Thread.currentThread().getContextClassLoader().loadClass(JDBC_RESOUCE_CLASSNAME).newInstance();
        }
        else if (XAConnectionFactory.class.isAssignableFrom(clazz)) {
            return (XAResourceProducer) Thread.currentThread().getContextClassLoader().loadClass(JMS_RESOUCE_CLASSNAME).newInstance();
        }
        else
            return null;
    }",Create an unitialized  XAResourceProducer implementation which depends on the XA resource class name.,1,165
1240,"public static Query applySorting(Query spec, Sort sort) {

        if (sort == null) {
            return spec;
        }

        // TODO apply sorting
        // spec.

        return spec;
    }",Applies the given  Sort to the  Query.,1,61
1241,"public static List<MediaType> createFrom(Consumes annotation) {
        if (annotation == null) {
            return WILDCARD_TYPE_SINGLETON_LIST;
        }

        return createFrom(annotation.value());
    }",Create an unmodifiable list of media types from the values declared in the  Consumes annotation.,1,58
1242,"public CorsConfig build() {
        if (preflightHeaders.isEmpty() && !noPreflightHeaders) {
            preflightHeaders.put(""date"", DateValueGenerator.INSTANCE);
            preflightHeaders.put(""content-length"", new ConstantValueGenerator(""0""));
        }
        return new CorsConfig(this);
    }",Builds a  CorsConfig with settings specified by previous method calls.,1,83
1243,"public List<String> getHighestRated(int offset, int count) {
        if (count < 1) {
            return new ArrayList<String>();
        }
        String sql = ""select path from user_rating "" +
                     ""group by path "" +
                     ""order by avg(rating) desc "" +
                     "" limit "" + count + "" offset "" + offset;
        return getJdbcTemplate().queryForList(sql, String.class);
    }",Returns paths for the highest rated music files.,1,118
1244,"public long getCount(DBObject query){
        return getCount(query, null);
    }","calls  DBCollection#getCount(com.mongodb.DBObject, com.mongodb.DBObject) with null fields.",1,27
1245,"public static boolean isWhitespace(final String str) {
    if (""\u0002"".equals(str) // unbreakable field, e.g. a footnote number in OOo
        || ""\u0001"".equals(str)) { // breakable field in OOo
      return false;
    }
    final String trimStr = str.trim();
    if (isEmpty(trimStr)) {
      return true;
    }
    if (trimStr.length() == 1) {
      if (""\u200B"".equals(str)) {
        // We need u200Bââ to be detected as whitespace for Khmer, as it was the case before Java 7.
        return true;
      } else if (""\u00A0"".equals(str)) {  // non-breaking space
        return true;
      }
      return Character.isWhitespace(trimStr.charAt(0));
    }
    return false;
  }","Checks if a string contains only whitespace, including all Unicode whitespace, and the non-breaking space.",1,202
1246,"public String prefix()
    {
        return prefix;
    }",Get the prefix for the additional action to be taken on the request.,1,20
1247,"public static String[] split(String partitionOrTemplateName) {
        List<String> splitted = Splitter.on(""."").splitToList(partitionOrTemplateName);
        if (!indexNamePartsPredicate.apply(splitted)) {
            throw new IllegalArgumentException(""Invalid partition name"");
        }
        switch(splitted.size()) {
            case 4:
                return new String[]{ null, splitted.get(2), DOT_JOINER.join(splitted.subList(3, splitted.size()))};
            case 5:
                return new String[]{ splitted.get(0), splitted.get(3), DOT_JOINER.join(splitted.subList(4, splitted.size())) };
            default:
                throw new IllegalArgumentException(""Invalid partition name"");
        }
    }","split a given partition name or template name into its parts schemaName, tableName and valuesString.",1,210
1248,"public boolean equals (final MeshPart other) {
		return other == this
			|| (other != null && other.mesh == mesh && other.primitiveType == primitiveType && other.offset == offset && other.size == size);
	}","Compares this MeshPart to the specified MeshPart and returns true if they both reference the same  Mesh and the  #offset,  #size and  #primitiveType members are equal.",1,91
1249,"public synchronized int lock(long blockId) {
    int locker = mBlockLockId.incrementAndGet();
    if (!mLockedBlockIds.containsKey(blockId)) {
      mWorkerStorage.lockBlock(blockId, mUserId);
      mLockedBlockIds.put(blockId, new HashSet<Integer>());
    }
    mLockedBlockIds.get(blockId).add(locker);
    return locker;
  }",Lock a block.,1,101
1250,"public static XDoubleListValue removeDoubleFromList(XID actorID, XField field, double doubleVal) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XDoubleListValue) {
			XDoubleListValue listValue = (XDoubleListValue)value;
			
			// manipulate the contained list
			List<Double> list = XX.asList(listValue);
			list.remove(doubleVal);
			
			listValue = toDoubleListValue(list);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Removes the first occurrence of the given Double from the  XDoubleListValue of the given  XField,1,172
1251,"public static FilterTemplate newLdaptiveSearchFilter(final String filterQuery, final String paramName, final List<String> params) {
        val filter = new FilterTemplate();
        filter.setFilter(filterQuery);
        if (params != null) {
            IntStream.range(0, params.size()).forEach(i -> {
                if (filter.getFilter().contains(""{"" + i + '}')) {
                    filter.setParameter(i, params.get(i));
                } else {
                    filter.setParameter(paramName, params.get(i));
                }
            });
        }
        LOGGER.debug(""Constructed LDAP search filter [{}]"", filter.format());
        return filter;
    }",Constructs a new search filter.,1,202
1252,"@NonNull
        public ContentResolverTypeDefaults<T> build() {
            return new ContentResolverTypeDefaults<T>(
                    putResolver,
                    getResolver,
                    deleteResolver
            );
        }",Builds new immutable instance of  ContentResolverTypeDefaults.,1,45
1253,"@SchedulerSupport(SchedulerSupport.NONE)
    public final TestObserver<T> test() {
        TestObserver<T> ts = new TestObserver<T>();
        subscribe(ts);
        return ts;
    }",Creates a TestObserver and subscribes it to this Single.,1,59
1254,"private Optional<BlockInfo> generateBlockInfo(long blockId) throws UnavailableException {
    if (mSafeModeManager.isInSafeMode()) {
      throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage());
    }

    BlockMeta block;
    List<BlockLocation> blockLocations;
    try (LockResource lr = lockBlock(blockId)) {
      Optional<BlockMeta> blockOpt = mBlockStore.getBlock(blockId);
      if (!blockOpt.isPresent()) {
        return Optional.empty();
      }
      block = blockOpt.get();
      blockLocations = new ArrayList<>(mBlockStore.getLocations(blockId));
    }

    // Sort the block locations by their alias ordinal in the master storage tier mapping
    Collections.sort(blockLocations,
        Comparator.comparingInt(o -> mGlobalStorageTierAssoc.getOrdinal(o.getTier())));

    List<alluxio.wire.BlockLocation> locations = new ArrayList<>();
    for (BlockLocation location : blockLocations) {
      MasterWorkerInfo workerInfo =
          mWorkers.getFirstByField(ID_INDEX, location.getWorkerId());
      if (workerInfo != null) {
        // worker metadata is intentionally not locked here because:
        // - it would be an incorrect order (correct order is lock worker first, then block)
        // - only uses getters of final variables
        locations.add(new alluxio.wire.BlockLocation().setWorkerId(location.getWorkerId())
            .setWorkerAddress(workerInfo.getWorkerAddress())
            .setTierAlias(location.getTier()));
      }
    }
    return Optional.of(
        new BlockInfo().setBlockId(blockId).setLength(block.getLength()).setLocations(locations));
  }","Generates block info, including worker locations, for a block id.",1,381
1255,"public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the last index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex will return  #INDEX_NOT_FOUND (-1).,1,172
1256,"public Document toDbObject() {

		Document dbo = new Document();
		dbo.put(ALLOW_DISK_USE, allowDiskUse);
		dbo.put(EXPLAIN, explain);
		dbo.put(CURSOR, cursor);

		return dbo;
	}",Returns a  Document representation of this  AggregationOptions.,1,71
1257,"public PushOperatorBuilder push(String key) {

		if (!pushCommandBuilders.containsKey(key)) {
			pushCommandBuilders.put(key, new PushOperatorBuilder(key));
		}
		return pushCommandBuilders.get(key);
	}",Update using  $push modifier.,1,63
1258,"private UiFileInfo getUiFileInfo(TachyonFS tachyonClient, long fileId, TachyonURI filePath)
      throws FileDoesNotExistException, NotFoundException, IOException {
    FileInfo fileInfo = tachyonClient.getFileStatus(fileId, filePath, true);
    if (fileInfo == null) {
      throw new FileDoesNotExistException(fileId != -1 ? Long.toString(fileId)
          : filePath.toString());
    }

    UiFileInfo uiFileInfo = new UiFileInfo(fileInfo);
    boolean blockExistOnWorker = false;
    for (long blockId : fileInfo.getBlockIds()) {
      if (mBlockDataManager.hasBlockMeta(blockId)) {
        blockExistOnWorker = true;
        BlockMeta blockMeta = mBlockDataManager.getVolatileBlockMeta(blockId);
        long blockSize = blockMeta.getBlockSize();
        StorageLevelAlias storageLevelAlias =
            StorageDirId.getStorageLevelAlias(blockMeta.getParentDir().getStorageDirId());
        // The block last access time is not available. Use -1 for now.
        // It's not necessary to show location information here since
        // we are viewing at the context of this worker.
        uiFileInfo.addBlock(storageLevelAlias, blockId, blockSize, -1);
      }
    }
    if (!blockExistOnWorker) {
      throw new FileDoesNotExistException(fileId != -1 ? Long.toString(fileId)
          : filePath.toString());
    }
    return uiFileInfo;
  }","Gets the UiFileInfo object that represents the fileId, or the filePath if fileId is -1.",1,318
1259,"public static boolean contains(IPolyShape ps, IShape s) {
		for (ICurve c : s.getOutlineSegments()) {
			if (!contains(ps, c)) {
				return false;
			}
		}
		return true;
	}",Checks if the  IShape is contained by the  IPolyShape.,1,76
1260,"public final CharSequence urlFor(final PageMap pageMap, final Class<? extends Page> pageClass,
			final PageParameters parameters)
	{
		final IRequestTarget target = new BookmarkablePageRequestTarget(pageMap == null
				? PageMap.DEFAULT_NAME
				: pageMap.getName(), pageClass, parameters);
		final IRequestCodingStrategy requestCodingStrategy = getProcessor()
				.getRequestCodingStrategy();
		return requestCodingStrategy.encode(this, target);
	}",Returns a bookmarkable URL that references a given page class using a given set of page parameters.,1,121
1261,"public String getElementNamespaceUri(final Object element) {
        if (element instanceof HtmlElement) {
            return """";
        }
        else {
            if (element instanceof XmlElement) {
                final XmlElement e = (XmlElement) element;
                if (e.getPrefix() != null) {
                    return XmlUtil.lookupNamespaceURI(e, e.getPrefix());
                }
            }
            return null;
        }
    }",Retrieve the namespace URI of the given element node.,1,126
1262,"public static NodeHandler findAncestor(NodeHandler child,
                                           Class ancestorClass)
    {
        if (ancestorClass == null)
            throw new NullPointerException(""ancestor class is null"");
        NodeHandler parent = child.getParent();
        while (parent != null) {
            // short-cut the common case before using isInstance. see above
            if (ancestorClass == parent.getClass()
                || ancestorClass.isInstance(parent))
                return parent;
            parent = parent.getParent();
        }
        return null;
    }",Returns the first ancestor of the supplied node handler that matches the supplied class.,1,135
1263,"public double getAngle(Vector other) {
		double cosAlpha = getDotProduct(other)
				/ (getLength() * other.getLength());
		return Math.toDegrees(Math.acos(cosAlpha));
	}",Returns the angle (in degrees) between this Vector and the provided Vector.,1,62
1264,"public ObservableList<LogEntry> getLog() {
        return log;
    }",Gets an observable view of the log.,1,22
1265,"public XmlStringBuilder element(Element element) {
        assert element != null;
        return append(element.toXML());
    }",Deprecated.,1,40
1266,"public List<MgmtSoftwareModuleRequestBodyPost> buildAsList(final int count) {
        final ArrayList<MgmtSoftwareModuleRequestBodyPost> bodyList = Lists.newArrayList();
        for (int index = 0; index < count; index++) {
            bodyList.add(doBuild(name + index));
        }

        return bodyList;
    }",Builds a list of multiple  MgmtSoftwareModuleRequestBodyPost to create multiple software module at once.,1,93
1267,"@NonNull
        public DefaultStorIOSQLite build() {
            checkNotNull(db, ""Please specify SQLiteDatabase instance"");

            return new DefaultStorIOSQLite(db);
        }",Builds  DefaultStorIOSQLite instance with required params,1,40
1268,"public WindowedDataStream<OUT> window(TriggerPolicy<OUT> trigger, EvictionPolicy<OUT> evicter) {
		return new WindowedDataStream<OUT>(this, trigger, evicter);
	}",Create a  WindowedDataStream using the given  TriggerPolicy s and  EvictionPolicys.,1,50
1269,"public JSONArray getJSONArray(JSONObject json, String tag, JSONArray fallback) {
        if (json == null) {
            throw new IllegalArgumentException(""json required"");
        } else if (tag == null) {
            throw new IllegalArgumentException(""tag required for json access"");
        } else if (!json.containsKey(tag) || json.get(tag)==null) {
            return fallback;
        } else if (json.containsKey(tag) && json.get(tag) instanceof JSONArray) {
            return (JSONArray) json.get(tag);
        } else {
            throw new MBFormatException(""\""""+tag+""\"" requires JSONArray"");
        }
    }","Access a JSONArray at the provided tag in the provided JSONObject, with a fallback if no JSONArray is found at that tag.",1,199
1270,"public static ComplexNDArray ifftn(ComplexNDArray transform,int dimension,int numElements) {
        if(numElements < 1)
            throw new IllegalArgumentException(""No elements specified"");
        int[] finalShape = ArrayUtil.replace(transform.shape(), dimension, numElements);


        ComplexNDArray result = transform.dup();
        if(dimension == 0 && transform.shape().length <= 1)
            return result;



        int desiredElementsAlongDimension = result.size(dimension);

        if(numElements > desiredElementsAlongDimension) {
            result = ComplexNDArrayUtil.padWithZeros(result,finalShape);
        }

        else if(numElements < desiredElementsAlongDimension) {

            result = ComplexNDArrayUtil.truncate(result,finalShape);
        }


        result.iterateOverDimension(dimension,new IFFTSliceOp(transform,numElements));

        assert Shape.shapeEquals(result.shape(),finalShape);

        return result;
    }",ND IFFT,1,253
1271,"public boolean seekTo() throws IOException {
      if (reader == null) {
        return false;
      }

      if (reader.getTrailer().getEntryCount() == 0) {
        // No data blocks.
        return false;
      }

      long firstDataBlockOffset =
          reader.getTrailer().getFirstDataBlockOffset();
      if (block != null && block.getOffset() == firstDataBlockOffset) {
        blockBuffer.rewind();
        readKeyValueLen();
        return true;
      }

      block = reader.readBlock(firstDataBlockOffset, -1, cacheBlocks, pread,
          isCompaction, BlockType.DATA);
      if (block.getOffset() < 0) {
        throw new IOException(""Invalid block offset: "" + block.getOffset());
      }
      updateCurrBlock(block);
      return true;
    }",Positions this scanner at the start of the file.,1,233
1272,"public static boolean[] toPrimitive(final Boolean[] array) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_BOOLEAN_ARRAY;
        }
        final boolean[] result = new boolean[array.length];
        for (int i = 0; i < array.length; i++) {
            result[i] = array[i].booleanValue();
        }
        return result;
    }",Converts an array of object Booleans to primitives. This method returns null if null array input.,1,150
1273,"public ResolvedJavaMethod[] getMethods() {
        return methods;
    }",Gets the methods whose bytecodes were used as input to the compilation.,1,21
1274,"public Set<OIdentifiable> getOutEdges(final ODocument iVertex, final String iLabel) {
		if (!iVertex.getSchemaClass().isSubClassOf(vertexBaseClass))
			throw new IllegalArgumentException(""The document received is not a vertex"");

		final ORecordLazySet set = iVertex.field(VERTEX_FIELD_OUT_EDGES);

		if (iLabel == null)
			// RETURN THE ENTIRE COLLECTION
			if (set != null)
				return Collections.unmodifiableSet(set);
			else
				return Collections.emptySet();

		// FILTER BY LABEL
		final ORecordLazySet result = new ORecordLazySet(underlying);
		if (set != null)
			for (OIdentifiable item : set) {
				if (iLabel == null || iLabel.equals(((ODocument) item).field(LABEL)))
					result.add(item);
			}

		return result;
	}",Retrieves the outgoing edges of vertex iVertex having label equals to iLabel.,1,228
1275,"@SuppressWarnings(""unchecked"")
  public List<InternalEvent> collectEventsWithoutExceptions() {
    return (List<InternalEvent>) CollectionUtils.selectRejected(this.events, failedEventsPredicate);
  }",The exact opposite to  #collectEventsWithExceptions() Returns all the  InternalEvents which messages have a null  ExceptionPayload or a null  ExceptionPayload#getException().,1,47
1276,"@SchedulerSupport(SchedulerSupport.NONE)
    public final TestObserver<T> test(boolean cancelled) {
        TestObserver<T> ts = new TestObserver<T>();

        if (cancelled) {
            ts.cancel();
        }

        subscribe(ts);
        return ts;
    }","Creates a TestObserver optionally in cancelled state, then subscribes it to this Maybe.",1,84
1277,"public int handleAction(DownloadAction action) {
    Task task = createTask(action);
    saveActions();
    if (downloadsStopped && !action.isRemoveAction) {
      logd(""Can't start the task as downloads are stopped"", task);
    } else {
      maybeStartTasks();
    }
    return task.id;
  }",Handles the given action.,1,88
1278,"public static Collection findAll(Object self) {
        return findAll(self, Closure.IDENTITY);
    }",Finds all items matching the IDENTITY Closure (i.e.&nbsp;matching Groovy truth).,1,32
1279,"public Cell[] get(byte [] row, byte [] column, int numVersions)
  throws IOException {
    return get(row, column, Long.MAX_VALUE, numVersions);
  }",Fetch multiple versions of a single data item,1,59
1280,"public static Method getMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {
		Assert.notNull(clazz, ""Class must not be null"");
		Assert.notNull(methodName, ""Method name must not be null"");
		if (paramTypes != null) {
			try {
				return clazz.getMethod(methodName, paramTypes);
			}
			catch (NoSuchMethodException ex) {
				throw new IllegalStateException(""Expected method not found: "" + ex);
			}
		}
		else {
			Set<Method> candidates = new HashSet<Method>(1);
			Method[] methods = clazz.getMethods();
			for (Method method : methods) {
				if (methodName.equals(method.getName())) {
					candidates.add(method);
				}
			}
			if (candidates.size() == 1) {
				return candidates.iterator().next();
			}
			else if (candidates.isEmpty()) {
				throw new IllegalStateException(""Expected method not found: "" + clazz + ""."" + methodName);
			}
			else {
				throw new IllegalStateException(""No unique method found: "" + clazz + ""."" + methodName);
			}
		}
	}","Determine whether the given class has a public method with the given signature, and return it if available (else throws an  IllegalStateException).",1,343
1281,"public static String parseResource(String ID) {
        if (ID == null) {
            return null;
        }
        int slashIndex = ID.indexOf(""/"");
        if (slashIndex + 1 > ID.length() || slashIndex < 0) {
            return """";
        }
        else {
            return ID.substring(slashIndex + 1);
        }
    }",Returns the name portion of a XMPP ID.,1,121
1282,"public Future<Long> mineLight(final Block block) {
        return executor.submit(new Callable<Long>() {
            @Override
            public Long call() throws Exception {
                long nonce = getEthashAlgo().mineLight(getFullSize(), getCacheLight(),
                        sha3(block.getHeader().getEncodedWithoutNonce()),
                        ByteUtil.byteArrayToLong(block.getHeader().getDifficulty()));
                Pair<byte[], byte[]> pair = hashimotoLight(block.getHeader(), nonce);
                block.setNonce(longToBytes(nonce));
                block.setMixHash(pair.getLeft());
                return nonce;
            }
        });
    }",Mines the nonce for the specified Block with difficulty BlockHeader.getDifficulty(),1,182
1283,"public static String getColumnName(Expression columnExp, int indexOfColumn, String columnNameOverride) {
        // try a name from the column name override
        String columnName = null;
        if (columnNameOverride != null){
            columnName = columnNameOverride;
            //if(!isAllowableColumnName(columnName)){
            //    columnName = columnName.replace(""\n"", "" "").replace(""\r"", "" "");
            //}            
            //if(!isAllowableColumnName(columnName)){
            //    columnName = null;
            //}
            return columnName;
        }  
        // try a name from the column alias
        if (columnName==null && columnExp.getAlias()!=null){
            columnName = columnExp.getAlias();
            if(!isAllowableColumnName(columnName)){
                columnName = columnName.replace(""\n"", "" "").replace(""\r"", "" "");
            }
            if(!isAllowableColumnName(columnName)){
                columnName = null;
            }
        }
        // try a name derived from the column expression SQL
        if (columnName==null && columnExp.getColumnName()!=null){
             columnName =  columnExp.getColumnName();
             if(!isAllowableColumnName(columnName)){
                 columnName = columnName.replace(""\n"", "" "").replace(""\r"", "" "");
             }
             if(!isAllowableColumnName(columnName)){
                 columnName = null;
             }
        }
        // try a name derived from the column expression plan SQL
        if (columnName==null && columnExp.getSQL()!=null){
             columnName =  columnExp.getSQL();
             if(!isAllowableColumnName(columnName)){
                 columnName = columnName.replace(""\n"", "" "").replace(""\r"", "" "");
             }
             if(!isAllowableColumnName(columnName)){
                 columnName = null;
             }
        }
        // go with a innocuous default name pattern
        if (columnName==null){
            columnName =  ""_unnamed_column_""+(indexOfColumn+1)+""_"";
       }
        return columnName;
    }",Create a standardized column name that isn't null and doesn't have a CR/LF in it.,1,466
1284,"private synchronized ClientFileInfo getFileStatus(int fileId, String path,
      boolean useCachedMetadata) throws IOException {
    ClientFileInfo info = null;
    boolean updated = false;

    if (fileId != -1) {
      info = mIdToClientFileInfo.get(fileId);
      if (!useCachedMetadata || info == null) {
        info = getFileStatus(fileId, """");
        updated = true;
      }

      if (info == null) {
        mIdToClientFileInfo.remove(fileId);
        return null;
      }

      path = info.getPath();
    } else {
      info = mPathToClientFileInfo.get(path);
      if (!useCachedMetadata || info == null) {
        info = getFileStatus(-1, path);
        updated = true;
      }

      if (info == null) {
        mPathToClientFileInfo.remove(path);
        return null;
      }

      fileId = info.getId();
    }

    if (updated) {
      // TODO LRU on this Map.
      mIdToClientFileInfo.put(fileId, info);
      mPathToClientFileInfo.put(path, info);
    }

    return info;
  }",Get a ClientFileInfo of the file.,1,336
1285,"boolean passesTimerangeFilter(Scan scan, long oldestUnexpiredTS) {
      if (timeRangeTracker == null) {
        return true;
      } else {
        return timeRangeTracker.includesTimeRange(scan.getTimeRange()) &&
            timeRangeTracker.getMaximumTimestamp() >= oldestUnexpiredTS;
      }
    }",Check if this storeFile may contain keys within the TimeRange that have not expired (i.e.,1,79
1286,"public List<String> getNamesAllProjects() {
    return waitFactory
        .get(DEFAULT_TIMEOUT)
        .until(visibilityOfAllElementsLocatedBy(By.xpath(ALL_PROJECTS_XPATH)))
        .stream()
        .map((webElement) -> webElement.getAttribute(""name""))
        .collect(toList());
  }",Waits until all projects in project explorer be visible and gets their names,1,80
1287,"private List<Value> createKeyListFromStaticKey(String keyName) {
        // create static key using given string key name
        Value xsdKey = new Value(keyName);
        return Collections.singletonList(xsdKey);
    }",Create a Value list which consists with one static element,1,48
1288,"public ForwardChainExpectation when(HttpRequest httpRequest, Times times) {
        return new ForwardChainExpectation(this, new Expectation(httpRequest, times));
    }","Specify an limited expectation that will respond a specified number of times when the request is matched for example:  mockServerClient .when( new HttpRequest() .withPath(""/some_path"") .withBody(""some_request_body""),",1,43
1289,"public Optional<CachedLayer> retrieve(ImmutableList<LayerEntry> layerEntries)
      throws IOException, CacheCorruptedException {
    Optional<DescriptorDigest> optionalSelectedLayerDigest =
        cacheStorage.select(LayerEntriesSelector.generateSelector(layerEntries));
    if (!optionalSelectedLayerDigest.isPresent()) {
      return Optional.empty();
    }

    return cacheStorage.retrieve(optionalSelectedLayerDigest.get());
  }",Retrieves the  CachedLayer that was built from the  layerEntries.,1,97
1290,"public boolean valuesToHighlight() {
        return mIndicesToHightlight == null || mIndicesToHightlight.length == 0
                || mIndicesToHightlight[0] == -1 ? false : true;
    }","returns true if there are values to highlight, false if there are not checks if the highlight array is null, has a length of zero or contains -1",1,59
1291,"public int copyRecursiveTo(final String fileMask, final String excludes, final FilePath target) throws IOException, InterruptedException {
        if(this.channel==target.channel) {
            // local to local copy.
            return act(new FileCallable<Integer>() {
                private static final long serialVersionUID = 1L;
                public Integer invoke(File base, VirtualChannel channel) throws IOException {
                    if(!base.exists())  return 0;
                    assert target.channel==null;

                    try {
                        class CopyImpl extends Copy {
                            private int copySize;

                            public CopyImpl() {
                                setProject(new org.apache.tools.ant.Project());
                            }

                            @Override
                            protected void doFileOperations() {
                                copySize = super.fileCopyMap.size();
                                super.doFileOperations();
                            }

                            public int getNumCopied() {
                                return copySize;
                            }
                        }

                        CopyImpl copyTask = new CopyImpl();
                        copyTask.setTodir(new File(target.remote));
                        copyTask.addFileset(Util.createFileSet(base,fileMask,excludes));
                        copyTask.setOverwrite(true);
                        copyTask.setIncludeEmptyDirs(false);

                        copyTask.execute();
                        return copyTask.getNumCopied();
                    } catch (BuildException e) {
                        throw new IOException2(""Failed to copy ""+base+""/""+fileMask+"" to ""+target,e);
                    }
                }
            });
        } else
        if(this.channel==null) {
            // local -> remote copy
            final Pipe pipe = Pipe.createLocalToRemote();

            Future<Void> future = target.actAsync(new FileCallable<Void>() {
                private static final long serialVersionUID = 1L;
                public Void invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        readFromTar(remote+'/'+fileMask, f,TarCompression.GZIP.extract(pipe.getIn()));
                        return null;
                    } finally {
                        pipe.getIn().close();
                    }
                }
            });
            int r = writeToTar(new File(remote),fileMask,excludes,TarCompression.GZIP.compress(pipe.getOut()));
            try {
                future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
            return r;
        } else {
            // remote -> local copy
            final Pipe pipe = Pipe.createRemoteToLocal();

            Future<Integer> future = actAsync(new FileCallable<Integer>() {
                private static final long serialVersionUID = 1L;
                public Integer invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        return writeToTar(f,fileMask,excludes,TarCompression.GZIP.compress(pipe.getOut()));
                    } finally {
                        pipe.getOut().close();
                    }
                }
            });
            try {
                readFromTar(remote+'/'+fileMask,new File(target.remote),TarCompression.GZIP.extract(pipe.getIn()));
            } catch (IOException e) {// BuildException or IOException
                try {
                    future.get(3,TimeUnit.SECONDS);
                    throw e;    // the remote side completed successfully, so the error must be local
                } catch (ExecutionException x) {
                    // report both errors
                    throw new IOException2(Functions.printThrowable(e),x);
                } catch (TimeoutException _) {
                    // remote is hanging
                    throw e;
                }
            }
            try {
                return future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
        }
    }",Copies the files that match the given file mask to the specified target node.,1,985
1292,"public WSDLInterface getInterface(QName qName){
	    	    
	    return (WSDLInterface)this.wsdlInterfaces.get(qName);
	}","The Interface Component will be returned if it exsists, otherwise null will be returned.",1,33
1293,"public String getLocale()
    {
        if (locales != null)
        {
            Locale locale = locales.getLocale();
            return (locale != null) ? locale.getISO3Language() : null;
        }
        return null;
    }",Returns the locale's ISO3 language code.,1,77
1294,"int getOffsetWidth() {
        final int width = intValue(super.jsxGet_width());
        final int borderLeft = intValue(jsxGet_borderLeftWidth());
        final int borderRight = intValue(jsxGet_borderRightWidth());
        final int paddingLeft = intValue(jsxGet_paddingLeft());
        final int paddingRight = intValue(jsxGet_paddingRight());
        return width + borderLeft + borderRight + paddingLeft + paddingRight;
    }",Returns the element's offset width (width including padding and border).,1,120
1295,"private static ImportedSpreadsheetWrapper parseXls(final InputStream is, final Map<String, String> userMap) throws GbImportExportInvalidColumnException, InvalidFormatException, IOException {

		int lineCount = 0;
		final List<ImportedRow> list = new ArrayList<>();
		Map<Integer, ImportedColumn> mapping = new LinkedHashMap<>();

		final Workbook wb = WorkbookFactory.create(is);
		final Sheet sheet = wb.getSheetAt(0);
		for (final Row row : sheet) {

			final String[] r = convertRow(row);

			if (lineCount == 0) {
				// header row, capture it
				mapping = mapHeaderRow(r);
			} else {
				// map the fields into the object
				final ImportedRow importedRow = mapLine(r, mapping, userMap);
				if(importedRow != null) {
					list.add(importedRow);
				}
			}
			lineCount++;
		}

		final ImportedSpreadsheetWrapper importedGradeWrapper = new ImportedSpreadsheetWrapper();
		importedGradeWrapper.setColumns(new ArrayList<>(mapping.values()));
		importedGradeWrapper.setRows(list);
		return importedGradeWrapper;
	}",Parse an XLS into a list of  ImportedRow objects.,1,316
1296,"public TachyonFileSystem getClient(TachyonConf tachyonConf) throws IOException {
    final TachyonFileSystem fs = TachyonFileSystemFactory.get();
    mClients.add(fs);
    return fs;
  }",Returns a  tachyon.client.file.TachyonFileSystem client.,1,51
1297,"public static ResolvableType forMethodParameter(Method method, int parameterIndex, Class<?> implementationClass) {
		Assert.notNull(method, ""Method must not be null"");
		MethodParameter methodParameter = new MethodParameter(method, parameterIndex);
		methodParameter.setContainingClass(implementationClass);
		return forMethodParameter(methodParameter);
	}",Return a  ResolvableType for the specified  Method parameter with a given implementation.,1,81
1298,"public static String getUniqueId(Set<UUID> ids, String name) {
        UUID id = UUID.nameUUIDFromBytes(name == null ? EMPTY_NAME.getBytes(StandardCharsets.UTF_8) : name.getBytes(StandardCharsets.UTF_8));
        while (ids.contains(id)) {
            id = new UUID(id.getMostSignificantBits(), id.getLeastSignificantBits() + 1);
        }
        ids.add(id);
        return id.toString();
    }",Will deterministically (per config file in the case of collisions) map the name to a uuid.,1,132
1299,"public Collection getActionStates(StateMachine stateMachine)
    {
        return getSubvertices(stateMachine, actionStateFilter);
    }",Returns a Collection containing the action states that are model elements in the argument StateMachine.,1,29
1300,"private static Class<?> loadVMClass(File toolsJar, Log log, boolean ibm) {
        try {
            ClassLoader loader = Thread.currentThread().getContextClassLoader();
            String cls = (ibm == true) ? IBM_VM_CLASS : SUN_VM_CLASS;
            if (ibm == false) {
                loader = new URLClassLoader(new URL[] { toolsJar.toURI().toURL() }, loader);
            }
            return loader.loadClass(cls);
        } catch (Exception e) {
            if (log.isTraceEnabled()) {
                log.trace(_name
                    + "".loadVMClass() failed to load the VirtualMachine class"");
            }
        }
        return null;
    }","If ibm is false, this private method will create a new URLClassLoader and attempt to load the com.sun.tools.attach.VirtualMachine class from the provided toolsJar file.",1,195
1301,"public List<Presence> getPresences(String user) {
        List<Presence> res;
        String key = getPresenceMapKey(user);
        Map<String, Presence> userPresences = presenceMap.get(key);
        if (userPresences == null) {
            Presence presence = new Presence(Presence.Type.unavailable);
            presence.setFrom(user);
            res = Arrays.asList(presence);
        }
        else {
            List<Presence> answer = new ArrayList<Presence>();
            for (Presence presence : userPresences.values()) {
                if (presence.isAvailable()) {
                    answer.add(presence);
                }
            }
            if (!answer.isEmpty()) {
                res = answer;
            }
            else {
                Presence presence = new Presence(Presence.Type.unavailable);
                presence.setFrom(user);
                res = Arrays.asList(presence);
            }
        }
        return Collections.unmodifiableList(res);
    }","Returns a List of Presence objects for all of a user's current presences or an unavailable presence if the user is unavailable (offline) or if no presence information is available, such as when you are not subscribed to the user's presence updates.",1,280
1302,"public static String getFacebookDomain() {
        AccessToken currentToken = AccessToken.getCurrentAccessToken();
        String tokenGraphDomain = null;
        String graphDomain;

        if (currentToken != null) {
            tokenGraphDomain = currentToken.getGraphDomain();
        }

        if (tokenGraphDomain == null) {
            graphDomain = facebookDomain;
        } else if (tokenGraphDomain.equals(""gaming"")) {
            graphDomain = facebookDomain.replace(FACEBOOK_COM, FB_GG);
        } else {
            graphDomain = facebookDomain;
        }

        return graphDomain;
    }","Gets the base Facebook domain to use when making Web requests; in production code this will normally be ""facebook.com"".",1,159
1303,"public XMLElement[] getChildren(String path) {
        if (path.indexOf('/') != -1) {
        	return getChildrenRecursive(PApplet.split(path, '/'), 0);
        }
        // if it's a number, do an index instead
        // (returns a single element array, since this will be a single match
        if (Character.isDigit(path.charAt(0))) {
        	return new XMLElement[] { getChild(Integer.parseInt(path)) };
        }
        int childCount = getChildCount();
        XMLElement[] matches = new XMLElement[childCount];
        int matchCount = 0;
        for (int i = 0; i < childCount; i++) {
        	XMLElement kid = getChild(i);
        	String kidName = kid.getName();
        	if (kidName != null && kidName.equals(path)) {
        		matches[matchCount++] = kid;
        	}
        }
        return (XMLElement[]) PApplet.subset(matches, 0, matchCount);
    }",Returns all of the children as an XMLElement array.,1,272
1304,"public Object caseDialSeries( DialSeries object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Dial Series'.,1,25
1305,"private DMatrixRMaj internal( Matrix matrix ){
        if( matrix instanceof GeneralMatrix ){
            return ((GeneralMatrix)matrix).mat;
        }
        else {
            DMatrixRMaj a = new DMatrixRMaj(matrix.getNumRow(), matrix.getNumCol());
            for (int j = 0; j < a.numRows; j++) {
                for (int i = 0; i < a.numCols; i++) {
                    a.set(j, i, matrix.getElement(j, i));
                }
            }
            return a;
        }
    }",Cast (or convert) Matrix to internal DMatrixRMaj representation required for CommonOps_DDRM.,1,173
1306,"public static CacheWrite layerOnly(Blob layerBlob) {
    return new DefaultCacheWrite(layerBlob, null, null);
  }",Constructs a  CacheWrite with only the layer  Blob.,1,35
1307,"public static Set<ClassMethod> generateFailingTests( List<Failure> allFailures )
    {
        Set<ClassMethod> failingMethods = new HashSet<ClassMethod>();

        for ( Failure failure : allFailures )
        {
            Description description = failure.getDescription();
            if ( description.isTest() && !isFailureInsideJUnitItself( description ) )
            {
                ClassMethod classMethod = cutTestClassAndMethod( description );
                if ( classMethod.isValid() )
                {
                    failingMethods.add( classMethod );
                }
            }
        }
        return failingMethods;
    }",Get all test methods from a list of Failures,1,164
1308,"private Object[] resolveParameters(Executable executable, Optional<Object> target, Object outerInstance) {
		Parameter[] parameters = executable.getParameters();
		Object[] values = new Object[parameters.length];
		int start = 0;

		// Ensure that the outer instance is resolved as the first parameter if
		// the executable is a constructor for an inner class.
		if (outerInstance != null) {
			values[0] = outerInstance;
			start = 1;
		}

		// Resolve remaining parameters dynamically
		for (int i = start; i < parameters.length; i++) {
			values[i] = resolveParameter(parameters[i], executable, target);
		}
		return values;
	}","Resolve the array of parameters for the supplied executable, target, and outer instance.",1,184
1309,"protected Format getDefaultPassTextureFormat() {
        return Format.RGB10_A2;
    }",returns the default pass texture format default is  Format#RGB10_A2,1,21
1310,"int allocatePage(boolean atEnd) throws SQLException {
        int pos;
        if (atEnd) {
            PageFreeList list = getFreeList(pageCount / freeListPagesPerList);
            pos = list.getLastUsed() + 1;
            list.allocate(pos);
        } else {
            // TODO could remember the first possible free list page
            for (int i = 0;; i++) {
                if (i * freeListPagesPerList > pageCount) {
                    increaseFileSize(INCREMENT_PAGES);
                }
                PageFreeList list = getFreeList(i);
                if (!list.isFull()) {
                    pos = list.allocate();
                    break;
                }
            }
        }
        if (pos > pageCount) {
            increaseFileSize(INCREMENT_PAGES);
        }
        return pos;
    }",Allocate a new page.,1,214
1311,"public FSDataInputStream open(Path cPath, int bufferSize) throws IOException {
    LOG.info(""open("" + cPath + "", "" + bufferSize + "")"");

    TachyonURI path = new TachyonURI(Utils.getPathWithoutScheme(cPath));
    fromHdfsToTachyon(path);
    int fileId = mTFS.getFileId(path);

    return new FSDataInputStream(new HdfsFileInputStream(mTFS, fileId, Utils.getHDFSPath(path,
        mUnderFSAddress), getConf(), bufferSize, mTachyonConf));
  }",Attempts to open the specified file for reading.,1,142
1312,"public static int count(Class klass) {
    return getExemplar(klass).getDatabase().count();
  }",This returns the count of entries in the table for an ActiveRecord descendant.,1,35
1313,"static BuildSystem forId(String id) {
		return forIdAndDialect(id, null);
	}","The dialect of the build system, or  null if the build system does not support multiple dialects.",1,28
1314,"public KaleoLog remove(long kaleoLogId)
		throws NoSuchLogException, SystemException {
		return remove(Long.valueOf(kaleoLogId));
	}",Removes the kaleo log with the primary key from the database.,1,38
1315,"public static boolean hasMetaAnnotationTypes(AnnotatedElement element, final String annotationName) {
		Assert.notNull(element, ""AnnotatedElement must not be null"");
		Assert.hasText(annotationName, ""annotationName must not be null or empty"");

		return Boolean.TRUE.equals(searchWithGetSemantics(element, annotationName, new SimpleAnnotationProcessor<Boolean>() {
			@Override
			public Boolean process(AnnotatedElement annotatedElement, Annotation annotation, int metaDepth) {
				boolean found = annotation.annotationType().getName().equals(annotationName);
				return ((found && (metaDepth > 0)) ? Boolean.TRUE : CONTINUE);
			}
		}));
	}",Determine if the supplied  AnnotatedElement is annotated with a composed annotation that is meta-annotated with an annotation of the specified  annotationName.,1,172
1316,"public static String toPrintString(Transaction transaction) {
        if (transaction == null) {
            return """";
        }

        String str =
                ""\nTransaction {\n"" +
                        ""\tid="" + ByteArray.toHexString(transaction.getId()
                        .toByteArray()) + ""\n"" +
                        ""\tvin=[\n"";
        int i = 0;
        for (TXInput vin : transaction.getVinList()) {
            str += ""\t\t{\n"" +
                    ""\t\t\ttxID="" + ByteArray.toHexString(vin.getTxID()
                    .toByteArray()) + ""\n"" +
                    ""\t\t\tvout="" + vin.getVout() + ""\n"" +
                    ""\t\t\tsignature="" + ByteArray.toHexString(vin
                    .getSignature().toByteArray()) + ""\n"" +
                    ""\t\t\tpubKey="" + ByteArray.toHexString(vin.getPubKey()
                    .toByteArray()) + ""\n"" +
                    ""\t\t}"";

            if (i != transaction.getVinList().size() - 1) {
                str += "","";
            }

            i++;

            str += ""\n"";
        }

        str += ""\t],\n\tvout=[\n"";

        i = 0;
        for (TXOutput vout : transaction.getVoutList()) {
            str += ""\t\t{\n"" +
                    ""\t\t\tvalue="" + vout.getValue() + ""\n"" +
                    ""\t\t\tpubKeyHash="" + ByteArray.toHexString(vout
                    .getPubKeyHash().toByteArray()) + ""\n"" +
                    ""\t\t}"";

            if (i != transaction.getVoutList().size() - 1) {
                str += "","";
            }

            i++;

            str += ""\n"";
        }

        str += ""\t]\n}"";

        return str;
    }",get print string of the transaction,1,587
1317,"public static Object getValue(final ResultSet resultSet, final int columnIndex, final Class<?> targetClass) throws SQLException {
        if (boolean.class == targetClass) {
            return resultSet.getBoolean(columnIndex);
        } else if (byte.class == targetClass) {
            return resultSet.getByte(columnIndex);
        } else if (short.class == targetClass) {
            return resultSet.getShort(columnIndex);
        } else if (int.class == targetClass) {
            return resultSet.getInt(columnIndex);
        } else if (long.class == targetClass) {
            return resultSet.getLong(columnIndex);
        } else if (float.class == targetClass) {
            return resultSet.getFloat(columnIndex);
        } else if (double.class == targetClass) {
            return resultSet.getDouble(columnIndex);
        } else if (String.class == targetClass) {
            return resultSet.getString(columnIndex);
        } else if (BigDecimal.class == targetClass) {
            return resultSet.getBigDecimal(columnIndex);
        } else if (byte[].class == targetClass) {
            return resultSet.getBytes(columnIndex);
        } else if (Date.class == targetClass) {
            return resultSet.getDate(columnIndex);
        } else if (Time.class == targetClass) {
            return resultSet.getTime(columnIndex);
        } else if (Timestamp.class == targetClass) {
            return resultSet.getTimestamp(columnIndex);
        } else if (Blob.class == targetClass) {
            return resultSet.getBlob(columnIndex);
        } else if (Clob.class == targetClass) {
            return resultSet.getClob(columnIndex);
        } else {
            return resultSet.getObject(columnIndex);
        }
    }",Get value by target class.,1,525
1318,"protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)
      throws ParseException {
   
    String analyzed = analyzeSingleChunk(field, termStr, termStr);
    return super.getFuzzyQuery(field, analyzed, minSimilarity);
  }",Called when parser parses an input term that has the fuzzy suffix (~) appended.,1,69
1319,"public Vector3 set (final Vector2 vector, float z) {
		return this.set(vector.x, vector.y, z);
	}",Sets the components of the given vector and z-component,1,45
1320,"public static HighAvailabilityMode fromConfig(Configuration config) {
		// Not passing the default value here so that we could determine
		// if there is an older config set
		String recoveryMode = config.getString(
			ConfigConstants.HIGH_AVAILABILITY, """");
		if (recoveryMode.isEmpty()) {
			// New config is not set.
			// check the older one
			// check for older 'recover.mode' config
			recoveryMode = config.getString(
				ConfigConstants.RECOVERY_MODE,
				ConfigConstants.DEFAULT_RECOVERY_MODE);
			if (recoveryMode.equalsIgnoreCase(ConfigConstants.DEFAULT_RECOVERY_MODE)) {
				// There is no HA configured.
				return HighAvailabilityMode.valueOf(ConfigConstants.DEFAULT_HIGH_AVAILABILTY.toUpperCase());
			}
		} else if (recoveryMode.equalsIgnoreCase(ConfigConstants.DEFAULT_HIGH_AVAILABILTY)) {
			// The new config is found but with default value. So use this
			return HighAvailabilityMode.valueOf(ConfigConstants.DEFAULT_HIGH_AVAILABILTY.toUpperCase());
		}
		return HighAvailabilityMode.valueOf(recoveryMode.toUpperCase());
	}",Return the configured  HighAvailabilityMode.,1,189
1321,"public boolean processURL(String requestURI) {
        throw new UnsupportedOperationException();
    }",The processURL method should not be called on the NullURLProcessor.,1,26
1322,"public static AcceptableMediaType valueOf(MediaType mediaType) throws ParseException {
        if (mediaType instanceof AcceptableMediaType) {
            return (AcceptableMediaType) mediaType;
        }

        final Map<String, String> parameters = mediaType.getParameters();

        int quality = Quality.DEFAULT;
        if (parameters != null) {
            final String v = parameters.get(Quality.QUALITY_PARAMETER_NAME);
            if (v != null) {
                quality = HttpHeaderReader.readQualityFactor(v);
            }
        }

        // use private constructor to skip quality value validation step
        return new AcceptableMediaType(mediaType.getType(), mediaType.getSubtype(), parameters, quality);
    }",Create new acceptable media type instance from the supplied  javax.ws.rs.core.MediaType media type.,1,182
1323,"public Duration getMinExclusive() {
        return _minExclusive;
    } //-- getMinExclusive",Returns the minimum exclusive value that this XSDuration can hold.,1,21
1324,"public static boolean equivalent(Vector left, Vector right) {
    if (left == right) return true;
    boolean result = true;
    int leftCardinality = left.cardinality();
    if (leftCardinality == right.cardinality()) {
      for (int i = 0; i < leftCardinality; i++) {
        if (left.getQuick(i) != right.getQuick(i)) {
          return false;
        }

      }
    } else {
      return false;
    }
    return result;
  }","Compare whether two Vector implementations have the same elements, regardless of the implementation and name.",1,168
1325,"protected static ColumnDefinition getColumnDefinition(CFMetaData cfm, Raw rawId)
        {
            ColumnIdentifier id = rawId.prepare(cfm);
            return checkNotNull(cfm.getColumnDefinition(id), ""Unknown identifier %s"", id);
        }",Retrieves the ColumnDefinition corresponding to the specified raw ColumnIdentifier.,1,61
1326,"public boolean deleteBlock(long blockId) throws IOException {
    Long accessTimeMs = mLastBlockAccessTimeMs.remove(blockId);
    if (accessTimeMs != null) {
      String blockfile = getBlockFilePath(blockId);
      // Should check lock status here 
      if (!isBlockLocked(blockId)) {
        if (!mFs.delete(blockfile, false)) {
          LOG.error(""Failed to delete block file! filename:{}"", blockfile);
          return false;
        }
        deleteBlockId(blockId);
      } else {
        mToRemoveBlockIdSet.add(blockId);
        LOG.debug(""Add block file {} to remove list!"", blockfile);
      }
      return true;
    } else {
      LOG.warn(""Block does not exist in current StorageDir! blockId:{}"", blockId);
      return false;
    }
  }","Remove a block from current StorageDir, once user calls this method, the block will not be available any longer.",1,195
1327,"public static Node findPath(Node rootNode, Object object) {
        
        PackageRootNode.PathFinder pf = (PackageRootNode.PathFinder)rootNode.getLookup().lookup( PackageRootNode.PathFinder.class );
        
        if ( pf != null ) {
            return pf.findPath( rootNode, object );
        } else {
            return null;
        }
    }","Finds the node representing given object, if any.",1,107
1328,"public static String compress(final String srcTxt) {
        try {
            final ByteArrayOutputStream rstBao = new ByteArrayOutputStream();
            final GZIPOutputStream zos = new GZIPOutputStream(rstBao);
            zos.write(srcTxt.getBytes());
            IOUtils.closeQuietly(zos);
            final byte[] bytes = rstBao.toByteArray();
            final String base64 = Base64.encodeBase64String(bytes);
            return new String(StandardCharsets.UTF_8.encode(base64).array(), StandardCharsets.UTF_8);
        } catch (final IOException e) {
            LOGGER.error(e.getMessage(), e);
        }
        return null;
    }","Use ZipOutputStream to zip text to byte array, then convert byte array to base64 string, so it can be transferred via http request.",1,182
1329,"public static RPCBlockWriteRequest decode(ByteBuf in) {
    long sessionId = in.readLong();
    long blockId = in.readLong();
    long offset = in.readLong();
    long length = in.readLong();
    DataBuffer data = null;
    if (length > 0) {
      // TODO: look into accessing Netty ByteBuf directly, to avoid copying the data.
      ByteBuffer buffer = ByteBuffer.allocate((int) length);
      in.readBytes(buffer);
      data = new DataByteBuffer(buffer, (int) length);
    }
    return new RPCBlockWriteRequest(sessionId, blockId, offset, length, data);
  }",Decode the input  ByteBuf into a  RPCBlockWriteRequest object and return it.,1,174
1330,"public ChannelType getChannelType(ChannelUID channelUID, Locale locale) {
        ThingType thingType = this.getThingType(channelUID.getThingTypeUID(), locale);
        return thingType != null ? thingType.getChannelType(channelUID) : null;
    }",Returns the channel type for a given channel UID and locale.,1,67
1331,"public Optional<Field> resolve(final KsqlSchema schema, final KsqlConfig ksqlConfig) {
    if (shouldUseLegacy(ksqlConfig)) {
      return legacyKeyField;
    }

    return resolveLatest(schema);
  }",Resolve this  KeyField to the specific key  Field to use.,1,59
1332,"@Override
	public String getOptimizerPlanAsJSON(Plan plan) throws Exception {
		final int parallelism = plan.getDefaultParallelism() == -1 ? 1 : plan.getDefaultParallelism();

		Optimizer pc = new Optimizer(new DataStatistics(), this.configuration);
		pc.setDefaultParallelism(parallelism);
		OptimizedPlan op = pc.compile(plan);

		return new PlanJSONDumpGenerator().getOptimizerPlanAsJSON(op);
	}",Creates a JSON representation of the given dataflow's execution plan.,1,122
1333,"public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {
		Assert.notNull(dataBuffers, ""'dataBuffers' must not be null"");

		return Flux.from(dataBuffers)
				.collectList()
				.filter(list -> !list.isEmpty())
				.map(list -> list.get(0).factory().join(list))
				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);

	}",Return a new  DataBuffer composed from joining together the given  dataBuffers elements.,1,115
1334,"public Set<PropertyDefinition> getPropertyDefinitions() {
		return new HashSet<PropertyDefinition>(propertyDefinitions.values());
	}",Returns the PropertyDefinitions required to configure the  uk.org.taverna.scufl2.api.common.Configurable Configurable.,1,34
1335,"public static Config loadWithoutResolving(String rootPath) {
        return loadWithoutResolving(rootPath, ConfigParseOptions.defaults());
    }","Like load() but does not resolve the config, so you can go ahead and add more fallbacks and stuff and have them seen by substitutions when you do call  Config#resolve().",1,34
1336,"public Document getMappedExample(Example<?> example, MongoPersistentEntity<?> entity) {

		Assert.notNull(example, ""Example must not be null!"");
		Assert.notNull(entity, ""MongoPersistentEntity must not be null!"");

		Document reference = (Document) converter.convertToMongoType(example.getProbe());

		if (entity.hasIdProperty() && entity.getIdentifierAccessor(example.getProbe()).getIdentifier() == null) {
			reference.remove(entity.getIdProperty().getFieldName());
		}

		ExampleMatcherAccessor matcherAccessor = new ExampleMatcherAccessor(example.getMatcher());

		applyPropertySpecs("""", reference, example.getProbeType(), matcherAccessor);

		Document flattened = ObjectUtils.nullSafeEquals(NullHandler.INCLUDE, matcherAccessor.getNullHandler()) ? reference
				: new Document(SerializationUtils.flattenMap(reference));
		Document result = example.getMatcher().isAllMatching() ? flattened : orConcatenate(flattened);

		this.converter.getTypeMapper().writeTypeRestrictions(result, getTypesToMatch(example));

		return result;
	}",Returns the given  Example as  Document holding matching values extracted from  Example#getProbe().,1,281
1337,"public synchronized MucCreateConfigFormHandle createOrJoin(Resourcepart nickname) throws NoResponseException, XMPPErrorException,
                    InterruptedException, MucAlreadyJoinedException, NotConnectedException {
        return createOrJoin(nickname, null, null, connection.getPacketReplyTimeout());
    }","Same as  #createOrJoin(Resourcepart, String, DiscussionHistory, long), but without a password, specifying a discussion history and using the connections default reply timeout.",1,57
1338,"private boolean maybeHandleRestart(SkyKey key, NodeEntry entry, SkyValue returnedValue)
      throws InterruptedException {
    if (!(returnedValue instanceof Restart)) {
      return false;
    }

    ImmutableGraph<SkyKey> rewindGraph = ((Restart) returnedValue).rewindGraph();
    if (rewindGraph.nodes().isEmpty()) {
      restart(key, entry);
      return true;
    }
    Preconditions.checkArgument(
        rewindGraph.nodes().contains(key),
        ""rewindGraph must contain the key for the failed evaluation if it's not empty. key: %s, ""
            + ""rewindGraph: %s"",
        key,
        rewindGraph);

    ImmutableList.Builder<SkyKey> builder = ImmutableList.builder();
    for (SkyKey k : Traverser.forGraph(rewindGraph).depthFirstPostOrder(key)) {
      if (!k.equals(key)) {
        builder.add(k);
      }
    }
    ImmutableList<SkyKey> additionalKeysToRestart = builder.build();
    if (!additionalKeysToRestart.isEmpty()) {
      evaluatorContext
          .getGraphInconsistencyReceiver()
          .noteInconsistencyAndMaybeThrow(
              key, additionalKeysToRestart, Inconsistency.PARENT_FORCE_REBUILD_OF_CHILD);
    }

    Map<SkyKey, ? extends NodeEntry> additionalNodesToRestart =
        evaluatorContext.getBatchValues(key, Reason.INVALIDATION, additionalKeysToRestart);

    ArrayList<SkyKey> missingNodes = null;
    for (SkyKey keyToRestart : additionalKeysToRestart) {
      NodeEntry restartEntry = additionalNodesToRestart.get(keyToRestart);

      if (restartEntry == null) {
        if (missingNodes == null) {
          missingNodes = new ArrayList<>();
        }
        missingNodes.add(keyToRestart);
        continue;
      }

      // Nodes are marked ""force-rebuild"" to ensure that they run, and to allow them to evaluate to
      // a different value than before, even if their versions remain the same.
      restartEntry.markDirty(DirtyType.FORCE_REBUILD);
      evaluatorContext
          .getProgressReceiver()
          .invalidated(keyToRestart, EvaluationProgressReceiver.InvalidationState.DIRTY);
    }

    if (missingNodes != null) {
      evaluatorContext
          .getGraphInconsistencyReceiver()
          .noteInconsistencyAndMaybeThrow(
              key, missingNodes, Inconsistency.PARENT_FORCE_REBUILD_OF_MISSING_CHILD);
    }

    // TODO(b/19539699): rdeps of children have to be handled here. If the graph does not keep
    // edges, nothing has to be done, since there are no reverse deps to keep consistent. If the
    // graph keeps edges, it's a harder problem. The reverse deps could just be removed, but in the
    // case that this node is dirty, the deps shouldn't be removed, they should just be transformed
    // back to ""known reverse deps"" from ""reverse deps declared during this evaluation"" (the inverse
    // of NodeEntry#checkIfDoneForDirtyReverseDep). Such a method doesn't currently exist, but
    // could.
    restart(key, entry);
    return true;
  }","If  returnedValue is a  Restart value, then  entry will be reset, and the other nodes specified by  returnedValue.rewindGraph() will be marked changed via postorder DFS.",1,562
1339,"public DataStream<T> addSink(SinkFunction<T> sinkFunction, int parallelism) {
		return environment.addSink(this.copy(), sinkFunction, parallelism);
	}",Adds the given sink to this environment with parallelism set in parameter.,1,48
1340,"private static String parseOutputCollection(Document rawResults) {

		Object resultField = rawResults.get(""result"");

		if (resultField == null) {
			return null;
		}

		return resultField instanceof Document ? ((Document) resultField).get(""collection"").toString()
				: resultField.toString();
	}",Parses the output collection from the raw  Document result.,1,101
1341,"public PeriodType withMinutesRemoved() {
        if (!minutes().isSupported()) {
            return this;
        }
        return MaskedType.mask(this, 1 << 5);
    }",Returns a version of this PeriodType instance that does not support minutes.,1,57
1342,"public static File getProjectFile(VCSContext context){
        return getProjectFile(getProject(context));
    }",Returns File object for Project Directory,1,29
1343,"public DevfileImpl parse(String devfileContent) throws DevfileFormatException {
    JsonNode parsed = schemaValidator.validateBySchema(devfileContent);

    DevfileImpl devfile;
    try {
      devfile = objectMapper.treeToValue(parsed, DevfileImpl.class);
    } catch (JsonProcessingException e) {
      throw new DevfileFormatException(e.getMessage());
    }

    integrityValidator.validateDevfile(devfile);
    return devfile;
  }",Creates  DevfileImpl from given devfile content.,1,112
1344,"protected ArrayList<String> recentCatQuery() {
        ArrayList<String> items = new ArrayList<String>();

        try {
            Cursor cursor = client.query(
                    CategoryContentProvider.BASE_URI,
                    Category.Table.ALL_FIELDS,
                    null,
                    new String[]{},
                    Category.Table.COLUMN_LAST_USED + "" DESC"");
            // fixme add a limit on the original query instead of falling out of the loop?
            while (cursor.moveToNext() && cursor.getPosition() < SEARCH_CATS_LIMIT) {
                Category cat = Category.fromCursor(cursor);
                items.add(cat.getName());
            }
            cursor.close();
        }
        catch (RemoteException e) {
            throw new RuntimeException(e);
        }

        return items;
    }",Retrieves recently-used categories,1,200
1345,"public ListenableFuture<?> forceFlush(ReplayPosition flushIfDirtyBefore)
    {
        // we synchronize on the data tracker to ensure we don't race against other calls to switchMemtable(),
        // unnecessarily queueing memtables that are about to be made clean
        synchronized (data)
        {
            // during index build, 2ary index memtables can be dirty even if parent is not.  if so,
            // we want to flush the 2ary index ones too.
            boolean clean = true;
            for (ColumnFamilyStore cfs : concatWithIndexes())
                clean &= cfs.data.getView().getCurrentMemtable().isCleanAfter(flushIfDirtyBefore);

            if (clean)
            {
                // We could have a memtable for this column family that is being
                // flushed. Make sure the future returned wait for that so callers can
                // assume that any data inserted prior to the call are fully flushed
                // when the future returns (see #5241).
                ListenableFutureTask<?> task = ListenableFutureTask.create(new Runnable()
                {
                    public void run()
                    {
                        logger.debug(""forceFlush requested but everything is clean in {}"", name);
                    }
                }, null);
                postFlushExecutor.execute(task);
                return task;
            }

            return switchMemtable();
        }
    }",Flush if there is unflushed data that was written to the CommitLog before @param flushIfDirtyBefore (inclusive).,1,204
1346,"public EditorTableView<TItem> getTableCatalog() {
        return this.tblCatalog;
    }",Gets the EditorTableView holding the cards in the current catalog.,1,24
1347,"public int compareTo(Rational that) {
        return this._dividend.timesBasic(that._divisor).compareTo(
                that._dividend.timesBasic(this._divisor));
    }",Compares two rational number numerically.,1,47
1348,"public Optional<AccessExecutionGraph> getExecutionGraph(JobID jid, JobManagerGateway jobManagerGateway) throws Exception {
		AccessExecutionGraph cached = cache.get(jid);
		if (cached != null) {
			if (cached.getState() == JobStatus.SUSPENDED) {
				cache.remove(jid);
			} else {
				return Optional.of(cached);
			}
		}

		CompletableFuture<Optional<AccessExecutionGraph>> executionGraphFuture = jobManagerGateway.requestJob(jid, timeout);

		Optional<AccessExecutionGraph> result = executionGraphFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);

		return result.map((executionGraph) -> {
			cache.put(jid, executionGraph);

			return executionGraph;
		});
	}",Retrieves the execution graph with  JobID jid wrapped in  Optional or  Optional#empty() if it cannot be found.,1,204
1349,"public long splitLogDistributed(final List<Path> logDirs) throws IOException {
    if (logDirs.isEmpty()) {
      return 0;
    }
    Set<ServerName> serverNames = new HashSet<ServerName>();
    for (Path logDir : logDirs) {
      try {
        ServerName serverName = HLogUtil.getServerNameFromHLogDirectoryName(logDir);
        if (serverName != null) {
          serverNames.add(serverName);
        }
      } catch (IllegalArgumentException e) {
        // ignore invalid format error.
        LOG.warn(""Cannot parse server name from "" + logDir);
      }
    }
    return splitLogDistributed(serverNames, logDirs, null);
  }",The caller will block until all the log files of the given region server have been processed - successfully split or an error is encountered - by an available worker region server.,1,180
1350,"public DBObject findOne(final Object id, final DBObject projection) {
        return findOne(new BasicDBObject(""_id"", id), new DBCollectionFindOptions().projection(projection));
    }",Get a single document from collection by '_id'.,1,56
1351,"public NonPersistentMetaData[] getPersistenceAwares() {
        synchronized (_pawares) {
            if (_pawares.isEmpty())
                return EMPTY_NON_PERSISTENT;
            return (NonPersistentMetaData[])_pawares.values().toArray
                (new NonPersistentMetaData[_pawares.size()]);
        }
    }",Gets all the metadatas for persistence-aware classes,1,75
1352,"protected float autoEncoderError(int row) {
    assert (_minfo.get_params().autoencoder && _index == _minfo.get_params().hidden.length);
    assert (params.loss == Loss.MeanSquare);
    return (_input._a.get(row) - _a.get(row));
  }",Helper to compute the reconstruction error for auto-encoders (part of the gradient computation),1,89
1353,"private static float maxVersion() {
        final float v = toFloatVersion(System.getProperty(""java.version"", ""2.0""));
        if (v > 0) {
            return v;
        }
        return 2f;
    }",Gets the Java Version from the system or 2.0 if the  java.version system property is not set.,1,70
1354,"private static boolean isTestEnabledInThisEnvironment(ProfileValueSource profileValueSource,
			IfProfileValue ifProfileValue) {

		if (ifProfileValue == null) {
			return true;
		}

		String environmentValue = profileValueSource.get(ifProfileValue.name());
		String[] annotatedValues = ifProfileValue.values();
		if (StringUtils.hasLength(ifProfileValue.value())) {
			if (annotatedValues.length > 0) {
				throw new IllegalArgumentException(""Setting both the 'value' and 'values' attributes ""
						+ ""of @IfProfileValue is not allowed: choose one or the other."");
			}
			annotatedValues = new String[] { ifProfileValue.value() };
		}

		for (String value : annotatedValues) {
			if (ObjectUtils.nullSafeEquals(value, environmentValue)) {
				return true;
			}
		}
		return false;
	}",Determine if the value (or one of the values) in the supplied  IfProfileValue &#064;IfProfileValue annotation is enabled in the current environment.,1,216
1355,"public List<Row> getRows() {
        return Collections.unmodifiableList(new ArrayList<Row>(rows));
    }",Returns a List of the rows returned from a search.,1,35
1356,"private static Pair<UUID, byte[]> parsePsshAtom(byte[] atom) {
    ParsableByteArray atomData = new ParsableByteArray(atom);
    if (atomData.limit() < Atom.FULL_HEADER_SIZE + 16 /* UUID */ + 4 /* DataSize */) {
      // Data too short.
      return null;
    }
    atomData.setPosition(0);
    int atomSize = atomData.readInt();
    if (atomSize != atomData.bytesLeft() + 4) {
      // Not an atom, or incorrect atom size.
      return null;
    }
    int atomType = atomData.readInt();
    if (atomType != Atom.TYPE_pssh) {
      // Not an atom, or incorrect atom type.
      return null;
    }
    int atomVersion = Atom.parseFullAtomVersion(atomData.readInt());
    if (atomVersion > 1) {
      Log.w(TAG, ""Unsupported pssh version: "" + atomVersion);
      return null;
    }
    UUID uuid = new UUID(atomData.readLong(), atomData.readLong());
    if (atomVersion == 1) {
      int keyIdCount = atomData.readUnsignedIntToInt();
      atomData.skipBytes(16 * keyIdCount);
    }
    int dataSize = atomData.readUnsignedIntToInt();
    if (dataSize != atomData.bytesLeft()) {
      // Incorrect dataSize.
      return null;
    }
    byte[] data = new byte[dataSize];
    atomData.readBytes(data, 0, dataSize);
    return Pair.create(uuid, data);
  }",Parses the UUID and scheme specific data from a PSSH atom.,1,404
1357,"public boolean equals(DiffXEvent e) {
    if (e == null) return false;
    if (e.getClass() != this.getClass()) return false;
    OpenElementEventNSImpl oee = (OpenElementEventNSImpl)e;
    if (!oee.uri.equals(this.uri)) return false;
    if (!oee.name.equals(this.name)) return false;
    return true;
  }",Returns true if the event is a open element event.,1,121
1358,"private int adjustYear(final int twoDigitYear) {
		int trial= century + twoDigitYear;
    	return twoDigitYear>=startYear ?trial :trial+100;
    }",Adjust dates to be within appropriate century,1,48
1359,"public int[] getNearestKeys(int x, int y) {
        return mProximityInfo.getNearestKeys(x, y);
    }",Returns the indices of the keys that are closest to the given point.,1,37
1360,"public static Meter newMeter(MetricName metricName,
                                       String eventType,
                                       TimeUnit unit) {
        return DEFAULT_REGISTRY.newMeter(metricName, eventType, unit);
    }",Creates a new  com.yammer.metrics.core.Meter and registers it under the given metric name.,1,47
1361,"public MgmtMaintenanceWindowRequestBody getMaintenanceWindow() {
        return maintenanceWindow;
    }",Returns  MgmtMaintenanceWindowRequestBody for distribution set assignment.,1,19
1362,"public static Quantifier _0_n(RulePart... parsers) {
		return mul(0, Quantifier.UNBOUNDED, parsers);
	}","Shortcut for  new Quantifier((parsers.length == 1) ? parsers[0] : new Sequence(parsers), 0, Quantifier.UNBOUNDED) .",1,38
1363,"private String convertToString(Definition wsdl) throws GenerationException {
        try {
            WSDLWriter writer = wsdlFactory.newWSDLWriter();
            StringWriter stringWriter = new StringWriter();
            writer.writeWSDL(wsdl, stringWriter);
            return stringWriter.toString();
        } catch (WSDLException e) {
            throw new GenerationException(e);
        }
    }",Serializes the contents of a parsed WSDL as a string.,1,102
1364,"public DependencyInfo generateClientDependencyInfo() {
    DependencyInfo ret = new DependencyInfo();
    ret.id = mId;
    ret.parents = Lists.newArrayList(mParentFiles);
    ret.children = Lists.newArrayList(mChildrenFiles);
    ret.data = BufferUtils.cloneByteBufferList(mData);
    return ret;
  }","Generate a DependencyInfo, which is used for the thrift server.",1,88
1365,"public static Traversal.Admin<?, ?> getTraversal(final Graph graph, final Configuration configuration) {
        return VertexProgram.<TraversalVertexProgram>createVertexProgram(graph, configuration).traversal.get();
    }",A helper method to yield a  Traversal from the  Graph and provided  Configuration.,1,58
1366,"public static ScriptBuilder ruby(String scriptText) {
        return new ScriptBuilder(""jruby"", scriptText);
    }",Creates a script builder for the Ruby/JRuby script contents,1,34
1367,"private String getWildcardDomain(String localAddress, String wildcardHost) {
    if (wildcardHost == null) {
      return String.format(""%s.%s"", getExternalIp(localAddress), ""nip.io"");
    } else if (wildcardHost.contains(""nip.io"") || wildcardHost.contains(""xip.io"")) {
      return String.format(""%s.%s"", getExternalIp(localAddress), wildcardHost);
    } else {
      // IP-less DNS
      return wildcardHost;
    }
  }",Gets a Wildcard domain based on the ip using an external provider like nip.io or by providing an IP-less DNS yourself,1,132
1368,"public Duration getTimeout() {
		return this.timeout;
	}",Return the session timeout.,1,21
1369,"public Mono<Void> handleConnectionSetupPayload(ConnectionSetupPayload payload) {
		// frameDecoder does not apply to connectionSetupPayload
		// so retain here since handle expects it..
		payload.retain();
		return handle(payload, FrameType.SETUP);
	}","Wrap the  ConnectionSetupPayload with a  Message and delegate to  #handle(Payload, FrameType) for handling.",1,47
1370,"public Class<PanelConsole> getViewClass()
    {
        Panel panel = getPanel();
        Class<PanelConsole> result = getClass(panel.getClassName() + ""Console"");
        if (result == null)
        {
            // use the old ConsoleHelper suffix convention
            result = getClass(panel.getClassName() + ""ConsoleHelper"");
        }
        return result;
    }",Returns the PanelConsole class corresponding to the panel's class name,1,103
1371,"public boolean contains(T element) {
        if(element == null) {
            return false;
        }
        return (comparator.compare(element, getMinimum()) > -1) && (comparator.compare(element, getMaximum()) < 1);
    }",Tests whether the specified element occurs within this range. null is handled and returns false.,1,82
1372,"public DslElementSyntax resolve(final Named component)
    {
        return DslElementSyntaxBuilder.create()
                .withElementName(hyphenize(component.getName()))
                .withNamespace(extensionXml.getNamespace())
                .build();
    }",Resolves the  DslElementSyntax for the given  Named component.,1,60
1373,"public long getEditTime()
    {
        final Date d = (Date) getProperty(PropertyIDMap.PID_EDITTIME);
        if (d == null)
            return 0;
        else
            return Util.dateToFileTime(d);
    }",Returns the total time spent in editing the document (or 0).,1,67
1374,"private InputStream openAtPosition(long position) throws IOException {
      if (position >= mLength) { // Position is at EOF
        return null;
      }

      // If no stream has been created or if we need to go backward, make a new stream and cache it.
      if (mStream == null || mInitPos + mStream.getCount() > position) {
        if (mStream != null) { // Close the existing stream if needed
          mStream.close();
        }
        UnderFileSystem ufs = UnderFileSystem.get(mUri);
        // TODO(calvin): Consider making openAtPosition part of the UFS API
        if (ufs instanceof S3UnderFileSystem) { // Optimization for S3 UFS
          mStream =
              new CountingInputStream(((S3UnderFileSystem) ufs).openAtPosition(mUri, position));
          mInitPos = position;
        } else if (ufs instanceof GCSUnderFileSystem) { // Optimization for GCS UFS
          mStream =
              new CountingInputStream(((GCSUnderFileSystem) ufs).openAtPosition(mUri, position));
          mInitPos = position;
        } else { // Other UFSs can skip efficiently, so open at start of the file
          mStream = new CountingInputStream(ufs.open(mUri));
          mInitPos = 0;
        }
      }

      // We are guaranteed mStream has been created and the initial position has been set.
      // Guaranteed by the previous code block that currentPos <= position.
      long currentPos = mInitPos + mStream.getCount();
      if (position > currentPos) { // Can skip to next position with the same stream
        long toSkip = position - currentPos;
        if (toSkip != mStream.skip(toSkip)) {
          throw new IOException(ExceptionMessage.FAILED_SKIP.getMessage(toSkip));
        }
      }
      return mStream;
    }",Checks if the current stream can be reused to serve the request.,1,375
1375,"public static Permission defaults() {
    // no authentication, every action is permitted
    return new Permission("""", """", Mode.createFullAccess());
  }",Creates the default  Permission for a file or a directory.,1,41
1376,"public String[] getAnnotatedAggregation() {
		return findAnnotatedAggregation().orElseThrow(() -> new IllegalStateException(
				""Expected to find @Aggregation annotation but did not. Make sure to check hasAnnotatedAggregation() before.""));
	}",Returns the aggregation pipeline declared in a  Aggregation annotation.,1,43
1377,"public static MeasurementSink getInstance(Type type) {
		MeasurementSink instance = null;
		switch(type) {
			case STDOUT:
			case API:
				instance = measureStandardOut;
				break;
			default:
				instance = measureAPI;
		}
		return instance;
	}",Factory method to get a  MeasurementSink,1,81
1378,"@Override
    public final Class<Object> getValueType() {
        return Object.class;
    }",Returns the type of objects formatted by this class.,1,29
1379,"public Iterator getAssignmentsForContext(String context)
	{
		if (M_log.isDebugEnabled()) M_log.debug(""ASSIGNMENT : BASE SERVICE : GET ASSIGNMENTS FOR CONTEXT : CONTEXT : "" + context);
		
		return assignmentsForContextAndUser(context, null);

	}",Access all the Assignemnts associated with the context,1,57
1380,"public ListAttribute<X, ?> getDeclaredList(String name) {
        // return only a List declared on this class - not via inheritance
        // Handles UC1 and UC2
        ListAttribute<X, ?> anAttribute = (ListAttribute<X, ?>) getList(name);
        // The following verification step will throw an appropriate IAException if required (we can discard the return attribute here)
        getDeclaredAttribute(name);
        // We return an attribute that has passed through both a get and a declared inheritance check
        // all of which would throw an IAException before the return below.
        return anAttribute;
    }",Return the List-valued attribute declared by the managed type that corresponds to the specified name.,1,79
1381,"public boolean isAnyButtonDown() {
		return getFlag(2 | 4 | 8 | 16 | 32);
	}",Returns true if any of the mouse buttons are pressed.,1,38
1382,"public boolean isCredentialsProvided() {
        if (useCredentialsPlugin) {
            return StringUtils.isNotBlank(credentialsId);
        }
        return StringUtils.isNotBlank(credentials.getUsername()) && StringUtils.isNotBlank(credentials.getPassword());
    }","In case of overriding the global configuration this method should be called to check if override credentials was supplied from configuration - this will take under consideration the state of the ""useCredentialsPlugin"" option in global config object",1,65
1383,"Boolean areOnDifferentVolumes(File srcFile, File targetFile) throws RolloverFailure {
        if (!EnvUtil.isJDK7OrHigher())
            return false;

        // target file is not certain to exist but its parent has to exist given the call hierarchy of this method
        File parentOfTarget = targetFile.getAbsoluteFile().getParentFile();
        
        if(parentOfTarget == null) {
            addWarn(""Parent of target file [""+targetFile+""] is null"");
            return null;
        }
        if(!parentOfTarget.exists()) {
            addWarn(""Parent of target file [""+targetFile+""] does not exist"");
            return null;
        }
        
        try {
            boolean onSameFileStore = FileStoreUtil.areOnSameFileStore(srcFile, parentOfTarget);
            return !onSameFileStore;
        } catch (RolloverFailure rf) {
            addWarn(""Error while checking file store equality"", rf);
            return null;
        }
    }",Attempts to determine whether both files are on different volumes.,1,205
1384,"public Color get(int col, int row) {
        validateColumnIndex(col);
        validateRowIndex(row);
        int rgb = getRGB(col, row);
        return new Color(rgb);
    }","Returns the color of pixel ( col,  row) as a  java.awt.Color.",1,62
1385,"public static boolean metaRegionExists(FileSystem fs, Path rootdir)
  throws IOException {
    Path metaRegionDir =
      HRegion.getRegionDir(rootdir, HRegionInfo.FIRST_META_REGIONINFO);
    return fs.exists(metaRegionDir);
  }",Checks if meta region exists,1,60
1386,"public long getId() {
		return this.id;
	}",Gets the identifer of this build.,1,21
1387,"public static JsonObject getServiceReplyAsJson(final String tenantId, final String deviceId, final CredentialsResult<JsonObject> result) {
        return RequestResponseApiConstants.getServiceReplyAsJson(result.getStatus(), tenantId, deviceId, result.getPayload());
    }",Gets a JSON object representing the reply to a credentials request via the vert.x event bus.,1,65
1388,"public static Collection intersect(Collection left, Collection right) {
        if (left.isEmpty())
            return createSimilarCollection(left, 0);

        if (left.size() < right.size()) {
            Collection swaptemp = left;
            left = right;
            right = swaptemp;
        }

        // TODO optimise if same type?
        // boolean nlgnSort = sameType(new Collection[]{left, right});

        Collection result = createSimilarCollection(left, left.size());
        //creates the collection to look for values.
        Collection pickFrom = new TreeSet(new NumberAwareComparator());
        pickFrom.addAll(left);

        for (Iterator iter = right.iterator(); iter.hasNext();) {
            final Object o = iter.next();
            if (pickFrom.contains(o))
                result.add(o);
        }
        return result;
    }",Create a Collection composed of the intersection of both collections.,1,230
1389,"public static List<String> toList(CharSequence self) {
        String s = self.toString();
        int size = s.length();
        List<String> answer = new ArrayList<String>(size);
        for (int i = 0; i < size; i++) {
            answer.add(s.substring(i, i + 1));
        }
        return answer;
    }",Converts the given CharSequence into a List of Strings of one character.,1,127
1390,"public Collection<Firmware> getFirmwares(ThingTypeUID thingTypeUID) {
        return getFirmwares(thingTypeUID, localeProvider.getLocale());
    }",Returns the collection of available firmwares for the given thing type UID using the locale provided by the  LocaleProvider.,1,35
1391,"public String toString() {
            if (!LegacyPropertyHelper.isLegacyToStringEnabled()) {
                return super.toString();
            } else {
                return LegacyPropertyHelper.legacyPropertyToString(this);
            }
        }",Returns a string representation of this object.,1,58
1392,"protected long delete(final KeyValue kv) {
    lock.readLock().lock();
    try {
      return this.memstore.delete(kv);
    } finally {
      lock.readLock().unlock();
    }
  }",Adds a value to the memstore,1,70
1393,"public static StringBuilder leftAlign(StringBuilder in, int len) {
        int sfx = len - in.length();
        if (sfx <= 0) {
            return in;
        }
        if (sfx > SPACES_LEN) {
            sfx = SPACES_LEN;
        }
        in.append(SPACES.substring(0, sfx));
        return in;
    }",Left aligns some text in a StringBuilder N.B.,1,111
1394,"private static GroupType listWrapper(Repetition repetition, String alias, OriginalType originalType, Type nested) {
    if (nested.getRepetition() != Repetition.REPEATED) {
      throw new IllegalArgumentException(""Nested type should be repeated: "" + nested);
    }
    return new GroupType(repetition, alias, originalType, nested);
  }",to preserve the difference between empty list and null when optional,1,93
1395,"public long readBits(final int count) throws IOException {
        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
            throw new IllegalArgumentException(""count must not be negative or greater than "" + MAXIMUM_CACHE_SIZE);
        }
        while (bitsCachedSize < count) {
            final long nextByte = in.read();
            if (nextByte < 0) {
                return nextByte;
            }
            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                bitsCached |= (nextByte << bitsCachedSize);
            } else {
                bitsCached <<= 8;
                bitsCached |= nextByte;
            }
            bitsCachedSize += 8;
        }
        
        final long bitsOut;
        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
            bitsOut = (bitsCached & MASKS[count]);
            bitsCached >>>= count;
        } else {
            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
        }
        bitsCachedSize -= count;
        return bitsOut;
    }",Returns at most 63 bits read from the underlying stream.,1,295
1396,"private Component createTransferCallButton()
    {
        Call call = callPeer.getCall();

        if (call != null)
        {
            OperationSetAdvancedTelephony telephony =
                (OperationSetAdvancedTelephony) call.getProtocolProvider()
                    .getOperationSet(OperationSetAdvancedTelephony.class);

            if (telephony != null)
                return new TransferCallButton(callPeer);
        }
        return null;
    }",Creates a new Component representing a UI means to transfer the Call of the associated callPeer or null if call-transfer is unsupported.,1,105
1397,"public static Query applyPagination(Query spec, Pageable pageable) {

        if (pageable == null) {
            return spec;
        }

        spec.limit(pageable.getPageSize());
        // spec.skip(pageable.getOffset());

        return applySorting(spec, pageable.getSort());
    }",Applies the given  Pageable to the given  Query.,1,81
1398,"static HandlerStrategies of(Supplier<Stream<HttpMessageReader<?>>> messageReaders,
			Supplier<Stream<HttpMessageWriter<?>>> messageWriters,
			Supplier<Stream<ViewResolver>> viewResolvers) {

		return new HandlerStrategies() {
			@Override
			public Supplier<Stream<HttpMessageReader<?>>> messageReaders() {
				return checkForNull(messageReaders);
			}
			@Override
			public Supplier<Stream<HttpMessageWriter<?>>> messageWriters() {
				return checkForNull(messageWriters);
			}
			@Override
			public Supplier<Stream<ViewResolver>> viewResolvers() {
				return checkForNull(viewResolvers);
			}
			private <T> Supplier<Stream<T>> checkForNull(Supplier<Stream<T>> supplier) {
				return supplier != null ? supplier : Stream::empty;
			}
		};
	}",Return a new  HandlerStrategies described by the given supplier functions.,1,225
1399,"static HandlerStrategies of(ApplicationContext applicationContext) {
		return builder(applicationContext).build();
	}",Return a new  HandlerStrategies based on the given plain ApplicationContext application context.,1,29
1400,"public synchronized NamingStore getValue() throws IllegalStateException {
        return namingStore;
    }",Get the naming store value.,1,25
1401,"public static CiConstant forLong(long i) {
        return i == 0 ? LONG_0 : i == 1 ? LONG_1 : get(CiKind.Long, i);
    }",Creates a boxed long constant.,1,58
1402,"public Tool getPackager(BuildRuleResolver resolver) {
    return delegate.getRequiredTool(""react-native"", ""packager_worker"", resolver);
  }",The JavaScript packager tool to use for React Native rules.,1,37
1403,"public Definition getDefinition(String name,
                                             TilesRequestContext tilesContext)
        throws DefinitionsFactoryException {

        Definitions definitions = getDefinitions();
        Locale locale = null;

        if (tilesContext != null) {
            locale = localeResolver.resolveLocale(tilesContext);
            if (!isContextProcessed(tilesContext)) {
                synchronized (definitions) {
                    addDefinitions(definitions, tilesContext);
                }
            }
        }

        return definitions.getDefinition(name, locale);
    }",Returns a Definition object that matches the given name and,1,134
1404,"public Object getService(Bundle bundle, ServiceRegistration registration) {
        if (getInstanceManager().getState() == InstanceManager.VALID) {
            return m_strategy.getService(bundle, registration);
        } else {
            return null;
        }
    }",Returns a service object for the dependency.,1,73
1405,"boolean addIfCompetitive(int indexSortSourcePrefix) {
        // checks if the candidate key is competitive
        Integer topSlot = compareCurrent();
        if (topSlot != null) {
            // this key is already in the top N, skip it
            docCounts.increment(topSlot, 1);
            return true;
        }
        if (afterKeyIsSet) {
            int cmp = compareCurrentWithAfter();
            if (cmp <= 0) {
                if (indexSortSourcePrefix < 0 && cmp == indexSortSourcePrefix) {
                    // the leading index sort is in the reverse order of the leading source
                    // so we can early terminate when we reach a document that is smaller
                    // than the after key (collected on a previous page).
                    throw new CollectionTerminatedException();
                }
                // key was collected on a previous page, skip it (>= afterKey).
                return false;
            }
        }
        if (size() >= maxSize) {
            // the tree map is full, check if the candidate key should be kept
            int cmp = compare(CANDIDATE_SLOT, top());
            if (cmp > 0) {
                if (cmp <= indexSortSourcePrefix) {
                    // index sort guarantees that there is no key greater or equal than the
                    // current one in the subsequent documents so we can early terminate.
                    throw new CollectionTerminatedException();
                }
                // the candidate key is not competitive, skip it.
                return false;
            }
        }
        // the candidate key is competitive
        final int newSlot;
        if (size() >= maxSize) {
            // the queue is full, we replace the last key with this candidate
            int slot = pop();
            map.remove(new Slot(slot));
            // and we recycle the deleted slot
            newSlot = slot;
        } else {
            newSlot = size();
        }
        // move the candidate key to its new slot
        copyCurrent(newSlot);
        map.put(new Slot(newSlot), newSlot);
        add(newSlot);
        return true;
    }",Add or update the current composite key in the queue if the values are competitive.,1,387
1406,"public Map<PathFragment, Artifact> getRunfilesInputs(EventHandler eventHandler,
      Location location) throws IOException {
    Map<PathFragment, Artifact> manifest = getSymlinksAsMap();
    // Add unconditional artifacts (committed to inclusion on construction of runfiles).
    for (Artifact artifact : getUnconditionalArtifactsWithoutMiddlemen()) {
      manifest.put(artifact.getRootRelativePath(), artifact);
    }

    // Add conditional artifacts (only included if they appear in a pruning manifest).
    for (Runfiles.PruningManifest pruningManifest : getPruningManifests()) {
      // This map helps us convert from source tree root-relative paths back to artifacts.
      Map<String, Artifact> allowedRunfiles = new HashMap<>();
      for (Artifact artifact : pruningManifest.getCandidateRunfiles()) {
        allowedRunfiles.put(artifact.getRootRelativePath().getPathString(), artifact);
      }
      BufferedReader reader = new BufferedReader(
          new InputStreamReader(pruningManifest.getManifestFile().getPath().getInputStream()));
      String line;
      while ((line = reader.readLine()) != null) {
        Artifact artifact = allowedRunfiles.get(line);
        if (artifact != null) {
          manifest.put(artifact.getRootRelativePath(), artifact);
        }
      }
    }

    manifest = filterListForObscuringSymlinks(eventHandler, location, manifest);

    // TODO(bazel-team): Create /dev/null-like Artifact to avoid nulls?
    for (PathFragment extraPath : emptyFilesSupplier.getExtraPaths(manifest.keySet())) {
      manifest.put(extraPath, null);
    }

    PathFragment path = new PathFragment(suffix);
    Map<PathFragment, Artifact> result = new HashMap<>();
    for (Map.Entry<PathFragment, Artifact> entry : manifest.entrySet()) {
      result.put(path.getRelative(entry.getKey()), entry.getValue());
    }

    // Finally add symlinks outside the source tree on top of everything else.
    for (Map.Entry<PathFragment, Artifact> entry : getRootSymlinksAsMap().entrySet()) {
      PathFragment mappedPath = entry.getKey();
      Artifact mappedArtifact = entry.getValue();
      if (result.put(mappedPath, mappedArtifact) != null) {
        // Emit warning if we overwrote something and we're capable of emitting warnings.
        if (eventHandler != null) {
          eventHandler.handle(Event.warn(location, ""overwrote "" + mappedPath + "" symlink mapping ""
              + ""with root symlink to "" + mappedArtifact));
        }
      }
    }

    return result;
  }",Returns the symlinks as a map from PathFragment to Artifact.,1,607
1407,"public Date getDate(String key) {
		String s = get(key);
		if (s != null) {
			try {
				return new Date(Long.parseLong(s));
			}
			catch (NumberFormatException ex) {
				// Not valid epoch time
			}
		}
		return null;
	}",Return the value of the specified property as a  Date or  null if the value is not a valid  Long representation of an epoch time.,1,93
1408,"private static boolean matchRegex(String name, String pattern) {
        // match by regular expression
        try {
            Pattern compiled = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);
            Matcher matcher = compiled.matcher(name);
            return matcher.matches();
        } catch (PatternSyntaxException e) {
            // ignore
        }
        return false;
    }",Matches the name with the given pattern (case insensitive).,1,101
1409,"public static String[] loadTermDictionary(Configuration conf, FileSystem fs, String filePattern) throws IOException {
    FileStatus[] dictionaryFiles = fs.globStatus(new Path(filePattern));
    OpenObjectIntHashMap<String> dict = new OpenObjectIntHashMap<String>();
    Text key = new Text();
    IntWritable value = new IntWritable();
    for (FileStatus fileStatus : dictionaryFiles) {
      Path path = fileStatus.getPath();
      SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, conf);
      // key is term value is id
      while (reader.next(key, value)) {
        dict.put(key.toString(), value.get());
      }
    }
    String[] dictionary = new String[dict.size()];
    for (String feature : dict.keys()) {
      dictionary[dict.get(feature)] = feature;
    }
    return dictionary;
  }",Read a dictionary in  SequenceFile generated by  DictionaryVectorizer,1,269
1410,"public UnitConverter getDimensionalTransform(BaseUnit<?> unit) {
        return AbstractUnitConverter.IDENTITY;
    }",Returns the dimensional transform of the specified base unit (converter to its dimensional unit).,1,27
1411,"public boolean accept(Integer aInt)
    {
        final Iterator it = getFilters().iterator();
        while (it.hasNext()) {
            final IntFilter filter = (IntFilter) it.next();
            if (filter.accept(aInt)) {
                return true;
            }
        }
        return false;
    }",Determines whether an Integer matches a CSV integer value.,1,100
1412,"public Collection<StarSelectItem> getStarSelectItems() {
        Collection<StarSelectItem> result = new LinkedList<>();
        for (SelectItem each : items) {
            if (each instanceof StarSelectItem) {
                result.add((StarSelectItem) each);
            }
        }
        return result;
    }",Get star select items.,1,88
1413,"public Frame scoreAutoEncoder(Frame frame) {
    Frame fr = frame;
    boolean adapt = true;
    int ridx = fr.find(responseName());
    if (ridx != -1) { // drop the response for scoring!
      fr = new Frame(fr);
      fr.remove(ridx);
    }
    // Adapt the Frame layout - returns adapted frame and frame containing only
    // newly created vectors
    Frame[] adaptFrms = adapt ? adapt(fr,false) : null;
    // Adapted frame containing all columns - mix of original vectors from fr
    // and newly created vectors serving as adaptors
    Frame adaptFrm = adapt ? adaptFrms[0] : fr;
    // Contains only newly created vectors. The frame eases deletion of these vectors.
    Frame onlyAdaptFrm = adapt ? adaptFrms[1] : null;

    final int len = _names.length-1;
    adaptFrm.add(""L2"",adaptFrm.anyVec().makeZero());
    final double[] normMul = model_info().data_info()._normMul;

    new MRTask2() {
      @Override public void map( Chunk chks[] ) {
        double tmp [] = new double[len];
        float preds[] = new float [len];
        for( int row=0; row<chks[0]._len; row++ ) {
          for( int i=0; i<_names.length-1; i++ )
            tmp[i] = chks[i].at0(row); //original data
          score0(tmp,preds); //fill predictions (reconstruction)
//          Log.info(""row: "" + chks[0]._start + row);
//          Log.info(""actual"" + ArrayUtils.toString(tmp));
//          Log.info(""recons"" + ArrayUtils.toString(preds));
          double l2 = 0;
          for (int i=0; i<len; ++i)
            l2 += Math.pow((preds[i] - tmp[i])*normMul[i], 2);
//          Log.info(""L2: "" + l2);
          chks[len].set0(row,l2); //last vector stores the per-row L2 error
        }
      }
    }.doAll(adaptFrm);

    // Return just the output columns
    int x=_names.length-1, y=adaptFrm.numCols();
    final Frame l2 = adaptFrm.extractFrame(x, y);
    if (adapt) onlyAdaptFrm.delete();
    return l2;
  }",Score auto-encoded reconstruction (on-the-fly),1,559
1414,"public ParameterBinding getBindingFor(int position) {
		for (ParameterBinding binding : bindings) {
			if (binding.hasPosition(position)) {
				return binding;
			}
		}

		return null;
	}",Returns the  ParameterBinding for the given position.,1,64
1415,"public static Observable<Response> toObservable(final Func0<BoundRequestBuilder> supplier) {

        //Get the builder from the function
        final BoundRequestBuilder builder = supplier.call();

        //create the observable from scratch
        return Observable.create(new Observable.OnSubscribe<Response>() {

            @Override
            public void call(final Subscriber<? super Response> subscriber) {
                try {
                    AsyncCompletionHandler<Void> handler = new AsyncCompletionHandler<Void>() {
                        @Override
                        public State onStatusReceived(HttpResponseStatus status) throws Exception {
                            return super.onStatusReceived(status);
                        }

                        @Override
                        public Void onCompleted(Response response) throws Exception {
                            subscriber.onNext(response);
                            subscriber.onCompleted();
                            return null;
                        }

                        @Override
                        public void onThrowable(Throwable t) {
                            subscriber.onError(t);
                        }
                    };
                    //execute the request
                    builder.execute(handler);
                } catch (Throwable t) {
                    subscriber.onError(t);
                }
            }

        });

    }",Observe a request execution and emit the response to the observer.,1,287
1416,"public PointD getValuesByTouchPoint(float x, float y, AxisDependency axis) {
        PointD result = PointD.getInstance(0,0);
        getValuesByTouchPoint(x,y,axis,result);
        return result;
    }",Returns a recyclable PointD instance,1,62
1417,"protected List<byte[]> serializeCounter(String name, Counter counter) {
    List<byte[]> metrics = new ArrayList<byte[]>();
    metrics.add(serializeValue(name, counter.getCount()));
    return metrics;
  }",Serialize a  com.codahale.metrics.Counter.,1,75
1418,"public static String getFileNameWithoutExt(File filePath) {
        if (filePath == null)
            return null;
        
        String fileName = filePath.getName();
        if (fileName == null)
            return null;
        
        return (fileName.substring(0, fileName.lastIndexOf(""."")));
    }",get the file name without extension,1,95
1419,"protected List getElements( )
	{
		return DNDUtil.editPart2Model( getSelection( ) ).toList( );
	}",Gets element handles.,1,36
1420,"public static String getLabel(Node node) {
		Object value = node.attributesProperty().get(ELEMENT_LABEL);
		if (value instanceof Provider) {
			return (String) ((Provider<?>) value).get();
		}
		return (String) value;
	}",Returns the value of the  #ELEMENT_LABEL attribute for the given  Node.,1,86
1421,"public static MediaFormat getMediaFormat(String encoding, double clockRate)
    {
        for (MediaFormat format : getMediaFormats(encoding))
            if (format.getClockRate() == clockRate)
                return format;
        return null;
    }",Gets the MediaFormat known to MediaUtils and having the specified well-known encoding (name) and clockRate.,1,68
1422,"protected Service restoreAuthenticationRequestInContext(final RequestContext requestContext, final J2EContext webContext, final String clientName) {
        val logoutEndpoint = webContext.getRequestParameter(SAML2ServiceProviderMetadataResolver.LOGOUT_ENDPOINT_PARAMETER);
        if (logoutEndpoint != null) {
            return null;
        } else {
            try {
                delegatedSessionCookieManager.restore(webContext);
                val client = (BaseClient<Credentials, CommonProfile>) this.clients.findClient(clientName);
                val service = delegatedClientWebflowManager.retrieve(requestContext, webContext, client);
                return service;
            } catch (final Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
            throw new UnauthorizedServiceException(UnauthorizedServiceException.CODE_UNAUTHZ_SERVICE, ""Service unauthorized"");
        }
    }",Restore authentication request in context service (return null for a logout call).,1,199
1423,"public static Map<Class<? extends Diff>, IChangeFactory> createExtensionFactories(
			CompareDiagramConfiguration configuration) {
		final Map<Class<? extends Diff>, IChangeFactory> dataset = new HashMap<Class<? extends Diff>, IChangeFactory>();

		List<IChangeFactory> factories = new ArrayList<IChangeFactory>();
		factories.add(new HideFactory());
		factories.add(new ShowFactory());
		factories.add(new NodeChangeFactory());
		factories.add(new CoordinatesChangeFactory(configuration));
		factories.add(new EdgeChangeFactory());

		for (IChangeFactory iDiffExtensionFactory : factories) {
			dataset.put(iDiffExtensionFactory.getExtensionKind(), iDiffExtensionFactory);
		}

		return Collections.unmodifiableMap(dataset);
	}",Creates and returns all  IChangeFactory available in this plugin.,1,209
1424,"public static boolean containsOnly(CharSequence cs, String validChars) {
        if (cs == null || validChars == null) {
            return false;
        }
        return containsOnly(cs, validChars.toCharArray());
    }",Checks if the CharSequence contains only certain characters. A null CharSequence will return false.,1,72
1425,"public static SessionManager getInstance() {
        return BasicServer.getInstance().getSessionManager();
    }",Returns the instance of SessionManagerImpl being used by the XMPPServer.,1,29
1426,"public boolean isLastTier() {
    return mNextTier == null;
  }",Check whether the StorageTier is the last tier,1,24
1427,"protected BlockInStream createUnderStoreBlockInStream(long blockStart, long length, String path)
      throws IOException {
    return new UnderStoreBlockInStream(mContext, blockStart, length, mBlockSize,
        getUnderStoreStreamFactory(path, mContext));
  }",Creates and returns a  BlockInStream for the UFS.,1,61
1428,"@Deprecated
    public Set<JahiaTemplatesPackage> getSortedAvailableTemplatePackagesForModule(String moduleName, final RenderContext context) {
        return getAvailableTemplatePackagesForModule(moduleName);
    }",Returns a sorted set of all available template packages having templates for a module.,1,38
1429,"public PointD getPixelsForValues(float x, float y) {

        ptsBuffer[0] = x;
        ptsBuffer[1] = y;

        pointValuesToPixel(ptsBuffer);

        double xPx = ptsBuffer[0];
        double yPx = ptsBuffer[1];

        return PointD.getInstance(xPx, yPx);
    }",Returns a recyclable PointD instance.,1,94
1430,"public static InstanceManager createInstanceManager(InstanceManager parent, Binder... binders) {
        return _instanceManager(null, parent, binders);
    }","Create an unnamed, parented  InstanceManager.",1,41
1431,"public ClickServlet getClickServlet() {
        return clickServlet;
    }",Return the container  net.sf.click.ClickServlet.,1,19
1432,"public static Object methodInvoke(final Object target, final String methodName, final Class<?>... parameterTypes) {
        Method method = getMethod(target, methodName, parameterTypes);
        Preconditions.checkNotNull(method);
        method.setAccessible(true);
        try {
            return method.invoke(target);
        } catch (InvocationTargetException ex) {
            throw ex.getTargetException();
        }
    }",Invoke target method when argument is nul.,1,119
1433,"public static ExtensibilityElement getBindingExtension(Binding binding) {
        Collection bindings = new ArrayList();
        CollectionsX.filter(bindings, binding.getExtensibilityElements(), HTTPBinding.class);
        CollectionsX.filter(bindings, binding.getExtensibilityElements(), SOAPBinding.class);
        if (bindings.size() == 0) {
            return null;
        } else if (bindings.size() > 1) {
            // exception if multiple bindings found
            throw new IllegalArgumentException(msgs.msgMultipleBindings(binding.getQName()));
        } else {
            // retrieve the single element
            ExtensibilityElement result = (ExtensibilityElement) bindings.iterator().next();
            return result;
        }
    }",Look up the ExtensibilityElement defining the binding for the given Port or throw an  IllegalArgumentException if multiple bindings found.,1,183
1434,"public boolean addURL(String url, URL baseUrl) {
        if (url == null || url.length() == 0) {
            return false;
        }
        //url.replace('+',' ');
        url=StringEscapeUtils.unescapeXml(url);
        boolean b = false;
        try {
            b = this.add(ConversionUtils.makeRelativeURL(baseUrl, url));
        } catch (MalformedURLException mfue) {
            // No WARN message to avoid performance impact
            if(log.isDebugEnabled()) {
                log.debug(""Error occured building relative url for:""+url+"", message:""+mfue.getMessage());
            }
            // No point in adding the URL as String as it will result in null 
            // returned during iteration, see URLString
            // See https://issues.apache.org/bugzilla/show_bug.cgi?id=55092
            return false;
        }
        return b;
    }","Convenience method for adding URLs to the collection If the url parameter is null, empty or URL is malformed, nothing is done",1,186
1435,"public synchronized FileInfo getFileStatus(long fileId, boolean useCachedMetadata)
      throws IOException {
    return getFileStatus(fileId, TachyonURI.EMPTY_URI, useCachedMetadata);
  }",Get FileInfo object based on fileId.,1,45
1436,"public LayoutElementParcelable generateLayoutElement(MainFragment mainFragment, UtilitiesProviderInterface utilitiesProvider) {
        switch (mode) {
            case FILE:
            case ROOT:
                File file = new File(path);
                LayoutElementParcelable layoutElement;
                if (isDirectory()) {

                    layoutElement = FileUtils.newElement(mainFragment.folder,
                                    path, RootHelper.parseFilePermission(file),
                                    """", folderSize() + """", 0, true, false,
                                    file.lastModified() + """");
                } else {
                    layoutElement = FileUtils.newElement(Icons.loadMimeIcon(
                            file.getPath(), !mainFragment.IS_LIST, mainFragment.getResources()),
                            file.getPath(), RootHelper.parseFilePermission(file),
                            file.getPath(), file.length() + """", file.length(), false, false, file.lastModified() + """");
                }
                layoutElement.setMode(mode);
                return layoutElement;
            default:
                return null;
        }
    }",Generates a  LayoutElementParcelable adapted compatible element.,1,275
1437,"public byte[] decode(String pArray)
	{
		return decode(StringUtils.getBytesUtf8(pArray));
	}",Decodes a String containing containing characters in the Base64 alphabet.,1,33
1438,"protected boolean requiresDenseOutput() {
        if (!eventsStates.isEmpty()) {
            return true;
        }
        for (StepHandler handler : stepHandlers) {
            if (handler.requiresDenseOutput()) {
                return true;
            }
        }
        return false;
    }",Check if dense output is needed.,1,82
1439,"public static Throwable shouldFailWithCause(Class expectedCause, Closure code) {
        if (expectedCause == null) {
            fail(""The expectedCause class cannot be null"");
        }
        Throwable cause = null;
        Throwable orig = null;
        int level = 0;
        try {
            code.call();
        } catch (GroovyRuntimeException gre) {
            orig = ScriptBytecodeAdapter.unwrap(gre);
            cause = orig.getCause();
        } catch (Throwable e) {
            orig = e;
            cause = orig.getCause();
        }

        if (orig != null && cause == null) {
            fail(""Closure "" + code + "" was expected to fail due to a nested cause of type "" + expectedCause.getName() +
            "" but instead got a direct exception of type "" + orig.getClass().getName() + "" with no nested cause(s). Code under test has a bug or perhaps you meant shouldFail?"");
        }

        while (cause != null && !expectedCause.isInstance(cause) && cause != cause.getCause() && level < MAX_NESTED_EXCEPTIONS) {
            cause = cause.getCause();
            level++;
        }

        if (orig == null) {
            fail(""Closure "" + code + "" should have failed with an exception having a nested cause of type "" + expectedCause.getName());
        } else if (cause == null || !expectedCause.isInstance(cause)) {
            fail(""Closure "" + code + "" should have failed with an exception having a nested cause of type "" + expectedCause.getName() + "", instead found these Exceptions:\n"" + buildExceptionList(orig));
        }
        return cause;
    }",Asserts that the given code closure fails when it is evaluated and that a particular Exception type can be attributed to the cause.,1,438
1440,"public static Workflow fromJSON(String workflowInfoJson) throws IOException {
    ObjectMapper om = new ObjectMapper();
    om.getDeserializationConfig().set(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    return om.readValue(workflowInfoJson, Workflow.class);
  }",Derializes a JSON Workflow string into a Workflow object.,1,72
1441,"public InvokeDynamic withThis(TypeDescription... typeDescription) {
        List<InvocationProvider.ArgumentProvider> argumentProviders = new ArrayList<InvocationProvider.ArgumentProvider>(typeDescription.length);
        for (TypeDescription aTypeDescription : typeDescription) {
            argumentProviders.add(new InvocationProvider.ArgumentProvider.ForThisInstance(nonNull(aTypeDescription)));
        }
        return new InvokeDynamic(bootstrapMethod,
                handleArguments,
                invocationProvider.appendArguments(argumentProviders),
                terminationHandler,
                assigner,
                dynamicallyTyped);
    }",Passes references to  this onto the operand stack where the instance is represented as the given types.,1,121
1442,"public static String format(String pattern, Object... arguments)
      throws IllegalFormatException {
    return formatToString(pattern, ImmutableList.copyOf(arguments));
  }",Perform Python-style string formatting.,1,48
1443,"ValueLob convertPrecision(long precision) {
        if (this.precision <= precision) {
            return this;
        }
        ValueLob lob;
        if (valueType == CLOB) {
            if (handler == null) {
                try {
                    int p = MathUtils.convertLongToInt(precision);
                    String s = IOUtils.readStringAndClose(getReader(), p);
                    byte[] data = s.getBytes(StandardCharsets.UTF_8);
                    lob = ValueLob.createSmallLob(valueType, data, s.length());
                } catch (IOException e) {
                    throw DbException.convertIOException(e, null);
                }
            } else {
                lob = ValueLob.createTempClob(getReader(), precision, handler);
            }
        } else {
            if (handler == null) {
                try {
                    int p = MathUtils.convertLongToInt(precision);
                    byte[] data = IOUtils.readBytesAndClose(getInputStream(), p);
                    lob = ValueLob.createSmallLob(valueType, data, data.length);
                } catch (IOException e) {
                    throw DbException.convertIOException(e, null);
                }
            } else {
                lob = ValueLob.createTempBlob(getInputStream(), precision, handler);
            }
        }
        return lob;
    }",Convert the precision to the requested value.,1,370
1444,"public Object getMkp() {
        return new MarkupBuilderHelper(this);
    }","Property that may be called from within your builder closure to access helper methods, namely  MarkupBuilderHelper#yield(String),  MarkupBuilderHelper#yieldUnescaped(String),  MarkupBuilderHelper#pi(Map),  MarkupBuilderHelper#xmlDeclaration(Map) and  MarkupBuilderHelper#comment(String).",1,24
1445,"public static AsyncEventRouter create() {
        final String router = PropertiesUtil.getProperties().getStringProperty(PROPERTY_NAME_ASYNC_EVENT_ROUTER);
        if (router == null || PROPERTY_VALUE_DEFAULT_ASYNC_EVENT_ROUTER.equals(router)
                || DefaultAsyncEventRouter.class.getSimpleName().equals(router)
                || DefaultAsyncEventRouter.class.getName().equals(router)) {
            return new DefaultAsyncEventRouter();
        }
        if (PROPERTY_VALUE_DISCARDING_ASYNC_EVENT_ROUTER.equals(router)
                || DiscardingAsyncEventRouter.class.getSimpleName().equals(router)
                || DiscardingAsyncEventRouter.class.getName().equals(router)) {
            return createDiscardingAsyncEventRouter();
        }
        return createCustomRouter(router);
    }",Creates and returns  AsyncEventRouter instances based on user-specified system properties.,1,175
1446,"private QualifiedBean<Q, T> extractQualifiedBean( final int index )
    {
        if ( exposed )
        {
            // take defensive copy to avoid disturbing iterators
            beans = new ArrayList<QualifiedBean<Q, T>>( beans );
            exposed = false;
        }
        final QualifiedBean<Q, T> bean = beans.remove( index );
        if ( DEFAULT_QUALIFIER.equals( bean.getKey() ) )
        {
            defaultIndex--; // one less default
        }
        return bean;
    }",Extracts a qualified bean from the given position in this bean sequence.,1,142
1447,"private SyncedFolderDisplayItem createSyncedFolder(@NonNull SyncedFolder syncedFolder, @NonNull MediaFolder mediaFolder) {
        return new SyncedFolderDisplayItem(
                syncedFolder.getId(),
                syncedFolder.getLocalPath(),
                syncedFolder.getRemotePath(),
                syncedFolder.getWifiOnly(),
                syncedFolder.getChargingOnly(),
                syncedFolder.getSubfolderByDate(),
                syncedFolder.getAccount(),
                syncedFolder.getUploadAction(),
                syncedFolder.isEnabled(),
                mediaFolder.filePaths,
                mediaFolder.folderName,
                mediaFolder.numberOfFiles);
    }",creates a SyncedFolderDisplayItem merging a  SyncedFolder and a  MediaFolder object instance.,1,124
1448,"public RealmQuery<E> where() {
        return null;
    }",Currently not implemented!,1,22
1449,"public Object caseAxis( Axis object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Axis'.,1,25
1450,"public int compareTo(final byte [] that) {
    int diff = this.bytes.length - that.length;
    return (diff != 0)?
      diff:
      WritableComparator.compareBytes(this.bytes, 0, this.bytes.length, that,
        0, that.length);
  }",Compares the bytes in this object to the specified byte array,1,91
1451,"public boolean unlockContent(UnlockableContent content){
        if(!content.canBeUnlocked()) return false;

        if(!unlocked.containsKey(content.getContentTypeName())){
            unlocked.put(content.getContentTypeName(), new ObjectSet<>());
        }

        boolean ret = unlocked.get(content.getContentTypeName()).add(content.getContentName());

        //fire unlock event so other classes can use it
        if(ret){
            content.onUnlock();
            Events.fire(UnlockEvent.class, content);
            dirty = true;
        }

        return ret;
    }","Makes this piece of content 'unlocked', if possible.",1,154
1452,"public CcStatus getCcStatus() throws RpcClientFailedException {
		try {
			sendRequest(""<get_cc_status/>\n"");
			CcStatus ccStatus = CcStatusParser.parse(receiveReply());
			return ccStatus;
		}
		catch (IOException e) {
			throw new ConnectionFailedException(""Connection failed in getCcStatus()"", e);
		}
	}",Performs   RPC towards BOINC client,1,89
1453,"public boolean drag(int startX, int startY, int endX, int endY, int steps) {
        Tracer.trace(startX, startY, endX, endY, steps);
        return mUiAutomationBridge.getInteractionController()
                .swipe(startX, startY, endX, endY, steps, true);
    }",Performs a swipe from one coordinate to another coordinate.,1,89
1454,"static JStream<Integer> from(int value) {
        return new Cons<>(value, () -> from(value + 1));
    }",Returns an infinitely long JStream of int values starting from  from.,1,48
1455,"protected StreamSource openStream(String href, FOUserAgent ua) {

        StreamSource in = null;

        try {
            in = ua.getStream(href);
        } catch (IOException ioe) {
            log.error(""Error while opening stream for (""
                    + href + ""): "" + ioe.getMessage(), ioe);
            return null;
        }
        return in;
    }",Create a StreamSource objects.,1,112
1456,"public static String denormalize(final CharSequence self) {
        final String s = self.toString();
        // Don't do this in static initializer because we may never be needed.
        // TODO: Put this lineSeparator property somewhere everyone can use it.
        if (lineSeparator == null) {
            final StringWriter sw = new StringWriter(2);
            try {
                // We use BufferedWriter rather than System.getProperty because
                // it has the security manager rigamarole to deal with the possible exception.
                final BufferedWriter bw = new BufferedWriter(sw);
                bw.newLine();
                bw.flush();
                lineSeparator = sw.toString();
            } catch (IOException ioe) {
                // This shouldn't happen, but this is the same default used by
                // BufferedWriter on a security exception.
                lineSeparator = ""\n"";
            }
        }

        final int len = s.length();

        if (len < 1) {
            return s;
        }

        final StringBuilder sb = new StringBuilder((110 * len) / 100);

        int i = 0;

        while (i < len) {
            final char ch = s.charAt(i++);

            switch (ch) {
                case '\r':
                    sb.append(lineSeparator);

                    // Eat the following LF if any.
                    if ((i < len) && (s.charAt(i) == '\n')) {
                        ++i;
                    }

                    break;

                case '\n':
                    sb.append(lineSeparator);
                    break;

                default:
                    sb.append(ch);
                    break;
            }
         }

        return sb.toString();
    }","Return a CharSequence with lines (separated by LF, CR/LF, or CR) terminated by the platform specific line separator.",1,406
1457,"public List<MgmtTagRequestBodyPut> buildAsList(final int count) {
        final ArrayList<MgmtTagRequestBodyPut> bodyList = Lists.newArrayList();
        for (int index = 0; index < count; index++) {
            bodyList.add(doBuild(name + index));
        }

        return bodyList;
    }",Builds a list of multiple  MgmtTagRequestBodyPut to create multiple tags at once.,1,93
1458,"public RepositoryName getName() {
    return name;
  }",Gets the repository name.,1,19
1459,"public List<User> getGradeableUsers() {
		try {
			String siteId = this.getCurrentSiteId();
			Set<String> userIds = siteService.getSite(siteId).getUsersIsAllowed(""gradebook.viewOwnGrades"");			
			return userDirectoryService.getUsers(userIds);
		} catch (IdUnusedException e) {
			return null;
		}
	}",Get a list of users in the current site that can have grades,1,94
1460,"public ServiceInfo getService(Service service) throws AmbariException {
    StackId stackId = service.getDesiredStackId();
    return getService(stackId.getStackName(), stackId.getStackVersion(), service.getName());
  }",Convenience method to use stack id instead of separate name and version.,1,61
1461,"private static MethodView make(final Inspection inspection, Address address, boolean interactive) throws MaxVMBusyException {
        MethodView methodView = null;
        final MaxCompiledCode compiledCode = inspection.vm().codeCache().findCompiledCode(address);
        if (compiledCode != null) {
            // Java method
            methodView = make(inspection, compiledCode, MethodCodeKind.MACHINE_CODE);
        } else {
            final MaxExternalCode externalCode = inspection.vm().codeCache().findExternalCode(address);
            if (externalCode != null) {
                // Some other kind of known external machine code
                methodView = make(inspection, externalCode);
            } else if (interactive) {
                // Code location is not in a Java method or runtime stub and has not yet been viewed in a native routine.
                // Give the user a chance to guess at its length so we can register and view it
                final MutableInnerClassGlobal<MethodView> result = new MutableInnerClassGlobal<MethodView>();
                final String defaultDescription = ""Native code @0x"" + address.toHexString();
                new NativeLocationInputDialog(inspection, ""Name unknown native code"", address, MaxExternalCode.DEFAULT_NATIVE_CODE_LENGTH, defaultDescription) {
                    @Override
                    public void entered(Address nativeAddress, long nBytes, String enteredName) {
                        try {
                            String name = enteredName;
                            if (name == null || name.equals("""")) {
                                name = defaultDescription;
                            }
                            final MaxExternalCode externalCode = vm().codeCache().createExternalCode(nativeAddress, nBytes, name);
                            result.setValue(MethodView.make(inspection, externalCode));
                            // inspection.focus().setCodeLocation(new TeleCodeLocation(inspection.teleVM(), nativeAddress));
                        } catch (IllegalArgumentException illegalArgumentException) {
                            inspection.gui().errorMessage(""Specified external code range overlaps region already registered in Inpsector"");
                        } catch (MaxVMBusyException maxVMBusyException) {
                            inspection.announceVMBusyFailure(""View native code"");
                        } catch (MaxInvalidAddressException e) {
                            inspection.gui().errorMessage(""Unable to read memory at "" + nativeAddress.to0xHexString());
                            e.printStackTrace();
                        }
                    }
                    @Override
                    public boolean isValidSize(long nBytes) {
                        return nBytes > 0;
                    }
                };
                methodView = result.value();
            }
        }
        return methodView;
    }",Makes a view displaying code for the method pointed to by the instructionPointer.,1,544
1462,"public boolean intersects(final Range other) {
        return getStart() < other.getEnd() && other.getStart() < getEnd();
    }",Checks whether this range and another range are at least partially covering the same values.,1,49
1463,"@NonNull
    @Override
    public Observable<GroupOperationResults> createObservable() {
        throwExceptionIfRxJavaIsNotAvailable(""createObservable()"");

        return Observable
                .create(OnSubscribeExecuteAsBlocking.newInstance(this))
                .subscribeOn(Schedulers.io());
    }",Creates  Observable which will perform Group Operation and send result to observer.,1,61
1464,"public static INDArray rand(int rows, int columns, long seed) {
        INDArray ret = createUninitialized(new int[] {rows, columns}, Nd4j.order());
        return rand(ret, seed);
    }","Create a random ndarray with values from a uniform distribution over (0, 1) with the given shape using the given seed",1,71
1465,"public KLayoutNode getParentGroup() {
		return parentNode;
	}",Gets the parent layout node.,1,19
1466,"public CalendarEvent remove(long calendarEventId)
		throws NoSuchEventException, SystemException {
		return remove(Long.valueOf(calendarEventId));
	}",Removes the calendar event with the primary key from the database.,1,38
1467,"@Override
    public String toString() {
        return versionString(version.major, version.minor);
    }",Return Java SE platform version as human readable  String.,1,32
1468,"public static Counter newCounter(MetricName metricName) {
        return DEFAULT_REGISTRY.newCounter(metricName);
    }",Creates a new  com.yammer.metrics.core.Counter and registers it under the given metric name.,1,29
1469,"public Shape getEndDecoration() {
		return endDecoration;
	}","Returns the end decoration  Shape of this  Connection, or null.",1,19
1470,"public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {
		return toHttpHandler(routerFunction, StrategiesSupplier.withDefaults());
	}",Convert the given plain RouterFunction routing function into a  HttpHandler.,1,37
1471,"public JibContainer containerize(Containerizer containerizer)
      throws InterruptedException, ExecutionException, IOException,
          CacheDirectoryCreationException {
    BuildConfiguration buildConfiguration =
        toBuildConfiguration(BuildConfiguration.builder(), containerizer);
    BuildResult result = containerizer.getTargetImage().toBuildSteps(buildConfiguration).run();
    return new JibContainer(result.getImageDigest(), result.getImageId());
  }",Builds the container.,1,97
1472,"public static DateTimeFormatter getFormatter(DateTimeFormatter formatter, Locale locale) {
		DateTimeFormatter formatterToUse = (locale != null ? formatter.withLocale(locale) : formatter);
		JodaTimeContext context = getJodaTimeContext();
		return (context != null ? context.getFormatter(formatterToUse) : formatterToUse);
	}",Obtain a DateTimeFormatter with user-specific settings applied to the given base Formatter.,1,91
1473,"public SearchHelper prepareExec(SortedSet<String> projects) {
        if (redirect != null || errorMsg != null) {
            return this;
        }

        // the Query created by the QueryBuilder
        try {
            indexDir = new File(dataRoot, IndexDatabase.INDEX_DIR);
            query = builder.build();
            if (projects == null) {
                errorMsg = ""No project selected!"";
                return this;
            }
            this.projects = projects;
            if (projects.isEmpty()) {
                // no project setup
                FSDirectory dir = FSDirectory.open(indexDir.toPath());
                searcher = new IndexSearcher(DirectoryReader.open(dir));
                closeOnDestroy = true;
            } else {
                // Check list of project names first to make sure all of them
                // are valid and indexed.
                closeOnDestroy = false;
                Set <Project> projectSet = projects.stream().
                    map(x -> Project.getProject(x)).collect(Collectors.toSet());
                if (projectSet.contains(null)) {
                    errorMsg = ""Project list contains invalid projects"";
                    return this;
                }
                if (projectSet.stream().
                    filter(proj -> !proj.isIndexed()).
                    collect(Collectors.toSet()).size() > 0) {
                        errorMsg = ""Some of the projects to be searched are not indexed yet."";
                        return this;
                }

                // We use MultiReader even for single project. This should
                // not matter given that MultiReader is just a cheap wrapper
                // around set of IndexReader objects.
                MultiReader multireader = RuntimeEnvironment.getInstance().
                    getMultiReader(projects, searcherList);
                if (multireader != null) {
                    searcher = new IndexSearcher(multireader);
                } else {
                    errorMsg = ""Failed to initialize search. Check the index."";
                    return this;
                }
            }

            // TODO check if below is somehow reusing sessions so we don't
            // requery again and again, I guess 2min timeout sessions could be
            // useful, since you click on the next page within 2mins, if not,
            // then wait ;)
            // Most probably they are not reused. SearcherLifetimeManager might help here.
            switch (order) {
                case LASTMODIFIED:
                    sort = new Sort(new SortField(QueryBuilder.DATE, SortField.Type.STRING, true));
                    break;
                case BY_PATH:
                    sort = new Sort(new SortField(QueryBuilder.FULLPATH, SortField.Type.STRING));
                    break;
                default:
                    sort = Sort.RELEVANCE;
                    break;
            }
            checker = new DirectSpellChecker();
        } catch (ParseException e) {
            errorMsg = PARSE_ERROR_MSG + e.getMessage();
        } catch (FileNotFoundException e) {
//          errorMsg = ""Index database(s) not found: "" + e.getMessage();
            errorMsg = ""Index database(s) not found."";
        } catch (IOException e) {
            errorMsg = e.getMessage();
        }
        return this;
    }",Create the searcher to use w.r.t.,1,674
1474,"public static PGPSecretKey parseSecretKeyFromSExpr(InputStream inputStream, PBEProtectionRemoverFactory keyProtectionRemoverFactory, PGPPublicKey pubKey)
        throws IOException, PGPException
    {
        SXprUtils.skipOpenParenthesis(inputStream);

        String type;

        type = SXprUtils.readString(inputStream, inputStream.read());
        if (type.equals(""protected-private-key""))
        {
            SXprUtils.skipOpenParenthesis(inputStream);

            String curveName;

            String keyType = SXprUtils.readString(inputStream, inputStream.read());
            if (keyType.equals(""ecc""))
            {
                SXprUtils.skipOpenParenthesis(inputStream);

                String curveID = SXprUtils.readString(inputStream, inputStream.read());
                curveName = SXprUtils.readString(inputStream, inputStream.read());

                SXprUtils.skipCloseParenthesis(inputStream);
            }
            else
            {
                throw new PGPException(""no curve details found"");
            }

            byte[] qVal;

            SXprUtils.skipOpenParenthesis(inputStream);

            type = SXprUtils.readString(inputStream, inputStream.read());
            if (type.equals(""q""))
            {
                qVal = SXprUtils.readBytes(inputStream, inputStream.read());
            }
            else
            {
                throw new PGPException(""no q value found"");
            }

            SXprUtils.skipCloseParenthesis(inputStream);

            byte[] dValue = getDValue(inputStream, keyProtectionRemoverFactory, curveName);
            // TODO: check SHA-1 hash.

            return new PGPSecretKey(new SecretKeyPacket(pubKey.getPublicKeyPacket(), SymmetricKeyAlgorithmTags.NULL, null, null, new ECSecretBCPGKey(new BigInteger(1, dValue)).getEncoded()), pubKey);
        }

        throw new PGPException(""unknown key type found"");
    }",Parse a secret key from one of the GPG S expression keys associating it with the passed in public key.,1,443
1475,"public static boolean virtualMachineExists(final AzureSlave slave) {
        try {
            Configuration config = ServiceDelegateHelper.getConfiguration(slave);
            return virtualMachineExists(config, slave.getNodeName(), slave.getResourceGroupName());
        }
        catch (Exception e) {
            LOGGER.log(Level.INFO, 
                ""AzureManagementServiceDelegate: virtualMachineExists: error while determining whether vm exists"", e);
            return false;
        }
    }",Determines whether a given slave exists.,1,107
1476,"public static StackManipulation increment(ParameterDescription parameterDescription, int value) {
        return of(parameterDescription.getType()).increment(parameterDescription.getOffset(), value);
    }",Increments the value of the supplied parameter.,1,48
1477,"public String getExpression() {
        return expression;
    }",Returns the text enter by the user,1,19
1478,"public CalendarBooking remove(long calendarBookingId)
		throws NoSuchBookingException, SystemException {
		return remove(Long.valueOf(calendarBookingId));
	}",Removes the calendar booking with the primary key from the database.,1,38
1479,"public static RealMatrix createRealDiagonalMatrix(final double[] diagonal) {
        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);
        for (int i = 0; i < diagonal.length; ++i) {
            m.setEntry(i, i, diagonal[i]);
        }
        return m;
    }",Returns a diagonal matrix with specified elements.,1,100
1480,"public List<String> getValues() {
        synchronized (values) {
            return Collections.unmodifiableList(new ArrayList<String>(values));
        }
    }",Returns a List of the default values of the question if the question is part of a form to fill out.,1,47
1481,"@PublicEvolving
	public Map<String, TypeInformation<?>> getGenericParameters() {
		// return an empty map as the default implementation
		return Collections.emptyMap();
	}",Optional method for giving Flink's type extraction system information about the mapping of a generic type parameter to the type information of a subtype.,1,38
1482,"public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String name,
			P publisher, Class<T> elementClass) {

		Assert.notNull(name, ""'key' must not be null"");
		Assert.notNull(publisher, ""'publisher' must not be null"");
		Assert.notNull(elementClass, ""'elementClass' must not be null"");

		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass);
	}","Return a  MultipartInserter that writes the given asynchronous parts, as multipart data.",1,111
1483,"public Parameters withAllowMixedMimeAdaptiveness(boolean allowMixedMimeAdaptiveness) {
      if (allowMixedMimeAdaptiveness == this.allowMixedMimeAdaptiveness) {
        return this;
      }
      return new Parameters(preferredAudioLanguage, preferredTextLanguage,
          allowMixedMimeAdaptiveness, allowNonSeamlessAdaptiveness, maxVideoWidth, maxVideoHeight,
          maxVideoBitrate, exceedVideoConstraintsIfNecessary, exceedRendererCapabilitiesIfNecessary,
          viewportWidth, viewportHeight, viewportOrientationMayChange);
    }",Returns an instance with the provided mixed mime adaptiveness allowance.,1,88
1484,"public List<String> getRoles() {
        return roles;
    }",Returns the roles required to pass through this interceptor.,1,22
1485,"public static HornetQConnectionFactory createConnectionFactory(final String discoveryAddress, final int discoveryPort)
   {
      return new HornetQConnectionFactory(discoveryAddress, discoveryPort);
   }",Creates a HornetQConnectionFactory that will use discovery to connect to the server.,1,42
1486,"public MPPointF getPosition(MPPointF center, float dist, float angle) {

        MPPointF p = MPPointF.getInstance(0,0);
        getPosition(center, dist, angle, p);
        return p;
    }",Returns a recyclable MPPointF instance.,1,66
1487,"public static boolean addJob(String jobName, String jobGroup, String cronExpression) throws SchedulerException {
    	// 1ãjob key
        TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroup);
        JobKey jobKey = new JobKey(jobName, jobGroup);

        // 2ãvalid
        if (scheduler.checkExists(triggerKey)) {
            return true;    // PASS
        }

        // 3ãcorn trigger
        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(cronExpression).withMisfireHandlingInstructionDoNothing();   // withMisfireHandlingInstructionDoNothing å¿½ç¥æè°åº¦ç»æ­¢è¿ç¨ä¸­å¿½ç¥çè°åº¦
        CronTrigger cronTrigger = TriggerBuilder.newTrigger().withIdentity(triggerKey).withSchedule(cronScheduleBuilder).build();

        // 4ãjob detail
		Class<? extends Job> jobClass_ = RemoteHttpJobBean.class;   // Class.forName(jobInfo.getJobClass());
		JobDetail jobDetail = JobBuilder.newJob(jobClass_).withIdentity(jobKey).build();

        /*if (jobInfo.getJobData()!=null) {
        	JobDataMap jobDataMap = jobDetail.getJobDataMap();
        	jobDataMap.putAll(JacksonUtil.readValue(jobInfo.getJobData(), Map.class));	
        	// JobExecutionContext context.getMergedJobDataMap().get(""mailGuid"");
		}*/
        
        // 5ãschedule job
        Date date = scheduler.scheduleJob(jobDetail, cronTrigger);

        logger.info("">>>>>>>>>>> addJob success, jobDetail:{}, cronTrigger:{}, date:{}"", jobDetail, cronTrigger, date);
        return true;
    }",add trigger + job,1,256
1488,"public static String getDateString(final LocalDateTime self) {
        return self.format(DateTimeFormatter.ISO_LOCAL_DATE);
    }",Formats this date/time with the  java.time.format.DateTimeFormatter#ISO_LOCAL_DATE formatter.,1,33
1489,"public static MutationProto toMutation(final MutationType type, final Mutation mutation)
    throws IOException {
    return toMutation(type, mutation, HConstants.NO_NONCE);
  }",Convert a client Increment to a protobuf Mutate.,1,49
1490,"public TypeMetadataDescriptor build()
    {
        if (type == null)
        {
            throw new IllegalArgumentException(""Type parameter cannot be null for ParameterMetadataDescriptor"");
        }

        return new ImmutableTypeMetadataDescriptor(type);
    }",Builds and creates the descriptor of the component.,1,57
1491,"public static InputStream getInputStream(Socket socket, long timeout) 
                                           throws IOException {
    return (socket.getChannel() == null) ? 
          socket.getInputStream() : new SocketInputStream(socket, timeout);
  }",Returns InputStream for the socket.,1,68
1492,"public static LoadedTypeInitializer nonAccessible(String fieldName, Object value) {
            return new ForStaticField<Object>(fieldName, value, true);
        }",Creates a  LoadedTypeInitializer for given field name and value where the field is not accessible by reflection and needs to be prepared accordingly.,1,43
1493,"protected boolean isRoot(String path) {
    return PathUtils.normalizePath(path, PATH_SEPARATOR).equals(
        PathUtils.normalizePath(getRootKey(), PATH_SEPARATOR));
  }",Checks if the path is the root.,1,47
1494,"public static IRI serializeUriEntity(final Entity entity) throws SmartUriException {
        final Map<IRI, Value> objectMap = new LinkedHashMap<>();

        // Adds the entity's types to the Smart URI
        final List<RyaURI> typeIds = entity.getExplicitTypeIds();
        final Map<RyaURI, String> ryaTypeMap = createTypeMap(typeIds);
        final IRI ryaTypeMapUri = createTypeMapUri(typeIds);
        final RyaType valueRyaType = new RyaType(XMLSchema.ANYURI, ryaTypeMapUri.stringValue());
        final Value typeValue = RyaToRdfConversions.convertValue(valueRyaType);
        objectMap.put(RYA_TYPES_URI, typeValue);

        final RyaURI subject = entity.getSubject();
        final Map<RyaURI, ImmutableMap<RyaURI, Property>> typeMap = entity.getProperties();
        for (final Entry<RyaURI, ImmutableMap<RyaURI, Property>> typeEntry : typeMap.entrySet()) {
            final RyaURI type = typeEntry.getKey();
            String typeShortName = ryaTypeMap.get(type);
            typeShortName = typeShortName != null ? typeShortName + ""."" : """";
            final ImmutableMap<RyaURI, Property> typeProperties = typeEntry.getValue();
            for (final Entry<RyaURI, Property> properties : typeProperties.entrySet()) {
                final RyaURI key = properties.getKey();
                final Property property = properties.getValue();
                final String valueString = property.getValue().getData();
                final RyaType ryaType = property.getValue();

                //final RyaType ryaType = new RyaType(VF.createIRI(key.getData()), valueString);

                final Value value = RyaToRdfConversions.convertValue(ryaType);

                String formattedKey = key.getData();
                if (StringUtils.isNotBlank(typeShortName)) {
                    formattedKey = addTypePrefixToUri(formattedKey, typeShortName);
                }
                final IRI uri = VF.createIRI(formattedKey);
                objectMap.put(uri, value);
            }
        }

        return serializeUri(subject, objectMap);
    }",Serializes an  Entity into a Smart  IRI.,1,532
1495,"public static boolean completeWakefulIntent(@NonNull Intent intent) {
        try {
            return WakeLockUtil.completeWakefulIntent(intent);
        } catch (Exception e) {
            // could end in a NPE if the intent no wake lock was found
            return true;
        }
    }",Similar call like  WakefulBroadcastReceiver#completeWakefulIntent(Intent).,1,61
1496,"public static Timer newTimer(Class<?> klass,
                                       String name,
                                       String scope,
                                       TimeUnit durationUnit,
                                       TimeUnit rateUnit) {
        return DEFAULT_REGISTRY.newTimer(klass, name, scope, durationUnit, rateUnit);
    }","Creates a new  com.yammer.metrics.core.Timer and registers it under the given class, name, and scope.",1,68
1497,"static boolean identMatch(final ParameterDescriptorGroup parameters, final String regex, final String identifier) {
        if (identifier != null) {
            for (final Identifier id : parameters.getIdentifiers()) {
                if (Constants.EPSG.equals(id.getCodeSpace())) {
                    return identifier.equals(id.getCode());
                }
            }
        }
        return parameters.getName().getCode().matches(regex);
    }",Returns  true if the projection specified by the given parameters has the given keyword or identifier.,1,130
1498,"public static ScriptObject getGlobal() {
        final SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            // skip getCallerClass and getGlobal and get to the real caller
            Class<?> caller = Reflection.getCallerClass(2);
            ClassLoader callerLoader = caller.getClassLoader();

            // Allow this method only for nashorn's own classes, script
            // generated classes and Java adapter classes. Rest should
            // have the necessary security permission.
            if (callerLoader != myLoader &&
                !(callerLoader instanceof NashornLoader) &&
                !(JavaAdapterFactory.isAdapterClass(caller))) {
                sm.checkPermission(new RuntimePermission(""getNashornGlobal""));
            }
        }

        return getGlobalTrusted();
    }",Get the current global scope,1,162
1499,"public UnsortedGrouping<T> groupBy(String... fields) {
		return new UnsortedGrouping<T>(this, new Keys.ExpressionKeys<T>(fields, getType()));
	}",Groups a  DataSet using field expressions.,1,54
1500,"public ElementPositionRange getOffsetRange() {
        return new ElementPositionRange(document, startElementRange,
                endElementRange);
    }",Returns the position range of the whole element.,1,31
1501,"public int find(BytesRef bytes) {
    return ids[findHash(bytes)];
  }",Returns the id of the given  BytesRef.,1,28
1502,"public int getOffset(Point p, int trailing[], Dimension proximity) {
	if (proximity == null)
		proximity = new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);
	TextFragmentBox closestBox = null;
	int index = 0;
	int dy;
	int dx;
	int i = 0;
	int size = fragments.size();
	if (getBorder() instanceof FlowBorder) {
		i++;
		size--;
	}
	for (; i < size; i++) {
		TextFragmentBox box = (TextFragmentBox)fragments.get(i);
		dy = vDistanceBetween(box, p.y);
		if (dy > proximity.height)
			continue;
		if (dy == proximity.height) {
			dx = hDistanceBetween(box, p.x);
			if (dx >= proximity.width)
				continue;
		} else
			dx = hDistanceBetween(box, p.x);
		proximity.height = dy;
		proximity.width = dx;
		closestBox = box;
	}
	return findOffset(p, trailing, closestBox, index);
}",Returns the offset of the character directly below or nearest the given location.,1,336
1503,"public static BlockInStream create(FileSystemContext context, BlockInfo info,
      WorkerNetAddress dataSource, BlockInStreamSource dataSourceType, InStreamOptions options)
      throws IOException {
    URIStatus status = options.getStatus();
    OpenFileOptions readOptions = options.getOptions();

    boolean promote = readOptions.getReadType().isPromote();

    long blockId = info.getBlockId();
    long blockSize = info.getLength();

    // Construct the partial read request
    Protocol.ReadRequest.Builder builder =
        Protocol.ReadRequest.newBuilder().setBlockId(blockId).setPromote(promote);
    // Add UFS fallback options
    builder.setOpenUfsBlockOptions(options.getOpenUfsBlockOptions(blockId));

    boolean shortCircuit = Configuration.getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED);
    boolean sourceSupportsDomainSocket = !NettyUtils.isDomainSocketSupported(dataSource);
    boolean sourceIsLocal = dataSourceType == BlockInStreamSource.LOCAL;

    // Short circuit
    if (sourceIsLocal && shortCircuit && !sourceSupportsDomainSocket) {
      LOG.debug(""Creating short circuit input stream for block {} @ {}"", blockId, dataSource);
      try {
        return createLocalBlockInStream(context, dataSource, blockId, blockSize, options);
      } catch (NotFoundException e) {
        // Failed to do short circuit read because the block is not available in Alluxio.
        // We will try to read via netty. So this exception is ignored.
        LOG.warn(""Failed to create short circuit input stream for block {} @ {}. Falling back to ""
            + ""network transfer"", blockId, dataSource);
      }
    }

    // Netty
    LOG.debug(""Creating netty input stream for block {} @ {} from client {} reading through {}"",
        blockId, dataSource, NetworkAddressUtils.getClientHostName(), dataSource);
    return createNettyBlockInStream(context, dataSource, dataSourceType, builder.buildPartial(),
        blockSize, options);
  }",Creates a  BlockInStream.,1,400
1504,"public static Collection flatten(Collection self) {
        return flatten(self, createSimilarCollection(self));
    }",Flatten a collection.,1,33
1505,"public CharSequence toFriendly(final Contacts contacts)
    {
        if (contacts != null)
        {
            final String name = contacts.getNameForAddress(mAddress);

            // TODO: The results should probably be cached for performance reasons.

            if (name != null)
            {
                if (K9.changeRegisteredNameColor())
                {
                    final SpannableString coloredName = new SpannableString(name);
                    coloredName.setSpan(new ForegroundColorSpan(K9.getRegisteredNameColor()),
                                  0,
                                  coloredName.length(),
                                  Spannable.SPAN_EXCLUSIVE_EXCLUSIVE
                                  );
                    return coloredName;
                }
                else
                {
                    return name;
                }
            }
        }

        return ((mPersonal != null) && (mPersonal.length() > 0)) ? mPersonal : mAddress;
    }",Returns the name of the contact this email address belongs to if the  Contacts contacts parameter is not  null and a contact is found.,1,209
1506,"public Set<Status> getStatus() {
        return statusCodes;
    }",Returns a set of status which holds the status code that assist in presenting notification messages.,1,22
1507,"public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int feedbackType) {
        List<AccessibilityServiceInfo> services = null;
        try {
            services = mService.getEnabledAccessibilityServiceList(feedbackType);
            if (DEBUG) {
                Log.i(LOG_TAG, ""Installed AccessibilityServices "" + services);
            }
        } catch (RemoteException re) {
            Log.e(LOG_TAG, ""Error while obtaining the installed AccessibilityServices. "", re);
        }
        return Collections.unmodifiableList(services);
    }",Returns the  AccessibilityServiceInfos of the enabled accessibility services for a given feedback type.,1,124
1508,"public InspectorMenu inspectMethodCompilationsMenu(TeleClassMethodActor teleClassMethodActor, String actionTitle) {
        return new InspectMethodCompilationsMenu(teleClassMethodActor, actionTitle);
    }","Creates a menu containing actions to inspect all compilations of a method, dynamically updated as compilations are added.",1,35
1509,"@Deprecated
	public String getUrl() {
		return determineUrl();
	}",Determine the url to use based on this configuration and the environment.,1,24
1510,"@SuppressWarnings(""unchecked"")
    default Option<T> max() {
        if (isEmpty() || !(head() instanceof Comparable)) {
            return None.instance();
        } else {
            return maxBy((o1, o2) -> ((Comparable<T>) o1).compareTo(o2));
        }
    }",Calculates the maximum of this elements according to their natural order.,1,102
1511,"public PlaybackInfo copyWithTimeline(Timeline timeline) {
    return new PlaybackInfo(
        timeline,
        periodId,
        startPositionUs,
        contentPositionUs,
        playbackState,
        isLoading,
        trackGroups,
        trackSelectorResult,
        loadingMediaPeriodId,
        bufferedPositionUs,
        totalBufferedDurationUs,
        positionUs);
  }",Copies playback info with the new timeline.,1,73
1512,"private final int scan(WorkQueue w, int r) {
        WorkQueue[] ws; int m;
        long c = ctl;                            // for consistency check
        if ((ws = workQueues) != null && (m = ws.length - 1) >= 0 && w != null) {
            for (int j = m + m + 1, ec = w.eventCount;;) {
                WorkQueue q; int b, e; ForkJoinTask<?>[] a; ForkJoinTask<?> t;
                if ((q = ws[(r - j) & m]) != null &&
                    (b = q.base) - q.top < 0 && (a = q.array) != null) {
                    long i = (((a.length - 1) & b) << ASHIFT) + ABASE;
                    if ((t = ((ForkJoinTask<?>)
                              U.getObjectVolatile(a, i))) != null) {
                        if (ec < 0)
                            helpRelease(c, ws, w, q, b);
                        else if (q.base == b &&
                                 U.compareAndSwapObject(a, i, t, null)) {
                            U.putOrderedInt(q, QBASE, b + 1);
                            if ((b + 1) - q.top < 0)
                                signalWork(ws, q);
                            w.runTask(t);
                        }
                    }
                    break;
                }
                else if (--j < 0) {
                    if ((ec | (e = (int)c)) < 0) // inactive or terminating
                        return awaitWork(w, c, ec);
                    else if (ctl == c) {         // try to inactivate and enqueue
                        long nc = (long)ec | ((c - AC_UNIT) & (AC_MASK|TC_MASK));
                        w.nextWait = e;
                        w.eventCount = ec | INT_SIGN;
                        if (!U.compareAndSwapLong(this, CTL, c, nc))
                            w.eventCount = ec;   // back out
                    }
                    break;
                }
            }
        }
        return 0;
    }","Scans for and, if found, runs one task, else possibly inactivates the worker.",1,647
1513,"public boolean equals(Object otherObj) { //delta
    // overridden for performance only.
    if (!(otherObj instanceof ObjectArrayList)) {
      return super.equals(otherObj);
    }
    if (this == otherObj) {
      return true;
    }
    if (otherObj == null) {
      return false;
    }
    ObjectArrayList other = (ObjectArrayList) otherObj;
    if (size() != other.size()) {
      return false;
    }

    Object[] theElements = elements();
    Object[] otherElements = other.elements();
    for (int i = size(); --i >= 0;) {
      if (theElements[i] != otherElements[i]) {
        return false;
      }
    }
    return true;
  }",Compares the specified Object with the receiver.,1,237
1514,"public static CharArraySet getWordSet(Reader reader, String comment, CharArraySet result) throws IOException {
    BufferedReader br = null;
    try {
      br = getBufferedReader(reader);
      String word = null;
      while ((word = br.readLine()) != null) {
        if (word.startsWith(comment) == false){
          result.add(word.trim());
        }
      }
    }
    finally {
      IOUtils.close(br);
    }
    return result;
  }",Reads lines from a Reader and adds every non-comment line as an entry to a CharArraySet (omitting leading and trailing whitespace).,1,155
1515,"public Object getValueObject() {
        return getSelectedValues();
    }",This method delegates to  #getSelectedValues() to return the selected values as a java.util.List of Strings.,1,21
1516,"private AbstractComponentManager.RefPair getBoundService( ServiceReference serviceReference )
    {
        return ( AbstractComponentManager.RefPair ) (( Map ) m_componentManager.getDependencyMap().get( this )).get(serviceReference);
    }",Returns the RefPair containing the given service reference and the bound service or null if this is instance is not currently bound to that service.,1,59
1517,"public Iterable<String> getIdentifiers(String queryBNFId) {
		return getQueryBNF(queryBNFId).getIdentifiers();
	}",Retrieves the JPQL identifiers that are supported by the BNF rule with the given unique identifier.,1,32
1518,"public MPPointD getValuesByTouchPoint(float x, float y) {

        MPPointD result = MPPointD.getInstance(0,0);
        getValuesByTouchPoint(x,y,result);
        return result;
    }",Returns a recyclable MPPointD instance.,1,56
1519,"public final Instance instance(int index) {

    return (Instance)m_Instances.elementAt(index);
  }",Returns the instance at the given position.,1,33
1520,"private static List checkVersion( InputStream streamData )
			throws DesignFileException
	{
		List rtnList = new ArrayList( );
		VersionParserHandler handler = new VersionParserHandler( );

		InputStream inputStreamToParse = streamData;
		if ( !inputStreamToParse.markSupported( ) )
			inputStreamToParse = new BufferedInputStream( streamData );

		parse( handler, inputStreamToParse );

		if ( StringUtil.compareVersion( handler.version,
				VersionInfo.COLUMN_BINDING_FROM_VERSION ) < 1
				&& StringUtil.compareVersion(
						DesignSchemaConstants.REPORT_VERSION,
						VersionInfo.COLUMN_BINDING_FROM_VERSION ) > 0 )
			rtnList.add( new VersionInfo( handler.version,
					VersionInfo.CONVERT_FOR_COLUMN_BINDING ) );

		return rtnList;
	}",Checks whether the input stream holds a version number before some specific features is supported.,1,198
1521,"public int removeByField(IndexDefinition<T> indexDefinition, Object value) {
    Set<T> toRemove = getByField(indexDefinition, value);

    int removed = 0;
    for (T o : toRemove) {
      if (remove(o)) {
        removed++;
      }
    }
    return removed;
  }",Removes the subset of objects with the specified index field value.,1,99
1522,"public static String URLDecode(String str, Charset charset) {
        if (str == null) {
            return null;
        }

        byte[] bytes = str.getBytes(StandardCharsets.US_ASCII);

        if (charset == null) {
            charset = StandardCharsets.UTF_8;
        }

        int len = bytes.length;
        int ix = 0;
        int ox = 0;
        while (ix < len) {
            byte b = bytes[ix++];     // Get byte to test
            if (b == '%') {
                if (ix + 2 > len) {
                    throw new IllegalArgumentException(
                            sm.getString(""uDecoder.urlDecode.missingDigit""));
                }
                b = (byte) ((convertHexDigit(bytes[ix++]) << 4)
                            + convertHexDigit(bytes[ix++]));
            }
            bytes[ox++] = b;
        }

        return new String(bytes, 0, ox, charset);
    }",Decode and return the specified URL-encoded String.,1,293
1523,"public JniMarker requestEventMarker() {
        return markersMap.get(eventMarkerId);
    }",Method to obtain a marker associated with this particular event.,1,24
1524,"public static double get(OperationMetricKey key, ASTAnyTypeDeclaration node, MetricVersion version, ResultOption option) {

        MetricVersion safeVersion = (version == null) ? Version.STANDARD : version;
        return option == null ? Double.NaN
                              : TOP_LEVEL_PACKAGE.computeWithResultOption(key, node, false, safeVersion, option);
    }","Compute the sum, average, or highest value of the operation metric on all operations of the class node.",1,100
1525,"private List<Object> evaluate(final List<String> inlineExpressions) {
        List<Object> result = new ArrayList<>(inlineExpressions.size());
        for (String each : inlineExpressions) {
            StringBuilder expression = new StringBuilder(handlePlaceHolder(each));
            if (!each.startsWith(""\"""")) {
                expression.insert(0, ""\"""");
            }
            if (!each.endsWith(""\"""")) {
                expression.append(""\"""");
            }
            result.add(evaluate(expression.toString()));
        }
        return result;
    }",Evaluate closure.,1,171
1526,"@Override
  public Collection<Symptom> detect(Collection<Measurement> measurements) {
    Collection<Symptom> result = new ArrayList<>();

    MeasurementsTable metrics = MeasurementsTable.of(measurements).type(metricName);
    Instant now = context.checkpoint();
    for (String component : metrics.uniqueComponents()) {
      Set<String> addresses = new HashSet<>();
      Set<String> positiveAddresses = new HashSet<>();
      Set<String> negativeAddresses = new HashSet<>();

      double componentMax = getMaxOfAverage(metrics.component(component));
      double componentMin = getMinOfAverage(metrics.component(component));
      if (componentMax > skewRatio * componentMin) {
        //there is skew
        addresses.add(component);
        result.add(new Symptom(symptomType.text(), now, addresses));

        for (String instance : metrics.component(component).uniqueInstances()) {
          if (metrics.instance(instance).mean() >= 0.90 * componentMax) {
            positiveAddresses.add(instance);
          }
          if (metrics.instance(instance).mean() <= 1.10 * componentMin) {
            negativeAddresses.add(instance);
          }
        }

        if (!positiveAddresses.isEmpty()) {
          result.add(new Symptom(""POSITIVE "" + symptomType.text(), now, positiveAddresses));
        }
        if (!negativeAddresses.isEmpty()) {
          result.add(new Symptom(""NEGATIVE "" + symptomType.text(), now, negativeAddresses));
        }
      }

    }
    return result;
  }",Detects components experiencing skew on a specific metric,1,459
1527,"public boolean contains(ReplayPosition context)
    {
        return context.segment == id;
    }",Check to see if a certain ReplayPosition is contained by this segment file.,1,30
1528,"public boolean hasOverflowed(int maxPoolSize) {
        for (IndexSection section: overflowableSections) {
            if (section.getItemCount() > maxPoolSize) return true;
        }
        return false;
    }",Checks whether any of the size-sensitive constant pools have more than the supplied maximum number of entries.,1,59
1529,"private String listToString(int curNode) throws SAXException {
      if (curNode == CASImpl.NULL) {
        return null;  // different from """"
      }
      final StringBuilder sb = new StringBuilder();
      cds.listUtils.anyListToOutput(curNode, cds.sharedData, cds, new ListUtils.ListOutput() {
       @Override
        void append(String item) {
          if (sb.length() > 0) {
            sb.append(' ');
          }
          sb.append(item);
        }
      });    
      return sb.toString();
    }","Converts a CAS List of Int, Float, or FsRefs to its string representation for use in multi-valued XMI properties.",1,163
1530,"public Presence fromMessage(Message<?> message) throws Exception {
		Object payload = message.getPayload();
		if (payload instanceof Presence) {
			return (Presence) payload;
		}
		else if (payload instanceof Presence.Type) {
			Presence.Type presenceType = (Presence.Type) payload;
			MessageHeaders messageHeaders = message.getHeaders();

			Integer priority = (Integer) messageHeaders.get(XmppHeaders.PRESENCE_PRIORITY);
			String status = (String) messageHeaders.get(XmppHeaders.PRESENCE_STATUS);
			String language = (String) messageHeaders.get(XmppHeaders.PRESENCE_LANGUAGE);
			String from = (String) messageHeaders.get(XmppHeaders.PRESENCE_FROM);

			Object modeObj = messageHeaders.get(XmppHeaders.PRESENCE_MODE);
			Presence.Mode mode = null;

			if (modeObj != null){
				if (modeObj instanceof String) {
					mode = Presence.Mode.valueOf((String) modeObj);
				} 
				else if (modeObj instanceof Presence.Mode) {
					mode = (Presence.Mode) modeObj;
				}
				else {
					throw new MessageMappingException(""Unsupported type for Presence mode. Only"" +
							"" String or Presence.Mode is allowed, but was: "" + modeObj.getClass().getName());
				}
			}
			return this.factoryPresence(from, status, priority, presenceType, mode, language);
		}
		else {
			throw new MessageMappingException(""Unsupported Payload type: "" + payload.getClass().getName());
		}
	}","Builds a  Presence object from the inbound Message headers, if possible.",1,416
1531,"public static  IComplexNDArray fft(INDArray input) {
        return Nd4j.getFFt().fft(input);
    }","1d discrete fourier transform, note that this will throw an exception if the passed in input isn't a vector.",1,33
1532,"public VaadinServiceSession findVaadinSession(VaadinRequest request)
            throws ServiceException, SessionExpiredException {
        VaadinServiceSession vaadinSession = findOrCreateVaadinSession(request);
        if (vaadinSession == null) {
            return null;
        }

        VaadinServiceSession.setCurrent(vaadinSession);
        request.setAttribute(VaadinServiceSession.class.getName(),
                vaadinSession);

        return vaadinSession;
    }",Attempts to find a Vaadin service session associated with this request.,1,96
1533,"public RawLogBuffers newConnection(
        final String channel,
        final int sessionId,
        final int streamId,
        final long correlationId,
        final int termBufferSize)
    {
        if (maxConnectionTermBufferSize < termBufferSize)
        {
            throw new IllegalArgumentException(
                ""term buffer size larger than max: "" + termBufferSize + "" > "" + maxConnectionTermBufferSize);
        }

        return newInstance(subscriptionsDir, channel, sessionId, streamId, correlationId, termBufferSize);
    }",Create new  RawLogBuffers in the subscriptions directory for the supplied triplet.,1,124
1534,"public String[] getRegionServerCoprocessors() {
    List<Coprocessor> list = getServerLoadPB().getCoprocessorsList();
    String [] ret = new String[list.size()];
    int i = 0;
    for (Coprocessor elem : list) {
      ret[i++] = elem.getName();
    }

    return ret;
  }",Return the RegionServer-level coprocessors,1,108
1535,"public static boolean continueProcessing(Exchange exchange, String message, Log log) {
        // check for error if so we should break out
        boolean exceptionHandled = hasExceptionBeenHandledByErrorHandler(exchange);
        if (exchange.isFailed() || exchange.isRollbackOnly() || exceptionHandled) {
            // The Exchange.ERRORHANDLED_HANDLED property is only set if satisfactory handling was done
            // by the error handler. It's still an exception, the exchange still failed.
            if (log.isDebugEnabled()) {
                StringBuilder sb = new StringBuilder();
                sb.append(""Message exchange has failed "" + message + "" for exchange: "").append(exchange);
                if (exchange.isRollbackOnly()) {
                    sb.append("" Marked as rollback only."");
                }
                if (exchange.getException() != null) {
                    sb.append("" Exception: "").append(exchange.getException());
                }
                if (exchange.hasOut() && exchange.getOut().isFault()) {
                    sb.append("" Fault: "").append(exchange.getOut());
                }
                if (exceptionHandled) {
                    sb.append("" Handled by the error handler."");
                }
                log.debug(sb.toString());
            }

            return false;
        }


        // check for stop
        Object stop = exchange.getProperty(Exchange.ROUTE_STOP);
        if (stop != null) {
            boolean doStop = exchange.getContext().getTypeConverter().convertTo(Boolean.class, exchange, stop);
            if (doStop) {
                if (log.isDebugEnabled()) {
                    log.debug(""ExchangeId: "" + exchange.getExchangeId() + "" is marked to stop routing: "" + exchange);
                }
                return false;
            }
        }

        return true;
    }",Should we continue processing the exchange?,1,436
1536,"@Deprecated
    protected Map<Class<?>, LocaleConverter> lookup(final Locale locale) {
        Map<Class<?>, LocaleConverter> localeConverters;

        if (locale == null) {
            localeConverters = (Map<Class<?>, LocaleConverter>) mapConverters.get(defaultLocale);
        }
        else {
            localeConverters = (Map<Class<?>, LocaleConverter>) mapConverters.get(locale);

            if (localeConverters == null) {
                localeConverters = create(locale);
                mapConverters.put(locale, localeConverters);
            }
        }

        return localeConverters;
    }","Look up and return any registered map instance for the specified locale; if there is no registered one, return null.",1,171
1537,"public List<TargetRequestBody> buildAsList(final int count) {
        final ArrayList<TargetRequestBody> bodyList = Lists.newArrayList();
        for (int index = 0; index < count; index++) {
            bodyList.add(doBuild(controllerId + index));
        }
        return bodyList;
    }",Builds a list of multiple  TargetRequestBody to create multiple targets at once.,1,92
1538,"protected Filter[] obtainAllDefinedFilters() {
        Set allFilters = new HashSet();

        Iterator it = filterChainMap.values().iterator();

        while (it.hasNext()) {
            allFilters.addAll((List) it.next());
        }

        return (Filter[]) new ArrayList(allFilters).toArray(new Filter[0]);
    }",Obtains all of the uniqueFilter instances registered in the map of filter chains.,1,110
1539,"public Evaluation evaluate(MultiDataSetIterator iterator) {
        return evaluate(iterator, null);
    }",Evaluate the network (classification performance - single output ComputationGraphs only),1,28
1540,"public static Completable create(CompletableSource source) {
        Objects.requireNonNull(source, ""source is null"");
        if (source instanceof Completable) {
            throw new IllegalArgumentException(""Use of create(Completable)!"");
        }
        try {
            // TODO plugin wrapping source
            
            return RxJavaPlugins.onAssembly(new CompletableFromSource(source));
        } catch (NullPointerException ex) { // NOPMD
            throw ex;
        } catch (Throwable ex) {
            RxJavaPlugins.onError(ex);
            throw toNpe(ex);
        } 
    }",Constructs a Completable instance by wrapping the given source callback.,1,143
1541,"public static double log1p(final double x) {
        if (x == -1) {
            return Double.NEGATIVE_INFINITY;
        }

        if (x == Double.POSITIVE_INFINITY) {
            return Double.POSITIVE_INFINITY;
        }

        if (x > 1e-6 ||
            x < -1e-6) {
            final double xpa = 1 + x;
            final double xpb = -(xpa - 1 - x);

            final double[] hiPrec = new double[2];
            final double lores = log(xpa, hiPrec);
            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN
                return lores;
            }

            // Do a taylor series expansion around xpa:
            //   f(x+y) = f(x) + f'(x) y + f''(x)/2 y^2
            final double fx1 = xpb / xpa;
            final double epsilon = 0.5 * fx1 + 1;
            return epsilon * fx1 + hiPrec[1] + hiPrec[0];
        } else {
            // Value is small |x| < 1e6, do a Taylor series centered on 1.
            final double y = (x * F_1_3 - F_1_2) * x + 1;
            return y * x;
        }
    }",Computes log(1 + x).,1,321
1542,"public static Histogram newHistogram(MetricName metricName) {
        return newHistogram(metricName, false);
    }",Creates a new non-biased  com.yammer.metrics.core.Histogram and registers it under the given metric name.,1,30
1543,"public static boolean readEOFReturnsNegative() {
    // TODO Should be dynamically determined - may need additional method on UnderFileSystem
    return null != sUfsClz && sUfsClz.equals(""tachyon.underfs.hdfs.LocalMiniDFSCluster"");
  }",This method is only used by the  tachyon.client.FileOutStreamIntegrationTest unit-test,1,41
1544,"public List<ExtensionElement> getExtensions(String elementName, String namespace) {
        requireNotNullOrEmpty(elementName, ""elementName must not be null or empty"");
        requireNotNullOrEmpty(namespace, ""namespace must not be null or empty"");
        String key = XmppStringUtils.generateKey(elementName, namespace);
        return packetExtensions.getAll(key);
    }",Return a list of all extensions with the given element name and namespace.,1,77
1545,"static Node newName(AbstractCompiler compiler, String name, Node basisNode, String originalName) {
    Node nameNode = newName(compiler, name, basisNode);
    nameNode.setOriginalName(originalName);
    return nameNode;
  }","Creates a new node representing an existing name, copying over the source location information from the basis node and assigning the given original name to the node.",1,65
1546,"public List<FormField> getFields() {
        return dataForm.getFields();
    }",Returns a List of the fields that are part of the form.,1,26
1547,"public static String getFullyQualifiedMethodName(Class<?> clazz, String methodName, Class<?>... params) {
		Preconditions.notNull(clazz, ""clazz must not be null"");
		Preconditions.notNull(methodName, ""methodName must not be null"");
		Preconditions.notNull(params, ""params must not be null"");

		return String.format(""%s#%s(%s)"", clazz.getName(), methodName, StringUtils.nullSafeToString(params));
	}",Build the fully qualified name of the passed parameters.,1,111
1548,"public QueryOperation createSort(List<Expression> orders, QueryOperation child) {
		failIfStreaming();

		List<Expression> convertedOrders = orders.stream()
			.map(f -> f.accept(orderWrapper))
			.collect(Collectors.toList());
		return new SortQueryOperation(convertedOrders, child);
	}",Creates a valid  SortQueryOperation operation.,1,90
1549,"public static OType getType(final String iValue) {
		if (iValue.length() == 0)
			return null;

		final char firstChar = iValue.charAt(0);

		if (firstChar == ORID.PREFIX)
			// RID
			return OType.LINK;
		else if (firstChar == '\'' || firstChar == '""')
			return OType.STRING;
		else if (firstChar == OStringSerializerHelper.PARENTHESIS_BEGIN)
			return OType.EMBEDDED;
		else if (firstChar == OStringSerializerHelper.LINK)
			return OType.LINK;
		else if (firstChar == OStringSerializerHelper.COLLECTION_BEGIN)
			return OType.EMBEDDEDLIST;
		else if (firstChar == OStringSerializerHelper.MAP_BEGIN)
			return OType.EMBEDDEDMAP;

		// NUMBER OR STRING?
		boolean integer = true;
		for (int index = 0; index < iValue.length(); ++index) {
			final char c = iValue.charAt(index);
			if (c < '0' || c > '9')
				if ((index == 0 && (c == '+' || c == '-')))
					continue;
				else if (c == DECIMAL_SEPARATOR)
					integer = false;
				else {
					if (index > 0)
						if (c == 'f')
							return OType.FLOAT;
						else if (c == 'l')
							return OType.LONG;
						else if (c == 'd')
							return OType.DOUBLE;
						else if (c == 'b')
							return OType.BYTE;
						else if (c == 'a')
							return OType.DATE;
						else if (c == 't')
							return OType.DATETIME;
						else if (c == 's')
							return OType.SHORT;

					return OType.STRING;
				}
		}

		if (integer) {
			// AUTO CONVERT TO LONG IF THE INTEGER IS TOO BIG
			final int numberLength = iValue.length();
			if (numberLength > MAX_INTEGER_DIGITS || (numberLength == MAX_INTEGER_DIGITS && iValue.compareTo(MAX_INTEGER_AS_STRING) > 0))
				return OType.LONG;
		}

		return integer ? OType.INTEGER : OType.FLOAT;
	}",Parses a string returning the closer type.,1,637
1550,"public static <M> SinkOperatorSpec<M> createSinkOperatorSpec(SinkFunction<M> sinkFn, int opId) {
    return new SinkOperatorSpec<>(sinkFn, OperatorSpec.OpCode.SINK, opId);
  }",Creates a  SinkOperatorSpec for the sink operator.,1,56
1551,"public KSMetaData getKSMetaData(String keyspaceName)
    {
        assert keyspaceName != null;
        return keyspaces.get(keyspaceName);
    }",Get metadata about keyspace by its name,1,39
1552,"public final RegisterOperand asRegister() {
    return (RegisterOperand) this;
  }",Cast to an  RegisterOperand.,1,25
1553,"public List<IAnchor> getAnchors() {
		int wayPointCount = getWayAnchorsSize();
		List<IAnchor> anchors = new ArrayList<>(wayPointCount + 2);

		// start anchor
		IAnchor startAnchor = getStartAnchor();
		if (startAnchor == null) {
			throw new IllegalStateException(""Start anchor may never be null."");
		}
		anchors.add(startAnchor);

		// way anchors
		anchors.addAll(getWayAnchors());

		// end anchor
		IAnchor endAnchor = getEndAnchor();
		if (endAnchor == null) {
			throw new IllegalStateException(""End anchor may never be null."");
		}
		anchors.add(endAnchor);

		return anchors;
	}","Returns a  List containing the  IAnchors which are assigned to this  Connection in the order: start anchor, way point anchors, end anchor.",1,184
1554,"private static List<FoundFailureCause> findIndications(final Collection<FailureCause> causes,
                                                         Run build,
                                                         PrintStream buildLog) {
        List<FoundFailureCause> foundFailureCauses = new ArrayList<>();

        List<FailureCause> singleLineCauses = new ArrayList<>();
        List<FailureCause> notOnlySingleLineCauses = new ArrayList<>();

        for (FailureCause cause : causes) {
            boolean atLeast = false;
            for (Indication indication : cause.getIndications()) {
                if (indication instanceof MultilineBuildLogIndication) {
                    atLeast = true;
                }
            }

            if (atLeast) {
                notOnlySingleLineCauses.add(cause);
            } else {
                singleLineCauses.add(cause);
            }
        }

        try {
            try (BufferedReader reader = new BufferedReader(build.getLogReader())) {
                foundFailureCauses.addAll(
                        FailureReader.scanSingleLinePatterns(
                                singleLineCauses,
                                build,
                                reader,
                                build.getLogFile().getName()));
            }

            for (FailureCause cause : notOnlySingleLineCauses) {
                List<FoundIndication> foundIndications = new ArrayList<>();
                for (Indication indication : cause.getIndications()) {
                    long start = System.currentTimeMillis();

                    Thread.currentThread().setName(""BFA-scanner-""
                            + build.getFullDisplayName() + "": ""
                            + cause.getName() + ""-""
                            + indication.getUserProvidedExpression());

                    foundIndications.add(findIndication(indication, build, buildLog));

                    if (logger.isLoggable(Level.FINER)) {
                        logger.log(Level.FINER, ""[BFA] [{0}] [{1}] {2}ms"", new Object[]{build.getFullDisplayName(),
                                cause.getName(),
                                String.valueOf(System.currentTimeMillis() - start), });
                    }
                }

                foundFailureCauses.add(new FoundFailureCause(cause, foundIndications));
            }

            return foundFailureCauses;
        } catch (IOException e) {
            buildLog.print(""[BFA] Exception during parsing file: "" + e);
        }

        return new ArrayList<>();
    }",Finds indications for all causes.,1,574
1555,"public static String parseContent(XmlPullParser parser)
                    throws XmlPullParserException, IOException {
        assert(parser.getEventType() == XmlPullParser.START_TAG);
        if (parser.isEmptyElementTag()) {
            return """";
        }
        // Advance the parser, since we want to parse the content of the current element
        parser.next();
        return parseContentDepth(parser, parser.getDepth(), false);
    }",Returns the content of a element as string.,1,97
1556,"public static List tail(List self) {
        if (self.isEmpty()) {
            throw new NoSuchElementException(""Cannot access tail() for an empty List"");
        }
        List result = new ArrayList(self);
        result.remove(0);
        return result;
    }",Returns the items from the List excluding the first item.,1,77
1557,"public Mongo connect(final MongoClientURI uri) throws UnknownHostException {

            final String key = toKey(uri);

            Mongo client = _mongos.get(key);

            if (client == null) {
                final Mongo newbie = new MongoClient(uri);
                client = _mongos.putIfAbsent(key, newbie);
                if (client == null) {
                    client = newbie;
                } else {
                    newbie.close();
                }
            }

            return client;
        }","Attempts to find an existing MongoClient instance matching that URI in the holder, and returns it if exists.",1,152
1558,"public int makeExplicit(int connectionIndex) {
		return makeExplicit(connectionIndex, connectionIndex).get(0);
	}",Makes the connection anchor at the given connection index explicit and returns its explicit index.,1,33
1559,"public Bundle validate() {
        final Bundle bundle = new Bundle(3);
        if (!mStatusOnly) {
            writeResultCode(bundle, RESULT_OTHER_FAILURE);
            return bundle;
        }
        LogUtils.d(LOG_TAG, ""Performing validation"");

        if (!registerClientCert()) {
            bundle.putInt(EmailServiceProxy.VALIDATE_BUNDLE_RESULT_CODE,
                    MessagingException.CLIENT_CERTIFICATE_ERROR);
            return bundle;
        }

        if (shouldGetProtocolVersion()) {
            final EasOptions options = new EasOptions(this);
            final int result = options.getProtocolVersionFromServer(null);
            if (result != EasOptions.RESULT_OK) {
                writeResultCode(bundle, result);
                return bundle;
            }
            final String protocolVersion = options.getProtocolVersionString();
            setProtocolVersion(protocolVersion);
            bundle.putString(EmailServiceProxy.VALIDATE_BUNDLE_PROTOCOL_VERSION, protocolVersion);
        }

        writeResultCode(bundle, performOperation(null));
        return bundle;
    }",Perform account validation.,1,253
1560,"public FluentIterable<E> zip(final Iterable<? extends E> other) {
        return of(IterableUtils.zippingIterable(iterable, other));
    }",Returns a new FluentIterable whose iterator will traverse the elements of this iterable and the other iterable in alternating order.,1,45
1561,"public boolean isDeleted(IColumn column)
    {
        return isDeleted(column.name(), column.mostRecentLiveChangeAt());
    }",Return whether a given column is deleted by the container having this deletion info.,1,37
1562,"protected final boolean validateCredentialsWithTopicStructure(final ResourceIdentifier resource, final Device authenticatedDevice) {
        return validateCredentialsWithTopicStructure(resource.getTenantId(), resource.getResourceId(),
                authenticatedDevice.getTenantId(), authenticatedDevice.getDeviceId());
    }",Checks if the tenant and device from a given resource identifier match an authenticated device's identity.,1,62
1563,"@SuppressWarnings(""unchecked"")
  public List<Event> collectEventsWithoutExceptions() {
    return (List<Event>) CollectionUtils.selectRejected(this.events, failedEventsPredicate);
  }",The exact opposite to  #collectEventsWithExceptions() Returns all the  Events which messages have a null  ExceptionPayload or a null  ExceptionPayload#getException().,1,47
1564,"public static ScalingPolicy getPolicy(ScalingType scaling) {
        if (scaling != null) {
            if (scaling.getScaleAxesByFactor() != null) {
                return ScaleAxesByFactor;
            }
            if (scaling.getScaleByFactor() != null) {
                return ScaleByFactor;
            }
            if (scaling.getScaleToExtent() != null) {
                return ScaleToExtent;
            }
            if (scaling.getScaleToSize() != null) {
                return ScaleToSize;
            }

        }
        return DoNothing;
    }",Retrieve the  ScalingPolicy from the provided  ScalingType,1,150
1565,"public int getScale(int param) throws SQLException {
        try {
            debugCodeCall(""getScale"", param);
            ParameterInterface p = getParameter(param);
            return p.getScale();
        } catch (Throwable e) {
            throw logAndConvert(e);
        }
    }",Returns the parameter scale.,1,85
1566,"private SwitchCompat getCanShareSwitch() {
        return (SwitchCompat) getView().findViewById(R.id.canShareSwitch);
    }",Shortcut to access  SwitchCompat R.id.canShareSwitch,1,34
1567,"public Collection<Occupant> getModerators() throws NoResponseException, XMPPErrorException, NotConnectedException {
        return getOccupants(""moderator"");
    }",Returns a collection of Occupant with the room moderators.,1,37
1568,"protected String outputExtension()
    {
        return ""txt"";
    }","The output files generated by this class are text files, independend of the kind of module being tested.",1,22
1569,"@Override
	public String[] getConfiguredContentTypes(ISourceViewer sourceViewer) {
		return new String[] { IDocument.DEFAULT_CONTENT_TYPE,
				  GNUPartitionScanner.CHANGELOG_EMAIL,
				  GNUPartitionScanner.CHANGELOG_SRC_ENTRY};
	}",Get configured content types.,1,50
1570,"public IWorkbenchPart getCurrentEditor() {
        return currentWorkbenchPart;
    }",Returns the currently active workbench part that is tracked by the layout view.,1,19
1571,"public ClientOptions build() {
      return new ClientOptions(this);
    }",Builds a new instance of ClientOptions,1,24
1572,"protected <T> T findObject(Class<T> persistentClass, String property,
            Object value) {

        List list = performQuery(persistentClass, property, value);

        if (list.size() == 1) {
            return (T) list.get(0);

        } else if (list.size() > 1) {
            String msg = ""SelectQuery for "" + persistentClass.getName()
                    + "" where "" + property + "" equals "" + value + "" returned ""
                    + list.size() + "" rows"";
            throw new RuntimeException(msg);

        } else {
            return null;
        }
    }","Find the persistent object for the specified class, property name and property value, or null if no persistent object was found.",1,200
1573,"public Integer termLength()
    {
        return termLength;
    }",Get the length of buffer used for each term of the log.,1,20
1574,"public static ProtoMessage parseFrom(Type type, byte[] serialized) {
    MessageLite message;
    try {
      switch (type) {
        case READ_REQUEST:
          message = Protocol.ReadRequest.parseFrom(serialized);
          break;
        case WRITE_REQUEST:
          message = Protocol.WriteRequest.parseFrom(serialized);
          break;
        case RESPONSE:
          message = Protocol.Response.parseFrom(serialized);
          break;
        default:
          throw new IllegalArgumentException(""Unknown class type "" + type.toString());
      }
      return new ProtoMessage(message, type);
    } catch (InvalidProtocolBufferException e) {
      throw new IllegalArgumentException(e);
    }
  }",Parses a serialized bytes array into an instance denoted by type.,1,189
1575,"@Override
    public int hashCode() {
        int hash = (int) getChildNodeCount();
        for (PropertyState p : getProperties()) {
            hash ^= p.hashCode();
        }
        return hash;
    }",Returns the hash code.,1,71
1576,"public TreeSet<CTFCallsite> getCallsiteCandidates(String eventName) {
        TreeSet<CTFCallsite> retVal = callsitesByName.get(eventName);
        if (retVal == null) {
            retVal = new TreeSet<CTFCallsite>(ctfCallsiteComparator);
        }
        return retVal;
    }",Gets the set of callsites associated to an event name.,1,76
1577,"public List<FieldNode> getColsFromSelectExpr(SelectOperator op) {
    List<FieldNode> cols = new ArrayList<>();
    SelectDesc conf = op.getConf();
    if(conf.isSelStarNoCompute()) {
      for (ColumnInfo colInfo : op.getSchema().getSignature()) {
        cols.add(new FieldNode(colInfo.getInternalName()));
      }
    } else {
      List<ExprNodeDesc> exprList = conf.getColList();
        for (ExprNodeDesc expr : exprList) {
          cols = mergeFieldNodesWithDesc(cols, expr);
        }
    }
    return cols;
  }",Creates the list of internal column names (represented by field nodes) from select expressions in a select operator.,1,173
1578,"public boolean intersects(byte[] lowerInclusiveKey, byte[] upperExclusiveKey, int keyOffset, boolean crossesRegionBoundary) {
        if (isEverything()) {
            return true;
        }
        if (isDegenerate()) {
            return false;
        }
        
        //return filter.hasIntersect(lowerInclusiveKey, upperExclusiveKey);
        return intersectScan(null, lowerInclusiveKey, upperExclusiveKey, keyOffset, crossesRegionBoundary) == HAS_INTERSECTION;
    }",Return true if the range formed by the lowerInclusiveKey and upperExclusiveKey intersects with the scan ranges and false otherwise.,1,106
1579,"public static int indexOf(short[] array, short valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        for (int i = startIndex; i < array.length; i++) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex is treated as zero.,1,141
1580,"public boolean contains(Dialog dialog)
    {
        return findCallPeer(dialog) != null;
    }",Returns true if dialog matches the jain sip dialog established with one of the peers in this call.,1,31
1581,"public String getRootFolder() {
        return getId();
    }",Return the module Id.,1,21
1582,"public CompareToBuilder append(float[] lhs, float[] rhs) {
        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null) {
            comparison = -1;
            return this;
        }
        if (rhs == null) {
            comparison = +1;
            return this;
        }
        if (lhs.length != rhs.length) {
            comparison = (lhs.length < rhs.length) ? -1 : +1;
            return this;
        }
        for (int i = 0; i < lhs.length && comparison == 0; i++) {
            append(lhs[i], rhs[i]);
        }
        return this;
    }","Deep comparison of a float array.  Check if arrays are same using == Check if either is null, a null array is less than a non-null Check array length, a shorter length array is less than a longer length array Check array contents element by element using  #append(float, float)",1,254
1583,"@Override
    public final Class<Transformation> getOperationType() {
        return Transformation.class;
    }",Returns the interface implemented by all coordinate operations that extends this class.,1,29
1584,"public ArrayList<EvaluationDetailsBundle> getEvaluationDetailsForCourse(String courseId)
			throws EntityDoesNotExistException {
		
		Assumption.assertNotNull(ERROR_NULL_PARAMETER, courseId);

		gateKeeper.verifyCourseOwnerOrStudentInCourse(courseId);

		return evaluationsLogic.getEvaluationDetailsForCourse(courseId);
	}","Access level: admin, instructors of the course, students of the course.",1,60
1585,"public static JobExecutionResult execute(Plan plan) throws Exception {
		return new LocalExecutor().executePlan(plan);
	}",Executes the given dataflow plan.,1,37
1586,"public Collection getFinalStates(StateMachine stateMachine)
    {
        return getSubvertices(stateMachine, finalStateFilter);
    }",Returns the collection of FinalState instances found in the argument StateMachine.,1,29
1587,"@Nonnull
  @CheckReturnValue
  public AbstractHCCell addAndReturnCell (@Nullable final IPredefinedLocaleTextProvider... aCellTexts)
  {
    return addCell ().addChildren (aCellTexts);
  }",Add a single cell with the given text elements.,1,46
1588,"public Object caseDialChart( DialChart object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Dial Chart'.,1,25
1589,"public ConfigOption<List<T>> noDefaultValue() {
			return new ConfigOption<>(
				key,
				clazz,
				ConfigOption.EMPTY_DESCRIPTION,
				null,
				true);
		}",Creates a ConfigOption without a default value.,1,52
1590,"private AttributeContext startContext(TilesRequestContext tilesContext) {
        AttributeContext context = new BasicAttributeContext();
        BasicAttributeContext.pushContext(context, tilesContext);
        return context;
    }",Starts an attribute context inside the container.,1,48
1591,"public FileObject getAssetFileObject(String name) {
        assert (name != null);
        FileObject file = getAssetFolder().getFileObject(name);
        if (file != null) {
            return file;
        }
        synchronized (classPathItems) {
            // TODO I need to find out if classPathItems contains all jars added to a project
            Iterator<ClassPathItem> classPathItemsIter = classPathItems.iterator();
            while (classPathItemsIter.hasNext()) {
                ClassPathItem classPathItem = classPathItemsIter.next();
                FileObject jarFile = classPathItem.object;

                Enumeration<FileObject> jarEntry = (Enumeration<FileObject>) jarFile.getChildren(true);
                while (jarEntry.hasMoreElements()) {
                    FileObject jarEntryAsset = jarEntry.nextElement();
                    String path = jarEntryAsset.getPath();
                    if (!path.startsWith(""/"") && path.equals(name)) {
                        return jarEntryAsset;
                    }
                }
            }
        }
        return null;
    }","Returns the FileObject for a given asset path, or null if no such asset exists.",1,255
1592,"public static ExchangeFilterFunction basicAuthentication(String username, String password) {
		Assert.notNull(username, ""'username' must not be null"");
		Assert.notNull(password, ""'password' must not be null"");

		return basicAuthentication(r -> username, r -> password);
	}","Return a filter that adds an Authorization header for HTTP Basic Authentication, based on the given username and password.",1,74
1593,"public int consume(final MessageConsumer messageConsumer, final int messageLimit)
    {
        int count = 0;
        long position = head;

        try
        {
            while (count < messageLimit && position < tail)
            {
                final int offset = (int)position & mask;
                final int length = buffer.getInt(offset + MESSAGE_LENGTH_OFFSET);
                final int typeId = buffer.getInt(offset + MESSAGE_TYPE_OFFSET);
                final int alignedLength = BitUtil.align(length, HEADER_ALIGNMENT);

                position += alignedLength;

                if (MESSAGE_TYPE_PADDING != typeId)
                {
                    if (!messageConsumer.onMessage(buffer, offset + HEADER_LENGTH, length - HEADER_LENGTH, position))
                    {
                        position -= alignedLength;
                        break;
                    }

                    ++count;
                }
            }
        }
        finally
        {
            head = position;
        }

        return count;
    }",Consume messages up to a limit and pass them to the  MessageConsumer.,1,272
1594,"public static int indexOf(CharSequence seq, CharSequence searchSeq) {
        if (seq == null || searchSeq == null) {
            return INDEX_NOT_FOUND;
        }
        return StringUtils.indexOfSequence(seq, searchSeq, 0);
    }","Finds the first index within a CharSequence, handling  null.",1,73
1595,"public String toString() {
        HtmlStringBuffer buffer = new HtmlStringBuffer();

        buffer.elementStart(""a"");
        buffer.appendAttribute(""href"", getHref());

        if (getTarget() != null && getTarget().length() > 0) {
            buffer.appendAttribute(""target"", getTarget());
        }

        if (getTitle() != null && getTitle().length() > 0) {
            buffer.appendAttribute(""title"", getTitle());
        }

        buffer.closeTag();

        buffer.append(getLabel());

        buffer.elementEnd(""a"");

        return buffer.toString();
    }",Return an HTML anchor tag representation of the menu item.,1,201
1596,"public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        double min = valueToFind - tolerance;
        double max = valueToFind + tolerance;
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] >= min && array[i] <= max) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the last index of the given value in the array starting at the given index.,1,218
1597,"public IndexSchema addFields(Collection<SchemaField> newFields) {
    return addFields(newFields, Collections.<String, Collection<String>>emptyMap(), true);
  }","Copies this schema, adds the given fields to the copy.",1,47
1598,"public static String format(StringConvention convention, String str) {
        switch (convention) {
            case CAMEL_CASE:
                return NameUtils.camelCase(str);
            case HYPHENATED:
                return NameUtils.hyphenate(str);
            case UNDER_SCORE_SEPARATED_LOWER_CASE:
                return NameUtils.underscoreSeparate(str.toLowerCase(Locale.ENGLISH));
            case UNDER_SCORE_SEPARATED:
                return NameUtils.environmentName(str);
            case CAMEL_CASE_CAPITALIZED:
                return NameUtils.camelCase(str, false);
            case RAW:
            default:
                return str;
        }
    }",Format a string according to a convention.,1,146
1599,"protected List<NodePointer> iterationElements(NodeIterator iterator)
    {
        List<NodePointer> result = new ArrayList<NodePointer>();
        for (int pos = 1; iterator.setPosition(pos); pos++)
        {
            result.add(iterator.getNodePointer());
        }
        return result;
    }",Returns a list with all node pointers contained in the specified iteration.,1,91
1600,"public Collection<Item> getItems() {
        synchronized (items) {
            return Collections.unmodifiableList(new ArrayList<Item>(items));
        }
    }","Returns a Collection of item childs that holds information about affiliation, jids and nicks.",1,47
1601,"@Override
	public String getDefault() {
		return null;
	}",Returns the default value of @odf.attribute chart:auto-position.,1,22
1602,"public Object getVariables(Frame frame) {
        return ascope.getVariables(frame);
    }","Get variables declared in this scope and valid at the  Node passed to  #findScopes(com.oracle.truffle.api.instrumentation.TruffleInstrument.Env, com.oracle.truffle.api.nodes.Node, com.oracle.truffle.api.frame.Frame) .",1,27
1603,"public Option setFlag(boolean flag) {
    this.flag = flag;
    setSingleValued(false);
    return this;
  }",Configures the current  Option to be a flag.,1,39
1604,"public StanzaCollector createCollector() {
        return chatManager.createStanzaCollector(this);
    }",Creates a  org.jivesoftware.smack.StanzaCollector which will accumulate the Messages for this chat.,1,24
1605,"public static StackManipulation of(JavaInstance.MethodHandle methodHandle) {
        Type[] parameterType = new Type[methodHandle.getParameterTypes().size()];
        int index = 0;
        for (TypeDescription typeDescription : methodHandle.getParameterTypes()) {
            parameterType[index++] = Type.getType(typeDescription.getDescriptor());
        }
        return new MethodHandleConstant(new Handle(methodHandle.getHandleType().getIdentifier(),
                methodHandle.getOwnerType().getInternalName(),
                methodHandle.getName(),
                Type.getMethodDescriptor(Type.getType(methodHandle.getReturnType().getDescriptor()), parameterType)));
    }",Creates stack manipulation for loading the provided method handle onto the operand stack.,1,168
1606,"public ChannelType getChannelType(ChannelUID channelUID, Locale locale) {
        ThingType thingType = this.getThingType(channelUID.getThingTypeUID(), locale);
        return thingType != null ? thingType.getChannelType(channelUID) : null;
    }",Returns the channel type for a given channel UID and locale.,1,67
1607,"public static ExchangeFilterFunction basicAuthentication() {
		return basicAuthentication(
				request -> getRequiredAttribute(request, USERNAME_ATTRIBUTE),
				request -> getRequiredAttribute(request, PASSWORD_ATTRIBUTE)
				);
	}","Return a filter that adds an Authorization header for HTTP Basic Authentication, based on the username and password provided in the plain ClientRequest#attributes() request attributes.",1,54
1608,"public boolean getReturned()
		{
			// check for external grades
			Assignment a = getAssignment();
			if (isGradesInGb(a))
			{
				return isGradesInGbReleased(a);
			}
			
			return m_returned;
		}",Get whether this Submission was returned to the submitter.,1,62
1609,"public long getCurrent() {
    m_MemoryUsage = m_MemoryMXBean.getHeapMemoryUsage();
    return m_MemoryUsage.getUsed();
  }","returns the currently used size of the JVM heap, obtains a fresh MemoryUsage object to do so.",1,35
1610,"public Iterator getPresences(String user) {
        String key = getPresenceMapKey(user);
        Map userPresences = (Map)presenceMap.get(key);
        if (userPresences == null) {
            return null;
        }
        else {
            synchronized (userPresences) {
                return new HashMap(userPresences).values().iterator();
            }
        }
    }","Returns an iterator (of Presence objects) for all the user's current presences or null if the user is unavailable (offline) or if no presence information is available, such as when you are not subscribed to the user's presence updates.",1,109
1611,"protected TCPConnection getConnection(int index) {
        if (index > getMaxConnections()) {
            throw new IllegalArgumentException(""Index out of bounds"");
        }
        return connections[index];
    }",Returns the TCPConnection located at the requested position.,1,56
1612,"boolean endLegacyScene() {
        if (!mLegacySceneSet.isEmpty()) {
            mLegacySceneSetLock = true;
            for (Scene scene : mLegacySceneSet) {
                scene.endCurtainAnimation();
            }
            mLegacySceneSetLock = false;
            mLegacySceneSet.clear();
            return true;
        } else {
            return false;
        }
    }",End all legacy scene animation at once,1,97
1613,"public Context authenticatorSupplier(final AuthenticatorSupplier authenticatorSupplier)
        {
            this.authenticatorSupplier = authenticatorSupplier;
            return this;
        }",Set the  AuthenticatorSupplier that will be used for the consensus module.,1,35
1614,"public static CardNonce tokenize(BraintreeFragment fragment, CardBuilder cardBuilder) {
        final CountDownLatch latch = new CountDownLatch(1);
        final CardNonce[] cardNonce = new CardNonce[1];
        PaymentMethodNonceCreatedListener listener = new PaymentMethodNonceCreatedListener() {
            @Override
            public void onPaymentMethodNonceCreated(PaymentMethodNonce paymentMethodNonce) {
                cardNonce[0] = (CardNonce) paymentMethodNonce;
                latch.countDown();
            }
        };
        fragment.addListener(listener);

        TokenizationClient.tokenize(fragment, cardBuilder);

        try {
            latch.await();
        } catch (InterruptedException ignored) {}

        fragment.removeListener(listener);
        return cardNonce[0];
    }",Tokenize a card and return the  CardNonce instance.,1,190
1615,"public ActionGraphAndBuilder getFreshActionGraph(
      BuckEventBus eventBus,
      TargetGraph targetGraph,
      CellProvider cellProvider,
      ActionGraphParallelizationMode parallelizationMode,
      boolean shouldInstrumentGraphBuilding,
      CloseableMemoizedSupplier<ForkJoinPool> poolSupplier) {
    TargetNodeToBuildRuleTransformer transformer = new DefaultTargetNodeToBuildRuleTransformer();
    return getFreshActionGraph(
        eventBus,
        transformer,
        targetGraph,
        cellProvider,
        parallelizationMode,
        shouldInstrumentGraphBuilding,
        poolSupplier);
  }",It returns a new  ActionGraphAndBuilder based on the targetGraph without checking the cache.,1,100
1616,"@Override
    @SuppressWarnings(""unchecked"")
    public MapReduceCursor<T> execute() {
        ServerConnectionProvider provider = getSession().createServerConnectionProvider(getServerConnectionProviderOptions());
        CommandResult commandResult = new CommandProtocol(namespace.getDatabaseName(), command, commandCodec, mapReduceResultDecoder,
                                                          getBufferProvider(), provider.getServerDescription(), provider.getConnection(),
                                                          isCloseSession())
                                          .execute();

        return new MapReduceCursor<T>(commandResult);
    }",Executing this will return a cursor with your results and the statistics in.,1,121
1617,"public static IStatus error(final String message, final Throwable thr) {
		return new Status(IStatus.ERROR, getPluginId(), 0, message, thr);
	}",Instantiate an error status.,1,54
1618,"public Set<String> getExtraRequestFields() {
    return null;
  }","When a transformer needs access to fields that are not automatically derived from the input fields names, this option lets us explicitly say the field names that we hope will be in the SolrDocument.",1,22
1619,"protected final URI getAddress() {
        URI address = null;
        String tmp = serverConfigAddress.getText();
        if (tmp != null) {
            try {
                address = new URI(tmp);
            } catch (Exception e) {
            }
        }
        return address;
    }",Returns an URI representing the service address used when doing layout with this server configuration.,1,96
1620,"@SuppressWarnings(""unchecked"")
	public static <T> IModel<Set<T>> of(final Set<T> set)
	{
		return new Model((Serializable)(set instanceof Serializable ? set : new HashSet<T>(set)));
	}",Factory method for models that contain sets.,1,78
1621,"static public ZonedDateTime stringToDate(String s) {
//        return LocalDateTime.parse(s, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
        return ZonedDateTime.parse(s, DateTimeFormatter.ISO_INSTANT);
    }",Parse an ISO_LOCAL_DATE_TIME formatted string into a Java Date.,1,36
1622,"public MessageResourceBundle getBundle(Locale locale,
            String messageBundleName) {
        if (locale == null) {
            throw new NullPointerException(""locale"");
        }
        if (messageBundleName == null) {
            throw new NullPointerException(""messageBundleName"");
        }
        MessageResourceBundle parentBundle = getBundle(messageBundleName);
        MessageResourceBundle bundle = getBundle(messageBundleName + ""_""
                + locale.getLanguage());
        if (bundle != null) {
            bundle.setParent(parentBundle);
            return bundle;
        }
        return parentBundle;
    }",Returns the message bundle.,1,161
1623,"public static boolean isDateToday(final Date date) {
        if (date == null) {
            return false;
        }
        final Date now = new Date();
        if (now.getTime() - MILISECONDS_IN_18_HOURS > date.getTime() || now.getTime() + MILISECONDS_IN_18_HOURS < date.getTime()) {
            return false;
        } else {
            return true;
        }
    }","Check a date to see if it was from ""today.""",1,127
1624,"public static boolean verifyOperations( Shell shell, Repository repository, RepositoryOperation... operations ) {
    return verifyOperations( shell, repository, true, operations );
  }","Verify a repository operation, show an error dialog if there is a security error.",1,53
1625,"public T getKeyFrame (float stateTime, boolean looping) {
		// we set the play mode by overriding the previous mode based on looping
		// parameter value
		PlayMode oldPlayMode = playMode;
		if (looping && (playMode == PlayMode.NORMAL || playMode == PlayMode.REVERSED)) {
			if (playMode == PlayMode.NORMAL)
				playMode = PlayMode.LOOP;
			else
				playMode = PlayMode.LOOP_REVERSED;
		} else if (!looping && !(playMode == PlayMode.NORMAL || playMode == PlayMode.REVERSED)) {
			if (playMode == PlayMode.LOOP_REVERSED)
				playMode = PlayMode.REVERSED;
			else
				playMode = PlayMode.LOOP;
		}

		T frame = getKeyFrame(stateTime);
		playMode = oldPlayMode;
		return frame;
	}",Returns a frame based on the so called state time.,1,219
1626,"public static Method getStaticMethod(Class<?> clazz, String methodName, Class<?>... args) {
		Assert.notNull(clazz, ""Class must not be null"");
		Assert.notNull(methodName, ""Method name must not be null"");
		try {
			Method method = clazz.getMethod(methodName, args);
			return Modifier.isStatic(method.getModifiers()) ? method : null;
		}
		catch (NoSuchMethodException ex) {
			return null;
		}
	}",Return a public static method of a class.,1,134
1627,"public SelectorEventLoop getWorker() {
        return worker;
    }",Return the  SelectorEventLoop that handle the IO of the  AbstractNioChannel,1,19
1628,"public int compare(File lhs, File rhs) {
            if (lhs.lastModified() == rhs.lastModified()) {
                return lhs.compareTo(rhs);
            } else if (lhs.lastModified() < rhs.lastModified()) {
                return 1;
            } else {
                return -1;
            }
        }",Comparator used for sorting files by modification date.,1,102
1629,"private static boolean equals(Type[] t1, Type[] t2) {
        if (t1.length == t2.length) {
            for (int i = 0; i < t1.length; i++) {
                if (!equals(t1[i], t2[i])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }",Learn whether  t1 equals  t2.,1,123
1630,"public I18nMessage stringIsNotBlank() {
    return createMessage(bundlePath, 19);
  }",Generates a  I18nMessage for a String which was expected to be blank but wasn't,1,25
1631,"public Result execute(int nr, Result result) throws KettleException {
    finished.set(false);
    active.set(true);
    initialized.set(true);
    KettleEnvironment.setExecutionInformation(this, rep);

    // Calculate the transaction ID prior to execution
    //
    transactionId = calculateTransactionId();

    // Where do we start?
    JobEntryCopy startpoint;

    // Perhaps there is already a list of input rows available?
    if (getSourceRows() != null) {
      result.setRows(getSourceRows());
    }

    startpoint = jobMeta.findJobEntry(JobMeta.STRING_SPECIAL_START, 0, false);
    if (startpoint == null) {
      throw new KettleJobException(BaseMessages.getString(PKG, ""Job.Log.CounldNotFindStartingPoint""));
    }

    Result res = execute(nr, result, startpoint, null, BaseMessages.getString(PKG, ""Job.Reason.StartOfJobentry""));

    active.set(false);

    return res;
  }",Execute a job with previous results passed in.,1,238
1632,"public SWTBotMenu contextMenu(String text) throws WidgetNotFoundException {
		return styledText.contextMenu().menu(text);
	}",Gets the context menu item matching the given text in the editor.,1,35
1633,"public static OutputStream getSnappyOutputStream(int bufferSize, OutputStream out)
    throws Exception {
    if (!isHadoopSnappyAvailable()) {
      throw new Exception(""Hadoop-snappy does not seem to be available"");
    }
    
    Object snappyCodec = Class.forName(SNAPPY_CODEC_CLASS).newInstance();    
    Class confClass = Class.forName(""org.apache.hadoop.conf.Configuration"").newInstance().getClass();
    Class[] paramClass = new Class[1];
    paramClass[0] = confClass;
    
    Object newConf = Class.forName(""org.apache.hadoop.conf.Configuration"").newInstance();    
    
    Object[] args = new Object[2];
    args[0] = IO_COMPRESSION_CODEC_SNAPPY_BUFFERSIZE_KEY;
    args[1] = """" + bufferSize;
    Method cm = confClass.getMethod(""set"", new Class[] {String.class, String.class});
    cm.invoke(newConf, args);
    
    Method m = snappyCodec.getClass().getMethod(""setConf"", paramClass);
    m.invoke(snappyCodec, newConf);
    
    paramClass[0] = Class.forName(""java.io.OutputStream"");
    m = snappyCodec.getClass().getMethod(""createOutputStream"", paramClass);
    Object result = m.invoke(snappyCodec, out);
    
    return (OutputStream)result;
  }",Gets an OutputStream that uses the snappy codec and wraps the supplied base output stream.,1,357
1634,"public static RPCBlockResponse createErrorResponse(final RPCBlockRequest request,
      final Status status) {
    Preconditions.checkArgument(status != Status.SUCCESS);
    // The response has no payload, so length must be 0.
    return new RPCBlockResponse(request.getBlockId(), request.getOffset(), 0, null, status);
  }",Creates a  RPCBlockResponse object that indicates an error for the given  RPCBlockRequest.,1,78
1635,"public List<IAnchor> getControlAnchors() {
		int controlAnchorsCount = sortedAnchorKeys.size();
		if (sortedAnchorKeys.contains(getStartAnchorKey())) {
			controlAnchorsCount--;
		}
		if (sortedAnchorKeys.contains(getEndAnchorKey())) {
			controlAnchorsCount--;
		}
		List<IAnchor> controlAnchors = new ArrayList<>(controlAnchorsCount);
		for (int i = 0; i < controlAnchorsCount; i++) {
			IAnchor controlAnchor = getControlAnchor(i);
			if (controlAnchor == null) {
				throw new IllegalStateException(
						""control anchor may never be null."");
			}
			controlAnchors.add(controlAnchor);
		}
		return controlAnchors;
	}",Returns a  List containing the control  IAnchor anchorsByKeys currently assigned to this  Connection.,1,190
1636,"public final long getTokenExpiration() {
        return tokenExpirationSeconds;
    }",Gets the period of time after which tokens created using this configuration should expire.,1,21
1637,"protected Resources getResources()
    {
        return resources;
    }",Returns the resources.,1,20
1638,"public Bitmap getCurrentFrame() {
        return mBuffer.copy(mBuffer.getConfig(), mBuffer.isMutable());
    }",Retrieves a copy of currently buffered frame.,1,35
1639,"public static double get(ClassMetricKey key, ASTClassOrInterfaceDeclaration node) {
        // TODO:cf think about caching
        return TOP_LEVEL_PACKAGE.compute(key, node, false);
    }",Computes a metric identified by its code on a class AST node.,1,43
1640,"private ElementaryStreamReader.EsInfo readEsInfo(ParsableByteArray data, int length) {
      int descriptorsStartPosition = data.getPosition();
      int descriptorsEndPosition = descriptorsStartPosition + length;
      int streamType = -1;
      String language = null;
      while (data.getPosition() < descriptorsEndPosition) {
        int descriptorTag = data.readUnsignedByte();
        int descriptorLength = data.readUnsignedByte();
        int positionOfNextDescriptor = data.getPosition() + descriptorLength;
        if (descriptorTag == TS_PMT_DESC_REGISTRATION) { // registration_descriptor
          long formatIdentifier = data.readUnsignedInt();
          if (formatIdentifier == AC3_FORMAT_IDENTIFIER) {
            streamType = TS_STREAM_TYPE_AC3;
          } else if (formatIdentifier == E_AC3_FORMAT_IDENTIFIER) {
            streamType = TS_STREAM_TYPE_E_AC3;
          } else if (formatIdentifier == HEVC_FORMAT_IDENTIFIER) {
            streamType = TS_STREAM_TYPE_H265;
          }
        } else if (descriptorTag == TS_PMT_DESC_AC3) { // AC-3_descriptor in DVB (ETSI EN 300 468)
          streamType = TS_STREAM_TYPE_AC3;
        } else if (descriptorTag == TS_PMT_DESC_EAC3) { // enhanced_AC-3_descriptor
          streamType = TS_STREAM_TYPE_E_AC3;
        } else if (descriptorTag == TS_PMT_DESC_DTS) { // DTS_descriptor
          streamType = TS_STREAM_TYPE_DTS;
        } else if (descriptorTag == TS_PMT_DESC_ISO639_LANG) {
          language = new String(data.data, data.getPosition(), 3).trim();
          // Audio type is ignored.
        }
        // Skip unused bytes of current descriptor.
        data.skipBytes(positionOfNextDescriptor - data.getPosition());
      }
      data.setPosition(descriptorsEndPosition);
      return new ElementaryStreamReader.EsInfo(streamType, language,
          Arrays.copyOfRange(sectionData.data, descriptorsStartPosition, descriptorsEndPosition));
    }",Returns the stream info read from the available descriptors.,1,444
1641,"public IGerritHudsonTriggerConfig getConfig() {
        if (PluginImpl.getInstance() == null) {
            //If this happens we are sincerely screwed anyways.
            throw new IllegalStateException(""PluginImpl has not been loaded yet!"");
        }
        return PluginImpl.getInstance().getConfig();
    }",Shortcut method to get the config from  com.sonyericsson.hudson.plugins.gerrit.trigger.PluginImpl.,1,64
1642,"public static SSLSocketFactory getSocketFactory() {
        return new SSLSocketFactory(createDefaultSSLContext());
    }","Gets the default factory, which uses the default JSSE settings for initializing the SSL context.",1,28
1643,"public NodeResources freeCapacityOf(Node host) {
        return freeCapacityOf(host, false);
    }",Calculate the remaining capacity of a host.,1,28
1644,"public static Iterator sort(Iterator self) {
        return sort(toList(self)).listIterator();
    }",Sorts the given iterator items into a sorted iterator.,1,34
1645,"public NodeContext createRootNodeContext(final CachedClassLookupMap<NodeConfig> rootNodeLookup,
			final AbstractNodeConfig nodeMapping, final Object source)
	{
		NodeContext result = null;

		// configured nodeLookup for distance 1
		// final CachedClassLookupMap<NodeMapping> add = this.graphConfigImpl.getAllNodeMappings(1);
		final CachedClassLookupMap<NodeConfig> add = this.graphConfigImpl.getAllNodeConfigs(1);

		// child nodes lookup is a merged result of current used node lookup and configured node lookup for next processing distance
		final CachedClassLookupMap<NodeConfig> childNodesLookup = this.buildChildNodeLookup(rootNodeLookup, add);

		this.setRuntimeNodeMappings(0, rootNodeLookup);
		this.setRuntimeNodeMappings(1, childNodesLookup);

		if (log.isDebugEnabled())
		{
			log.debug(""Added distance based runtime node lookup: "" + 0 + "":"" + rootNodeLookup.hashCode());
			log.debug(""Added distance based runtime node lookup: "" + 1 + "":"" + childNodesLookup.hashCode());
		}


		// create result context
		result = new NodeContextImpl(this, null, nodeMapping, childNodesLookup, 0, 0, source);

		if (graphConfig.getNodeListener() != null)
		{
			this.graphConfig.getNodeListener().nodeContextCreated(result);
		}



		return result;
	}",Creates an initial  NodeContext (root node context),1,287
1646,"public static int indexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        for (int i = startIndex; i < array.length; i++) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex is treated as zero.,1,141
1647,"public static String getRevisionCmd(String first, String last) {
        if ((first == null || """".equals(first)) &&
            ((last == null) || """".equals(last))) {
            return """";
        }
        String ret = ""@"";
        if (first == null || """".equals(first)) {
            ret += ""0,"";
        } else {
            ret += first + "","";
        }
        if (last == null || """".equals(last)) {
            ret += ""now"";
        } else {
            ret += last;
        }
        return ret;
    }",Parse rev numbers and return it as a range in a format suitable for P4 command-line.,1,220
1648,"public GLCapabilities getCapabilities() {
		return capabilities;
	}",Returns the  GLCapabilities instance that describes the capabilities of this context.,1,19
1649,"public static String getAbsoluteURIFromRelative(String localPath)
  {
    // If the local path is absolute, just prepend the scheme part to
    // generate the absolute URI.
    String urlString = localPath;
    if (isAbsolutePath(localPath))
    {
      if (localPath.startsWith(File.separator))
        urlString = ""file://"" + localPath;
      else
        urlString = ""file:///"" + localPath;      
    }
    // If it is a relative path, the path is resolved against the current
    // ""user.dir"" system property.
    else
    {
      String absolutePath = localPath;
      try {
        absolutePath = new File(localPath).getAbsolutePath();
      }
      // user.dir not accessible from applet
      catch (SecurityException se) {}

      if (null != absolutePath)
      {
        if (absolutePath.startsWith(File.separator))
          urlString = ""file://"" + absolutePath;
        else
          urlString = ""file:///"" + absolutePath;        
      }
      else
        urlString = ""file:///"" + localPath;
    }
    
    String result = replaceChars(urlString);
    return result;
  }",Get an absolute URI from a given relative URI (local path).,1,265
1650,"public boolean isSpeaking() {
        return runAction(new Action<Boolean>() {
            @Override
            public Boolean run(ITextToSpeechService service) throws RemoteException {
                return service.isSpeaking();
            }
        }, false, ""isSpeaking"");
    }",Checks whether the TTS engine is busy speaking.,1,76
1651,"public int lastIndexOf(String str) {
        return lastIndexOf(str, value.length);
    }",Returns the index within this string of the last occurrence of the specified substring.,1,30
1652,"public Parameters withPreferredTextLanguage(String preferredTextLanguage) {
      preferredTextLanguage = Util.normalizeLanguageCode(preferredTextLanguage);
      if (TextUtils.equals(preferredTextLanguage, this.preferredTextLanguage)) {
        return this;
      }
      return new Parameters(preferredAudioLanguage, preferredTextLanguage,
          allowMixedMimeAdaptiveness, allowNonSeamlessAdaptiveness, maxVideoWidth, maxVideoHeight,
          maxVideoBitrate, exceedVideoConstraintsIfNecessary, exceedRendererCapabilitiesIfNecessary,
          viewportWidth, viewportHeight, viewportOrientationMayChange);
    }",Returns an instance with the provided preferred language for text tracks.,1,104
1653,"private static List<FoundIndication> findIndications(final Collection<FailureCause> causes,
                                                         Run build,
                                                         PrintStream buildLog) {
        List<BuildLogIndication> siglelineIndications = new ArrayList<>();
        List<MultilineBuildLogIndication> multilineBuildLogIndications = new ArrayList<>();
        List<FoundIndication> foundIndicationList = new LinkedList<>();

        for (FailureCause cause : causes) {
            for (Indication indication : cause.getIndications()) {
                indication.setCause(cause);

                if (indication instanceof MultilineBuildLogIndication) {
                    multilineBuildLogIndications.add((MultilineBuildLogIndication) indication);
                } else if (indication instanceof BuildLogIndication) {
                    siglelineIndications.add((BuildLogIndication) indication);
                }
            }
        }

        try {
            try (BufferedReader reader = new BufferedReader(build.getLogReader())) {
                foundIndicationList.addAll(
                        FailureReader.scanSingleLinePatterns(
                                siglelineIndications,
                                build,
                                reader,
                                build.getLogFile().getName()));
            }

            for (MultilineBuildLogIndication indication : multilineBuildLogIndications) {
                long start = System.currentTimeMillis();

                    Thread.currentThread().setName(""BFA-scanner-""
                            + build.getFullDisplayName() + "": ""
                            + indication.getCause().getName() + ""-""
                            + indication.getUserProvidedExpression());
                    FoundIndication foundIndication = findIndication(indication, build, buildLog);
                    if (foundIndication != null) {
                        foundIndication.setCause(indication.getCause());
                        foundIndicationList.add(foundIndication);
                    }

                if (logger.isLoggable(Level.FINER)) {
                    logger.log(Level.FINER, ""[BFA] [{0}] [{1}] {2}ms"", new Object[]
                            {build.getFullDisplayName(),
                                    indication.getCause().getName(),
                                    String.valueOf(System.currentTimeMillis() - start), });
                }
            }

            return foundIndicationList;
        } catch (IOException e) {
            buildLog.print(""Sorry, Alex tried to fix BFA plugin ASAP and didn't mention this corner case: "" + e);
        }

        return new ArrayList<>();
    }",Finds indications for all causes.,1,560
1654,"private UI getRootForConnector(ClientConnector connector) {
        if (connector == null) {
            return null;
        }
        if (connector instanceof Component) {
            return ((Component) connector).getRoot();
        }

        return getRootForConnector(connector.getParent());
    }",Finds the uI that the connector is attached to.,1,85
1655,"public PersistenceManagerConfig getPersistenceManagerConfig() {
        return pmc;
    }",Returns the workspace persistence manager configuration.,1,19
1656,"public TempBlockMeta getTempBlockMeta(long blockId) throws IOException {
    TempBlockMeta tempBlockMeta = mBlockIdToTempBlockMap.get(blockId);
    if (tempBlockMeta == null) {
      throw new IOException(""Cannot find TempBlockMeta for blockId "" + blockId + "" in ""
          + toString());
    }
    return tempBlockMeta;
  }",Gets the BlockMeta from this storage dir by its block ID or throws IOException.,1,88
1657,"public MeetupsEntry remove(MeetupsEntry meetupsEntry)
		throws SystemException {
		return super.remove(meetupsEntry);
	}",Removes the meetups entry from the database.,1,32
1658,"public static Charset charset(String charset) {
		return new Charset(charset);
	}",Shortcut for  new Charset(charset).,1,29
1659,"public static <Q extends Quantity<Q>> PhysicsDimension getDimension(Class<Q> quantityType) {
        // TODO: Track OSGi services and aggregate results.
        PhysicsUnit<Q> siUnit = SI.getInstance().getUnit(quantityType);
        if (siUnit == null) LogContext.warning(""Quantity type: "" + quantityType + "" unknown"");
        return (siUnit != null) ? siUnit.getDimension() : null;
    }",Returns the dimension for the specified quantity type by aggregating the results of  PhysicsDimensionService or null if the specified quantity is unknown.,1,114
1660,"protected String determineViewName(Exception ex, HttpServletRequest request) {
		String viewName = null;
		if (this.excludedExceptions != null) {
			for (Class<?> excludedEx : this.excludedExceptions) {
				if (excludedEx.equals(ex.getClass())) {
					return null;
				}
			}
		}
		// Check for specific exception mappings.
		if (this.exceptionMappings != null) {
			viewName = findMatchingViewName(this.exceptionMappings, ex);
		}
		// Return default error view else, if defined.
		if (viewName == null && this.defaultErrorView != null) {
			if (logger.isDebugEnabled()) {
				logger.debug(""Resolving to default view '"" + this.defaultErrorView + ""' for exception of type ["" +
						ex.getClass().getName() + ""]"");
			}
			viewName = this.defaultErrorView;
		}
		return viewName;
	}","Determine the view name for the given exception, first checking against the  #setExcludedExceptions(Class[]) ""excludedExecptions"", then searching the  #setExceptionMappings ""exceptionMappings"", and finally using the  #setDefaultErrorView ""defaultErrorView"" as a fallback.",1,244
1661,"public static boolean isValidDurationType(IRI durationIRI) {
        checkNotNull(durationIRI);
        return DURATION_MAP.containsKey(durationIRI);
    }",Verifies whether IRI is a valid OWL-Time IRI that is supported by this class.,1,36
1662,"public static String getDateTimeString(final LocalDateTime self) {
        return self.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
    }",Formats this date/time with the  java.time.format.DateTimeFormatter#ISO_LOCAL_DATE_TIME formatter.,1,33
1663,"//@VisibleForTesting
  long skipToPageOfGranule(ExtractorInput input, long targetGranule, long currentGranule)
      throws IOException, InterruptedException {
    skipToNextPage(input);
    pageHeader.populate(input, false);
    while (pageHeader.granulePosition < targetGranule) {
      input.skipFully(pageHeader.headerSize + pageHeader.bodySize);
      // Store in a member field to be able to resume after IOExceptions.
      currentGranule = pageHeader.granulePosition;
      // Peek next header.
      pageHeader.populate(input, false);
    }
    input.resetPeekPosition();
    return currentGranule;
  }",Skips to the position of the start of the page containing the  targetGranule and returns the granule of the page previous to the target page.,1,131
1664,"public DocList getDocList(Query query, List<Query> filterList, Sort lsort, int offset, int len, int flags) throws IOException {
    DocListAndSet answer = new DocListAndSet();
    getDocListC(answer,query,filterList,null,lsort,offset,len,flags);
    return answer.docList;
  }","Returns documents matching both query and the intersection of the filterList, sorted by sort.",1,91
1665,"public ObjectIdentifier qualifyIdentifier(UnresolvedIdentifier identifier) {
		return ObjectIdentifier.of(
			identifier.getCatalogName().orElseGet(this::getCurrentCatalog),
			identifier.getDatabaseName().orElseGet(this::getCurrentDatabase),
			identifier.getObjectName());
	}","Returns the full name of the given table path, this name may be padded with current catalog/database name based on the  identifier's length.",1,65
1666,"public String peekAuthToken(final Account account, final String authTokenType) {
        if (account == null) {
            Log.e(TAG, ""peekAuthToken: the account must not be null"");
            return null;
        }
        if (authTokenType == null) {
            return null;
        }
        try {
            return mService.peekAuthToken(account, authTokenType);
        } catch (RemoteException e) {
            // won't ever happen
            throw new RuntimeException(e);
        }
    }","Gets the authtoken named by ""authTokenType"" for the specified account if it is cached by the AccountManager.",1,134
1667,"public static BigInteger createBigInteger(String str) {
        if (str == null) {
            return null;
        }
        int pos = 0; // offset within string
        int radix = 10;
        boolean negate = false; // need to negate later?
        if (str.startsWith(""-"")) {
            negate = true;
            pos = 1;
        }
        if (str.startsWith(""0x"", pos) || str.startsWith(""0x"", pos)) { // hex
            radix = 16;
            pos += 2;
        } else if (str.startsWith(""#"", pos)) { // alternative hex (allowed by Long/Integer)
            radix = 16;
            pos ++;
        } else if (str.startsWith(""0"", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits
            radix = 8;
            pos ++;
        } // default is to treat as decimal

        final BigInteger value = new BigInteger(str.substring(pos), radix);
        return negate ? value.negate() : value;
    }",Convert a String to a BigInteger; since 3.2 it handles hex (0x or #) and octal (0) notations. Returns null if the string is null.,1,309
1668,"protected IllegalPathException cannotListFileException(Path path) {
    return new IllegalPathException(format(""Cannot list path '%s' because it's a file. Only directories can be listed"",
                                           path));
  }","Returns a  IllegalPathException explaining that a  FileSystem#list(FileConnectorConfig, String, boolean, Message, Predicate) operation was attempted on a  path pointing to a file.",1,36
1669,"private List getOperation(Collection c, String name, int params) {
        List<Object> ops = new ArrayList<Object>();
        Iterator it;

        if (name == null || name.length() == 0) {
            return ops;
        }

        it = c.iterator();
        while (it.hasNext()) {
            Object clf = /* (MClassifier) */it.next();
            Collection oe = Model.getFacade().getFeatures(clf);
            Iterator it2 = oe.iterator();
            while (it2.hasNext()) {
                Object me = /* (MModelElement) */it2.next();
                if (!(Model.getFacade().isAOperation(me))) {
                    continue;
                }

                Object op = /* (MOperation) */me;
                if (!name.equals(Model.getFacade().getName(op))) {
                    continue;
                }
                if (params != countParameters(op)) {
                    continue;
                }
                ops.add(op);
            }
        }
        if (ops.size() > 0) {
            return ops;
        }

        it = c.iterator();
        if (it.hasNext()) {
            StringBuilder expr = new StringBuilder(name + ""("");
            int i;
            for (i = 0; i < params; i++) {
                if (i > 0) {
                    expr.append("", "");
                }
                expr.append(""param"" + (i + 1));
            }
            expr.append("")"");
            // Jaap Branderhorst 2002-23-09 added next lines to link
            // parameters and operations to the figs that represent
            // them
            Object cls = it.next();
            Object returnType =
                ProjectManager.getManager()
                        .getCurrentProject().getDefaultReturnType();
            Object op = Model.getCoreFactory().buildOperation(cls, returnType);

            try {
                (new OperationNotationUml(op)).parseOperation(
                        expr.toString(), op);
            } catch (ParseException pe) {
                LOG.error(""Unexpected ParseException in getOperation: "" + pe,
                        pe);

            }
            ops.add(op);
        }
        return ops;
    }",Finds the operations in Collection c with the given name and the given number of parameters.,1,623
1670,"public NodeIterable<Node> inputs() {
        return nodeClass.getInputIterable(this);
    }",Returns an  NodeIterable iterable which can be used to traverse all non-null input edges of this node.,1,27
1671,"public boolean hasAttr(ActionAttributes attr) {
    return attrs.contains(attr);
  }",Ask if an action has a specific attribute,1,27
1672,"public static String getTimeString(final OffsetDateTime self) {
        return self.format(DateTimeFormatter.ISO_OFFSET_TIME);
    }",Formats this date/time with the  java.time.format.DateTimeFormatter#ISO_OFFSET_TIME formatter.,1,33
1673,"protected <T extends Object> List<T> filterCollection( List<T> items )
    {
        Iterator<T> iterator = items.listIterator();
        while( iterator.hasNext() )
        {
            T item = iterator.next();
            String pageName = getPageName( item );

            // Include it?
            boolean include = filterItem( pageName );

            if( include )
            {
                // show the page if it's not an attachment, or it's an
                // attachment and show_attachment=true
                boolean isAttachment = pageName.contains( ""/"" );
                if( isAttachment && !m_showAttachments )
                {
                    include = false;
                }
                
                // Update the ""high watermark""
                updateHighWaterMark( pageName );
            }
            
            // Remove the item from the list if not included
            if ( !include )
            {
                iterator.remove();
            }
        }

        return items;
    }",Filters a list of same-type objects according to the include and exclude parameters supplied to the plugin.,1,234
1674,"public LocationStrategy withFallbackTo(LocationStrategy... locationStrategy) {
                List<LocationStrategy> locationStrategies = new ArrayList<LocationStrategy>(locationStrategy.length + 1);
                locationStrategies.add(this);
                locationStrategies.addAll(Arrays.asList(locationStrategy));
                return new Compound(locationStrategies);
            }",Adds additional location strategies as fallbacks to this location strategy.,1,80
1675,"public SOAPFault getFault() {
        throw new UnsupportedOperationException(); //TODO implement this
    }",Returns the SOAPFault object in this SOAPBody object.,1,25
1676,"private Node<VcfSample, Relationship> createNode(final VcfSample sample) {
            checkNotNull(sample);
            if (!nodes.containsKey(sample)) {
                nodes.put(sample, graph.createNode(sample));
            }
            return nodes.get(sample);
        }","Return the node for the specified sample, creating a new one if necessary.",1,77
1677,"public Object caseLegend( Legend object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Legend'.,1,25
1678,"public static Character[] toObject(char[] array) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_CHARACTER_OBJECT_ARRAY;
        }
        final Character[] result = new Character[array.length];
        for (int i = 0; i < array.length; i++) {
            result[i] = new Character(array[i]);
        }
        return result;
     }",Converts an array of primitive chars to objects. This method returns null for a null input array.,1,149
1679,"private String getErrorMsgOfTableMetaData(final String logicTableName, final Collection<ColumnMetaData> oldColumnMetaDataList, final Collection<ColumnMetaData> newColumnMetaDataList) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("" Cannot get uniformed table structure for "").append(logicTableName).append(""."");
        stringBuilder.append("" The different column metadata of actual tables is as follows: "");
        for (ColumnMetaData each : oldColumnMetaDataList) {
            stringBuilder.append(each.toString()).append("" "");
        }
        stringBuilder.append(""\n"");
        for (ColumnMetaData each : newColumnMetaDataList) {
            stringBuilder.append(each.toString()).append("" "");
        }
        return stringBuilder.toString();
    }",Get column metadata implementing by concrete handler.,1,184
1680,"public AbstractButtonOperator getToolbarButton(int index) {
        // finds JToolbar
        ComponentChooser chooser = new ComponentChooser() {
            public boolean checkComponent(Component comp) {
                return comp instanceof JToolBar;
            }
            public String getDescription() {
                return ""javax.swing.JToolBar"";
            }
        };
        Container toolbar = (Container)findComponent((Container)getSource(), chooser);
        if(toolbar == null) {
            throw new JemmyException(""Toolbar not present."");
        }
        // if ""quick browse"" combo box is present, skip first button (MetalComboBoxButton usualy)
        Component combo = JComboBoxOperator.findJComboBox(toolbar, 
                                ComponentSearcher.getTrueChooser(""JComboBox""));
        if(combo != null) {
            index++;
        }
        return new AbstractButtonOperator(AbstractButtonOperator.waitAbstractButton((Container)toolbar, 
                                   ComponentSearcher.getTrueChooser(""AbstractButton""), index));
    }",Return AbstractButtonOperator representing index-th toolbar button within the Source Editor.,1,226
1681,"public Double getPercentageValue() {
		if (getTypeAttr() == OfficeValueTypeAttribute.Value.PERCENTAGE) {
			return mCellElement.getOfficeValueAttribute();
		} else {
			throw new IllegalArgumentException();
		}
	}",Get the cell percentage value as Double object.,1,63
1682,"private List<LNode> dfs(final LNode node, final List<LNode> component) {
        if (node.id == 0) {
            node.id = 1;
            List<LNode> c = component;
            if (c == null) {
                c = new LinkedList<LNode>();
            }
            c.add(node);
            for (LPort port1 : node.getPorts()) {
                for (LPort port2 : port1.getConnectedPorts()) {
                    dfs(port2.getNode(), c);
                }
            }
            return c;
        }
        return null;
    }",Perform a DFS starting on the given node and collect all nodes that are found in the corresponding connected component.,1,184
1683,"public int getMinElement() {
		if ( isNil() ) {
			return Token.INVALID_TYPE;
		}

		return intervals.get(0).a;
	}",Returns the minimum value contained in the set.,1,51
1684,"static CachedScheduler cache(AtomicReference<CachedScheduler> reference, String key, Supplier<Scheduler> supplier) {
		CachedScheduler s = reference.get();
		if (s != null) {
			return s;
		}
		s = new CachedScheduler(key, supplier.get());
		if (reference.compareAndSet(null, s)) {
			return s;
		}
		//the reference was updated in the meantime with a cached scheduler
		//fallback to it and dispose the extraneous one
		s._dispose();
		return reference.get();
	}","Get a  CachedScheduler out of the  reference or create one using the  Supplier if the reference is empty, effectively creating a single instance to be reused as a default scheduler for the given  key category.",1,139
1685,"public BaseDescr declare( PackageDescrBuilder pkg ) throws RecognitionException {
        BaseDescr declaration = null;
        try {
            DeclareDescrBuilder declare = helper.start( pkg,
                                                        DeclareDescrBuilder.class,
                                                        null );

            // 'declare'
            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.DECLARE,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;
            
            if( helper.validateIdentifierKey( DroolsSoftKeywords.ENTRY ) ) {
                // entry point declaration
                declaration = entryPointDeclaration( declare );
            } else if( helper.validateIdentifierKey( DroolsSoftKeywords.WINDOW ) ) {
                // window declaration
                declaration = windowDeclaration( declare );
            } else {
                // type declaration
                declaration = typeDeclaration( declare );
            }

        } catch ( RecognitionException re ) {
            reportError( re );
        }
        return declaration;
    }",declare := DECLARE | (ENTRY-POINT) => entryPointDeclaration | (WINDOW) => windowDeclaration | typeDeclaration,1,251
1686,"public FactHandle get(Declaration declaration)
    {
        return (FactHandle) this.columns.get( declaration );
    }",Retrieve a FactHandle by declaration.,1,36
1687,"@RequestMapping(method = RequestMethod.GET)
    @ResponseBody
    public List<OrganizationTO> getAllOrganizations() {
        LOGGER.debug(""Requesting all organizations!"");

        return organizationService.getAllOrganizations();
    }",API call that is used to get a response of all organizations found in the application.,1,53
1688,"public DataStreamSink<OUT> writeToFile(FileOutputFormat<OUT> format, long millis) {
		return addSink(new FileSinkFunctionByMillis<OUT>(format, millis));
	}",Writes the DataStream to a socket as a byte array.,1,47
1689,"public Number random(Object num1, Object num2)
    {
        Number n1 = toNumber(num1);
        Number n2 = toNumber(num2);
        if (n1 == null || n2 == null)
        {
            return null;
        }

        double diff = n2.doubleValue() - n1.doubleValue();
        // multiply the difference by a pseudo-random double from 
        // 0.0 to 1.0, round to the nearest int, and add the first
        // value to the random int and return as an Integer
        double random = (diff * Math.random()) + n1.doubleValue();

        // check if either of the args were floating points
        String in = n1.toString() + n2.toString();
        if (in.indexOf('.') < 0)
        {
            // args were whole numbers, so return the same
            return matchType(n1, n2, Math.floor(random));
        }
        // one of the args was a floating point,
        // so don't floor the result
        return new Double(random);
    }",This returns a random  Number within the specified range.,1,230
1690,"public Plan getPlan( Class clazz ) {
		return manager.getPlan( clazz );
	}",Get  Plan for a Class,1,31
1691,"public static int addDisplay(String qualifiersStr) {
    int id = getShadowDisplayManagerGlobal().addDisplay(createDisplayInfo(qualifiersStr, null));
    shadowMainLooper().idle();
    return id;
  }",Adds a simulated display and drain the main looper queue to ensure all the callbacks are processed.,1,57
1692,"public static byte[] generate(byte[] pwInput, byte[] salt, int cost)
    {
        if (pwInput == null || salt == null)
        {
            throw new IllegalArgumentException(""pwInput and salt are required"");
        }
        if (salt.length != SALT_SIZE_BYTES)
        {
            throw new IllegalArgumentException(""BCrypt salt must be 128 bits"");
        }
        if (pwInput.length > MAX_PASSWORD_BYTES)
        {
            throw new IllegalArgumentException(""BCrypt password must be <= 72 bytes"");
        }
        if (cost < MIN_COST || cost > MAX_COST)
        {
            throw new IllegalArgumentException(""BCrypt cost must be from 4..31"");
        }

        return new BCrypt().deriveRawKey(cost, salt, pwInput);
    }",Calculates the bcrypt hash of an input - note for processing general passwords you want to make sure the password is terminated in a manner similar to what is done by passwordToByteArray().,1,202
1693,"@Nonnull
  @CheckReturnValue
  public AbstractHCCell addAndReturnCell (@Nullable final Iterable <? extends IHCNode> aCellChildren)
  {
    return addCell ().addChildren (aCellChildren);
  }",Add a single new cell and add the passed elements.,1,51
1694,"public boolean hasBeenUpdated() throws IOException {
      long modified = file.lastModified();
      long fileSizeNow = file.length();
      if (modified == 0L)
        throw new IOException(""File deleted"");
      return timeStamp != modified || fileSize != fileSizeNow;
    }",Check if time stamp or the file size has changed.,1,92
1695,"public double min() {
            return reduce(naturalDoubleMinReducer(), Double.MAX_VALUE);
        }","Returns the minimum element, or Double.MAX_VALUE if empty",1,29
1696,"public static ExchangeFilterFunction basicAuthentication(String username, String password) {
		Assert.notNull(username, ""'username' must not be null"");
		Assert.notNull(password, ""'password' must not be null"");

		return ExchangeFilterFunction.ofRequestProcessor(
				clientRequest -> {
					String authorization = authorization(username, password);
					ClientRequest<?> authorizedRequest = ClientRequest.from(clientRequest)
							.header(HttpHeaders.AUTHORIZATION, authorization)
							.body(clientRequest.inserter());
					return Mono.just(authorizedRequest);
				});
	}",Return a filter that adds an Authorization header for HTTP Basic Authentication.,1,141
1697,"public InvokeDynamic withValue(double value) {
        return new InvokeDynamic(bootstrapMethod,
                handleArguments,
                invocationProvider.appendArgument(new InvocationProvider.ArgumentProvider.ForDoubleValue(value)),
                terminationHandler,
                assigner,
                dynamicallyTyped);
    }",Requires the bootstrap method to bootstrap a method that takes the specified  double argument as its next parameters.,1,61
1698,"public boolean onBackPressed(boolean isSystemBackKey) {
        return mThreePane.onBackPressed(isSystemBackKey);
    }",Handles the back event.,1,27
1699,"public int remainingCount()
    {
        return comparator.size() - size;
    }",Returns the number of elements that can be added to the clusterings.,1,28
1700,"public DitContentRule parse( String schemaDescription ) throws ParseException
    {
        return parseDITContentRuleDescription( schemaDescription );
    }",Parses a DitContentRule description.,1,34
1701,"public static List<AlluxioURI> getTachyonURIs(FileSystem tachyonClient,
                                                AlluxioURI inputURI) throws IOException {
    if (!inputURI.getPath().contains(AlluxioURI.WILDCARD)) {
      return Lists.newArrayList(inputURI);
    } else {
      String inputPath = inputURI.getPath();
      AlluxioURI parentURI =
          new AlluxioURI(inputURI.getScheme(), inputURI.getAuthority(),
              inputPath.substring(0, inputPath.indexOf(AlluxioURI.WILDCARD) + 1)).getParent();
      return getTachyonURIs(tachyonClient, inputURI, parentURI);
    }
  }",Gets all the  AlluxioURIs that match inputURI.,1,156
1702,"public AllocationNode clear() {
      allocation = null;
      AllocationNode temp = next;
      next = null;
      return temp;
    }",Clears  #allocation and  #next.,1,45
1703,"@SuppressWarnings(""MagicNumber"")
    static String colonify(final byte[] bytes) {
        Objects.requireNonNull(bytes, ""byte array is null"");

        if (bytes.length == 0) {
            return """";
        }

        final char[] chars = new char[bytes.length * 3 - 1];

        int charPos = 0;
        for (int i = 0; i < bytes.length; i++) {
            final int val = bytes[i] & 0xFF;
            chars[charPos++] = HEX_CHARS[val >>> 4];
            chars[charPos++] = HEX_CHARS[val & 0x0F];

            if (charPos + 1 < chars.length) {
                chars[charPos++] = ':';
            }
        }

        return new String(chars);
    }","Given a byte array, space it out with colons and lowercase each character to match the OpenSSH format.",1,251
1704,"public static Histogram newHistogram(Class<?> klass,
                                               String name,
                                               String scope) {
        return DEFAULT_REGISTRY.newHistogram(klass, name, scope);
    }","Creates a new non-biased  com.yammer.metrics.core.Histogram and registers it under the given class, name, and scope.",1,50
1705,"public long restart(long numId, long ilvl, long val) 
    	throws InvalidOperationException {
    	
    	// Find the abstractNumId
    	
    	// (Ensure maps are initialised)
    	if (em == null ) { 
    		getEmulator();
    	}
    	
    	ListNumberingDefinition existingLnd = instanceListDefinitions.get( Long.toString(numId) );
    	if (existingLnd==null) {
    		throw new InvalidOperationException(""Concrete/instance list "" + numId + "" does not exist"");
    	}
    	
    	return restart(existingLnd.getNumNode(), ilvl, val);
    }","For the given concrete list numId, restart the numbering on the specified level at value val.",1,150
1706,"@SuppressWarnings(""serial"")
	protected IFeedbackPartFactory<VR> getFeedbackPartFactory() {
		IViewer<VR> viewer = getHost().getRoot().getViewer();
		return viewer.getAdapter(
				AdapterKey.get(new TypeToken<IFeedbackPartFactory<VR>>() {
				}.where(new TypeParameter<VR>() {
				}, Types.<VR> argumentOf(viewer.getClass())),
						HOVER_FEEDBACK_PART_FACTORY));
	}",Returns the  IFeedbackPartFactory for hover feedback.,1,117
1707,"public BaseDescr declare( PackageDescrBuilder pkg ) throws RecognitionException {
        BaseDescr declaration = null;
        try {
            DeclareDescrBuilder declare = helper.start( pkg,
                                                        DeclareDescrBuilder.class,
                                                        null );

            // 'declare'
            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.DECLARE,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;
            
            if ( helper.validateIdentifierKey( DroolsSoftKeywords.ENTRY ) ) {
                // entry point declaration
                declaration = entryPointDeclaration( declare );
            } else if( helper.validateIdentifierKey( DroolsSoftKeywords.WINDOW ) ) {
                // window declaration
                declaration = windowDeclaration( declare );
            } else if ( helper.validateIdentifierKey( DroolsSoftKeywords.TRAIT ) ) {
                // trait type declaration
                // 'trait'
                match( input,
                       DRLLexer.ID,
                       DroolsSoftKeywords.TRAIT,
                       null,
                       DroolsEditorType.KEYWORD );
                if ( state.failed ) return null;

                declaration = typeDeclaration( declare, true );
            } else {
                // class type declaration
                declaration = typeDeclaration( declare, false );
            }

        } catch ( RecognitionException re ) {
            reportError( re );
        }
        return declaration;
    }",declare := DECLARE | (ENTRY-POINT) => entryPointDeclaration | (WINDOW) => windowDeclaration | (TRAIT) => typeDeclaration (trait) | typeDeclaration (class),1,349
1708,"public Setter getNameProperty() {
		return namePropertyMethod;
	}",Returns the method or field annotated with  NameProperty @NameProperty.,1,19
1709,"public String[] getIDs() {
        return (unresolvedIDRefs == null) ? null :
            (String[]) unresolvedIDRefs.keySet().toArray(new String[] {});
    }",Get the unresolved idrefs for this page.,1,59
1710,"public static UnderFileSystem create(URI path, AlluxioConfiguration conf) {
      return create(path.toString(), conf);
    }",Creates the  UnderFileSystem instance according to its UFS path.,1,39
1711,"public static String getDateString(final LocalDate self) {
        return self.format(DateTimeFormatter.ISO_LOCAL_DATE);
    }",Formats this date with the  java.time.format.DateTimeFormatter#ISO_LOCAL_DATE formatter.,1,33
1712,"public List<DistributionSetRequestBodyPost> buildAsList(final int count) {
        final ArrayList<DistributionSetRequestBodyPost> bodyList = Lists.newArrayList();
        for (int index = 0; index < count; index++) {
            bodyList.add(doBuild(name + index));
        }

        return bodyList;
    }",Builds a list of multiple  DistributionSetRequestBodyPost to create multiple distribution sets at once.,1,93
1713,"protected String shouldFailWithCause(Class clazz, Closure code) {
        return GroovyAssert.shouldFailWithCause(clazz, code).getMessage();
    }",Asserts that the given code closure fails when it is evaluated and that a particular exception type can be attributed to the cause.,1,39
1714,"public String collectDeviceData() {
        if(mDeviceSessionId == null) {
            mDeviceSessionId = UUID.randomUUID().toString().replace(""-"", """");
            deviceCollector.collect(mDeviceSessionId);
        }

        return ""{\""device_session_id\"": \"""" + mDeviceSessionId
                + ""\"", \""fraud_merchant_id\"": \"""" + mMerchantId + ""\""}"";
    }",Call to get device_data to send to Braintree,1,107
1715,"public String createSelectStatement(String stm, EntityContribution... contributions) throws ProcessingException {
    EntityContribution mergedContribution = new EntityContribution();
    if (contributions != null) {
      for (EntityContribution c : contributions) {
        mergedContribution.add(c);
      }
    }
    String where = StringUtility.trim(getWhereConstraints());
    if (StringUtility.hasText(where)) {
      if (where.toUpperCase().startsWith(""AND"")) {
        where = where.substring(3);
      }
      mergedContribution.getWhereParts().add(where);
    }
    return createEntityPart(stm, false, mergedContribution);
  }",Creates a select statement by merging the given entity contributions with the given base statement.,1,184
1716,"public static CiConstant forBoolean(boolean i) {
        return new CiConstant(CiKind.Boolean, i);
    }",Utility method to create a value type for a boolean constant.,1,34
1717,"@Override
	public String getDefault() {
		return null;
	}",Returns the default value of @odf.attribute chart:visible.,1,22
1718,"public Collection getDecisionPoints(StateMachine stateMachine)
    {
        return getSubvertices(stateMachine, decisionPointsFilter);
    }",Returns a Collection containing the decision points that are model elements in the argument StateMachine.,1,29
1719,"public RegisterValue asValue() {
        return asValue(Kind.Illegal);
    }",Gets this register as a plain RegisterValue value with no particular kind.,1,24
1720,"public static Process execute(final String[] commandArray, final String[] envp, final File dir) throws IOException {
        return Runtime.getRuntime().exec(commandArray, envp, dir);
    }","Executes the command specified by the String array that is the first parameter, with the environment defined by envp and under the working directory dir.",1,63
1721,"public Object caseAction( Action object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Action'.,1,25
1722,"public FromBuilder trace(String category) {
        final Log log = LogFactory.getLog(category);
        return intercept(new DelegateProcessor() {
            @Override
            public void process(Exchange exchange) throws Exception {
                log.trace(exchange);
                processNext(exchange);
            }
        });
    }",Trace logs the exchange before it goes to the next processing step using the specified logging category.,1,91
1723,"public static List getAt(Iterable items, String property) {
        List<Object> answer = new ArrayList<Object>();
        return getAtIterable(items, property, answer);
    }",Support the subscript operator for Iterable.,1,58
1724,"static CirClosure closure(CirCall body, CirVariable parameter) {
        return new CirClosure(body, parameter);
    }",Creates a closure for a block of code with exactly one parameter.,1,35
1725,"protected RDF createRDFTermFactory() {
		return new SimpleRDF();
	}",Create a new  RDF for a parse session.,1,23
1726,"public KaleoInstanceToken remove(long kaleoInstanceTokenId)
		throws NoSuchInstanceTokenException, SystemException {
		return remove(Long.valueOf(kaleoInstanceTokenId));
	}",Removes the kaleo instance token with the primary key from the database.,1,38
1727,"public MapReduceCursor<T> execute() {
        ServerConnectionProvider provider = getSession().createServerConnectionProvider(getServerConnectionProviderOptions());
        CommandResult commandResult = new CommandProtocol(namespace.getDatabaseName(), command, commandCodec, mapReduceResultDecoder,
                                                          getBufferProvider(), provider.getServerDescription(), provider.getConnection(),
                                                          isCloseSession())
                                          .execute();

        return new MapReduceCursor<T>(commandResult);
    }",Executing this will return a cursor with your results and the statistics in.,1,110
1728,"public List<ReaderInterceptor> getReaderInterceptors() {
        return readerInterceptors;
    }",Get all writer interceptors applicable to the  #getResourceMethod() resource method wrapped by this invoker.,1,22
1730,"public static int readFully(Reader in, char[] buffer, int max) throws IOException {
        int off = 0, len = Math.min(max, buffer.length);
        if (len == 0) {
            return 0;
        }
        while (true) {
            int l = len - off;
            if (l <= 0) {
                break;
            }
            l = in.read(buffer, off, l);
            if (l < 0) {
                break;
            }
            off += l;
        }
        return off <= 0 ? -1 : off;
    }",Try to read the given number of characters to the buffer.,1,199
1731,"public boolean flush() {
		if (!dirty)
			return true;

		final long timer = OProfiler.getInstance().startChrono();

		// FORCE THE WRITE OF THE BUFFER
		for (int i = 0; i < FORCE_RETRY; ++i) {
			try {
				buffer.force();
				dirty = false;
				break;
			} catch (Exception e) {
				OLogManager.instance().debug(this, ""Cannot write memory buffer to disk. Retrying ("" + (i + 1) + ""/"" + FORCE_RETRY + "")..."");
				OMemoryWatchDog.freeMemory(FORCE_DELAY);
			}
		}

		if (dirty)
			OLogManager.instance().debug(this, ""Cannot commit memory buffer to disk after %d retries"", FORCE_RETRY);
		else
			OProfiler.getInstance().updateCounter(""OMMapManager.pagesCommitted"", 1);

		OProfiler.getInstance().stopChrono(""OMMapManager.commitPages"", timer);

		return !dirty;
	}",Flushes the memory mapped buffer to disk only if it's dirty.,1,253
1732,"protected IndexedReadOnlyStringMap getStringMap() {
        return map;
    }",Returns the IndexedStringMap with  List values that this MapFilter was constructed with.,1,19
1733,"protected SWTBotRootMenu contextMenu(final Control control) throws WidgetNotFoundException {
		ContextMenuHelper.notifyMenuDetect(control, widget);

		WaitForObjectCondition<Menu> waitForMenu = Conditions.waitForPopupMenu(control);
		new SWTBot().waitUntil(waitForMenu);
		return new SWTBotRootMenu(waitForMenu.get(0));
	}",Gets the context menu of the given control.,1,82
1734,"public ArrayList<KLayouterInfo> getEnabledLayouterInfos() {

		ArrayList<KLayouterInfo> enabledLayouterInfos = new ArrayList<KLayouterInfo>();

		for (KimlAbstractLayoutProvider layoutProvider : layoutProviderMap
				.values()) {
			if (layoutProvider.isEnabled()) {
				KLayouterInfo info = layoutProvider.getLayouterInfo();
				if (!enabledLayouterInfos.contains(info)) {
					enabledLayouterInfos.add(info);

				}
			}
		}
		return enabledLayouterInfos;
	}","Returns a non null, possibly empty list of  KLayouterInfos for all the enabled layout providers.",1,126
1735,"public static String padLeft(CharSequence self, Number numberOfChars, CharSequence padding) {
        String s = self.toString();
        int numChars = numberOfChars.intValue();
        if (numChars <= s.length()) {
            return s;
        } else {
            return getPadding(padding.toString(), numChars - s.length()) + s;
        }
    }","Pad a CharSequence to a minimum length specified by numberOfChars, adding the supplied padding CharSequence as many times as needed to the left.",1,118
1736,"public static String validatePath(String path, AlluxioConfiguration alluxioConf)
      throws IOException {
    if (path.startsWith(Constants.HEADER)) {
      if (!path.contains("":"")) {
        throw new IOException(""Invalid Path: "" + path + "". Use "" + Constants.HEADER
            + ""host:port/ , or /file"");
      } else {
        return path;
      }
    } else {
      String hostname = NetworkAddressUtils.getConnectHost(ServiceType.MASTER_RPC, alluxioConf);
      int port = alluxioConf.getInt(PropertyKey.MASTER_RPC_PORT);
      return PathUtils.concatPath(Constants.HEADER + hostname + "":"" + port, path);
    }
  }","Validates the path, verifying that it contains the  Constants#HEADER and a hostname:port specified.",1,190
1737,"public static Throwable getRootCause(Throwable throwable) {
        List list = getThrowableList(throwable);
        return (list.size() < 2 ? null : (Throwable)list.get(list.size() - 1));
    }","Introspects the Throwable to obtain the root cause. This method walks through the exception chain to the last element, ""root"" of the tree, using  #getCause(Throwable), and returns that exception. From version 2.2, this method handles recursive cause structures that might otherwise cause infinite loops.",1,71
1738,"public String jsxGet_readyState() {
        final DomNode node = getDomNodeOrDie();
        if (node instanceof HtmlPage) {
            return ((HtmlPage) node).getDocumentElement().getReadyState();
        }
        else {
            return node.getReadyState();
        }
    }",Returns the ready state of the document.,1,81
1739,"public Collection<Probe> getProbesAtLine(LineLocation line) {
        Collection<Probe> probeList = lineToProbesMap.get(line);

        if (probeList == null) {
            return Collections.emptyList();
        }
        return probeList;
    }","Returns a collection of  Probes whose associated source begins at the given  LineLocation, an empty list if none.",1,71
1740,"public Object caseActionValue( ActionValue object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Action Value'.,1,25
1741,"public static Collection flatten(double[] self) {
        return flatten(toList(self), new ArrayList());
    }",Flatten an array.,1,39
1742,"public List<String> getBodies() {
        synchronized (bodies) {
            return Collections.unmodifiableList(new ArrayList<String>(bodies));
        }
    }",Returns a List of the bodies in the packet.,1,47
1743,"public StringBuilder getSQL(StringBuilder builder) {
        builder.append(""OVER ("");
        if (partitionBy != null) {
            builder.append(""PARTITION BY "");
            for (int i = 0; i < partitionBy.size(); i++) {
                if (i > 0) {
                    builder.append("", "");
                }
                partitionBy.get(i).getUnenclosedSQL(builder);
            }
        }
        appendOrderBy(builder, orderBy);
        if (frame != null) {
            if (builder.charAt(builder.length() - 1) != '(') {
                builder.append(' ');
            }
            frame.getSQL(builder);
        }
        return builder.append(')');
    }",Appends SQL representation to the specified builder.,1,216
1744,"public WorkflowBundle getDataflow() {
		return worflowBundle;
	}",Return the WorkflowBundle that is open.,1,19
1745,"public static BlockInStream create(FileSystemContext context, long blockId, long blockSize,
      WorkerNetAddress address, BlockInStreamSource blockSource,
      Protocol.OpenUfsBlockOptions openUfsBlockOptions, InStreamOptions options)
          throws IOException {
    if (Configuration.getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED)
        && !NettyUtils.isDomainSocketSupported(address)
        && blockSource == BlockInStreamSource.LOCAL) {
      try {
        LOG.debug(""Creating short circuit input stream for block {} @ {}"", blockId, address);
        return createLocalBlockInStream(context, address, blockId, blockSize, options);
      } catch (NotFoundException e) {
        // Failed to do short circuit read because the block is not available in Alluxio.
        // We will try to read from UFS via netty. So this exception is ignored.
        LOG.warn(""Failed to create short circuit input stream for block {} @ {}"", blockId, address);
      }
    }
    Protocol.ReadRequest.Builder builder = Protocol.ReadRequest.newBuilder().setBlockId(blockId)
        .setPromote(options.getAlluxioStorageType().isPromote());
    if (openUfsBlockOptions != null) {
      builder.setOpenUfsBlockOptions(openUfsBlockOptions);
    }

    LOG.debug(""Creating netty input stream for block {} @ {} from client {}"", blockId, address,
        NetworkAddressUtils.getClientHostName());
    return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),
        blockSize, options);
  }",Creates an  BlockInStream that reads from a local block.,1,304
1746,"public static  <T> Codec<T> getCodec(Class<T> targetType){
        return getCodec(targetType, null);
    }",Get an  Codec converting to and from the given target type.,1,39
1747,"public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the last index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex will return  #INDEX_NOT_FOUND (-1).,1,172
1748,"public static Indent logAndIndent(String msg, Object... args) {
        if (ENABLED) {
            DebugScope scope = DebugScope.getInstance();
            scope.log(msg, args);
            return scope.pushIndentLogger();
        }
        return noLoggerInstance;
    }",A convenience function which combines  #log and  #indent().,1,80
1749,"public boolean contains(long sequence) {
		return findInterval(sequence) >= 0;
	}",Return whether or not the interval collection contains the given sequence number.,1,30
1750,"static public XModelCommand createForcedUndoCommand(XModelEvent event) {
		
		if(event.getChangeType() == ChangeType.REMOVE) {
			
			return MemoryModelCommand.createAddCommand(event.getTarget(), XCommand.FORCED,
			        event.getObjectId());
			
		} else {
			
			assert event.getChangeType() == ChangeType.ADD : ""unexpected change type for model events: ""
			        + event.getChangeType();
			
			return MemoryModelCommand.createRemoveCommand(event.getTarget(), XCommand.FORCED,
			        event.getObjectId());
			
		}
		
	}",Create a forced  XModelCommand that undoes the given  XModelEvent.,1,149
1751,"public final Control getButtonApply() {
		return (Control) getUIControl(BIND_ID_APPLY);
	}",Return the 'Apply' control.,1,28
1752,"public int getCacheSize()
    {
        return (int) Math.min( Integer.MAX_VALUE, getLongCacheSize() );
    }",Returns the size of the cache contents in bytes limited to integer size.,1,38
1753,"public ITmfTrace getTrace() {
        return fTrace;
    }",Get the entry's trace,1,19
1754,"public static String format(long startMillis, long endMillis, String format, boolean padWithZeros, TimeZone timezone) {

        long millis = endMillis - startMillis;
        if(millis < 28 * DateUtils.MILLIS_PER_DAY) {
            return format(millis, format, padWithZeros, timezone);
        }

        Token[] tokens = lexx(format);

        // timezones get funky around 0, so normalizing everything to GMT 
        // stops the hours being off
        Calendar start = Calendar.getInstance(timezone);
        start.setTimeInMillis(startMillis);
        Calendar end = Calendar.getInstance(timezone);
        end.setTimeInMillis(endMillis);

        // initial estimates
        int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);
        int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);
        // each initial estimate is adjusted in case it is under 0
        while(months < 0) {
            months += 12;
            years -= 1;
        }
        int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);
        while(days < 0) {
            days += 31;  // such overshooting is taken care of later on
            days -= 1;
        }
        int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);
        while(hours < 0) {
            hours += 24;
            days -= 1;
        }
        int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);
        while(minutes < 0) {
            minutes += 60;
            hours -= 1;
        }
        int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);
        while(seconds < 0) {
            seconds += 60;
            minutes -= 1;
        }
        int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);
        while(milliseconds < 0) {
            milliseconds += 1000;
            seconds -= 1;
        }

        // take estimates off of end to see if we can equal start, when it overshoots recalculate
        milliseconds -= reduceAndCorrect( start, end, Calendar.MILLISECOND, milliseconds );
        seconds -= reduceAndCorrect( start, end, Calendar.SECOND, seconds );
        minutes -= reduceAndCorrect( start, end, Calendar.MINUTE, minutes );
        hours -= reduceAndCorrect( start, end, Calendar.HOUR_OF_DAY, hours );
        days -= reduceAndCorrect( start, end, Calendar.DAY_OF_MONTH, days );
        months -= reduceAndCorrect( start, end, Calendar.MONTH, months );
        years -= reduceAndCorrect( start, end, Calendar.YEAR, years );

        return formatDuration(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);
    }","Get the time gap as a string, using the specified format.",1,779
1755,"public EvictionPlan freeSpace(long bytesToBeAvailable, BlockStoreLocation location)
      throws IOException {
    List<Pair<Long, BlockStoreLocation>> toMove = new ArrayList<Pair<Long, BlockStoreLocation>>();
    List<Long> toEvict = new ArrayList<Long>();
    EvictionPlan plan = new EvictionPlan(toMove, toEvict);
    StorageDir candidateDir = cascadingEvict(bytesToBeAvailable, location, plan);

    if (candidateDir == null) {
      return null;
    }
    if (plan.isEmpty()) {
      return plan;
    }

    // TODO: remove this check after implementation of metadata view
    // assure all blocks are in the store, if not, remove from plan and lru cache
    Iterator<Pair<Long, BlockStoreLocation>> moveIt = plan.toMove().iterator();
    while (moveIt.hasNext()) {
      long id = moveIt.next().getFirst();
      if (!mMetaManager.hasBlockMeta(id)) {
        mLRUCache.remove(id);
        moveIt.remove();
      }
    }
    Iterator<Long> evictIt = plan.toEvict().iterator();
    while (evictIt.hasNext()) {
      long id = evictIt.next();
      if (!mMetaManager.hasBlockMeta(id)) {
        mLRUCache.remove(id);
        evictIt.remove();
      }
    }

    return EvictorUtils.validCascadingPlan(bytesToBeAvailable, plan, mMetaManager) ? plan : null;
  }",A recursive implementation of cascading LRU eviction.,1,376
1756,"byte[] checkSplit() {
    this.lock.readLock().lock();
    try {
      boolean force = this.region.shouldForceSplit();
      // sanity checks
      if (this.storefiles.isEmpty()) {
        return null;
      }
      if (!force && storeSize < this.desiredMaxFileSize) {
        return null;
      }

      if (this.region.getRegionInfo().isMetaRegion()) {
        if (force) {
          LOG.warn(""Cannot split meta regions in HBase 0.20"");
        }
        return null;
      }

      // Not splitable if we find a reference store file present in the store.
      boolean splitable = true;
      long maxSize = 0L;
      StoreFile largestSf = null;
      for (StoreFile sf : storefiles) {
        if (splitable) {
          splitable = !sf.isReference();
          if (!splitable) {
            // RETURN IN MIDDLE OF FUNCTION!!! If not splitable, just return.
            if (LOG.isDebugEnabled()) {
              LOG.debug(sf +  "" is not splittable"");
            }
            return null;
          }
        }
        StoreFile.Reader r = sf.getReader();
        if (r == null) {
          LOG.warn(""Storefile "" + sf + "" Reader is null"");
          continue;
        }
        long size = r.length();
        if (size > maxSize) {
          // This is the largest one so far
          maxSize = size;
          largestSf = sf;
        }
      }
      // if the user explicit set a split point, use that
      if (this.region.getSplitPoint() != null) {
        return this.region.getSplitPoint();
      }
      StoreFile.Reader r = largestSf.getReader();
      if (r == null) {
        LOG.warn(""Storefile "" + largestSf + "" Reader is null"");
        return null;
      }
      // Get first, last, and mid keys.  Midkey is the key that starts block
      // in middle of hfile.  Has column and timestamp.  Need to return just
      // the row we want to split on as midkey.
      byte [] midkey = r.midkey();
      if (midkey != null) {
        KeyValue mk = KeyValue.createKeyValueFromKey(midkey, 0, midkey.length);
        byte [] fk = r.getFirstKey();
        KeyValue firstKey = KeyValue.createKeyValueFromKey(fk, 0, fk.length);
        byte [] lk = r.getLastKey();
        KeyValue lastKey = KeyValue.createKeyValueFromKey(lk, 0, lk.length);
        // if the midkey is the same as the first and last keys, then we cannot
        // (ever) split this region.
        if (this.comparator.compareRows(mk, firstKey) == 0 &&
            this.comparator.compareRows(mk, lastKey) == 0) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""cannot split because midkey is the same as first or "" +
              ""last row"");
          }
          return null;
        }
        return mk.getRow();
      }
    } catch(IOException e) {
      LOG.warn(""Failed getting store size for "" + this.storeNameStr, e);
    } finally {
      this.lock.readLock().unlock();
    }
    return null;
  }",Determines if Store should be split,1,805
1757,"private Set<User> getCoordinators(SignupMeeting meeting) {
		Set<User> users = new HashSet<User>();
		List<String> ids = meeting.getCoordinatorIdsList();
		for (String coordinator : ids) {
			users.add(sakaiFacade.getUserQuietly(coordinator));
		}
		return users;
	}",Helper to get a set of Users who are coordinates for a given meeting meeting.coordinatorIds.map(userDirectoryService.getUser),1,94
1758,"private int calcTextHeight(String string) {
        return font.getHeight(string);
    }",Calculate the height of the given string.,1,27
1759,"public List<SoftwareModuleTypeRequestBodyPost> build() {
        return Lists.newArrayList(doBuild(key, name));
    }",Builds a list with a single entry of  SoftwareModuleTypeRequestBodyPost which can directly be used in the RESTful-API.,1,33
1760,"@Override
    public Cartesian3D parse(final String source) throws MathParseException {
        ParsePosition parsePosition = new ParsePosition(0);
        Cartesian3D result = parse(source, parsePosition);
        if (parsePosition.getIndex() == 0) {
            throw new MathParseException(source,
                                         parsePosition.getErrorIndex(),
                                         Cartesian3D.class);
        }
        return result;
    }",Parses a string to produce a  Cartesian3D object.,1,108
1761,"public String getReference() {
    	if (_definedNameRec.isFunctionName()) {
    		throw new IllegalStateException(""Only applicable to named ranges"");
    	}
        return _definedNameRec.getAreaReference(_book);
    }",Note - this method only applies to named ranges,1,53
1762,"public static UriComponentsBuilder fromController(UriComponentsBuilder builder, Class<?> controllerType) {
		if (builder != null) {
			builder = (UriComponentsBuilder) builder.clone();
		}
		else {
			builder = ServletUriComponentsBuilder.fromCurrentServletMapping();
		}
		String mapping = getTypeRequestMapping(controllerType);
		return builder.path(mapping);
	}",An alternative to  #fromController(Class) that accepts a  UriComponentsBuilder representing the base URL.,1,103
1763,"public boolean isDirectoryTrace(String path) {
        final Iterable<TraceTypeHelper> traceTypeHelpers = getTraceTypeHelpers();
        for (TraceTypeHelper traceTypeHelper : traceTypeHelpers) {
            if (traceTypeHelper.isDirectoryTraceType() &&
                    traceTypeHelper.validate(path)) {
                return true;
            }
        }
        return false;
    }",Checks if a trace is a valid directory trace,1,90
1764,"public BaseDescr declare( PackageDescrBuilder pkg ) throws RecognitionException {
        BaseDescr declaration = null;
        try {
            DeclareDescrBuilder declare = helper.start( pkg,
                                                        DeclareDescrBuilder.class,
                                                        null );

            // 'declare'
            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.DECLARE,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;
            
            if( helper.validateIdentifierKey( DroolsSoftKeywords.ENTRY ) ) {
                // entry point declaration
            } else {
                // type declaration
                declaration = typeDeclaration( declare );
            }

        } catch ( RecognitionException re ) {
            reportError( re );
        }
        return declaration;
    }",declare := DECLARE | (ENTRY-POINT) => entryPointDeclaration | typeDeclaration,1,199
1765,"static HAProxyMessage decodeHeader(String header) {
        if (header == null) {
            throw new HAProxyProtocolException(""header"");
        }

        String[] parts = StringUtil.split(header, ' ');
        int numParts = parts.length;

        if (numParts < 2) {
            throw new HAProxyProtocolException(
                    ""invalid header: "" + header + "" (expected: 'PROXY' and proxied protocol values)"");
        }

        if (!""PROXY"".equals(parts[0])) {
            throw new HAProxyProtocolException(""unknown identifier: "" + parts[0]);
        }

        HAProxyProxiedProtocol protAndFam;
        try {
            protAndFam = HAProxyProxiedProtocol.valueOf(parts[1]);
        } catch (IllegalArgumentException e) {
            throw new HAProxyProtocolException(e);
        }

        if (protAndFam != HAProxyProxiedProtocol.TCP4 &&
                protAndFam != HAProxyProxiedProtocol.TCP6 &&
                protAndFam != HAProxyProxiedProtocol.UNKNOWN) {
            throw new HAProxyProtocolException(""unsupported v1 proxied protocol: "" + parts[1]);
        }

        if (protAndFam == HAProxyProxiedProtocol.UNKNOWN) {
            return V1_UNKNOWN_MSG;
        }

        if (numParts != 6) {
            throw new HAProxyProtocolException(""invalid TCP4/6 header: "" + header + "" (expected: 6 parts)"");
        }

        return new HAProxyMessage(
                HAProxyProtocolVersion.V1, HAProxyCommand.PROXY,
                protAndFam, parts[2], parts[3], parts[4], parts[5]);
    }","Decodes a version 1, human-readable proxy protocol header.",1,402
1766,"public static byte[] serialize(Object obj, DataHandler dataHandler) {
        try {
            JavaObjectSerializer handlerSerializer = null;
            if (dataHandler != null) {
                handlerSerializer = dataHandler.getJavaObjectSerializer();
            }
            if (handlerSerializer != null) {
                return handlerSerializer.serialize(obj);
            }
            if (serializer != null) {
                return serializer.serialize(obj);
            }
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            ObjectOutputStream os = new ObjectOutputStream(out);
            os.writeObject(obj);
            return out.toByteArray();
        } catch (Throwable e) {
            throw DbException.get(ErrorCode.SERIALIZATION_FAILED_1, e, e.toString());
        }
    }","Serialize the object to a byte array, using the serializer specified by the connection info if set, or the default serializer.",1,212
1767,"public ISkinImage getIcon() {
        return icon;
    }",Gets the icon.,1,19
1768,"public String getStringFormat( )
	{
		Object value = getProperty( Style.STRING_FORMAT_PROP );
		if ( value == null )
			return null;

		assert value instanceof StringFormatValue;

		return ( (StringFormatValue) value ).getPattern( );
	}",Returns the pattern of a string format.,1,83
1769,"public int getScanMode() {
        try {
            return mService.getScanMode();
        } catch (RemoteException e) {Log.e(TAG, """", e);}
        return SCAN_MODE_NONE;
    }",Get the current Bluetooth scan mode of the local Bluetooth adaper.,1,62
1770,"private String lookup(String base) {
    return lookupRecursively(base, new HashMap<String, String>());
  }",Lookup key names to handle $key stuff.,1,38
1771,"public Value convert(Value v) {
        try {
            return v.convertTo(type, null, this);
        } catch (DbException e) {
            if (e.getErrorCode() == ErrorCode.DATA_CONVERSION_ERROR_1) {
                e = getDataConversionError(v, e);
            }
            throw e;
        }
    }",Convert a value to this column's type without precision and scale checks.,1,97
1772,"private boolean isValidWebApk(Intent intent) {
        if (!ChromeWebApkHost.isEnabled()) return false;

        String webApkPackage = IntentUtils.safeGetStringExtra(intent,
                ShortcutHelper.EXTRA_WEBAPK_PACKAGE_NAME);
        if (TextUtils.isEmpty(webApkPackage)) return false;

        String url = IntentUtils.safeGetStringExtra(intent, ShortcutHelper.EXTRA_URL);
        if (TextUtils.isEmpty(url)) return false;

        if (!webApkPackage.equals(WebApkValidator.queryWebApkPackage(this, url))) {
            Log.d(TAG, ""%s is not within scope of %s WebAPK"", url, webApkPackage);
            return false;
        }
        return true;
    }",Checks whether the WebAPK package specified in the intent is a valid WebAPK and whether the url specified in the intent can be fulfilled by the WebAPK.,1,169
1773,"public T getInstance(String screenName, String password) {
        return getInstance(new BasicAuthorization(screenName, password));
    }",Returns a Basic Authenticated instance.,1,38
1774,"protected ViewportPolicy determineViewportPolicy() {
		return getHost().getRoot().getAdapter(ViewportPolicy.class);
	}",Returns the  ViewportPolicy that is to be used for changing the viewport.,1,32
1775,"public synchronized ClientDependencyInfo getClientDependencyInfo(int depId) throws IOException {
    return mMasterClient.getClientDependencyInfo(depId);
  }",Get a ClientDependencyInfo by the dependency id,1,33
1776,"public double getContainerCpuHint(Map<String, List<String>> packing) {
    double defaultInstanceCpu = Double.parseDouble(
        context.getProperty(INSTANCE_CPU_DEFAULT, ""1.0""));
    List<TopologyAPI.Config.KeyValue> topologyConfig = topology.getTopologyConfig().getKvsList();
    double totalInstanceCpu = defaultInstanceCpu * TopologyUtility.getTotalInstance(topology);
    // TODO(nbhagat): Add 1 more cpu for metrics manager also.
    // TODO(nbhagat): Use max cpu here. To get max use packing information.
    float defaultContainerCpu =
        (float) (1 + totalInstanceCpu / TopologyUtility.getNumContainer(topology));
    return Double.parseDouble(TopologyUtility.getConfigWithDefault(
        topologyConfig, Config.TOPOLOGY_CONTAINER_CPU_REQUESTED, defaultContainerCpu + """"));
  }",Provide cpu per aurora container.,1,163
1777,"public static boolean getBooleanProperty(String property, boolean defaultValue)
    {
        if (properties == null)
        {
            loadConfig(null);
        }

        String stringValue = properties.getProperty(property);

        if (stringValue != null)
        {
            return  stringValue.equalsIgnoreCase(""true"") ||
                    stringValue.equalsIgnoreCase(""yes"");
            }
        else
            return defaultValue;
    }","Get a configuration property as a boolean, with default.",1,119
1778,"public static boolean isAnnotated(AnnotatedElement element, final String annotationName) {
		Assert.notNull(element, ""AnnotatedElement must not be null"");
		Assert.hasText(annotationName, ""annotationName must not be null or empty"");

		return Boolean.TRUE.equals(searchWithGetSemantics(element, annotationName, new SimpleAnnotationProcessor<Boolean>() {
			@Override
			public Boolean process(AnnotatedElement annotatedElement, Annotation annotation, int metaDepth) {
				boolean found = annotation.annotationType().getName().equals(annotationName);
				return (found ? Boolean.TRUE : CONTINUE);
			}
		}));
	}",Determine if an annotation of the specified  annotationName is present on the supplied  AnnotatedElement or within the annotation hierarchy above the specified element.,1,159
1779,"public static boolean containsNone(CharSequence cs, String invalidChars) {
        if (cs == null || invalidChars == null) {
            return true;
        }
        return containsNone(cs, invalidChars.toCharArray());
    }",Checks that the CharSequence does not contain certain characters. A null CharSequence will return true.,1,72
1780,"public Delegator getDelegator() {
        return dispatcher.getDelegator();
    }",Gets the Delegator associated with this context/dispatcher,1,23
1781,"protected CoreContainer initMultiCore(FilterConfig config) throws Exception {
    CoreContainer mcore = new CoreContainer();
    String instanceDir = SolrResourceLoader.locateInstanceDir();
    File fconf = new File(instanceDir, ""solr.xml"");
    log.info(""looking for solr.xml: "" + fconf.getAbsolutePath());
    if (fconf.exists()) {
      mcore.load(instanceDir, fconf);
    }
    return mcore;
  }",Initialize the cores instance.,1,121
1782,"private boolean isIgnoredSetterParam(DetailAST ast, String name)
    {
        if (ast.getType() == TokenTypes.PARAMETER_DEF && ignoreSetter) {
            final DetailAST parametersAST = ast.getParent();
            final DetailAST methodAST = parametersAST.getParent();
            if (parametersAST.getChildCount() == 1
                && methodAST.getType() == TokenTypes.METHOD_DEF
                && isSetterMethod(methodAST, name))
            {
                return true;
            }
        }
        return false;
    }","Decides whether to ignore an AST node that is the parameter of a setter method, where the property setter method for field 'xyz' has name 'setXyz', one parameter named 'xyz', and return type void (default behavior) or return type is name of the class in which such method is declared (allowed only if  #setSetterCanReturnItsClass(boolean) is called with value true)",1,145
1783,"public static int indexOfAny(CharSequence cs, String searchChars) {
        if (isEmpty(cs) || isEmpty(searchChars)) {
            return -1;
        }
        return indexOfAny(cs, searchChars.toCharArray());
    }",Search a CharSequence to find the first index of any character in the given set of characters. A null String will return -1.,1,69
1784,"public static Map<String, String> getImmutableContext() {
        final Map<String, String> map = contextMap.getImmutableMapOrNull();
        return map == null ? EMPTY_MAP : map;
    }",Returns an immutable view of the current thread's context Map.,1,62
1785,"private Action getActionStepFMC() {
		if (actionStepFMC != null) return actionStepFMC;
		actionStepFMC = new Action() {
			public void run() {
				//only update if first step in execution
				boolean mustUpdate = (KIEMInstance.execution == null);
				if ((currentMaster != null) 
					&& currentMaster.isMasterImplementingGUI()) {
					// unsupported
				}
				else {
					//otherwise default implementation
					if (KIEMInstance.initExecution()) {
						KIEMInstance.execution.stepExecutionPause(
								KIEMInstance.execution.getMaximumSteps());
					}
				}
				if (mustUpdate)
					updateView(true);
			}
		};
		actionStepFMC.setText(Messages.ActionStepFMC);
		actionStepFMC.setToolTipText(Messages.ActionHintStepFMC);
		actionStepFMC.setImageDescriptor(KiemIcons.IMGDESCR_STEP);
		actionStepFMC.setDisabledImageDescriptor(KiemIcons.IMGDESCR_STEP_DISABLED);
		return actionStepFMC;
	}",Gets the action step forward to the most current step.,1,226
1786,"protected List<Metric> serializeSingleValue(String name, Number value, String... path) {
    List<Metric> metrics = new ArrayList<Metric>();
    metrics.add(serializeValue(name, value, path));
    return metrics;
  }",Convert single value into list of Metrics.,1,76
1787,"public static SimpleFeature reType(SimpleFeatureType featureType, SimpleFeature feature)
            throws IllegalAttributeException {
        SimpleFeatureType origional = feature.getFeatureType();

        if (featureType.equals(origional)) {
            return SimpleFeatureBuilder.copy(feature);
        }

        String id = feature.getID();
        int numAtts = featureType.getAttributeCount();
        Object[] attributes = new Object[numAtts];
        String xpath;

        for (int i = 0; i < numAtts; i++) {
            AttributeDescriptor curAttType = featureType.getDescriptor(i);
            xpath = curAttType.getLocalName();
            attributes[i] = duplicate(feature.getAttribute(xpath));
        }

        return SimpleFeatureBuilder.build(featureType, attributes, id);
    }",Creates duplicate of feature adjusted to the provided featureType.,1,218
1788,"public RawLogTriplet newPublication(final String channel, final int sessionId, final int streamId, final long correlationId)
    {
        return newInstance(publicationsDir, channel, sessionId, streamId, correlationId, publicationTermBufferLength);
    }",Create new  RawLogTriplet in the publications directory for the supplied triplet.,1,64
1789,"public static String md5(CharSequence self) throws NoSuchAlgorithmException {
        return digest(self, MD5);
    }",Calculate md5 of the CharSequence instance,1,34
1790,"public static String getTimeString(final ZonedDateTime self) {
        return self.format(DateTimeFormatter.ISO_LOCAL_TIME) + self.format(ZONE_SHORT_FORMATTER);
    }","Formats this date/time with the  java.time.format.DateTimeFormatter#ISO_LOCAL_TIME formatter and appends the zone's short name, e.g.",1,42
1791,"public static AccountInfo adaptAccountInfo(ANXAccountInfo anxAccountInfo) {

    // Adapt to XChange DTOs
    AccountInfo accountInfo = new AccountInfo(anxAccountInfo.getLogin(), percentToFactor(anxAccountInfo.getTradeFee()),
        ANXAdapters.adaptWallet(anxAccountInfo.getWallets()));
    return accountInfo;
  }",Adapts a ANXAccountInfo to an AccountInfo,1,70
1792,"public static String getWin32ErrorMessage(Throwable e) {
        String msg = e.getMessage();
        if(msg==null) {
            if(e.getCause()!=null)
                return getWin32ErrorMessage(e.getCause());
            return null; // no message
        }
        Matcher m = errorCodeParser.matcher(msg);
        if(!m.matches())
            return null; // failed to parse

        try {
            ResourceBundle rb = ResourceBundle.getBundle(""/hudson/win32errors"");
            return rb.getString(""error""+m.group(1));
        } catch (Exception _) {
            // silently recover from resource related failures
            return null;
        }
    }",Extracts the Win32 error message from  Throwable if possible.,1,182
1793,"private Statement withClassRules(Statement statement) {
		List<TestRule> classRules= classRules();
		return classRules.isEmpty() ? statement :
		    new RunRules(statement, classRules, getDescription());
	}",Returns a  Statement: apply all static  Value fields annotated with  ClassRule.,1,62
1794,"public static BlockInStream create(FileSystemContext context, long blockId, long blockSize,
      WorkerNetAddress address, BlockInStreamSource blockSource,
      Protocol.OpenUfsBlockOptions openUfsBlockOptions, InStreamOptions options)
          throws IOException {
    if (Configuration.getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED)
        && !NettyUtils.isDomainSocketSupported(address)
        && blockSource == BlockInStreamSource.LOCAL) {
      try {
        LOG.debug(""Creating short circuit input stream for block {} @ {}"", blockId, address);
        return createLocalBlockInStream(context, address, blockId, blockSize, options);
      } catch (NotFoundException e) {
        // Failed to do short circuit read because the block is not available in Alluxio.
        // We will try to read from UFS via netty. So this exception is ignored.
        LOG.warn(""Failed to create short circuit input stream for block {} @ {}"", blockId, address);
      }
    }
    Protocol.ReadRequest.Builder builder = Protocol.ReadRequest.newBuilder().setBlockId(blockId)
        .setPromote(options.getAlluxioStorageType().isPromote());
    if (openUfsBlockOptions != null) {
      builder.setOpenUfsBlockOptions(openUfsBlockOptions);
    }

    LOG.debug(""Creating netty input stream for block {} @ {} from client {}"", blockId, address,
        NetworkAddressUtils.getClientHostName());
    return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),
        blockSize, options);
  }",Creates an  BlockInStream that reads from a local block.,1,304
1795,"public static RPCBlockResponse createErrorResponse(final RPCBlockRequest request,
      final Status status) {
    Preconditions.checkArgument(status != Status.SUCCESS);
    // The response has no payload, so length must be 0.
    return new RPCBlockResponse(request.getBlockId(), request.getOffset(), 0, null, status);
  }",Creates a  RPCBlockResponse object that indicates an error for the given  RPCBlockRequest.,1,78
1796,"public default GraphTraversalSource traversal() {
        return new GraphTraversalSource(this);
    }",Generate a reusable  GraphTraversalSource instance.,1,26
1797,"private static boolean matchWildcard(String name, String pattern) {
        // we have wildcard support in that hence you can match with: file* to match any file endpoints
        if (pattern.endsWith(""*"")) {
            String text = pattern.substring(0, pattern.length() - 1);
            return name.toLowerCase(Locale.ENGLISH).startsWith(text.toLowerCase(Locale.ENGLISH));
        }
        return false;
    }",Matches the name with the given pattern (case insensitive).,1,102
1798,"public Argument setDescription(String description) {
    Objects.requireNonNull(description);
    this.description = description;
    return this;
  }",Sets the description of the  Argument.,1,41
1799,"public WSRPProducer remove(long wsrpProducerId)
		throws NoSuchProducerException, SystemException {
		return remove(Long.valueOf(wsrpProducerId));
	}",Removes the w s r p producer with the primary key from the database.,1,38
1800,"public boolean isShowing() {

		if (mToastView != null) {

			return mToastView.isShown();

		}

		else {

			return false;

		}

	}",Returns true if the SuperCardToast is showing.,1,61
1801,"public boolean isShowing() {

		if (mToastView != null) {

			return mToastView.isShown();

		}

		else {

			return false;

		}

	}",Returns true if the SuperToast is showing.,1,61
1802,"public IRI getNode(){
        return (IRI)graphNode.getNode();
    }",Getter for the IRI representing the ID of this Representation.,1,25
1803,"public static int lastIndexOf(CharSequence seq, CharSequence searchSeq) {
        if (seq == null || searchSeq == null) {
            return INDEX_NOT_FOUND;
        }
        return StringUtils.lastIndexOfSequence(seq, searchSeq, seq.length());
    }","Finds the last index within a CharSequence, handling  null.",1,77
1804,"public Timer newTimer(Class<?> klass,
                                String name,
                                String scope) {
        return newTimer(klass, name, scope, TimeUnit.MILLISECONDS, TimeUnit.SECONDS);
    }","Creates a new  Timer and registers it under the given class, name, and scope, measuring elapsed time in milliseconds and invocations per second.",1,56
1805,"public String toJson() {
        return toJson(JsonWriterSettings.builder().outputMode(JsonMode.RELAXED).build());
    }","Gets a JSON representation of this document using the  org.bson.json.JsonMode#RELAXED output mode, and otherwise the default settings of  JsonWriterSettings.Builder and  DocumentCodec.",1,37
1806,"public static Process execute(final List<String> commands, final List<String> envp, final File dir) throws IOException {
        return Runtime.getRuntime().exec((String[]) (commands == null ? null : commands.toArray()),
                (String[]) (envp == null ? null : envp.toArray()), dir);
    }","Executes the command specified by the list of strings given as the first parameter, with the environment defined by envp and under the working directory dir.",1,116
1807,"public Optional<Column> resolve(final LogicalSchema schema, final KsqlConfig ksqlConfig) {
    if (shouldUseLegacy(ksqlConfig)) {
      return legacyKeyField
          .map(f -> Column.of(f.name, f.type));
    }

    return resolveLatest(schema);
  }",Resolve this  KeyField to the specific key  Column to use.,1,83
1808,"List<RandomAccessFile> openInputFileAsZip(String fileName) throws IOException {
        /*
         * Try it as a zip file.
         */
        ZipFile zipFile;
        try {
            zipFile = new ZipFile(fileName);
        } catch (FileNotFoundException fnfe) {
            /* not found, no point in retrying as non-zip */
            System.err.println(""Unable to open '"" + fileName + ""': "" +
                fnfe.getMessage());
            throw fnfe;
        } catch (ZipException ze) {
            /* not a zip */
            return null;
        }

        List<RandomAccessFile> result = new ArrayList<RandomAccessFile>();
        try {
            int classesDexNumber = 1;
            while (true) {
                result.add(openClassesDexZipFileEntry(zipFile, classesDexNumber));
                classesDexNumber++;
            }
        } catch (IOException ioe) {
            // We didn't find any of the expected dex files in the zip.
            if (result.isEmpty()) {
                throw ioe;
            }
            return result;
        }
    }",Tries to open an input file as a Zip archive (jar/apk) with dex files inside.,1,243
1809,"private static InternalMessage transformAbandonRequest( LdapMessageCodec codecMessage, int messageId )
    {
        AbandonRequestImpl internalMessage = new AbandonRequestImpl( messageId );
        AbandonRequestCodec abandonRequest = codecMessage.getAbandonRequest();

        // Codec : int abandonnedMessageId -> Internal : int abandonId
        internalMessage.setAbandoned( abandonRequest.getAbandonedMessageId() );

        return internalMessage;
    }",Transform an AbandonRequest message from a codec Message to an,1,83
1810,"public synchronized RVMMethod resolve() {
    if (resolvedMember != null) return resolvedMember;

    // Hasn't been resolved yet. Do it now triggering class loading if necessary.
    return resolveInternal((RVMClass) type.resolve());
  }",Find the RVMMethod that this field reference refers to using the search order specified in JVM spec 5.4.3.3.,1,53
1811,"public static Integer getPriority(Class<?> type) {
		if (priorityAnnotationType != null) {
			Annotation priority = AnnotationUtils.findAnnotation(type, priorityAnnotationType);
			if (priority != null) {
				return (Integer) AnnotationUtils.getValue(priority);
			}
		}
		return null;
	}","Return the value of the  javax.annotation.Priority annotation declared on the specified type, or  null if none.",1,94
1812,"public Entry findLocalVariable(int index, int bci) {
        if (encodedEntries.length != 1) {
            for (int i = 1; i != encodedEntries.length; i += 6) {
                final char thisSlot = encodedEntries[i + ENCODED_SLOT];
                if (thisSlot == index) {
                    final char thisStartBCI = encodedEntries[i + ENCODED_START_BCI];
                    final char thisLength = encodedEntries[i + ENCODED_LENGTH];
                    final char thisEndBCI = (char) (thisStartBCI + thisLength);
                    if (bci >= thisStartBCI && bci <= thisEndBCI) {
                        final char thisNameIndex = encodedEntries[i + ENCODED_NAME_INDEX];
                        final char thisDescriptorIndex = encodedEntries[i + ENCODED_DESCRIPTOR_INDEX];
                        final char thisSignatureIndex = encodedEntries[i + ENCODED_SIGNATURE_INDEX];
                        return new Entry(thisStartBCI, thisLength, thisSlot, thisNameIndex, thisDescriptorIndex, thisSignatureIndex);
                    }
                }
            }
        }
        return null;
    }",Gets an object describing a local variable that is live at a given BCI.,1,288
1813,"public static WrappedResponse getCurrentResponse() {
        return CurrentInstance.get(WrappedResponse.class);
    }",Gets the currently processed wrapped request.,1,28
1814,"public static byte[] getBytes(ByteBuffer buf) {
    return readBytes(buf.duplicate());
  }","Returns a new byte array, copied from the given  buf, from the position (inclusive) to the limit (exclusive).",1,33
1815,"public static String getStyle(Node node) {
		return (String) node.attributesProperty().get(STYLE__GNE);
	}",Returns the value of the  #STYLE__GNE attribute of the given  Node.,1,37
1816,"public SVNRepository remove(long svnRepositoryId)
		throws NoSuchSVNRepositoryException, SystemException {
		return remove(Long.valueOf(svnRepositoryId));
	}",Removes the s v n repository with the primary key from the database.,1,38
1817,"public RawLogTriplet rawLogBuffers()
    {
        return rawLogTriplet;
    }",Get the  uk.co.real_logic.aeron.driver.buffer.RawLogTriplet the back this connection.,1,20
1818,"public List<MethodInfo> getMethods() {
        if (operations.isEmpty()) {
            return Collections.emptyList();
        }

        List<MethodInfo> methods = new ArrayList<MethodInfo>();
        for (Collection<MethodInfo> col : operations.values()) {
            methods.addAll(col);
        }
        return methods;
    }",Gets the list of methods (unsorted),1,103
1819,"public BigDecimal getTotalAsPercentage(BigDecimal total) {
		return total.divide(new BigDecimal(RULES.size())).setScale(2, RoundingMode.HALF_UP).multiply(new BigDecimal(100));
	}","Gets the total as a percentage, two decimal precision",1,56
1820,"protected static List select(EMFPointer context, List steps) {

		List contextChildren = new ArrayList(1);
		contextChildren.add(context.getContext());

		for (int i = 0; i < steps.size() - 1; i++) {
			Step step = (Step) steps.get(i);
			List stepChildren = new ArrayList(contextChildren.size() * 3);
			Iterator contextChildrenIterator = contextChildren.iterator();
			while (contextChildrenIterator.hasNext()) {
				Object contextChild = contextChildrenIterator.next();
				Iterator returnedStepChildrenIterator = Evaluator.evaluate(
						contextChild, step).iterator();
				while (returnedStepChildrenIterator.hasNext()) {
					Object stepChild = returnedStepChildrenIterator.next();
					if (!stepChildren.contains(stepChild))
						stepChildren.add(stepChild);
				}
			}
			contextChildren = stepChildren;
		}

		List result = new ArrayList(contextChildren.size());
		if (steps.isEmpty()) {
			result.add(context);
			return result;
		}
		Step step = (Step) steps.get(steps.size() - 1);
		Iterator contextChildrenIterator = contextChildren.iterator();
		while (contextChildrenIterator.hasNext()) {
			Object contextChild = contextChildrenIterator.next();
			List returnedStepChildren = Collections.emptyList();
			if (Axis.ATTRIBUTE != step.getAxis()
					&& Axis.REFERENCE != step.getAxis())
				returnedStepChildren = Evaluator.evaluate(contextChild, step);
			if (returnedStepChildren.isEmpty()) {
				EMFPointer pointer = createEMFPointer((EObject) contextChild,
						step);
				if (pointer != null && !result.contains(pointer))
					result.add(pointer);
			} else {
				Iterator returnedStepChildrenIterator = returnedStepChildren
						.iterator();
				while (returnedStepChildrenIterator.hasNext()) {
					Object value = returnedStepChildrenIterator.next();
					EMFPointer pointer = null;
					if (value instanceof EObject)
						pointer = createEMFPointer((EObject) value);
					else
						throw new RuntimeException();
					// TODO : don't know what to do in this case
					if (pointer != null && !result.contains(pointer))
						result.add(pointer);
				}
			}
		}
		return result;
	}",Returns a list of EMFPointers built by applying a list of Steps onto the context.,1,660
1821,"public Vector3D subtract(Vector3D v) {
    return new Vector3D(x - v.x, y - v.y, z - v.z);
  }",Subtract a vector from the instance.,1,51
1822,"private Element nextStreamElement() {
            Element packet = null;
            try {
                packet = queue.take();
            }
            catch (InterruptedException e) {
                if (!queue.isShutdown()) {
                    LOGGER.log(Level.FINER, ""Spurious interrupt"", e);
                }
            }
            return packet;
        }",Maybe return the next available element from the queue for writing.,1,99
1823,"public static Source fromText(CharSequence chars, String description) {
        CompilerAsserts.neverPartOfCompilation(""do not call Source.fromText from compiled code"");
        return new LiteralSource(description, chars.toString());
    }",Creates an anonymous source from literal text: not named and not indexed.,1,52
1824,"public static SelectedProtocol protocol(String name) {
            for (SelectedProtocol protocol : SelectedProtocol.values()) {
                if (protocol.protocolName().equals(name)) {
                    return protocol;
                }
            }
            return null;
        }",Get an instance of this enum based on the protocol name returned by the ALPN server provider,1,73
1825,"public static Object invokeJdbcMethod(Method method, Object target) throws SQLException {
		return invokeJdbcMethod(method, target, new Object[0]);
	}",Invoke the specified JDBC API  Method against the supplied target object with no arguments.,1,47
1826,"@Override
	public ServletWebServerApplicationContext getApplicationContext() {
		return this.applicationContext;
	}",Access the application context that the server was created in.,1,24
1827,"public static List<BatchRequestPart> parseBatchRequest(final String contentType, final InputStream content, final EntityProviderBatchProperties properties) throws BatchException {
    return createEntityProvider().parseBatchRequest(contentType, content, properties);
  }",Parse Batch Request body inputStream (as  InputStream) and provide a list of Batch Request parts as  BatchRequestPart,1,60
1828,"public static boolean isMatch(AttributeDescriptor a, AttributeDescriptor b, boolean strict) {
        if (a == b) {
            return true;
        }

        if (b == null) {
            return false;
        }

        if (a == null) {
            return false;
        }

        if (a.equals(b)) {
            return true;
        }

        if (strict) {
            if (a.getLocalName().equals(b.getLocalName())
                    && a.getType().getBinding().equals(b.getType().getBinding())) {
                return true;
            }
        } else {
            if (a.getLocalName().equals(b.getLocalName())) {
                return true;
            }
        }

        return false;
    }",Quickly check descriptors compatibility.,1,239
1829,"public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        for (int i = startIndex; i < array.length; i++) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex is treated as zero.,1,141
1830,"public double getRecall() {
      double r = 0;
      for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {
        String klass = classification.getKey();
        r += getRecall(klass);
      }

      return r / linearizedMatrix.size();
    }",get the macro averaged recall (see  #getRecall(String)) over all the classes,1,100
1831,"@SuppressWarnings(""unchecked"")
        @Override
        public <U, RIGHT_PROJECTION extends HigherKinded<U, RightProjection<L, ?>>> RightProjection<L, U> flatMap(Function<? super R, ? extends RIGHT_PROJECTION> mapper) {
            Objects.requireNonNull(mapper);
            if (either.isRight()) {
                return (RightProjection<L, U>) mapper.apply(asRight());
            } else {
                return (RightProjection<L, U>) this;
            }
        }",FlatMaps the right value if the projected Either is a Right.,1,141
1832,"@Override
	public String getDefault() {
		OdfElement parentElement = (OdfElement)getOwnerElement();
		String defaultValue = null;
		if (parentElement != null) {
			defaultValue = DEFAULT_VALUE;			
		}
		return defaultValue;
	}",Returns the default value of @odf.attribute text:display dependent of its element name,1,73
1833,"public QueueEvent peek(long wait) throws KeeperException, InterruptedException {
    if (wait == 0) {
      return element();
    }

    TreeMap<Long,String> orderedChildren;
    boolean waitedEnough = false;
    while (true) {
      LatchChildWatcher childWatcher = new LatchChildWatcher();
      try {
        orderedChildren = orderedChildren(childWatcher);
      } catch (KeeperException.NoNodeException e) {
        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);
        continue;
      }
      if(waitedEnough) {
        if(orderedChildren.isEmpty()) return null;
      }
      if (orderedChildren.size() == 0) {
        childWatcher.await(wait == Long.MAX_VALUE ?  DEFAULT_TIMEOUT: wait);
        waitedEnough = wait != Long.MAX_VALUE;
        continue;
      }

      for (String headNode : orderedChildren.values()) {
        String path = dir + ""/"" + headNode;
        try {
          byte[] data = zookeeper.getData(path, null, null, true);
          return new QueueEvent(path, data, childWatcher.getWatchedEvent());
        } catch (KeeperException.NoNodeException e) {
          // Another client deleted the node first.
        }
      }
    }
  }","Returns the data at the first element of the queue, or null if the queue is empty after wait ms.",1,367
1834,"public static boolean isNotEmpty(CharSequence cs) {
        return !StringUtils.isEmpty(cs);
    }","Checks if a CharSequence is not empty ("""") and not null.",1,30
1835,"public static <T> Observable<T> synchronize(Observable<T> observable) {
        return wrap(new OperationSynchronize<T>(observable));
    }",Accepts a Observable and wraps it in another Observable that ensures that the resulting,1,45
1836,"static <T> JStream<T> of(T element) {
        return new Cons<>(element, Nil::instance);
    }","Returns a singleton  JStream, i.e.",1,42
1837,"public String toJson() {
        return toJson(JsonWriterSettings.builder().outputMode(JsonMode.RELAXED).build());
    }","Gets a JSON representation of this document using the  org.bson.json.JsonMode#RELAXED output mode, and otherwise the default settings of  JsonWriterSettings.Builder and  DBObjectCodec.",1,37
1838,"public static String convertToBitfinexWithdrawalType(String currency) {
    switch (currency.toUpperCase()) {
      case ""BTC"":
        return ""bitcoin"";
      case ""LTC"":
        return ""litecoin"";
      case ""ETH"":
        return ""ethereum"";
      case ""ETC"":
        return ""ethereumc"";
      case ""ZEC"":
        return ""zcash"";
      case ""XMR"":
        return ""monero"";
      case ""USD"":
        return ""mastercoin"";
      case ""DASH"":
        return ""dash"";
      case ""XRP"":
        return ""ripple"";
      case ""EOS"":
        return ""eos"";
      case ""NEO"":
        return ""neo"";
      case ""AVT"":
        return ""aventus"";
      case ""QTUM"":
        return ""qtum"";
      case ""EDO"":
        return ""eidoo"";
      default:
        throw new BitfinexException(""Cannot determine withdrawal type."");
    }

  }","From the reference documentation for field withdraw_type (2018-02-14); can be one of the following ['bitcoin', 'litecoin', 'ethereum', 'ethereumc', 'mastercoin', 'zcash', 'monero', 'wire', 'dash', 'ripple', 'eos', 'neo', 'aventus', 'qtum', 'eidoo']",1,276
1839,"public static OperationSignature buildFor(ASTMethodOrConstructorDeclaration node) {
        return node instanceof ASTMethodDeclaration ? buildFor((ASTMethodDeclaration) node)
                                                    : buildFor((ASTConstructorDeclaration) node);
    }",Builds an operation signature from a method or constructor declaration.,1,51
1840,"public static ContractProvider from(final Object service) {
        return from(service.getClass());
    }",Create a contract provider model by introspecting the class of a contract provider/service instance.,1,33
1841,"public static WGLContext createFromCurrent() {
		long hglrc = wglGetCurrentContext();
		if ( hglrc == NULL )
			throw new IllegalStateException(""No OpenGL context is current in the current thread."");

		return new WGLContext(hglrc);
	}",Creates a  WGLContext from the current OpenGL context of the current thread.,1,66
1842,"public String getMessage( String key )
	{
		ResourceHandle resourceHandle = getResourceHandle( );
		if ( resourceHandle != null )
			return resourceHandle.getMessage( key );

		return key;
	}",Gets the localized message with the resource key.,1,66
1843,"public final TypeOperand asType() {
    return (TypeOperand) this;
  }",Cast to an  TypeOperand.,1,25
1844,"public static DataSet empty() {
        return new DataSet(null,null);
    }",Returns a single dataset (all fields are null),1,28
1845,"private UiFileInfo getUiFileInfo(TachyonFileSystem tachyonFileSystem, TachyonURI filePath)
      throws FileDoesNotExistException, NotFoundException, IOException {
    return getUiFileInfo(tachyonFileSystem, -1, filePath);
  }",Get the UiFileInfo object based on filePath.,1,48
1846,"public double max() {
            return reduce(NaturalDoubleMaxReducer.max, -Double.MAX_VALUE);
        }","Returns the maximum element, or -Double.MAX_VALUE if empty",1,30
1847,"public ReadyCheckingSideInputReader createSideInputReader(
      final List<PCollectionView<?>> sideInputs) {
    return sideInputContainer.createReaderForViews(sideInputs);
  }",Returns a  ReadyCheckingSideInputReader capable of reading the provided  PCollectionView PCollectionViews.,1,37
1848,"static String getInstanceManagerClassName(ExecutionMode executionMode) {
		switch (executionMode) {
		case LOCAL:
			return ""eu.stratosphere.nephele.instance.LocalInstanceManager"";
		case CLUSTER:
			return ""eu.stratosphere.nephele.instance.DefaultInstanceManager"";
		default:
			throw new RuntimeException(""Unrecognized Execution Mode."");
		}
	}",Tries to read the class name of the  eu.stratosphere.nephele.instance.InstanceManager implementation from the global configuration which is set to be used for the provided execution mode.,1,73
1849,"public List<IAnchor> getNewAnchors() {
		return newAnchors;
	}",Returns the list of  IAnchors which will replace the connection's anchors upon execution.,1,22
1850,"public Collection<RosterEntry> getEntries() {
        synchronized (entries) {
            return Collections.unmodifiableList(new ArrayList<RosterEntry>(entries));
        }
    }",Returns an unmodifiable collection of all entries in the group.,1,47
1851,"public Iterable<MethodDescription> getProxiedMethods() {
        return new TypeWriter.SameThreadCoModifiableIterable<MethodDescription>(orderedAccessorMethods);
    }",Returns an iterable containing all accessor methods that were registered with this delegate.,1,32
1852,"public DataStream<Tuple1<String>> readTextFile(String filePath) {
		return addSource(new FileSourceFunction(filePath), 1);
	}",Creates a DataStream that represents the Strings produced by reading the given file line wise.,1,39
1853,"public Factory updateFactory(Factory update) throws ConflictException,
                                                                                  NotFoundException,
                                                                                  ServerException {
        requireNonNull(update);
        final AuthorImpl creator = factoryDao.getById(update.getId()).getCreator();
        return factoryDao.update(FactoryImpl.builder()
                                            .from(new FactoryImpl(update))
                                            .setCreator(new AuthorImpl(creator.getUserId(), creator.getCreated()))
                                            .build());
    }",Updates factory in accordance to the new configuration.,1,116
1854,"public boolean seekTo() throws IOException {
      if (reader == null) {
        return false;
      }

      if (reader.getTrailer().getEntryCount() == 0) {
        // No data blocks.
        return false;
      }

      long firstDataBlockOffset =
          reader.getTrailer().getFirstDataBlockOffset();
      if (block != null && block.getOffset() == firstDataBlockOffset) {
        blockBuffer.rewind();
        readKeyValueLen();
        return true;
      }

      block = reader.readBlock(firstDataBlockOffset, -1, cacheBlocks, pread,
          isCompaction);
      if (block.getOffset() < 0) {
        throw new IOException(""Invalid block offset: "" + block.getOffset());
      }
      updateCurrBlock(block);
      return true;
    }",Positions this scanner at the start of the file.,1,228
1855,"public double getPrecision() {
      double p = 0;
      for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {
        String klass = classification.getKey();
        p += getPrecision(klass);
      }

      return p / linearizedMatrix.size();
    }",get the macro averaged precision (see  #getPrecision(String)) over all the classes.,1,100
1856,"protected synchronized TaskInProgress findSpeculativeTask(
      Collection<TaskInProgress> list, String taskTrackerName, 
      String taskTrackerHost) {
    if (list.isEmpty()) {
      return null;
    }
    long now = jobtracker.getClock().getTime();
    if (isSlowTracker(taskTrackerName) || atSpeculativeCap(list)) {
      return null;
    }
    // List of speculatable candidates, start with all, and chop it down
    ArrayList<TaskInProgress> candidates = new ArrayList<TaskInProgress>(list);
    
    Iterator<TaskInProgress> iter = candidates.iterator();
    while (iter.hasNext()) {
      TaskInProgress tip = iter.next();
      if (tip.hasRunOnMachine(taskTrackerHost, taskTrackerName) ||
          !tip.canBeSpeculated(now)) {
          //remove it from candidates
          iter.remove();
      }
    }
    //resort according to expected time till completion
    Comparator<TaskInProgress> LateComparator = 
      new EstimatedTimeLeftComparator(now);
    Collections.sort(candidates, LateComparator);
    if (candidates.size() > 0 ) {
      TaskInProgress tip = candidates.get(0);
      if (LOG.isDebugEnabled()) {
        LOG.debug(""Chose task "" + tip.getTIPId() + "". Statistics: Task's : "" +
            tip.getCurrentProgressRate(now) + "" Job's : "" + 
            (tip.isMapTask() ? runningMapTaskStats : runningReduceTaskStats));
      }
      return tip;
    } else {
      return null;
    }
  }",Retrieve a task for speculation.,1,387
1857,"public static ContractProvider from(final Class<?> serviceClass) {
        return from(serviceClass, NO_PRIORITY, null);
    }",Create a contract provider model by introspecting a contract provider/service class.,1,38
1858,"private int seqNoToBitSetOffset(final long seqNo) {
        assert Thread.holdsLock(this);
        assert seqNo >= firstProcessedSeqNo;
        return ((int) (seqNo - firstProcessedSeqNo)) % bitArraysSize;
    }",Obtain the position in the bit array corresponding to the provided sequence number.,1,62
1859,"public QueryOperation createLimitWithFetch(int fetch, QueryOperation child) {
		SortQueryOperation previousSort = validateAndGetChildSort(child);

		if (fetch < 0) {
			throw new ValidationException(""Fetch should be greater or equal 0"");
		}

		int offset = Math.max(previousSort.getOffset(), 0);

		return new SortQueryOperation(previousSort.getOrder(), previousSort.getChild(), offset, fetch);
	}",Adds fetch to the underlying  SortQueryOperation if it is a valid one.,1,116
1860,"public static boolean isHistoryLoggingEnabled(String id)
    {
        return configService.getBoolean(MessageHistoryService
                    .PNAME_IS_MESSAGE_HISTORY_PER_CONTACT_ENABLED_PREFIX
                        + ""."" + id, true);
    }","Returns true if the ""IS_MESSAGE_HISTORY_ENABLED"" property is true for the id, otherwise - returns false.",1,48
1861,"public List<Affiliate> getMembers() throws NoResponseException, XMPPErrorException, NotConnectedException  {
        return getAffiliatesByAdmin(MUCAffiliation.member);
    }",Returns a list of Affiliate with the room members.,1,37
1862,"protected String getParam(final String value, final String paramName) {
		if (value == null || value.length() == 0)
			return null;

		final int length = value.length();
		int start = value.indexOf(';') + 1;
		if (start == 0 || start == length)
			return null;

		int end = value.indexOf(';', start);
		if (end == -1)
			end = length;

		while (start < end) {
			int nameEnd = value.indexOf('=', start);
			if (nameEnd != -1 && nameEnd < end
					&& paramName.equals(value.substring(start, nameEnd).trim())) {
				String paramValue = value.substring(nameEnd + 1, end).trim();
				int valueLength = paramValue.length();
				if (valueLength != 0)
					if (valueLength > 2 && '""' == paramValue.charAt(0)
							&& '""' == paramValue.charAt(valueLength - 1))
						return paramValue.substring(1, valueLength - 1);
					else
						return paramValue;
			}

			start = end + 1;
			end = value.indexOf(';', start);
			if (end == -1)
				end = length;
		}

		return null;
	}",Get parameter value from header value,1,428
1863,"DbException convertException(MVStoreException e) {
        int errorCode = e.getErrorCode();
        if (errorCode == DataUtils.ERROR_TRANSACTION_LOCKED) {
            throw DbException.get(ErrorCode.CONCURRENT_UPDATE_1,
                    e, getName());
        }
        if (errorCode == DataUtils.ERROR_TRANSACTIONS_DEADLOCK) {
            throw DbException.get(ErrorCode.DEADLOCK_1,
                    e, getName());
        }
        return store.convertMVStoreException(e);
    }",Convert the MVStoreException to a database exception.,1,121
1864,"public static synchronized Feed[] updateFeed(final Context context,
                                                 final Feed... newFeeds) {
        List<Feed> newFeedsList = new ArrayList<Feed>();
        List<Feed> updatedFeedsList = new ArrayList<Feed>();
        Feed[] resultFeeds = new Feed[newFeeds.length];
        PodDBAdapter adapter = new PodDBAdapter(context);
        adapter.open();

        for (int feedIdx = 0; feedIdx < newFeeds.length; feedIdx++) {

            final Feed newFeed = newFeeds[feedIdx];

            // Look up feed in the feedslist
            final Feed savedFeed = searchFeedByIdentifyingValueOrID(context, adapter,
                    newFeed);
            if (savedFeed == null) {
                if (BuildConfig.DEBUG)
                    Log.d(TAG,
                            ""Found no existing Feed with title ""
                                    + newFeed.getTitle() + "". Adding as new one.""
                    );
                // Add a new Feed
                newFeedsList.add(newFeed);
                resultFeeds[feedIdx] = newFeed;
            } else {
                if (BuildConfig.DEBUG)
                    Log.d(TAG, ""Feed with title "" + newFeed.getTitle()
                            + "" already exists. Syncing new with existing one."");

                Collections.sort(newFeed.getItems(), new FeedItemPubdateComparator());
                if (savedFeed.compareWithOther(newFeed)) {
                    if (BuildConfig.DEBUG)
                        Log.d(TAG,
                                ""Feed has updated attribute values. Updating old feed's attributes"");
                    savedFeed.updateFromOther(newFeed);
                }
                if (savedFeed.getPreferences().compareWithOther(newFeed.getPreferences())) {
                    if (BuildConfig.DEBUG)
                        Log.d(TAG, ""Feed has updated preferences. Updating old feed's preferences"");
                    savedFeed.getPreferences().updateFromOther(newFeed.getPreferences());
                }
                // Look for new or updated Items
                for (int idx = 0; idx < newFeed.getItems().size(); idx++) {
                    final FeedItem item = newFeed.getItems().get(idx);
                    FeedItem oldItem = searchFeedItemByIdentifyingValue(savedFeed,
                            item.getIdentifyingValue());
                    if (oldItem == null) {
                        // item is new
                        final int i = idx;
                        item.setFeed(savedFeed);
                        savedFeed.getItems().add(i, item);
                        item.setRead(false);
                    } else {
                        oldItem.updateFromOther(item);
                    }
                }
                // update attributes
                savedFeed.setLastUpdate(newFeed.getLastUpdate());
                savedFeed.setType(newFeed.getType());

                updatedFeedsList.add(savedFeed);
                resultFeeds[feedIdx] = savedFeed;
            }
        }

        adapter.close();

        try {
            DBWriter.addNewFeed(context, newFeedsList.toArray(new Feed[newFeedsList.size()])).get();
            DBWriter.setCompleteFeed(context, updatedFeedsList.toArray(new Feed[updatedFeedsList.size()])).get();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            e.printStackTrace();
        }

        EventDistributor.getInstance().sendFeedUpdateBroadcast();

        return resultFeeds;
    }",Adds new Feeds to the database or updates the old versions if they already exists.,1,809
1865,"public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return -1;
        }
        if (startIndex < 0) {
            return -1;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return -1;
    }",Find the last index of the given value in the array starting at the given index. This method returns -1 if null array input. A negative startIndex will return -1.,1,179
1866,"public static ConfigModel of(String name, boolean required) {
        return new Builder(name).setRequired(required).build();
    }",Creates a new ConfigModel,1,43
1867,"public static boolean equals(CharSequence cs1, CharSequence cs2) {
        return cs1 == null ? cs2 == null : cs1.equals(cs2);
    }","Compares two CharSequences, returning true if they are equal. nulls are handled without exceptions.",1,52
1868,"public String getParent(Context context) {

        return null;
    }",Helper method to get parent path,1,23
1869,"public default GraphTraversalSource traversal() {
        return this.traversal(GraphTraversalSource.build().engine(StandardTraversalEngine.build()));
    }",Generate a  GraphTraversalSource instance using the  StandardTraversalEngine.,1,39
1870,"public FunctionNode getFunction(Block block) {
        if(block instanceof FunctionNode) {
            return (FunctionNode)block;
        }
        return getParentFunction(block);
    }",Returns the closest function node to the block.,1,49
1871,"private ToolkitDescriptor createToolkitDescriptor(
        IConfigurationElement  element, CompSystem compSystem) 
        throws ToolkitPluginException {
        
        final String toolkitId = element.getAttribute(
            ToolkitConstants.ATTR_TOOLKITID);
        try {
            if (compSystem.getToolkitDescriptor(toolkitId) == null) {
                
                final String name = element.getAttribute(
                    ToolkitConstants.ATTR_NAME);
                final String level = element.getAttribute(
                    ToolkitConstants.ATTR_LEVEL);
                final boolean isUserToolkit = Boolean.parseBoolean(element
                    .getAttribute(ToolkitConstants.ATTR_ISUSERTOOLKIT));
                final String includes = String.valueOf(element.getAttribute(
                    ToolkitConstants.ATTR_INCLUDES));
                final String depends = String.valueOf(element.getAttribute(
                    ToolkitConstants.ATTR_DEPENDS));
                final int order = Integer.parseInt(element.getAttribute(
                    ToolkitConstants.ATTR_ORDER));
                final ConfigVersion configVersion = compSystem
                    .getConfigVersion();
                final int majorVersion = configVersion.getMajorVersion();
                final int minorVersion = configVersion.getMinorVersion();
                final ToolkitDescriptor descr = 
                    new ToolkitDescriptor(toolkitId, name, 
                        includes, depends, level, order, isUserToolkit, 
                        majorVersion, minorVersion);
                compSystem.addToolkitPluginDescriptor(toolkitId, descr);
                return descr;
            }
        } catch (NumberFormatException e) {
            log.error(e.getLocalizedMessage(), e);
            throw new ToolkitPluginException(
                Messages.ErrorWhileReadingAttributes + StringConstants.COLON
                + StringConstants.SPACE
                + String.valueOf(toolkitId), e);
        } catch (InvalidRegistryObjectException e) {
            log.error(e.getLocalizedMessage(), e);
            throw new ToolkitPluginException(
                Messages.ErrorWhileReadingAttributes + StringConstants.COLON
                + StringConstants.SPACE
                + String.valueOf(toolkitId), e);
        } 
        return null;
    }",Creates a  ToolkitDescriptor which hold the attributes of the Toolkit and adds the Descriptor to the given CompSystem.,1,492
1872,"public Hashtable getUserProperties() {
        PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
        return ph.getUserProperties();
    }",Returns a copy of the user property hashtable,1,38
1873,"public int copyFromLocal(File srcFile, TachyonURI dstPath) throws IOException {
    int ret = copyPath(srcFile, mTfs, dstPath);
    if (ret == 0) {
      System.out.println(""Copied "" + srcFile.getPath() + "" to "" + dstPath);
    }
    return ret;
  }",Copies a file or directory specified by srcPath from the local filesystem to dstPath in the Tachyon filesystem space.,1,98
1874,"private static String findValidPath(EnvVar... vars) throws AndroidLocationException {
        for (EnvVar var : vars) {
            String path = var.validatePath(true);
            if (path != null) {
                return path;
            }
        }
        return null;
    }","Checks a list of system properties and/or system environment variables for validity, and returns the first one.",1,87
1875,"protected FXBendConnectionPolicy getBendPolicy() {
		return bendPolicy;
	}",Returns the  FXBendConnectionPolicy to use for manipulating the  #getTargetPart().,1,19
1876,"public <T> Exception onSubscribeError(Observable<T> observableInstance, Exception e) {
        // pass-thru by default
        return e;
    }",Invoked after failed execution of  Observable#subscribe(Observer) with thrown Exception.,1,37
1877,"private static boolean findComposedPath(String start, String end,
                                            Vector path) {
        path.addElement(start);
        // composedCache lists all links emanating from a node
        String[] links = (String[]) composedCache.get(start);
        if (links != null) {
            for (int i=0; i<links.length; ++i) {
                if (links[i].equals(end)) {
                    path.addElement(end);
                    return true;
                }
            }
            for (int i=0; i<links.length; ++i) {
                // Avoid cycles: ignore links already on our path
                if (path.indexOf(links[i]) >= 0) {
                    continue;
                }
                if (findComposedPath(links[i], end, path)) {
                    return true;
                }
            }
        }
        path.removeElementAt(path.size() - 1);    
        return false;
    }",Find a path through the composed transliterator graph.,1,258
1878,"public Entry getEntryForXIndex(int x) {

//        for (int i = 0; i < mYVals.size(); i++) {
//            if (xIndex == mYVals.get(i).getXIndex())
//                return mYVals.get(i);
//        }

        int low = 0;
        int high = mYVals.size();

        while (low <= high) {
            int m = (high + low) / 2;

            if (x == mYVals.get(m).getXIndex()) {
                return mYVals.get(m);
            }

            if (x > mYVals.get(m).getXIndex())
                low = m + 1;
            else
                high = m - 1;
        }

        return null;
    }",Returns the first Entry object found at the given xIndex with binary search.,1,181
1879,"public boolean mkdirs(TachyonURI path) throws FileAlreadyExistException, InvalidPathException,
      IOException {
    return mkdirs(path, true);
  }",Convenience method to mkdirs recursively.,1,39
1880,"public IConnectionRouter getRouter() {
		return router;
	}",Returns the  IConnectionRouter of this  Connection.,1,19
1881,"public static Community create(Community parent, Context context)
            throws SQLException, AuthorizeException
    {
        return create(parent, context, null);
    }","Create a new top-level community, with a new ID.",1,47
1882,"public static SequenceIntervalCollection decode(String s)
			throws InvalidSequenceIntervalException {
		SequenceIntervalCollection result = new SequenceIntervalCollection();
		StringTokenizer t = new StringTokenizer(s, "","");
		while (t.hasMoreTokens()) {
			String token = t.nextToken();
			result.intervalList.add(SequenceInterval.decode(token));
		}
		result.sort();
		result.simplify();
		return result;
	}",Decode SequenceIntervalCollection from String.,1,125
1883,"public YearMonthDay getYearMonthDay() {
            return iYearMonthDay;
        }",Gets the partial that this property belongs to.,1,19
1884,"public static Process execute(final List<String> commands, final String[] envp, final File dir) throws IOException {
        return Runtime.getRuntime().exec((String[]) (commands == null ? null : commands.toArray(new String[commands.size()])), envp, dir);
    }","Executes the command specified by the String list given in the first parameter, with the environment defined by envp and under the working directory dir.",1,99
1885,"private SourceMapParser processSourceMap(Result result, List<JsContent> allInputs) {
    StringBuilder sb = new StringBuilder();
    try {
      if (result.sourceMap != null) {
        result.sourceMap.appendTo(sb, ""done"");
        return SourceMapParser.parse(sb.toString(), allInputs);
      }
    } catch (SourceMapParseException e) { // null response
    } catch (IOException e) { // null response
    }
    return null;
  }",Pull the source map out of the given closure  Result and construct a  SourceMapParser.,1,135
1886,"public final ObjectConstantOperand asObjectConstant() {
    return (ObjectConstantOperand) this;
  }",Cast to an  ObjectConstantOperand.,1,25
1887,"@NonNull
        public SQLiteTypeMapping<T> build() {
            return new SQLiteTypeMapping<T>(
                    putResolver,
                    getResolver,
                    deleteResolver
            );
        }",Builds new immutable instance of  SQLiteTypeMapping.,1,45
1888,"public static boolean quietlyInvokeMethodsWithAnnotation(final Class<? extends Annotation> annotation, final Object instance, final ProcessorLog logger, final Object... args) {
        return quietlyInvokeMethodsWithAnnotation(annotation, null, instance, logger, args);
    }",Invokes all methods on the given instance that have been annotated with the given Annotation.,1,72
1889,"public Object newInstance(final AbstractTransactionContext tx)
    throws PersistenceException {
        try { 
            InstanceFactory entityFactory = tx.getInstanceFactory();
            ClassLoader entityLoader = tx.getDatabase().getClassLoader();
            if (entityFactory != null) {
                return entityFactory.newInstance(_name, entityLoader);
            }
            Class<?> aClass = ClassLoadingUtils.loadClass(entityLoader, _name);
            return aClass.newInstance();
        } catch (Exception e) {
            throw new PersistenceException(e.getMessage(), e);
        }
    }",Return a new instance of the base class with InstanceFactory and ClassLoader of the provided AbstractTransactionContext.,1,157
1890,"public boolean keyIsInRelation()
    {
        return partitionKeyRestrictions.isIN();
    }",Checks if the restrictions on the partition key is an IN restriction.,1,24
1891,"private KnowledgePackageImp createPackageFromResource(Resource resource) {
        return this.createPackageFromResource( resource,
                                               null );
    }","Same as  #createPackageFromResource(org.drools.io.Resource, org.drools.builder.KnowledgeBuilder) createPackageFromResource(org.drools.io.Resource, null)",1,33
1892,"public static XBooleanListValue addBooleanToList(XID actorID, XField field, boolean bool) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XBooleanListValue) {
			XBooleanListValue listValue = (XBooleanListValue)value;
			
			// manipulate the contained list
			listValue = addBooleanToList(listValue, listValue.size(), bool);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Appends a new boolean to end of the  XBooleanListValue of the given  XField.,1,153
1893,"public Response writeAndRefreshConfiguration(JSONObject request) {
    try {

      if (isOperator() == false) {
        return Response.status(401).build();
      }
      
      writeConfiguration(request);

      String rmHost = getRMHost();
      JSONObject data = (JSONObject) JSONValue.parse(String.format(refreshRMRequestData, rmHost));
      proxy.request(baseUrl + ""/requests/"").
          setData(data).
          post();

    } catch (WebApplicationException ex) {
      throw ex;
    } catch (Exception ex) {
      throw new ServiceFormattedException(ex.getMessage(), ex);
    }
    return readConfiguration();
  }",Sets capacity scheduler configuration and refresh ResourceManager.,1,195
1894,"public static String absolutize(String path, String resource) {
        if (path == null || path.length() == 0) {
            // Base path is empty
            return resource;
        }
        
        if (resource == null || resource.length() == 0) {
            // Resource path is empty
            return path;
        }

        if (resource.charAt(0) == '/') {
            // Resource path is already absolute
            return resource;
        }
        
        int length = path.length() - 1;
        boolean slash = (path.charAt(length) == '/');
        
        StringBuffer b = new StringBuffer();
        b.append(path);
        if (!slash) {
            b.append('/');
        } 
        b.append(resource);
        return b.toString();
    }",Absolutize a relative resource path on the given absolute base path.,1,246
1895,"private String[] listInternal(String path, boolean recursive) throws IOException {
    try {
      path = stripPrefixIfPresent(path);
      path = PathUtils.normalizePath(path, PATH_SEPARATOR);
      path = path.equals(PATH_SEPARATOR) ? """" : path;
      Directory directory = new Directory(path, '/');
      Container c = mAccount.getContainer(mContainerName);
      Collection<DirectoryOrObject> res = c.listDirectory(directory);
      Set<String> children = new HashSet<>();
      Iterator<DirectoryOrObject> iter = res.iterator();
      while (iter.hasNext()) {
        DirectoryOrObject dirobj = iter.next();
        String child = stripFolderSuffixIfPresent(dirobj.getName());
        String noPrefix = stripPrefixIfPresent(child, path);
        children.add(noPrefix);
      }
      return children.toArray(new String[children.size()]);
    } catch (Exception e) {
      LOG.error(""Failed to list path {}"", path, e);
      return null;
    }
  }","Lists the files in the given path, the paths will be their logical names and not contain the folder suffix.",1,299
1896,"public static DataHandler rateReporterHandler(final RateReporter reporter)
    {
        return (buffer, offset, length, sessionId, flags) -> reporter.onMessage(1, length);
    }","Return a reusable, parameteried  uk.co.real_logic.aeron.DataHandler that calls into a  RateReporter.",1,54
1897,"public List<ITransactionalOperation> getOperations() {
		return operations;
	}",Returns the list of  ITransactionalOperations which are combined in this composite operation.,1,22
1898,"public String embed(String urlString, String name) throws EmailException
    {
        try
        {
            return embed(new URL(urlString), name);
        }
        catch (MalformedURLException e)
        {
            throw new EmailException(""Invalid URL"", e);
        }
    }",Attempts to parse the specified String as a URL that will then be embedded in the message.,1,83
1899,"public WallEntry remove(long wallEntryId)
		throws NoSuchWallEntryException, SystemException {
		return remove(Long.valueOf(wallEntryId));
	}",Removes the wall entry with the primary key from the database.,1,38
1900,"private String[] listInternal(final String path) throws IOException {
    String prefix = addFolderSuffixIfNotPresent(stripPrefixIfPresent(path));
    prefix = prefix.equals(PATH_SEPARATOR) ? """" : prefix;

    Directory directory = new Directory(prefix, PATH_SEPARATOR_CHAR);
    Container container = mAccount.getContainer(mContainerName);
    Collection<DirectoryOrObject> objects = container.listDirectory(directory);
    Set<String> children = new HashSet<>();
    boolean foundSelf = false;
    final String self = stripFolderSuffixIfPresent(prefix);
    for (DirectoryOrObject object : objects) {
      String child = stripFolderSuffixIfPresent(object.getName());
      String noPrefix = CommonUtils.stripPrefixIfPresent(child, prefix);
      if (!noPrefix.equals(self)) {
        children.add(noPrefix);
      } else {
        foundSelf = true;
      }
    }

    if (!foundSelf && (children.size() == 0)) {
      // Path does not exist
      return null;
    }

    return children.toArray(new String[children.size()]);
  }","Lists the files in the given path, the returned paths will be their logical names and not contain the folder suffix.",1,313
1902,"protected ChangeViewportPolicy getViewportPolicy() {
		return viewportPolicy;
	}",Returns the  ChangeViewportPolicy that is used by this policy.,1,19
1903,"public final DoubleConstantOperand asDoubleConstant() {
    return (DoubleConstantOperand) this;
  }",Cast to an  DoubleConstantOperand.,1,25
1904,"protected static GeometryTypeEnum determineGeometryType(com.boundlessgeo.gsr.model.geometry.Geometry[] geometries) {
        if (geometries.length == 0) {
            return GeometryTypeEnum.POINT;
        } else {
            GeometryTypeEnum type = geometries[0].getGeometryType();
            for (int i = 0; i < geometries.length; i++) {
                com.boundlessgeo.gsr.model.geometry.Geometry g = geometries[i];
                if (! type.equals(g.getGeometryType())) {
                    throw new IllegalArgumentException(""GeoServices REST API Specification does not support mixed geometry types in geometry collections. (Core 9.8)"");
                }
            }
            return type;
        }
    }",Determines the geometry type of geometries in a geometry array.,1,178
1905,"@PUT
  @Consumes(MediaType.APPLICATION_JSON)
  @Produces(MediaType.APPLICATION_JSON)
  public Response writeConfiguration(JSONObject request) {
    try {
      validateViewConfiguration();

      if (isOperator() == false) {
        return Response.status(401).build();
      }

      proxy.request(baseUrl).
            setData(makeConfigUpdateData(request)).
            put();

    } catch (WebApplicationException ex) {
      throw ex;
    } catch (Exception ex) {
      throw new ServiceFormattedException(ex.getMessage(), ex);
    }

    return readConfiguration();
  }",Sets capacity scheduler configuration.,1,170
1906,"public static int compile(String[] args, PrintWriter out) {
    ErrorProneCompiler compiler = new ErrorProneCompiler.Builder()
        .redirectOutputTo(out)
        .build();
    return compiler.compile(args);
  }",Programmatic interface to the error-prone Java compiler.,1,65
1907,"public OperationDescriptor withOperation(String name)
    {
        return getRootDeclaration().withOperation(name);
    }",Adds another operation to the root  DeclarationDescriptor,1,30
1908,"long[] getList() {
        return trail;
    }","Get the trail, called in this class only",1,19
1909,"public Fraction divideBy(Fraction fraction) {
        if (fraction == null) {
            throw new IllegalArgumentException(""The fraction must not be null"");
        }
        if (fraction.numerator == 0) {
            throw new ArithmeticException(""The fraction to divide by must not be zero"");
        }
        if (numerator == 0) {
            return ZERO;
        }  
        double numeratorValue = (double) numerator * fraction.denominator;
        double denominatorValue = (double) denominator * fraction.numerator;
        if (Math.abs(numeratorValue) > Integer.MAX_VALUE || 
            Math.abs(denominatorValue) > Integer.MAX_VALUE) {
                throw new ArithmeticException(""Integer overflow"");
        }
        return getReducedFraction((int) numeratorValue, (int) denominatorValue);
    }","Divide the value of this fraction by another, returning the result in reduced form.",1,216
1910,"public Result eval(Patient patient, String token, Map<String, Object> parameters) throws LogicException {
		return eval(patient, new LogicCriteria(token), parameters);
	}",Evaluate a rule with parameters for a single patient,1,56
1911,"public boolean isDecisionPoint(Object object)
    {
        boolean isDecisionPoint = false;

        if (isChoice(object))
        {
            Pseudostate pseudostate = (Pseudostate)object;
            isDecisionPoint = true;
            isDecisionPoint = isDecisionPoint && (pseudostate.getIncoming().size() == 1);
            isDecisionPoint = isDecisionPoint && (pseudostate.getOutgoing().size() > 1);
        }

        return isDecisionPoint;
    }","Returns true if the argument state vertex is a pseudostate of kind 'choice', it has multiple outgoing transition, but only a single incoming transition.",1,127
1912,"private int [] activeCols(final double l1, final double l2, final double [] grad) {
      int selected = 0;
      int [] cols = null;
      if (_taskInfo._params._alpha[0] > 0) {
        final double rhs = _taskInfo._params._alpha[0] * (2 * l1 - l2);
        cols = MemoryManager.malloc4(_taskInfo._dinfo.fullN());
        int j = 0;
        if (_activeCols == null) _activeCols = new int[]{-1};
        for (int i = 0; i < _taskInfo._dinfo.fullN(); ++i)
          if ((j < _activeCols.length && i == _activeCols[j]) || grad[i] > rhs || grad[i] < -rhs) {
            cols[selected++] = i;
            if (j < _activeCols.length && i == _activeCols[j]) ++j;
          }
      }
      if(_taskInfo._params._alpha[0] == 0 || selected == _taskInfo._dinfo.fullN()){
        _activeCols = null;
        _activeData = _taskInfo._dinfo;
        selected = _taskInfo._dinfo.fullN();
      } else {
        _activeCols = Arrays.copyOf(cols, selected);
        _activeData = _taskInfo._dinfo.filterExpandedColumns(_activeCols);
        assert DKV.get(_activeData._key) != null;
      }
      LogInfo(""strong rule at lambda_value="" + l1 + "", got "" + selected + "" active cols out of "" + _taskInfo._dinfo.fullN() + "" total."");
      assert _activeCols == null || _activeData.fullN() == _activeCols.length:LogInfo(""mismatched number of cols, got "" + _activeCols.length + "" active cols, but data info claims "" + _activeData.fullN());
      return _activeCols;
    }",Apply strong rules to filter out expected innactive (with zero coefficient) predictors.,1,537
1913,"private boolean isWSDeployment(DeploymentUnit unit) {
        if (!DeploymentTypeMarker.isType(DeploymentType.WAR, unit)) {
            return false;
        }
        final Index index = ASHelper.getRootAnnotationIndex(unit);
        final WarMetaData warMetaData = ASHelper.getOptionalAttachment(unit, WarMetaData.ATTACHMENT_KEY);
        return (ASHelper.selectWebServiceServlets(index, warMetaData.getWebMetaData().getServlets(), true).size() > 0);
    }",Determines whether the provided deployment unit is a WS endpoint deployment or not; currently finds JSE endpoints only and relies upon endpoints declared in web.xml only (merged jbossweb metadata is not available yet at this phase),1,119
1914,"protected Statement createConstrainedStatement(PropertyNode propertyNode, Expression fieldExpression) {
        return new ExpressionStatement(
                new MethodCallExpression(
                        VariableExpression.THIS_EXPRESSION,
                        ""fireVetoableChange"",
                        new ArgumentListExpression(
                                new Expression[]{
                                        new ConstantExpression(propertyNode.getName()),
                                        fieldExpression,
                                        new VariableExpression(""value"")})));
    }","Creates a statement body silimar to: this.fireVetoableChange(""field"", field, field = value)",1,93
1915,"public double max(DoubleComparator comparator) {
        return reduce(new DoubleMaxReducer(comparator), -Double.MAX_VALUE);
    }","Returns the maximum element, or -Double.MAX_VALUE if empty",1,36
1916,"public com.codenvy.docker.json.SystemInfo getVersion() throws IOException {
        final DockerConnection connection = openConnection(dockerDaemonUri);
        try {
            final DockerResponse response = connection.method(""GET"").path(""/version"").request();
            final int status = response.getStatus();
            if (200 != status) {
                final String msg = CharStreams.toString(new InputStreamReader(response.getInputStream()));
                throw new DockerException(String.format(""Error response from docker API, status: %d, message: %s"", status, msg), status);
            }
            return JsonHelper.fromJson(response.getInputStream(), com.codenvy.docker.json.SystemInfo.class, null, FIRST_LETTER_LOWERCASE);
        } catch (JsonParseException e) {
            throw new IOException(e.getMessage(), e);
        } finally {
            connection.close();
        }
    }",Gets system-wide information.,1,244
1917,"public final Selected.Collector selectedCollector(int id) throws InlinePragma {
    return collectors[id];
  }",Return the Selected.Collector instance given its unique identifier.,1,33
1918,"public boolean visit(Result r) throws IOException {
        if (r ==  null || r.isEmpty()) return true;
        Pair<HRegionInfo,HServerAddress> region = metaRowToRegionPair(r);
        if (region == null) return true;
        if (disabledTables.contains(
            region.getFirst().getTableDesc().getNameAsString())) return true;
        regions.put(region.getFirst(), region.getSecond());
        return true;
      }","Performs a full scan of .META., skipping regions from any tables in the specified set of disabled tables.",1,138
1919,"private TransformationService findProcessor(String type) {
		return processorCache.get(type.toUpperCase());
	}",Returns the  TransformationService according to the given type or null if there is none matching.,1,31
1920,"public static RealMatrix createRealMatrix(final int rows, final int columns) {
        return new DenseRealMatrix(rows, columns);
    }",Returns a  RealMatrix with specified dimensions.,1,41
1921,"static ExchangeStrategies of(ApplicationContext applicationContext) {
		return builder(applicationContext).build();
	}",Return a new  ExchangeStrategies based on the given plain ApplicationContext application context.,1,29
1922,"public int getPreviewFormat() {
            return pixelFormatForCameraFormat(get(KEY_PREVIEW_FORMAT));
        }",Returns the image format for preview pictures got from  PreviewCallback.,1,25
1923,"public I18nMessage mapIsNotEmpty() {
    return createMessage(bundlePath, 21);
  }",Generates a  I18nMessage for a  Map which was expected to be empty but wasn't,1,25
1924,"public static Rectangle fromString (String v) {
		int s0 = v.indexOf(',', 1);
		int s1 = v.indexOf(',', s0 + 1);
		int s2 = v.indexOf(',', s1 + 1);
		if (s0 != -1 && s1 != -1 && s2 != -1 && v.charAt(0) == '[' && v.charAt(v.length() - 1) == ']') {
			try {
				float x = Float.parseFloat(v.substring(1, s0));
				float y = Float.parseFloat(v.substring(s0 + 1, s1));
				float width = Float.parseFloat(v.substring(s1 + 1, s2));
				float height = Float.parseFloat(v.substring(s2 + 1, v.length() - 1));
				return new Rectangle(x, y, width, height);
			} catch (NumberFormatException ex) {
				// Throw a GdxRuntimeException
			}
		}
		throw new GdxRuntimeException(""Malformed Rectangle: "" + v);
	}",Parses the  Rectangle represented by the given string according to the format of  #toString().,1,332
1925,"public Collection<Item> getItems() {
        synchronized (items) {
            return Collections.unmodifiableList(new ArrayList<Item>(items));
        }
    }",Returns a Collection of item childs that holds information about offline messages to view or delete.,1,47
1926,"public UI getRootById(int rootId) {
        return uIs.get(rootId);
    }",Returns a UI with the given id.,1,27
1927,"public static String needTheNamespacePrefix( ReferenceValue refValue,
			Module root )
	{
		return needTheNamespacePrefix( refValue, root, null );
	}",Gets the property value with the name prefix.,1,44
1928,"static JarEntryData fromInputStream(JarFile source, InputStream inputStream)
			throws IOException {
		byte[] header = new byte[46];
		if (!Bytes.fill(inputStream, header)) {
			return null;
		}
		return new JarEntryData(source, header, inputStream);
	}",Create a new  JarEntryData instance from the specified input stream.,1,87
1929,"public KaleoTaskAssignment remove(KaleoTaskAssignment kaleoTaskAssignment)
		throws SystemException {
		return super.remove(kaleoTaskAssignment);
	}",Removes the kaleo task assignment from the database.,1,32
1930,"public static Frame sampleFrameStratified(final Frame fr, Vec label, Vec weights, float[] sampling_ratios, long maxrows, final long seed, final boolean allowOversampling, final boolean verbose) {
    if (fr == null) return null;
    assert(label.isEnum());
    if (maxrows < label.domain().length) {
      Log.warn(""Attempting to do stratified sampling to fewer samples than there are class labels - automatically increasing to #rows == #labels ("" + label.domain().length + "")."");
      maxrows = label.domain().length;
    }

    ClassDist cd = new ClassDist(label);
    double[] dist = weights != null ? cd.doAll(label, weights).dist() : cd.doAll(label).dist();
    assert(dist.length > 0);
    Log.info(""Doing stratified sampling for data set containing "" + fr.numRows() + "" rows from "" + dist.length + "" classes. Oversampling: "" + (allowOversampling ? ""on"" : ""off""));
    if (verbose)
      for (int i=0; i<dist.length;++i)
        Log.info(""Class "" + label.factor(i) + "": count: "" + dist[i] + "" prior: "" + (float)dist[i]/fr.numRows());

    // create sampling_ratios for class balance with max. maxrows rows (fill
    // existing array if not null).  Make a defensive copy.
    sampling_ratios = sampling_ratios == null ? new float[dist.length] : sampling_ratios.clone();
    assert sampling_ratios.length == dist.length;
    if( ArrayUtils.minValue(sampling_ratios) == 0 && ArrayUtils.maxValue(sampling_ratios) == 0 ) {
      // compute sampling ratios to achieve class balance
      for (int i=0; i<dist.length;++i)
        sampling_ratios[i] = ((float)fr.numRows() / label.domain().length) / (float)dist[i]; // prior^-1 / num_classes
      final float inv_scale = ArrayUtils.minValue(sampling_ratios); //majority class has lowest required oversampling factor to achieve balance
      if (!Float.isNaN(inv_scale) && !Float.isInfinite(inv_scale))
        ArrayUtils.div(sampling_ratios, inv_scale); //want sampling_ratio 1.0 for majority class (no downsampling)
    }

    if (!allowOversampling)
      for (int i=0; i<sampling_ratios.length; ++i)
        sampling_ratios[i] = Math.min(1.0f, sampling_ratios[i]);

    // given these sampling ratios, and the original class distribution, this is the expected number of resulting rows
    float numrows = 0;
    for (int i=0; i<sampling_ratios.length; ++i)
      numrows += sampling_ratios[i] * dist[i];

    final long actualnumrows = Math.min(maxrows, Math.round(numrows)); //cap #rows at maxrows
    assert(actualnumrows >= 0); //can have no matching rows in case of sparse data where we had to fill in a makeZero() vector
    Log.info(""Stratified sampling to a total of "" + String.format(""%,d"", actualnumrows) + "" rows"" + (actualnumrows < numrows ? "" (limited by max_after_balance_size)."":"".""));

    if (actualnumrows != numrows) {
      ArrayUtils.mult(sampling_ratios, (float)actualnumrows/numrows); //adjust the sampling_ratios by the global rescaling factor
      if (verbose)
        Log.info(""Downsampling majority class by "" + (float)actualnumrows/numrows
                + "" to limit number of rows to "" + String.format(""%,d"", maxrows));
    }
    for (int i=0;i<label.domain().length;++i) {
      Log.info(""Class '"" + label.domain()[i] + ""' sampling ratio: "" + sampling_ratios[i]);
    }

    return sampleFrameStratified(fr, label, weights, sampling_ratios, seed, verbose);
  }","Stratified sampling for classifiers - FIXME: For weights, this is not accurate, as the sampling is done with uniform weights",1,962
1931,"public static <T extends Collection<?>> T noNullElements(T collection) {
        return noNullElements(collection, DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EXCEPTION_MESSAGE);
    }",Validate that the specified argument collection is neither null nor contains any elements that are null; otherwise throwing an exception.,1,41
1932,"public Hashtable getProperties() {
        PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
        return ph.getProperties();
    }",Returns a copy of the properties table.,1,38
1933,"public static int encodeLongitude(double longitude) {
    GeoUtils.checkLongitude(longitude);
    // the maximum possible value cannot be encoded without overflow
    if (longitude == 180.0D) {
      longitude = Math.nextDown(longitude);
    }
    return (int) Math.floor(longitude / LONGITUDE_DECODE);
  }",Quantizes double (64 bit) longitude into 32 bits (rounding down: in the direction of -180),1,79
1934,"private String findAvailableInstructorGoogleIdForCourse(String courseId){
        
        if(tempCourseIdToInstructorGoogleIdMap.get(courseId) != null){
            return tempCourseIdToInstructorGoogleIdMap.get(courseId);
        }
        
        List<InstructorAttributes> instructorList = logic.getInstructorsForCourse(courseId);
        
        if(instructorList == null || instructorList.isEmpty()){
            return """";
        }

        for (InstructorAttributes instructor : instructorList) {

            if (instructor.isRegistered() && instructor.hasCoownerPrivileges()) {
                tempCourseIdToInstructorGoogleIdMap.put(courseId, instructor.googleId);
                return instructor.googleId;
            }
        }

        for (InstructorAttributes instructor : instructorList) {

            if (instructor.isRegistered() && instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_INSTRUCTOR)) {
                tempCourseIdToInstructorGoogleIdMap.put(courseId, instructor.googleId);
                return instructor.googleId;
            }
        }

        return """";
    }",Finds the googleId of a registered instructor with co-owner privileges.,1,248
1935,"static public HistoricItem minimumSince(final Item item, AbstractInstant timestamp, String serviceName) {
		Iterable<HistoricItem> result = getAllStatesSince(item, timestamp, serviceName);
		Iterator<HistoricItem> it = result.iterator();
		HistoricItem minimumHistoricItem = null;
		DecimalType minimum = (DecimalType) item.getStateAs(DecimalType.class);
		while(it.hasNext()) {
			HistoricItem historicItem = it.next();
			State state = historicItem.getState();
			if (state instanceof DecimalType) {
				DecimalType value = (DecimalType) state;
				if(minimum==null || value.compareTo(minimum)<0) {
					minimum = value;
					minimumHistoricItem = historicItem;
				}
			}
		}
		if(minimumHistoricItem==null && minimum!=null) {
			// the minimal state is the current one, so construct a historic item on the fly
			final DecimalType state = minimum;
			return new HistoricItem() {
				
				public Date getTimestamp() {
					return Calendar.getInstance().getTime();
				}
				
				public State getState() {
					return state;
				}
				
				public String getName() {
					return item.getName();
				}
			};
		} else {
			return minimumHistoricItem;
		}
	}",Gets the historic item with the minimum value of the state of a given item since a certain point in time.,1,358
1936,"static Builder builder() {
		DefaultConfigurationBuilder builder = new DefaultConfigurationBuilder();
		builder.defaultConfiguration();
		return builder;
	}",Return a mutable builder for a  Configuration with a default initialization.,1,41
1937,"private static Node convert( final Node jenaNode )
	{
		
		if (jenaNode.isVariable())
		{
			return SecurityEvaluator.VARIABLE;
		}
		return jenaNode;
	}",May Convert a Jena Node object into the SecurityEvaluator.VARIABLE instance.,1,56
1938,"public String getContentType()
	{
		if (uploadedFiles != null && uploadedFiles.size() > 0)
		{
			return ServletFileUpload.MULTIPART_FORM_DATA + ""; boundary=abcdefgABCDEFG"";
		}

		return null;
	}",If there has been added uploaded files return the correct content-type.,1,66
1939,"public Parameters withMaxVideoBitrate(int maxVideoBitrate) {
      if (maxVideoBitrate == this.maxVideoBitrate) {
        return this;
      }
      return new Parameters(preferredAudioLanguage, preferredTextLanguage,
          allowMixedMimeAdaptiveness, allowNonSeamlessAdaptiveness, maxVideoWidth, maxVideoHeight,
          maxVideoBitrate, exceedVideoConstraintsIfNecessary, exceedRendererCapabilitiesIfNecessary,
          viewportWidth, viewportHeight, viewportOrientationMayChange);
    }",Returns an instance with the provided max video bitrate.,1,88
1940,"public static ProjectConfigDto asDto(ProjectConfig project) {
    return newDto(ProjectConfigDto.class)
        .withName(project.getName())
        .withPath(project.getPath())
        .withDescription(project.getDescription())
        .withSource(asDto(project.getSource()))
        .withAttributes(project.getAttributes())
        .withType(project.getType())
        .withMixins(project.getMixins());
  }",Converts abstract ProjectConfig to ProjectConfigDto,1,109
1941,"@SchedulerSupport(SchedulerSupport.NONE)
    public final TestObserver<Void> test() {
        TestObserver<Void> ts = new TestObserver<Void>();
        subscribe(ts);
        return ts;
    }",Creates a TestObserver and subscribes it to this Completable.,1,59
1942,"public boolean isBluetoothScoOn() {
        return (getRouting(MODE_IN_CALL) & ROUTE_BLUETOOTH_SCO) == 0 ? false : true;
    }",Checks whether audio routing to the Bluetooth headset is on or off.,1,41
1943,"public static <T> List<T> getAt(List<T> self, EmptyRange range) {
        return new ArrayList<T> ();
    }",Support the range subscript operator for a List.,1,47
1944,"public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {
		return createContainerManagedEntityManager(emf, null, true);
	}",Create an EntityManager whose lifecycle is managed by the container and which automatically joins a transaction when being invoked within its scope.,1,33
1945,"boolean needsSplit(Text midKey) {
    lock.obtainReadLock();
    try {
      Text key = new Text();
      long maxSize = 0;
      long aggregateSize = 0;
      for(HStore store: stores.values()) {
        long size = store.getLargestFileSize(key);
        aggregateSize += size;
        if(size > maxSize) {                      // Largest so far
          maxSize = size;
          midKey.set(key);
        }
      }
      long triggerSize =
        this.desiredMaxFileSize + (this.desiredMaxFileSize / 2);
      boolean split = (maxSize >= triggerSize || aggregateSize >= triggerSize);
      if (split) {
        LOG.info(""Splitting "" + getRegionName().toString() +
          "" because largest file is "" + StringUtils.humanReadableInt(maxSize) +
          "", aggregate size is "" +
          StringUtils.humanReadableInt(aggregateSize) +
          "" and desired size is "" +
          StringUtils.humanReadableInt(this.desiredMaxFileSize));
      }
      return split;
    } finally {
      lock.releaseReadLock();
    }
  }",Iterates through all the HStores and finds the one with the largest,1,300
1946,"public SOAPHeader getHeader() throws OMException {
        Iterator headerIterator = this.getChildrenWithName(new QName(OMConstants.HEADER_NAMESPACEURI, OMConstants.HEADER_LOCAL_NAME));
        SOAPHeader soapHeader = null;
        if (headerIterator.hasNext()) {
            soapHeader = (SOAPHeader) headerIterator.next();
        }

        return soapHeader;
    }",Returns the SOAPHeader object for this,1,93
1947,"public Map<String, Parameter> getParameters() {
        return Collections.unmodifiableMap(parameters);
    }",Get the parameters.,1,30
1948,"public <T> T getDiagramDefault(final LayoutOptionData<T> optionData) {
        EditPart part = getEditPart();
        if (part instanceof IPictogramElementEditPart) {
            IPictogramElementEditPart pePart = (IPictogramElementEditPart) part;
            Diagram diagram = pePart.getConfigurationProvider().getDiagram();
            return getOption(optionData, DIAG_PREFIX, diagram);
        }
        return null;
    }",Returns the default value for the selected diagram.,1,106
1949,"public int getValue(){
        return charset;
    }",Returns value of this charset,1,18
1950,"public static DecodedJWT decode(String token) throws JWTDecodeException {
        return JWTDecoder.decode(token);
    }",Decode a given JWT token.,1,33
1951,"public static String squeeze(String str, String set) {
        if (str == null || str.length() == 0 || set == null || set.length() == 0) {
            return str;
        }
        String[] strs = new String[1];
        strs[0] = set;
        return squeeze(str, strs);
    }",Squeezes any repititions of a character that is mentioned in the supplied set.,1,124
1952,"public static Configuration loadFromHadoopConfiguration(org.apache.hadoop.conf.Configuration source) {
    // Load TachyonConf if any and merge to the one in TachyonFS
    // Push TachyonConf to the Job conf
    Properties tachyonConfProperties = null;
    if (source.get(Constants.TACHYON_CONF_SITE) != null) {
      LOG.info(""Found TachyonConf site from Job configuration for Tachyon"");
      try {
        tachyonConfProperties = DefaultStringifier.load(source, Constants.TACHYON_CONF_SITE,
            Properties.class);
      } catch (IOException e) {
        LOG.error(""Unable to load TachyonConf from Hadoop configuration"", e);
        throw new RuntimeException(e);
      }
    }
    if (tachyonConfProperties == null) {
      tachyonConfProperties = new Properties();
    }
    // Load any Tachyon configuration parameters existing in the Hadoop configuration.
    for (Map.Entry<String, String> entry : source) {
      String propertyName = entry.getKey();
      // TODO(gene): use a better way to enumerate every Tachyon configuration parameter
      if (propertyName.startsWith(""alluxio."")
          || propertyName.equals(Constants.S3_ACCESS_KEY)
          || propertyName.equals(Constants.S3_SECRET_KEY)) {
        tachyonConfProperties.put(propertyName, entry.getValue());
      }
    }
    LOG.info(""Loading Tachyon properties from Hadoop configuration: {}"", tachyonConfProperties);
    return new Configuration(tachyonConfProperties);
  }",Loads  Configuration from Hadoop  org.apache.hadoop.conf.Configuration source.,1,308
1953,"private int seqNoToBitSetOffset(final long seqNo) {
        assert Thread.holdsLock(this);
        return Math.toIntExact(seqNo % BIT_SET_SIZE);
    }",Obtain the position in the bit set corresponding to the provided sequence number.,1,44
1954,"protected String getID(EObject eObject) {
		if (eObject.eIsProxy()) {
			return ((InternalEObject)eObject).eProxyURI().fragment();
		}
		String identifier = EcoreUtil.getID(eObject);
		if (identifier == null) {
			final Resource eObjectResource = eObject.eResource();
			if (eObjectResource instanceof XMIResource) {
				identifier = ((XMIResource)eObjectResource).getID(eObject);
			}
		}
		return identifier;
	}","This will be used to determine what represents the ""identifier"" of an EObject.",1,139
1955,"protected List<String> getIngestedList()
    {
        // We have the list of ingested objects in our IngestedMap.
        // So, we simply have to convert that Collection to a List
        java.util.Collection<String> coll = pkgIngestedMap.values();
        
        if(coll instanceof List)
            return (List) coll;
        else
            return new ArrayList(coll);
    }",Return List of all DSpaceObject Identifiers which have been ingested/replaced by this instance of the Ingester.,1,80
1956,"public static String completeIncremental(String version) throws ValidationException {
    Semver semver = new Semver(version, LOOSE);
    Optional<Integer> minor = Optional.ofNullable(semver.getMinor());
    Optional<Integer> patch = Optional.ofNullable(semver.getPatch());
    if (!minor.isPresent() || !patch.isPresent()) {
      version = create(semver.getMajor(), minor.orElse(0), patch.orElse(0)).toString();
    }
    if (!isVersionValid(version)) {
      throw new ValidationException(""Version is invalid: "" + version);
    }
    return getBaseVersion(version);
  }",It completes the incremental version number with 0 in the event the version provided has the form x to become x.0.0 or x.y to become x.y.0,1,188
1957,"protected boolean isComplete(Expression expression) {
		return isAppendable(expression, AppendableType.COMPLETE);
	}",Determines whether the given  Expression is grammatically complete.,1,30
1958,"public static BackendHandler createBackendHandler(final int sequenceId, final String sql, final BackendConnection backendConnection, final DatabaseType databaseType) {
        SQLStatement sqlStatement = new SQLJudgeEngine(sql).judge();
        if (SQLType.DCL == sqlStatement.getType() || sqlStatement instanceof SetStatement) {
            return new SchemaBroadcastBackendHandler(sequenceId, sql, backendConnection, databaseType);
        }
        if (sqlStatement instanceof UseStatement || sqlStatement instanceof ShowDatabasesStatement) {
            return new SchemaIgnoreBackendHandler(sqlStatement, backendConnection);
        }
        if (sqlStatement instanceof ShowOtherStatement) {
            return new SchemaUnicastBackendHandler(sequenceId, sql, backendConnection, DatabaseType.MySQL);
        }
        return BackendHandlerFactory.newTextProtocolInstance(sequenceId, sql, backendConnection, DatabaseType.MySQL);
    }",Create new com query backend handler instance by SQL judge.,1,211
1959,"private int getDns() {
        DhcpInfo addressInfo = mWifiManager.getDhcpInfo();
        if (addressInfo != null) {
            return addressInfo.dns1;
        } else {
            return -1;
        }
    }",Gets the DNS of the current AP.,1,66
1960,"public String controlEndpoint()
    {
        return controlEndpoint;
    }",Get the control address:port pair for dynamically joining a multi-destination-cast publication.,1,20
1961,"public static RPCBlockResponse decode(ByteBuf in) {
    long blockId = in.readLong();
    long offset = in.readLong();
    long length = in.readLong();
    short status = in.readShort();
    DataBuffer data = null;
    if (length > 0) {
      // TODO: look into accessing Netty ByteBuf directly, to avoid copying the data.
      ByteBuffer buffer = ByteBuffer.allocate((int) length);
      in.readBytes(buffer);
      data = new DataByteBuffer(buffer, (int) length);
    }
    return new RPCBlockResponse(blockId, offset, length, data, Status.fromShort(status));
  }",Decode the input  ByteBuf into a  RPCBlockResponse object and return it.,1,179
1962,"Tab getTab(int index) {
        if (index >= 0 && index < mTabs.size()) {
            return mTabs.get(index);
        }
        return null;
    }",Return the tab at the specified index.,1,61
1963,"protected ProjectStructure tgzProjectAssert(byte[] content) {
		return getProjectStructure(content, ArchiveType.TGZ);
	}",Return a  ProjectStructure for the following TGZ archive.,1,32
1964,"public DslElementSyntaxBuilder withGeneric(MetadataType type, DslElementSyntax child)
    {
        if (child == null)
        {
            throw new IllegalArgumentException(""Invalid child declaration, child element should not be null"");
        }

        this.genericChilds.put(type, child);
        return this;
    }",Adds a  DslElementSyntax childElement declaration to  this  DslElementSyntax that represents a generic type of  this element.,1,74
1965,"@Override
  public Map<CurrencyPair, ? extends TradeMetaData> getTradeServiceHelperMap() throws ExchangeException, NotAvailableFromExchangeException, NotYetImplementedForExchangeException, IOException {
    throw new NotAvailableFromExchangeException();
  }",Fetch the  com.xeiam.xchange.dto.marketdata.TradeMetaData from the exchange.,1,49
1966,"@Override
    public Vector3D parse(final String source, final ParsePosition pos) {
        final double[] coordinates = parseCoordinates(3, source, pos);
        if (coordinates == null) {
            return null;
        }
        return new Cartesian3D(coordinates[0], coordinates[1], coordinates[2]);
    }",Parses a string to produce a  Vector3D object.,1,100
1967,"public BuildExecutorArgs createBuilderArgs() {
    return BuildExecutorArgs.builder()
        .setConsole(getConsole())
        .setBuckEventBus(getBuckEventBus())
        .setPlatform(getPlatform())
        .setClock(getClock())
        .setRootCell(getCell())
        .setExecutors(getExecutors())
        .setProjectFilesystemFactory(getProjectFilesystemFactory())
        .setBuildInfoStoreManager(getBuildInfoStoreManager())
        .build();
  }",Create  BuildExecutorArgs using this  CommandRunnerParams.,1,101
1968,"public static JobMetrics remove(String jobId) {
    return METRICS_MAP.remove(jobId);
  }",Remove the  JobMetrics instance for the given job.,1,29
1969,"public double calculateTotalSumOfSquares() {
        if (isNoIntercept()) {
            return StatUtils.sumSq(Y.getData());
        } else {
            return new SecondMoment().evaluate(Y.getData());
        }
    }","Returns the sum of squared deviations of Y from its mean. If the model has no intercept term, 0 is used for the mean of Y - i.e., what is returned is the sum of the squared Y values. The value returned by this method is the SSTO value used in the  #calculateRSquared() R-squared computation.",1,68
1970,"public Locale getLocale()
	{
		Locale locale = null;
		if (parent != null)
		{
			locale = parent.getLocale();
		}
		return (locale != null) ? locale : getSession().getLocale();
	}",Gets the locale for this component.,1,81
1971,"public static HttpServer createHttpServer(final URI uri, final ApplicationHandler appHandler) throws ProcessingException {
        return createHttpServer(uri, new JdkHttpHandlerContainer(appHandler));
    }",Creates and starts the  HttpServer JDK HttpServer with the,1,48
1972,"private static String getBindingSet(final String triple, final String pattern, final VariableOrder varOrder) {
        final String[] patternArray = pattern.split(DELIM);
        final String[] tripleArray = triple.split(DELIM);
        final String[] varOrderArray = varOrder.toArray();
        final Map<String,String> bindingValues = Maps.newHashMap();

        if(patternArray.length != 3 || tripleArray.length != 3) {
            throw new IllegalArgumentException(""Invald number of components"");
        }

        // Extract the binding names and values.
        for(int i = 0; i < 3; i ++) {
            if(patternArray[i].startsWith(""-const-"")) {
                // If a constant value does not match, then the triple does not match the pattern.
                if(!patternArray[i].substring(7).equals(tripleArray[i])) {
                    return """";
                }
            } else{
                bindingValues.put(patternArray[i], tripleArray[i]);
            }
        }

        // Create the returned binding set string from the extracted values.
        String bindingSetString = """";
        for (final String bindingName : varOrderArray) {
            if(bindingSetString.length() == 0) {
                bindingSetString = bindingValues.get(bindingName);
            } else {
                bindingSetString = bindingSetString + DELIM + bindingValues.get(bindingName);
            }
        }

        return bindingSetString;
    }",Determines whether a triple matches a Statement Pattern.,1,375
1973,"public static NodeApiVersions create(short apiKey, short minVersion, short maxVersion) {
        return create(Collections.singleton(new ApiVersion(apiKey, minVersion, maxVersion)));
    }",Create a NodeApiVersions object with a single ApiKey.,1,53
1974,"public Annotation annotate(File file, String revision) throws IOException {
        ArrayList<String> cmd = new ArrayList<>();
        ensureCommand(CMD_PROPERTY_KEY, CMD_FALLBACK);
        cmd.add(RepoCommand);
        cmd.add(""annotate"");
        cmd.add(getQuietOption());
        if (revision != null) {
            cmd.add(""-r"");
            cmd.add(revision);
        }
        cmd.add(file.getName());
        File directory = new File(getDirectoryName());

        Executor executor = new Executor(cmd, directory,
                RuntimeEnvironment.getInstance().getInteractiveCommandTimeout());
        MonotoneAnnotationParser parser = new MonotoneAnnotationParser(file);
        int status = executor.exec(true, parser);
        if (status != 0) {
            LOGGER.log(Level.WARNING,
                    ""Failed to get annotations for: \""{0}\"" Exit code: {1}"",
                    new Object[]{file.getAbsolutePath(), String.valueOf(status)});
            throw new IOException(executor.getErrorString());
        } else {
            return parser.getAnnotation();
        }
    }",Annotate the specified file/revision using the  mnt annotate command.,1,309
1975,"public IndexAnalysisSettings[] read(IndexReader reader, int n)
            throws IOException {
        IndexSearcher searcher = new IndexSearcher(reader);
        Query q;
        try {
            q = new QueryParser(QueryBuilder.OBJUID, new CompatibleAnalyser()).
                parse(INDEX_ANALYSIS_SETTINGS_OBJUID);
        } catch (ParseException ex) {
            // This is not expected, so translate to RuntimeException.
            throw new RuntimeException(ex);
        }
        TopDocs top = searcher.search(q, n);

        int nres = top.totalHits > n ? n : (int)top.totalHits;
        IndexAnalysisSettings[] res = new IndexAnalysisSettings[nres];

        for (int i = 0; i < nres; ++i) {
            Document doc = searcher.doc(top.scoreDocs[i].doc);
            IndexableField objser = doc.getField(QueryBuilder.OBJSER);
            try {
                res[i] = objser == null ? null :
                    IndexAnalysisSettings.deserialize(
                        objser.binaryValue().bytes);
            } catch (ClassNotFoundException ex) {
                // This is not expected, so translate to RuntimeException.
                throw new RuntimeException(ex);
            }
        }
        return res;
    }",Searches for documents with a  QueryBuilder#OBJUID value matching  #INDEX_ANALYSIS_SETTINGS_OBJUID.,1,327
1976,"public static CompletableFuture<Object> anyOf(CompletableFuture<?>... cfs) {
        int len = cfs.length; // Same idea as allOf
        if (len > 1)
            return anyTree(cfs, 0, len - 1);
        else {
            CompletableFuture<Object> dst = new CompletableFuture<Object>();
            CompletableFuture<?> f;
            if (len == 0)
                ; // skip
            else if ((f = cfs[0]) == null)
                throw new NullPointerException();
            else {
                ThenCopy<Object> d = null;
                CompletionNode p = null;
                Object r;
                while ((r = f.result) == null) {
                    if (d == null)
                        d = new ThenCopy<Object>(f, dst);
                    else if (p == null)
                        p = new CompletionNode(d);
                    else if (UNSAFE.compareAndSwapObject
                             (f, COMPLETIONS, p.next = f.completions, p))
                        break;
                }
                if (r != null && (d == null || d.compareAndSet(0, 1))) {
                    Throwable ex; Object t;
                    if (r instanceof AltResult) {
                        ex = ((AltResult)r).ex;
                        t = null;
                    }
                    else {
                        ex = null;
                        t = r;
                    }
                    dst.internalComplete(t, ex);
                }
                f.helpPostComplete();
            }
            return dst;
        }
    }","Returns a new CompletableFuture that is completed when any of the given CompletableFutures complete, with the same result.",1,457
1977,"public static String normalizeDestinationName(String destination, boolean includePrefix) {
        if (ObjectHelper.isEmpty(destination)) {
            return destination;
        }
        if (destination.startsWith(QUEUE_PREFIX)) {
            String s = removeStartingCharacters(destination.substring(QUEUE_PREFIX.length()), '/');
            if (includePrefix) {
                s = QUEUE_PREFIX + ""//"" + s;
            }
            return s;
        } else if (destination.startsWith(TEMP_QUEUE_PREFIX)) {
            String s = removeStartingCharacters(destination.substring(TEMP_QUEUE_PREFIX.length()), '/');
            if (includePrefix) {
                s = TEMP_QUEUE_PREFIX + ""//"" + s;
            }
            return s;
        } else if (destination.startsWith(TOPIC_PREFIX)) {
            String s = removeStartingCharacters(destination.substring(TOPIC_PREFIX.length()), '/');
            if (includePrefix) {
                s = TOPIC_PREFIX + ""//"" + s;
            }
            return s;
        } else if (destination.startsWith(TEMP_TOPIC_PREFIX)) {
            String s = removeStartingCharacters(destination.substring(TEMP_TOPIC_PREFIX.length()), '/');
            if (includePrefix) {
                s = TEMP_TOPIC_PREFIX + ""//"" + s;
            }
            return s;
        } else {
            return destination;
        }
    }",Normalizes the destination name.,1,374
1978,"private static int hexToInt(String hexString) {
		return Integer.valueOf(hexString, 16);
	}",Converts a Char representing a hexadecimal number into an Integer.,1,32
1979,"public static Vector3 fromString (String v) {
		int s0 = v.indexOf(',', 1);
		int s1 = v.indexOf(',', s0 + 1);
		if (s0 != -1 && s1 != -1 && v.charAt(0) == '(' && v.charAt(v.length() - 1) == ')') {
			try {
				float x = Float.parseFloat(v.substring(1, s0));
				float y = Float.parseFloat(v.substring(s0 + 1, s1));
				float z = Float.parseFloat(v.substring(s1 + 1, v.length() - 1));
				return new Vector3(x, y, z);
			} catch (NumberFormatException ex) {
				// Throw a GdxRuntimeException
			}
		}
		throw new GdxRuntimeException(""Malformed Vector3: "" + v);
	}",Parses the  Vector3 represented by the given string according to the format of  #toString().,1,269
1980,"public int copyRecursiveTo(final String fileMask, final String excludes, final FilePath target) throws IOException, InterruptedException {
        if(this.channel==target.channel) {
            // local to local copy.
            return act(new FileCallable<Integer>() {
                private static final long serialVersionUID = 1L;
                public Integer invoke(File base, VirtualChannel channel) throws IOException {
                    if(!base.exists())  return 0;
                    assert target.channel==null;

                    try {
                        class CopyImpl extends Copy {
                            private int copySize;

                            public CopyImpl() {
                                setProject(new org.apache.tools.ant.Project());
                            }

                            @Override
                            protected void doFileOperations() {
                                copySize = super.fileCopyMap.size();
                                super.doFileOperations();
                            }

                            public int getNumCopied() {
                                return copySize;
                            }
                        }

                        CopyImpl copyTask = new CopyImpl();
                        copyTask.setTodir(new File(target.remote));
                        copyTask.addFileset(Util.createFileSet(base,fileMask,excludes));
                        copyTask.setOverwrite(true);
                        copyTask.setIncludeEmptyDirs(false);

                        copyTask.execute();
                        return copyTask.getNumCopied();
                    } catch (BuildException e) {
                        throw new IOException2(""Failed to copy ""+base+""/""+fileMask+"" to ""+target,e);
                    }
                }
            });
        } else
        if(this.channel==null) {
            // local -> remote copy
            final Pipe pipe = Pipe.createLocalToRemote();

            Future<Void> future = target.actAsync(new FileCallable<Void>() {
                private static final long serialVersionUID = 1L;
                public Void invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        readFromTar(remote+'/'+fileMask, f,TarCompression.GZIP.extract(pipe.getIn()));
                        return null;
                    } finally {
                        pipe.getIn().close();
                    }
                }
            });
            int r = writeToTar(new File(remote),fileMask,excludes,TarCompression.GZIP.compress(pipe.getOut()));
            try {
                future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
            return r;
        } else {
            // remote -> local copy
            final Pipe pipe = Pipe.createRemoteToLocal();

            Future<Integer> future = actAsync(new FileCallable<Integer>() {
                private static final long serialVersionUID = 1L;
                public Integer invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        return writeToTar(f,fileMask,excludes,TarCompression.GZIP.compress(pipe.getOut()));
                    } finally {
                        pipe.getOut().close();
                    }
                }
            });
            try {
                readFromTar(remote+'/'+fileMask,new File(target.remote),TarCompression.GZIP.extract(pipe.getIn()));
            } catch (IOException e) {// BuildException or IOException
                try {
                    future.get(3,TimeUnit.SECONDS);
                    throw e;    // the remote side completed successfully, so the error must be local
                } catch (ExecutionException x) {
                    // report both errors
                    throw new IOException2(Functions.printThrowable(e),x);
                } catch (TimeoutException _) {
                    // remote is hanging
                    throw e;
                }
            }
            try {
                return future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
        }
    }",Copies the files that match the given file mask to the specified target node.,1,985
1981,"public static int parseTrueHdSyncframeAudioSampleCount(ByteBuffer buffer) {
    // TODO: Link to specification if available.
    if (buffer.getInt(buffer.position() + 4) != 0xBA6F72F8) {
      return 0;
    }
    return 40 << (buffer.get(buffer.position() + 8) & 0x07);
  }","Reads the number of audio samples represented by the given TrueHD syncframe, or 0 if the buffer is not the start of a syncframe.",1,87
1982,"public static Method findMethod(Class<?> clazz, String name) {
		return findMethod(clazz, name, new Class<?>[0]);
	}",Attempt to find a  Method on the supplied class with the supplied name and no parameters.,1,49
1983,"public long getContainerDiskHint(Map<String, List<String>> packing) {
    long defaultContainerDisk =
        instanceDiskDefault * getLargestContainerSize(packing) + DEFAULT_DISK_PADDING;

    List<TopologyAPI.Config.KeyValue> topologyConfig = topology.getTopologyConfig().getKvsList();

    String diskHint = TopologyUtility.getConfigWithDefault(
        topologyConfig, Config.TOPOLOGY_CONTAINER_DISK_REQUESTED, Double.toString(defaultContainerDisk));

    return Long.parseLong(diskHint);
  }",Provide disk per container.,1,116
1984,"private boolean isJavaDocVersionAtLeast( float requiredVersion )
    {
        return fJavadocVersion >= requiredVersion;
    }",Is the Javadoc version at least the requested version.,1,30
1985,"protected TCPConnection createConnection() {
        // Create the configuration for this new connection
        ConnectionConfiguration config = new ConnectionConfiguration(host, port);
        config.setCompressionEnabled(compressionEnabled);
        config.setSendPresence(sendInitialPresence());
        if (getSocketFactory() == null) {
            config.setSocketFactory(getSocketFactory());
        }
        return new TCPConnection(config);
    }",Creates a new TCPConnection using the connection preferences.,1,95
1986,"public String getClientInfo(String name) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCodeCall(""getClientInfo"", name);
            }
            checkClosed();
        	  Properties p = getClientInfo();
            return p.getProperty(name);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }",Get a client property.,1,105
1987,"public long executeInsert() {
        mDatabase.lock();
        boolean logStats = mDatabase.mLogStats;
        long startTime = logStats ? SystemClock.elapsedRealtime() : 0;

        acquireReference();
        try {
            if (SQLiteDebug.DEBUG_SQL_STATEMENTS) {
                Log.v(TAG, ""executeInsert() for ["" + mSql + ""]"");
            }
            native_execute();
            if (logStats) {
                mDatabase.logTimeStat(false /* write */, startTime, SystemClock.elapsedRealtime());
            }
            return mDatabase.lastInsertRow();
        } finally {
            releaseReference();
            mDatabase.unlock();
        }
    }",Execute this SQL statement and return the ID of the most recently inserted row.,1,178
1988,"public List<Parser> getParsers() {
		return parsers;
	}",Returns the parsers in this group.,1,22
1989,"public Version getVersion() {
        if (version == null && namespace != null) {
            switch (namespace) {
                case Tags.NAMESPACE_V10: return GPXStore.V1_0;
                case Tags.NAMESPACE_V11: return GPXStore.V1_1;
            }
        }
        return version;
    }","Returns the GPX file version, or  null if unknown.",1,88
1990,"public static boolean equalState(XBaseObject objectA, XBaseObject objectB) {
		
		if(objectA == null && objectB == null) {
			return true;
		}
		
		// one of them is null, the other isn't
		if(objectA == null || objectB == null) {
			return false;
		}
		
		if(!objectA.getID().equals(objectB.getID())) {
			return false;
		}
		
		if(objectA.getRevisionNumber() != objectB.getRevisionNumber()) {
			return false;
		}
		
		for(XID fieldId : objectA) {
			
			XBaseField fieldA = objectA.getField(fieldId);
			XBaseField fieldB = objectB.getField(fieldId);
			
			if(fieldB == null) {
				return false;
			}
			
			if(!equalState(fieldA, fieldB)) {
				return false;
			}
			
		}
		
		for(XID fieldId : objectB) {
			
			if(objectA.getField(fieldId) == null) {
				return false;
			}
			
		}
		
		return true;
	}","Check if two  XBaseObjects have the same  XID, the same revision and the same  XBaseFields as defined by  #equalState(XBaseField, XBaseField).",1,320
1991,"public static ModelControllerClient create(final String hostName, final int port, final CallbackHandler handler) throws UnknownHostException {
            //return new ModelControllerClient(hostName, port, handler);
            return new AbstractModelControllerClient() {
                @Override
                protected ManagementClientChannelStrategy getClientChannelStrategy() throws URISyntaxException, IOException {
                    return ManagementClientChannelStrategy.create(hostName, port, executor, this, handler);
                }
            };
        }",Create a client instance for a remote address and port and CallbackHandler.,1,103
1992,"public static UriComponentsBuilder fromMethodName(Class<?> controllerType, String methodName, Object... argumentValues) {
		Method method = getMethod(controllerType, methodName, argumentValues);
		return fromMethod(method, argumentValues);
	}",Create a  UriComponentsBuilder from the mapping of a controller method and an array of method argument values.,1,65
1993,"public List<InstanceProperties> getProperties(String namespace) {
        Preferences prefs = NbPreferences.forModule(InstancePropertiesManager.class);

        try {
            prefs = prefs.node(namespace);
            prefs.flush();

            List<InstanceProperties> allProperties = new ArrayList<InstanceProperties>();
            synchronized (this) {
                for (String id : prefs.childrenNames()) {
                    Preferences child = prefs.node(id);
                    InstanceProperties props = cache.get(child);
                    if (props == null) {
                        props = new DefaultInstanceProperties(id, this, child);
                        cache.put(child, props);
                    }
                    allProperties.add(props);
                }
            }
            return allProperties;
        } catch (BackingStoreException ex) {
            LOGGER.log(Level.INFO, null, ex);
            throw new IllegalStateException(ex);
        }
    }",Returns all existing properties created in the given namespace.,1,255
1994,"public int read() throws IOException {
        int num = read(oneBuf, 0, 1);
        return num == -1 ? -1 : ((int) oneBuf[0]) & BYTE_MASK;
    }",Reads a byte from the current tar archive entry.,1,70
1995,"public List<Task> getMappedTasks(TaskMapperContext taskMapperContext) throws TerminateWorkflowException {

        logger.debug(""TaskMapperContext {} in SimpleTaskMapper"", taskMapperContext);

        WorkflowTask taskToSchedule = taskMapperContext.getTaskToSchedule();
        Workflow workflowInstance = taskMapperContext.getWorkflowInstance();
        int retryCount = taskMapperContext.getRetryCount();
        String retriedTaskId = taskMapperContext.getRetryTaskId();

        TaskDef taskDefinition = Optional.ofNullable(taskToSchedule.getTaskDefinition())
                .orElseThrow(() -> {
                    String reason = String.format(""Invalid task. Task %s does not have a definition"", taskToSchedule.getName());
                    return new TerminateWorkflowException(reason);
                });

        Map<String, Object> input = parametersUtils.getTaskInput(taskToSchedule.getInputParameters(), workflowInstance, taskDefinition, taskMapperContext.getTaskId());
        Task simpleTask = new Task();
        simpleTask.setStartDelayInSeconds(taskToSchedule.getStartDelay());
        simpleTask.setTaskId(taskMapperContext.getTaskId());
        simpleTask.setReferenceTaskName(taskToSchedule.getTaskReferenceName());
        simpleTask.setInputData(input);
        simpleTask.setWorkflowInstanceId(workflowInstance.getWorkflowId());
        simpleTask.setWorkflowType(workflowInstance.getWorkflowName());
        simpleTask.setStatus(Task.Status.SCHEDULED);
        simpleTask.setTaskType(taskToSchedule.getName());
        simpleTask.setTaskDefName(taskToSchedule.getName());
        simpleTask.setCorrelationId(workflowInstance.getCorrelationId());
        simpleTask.setScheduledTime(System.currentTimeMillis());
        simpleTask.setRetryCount(retryCount);
        simpleTask.setCallbackAfterSeconds(taskToSchedule.getStartDelay());
        simpleTask.setResponseTimeoutSeconds(taskDefinition.getResponseTimeoutSeconds());
        simpleTask.setWorkflowTask(taskToSchedule);
        simpleTask.setRetriedTaskId(retriedTaskId);
        return Arrays.asList(simpleTask);
    }",This method maps a  WorkflowTask of type  TaskType#SIMPLE to a  Task,1,422
1996,"public static AttributeConverter createHardCoded(final ModelNode hardCodedValue, final boolean undefinedOnly) {
            return new DefaultAttributeConverter() {
                @Override
                public void convertAttribute(PathAddress address, String name, ModelNode attributeValue, TransformationContext context) {
                    if (!undefinedOnly || !attributeValue.isDefined()) {
                        attributeValue.set(hardCodedValue);
                    }
                }
            };
        }","Creates an AttributeConverter where the conversion is to a hard-coded value, with the ability to restrict the conversion to cases where the value being converted is  org.jboss.dmr.ModelType#UNDEFINED.",1,109
1997,"public static LocalFilePacketWriter createLocalPacketWriter(BlockWorkerClient blockWorkerClient,
      long blockId) throws IOException {
    return new LocalFilePacketWriter(blockWorkerClient, blockId);
  }",Creates an instance of  LocalFilePacketWriter.,1,42
1998,"private boolean eventTargetsPartner(Event event) {
    if (autoHidePartners == null) {
      return false;
    }

    Element target = event.getTarget();
    for (Element elem : autoHidePartners) {
      if (elem.isOrHasChild(target)) {
        return true;
      }
    }
    return false;
  }",Does the event target one of the partner elements?,1,101
1999,"protected ResizePolicy getResizePolicy() {
		return getTargetPart().getAdapter(ResizePolicy.class);
	}",Returns the  ResizePolicy that is installed on the  #getTargetPart().,1,28
2000,"protected List<List<DataflowGraphTableData>> createDataFields(Node node) {
        List<DataFlowNode> flow = node.getDataFlowNode().getFlow();

        // the whole TableData
        List<List<DataflowGraphTableData>> tableData = new ArrayList<List<DataflowGraphTableData>>();

        for (DataFlowNode inode : flow) {
            // one Data-List for a row
            List<DataflowGraphTableData> rowData = new ArrayList<DataflowGraphTableData>();

            // 1. The Nodes Line
            rowData.add(new DataflowGraphTableData(String.valueOf(inode.getLine()), SWT.CENTER));

            // 2. empty, because the Graph is shown in this column
            rowData.add(null);

            // 3. the Numbers of the next Nodes           
            String cellContent = nextNodeNumberStringFrom(inode);
            rowData.add(new DataflowGraphTableData(cellContent, SWT.LEFT | SWT.WRAP));
            
            // 4. The Dataflow occurrences (definition, undefinition, reference) in this Line of Code
            cellContent = referenceStringFrom(inode);
            if (cellContent != null) {
                rowData.add(new DataflowGraphTableData(cellContent, SWT.LEFT | SWT.WRAP));
            } else {
                rowData.add(null);
            }

            // 5. The Line of Code itself
            if (resourceString != null) {
            	cellContent = getCodeLine(resourceString, inode.getLine()).trim();
                rowData.add(new DataflowGraphTableData(cellContent, SWT.LEFT | SWT.WRAP));
            } else {
                rowData.add(null);
            }

            tableData.add(rowData);
        }

        return tableData;
    }","Creates an List (#Rows) of List (#Columns) with TableData in it, provides the Input for the Table",1,377
2001,"@Nonnull
  @CheckReturnValue
  public AbstractHCCell addAndReturnCell (@Nullable final String... aCellTexts)
  {
    return addCell ().addChildren (aCellTexts);
  }",Add a single cell with the given text elements.,1,46
2002,"private static LatLng parseCoordinate(JSONArray coordinates) throws JSONException {
        // GeoJSON stores coordinates as Lng, Lat so we need to reverse
        return new LatLng(coordinates.getDouble(1), coordinates.getDouble(0));
    }",Parses an array containing a coordinate into a LatLng object,1,49
2003,"public static Parser.Literal str(String s) {
		return new Parser.Literal(s);
	}",Shortcut for  new Parser.Literal(s).,1,33
2004,"public int getNormalThreshold() {
        return THRESHOLD_VALIDATION.getNormalThreshold(normalThreshold, highThreshold);
    }",Returns the minimum number of duplicate lines for normal warnings.,1,27
2005,"public static <S extends Publisher<T>, T> BodyInsertor<S> fromPublisher(S publisher,
			ResolvableType elementType) {

		Assert.notNull(publisher, ""'publisher' must not be null"");
		Assert.notNull(elementType, ""'elementType' must not be null"");
		return BodyInsertor.of(
				(response, configuration) -> writeWithMessageWriters(response, configuration,
						publisher, elementType),
				() -> publisher
		);
	}",Return a  BodyInsertor that writes the given  Publisher.,1,118
2006,"public Map<LogicalReference, Set<LogicalWire>> getWires() {
        return wires;
    }",Returns a map of wires keyed by logical reference contained in this composite.,1,28
2007,"public boolean hasTag(Class<? extends Tag> tag) {
        if (tag == StandardTags.StatementTag.class) {
            return isSourceInstrumentationEnabled();
        } else {
            return false;
        }
    }","If this node  LLVMInstrumentableNode#isSourceInstrumentationEnabled() is enabled for source-level instrumentatipon, this function considers the node to be tagged with  com.oracle.truffle.api.instrumentation.StandardTags.StatementTag.",1,65
2008,"@SuppressWarnings(""unchecked"")
    public Collection<String> getPropertyKeys(Object obj) {
        if (isArray(obj)) {
          throw new UnsupportedOperationException();
        } else {
            return ((Map) obj).keySet();
        }
    }",Returns the keys from the given object,1,75
2009,"public static <T> boolean push(List<T> self, T value) {
        self.add(0, value);
        return true;
    }","Prepends an item to the start of the List, similar to push on a stack.",1,48
2010,"public String getMessageName() {
    String messageName = null;

    if (isBare()) {
      messageName = method.getDeclaringEndpointInterface().getSimpleName() + ""."" + method.getSimpleName();
    }
    
    return messageName;
  }","The message name of the message for this parameter, if this is a BARE web param.",1,76
2011,"public ArrayList<Animator> getChildAnimations() {
        ArrayList<Animator> childList = new ArrayList<Animator>();
        for (Node node : mNodes) {
            childList.add(node.animation);
        }
        return childList;
    }",Returns the current list of child Animator objects controlled by this,1,71
2012,"protected AuroraController getController() {
    return new AuroraController(
        Runtime.topologyName(runtime),
        Context.cluster(config),
        Context.role(config),
        Context.environ(config),
        Context.verbose(config));
  }",Get an AuroraControl basing on the config and runtime,1,67
2013,"public int getHeaderSize() {
        return this.headerSize;
    }",Get the header size for this CPIO format,1,21
2014,"public Parameters withViewportSizeFromContext(Context context, boolean orientationMayChange) {
      // Assume the viewport is fullscreen.
      Point viewportSize = Util.getPhysicalDisplaySize(context);
      return withViewportSize(viewportSize.x, viewportSize.y, orientationMayChange);
    }",Returns a  Parameters instance where the viewport size is obtained from the provided  Context.,1,58
2015,"private static InternalMessage transformModifyRequest( LdapMessageCodec codecMessage, int messageId )
    {
        ModifyRequestImpl internalMessage = new ModifyRequestImpl( messageId );
        ModifyRequestCodec modifyRequest = codecMessage.getModifyRequest();

        // Codec : LdapDN object -> Internal : String name
        internalMessage.setName( modifyRequest.getObject() );

        // Codec : ArrayList modifications -> Internal : ArrayList mods
        if ( modifyRequest.getModifications() != null )
        {
            // Loop through the modifications
            for ( Modification modification:modifyRequest.getModifications() )
            {
                internalMessage.addModification( modification );
            }
        }

        return internalMessage;
    }",Transform a ModifyRequest message from a CodecMessage to a InternalMessage,1,148
2016,"public static GooglePaymentCardNonce fromJson(String json) throws JSONException {
        GooglePaymentCardNonce googlePaymentCardNonce = new GooglePaymentCardNonce();
        googlePaymentCardNonce.fromJson(GooglePaymentCardNonce.getJsonObjectForType(API_RESOURCE_KEY, json));

        return googlePaymentCardNonce;
    }",Convert an API response to a  GooglePaymentCardNonce.,1,60
2017,"public CommandCallback findCommandCallback(String name, ClassLoader cl) {
        synchronized (callbackCache) {
            
            if (!callbackCache.containsKey(name)) {
                try {
                    CommandCallback commandCallbackInstance = (CommandCallback) Class.forName(name, true, cl).newInstance();
                    return commandCallbackInstance;
                    //                            callbackCache.put(name, commandCallbackInstance);
                } catch (Exception ex) {
                    throw new IllegalArgumentException(""Unknown Command implemenation with name '"" + name + ""'"");
                }

            } else {
                CommandCallback cmdCallback = callbackCache.get(name);
                if (!cmdCallback.getClass().getClassLoader().equals(cl)) {
                    callbackCache.remove(name);
                    try {
                        CommandCallback commandCallbackInstance = (CommandCallback) Class.forName(name, true, cl).newInstance();
                        callbackCache.put(name, commandCallbackInstance);
                    } catch (Exception ex) {
                        throw new IllegalArgumentException(""Unknown Command implemenation with name '"" + name + ""'"");
                    }
                }
            }

        }
        return callbackCache.get(name);
    }",Finds command callback by FQCN and if not found loads the class and store the instance in the cache.,1,290
2018,"@SuppressWarnings(""unchecked"")
  public static <T extends gobblin.dataset.Dataset> DatasetsFinder<T> instantiateDatasetFinder(Properties props, FileSystem fs,
      String default_class, Object... additionalArgs) throws IOException {
    String className = default_class;
    if (props.containsKey(DATASET_PROFILE_CLASS_KEY)) {
      className = props.getProperty(DATASET_PROFILE_CLASS_KEY);
    }
    try {
      Class<?> datasetFinderClass = Class.forName(className);
      List<Object> args = Lists.newArrayList(fs, props);
      if (additionalArgs != null) {
        args.addAll(Lists.newArrayList(additionalArgs));
      }
      return (DatasetsFinder<T>) GobblinConstructorUtils.invokeLongestConstructor(datasetFinderClass, args.toArray());
    } catch (ReflectiveOperationException exception) {
      throw new IOException(exception);
    }

  }",Instantiate a  DatasetsFinder.,1,232
2019,"public static double get(MetricKey<ASTUserClassOrInterface<?>> key, ASTUserClass node, MetricOptions options) {
        return FACADE.computeForType(key, node, options);
    }","Computes a metric identified by its code on a class AST node, possibly selecting metric options with the  options parameter.",1,51
2020,"@SafeVarargs
	public static Parser.Quantifier _1_n(Supplier<Parser>... parsers) {
		return quantifier(parsers, Parser.Quantifier.Bounds.ONE_TO_N);
	}","Shortcut for  new Parser.Quantifier(new Parser.Sequence(parsers), Parser.Quantifier.Bounds.ONE_TO_N).",1,47
2021,"public ZonedDateTime getCreated() {
        return created;
    }",Get the ZonedDateTime that this Token was Created,1,19
2022,"public static LogEntryPathChangeType parse(final char code) {
    switch (code) {
      case 'D':
        return DELETED;
      case 'M':
        return MODIFIED;
      case 'A':
        return ADDED;
      case 'R':
        return REPLACED;
      default:
        throw new IllegalArgumentException(""Unable to parse code: "" + code);
    }
  }",Parses given code and returns appropriate LogEntryPathChangeType.,1,101
2023,"public CollectionAssert onProperty(String propertyName) {
    isNotNull();
    if (actual.isEmpty()) return new CollectionAssert(emptyList());
    return new CollectionAssert(propertyValues(propertyName, actual));
  }",Creates a new instance of  CollectionAssert whose target collection contains the values of the given property name from the elements of this  CollectionAssert's collection.,1,62
2024,"private View createView(int event, boolean advancingPage) {
        FormController formController = getFormController();

        setTitle(formController.getFormTitle());

        formController.getAuditEventLogger().logEvent(AuditEvent.getAuditEventTypeFromFecType(event),
                formController.getFormIndex().getReference(), true);

        switch (event) {
            case FormEntryController.EVENT_BEGINNING_OF_FORM:
                return createViewForFormBeginning(formController);
            case FormEntryController.EVENT_END_OF_FORM:
                return createViewForFormEnd(formController);
            case FormEntryController.EVENT_QUESTION:
            case FormEntryController.EVENT_GROUP:
            case FormEntryController.EVENT_REPEAT:
                releaseOdkView();
                // should only be a group here if the event_group is a field-list
                try {
                    FormEntryPrompt[] prompts = formController.getQuestionPrompts();
                    FormEntryCaption[] groups = formController
                            .getGroupsForCurrentIndex();
                    odkView = new ODKView(this, prompts, groups, advancingPage);
                    Timber.i(""Created view for group %s %s"",
                            groups.length > 0 ? groups[groups.length - 1].getLongText() : ""[top]"",
                            prompts.length > 0 ? prompts[0].getQuestionText() : ""[no question]"");
                } catch (RuntimeException e) {
                    Timber.e(e);
                    // this is badness to avoid a crash.
                    try {
                        event = formController.stepToNextScreenEvent();
                        createErrorDialog(e.getMessage(), DO_NOT_EXIT);
                    } catch (JavaRosaException e1) {
                        Timber.d(e1);
                        createErrorDialog(e.getMessage() + ""\n\n"" + e1.getCause().getMessage(),
                                DO_NOT_EXIT);
                    }
                    return createView(event, advancingPage);
                }

                // Makes a ""clear answer"" menu pop up on long-click
                for (QuestionWidget qw : odkView.getWidgets()) {
                    if (!qw.getFormEntryPrompt().isReadOnly()) {
                        // If it's a StringWidget register all its elements apart from EditText as
                        // we want to enable paste option after long click on the EditText
                        if (qw instanceof StringWidget) {
                            for (int i = 0; i < qw.getChildCount(); i++) {
                                if (!(qw.getChildAt(i) instanceof EditText)) {
                                    registerForContextMenu(qw.getChildAt(i));
                                }
                            }
                        } else {
                            registerForContextMenu(qw);
                        }
                    }
                }

                if (showNavigationButtons) {
                    backButton.setVisibility(!formController.isCurrentQuestionFirstInForm() && allowMovingBackwards ? View.VISIBLE : View.GONE);
                    nextButton.setVisibility(View.VISIBLE);
                }
                return odkView;

            case FormEntryController.EVENT_PROMPT_NEW_REPEAT:
                createRepeatDialog();
                return new EmptyView(this);

            default:
                Timber.e(""Attempted to create a view that does not exist."");
                // this is badness to avoid a crash.
                try {
                    event = formController.stepToNextScreenEvent();
                    createErrorDialog(getString(R.string.survey_internal_error), EXIT);
                } catch (JavaRosaException e) {
                    Timber.d(e);
                    createErrorDialog(e.getCause().getMessage(), EXIT);
                }
                return createView(event, advancingPage);
        }
    }",Creates and returns a new view based on the event type passed in.,1,770
2025,"public final Set<CacheEventListener> getCacheEventListeners() {
        Set<CacheEventListener> listenerSet = new HashSet<CacheEventListener>();
        for (ListenerWrapper listenerWrapper : cacheEventListeners) {
            listenerSet.add(listenerWrapper.getListener());
        }
        return listenerSet;
    }",Gets a copy of the set of the listeners registered to this class,1,75
2026,"public boolean isUserInRole(String role) {
        Principal principal = getUserPrincipal();
        if (principal instanceof MockPrincipal) {
            return ((MockPrincipal) principal).getRoles().contains(role);
        }
        return false;
    }","Returns true if the  #getUserPrincipal() authenticated user is included in the given role, false otherwise.",1,71
2027,"private static int setTransactionIsolation(BrowseScope scope)
        throws SQLException
    {
        if( ""oracle"".equals(ConfigurationManager.getProperty(""db.name"")) )
        {
            return 1;
        }

        // postgres    
        Connection connection = scope.getContext().getDBConnection();
        int level = connection.getTransactionIsolation();
        connection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        return level;
    }",Set the JDBC transaction isolation level.,1,111
2028,"public boolean isMatrix() {
        return rank() == 2;
    }",Returns true if this ndarray is 2d,1,26
2029,"public BigDecimal getAmount(String amount) {
        if (amount == null) {
            return new BigDecimal(""0.00"");
        }
        BigDecimal amountBd = new BigDecimal(amount);
        return amountBd.movePointLeft(2);
    }",Returns a BigDecimal from a ValueLink formatted amount String,1,72
2030,"public synchronized Set<String> getNames() {
        if (map == null) {
            return Collections.<String>emptySet();
        }
        return Collections.unmodifiableSet(map.keySet());
    }",Returns a Set of the names that can be used to get values of the private data.,1,63
2031,"private static InternalMessage transformAddRequest( LdapMessageCodec codecMessage, int messageId )
    {
        AddRequestImpl internalMessage = new AddRequestImpl( messageId );
        AddRequestCodec addRequest = codecMessage.getAddRequest();

        // Codec : LdapDN entry -> Internal : String name
        internalMessage.setEntry( addRequest.getEntry() );

        // Codec : Attributes attributes -> Internal : Attributes entry
        internalMessage.setEntry( addRequest.getEntry() );

        return internalMessage;
    }",Transform an AddRequest message from a CodecMessage to a InternalMessage,1,102
2032,"public static OperationStatus parse(String singleLine) {
        // Do note there is specifically left room for more arguments after
        // the first in the serialized form.
        Iterator<String> input = spaceSep.split(singleLine.trim()).iterator();
        String operationId;
        ErrorCode errorCode;
        String message;
        String traceMessage = """";

        operationId = Encoder.decode(input.next(), new StringBuilder())
                .toString();
        errorCode = ErrorCode.valueOf(Encoder.decode(input.next(),
                new StringBuilder()).toString());

        message = Encoder.decode(input.next(), new StringBuilder()).toString();
        // We are backwards compatible, meaning it is ok not to supply the last argument.
        boolean isConditionNotMet = false;
        if (message.startsWith(IS_CONDITION_NOT_MET)) {
            message = message.replaceFirst(IS_CONDITION_NOT_MET, """");
            isConditionNotMet = true;
        }
        if (input.hasNext()) {
            traceMessage = Encoder.decode(input.next(), new StringBuilder()).toString();
        }
        return new OperationStatus(message, operationId, errorCode, isConditionNotMet, traceMessage);
    }",Parse a single rendered OperationStatus string.,1,295
2033,"//@VisibleForTesting
  public long getNextSeekPosition(long targetGranule, ExtractorInput input)
      throws IOException, InterruptedException {
    if (start == end) {
      return -(startGranule + 2);
    }

    long initialPosition = input.getPosition();
    if (!skipToNextPage(input, end)) {
      if (start == initialPosition) {
        throw new IOException(""No ogg page can be found."");
      }
      return start;
    }

    pageHeader.populate(input, false);
    input.resetPeekPosition();

    long granuleDistance = targetGranule - pageHeader.granulePosition;
    int pageSize = pageHeader.headerSize + pageHeader.bodySize;
    if (granuleDistance < 0 || granuleDistance > MATCH_RANGE) {
      if (granuleDistance < 0) {
        end = initialPosition;
        endGranule = pageHeader.granulePosition;
      } else {
        start = input.getPosition() + pageSize;
        startGranule = pageHeader.granulePosition;
        if (end - start + pageSize < MATCH_BYTE_RANGE) {
          input.skip(pageSize);
          return -(startGranule + 2);
        }
      }

      if (end - start < MATCH_BYTE_RANGE) {
        end = start;
        return start;
      }

      long offset = pageSize * (granuleDistance <= 0 ? 2 : 1);
      long nextPosition = input.getPosition() - offset
          + (granuleDistance * (end - start) / (endGranule - startGranule));

      nextPosition = Math.max(nextPosition, start);
      nextPosition = Math.min(nextPosition, end - 1);
      return nextPosition;
    }

    // position accepted (before target granule and within MATCH_RANGE)
    input.skip(pageSize);
    return -(pageHeader.granulePosition + 2);
  }",Returns a position converging to the  targetGranule to which the  ExtractorInput has to seek and then be passed for another call until a negative number is returned.,1,507
2034,"public CompareToBuilder append(double[] lhs, double[] rhs) {
        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null) {
            comparison = -1;
            return this;
        }
        if (rhs == null) {
            comparison = +1;
            return this;
        }
        if (lhs.length != rhs.length) {
            comparison = (lhs.length < rhs.length) ? -1 : +1;
            return this;
        }
        for (int i = 0; i < lhs.length && comparison == 0; i++) {
            append(lhs[i], rhs[i]);
        }
        return this;
    }","Deep comparison of a double array.  Check if arrays are same using == Check if either is null, a null array is less than a non-null Check array length, a shorter length array is less than a longer length array Check array contents element by element using  #append(double, double)",1,254
2035,"public T acquire(Integer time, TimeUnit unit) {
    // If either time or unit are null, the other should also be null.
    Preconditions.checkState((time == null) == (unit == null));
    // Try to take a resource without blocking
    T resource = mResources.poll();
    if (resource != null) {
      return resource;
    }

    if (mCurrentCapacity.getAndIncrement() < mMaxCapacity) {
      // If the resource pool is empty but capacity is not yet full, create a new resource.
      return createNewResource();
    }

    mCurrentCapacity.decrementAndGet();

    // Otherwise, try to take a resource from the pool, blocking if none are available.
    try {
      mTakeLock.lockInterruptibly();
      try {
        while (true) {
          resource = mResources.poll();
          if (resource != null) {
            return resource;
          }
          if (time != null) {
            if (!mNotEmpty.await(time, unit)) {
              return null;
            }
          } else {
            mNotEmpty.await();
          }
        }
      } finally {
        mTakeLock.unlock();
      }
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
  }",Acquires an object of type code T from the pool.,1,306
2036,"public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the last index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex will return  #INDEX_NOT_FOUND (-1).,1,172
2037,"public static  IComplexNDArray fft(IComplexNDArray inputC) {
        return Nd4j.getFFt().fft(inputC);
    }","1d discrete fourier transform, note that this will throw an exception if the passed in input isn't a vector.",1,33
2038,"@Override
    public SparseFeature clone() throws CloneNotSupportedException {
        final SparseFeature clone = (SparseFeature) super.clone();
        try {
            final Field field = SparseFeature.class.getDeclaredField(""properties"");
            field.setAccessible(true);
            field.set(clone, clone.properties.clone());
        } catch (ReflectiveOperationException e) {
            throw new AssertionError(e);
        }
        switch (clone.valuesKind) {
            default:        throw new AssertionError(clone.valuesKind);
            case CORRUPTED: throw new CorruptedObjectException(clone.getName());
            case VALUES:    break; // Nothing to do.
            case PROPERTIES: {
                final Cloner cloner = new Cloner();
                for (final Map.Entry<String,Object> entry : clone.properties.entrySet()) {
                    final Property property = (Property) entry.getValue();
                    if (property instanceof Cloneable) {
                        entry.setValue(cloner.clone(property));
                    }
                }
                break;
            }
        }
        return clone;
    }",Returns a copy of this feature,1,301
2039,"@SuppressWarnings(""hiding"")
    public DebugScope scope(String name, boolean sandbox, DebugConfig sandboxConfig, Object... context) {
        DebugScope newScope = null;
        if (sandbox) {
            newScope = new DebugScope(name, name, this, true, context);
            setConfig(sandboxConfig);
        } else {
            newScope = this.createChild(name, context);
        }
        instanceTL.set(newScope);
        newScope.setLogEnabled(this.isLogEnabled());
        newScope.updateFlags();
        return newScope;
    }",Creates and enters a new debug scope which is either a child of the current scope or a disjoint top level scope.,1,155
2040,"public static <T extends ComponentModel> ComponentExecutorFactory<T> getOperationExecutorFactory(T operationModel) {
    ComponentExecutorFactory executorFactory =
        fromModelProperty(operationModel,
                          ComponentExecutorModelProperty.class,
                          ComponentExecutorModelProperty::getExecutorFactory,
                          () -> new IllegalOperationModelDefinitionException(format(""Operation '%s' does not provide a %s"",
                                                                                    operationModel.getName(),
                                                                                    ComponentExecutorFactory.class
                                                                                        .getSimpleName())));

    return new OperationExecutorFactoryWrapper(executorFactory, createInterceptors(operationModel));
  }",Tests the given  operationModel for a  ComponentExecutorModelProperty and if present it returns the enclosed  ComponentExecutorFactory.,1,114
2041,"public static Map<String, String> getContext() {
        return contextMap.getCopy();
    }",Returns a mutable copy of current thread's context Map.,1,31
2042,"protected boolean isNodeTypeAllowed(List<GWTJahiaNode> selection) {
        if (selection == null) {
            return true;
        }
        boolean allowed = true;
        for (GWTJahiaNode selected : selection) {
            if (!isNodeTypeAllowed(selected)) {
                allowed = false;
                break;
            }
        }
        return allowed;

    }",Returns true if all of the selected nodes pass the  #isNodeTypeAllowed(GWTJahiaNode) check.,1,105
2043,"public static String substring(CharSequence str, int start, int end) {
        if (str == null) {
            return null;
        }

        // handle negatives
        if (end < 0) {
            end = str.length() + end; // remember end is negative
        }
        if (start < 0) {
            start = str.length() + start; // remember start is negative
        }

        // check length next
        if (end > str.length()) {
            end = str.length();
        }

        // if start is greater than end, return """"
        if (start > end) {
            return EMPTY;
        }

        if (start < 0) {
            start = 0;
        }
        if (end < 0) {
            end = 0;
        }

        return sequenceToString(str.subSequence(start, end));
    }",Gets a substring from the specified CharSequence avoiding exceptions. A negative start position can be used to start/end  n characters from the end of the CharSequence. The returned substring starts with the character in the  start position and ends before the  end position.,1,252
2044,"public static String join(Iterable<?> iterable, String separator) {
        if (iterable == null) {
            return null;
        }
        return join(iterable.iterator(), separator);
    }",Joins the elements of the provided Iterable into a single String containing the provided elements. No delimiter is added before or after the list.,1,65
2045,"public boolean removeAll (IntArray array) {
		int size = this.size;
		int startSize = size;
		int[] items = this.items;
		for (int i = 0, n = array.size; i < n; i++) {
			int item = array.get(i);
			for (int ii = 0, nn = size; ii < nn; ii++) {
				if (item == items[ii]) {
					removeIndex(ii);
					size--;
					break;
				}
			}
		}
		return size != startSize;
	}",Removes from this array all of elements contained in the specified array.,1,192
2046,"public static File handleBinUpload(String fileName, File directory, boolean deleteDirectoryContent, Request request) 
        throws IOException {
        
        final File newFile = new File(directory, fileName);
        
        if(newFile.exists()) {
            if (deleteDirectoryContent) {
                FileUtils.cleanDirectory(directory);
            } else {
                // delete the file, otherwise replacing it with a smaller one will leave bytes at the end
                newFile.delete();
            }
        }
        
        final ReadableByteChannel source = request.getEntity().getChannel();
        RandomAccessFile raf = null;
        FileChannel outputChannel = null;
        try {
            raf = new RandomAccessFile(newFile, ""rw"");
            outputChannel = raf.getChannel();
            IOUtils.copyChannel(1024 * 1024, source, outputChannel);
        } finally {
            try {
                if(raf != null) {
                    raf.close();
                }
            } finally {
                IOUtils.closeQuietly(source);
                IOUtils.closeQuietly(outputChannel);
            }
        }
        return newFile;
    }",Reads content from the body of a request and writes it to a file.,1,286
2047,"public byte[] getImage()
    {
        if (icon != null)
            return icon;
            
        Image selectedIcon;

        //we use these to get the best possible icon in case our favicon is a
        //multi-page icon.
        int maxWidth = 0;
        int maxColors = 0;
        int crtDescriptor = -1;

        //used for ICO to PNG translation. Uses PNG as it's the ""safest"" choice.
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        byte[] result = null;

        URL feedLocation = getRssURL();

        // TODO: Fix aclico log4j-related errors. Fixed now?

        try
        {
            URL location = new URL(feedLocation.getProtocol() + ""://""
                   + feedLocation.getHost() + ""/favicon.ico"");
            ICOFile favicon = new ICOFile(location);

            logger.trace(""Icon has "" + favicon.getImageCount() + "" pages"");

            for (int i = 0; i < favicon.getDescriptors().size(); i++)
            {
                BitmapDescriptor bmpDesc = favicon.getDescriptor(i);
                if ((maxWidth < bmpDesc.getWidth()))
                {
                    maxWidth = bmpDesc.getWidth();
                    maxColors = bmpDesc.getColorCount();
                    crtDescriptor = i;
                }

                if ((maxColors < bmpDesc.getColorCount()))
                {
                    maxWidth = bmpDesc.getWidth();
                    maxColors = bmpDesc.getColorCount();
                    crtDescriptor = i;
                }
            }

            //if icons is either invalid or contains no data, return the default
            // RSS icon.
            if (crtDescriptor == -1)
            {
                icon = getDefaultRssIcon();
                
                return icon;
            }

            selectedIcon = favicon.getDescriptor(crtDescriptor).getImageRGB();

            //decode ICO as a PNG and return the result
            ImageIO.write((BufferedImage)selectedIcon, ""PNG"", output);
            result =  output.toByteArray();

            logger.trace(""Result has "" + result.length + "" bytes"");
            logger.trace(""Icon is "" + maxWidth + "" px X "" + maxWidth + "" px @ ""
                    + maxColors + "" colors"");

            output.close();
            icon = result;
            return icon;
        }
        catch (MalformedURLException murlex)
        {
            //this shouldn't happen. Ever.
            logger.error(""Malformed URL "" + murlex,
                         murlex);
        }
        catch (IOException ioex)
        {
            logger.error(""I/O Error on favicon retrieval. "" + ioex,
                         ioex);
        }
        catch(Exception ex)
        {
            logger.error(""Unknown error on favicon retrieval. "" + ex, ex);
        }

        icon = getDefaultRssIcon();
        
        return icon;
    }",Returns a byte array containing an image to represent the contact.,1,693
2048,"public ApiResult get() {
        return setupRequest(Api.METHOD_GET);
    }",Sets up a GET request using the parameters so far specified.,1,24
2049,"public DslElementSyntax resolve(final ParameterModel parameter)
    {
        final ExpressionSupport expressionSupport = parameter.getExpressionSupport();
        final DslElementSyntaxBuilder builder = DslElementSyntaxBuilder.create();
        final String namespace = getNamespace(parameter.getType());
        final Optional<XmlHintsModelProperty> styleModelProperty = getStyleModelProperty(parameter);

        parameter.getType().accept(
                new MetadataTypeVisitor()
                {
                    @Override
                    public void visitUnion(UnionType unionType)
                    {
                        unionType.getTypes().forEach(type -> type.accept(this));
                    }

                    @Override
                    protected void defaultVisit(MetadataType metadataType)
                    {
                        builder.withAttributeName(parameter.getName())
                                .withNamespace(namespace)
                                .withElementName(hyphenize(parameter.getName()));
                    }

                    @Override
                    public void visitArrayType(ArrayType arrayType)
                    {
                        defaultVisit(arrayType);
                        //TODO MULE-10029 review convention of singular/plural
                        MetadataType genericType = arrayType.getType();
                        if (shouldGenerateChildElements(genericType, expressionSupport, styleModelProperty))
                        {
                            builder.supportsChildDeclaration(true);
                            genericType.accept(getArrayItemTypeVisitor(builder, parameter.getName(), namespace, false));
                        }
                    }

                    @Override
                    public void visitObject(ObjectType objectType)
                    {
                        builder.withAttributeName(parameter.getName())
                                .withNamespace(namespace)
                                .withElementName(hyphenize(parameter.getName()));

                        if (shouldGenerateChildElements(objectType, expressionSupport, styleModelProperty))
                        {
                            builder.supportsChildDeclaration(true);

                            if (typeRequiresWrapperElement(objectType))
                            {
                                builder.asWrappedElement(true)
                                        .withNamespace(namespace);
                            }
                            else
                            {
                                builder.withNamespace(extensionXml.getNamespace());
                            }
                        }
                    }

                    @Override
                    public void visitDictionary(DictionaryType dictionaryType)
                    {
                        builder.withAttributeName(parameter.getName())
                                .withNamespace(namespace)
                                .withElementName(hyphenize(pluralize(parameter.getName())))
                                .supportsChildDeclaration(shouldGenerateChildElements(dictionaryType.getKeyType(), expressionSupport));

                        dictionaryType.getValueType().accept(getDictionaryValueTypeVisitor(builder, parameter.getName(), namespace, styleModelProperty));
                    }
                }
        );
        return builder.build();
    }","Resolves the  DslElementSyntax for the given  ParameterModel parameter, providing all the required information for representing this  parameter element in the DSL.",1,577
2050,"public List<String> getChildrenAssociationWhitelist()
	{
		return getFieldValues(ConfigureNodeFields.children_association_whitelist);
	}",List of JID's that are on the whitelist that determines who can associate child nodes with the collection node.,1,28
2051,"public KvStateEntry<?, ?, ?> getKvState(KvStateID kvStateId) {
		return registeredKvStates.get(kvStateId);
	}","Returns the  KvStateEntry containing the requested instance as identified by the given KvStateID, along with its  KvStateInfo or null if none is registered.",1,36
2052,"public int getParallelism() {
		return this.parallelism;
	}",Returns the parallelism of this data sink.,1,21
2053,"public ArrayList getBookmarks() {
        return bookmarks;
    }",Get the descendant  Bookmarks.,1,19
2054,"public BibEntry createEntry(File f, boolean addPathTokensAsKeywords) {
        if ((f == null) || !f.exists()) {
            return null;
        }
        BibEntry newEntry = createBibtexEntry(f);

        if (newEntry == null) {
            return null;
        }

        if (addPathTokensAsKeywords) {
            appendToField(newEntry, ""keywords"", extractPathesToKeyWordsfield(f.getAbsolutePath()));
        }

        if (newEntry.getField(""title"") == null) {
            newEntry.setField(""title"", f.getName());
        }

        addFileInfo(newEntry, f);
        return newEntry;
    }",Create one BibEntry containing information regarding the given File.,1,188
2055,"public BlockMeta getBlockMeta(long blockId) throws IOException {
    BlockMeta blockMeta = mBlockIdToBlockMap.get(blockId);
    if (blockMeta == null) {
      throw new IOException(""Cannot find BlockMeta for blockId "" + blockId + "" in "" + toString());
    }
    return blockMeta;
  }",Gets the BlockMeta from this storage dir by its block ID or throws IOException.,1,87
2056,"public CommandResult command( final DBObject cmd , final ReadPreference readPrefs, final DBEncoder encoder ){
        return command(cmd, 0, readPrefs, encoder);
    }","Executes a database command with the selected readPreference, and encodes the command using the given encoder.",1,52
2057,"public Polynomial multiply(long l) {
      return multiply((double) l);
    }",Multiply the instance by a constant.,1,29
2058,"public static String uncapitalize(CharSequence cs) {
        if (cs == null ) {
            return null;
        }
        int strLen;
        if ((strLen = cs.length()) == 0) {
            return cs.toString();
        }
        return new StringBuilder(strLen)
            .append(Character.toLowerCase(cs.charAt(0)))
            .append(CharSequenceUtils.subSequence(cs, 1))
            .toString();
    }",Uncapitalizes a CharSequence changing the first letter to title case as per  Character#toLowerCase(char).,1,134
2059,"protected ByteBuffer acquireByteBuffer(final int iSize) {
		if (iSize > BYTEBUFFER_POOLABLE_SIZE) {
			try {
				OProfiler.getInstance().updateStat(""MMap.extraBufferSize"", iSize);
				// CREATE A BUFFER AT THE FLY. IT WILL BE DISCARDED WHEN FINISHED
				return ByteBuffer.allocate(iSize);
			} catch (OutOfMemoryError e) {
				// LOG THE EXCEPTION AND RE-THROW IT
				OLogManager.instance().error(this, ""Error on allocating direct buffer of size %d bytes"", e, iSize);
				throw e;
			}
		}

		final ByteBuffer buffer;

		synchronized (this) {
			if (bufferPool.isEmpty()) {
				buffer = ByteBuffer.allocateDirect(BYTEBUFFER_POOLABLE_SIZE);
				OProfiler.getInstance().updateStat(""MMap.pooledBufferSize"", BYTEBUFFER_POOLABLE_SIZE);
			} else {
				// POP THE FIRST AVAILABLE
				buffer = bufferPool.remove(0);
				OProfiler.getInstance().updateCounter(""MMap.pooledBuffers"", -1);
			}
		}

		buffer.limit(iSize);

		return buffer;
	}",Acquires a byte buffer to use in read/write operations.,1,248
2060,"public boolean hasNext() {
                return iterator.hasNext();
            }",Creates a FilterMonadic Iterator based on the given Iterator by delegating calls of  hasNext() and  next() to it.,1,23
2061,"public static ReceivedEmailAttributes fromMessage(Message msg) {
    try {
      Flags flags = msg.getFlags();

      Map<String, String> headers = new HashMap<>();
      list(msg.getAllHeaders()).forEach(h -> headers.put(((Header) h).getName(), ((Header) h).getValue()));

      EmailAttributesBuilder builder =
          EmailAttributesBuilder.newAttributes()
              .withId(msg.getMessageNumber())
              .withSubject(msg.getSubject())
              .fromAddresses(msg.getFrom())
              .toAddresses(msg.getRecipients(TO))
              .ccAddresses(msg.getRecipients(CC))
              .bccAddresses(msg.getRecipients(BCC))
              .seen(flags.contains(SEEN))
              .replyToAddress(msg.getReplyTo())
              .recent(flags.contains(RECENT))
              .sentDate(msg.getSentDate())
              .receivedDate(msg.getReceivedDate())
              .draft(flags.contains(DRAFT))
              .answered(flags.contains(ANSWERED))
              .setHeaders(headers)
              .deleted(flags.contains(DELETED));

      return builder.build();
    } catch (MessagingException mse) {
      throw new EmailException(mse.getMessage(), mse);
    }
  }",builds the new  ReceivedEmailAttributes instance from a given  Message extracting all its attributes including the attachments.,1,339
2062,"private static MethodInspector make(final Inspection inspection, Address address, boolean interactive) throws MaxVMBusyException {
        MethodInspector methodInspector = null;
        final MaxCompiledCode compiledCode = inspection.vm().codeCache().findCompiledCode(address);
        if (compiledCode != null) {
            // Java method
            methodInspector = make(inspection, compiledCode, MethodCodeKind.MACHINE_CODE);
        } else {
            final MaxExternalCode externalCode = inspection.vm().codeCache().findExternalCode(address);
            if (externalCode != null) {
                // Some other kind of known external machine code
                methodInspector = make(inspection, externalCode);
            } else if (interactive) {
                // Code location is not in a Java method or runtime stub and has not yet been viewed in a native routine.
                // Give the user a chance to guess at its length so we can register and view it
                final MutableInnerClassGlobal<MethodInspector> result = new MutableInnerClassGlobal<MethodInspector>();
                final String defaultDescription = ""Native code @0x"" + address.toHexString();
                new NativeLocationInputDialog(inspection, ""Name unknown native code"", address, MaxExternalCode.DEFAULT_NATIVE_CODE_LENGTH, defaultDescription) {
                    @Override
                    public void entered(Address nativeAddress, long nBytes, String enteredName) {
                        try {
                            String name = enteredName;
                            if (name == null || name.equals("""")) {
                                name = defaultDescription;
                            }
                            final MaxExternalCode externalCode = vm().codeCache().createExternalCode(nativeAddress, nBytes, name);
                            result.setValue(MethodInspector.make(inspection, externalCode));
                            // inspection.focus().setCodeLocation(new TeleCodeLocation(inspection.teleVM(), nativeAddress));
                        } catch (IllegalArgumentException illegalArgumentException) {
                            inspection.gui().errorMessage(""Specified external code range overlaps region already registered in Inpsector"");
                        } catch (MaxVMBusyException maxVMBusyException) {
                            inspection.announceVMBusyFailure(""inspect native code"");
                        } catch (MaxInvalidAddressException e) {
                            inspection.gui().errorMessage(""Unable to read memory at "" + nativeAddress.to0xHexString());
                            e.printStackTrace();
                        }
                    }
                    @Override
                    public boolean isValidSize(long nBytes) {
                        return nBytes > 0;
                    }
                };
                methodInspector = result.value();
            }
        }
        return methodInspector;
    }",Makes an inspector displaying code for the method pointed to by the instructionPointer.,1,544
2063,"public static <T> Iterable<T> take(final int n, final Iterable<T> xs) {
    if (n < 0) {
      throw new IllegalArgumentException(""Cannot take a negative number of elements"");
    }
    if (xs instanceof List<?>) {
      final List<T> list = (List<T>) xs;
      return list.subList(0, n < list.size() ? n : list.size());
    }
    return new Range<>(0, n, xs);
  }",Takes the first  n  xs and returns them.,1,160
2064,"public Instant getCreated() {
        return created;
    }",Get the Instant that this Token was Created,1,19
2065,"protected JavaType getJavaType(Type type, Class<?> contextClass) {
		return (contextClass != null) ?
			this.objectMapper.getTypeFactory().constructType(type, contextClass) :
			this.objectMapper.constructType(type);
	}",Return the Jackson  JavaType for the specified type and context class.,1,68
2066,"public OAuthConsumer remove(OAuthConsumer oAuthConsumer)
		throws SystemException {
		return super.remove(oAuthConsumer);
	}",Removes the o auth consumer from the database.,1,32
2067,"public Fraction reduce() {
        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
        if (gcd == 1) {
            return this;
        }
        return Fraction.getFraction(numerator / gcd, denominator / gcd);
    }","Reduce the fraction to the smallest values for the numerator and denominator, returning the result. For example, if this fraction represents 2/4, then the result will be 1/2.",1,79
2068,"public List<String> getUserDesignations() {
		List<String> result = new ArrayList<String>();
		for (Enumeration<String> e = userDesignationBundle.getKeys(); e.hasMoreElements(); ) {
			String key = e.nextElement();
			result.add(key);
		}
		return result;
	}",Get a List containing all known user designation keys keys.,1,99
2069,"public Endpoint resolve(ClientRequestContext ctx) {
        if (isGroup()) {
            return EndpointGroupRegistry.selectNode(ctx, groupName);
        } else {
            return this;
        }
    }",Resolves this endpoint into a host endpoint associated with the specified  ClientRequestContext.,1,57
2070,"public Iterable<DrawHatchElement> getHatches() {
        if (mHatches != null) {
            return mHatches.values();
        } else {
            return new ArrayList<DrawHatchElement>();
        }
    }",Returns an iterator for all DrawHatchElement elements.,1,63
2071,"public Counter newCounter(Class<?> klass,
                                    String name,
                                    String scope) {
        return newCounter(createName(klass, name, scope));
    }",Creates a new  Counter and registers it under the given class and name.,1,49
2072,"public T acquire(Integer time, TimeUnit unit) {
    // If either time or unit are null, the other should also be null.
    Preconditions.checkState((time == null) == (unit == null));
    long endTimeMs = 0;
    if (time != null) {
       endTimeMs = System.currentTimeMillis() + unit.toMillis(time);
    }

    // Try to take a resource without blocking
    T resource = mResources.poll();
    if (resource != null) {
      return resource;
    }

    if (mCurrentCapacity.getAndIncrement() < mMaxCapacity) {
      // If the resource pool is empty but capacity is not yet full, create a new resource.
      return createNewResource();
    }

    mCurrentCapacity.decrementAndGet();

    // Otherwise, try to take a resource from the pool, blocking if none are available.
    try {
      mTakeLock.lockInterruptibly();
      try {
        while (true) {
          resource = mResources.poll();
          if (resource != null) {
            return resource;
          }
          if (time != null) {
            long currTimeMs = System.currentTimeMillis();
            if (currTimeMs >= endTimeMs) {
              return null;
            }
            if (!mNotEmpty.await(endTimeMs - currTimeMs, TimeUnit.MILLISECONDS)) {
              return null;
            }
          } else {
            mNotEmpty.await();
          }
        }
      } finally {
        mTakeLock.unlock();
      }
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
  }",Acquires an object of type code T from the pool.,1,398
2073,"public static MasterRegistry createLeaderFileSystemMasterFromJournal() throws Exception {
    return createFileSystemMasterFromJournal(true);
  }","Creates a new leader  FileSystemMaster from journal along with its dependencies, and returns the master registry containing that master.",1,28
2074,"public static String getDisplayLanguage(String localeID, String displayLocaleID) {
	return getDisplayLanguage(localeID, new ULocale(displayLocaleID));
    }",Return a locale's language localized for display in the provided locale.,1,40
2075,"private boolean shouldHandle(Exchange exchange, RedeliveryData data) {
        if (data.handledPredicate != null) {
            return data.handledPredicate.matches(exchange);
        }
        // do not handle by default
        return false;
    }",Determines whether or not to handle if we are exhausted.,1,62
2076,"public static <K, V> Map<K, V> collectEntries(Object[] self, Map<K, V> collector) {
        return collectEntries(self, collector, Closure.IDENTITY);
    }",A variant of collectEntries using the identity closure as the transform.,1,61
2077,"public List<ShardRouting> activeShards() {
        return this.activeShards;
    }",Returns a  List of active shards,1,24
2078,"@SuppressWarnings(""unchecked"")
    @Override
    default <U, TRAVERSABLE extends HigherKinded<U, Traversable<?>>> Stream<U> flatten(Function<? super T, ? extends TRAVERSABLE> f) {
        Objects.requireNonNull(f, ""f is null"");
        return isEmpty() ? Nil.instance() : Stream.ofAll(new Iterator<U>() {

            final Iterator<? extends T> inputs = Stream.this.iterator();
            Iterator<? extends U> current = Collections.emptyIterator();

            @Override
            public boolean hasNext() {
                boolean currentHasNext;
                while (!(currentHasNext = current.hasNext()) && inputs.hasNext()) {
                    current = ((Traversable<U>) f.apply(inputs.next())).iterator();
                }
                return currentHasNext;
            }

            @Override
            public U next() {
                return current.next();
            }
        });
    }",Flattens a  Stream using a function.,1,282
2079,"public String getKey() {
        return key;
    }",Returns the key to be used when this wire is part of a Map-style reference.,1,19
2080,"public static List<ColumnDefinition> fromSchema(Row serializedColumns, CFMetaData cfm)
    {
        List<ColumnDefinition> cds = new ArrayList<>();

        String query = String.format(""SELECT * FROM %s.%s"", Keyspace.SYSTEM_KS, SystemKeyspace.SCHEMA_COLUMNS_CF);
        for (UntypedResultSet.Row row : QueryProcessor.resultify(query, serializedColumns))
        {
            Kind kind = row.has(KIND)
                      ? Kind.deserialize(row.getString(KIND))
                      : Kind.REGULAR;

            Integer componentIndex = null;
            if (row.has(COMPONENT_INDEX))
                componentIndex = row.getInt(COMPONENT_INDEX);
            else if (kind == Kind.CLUSTERING_COLUMN && cfm.isSuper())
                componentIndex = 1; // A ColumnDefinition for super columns applies to the column component

            // Note: we save the column name as string, but we should not assume that it is an UTF8 name, we
            // we need to use the comparator fromString method
            AbstractType<?> comparator = cfm.getComponentComparator(componentIndex, kind);
            ColumnIdentifier name = new ColumnIdentifier(comparator.fromString(row.getString(COLUMN_NAME)), comparator);

            AbstractType<?> validator;
            try
            {
                validator = TypeParser.parse(row.getString(TYPE));
            }
            catch (RequestValidationException e)
            {
                throw new RuntimeException(e);
            }

            IndexType indexType = null;
            if (row.has(INDEX_TYPE))
                indexType = IndexType.valueOf(row.getString(INDEX_TYPE));

            Map<String, String> indexOptions = null;
            if (row.has(INDEX_OPTIONS))
                indexOptions = FBUtilities.fromJsonMap(row.getString(INDEX_OPTIONS));

            String indexName = null;
            if (row.has(INDEX_NAME))
                indexName = row.getString(INDEX_NAME);

            cds.add(new ColumnDefinition(cfm.ksName, cfm.cfName, name, validator, indexType, indexOptions, indexName, componentIndex, kind));
        }

        return cds;
    }",Deserialize columns from storage-level representation,1,504
2081,"public String getTitle( )
    {
    return this.title.getString( );
    }",Returns the title of this Study.,1,28
2082,"public JobMasterGateway call() throws Exception {

					if (!leaderSessionID.equals(resourceManagerLeaderId)) {
						log.warn(""Discard registration from JobMaster {} at ({}) because the expected leader session ID {}"" +
								"" did not equal the received leader session ID  {}"",
							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId);
						throw new Exception(""Invalid leader session id"");
					}

					final Time timeout = resourceManagerConfiguration.getTimeout();

					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())
							.equals(jobMasterLeaderId)) {
						throw new Exception(""Leader Id did not match"");
					}

					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)
						.get(timeout.getSize(), timeout.getUnit());
				}",Register a  JobMaster at the resource manager.,1,188
2083,"public static <K, V> Map<K, V> collectEntries(Collection<?> self, Closure<?> closure) {
        return collectEntries(self, new LinkedHashMap<K, V>(), closure);
    }","Iterates through this Collection transforming each item using the closure as a transformer into a map entry, returning a map of the transformed entries.",1,67
2084,"public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password) {
			Credentials credentials = new Credentials(user, password);
			checkIllegalCharacters(user, password);
			return map -> map.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials);
		}",Return a @literal Consumer that stores the given user and password as a request attribute of type  Credentials that is in turn used by  ExchangeFilterFunctions#basicAuthentication().,1,79
2085,"public static synchronized Ivy getIvy(IJavaProject javaProject) {
        IvyClasspathContainer cp = IvyClasspathUtil.getIvyClasspathContainer(javaProject);
        if (cp == null) {
            return null;
        }
        return getIvy(cp.getConf().getInheritedIvySettingsPath());
    }",Get the Ivy instance for the specified project.,1,75
2086,"public WorkflowAttribute getAttribute(final String name) {
        if (name == null || name.length() == 0)
            throw new IllegalArgumentException();

        return attributes.get(name);
    }",Returns the specified attribute of the current element.,1,66
2087,"public File createTempFile(String prefix, String suffix, File parentDir) {
        return createTempFile(prefix, suffix, parentDir, false, false);
    }",Create a File object for a temporary file in a given directory.,1,47
2088,"public boolean isAssignableFrom(ResolvableType other) {
		return isAssignableFrom(other, null);
	}",Determine whether this  ResolvableType is assignable from the specified other type.,1,28
2089,"public static String getJavaVersion() {
        return JavaEnvUtils.getJavaVersion();
    }",Returns the version of Java this class is running under.,1,25
2090,"public Object casePlot( Plot object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Plot'.,1,25
2091,"protected List<List<GroovyRowResult>> callWithRows(String sql, List<Object> params, int processResultsSets, Closure closure) throws SQLException {
        Connection connection = createConnection();
        CallableStatement statement = null;
        List<GroovyResultSet> resultSetResources = new ArrayList<GroovyResultSet>();
        try {
            statement = connection.prepareCall(sql);

            LOG.fine(sql + "" | "" + params);
            setParameters(params, statement);
            boolean hasResultSet = statement.execute();
            List<Object> results = new ArrayList<Object>();
            int indx = 0;
            int inouts = 0;
            for (Object value : params) {
                if (value instanceof OutParameter) {
                    if (value instanceof ResultSetOutParameter) {
                        GroovyResultSet resultSet = CallResultSet.getImpl(statement, indx);
                        resultSetResources.add(resultSet);
                        results.add(resultSet);
                    } else {
                        Object o = statement.getObject(indx + 1);
                        if (o instanceof ResultSet) {
                            GroovyResultSet resultSet = new GroovyResultSetProxy((ResultSet) o).getImpl();
                            results.add(resultSet);
                            resultSetResources.add(resultSet);
                        } else {
                            results.add(o);
                        }
                    }
                    inouts++;
                }
                indx++;
            }
            closure.call(results.toArray(new Object[inouts]));
            List<List<GroovyRowResult>> resultSets = new ArrayList<List<GroovyRowResult>>();
            if (processResultsSets == NO_RESULT_SETS) {
                resultSets.add(new ArrayList<GroovyRowResult>());
                return resultSets;
            }
            //Check both hasResultSet and getMoreResults() because of differences in vendor behavior
            if (!hasResultSet) {
                hasResultSet = statement.getMoreResults();
            }
            while (hasResultSet && (processResultsSets != NO_RESULT_SETS)) {
                resultSets.add(asList(sql, statement.getResultSet()));
                if (processResultsSets == FIRST_RESULT_SET) {
                    break;
                } else {
                    hasResultSet = statement.getMoreResults();
                }
            }
            return resultSets;
        } catch (SQLException e) {
            LOG.warning(""Failed to execute: "" + sql + "" because: "" + e.getMessage());
            throw e;
        } finally {
            closeResources(connection, statement);
            for (GroovyResultSet rs : resultSetResources) {
                closeResources(null, null, rs);
            }
        }
    }","Base internal method for call(), callWithRows(), and callWithAllRows() style of methods.",1,685
2092,"public static String getTimeString(final LocalDateTime self) {
        return self.format(DateTimeFormatter.ISO_LOCAL_TIME);
    }",Formats this date/time with the  java.time.format.DateTimeFormatter#ISO_LOCAL_TIME formatter.,1,33
2093,"private static <S> Monad<__.µ<µ, S>> monad() {
        return new EitherMonad<>();
    }",The monadTrans of Either,1,42
2094,"public PaData decode( byte[] encodedPreAuthData ) throws IOException
    {
        ASN1InputStream ais = new ASN1InputStream( encodedPreAuthData );

        DERSequence sequence = ( DERSequence ) ais.readObject();

        return decode( sequence );
    }",Decodes a byte array into  PaData.,1,75
2095,"public static String getExtension(String path) {
        if(path.contains(""."")) return path.substring(path.lastIndexOf(""."") + 1).toLowerCase();
        else return """";
    }","Helper method for  #getMimeType(String, boolean) to calculate the last '.' extension of files",1,65
2096,"public static XDoubleListValue addDoubleToList(XID actorID, XField field, int index, double doub) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XDoubleListValue) {
			XDoubleListValue listValue = (XDoubleListValue)value;
			
			// manipulate the contained list
			listValue = addDoubleToList(listValue, index, doub);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Adds a new Double at the specified index to the  XDoubleListValue of the given  XField,1,154
2097,"public boolean isAllInDefaultDataSource(final Collection<String> logicTableNames) {
        for (String each : logicTableNames) {
            if (findTableRuleByLogicTable(each).isPresent() || isBroadcastTable(each)) {
                return false;
            }
        }
        return !logicTableNames.isEmpty();
    }",Judge logic tables is all belong to default data source.,1,83
2098,"public static ConfigurationSource getConfigurationSource(File file) {
        return new FileNameSource(file);
    }",Utility factory method for creating a  ConfigurationSource based on a file.,1,29
2099,"public E findFirst() {
        long rowIndex = this.query.find();
        if (rowIndex >= 0) {
            return realm.get(clazz, rowIndex);
        } else {
            return null;
        }
    }",Find the first object that fulfills the query conditions.,1,73
2100,"public static final String[] getKeywordValues(String key, ULocale locale, boolean commonlyUsed) {
        // Resolve region
        String prefRegion = locale.getCountry();
        if (prefRegion.length() == 0){
            ULocale loc = ULocale.addLikelySubtags(locale);
            prefRegion = loc.getCountry();
        }

        // Read values from supplementalData
        LinkedList values = new LinkedList();
        LinkedList otherValues = new LinkedList();

        UResourceBundle bundle = UResourceBundle.getBundleInstance(ICUResourceBundle.ICU_BASE_NAME, ""supplementalData"");
        bundle = bundle.get(""CurrencyMap"");
        Enumeration keyEnum = bundle.getKeys();
        boolean done = false;
        while (keyEnum.hasMoreElements() && !done) {
            String region = (String)keyEnum.nextElement();
            boolean isPrefRegion = prefRegion.equals(region);
            if (!isPrefRegion && commonlyUsed) {
                // With commonlyUsed=true, we do not put
                // currencies for other regions in the
                // result list.
                continue;
            }
            UResourceBundle regbndl = bundle.get(region);
            for (int i = 0; i < regbndl.getSize(); i++) {
                UResourceBundle curbndl = regbndl.get(i);
                if (curbndl.getType() != UResourceBundle.TABLE) {
                    // Currently, an empty ARRAY is mixed in..
                    continue;
                }
                String curID = curbndl.getString(""id"");
                if (isPrefRegion && !curbndl.containsKey(""to"") && !values.contains(curID)) {
                    // Currently active currency for the target country
                    values.add(curID);
                } else if (!otherValues.contains(curID) && !commonlyUsed){
                    otherValues.add(curID);
                }
            }
        }
        if (commonlyUsed) {
            if (values.size() == 0) {
                // This could happen if no valid region is supplied in the input
                // locale.  In this case, we use the CLDR's default.
                return getKeywordValues(key, new ULocale(""und""), true);
            }
        } else {
            // Consolidate the list
            Iterator itr = otherValues.iterator();
            while (itr.hasNext()) {
                String curID = (String)itr.next();
                if (!values.contains(curID)) {
                    values.add(curID);
                }
            }
        }
        return (String[]) values.toArray(new String[values.size()]);
    }","Given a key and a locale, returns an array of string values in a preferred order that would make a difference.",1,638
2101,"public static Object serializeAndRecover(Object o) {
        try {
            // serialize the Object
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            ObjectOutputStream so = new ObjectOutputStream(bos);
            so.writeObject(o);

            // deserialize the Object
            ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
            ObjectInputStream si = new ObjectInputStream(bis);
            return si.readObject();
        } catch (IOException ioe) {
            return null;
        } catch (ClassNotFoundException cnfe) {
            return null;
        }
    }",Serializes an object to a bytes array and then recovers the object from the bytes array.,1,153
2102,"public long updateDelay(final long nanoTimeNow, final Settings settings, final Settings indexSettings) {
        final long newComputedLeftDelayNanos = getRemainingDelay(nanoTimeNow, settings, indexSettings);
        lastComputedLeftDelayNanos = newComputedLeftDelayNanos;
        return newComputedLeftDelayNanos;
    }",Updates delay left based on current time (in nanoseconds) and index/node settings.,1,67
2103,"@Override
    public DenseFeature clone() throws CloneNotSupportedException {
        final DenseFeature clone = (DenseFeature) super.clone();
        clone.properties = clone.properties.clone();
        if (clone.properties instanceof Property[]) {
            final Property[] p = (Property[]) clone.properties;
            final Cloner cloner = new Cloner();
            for (int i=0; i<p.length; i++) {
                final Property property = p[i];
                if (property instanceof Cloneable) {
                    p[i] = (Property) cloner.clone(property);
                }
            }
        }
        return clone;
    }",Returns a copy of this feature,1,199
2104,"public boolean deleteBlock(long blockId) throws IOException {
    Long accessTimeMs = mLastBlockAccessTimeMs.remove(blockId);
    if (accessTimeMs != null) {
      String blockfile = getBlockFilePath(blockId);
      boolean result = false;
      try {
        if (!isBlockLocked(blockId)) {
          result = mFs.delete(blockfile, true);
        }
      } finally {
        if (result) {
          deleteBlockId(blockId);
          LOG.debug(""Removed block file:"" + blockfile);
        } else {
          mLastBlockAccessTimeMs.put(blockId, accessTimeMs);
          LOG.error(""Failed to delete block file! file name:"" + blockfile);
        }
      }
      return result;
    } else {
      LOG.error(""Block "" + blockId + "" does not exist in current StorageDir."");
      return false;
    }
  }",Remove a block from current StorageDir,1,230
2105,"public Meter newMeter(MetricName metricName,
                                String eventType,
                                TimeUnit unit) {
        final Metric existingMetric = metrics.get(metricName);
        if (existingMetric != null) {
            return (Meter) existingMetric;
        }
        return getOrAdd(metricName,
                        Meter.newMeter(newMeterTickThreadPool(), eventType, unit));
    }",Creates a new  Meter and registers it under the given metric name.,1,98
2106,"public MutableDateTime toMutableDateTimeISO() {
        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));
    }","Get this object as a MutableDateTime using ISOChronology, in the same zone.",1,36
2107,"public static final Document readXml(InputStream inputStream) {
		Assert.notNull(inputStream, ""InputStream required"");
		try {
			return factory.newDocumentBuilder().parse(inputStream);
		} catch (Exception e) {
			throw new IllegalStateException(""Could not open input stream"", e);
		}
	}",Read an XML document from the supplied input stream and return a document.,1,86
2108,"public static Path load(Class<?> context, String module, Configuration<String> name, String... defaultNames) {
        return load(context, module, name, null, defaultNames);
    }","Loads a library resource using  #load(String, String) with the name specified by  name.",1,63
2109,"public boolean awaitAndShutdown(long timeout, TimeUnit timeUnit) {
		if (scheduler == null) {
			return true;
		}
		else if (scheduler instanceof EventLoopProcessor) {
			return ((EventLoopProcessor) scheduler).awaitAndShutdown(timeout, timeUnit);
		}
		throw new UnsupportedOperationException(""Underlying Processor is null or doesn't implement EventLoopProcessor"");
	}",Blocking shutdown of the internal  EventLoopProcessor with  Processor#onComplete().,1,95
2110,"public static StringBuilder rightAlign(StringBuilder in, int len) {
        int pfx = len - in.length();
        if (pfx <= 0) {
            return in;
        }
        if (pfx > SPACES_LEN) {
            pfx = SPACES_LEN;
        }
        in.insert(0, SPACES.substring(0, pfx));
        return in;
    }",Right aligns some text in a StringBuilder N.B.,1,114
2111,"public CompareToBuilder append(int[] lhs, int[] rhs) {
        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null) {
            comparison = -1;
            return this;
        }
        if (rhs == null) {
            comparison = +1;
            return this;
        }
        if (lhs.length != rhs.length) {
            comparison = (lhs.length < rhs.length) ? -1 : +1;
            return this;
        }
        for (int i = 0; i < lhs.length && comparison == 0; i++) {
            append(lhs[i], rhs[i]);
        }
        return this;
    }","Deep comparison of an int array.  Check if arrays are same using == Check if either is null, a null array is less than a non-null Check array length, a shorter length array is less than a longer length array Check array contents element by element using  #append(int, int)",1,254
2112,"public Iterator<ImmutablePerson> iterator() {
    return new Iterator<ImmutablePerson>() {
      private int index;
      @Override
      public boolean hasNext() {
        return index < size;
      }

      @Override
      public ImmutablePerson next() {
        if (!hasNext()) {
          throw new NoSuchElementException(""At index "" + index + "" while size is "" + size);
        }
        return get(index++);
      }
    };
  }",Returns an iterator over generated entries.,1,140
2113,"public final Dimension getDimension() {
        if (_parentUnit != this)
            return _parentUnit.getDimension();
        if (_parentUnit instanceof BaseUnit)
            return ((BaseUnit< ? super Q>) _parentUnit)._dimension.get();
        ProductUnit< ? super Q> productUnit = (ProductUnit< ? super Q>) _parentUnit;
        Dimension dimension = Dimension.NONE;
        for (int i = 0; i < productUnit.size(); i++) {
            ProductUnit.Element e = productUnit.get(i);
            Dimension d = e.getUnit().getDimension().pow(e.getPow()).root(
                    e.getRoot());
            dimension = dimension.multiply(d);
        }
        return dimension;
    }",Returns the  javolution.realtime.LocalContext local dimension of this unit.,1,224
2114,"protected List<WebSocketExtension> filterRequestedExtensions(ServerHttpRequest request,
			List<WebSocketExtension> requested, List<WebSocketExtension> supported) {

		if (requested != null) {
			if (logger.isDebugEnabled()) {
				logger.debug(""Requested extension(s): "" + requested + "", supported extension(s): "" + supported);
			}
		}
		return requested;
	}",Filter the list of requested WebSocket extensions.,1,101
2115,"public boolean tableFieldsEqual(TablePermission tp) {
    if (tp == null) {
      return false;
    }

    boolean tEq = (table == null && tp.table == null) || (table != null && table.equals(tp.table));
    boolean fEq = (family == null && tp.family == null) || Bytes.equals(family, tp.family);
    boolean qEq = (qualifier == null && tp.qualifier == null) ||
                   Bytes.equals(qualifier, tp.qualifier);
    return tEq && fEq && qEq;
  }",Check if fields of table in table permission equals.,1,198
2116,"protected Date handleUnparsableDateString(String dateString)
            throws Property.ConversionException {
        throw new Property.ConversionException();
    }",This method is called to handle a non-empty date string from the client if the client could not parse it as a Date.,1,35
2117,"public static Matrix<Complex> valueOf(Complex[][] elements) {
        return ComplexMatrix.valueOf(elements);
    }",Returns a dense matrix from a 2-dimensional array of  Complex complex numbers (convenience method).,1,36
2118,"public String getDeclarationAsString(boolean includingModifiers, boolean includingThrows, boolean includingParameterName) {
        StringBuffer sb = new StringBuffer();
        if (includingModifiers) {
            AccessSpecifier accessSpecifier = ModifierSet.getAccessSpecifier(getModifiers());
            sb.append(accessSpecifier.getCodeRepresenation());
            sb.append(accessSpecifier == AccessSpecifier.DEFAULT ? """" : "" "");
            if (ModifierSet.isStatic(getModifiers())){
                sb.append(""static "");
            }
            if (ModifierSet.isAbstract(getModifiers())){
                sb.append(""abstract "");
            }
            if (ModifierSet.isFinal(getModifiers())){
                sb.append(""final "");
            }
            if (ModifierSet.isNative(getModifiers())){
                sb.append(""native "");
            }
            if (ModifierSet.isSynchronized(getModifiers())){
                sb.append(""synchronized "");
            }
        }
        // TODO verify it does not print comments connected to the type
        sb.append(getType().toStringWithoutComments());
        sb.append("" "");
        sb.append(getName());
        sb.append(""("");
        boolean firstParam = true;
        for (Parameter param : getParameters())
        {
            if (firstParam) {
                firstParam = false;
            } else {
                sb.append("", "");
            }
            if (includingParameterName) {
                sb.append(param.toStringWithoutComments());
            } else {
                sb.append(param.getType().toStringWithoutComments());
            }
        }
        sb.append("")"");
        if (includingThrows) {
            boolean firstThrow = true;
            for (NameExpr thr : getThrows()) {
                if (firstThrow) {
                    firstThrow = false;
                    sb.append("" throws "");
                } else {
                    sb.append("", "");
                }
                sb.append(thr.toStringWithoutComments());
            }
        }
        return sb.toString();
    }",The declaration returned has this schema: [accessSpecifier] [static] [abstract] [final] [native] [synchronized] returnType methodName ([paramType [paramName]]) [throws exceptionsList],1,548
2119,"public static String format(long millis, String format, boolean padWithZeros, TimeZone timezone) {

        if(millis > 28 * DateUtils.MILLIS_PER_DAY) {
            Calendar c = Calendar.getInstance(timezone);
            c.set(1970, 0, 1, 0, 0, 0);
            c.set(Calendar.MILLISECOND, 0);
            return format(c.getTime().getTime(), millis, format, padWithZeros, timezone);
        }

        Token[] tokens = lexx(format);

        int years        = 0;
        int months       = 0;
        int days         = 0;
        int hours        = 0;
        int minutes      = 0;
        int seconds      = 0;
        int milliseconds = 0;

        /*  This will never be evaluated
        if(Token.containsTokenWithValue(tokens, y) ) {
            years = (int) (millis / DateUtils.MILLIS_PER_YEAR);
            millis = millis - (years * DateUtils.MILLIS_PER_YEAR);
        }
        if(Token.containsTokenWithValue(tokens, M) ) {
            months = (int) (millis / DateUtils.MILLIS_PER_MONTH);
            millis = millis - (months * DateUtils.MILLIS_PER_MONTH);
            // as MONTH * 12 != YEAR, this fixes issues
            if(months == 12) {
                years++;
                months = 0;
            }
        }
        */
        if(Token.containsTokenWithValue(tokens, d) ) {
            days = (int) (millis / DateUtils.MILLIS_PER_DAY);
            millis = millis - (days * DateUtils.MILLIS_PER_DAY);
        }
        if(Token.containsTokenWithValue(tokens, H) ) {
            hours = (int) (millis / DateUtils.MILLIS_PER_HOUR);
            millis = millis - (hours * DateUtils.MILLIS_PER_HOUR);
        }
        if(Token.containsTokenWithValue(tokens, m) ) {
            minutes = (int) (millis / DateUtils.MILLIS_PER_MINUTE);
            millis = millis - (minutes * DateUtils.MILLIS_PER_MINUTE);
        }
        if(Token.containsTokenWithValue(tokens, s) ) {
            seconds = (int) (millis / DateUtils.MILLIS_PER_SECOND);
            millis = millis - (seconds * DateUtils.MILLIS_PER_SECOND);
        }
        if(Token.containsTokenWithValue(tokens, S) ) {
            milliseconds = (int) millis;
        }

        return formatDuration(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);
    }","Get the time gap as a string, using the specified format.",1,534
2121,"@Override
    @XmlElement(name = ""baseGeodeticCRS"", required = true)  // Note: older GML version used ""baseGeographicCRS"".
    public GeographicCRS getBaseCRS() {
        return (GeographicCRS) getConversionFromBase().getSourceCRS();
    }",Returns the plain org.apache.sis.referencing.operation.DefaultConversion#getSourceCRS() source of the plain #getConversionFromBase() conversion from base.,1,53
2122,"public T[] getKeyFrames () {
		return keyFrames;
	}",Returns the keyframes[] array where all the frames of the animation are stored.,1,22
2123,"public List<Components> getAllAnnotation() {
    List<Components> annotations = new ArrayList<>();
    for (Map.Entry<String, Map> entry : REGISTRY_MAP.entrySet()) {
      Map infoMap = entry.getValue();
      if (infoMap.containsKey(KEY_ANNOTATION)) {
        annotations.add((Components) infoMap.get(KEY_ANNOTATION));
      }
    }
    return annotations;
  }",Return all component implementation annotations,1,120
2124,"public DataFrame filter(String seriesName) {
    return this.filter(this.getBooleans(seriesName));
  }",Returns a copy of the DataFrame with rows filtered by series values referenced by  seriesName.,1,32
2125,"public boolean isSpeaking() {
        return runAction(new Action<Boolean>() {
            @Override
            public Boolean run(ITextToSpeechService service) throws RemoteException {
                return service.isSpeaking();
            }
        }, false, ""isSpeaking"");
    }",Checks whether the TTS engine is busy speaking.,1,76
2126,"public Definition getDefinition(String name, Locale locale) {
        Definition definition = null;

        if (locale != null) {
            Map<String, Definition> localeSpecificMap = localeSpecificDefinitions
                    .get(locale);
            if (localeSpecificMap != null) {
                definition = localeSpecificMap.get(name);
            }
        }

        if (definition == null) {
            definition = getDefinition(name);
        }

        return definition;
    }",Returns a Definition object that matches the given name and locale.,1,138
2127,"public String getDefault() {
            synchronized (DefineAttribute.class) {
                // Make sure counter is managed globally
                return prefix + ""#"" + getClass().getName() + ""#"" + (++count);
            }
        }",Gets the default value for this attibute.,1,66
2128,"public final boolean equals(Object readableDuration) {
        if (this == readableDuration) {
            return true;
        }
        if (readableDuration instanceof ReadableDuration == false) {
            return false;
        }
        ReadableDuration other = (ReadableDuration) readableDuration;
        return (getMillis() == other.getMillis());
    }",Compares this object with the specified object for equality based on the millisecond length.,1,101
2129,"public static ProtoMessage parseFrom(byte[] serialized, ProtoMessage prototype) {
    try {
      return new ProtoMessage(
          prototype.getMessage(MessageLite.class).getParserForType().parseFrom(serialized));
    } catch (InvalidProtocolBufferException e) {
      throw new IllegalArgumentException(e);
    }
  }",Parses proto message from bytes given a prototype.,1,86
2130,"public DataSource dataSource(final OrchestrationConfiguration orchestrationConfiguration) throws SQLException {
        try (ShardingOrchestrationFacade shardingOrchestrationFacade = new ShardingOrchestrationFacade(orchestrationConfiguration, Collections.singletonList(ShardingConstant.LOGIC_SCHEMA_NAME))) {
            if (shardingOrchestrationFacade.getConfigService().isShardingRule(ShardingConstant.LOGIC_SCHEMA_NAME)) {
                return new OrchestrationShardingDataSource(orchestrationConfiguration);
            } else if (shardingOrchestrationFacade.getConfigService().isEncryptRule(ShardingConstant.LOGIC_SCHEMA_NAME)) {
                return new OrchestrationEncryptDataSource(orchestrationConfiguration);
            } else {
                return new OrchestrationMasterSlaveDataSource(orchestrationConfiguration);
            }
        }
    }",Get data source bean from registry center.,1,142
2131,"public static Tag outcome(ClientHttpResponse response) {
		try {
			if (response != null) {
				HttpStatus.Series series = HttpStatus.Series.resolve(response.getRawStatusCode());
				if (series != null) {
					return SERIES_OUTCOMES.getOrDefault(series, OUTCOME_UNKNOWN);
				}
			}
		}
		catch (IOException | IllegalArgumentException ex) {
			// Continue
		}
		return OUTCOME_UNKNOWN;
	}",Creates an  outcome  Tag derived from the  ClientHttpResponse#getRawStatusCode() status of the given  response.,1,124
2132,"public List<ShardRouting> getShards() {
        return shards();
    }",Returns a  List of shards,1,24
2133,"public long getColumnCardinality(String schema, String table, Authorizations auths, String family, String qualifier, Collection<Range> colValues)
            throws ExecutionException
    {
        LOG.debug(""Getting cardinality for %s:%s"", family, qualifier);

        // Collect all exact Accumulo Ranges, i.e. single value entries vs. a full scan
        Collection<CacheKey> exactRanges = colValues.stream()
                .filter(ColumnCardinalityCache::isExact)
                .map(range -> new CacheKey(schema, table, family, qualifier, range, auths))
                .collect(Collectors.toList());

        LOG.debug(""Column values contain %s exact ranges of %s"", exactRanges.size(), colValues.size());

        // Sum the cardinalities for the exact-value Ranges
        // This is where the reach-out to Accumulo occurs for all Ranges that have not
        // previously been fetched
        long sum = cache.getAll(exactRanges).values().stream().mapToLong(Long::longValue).sum();

        // If these collection sizes are not equal,
        // then there is at least one non-exact range
        if (exactRanges.size() != colValues.size()) {
            // for each range in the column value
            for (Range range : colValues) {
                // if this range is not exact
                if (!isExact(range)) {
                    // Then get the value for this range using the single-value cache lookup
                    sum += cache.get(new CacheKey(schema, table, family, qualifier, range, auths));
                }
            }
        }

        return sum;
    }",Gets the column cardinality for all of the given range values.,1,328
2134,"//TODO This code will be obsoleted once we add hour-minute-second pattern data in CLDR
    private static String expandOffsetPattern(String offsetHM) {
        int idx_mm = offsetHM.indexOf(""mm"");
        if (idx_mm < 0) {
            throw new RuntimeException(""Bad time zone hour pattern data"");
        }
        String sep = "":"";
        int idx_H = offsetHM.substring(0, idx_mm).lastIndexOf(""H"");
        if (idx_H >= 0) {
            sep = offsetHM.substring(idx_H + 1, idx_mm);
        }
        return offsetHM.substring(0, idx_mm + 2) + sep + ""ss"" + offsetHM.substring(idx_mm + 2);
    }",Appends seconds field to the offset pattern with hour/minute,1,182
2135,"public Folder remove(long folderId)
		throws NoSuchFolderException, SystemException {
		return remove(Long.valueOf(folderId));
	}",Removes the folder with the primary key from the database.,1,38
2136,"public ReferenceCountingResourceHolder<T> take()
  {
    checkInitialized();
    try {
      return wrapObject(takeObject());
    }
    catch (InterruptedException e) {
      throw Throwables.propagate(e);
    }
  }","Take a resource from the pool, waiting if necessary until an element becomes available.",1,67
2137,"public int getFunctionIndex() {
        return functionId;
    }",Gets an unique index for a function descriptor.,1,19
2138,"public ProtocolProviderService signin(String userName, String password)
        throws OperationFailedException
    {
        ProtocolProviderFactory factory
            = JabberAccRegWizzActivator.getJabberProtocolProviderFactory();

        return this.installAccount(factory,
                                   userName,
                                   password);
    }",Installs the account defined in this wizard.,1,62
2139,"public static KeywordList parse(String keywordString, Character delimiter) {
        return parse(keywordString, delimiter, Keyword.DEFAULT_HIERARCHICAL_DELIMITER);
    }",Parses the keyword list and uses  Keyword#DEFAULT_HIERARCHICAL_DELIMITER as hierarchical delimiter.,1,40
2140,"@SuppressWarnings(""ReferenceEquality"")
  public boolean handleBuffer(ByteBuffer buffer, long presentationTimeUs)
      throws InitializationException, WriteException {
    Assertions.checkArgument(inputBuffer == null || buffer == inputBuffer);
    if (!isInitialized()) {
      initialize();
      if (playing) {
        play();
      }
    }

    if (needsPassthroughWorkarounds()) {
      // An AC-3 audio track continues to play data written while it is paused. Stop writing so its
      // buffer empties. See [Internal: b/18899620].
      if (audioTrack.getPlayState() == PLAYSTATE_PAUSED) {
        // We force an underrun to pause the track, so don't notify the listener in this case.
        hasData = false;
        return false;
      }

      // A new AC-3 audio track's playback position continues to increase from the old track's
      // position for a short time after is has been released. Avoid writing data until the playback
      // head position actually returns to zero.
      if (audioTrack.getPlayState() == PLAYSTATE_STOPPED
          && audioTrackUtil.getPlaybackHeadPosition() != 0) {
        return false;
      }
    }

    boolean hadData = hasData;
    hasData = hasPendingData();
    if (hadData && !hasData && audioTrack.getPlayState() != PLAYSTATE_STOPPED) {
      long elapsedSinceLastFeedMs = SystemClock.elapsedRealtime() - lastFeedElapsedRealtimeMs;
      listener.onUnderrun(bufferSize, C.usToMs(bufferSizeUs), elapsedSinceLastFeedMs);
    }

    if (inputBuffer == null) {
      // We are seeing this buffer for the first time.
      if (!buffer.hasRemaining()) {
        // The buffer is empty.
        return true;
      }

      if (passthrough && framesPerEncodedSample == 0) {
        // If this is the first encoded sample, calculate the sample size in frames.
        framesPerEncodedSample = getFramesPerEncodedSample(outputEncoding, buffer);
      }

      if (startMediaTimeState == START_NOT_SET) {
        startMediaTimeUs = Math.max(0, presentationTimeUs);
        startMediaTimeState = START_IN_SYNC;
      } else {
        // Sanity check that presentationTimeUs is consistent with the expected value.
        long expectedPresentationTimeUs = startMediaTimeUs
            + framesToDurationUs(getSubmittedFrames());
        if (startMediaTimeState == START_IN_SYNC
            && Math.abs(expectedPresentationTimeUs - presentationTimeUs) > 200000) {
          Log.e(TAG, ""Discontinuity detected [expected "" + expectedPresentationTimeUs + "", got ""
              + presentationTimeUs + ""]"");
          startMediaTimeState = START_NEED_SYNC;
        }
        if (startMediaTimeState == START_NEED_SYNC) {
          // Adjust startMediaTimeUs to be consistent with the current buffer's start time and the
          // number of bytes submitted.
          startMediaTimeUs += (presentationTimeUs - expectedPresentationTimeUs);
          startMediaTimeState = START_IN_SYNC;
          listener.onPositionDiscontinuity();
        }
      }

      if (passthrough) {
        submittedEncodedFrames += framesPerEncodedSample;
      } else {
        submittedPcmBytes += buffer.remaining();
      }

      inputBuffer = buffer;
    }

    if (passthrough) {
      // Passthrough buffers are not processed.
      writeBuffer(inputBuffer, presentationTimeUs);
    } else {
      processBuffers(presentationTimeUs);
    }

    if (!inputBuffer.hasRemaining()) {
      inputBuffer = null;
      return true;
    }
    return false;
  }","Attempts to process data from a  ByteBuffer, starting from its current position and ending at its limit (exclusive).",1,723
2141,"public JCRRole saveRole(final JCRRole role) throws RepositoryException {
        return JCRTemplate.getInstance().doExecuteWithSystemSession(new JCRCallback<JCRRole>() {
            public JCRRole doInJCR(JCRSessionWrapper session) throws RepositoryException {
                saveRole(role, session);
                return role;
            }
        });
    }",Creates or updates the specified  JCRRole.,1,86
2142,"public synchronized boolean createOrJoin(String nickname) throws NoResponseException, XMPPErrorException,
                    SmackException {
        return createOrJoin(nickname, null, null, connection.getPacketReplyTimeout());
    }","Same as  #createOrJoin(String, String, DiscussionHistory, long), but without a password, specifying a discussion history and using the connections default reply timeout.",1,51
2143,"@SchedulerSupport(SchedulerSupport.NONE)
    public final TestObserver<T> test(boolean cancelled) {
        TestObserver<T> ts = new TestObserver<T>();

        if (cancelled) {
            ts.cancel();
        }

        subscribe(ts);
        return ts;
    }","Creates a TestObserver optionally in cancelled state, then subscribes it to this Single.",1,84
2144,"public boolean equals(Object other) {
                        return this == other || !(other == null || getClass() != other.getClass())
                                && super.equals(other)
                                && enterType == ((Inlining.Resolved.ForMethodExit) other).enterType;
                    }",Returns the additional padding this exit advice implies.,1,90
2145,"public RangedUri attemptMerge(RangedUri other, String baseUri) {
    final String resolvedUri = resolveUriString(baseUri);
    if (other == null || !resolvedUri.equals(other.resolveUriString(baseUri))) {
      return null;
    } else if (length != C.LENGTH_UNSET && start + length == other.start) {
      return new RangedUri(resolvedUri, start,
          other.length == C.LENGTH_UNSET ? C.LENGTH_UNSET : length + other.length);
    } else if (other.length != C.LENGTH_UNSET && other.start + other.length == start) {
      return new RangedUri(resolvedUri, other.start,
          length == C.LENGTH_UNSET ? C.LENGTH_UNSET : other.length + length);
    } else {
      return null;
    }
  }",Attempts to merge this  RangedUri with another and an optional common base uri.,1,250
2146,"protected XmlRpcStruct parseStructElement(Element structElement) {
    XmlRpcStruct struct = new XmlRpcStruct();

    NodeList children = structElement.getChildNodes();
    int childCount = children.getLength();

    for (int i = 0; i < childCount; i++) {
      Node child = children.item(i);

      if (child instanceof Element) {
        String childName = child.getNodeName();

        if (XmlRpcEntity.MEMBER.equals(childName)) {
          Element memberElement = (Element) child;
          XmlRpcMember member = this.parseMemberElement(memberElement);
          struct.add(member);
        }
      }
    }

    return struct;
  }",Parses the given XML element that contains a XML-RPC complex structure.,1,201
2147,"public static List<HRegionInfo> listAllRegions(Configuration conf, final boolean offlined)
  throws IOException {
    final List<HRegionInfo> regions = new ArrayList<HRegionInfo>();
    MetaScannerVisitor visitor = new MetaScannerVisitorBase() {
        @Override
        public boolean processRow(Result result) throws IOException {
          if (result == null || result.isEmpty()) {
            return true;
          }

          RegionLocations locations = MetaReader.getRegionLocations(result);
          if (locations == null) return true;
          for (HRegionLocation loc : locations.getRegionLocations()) {
            if (loc != null) {
              HRegionInfo regionInfo = loc.getRegionInfo();
              // If region offline AND we are not to include offlined regions, return.
              if (regionInfo.isOffline() && !offlined) continue;
              regions.add(regionInfo);
            }
          }
          return true;
        }
    };
    metaScan(conf, visitor);
    return regions;
  }",Lists all of the regions currently in META.,1,270
2148,"public static PolyglotEngine.Builder newBuilder() {
        // making Builder non-static inner class is a
        // nasty trick to avoid the Builder class to appear
        // in Javadoc next to PolyglotEngine class
        PolyglotEngine vm = new PolyglotEngine();
        return vm.new Builder();
    }",Creation of new Truffle virtual machine.,1,52
2149,"public SortedItemPropertyDescriptor getItemPropertyDescriptor(int row) {
		if (this.identifiable != null) {
			Object obj = this.rows.get(row);
			if (obj instanceof SortedItemPropertyDescriptor) {
				return (SortedItemPropertyDescriptor) obj;
			}
		}
		return null;
	}",Returns the  SortedItemPropertyDescriptor of the row's object.,1,84
2150,"public long getJavaScriptTimeout() {
        return scriptEngine_.getContextFactory().getTimeout();
    }",Returns the number of milliseconds that a script is allowed to execute before being terminated.,1,27
2151,"@SuppressWarnings(""serial"")
	protected IHandlePartFactory<Node> getHandlePartFactory() {
		IViewer<Node> viewer = getHost().getRoot().getViewer();
		return viewer.getAdapter(
				AdapterKey.get(new TypeToken<IHandlePartFactory<Node>>() {
				}, HOVER_HANDLE_PART_FACTORY));
	}",Returns the  IHandlePartFactory for hover handles.,1,83
2153,"public boolean convergeTo(TaskContext taskContext, byte[] content, boolean atomicWrite) {
        Optional<Instant> lastModifiedTime = attributesCache.forceGet().map(FileAttributes::lastModifiedTime);

        if (lastModifiedTime.isEmpty()) {
            taskContext.recordSystemModification(logger, ""Creating file "" + path);
            path.createParents();
            writeBytes(content, atomicWrite);
            contentCache.updateWith(content, attributesCache.forceGet().orElseThrow().lastModifiedTime());
            return true;
        }

        if (Arrays.equals(content, contentCache.get(attributesCache.getOrThrow().lastModifiedTime()))) {
            return false;
        } else {
            taskContext.recordSystemModification(logger, ""Patching file "" + path);
            writeBytes(content, atomicWrite);
            contentCache.updateWith(content, attributesCache.forceGet().orElseThrow().lastModifiedTime());
            return true;
        }
    }","CPU, I/O, and memory usage is optimized for repeated calls with the same argument.",1,241
2154,"private static List<Symbol> cast(List<Symbol> symbolsToCast, List<DataType> targetTypes) {
        Preconditions.checkState(symbolsToCast.size() == targetTypes.size(),
            ""Given symbol list has to match the target type list."");
        int size = symbolsToCast.size();
        List<Symbol> castList = new ArrayList<>(size);
        for (int i = 0; i < size; i++) {
            castList.add(symbolsToCast.get(i).cast(targetTypes.get(i), false));
        }
        return castList;
    }",Casts a list of symbols to a given list of target types.,1,157
2155,"public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties) {
		return createContainerManagedEntityManager(emf, properties, true);
	}",Create an EntityManager whose lifecycle is managed by the container and which automatically joins a transaction when being invoked within its scope.,1,38
2156,"public IAnchor getStartAnchor() {
		return anchorsProperty.get(getStartAnchorKey());
	}","Returns the currently assigned start  IAnchor anchor, or null if no start  IAnchor anchor is assigned.",1,26
2157,"protected static String makeStatementName(Term subject, String relation, Term predicate) {
        StringBuffer nameStr = new StringBuffer();
        nameStr.append(Symbols.STATEMENT_OPENER);
        nameStr.append(subject.getName());
        nameStr.append(' ' + relation + ' ');
        nameStr.append(predicate.getName());
        nameStr.append(Symbols.STATEMENT_CLOSER);
        return nameStr.toString();
    }",Default method to make the nameStr of an image term from given fields,1,117
2158,"public List<Cell> getColumn(byte [] family, byte [] qualifier) {
    List<Cell> result = new ArrayList<Cell>();

    Cell [] kvs = raw();

    if (kvs == null || kvs.length == 0) {
      return result;
    }
    int pos = binarySearch(kvs, family, qualifier);
    if (pos == -1) {
      return result; // cant find it
    }

    for (int i = pos ; i < kvs.length ; i++ ) {
      KeyValue kv = KeyValueUtil.ensureKeyValue(kvs[i]);
      if (kv.matchingColumn(family,qualifier)) {
        result.add(kv);
      } else {
        break;
      }
    }

    return result;
  }",Return the Cells for the specific column.,1,247
2159,"public String processUploadAndCheck() {
        String uploadsDone = (String) httpServletRequest.getAttribute(RequestFilter.ATTR_UPLOADS_DONE);

        FileItem usersFileItem;
        String processingFlag = ""success"";

        if (uploadsDone != null && uploadsDone.equals(RequestFilter.ATTR_UPLOADS_DONE)) {

            try {
                usersFileItem = (FileItem) httpServletRequest.getAttribute(REQ_ATTR_GROUPFILE);
                // Check for nothing to upload.
                if (getGroupUploadTextArea().length() == 0 && usersFileItem.getSize() == 0) {
                    messages.addMessage(new TargettedMessage(""import1.error.no.content"", null, TargettedMessage.SEVERITY_ERROR));
                    return null;
                }

                importedGroups = new ArrayList<>();
                List<String[]> lines;

                // Process any data in the uploaded file.
                if(usersFileItem != null && usersFileItem.getSize() > 0) {

                    String mimetype = usersFileItem.getContentType();
                    String filename = usersFileItem.getName();

                    if (ArrayUtils.contains(CSV_MIME_TYPES, mimetype) 
                            || StringUtils.endsWith(filename, ""csv"")) {
                        log.debug(""CSV file uploaded"");

                        CSVReader reader;
                        lines = new ArrayList<>();

                        try {
                            reader = new CSVReader(new InputStreamReader(usersFileItem.getInputStream()));
                            lines = reader.readAll();
                        } catch (IOException ioe) {
                            log.error(ioe.getClass() + "" : "" + ioe.getMessage());
                            processingFlag = ""error"";
                        }

                        if (processUploadGroupLines(lines)) {
                            processingFlag = ""success""; // SHORT CIRCUIT
                        }
                    } else {
                        log.error(""Invalid file type: "" + mimetype);
                        messages.addMessage(new TargettedMessage(""import1.error.file.type.invalid"", null, TargettedMessage.SEVERITY_ERROR));
                        processingFlag = null;
                    }
                }

                // Process any data in the HTML text area.
                if (getGroupUploadTextArea().length() > 0) {
                    String[] splitLines = getGroupUploadTextArea().split(""\r\n"");
                    lines = new ArrayList<>();
                    for (String s: splitLines) {
                        lines.add(s.split("",""));
                    }
                    
                    if (processUploadGroupLines(lines)) {
                        processingFlag = ""success""; // SHORT CIRCUIT
                    }

                }
            }
            catch (Exception e){
                log.error(e.getClass() + "" : "" + e.getMessage());
                processingFlag =  ""error""; // SHORT CIRCUIT
            }
        }

        return processingFlag;
    }","Grabs the uploaded file from the groupfile request attribute, as well as any data in the HTML textarea, and extracts any group details from them, adding them to the importedGroups list as it goes.",1,698
2160,"protected IConfigurationProvider getConfigurationProvider() {
		return getPictogramElementDelegate().getConfigurationProvider();
	}",Returns the IConfigurationProvider.,1,25
2161,"protected ExceptionDefinition getExceptionPolicy(Exchange exchange, Throwable exception) {
        if (exceptionPolicy == null) {
            throw new IllegalStateException(""The exception policy has not been set"");
        }

        return exceptionPolicy.getExceptionPolicy(exceptionPolicies, exchange, exception);
    }",Attempts to find the best suited  ExceptionDefinition to be used for handling the given thrown exception.,1,69
2162,"String[] getReplacementExpressions() {
        String[] result;
        if (replExprCount == 0) {
            result = noReplExpressions;
        } else {
            result = new String[replExprCount];
            int srcIndex = replExprCount - 1;
            int dstIndex = 0;
            do {
                result[dstIndex++] = replExpressions[srcIndex--];
            } while (srcIndex != -1);
        }
        return result;
    }",Returns last used replacement expressions in order from the most recently used ones to the oldest ones.,1,135
2163,"public static <T, U extends T> T inject(Object self, U initialValue, Closure<? extends T> closure) {
        Iterator iter = InvokerHelper.asIterator(self);
        return inject(iter, initialValue, closure);
    }","Iterates through the given Object, passing in the initial value to the closure along with the first item.",1,76
2164,"private AttributeImpl getAttribute( String id )
    {
        AttributeImpl attr = new AttributeImpl( id );
        attr.add( ""value0"" );
        attr.add( ""value1"" );
        attr.add( ""value2"" );
        return attr;
    }",Creates and populates a AttributeImpl with a specific id.,1,81
2165,"public SVNRepository remove(SVNRepository svnRepository)
		throws SystemException {
		return super.remove(svnRepository);
	}",Removes the s v n repository from the database.,1,32
2166,"public String jsxGet_cssText() {
        return jsElement_.getHtmlElementOrDie().getAttribute(""style"");
    }",Returns the actual text of the style.,1,30
2167,"public XMLClassDescriptor resolve(Class type) {
        
        clearError();
        
        if (type == null) return null;
        
        XMLClassDescriptor classDesc = (XMLClassDescriptor) _cache.get(type);
        if (classDesc != null) return classDesc;
        try {
            classDesc = MarshalHelper.getClassDescriptor(type);
        }
        catch(MarshalException mx) {
            String err = mx.toString();
            if (err == null) setError(IO_ERR);
            else setError(err);
        }
        
        if (classDesc != null) {
            _cache.put(type, classDesc);
        }
        return classDesc;
    } //-- resolve",Returns the XMLClassDescriptor for the given class,1,195
2168,"public String withdrawFunds(Currency currency, BigDecimal amount, String address)
      throws IOException {
    // determine withdrawal type
    String type = BitfinexUtils.convertToBitfinexWithdrawalType(currency.toString());
    // Bitfinex withdeawal can be from different type of wallets    *
    // we have to use one of these for now: Exchange -
    // to be able to withdraw instantly after trading for example
    // The wallet to withdraw from, can be âtradingâ, âexchangeâ, or âdepositâ.
    String walletSelected = ""exchange"";
    // We have to convert XChange currencies to Bitfinex currencies: can be âbitcoinâ, âlitecoinâ or
    // âetherâ or âtetherâ or âwireâ.
    return withdraw(type, walletSelected, amount, address);
  }",Withdrawal support,1,101
2169,"public double getSquaredError() {
    if (m_FastDistanceCalc)
      return Double.NaN;
    else
      return Utils.sum(m_squaredErrors);
  }",Gets the squared error for all clusters.,1,42
2170,"public String getCharRepresentation() {
		if (length < charSize /* also covers case of isProbe() */ ) {
			return UNKNOWN_DOT_DOT_DOT;
		}

		// if the charset's charsize is bigger than the number of bytes we have,
		// discard the charset and fall back to US-ASCII
		String newCSName = (length < charSize) ? DEFAULT_CHARSET_NAME : charsetName;

		StringDataInstance charseqSDI =
			new StringDataInstance(this, StringLayoutEnum.CHAR_SEQ, buf, length, newCSName);

		return charseqSDI.getStringRep(StringRenderBuilder.SINGLE_QUOTE,
			StringRenderBuilder.DOUBLE_QUOTE);
	}","Convert a char value (or sequence of char values) in memory into its canonical unicode representation, using attached charset and encoding information.",1,120
2171,"public String getComment() {
	    supportedOnlyIn2();
		return this.comment;
	}","Returns the doc comment string, including the starting and ending comment delimiters, and any embedded line breaks.",1,27
2172,"public TimerContext time() {
        return new TimerContext(this);
    }","Returns a timing  TimerContext, which measures an elapsed time in nanoseconds.",1,24
2173,"public static int gcd(int u, int v) {
        if (u * v == 0) {
            return (Math.abs(u) + Math.abs(v));
        }
        // keep u and v negative, as negative integers range down to
        // -2^31, while positive numbers can only be as large as 2^31-1
        // (i.e. we can't necessarily negate a negative number without
        // overflow)
        /* assert u!=0 && v!=0; */
        if (u>0) { u=-u; } // make u negative
        if (v>0) { v=-v; } // make v negative
        // B1. [Find power of 2]
        int k=0;
        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
            u/=2; v/=2; k++; // cast out twos.
        }
        if (k==31) {
            throw new ArithmeticException(""overflow: gcd is 2^31"");
        }
        // B2. Initialize: u and v have been divided by 2^k and at least
        //     one is odd.
        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
        // t negative: u was odd, v may be even (t replaces v)
        // t positive: u was even, v is odd (t replaces u)
        do {
            /* assert u<0 && v<0; */
            // B4/B3: cast out twos from t.
            while ((t&1)==0) { // while t is even..
                t/=2; // cast out twos
            }
            // B5 [reset max(u,v)]
            if (t>0) {
                u = -t;
            } else {
                v = t;
            }
            // B6/B3. at this point both u and v should be odd.
            t = (v - u)/2;
            // |u| larger: t positive (replace u)
            // |v| larger: t negative (replace v)
        } while (t!=0);
        return -u*(1<<k); // gcd is u*2^k
    }","Gets the greatest common divisor of the absolute value of two numbers, using the ""binary gcd"" method which avoids division and modulo operations.",1,403
2174,"public static boolean equalTree(XReadableRepository repoA, XReadableRepository repoB) {
		
		if(repoA == null && repoB == null) {
			return true;
		}
		
		// one of them is null, the other isn't
		if(repoA == null || repoB == null) {
			return false;
		}
		
		if(!repoA.getID().equals(repoB.getID())) {
			return false;
		}
		
		for(XID modelId : repoA) {
			
			XReadableModel modelA = repoA.getModel(modelId);
			XReadableModel modelB = repoB.getModel(modelId);
			
			if(modelB == null) {
				return false;
			}
			
			if(!XCompareUtils.equalTree(modelA, modelB)) {
				return false;
			}
			
		}
		
		for(XID modelId : repoB) {
			
			if(repoA.getModel(modelId) == null) {
				return false;
			}
			
		}
		
		return true;
	}","Check if two  XReadableRepositorys have the same  XID and the same  XReadableModels as defined by  XCompareUtils#equalTree(XReadableModel, XReadableModel).",1,290
2175,"public Optional<RDFFactory> getRdfTermFactory() {
		return rdfTermFactory;
	}","Get the set  RDFFactory, if any.",1,22
2176,"public Map getResources() {
        return resourcesByUniqueName;
    }",Get a Map with the configured uniqueName as key and  XAResourceProducer as value.,1,19
2177,"protected XmlRpcElement[] parseParametersElement(Element parametersElement) {
    List parameters = new ArrayList();

    NodeList children = parametersElement.getChildNodes();
    int childCount = children.getLength();

    for (int i = 0; i < childCount; i++) {
      Node child = children.item(i);
      if (child instanceof Element) {
        String childName = child.getNodeName();

        if (XmlRpcEntity.PARAM.equals(childName)) {
          Element parameterElement = (Element) child;
          XmlRpcElement parameter = this
              .parseParameterElement(parameterElement);
          parameters.add(parameter);

        } else {
          throw new XmlRpcParsingException(""Unexpected element '"" + childName
              + ""'"");
        }
      }
    }

    return (XmlRpcElement[]) parameters.toArray(new XmlRpcElement[parameters
        .size()]);
  }",Parses the given XML element that contains all the parameters or either a,1,258
2178,"public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {
		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED);
	}",Return an iterator of allocated slots for the given job id.,1,35
2179,"public static Iterable<Edge> of(Iterable<? extends Vertex> nodes) {
		return new IterableBased(nodes);
	}",Returns an iterable over all relationships incident on the nodes returned by the given Iterable over nodes.,1,39
2180,"public static Function<BaseEvent, BaseEvent> updateEventForStreaming(final StreamingManager streamingManager) {
    return event -> {
      TypedValue payload = event.getMessage().getPayload();
      if (payload.getValue() instanceof CursorProvider) {
        Message message = Message.builder(event.getMessage())
            .payload(updateTypedValueForStreaming(payload, event, streamingManager))
            .build();
        return BaseEvent.builder(event).message(message).build();
      }
      return event;
    };
  }",Provides a function that updates the payload value of an  BaseEvent by replacing it with a  CursorProvider.,1,145
2181,"public static String repeat(String str, int repeat) {
        int inputLength = str.length();
        if (repeat == 0) {
            return """";
        }
        if (inputLength == 1 && repeat <= PAD_LIMIT) {
           return padding(repeat, str.charAt(0));
        }

        char[] input = str.toCharArray();
        char[] output = new char[repeat * inputLength];
        switch (inputLength) {
            case 1:
                char ch = input[0];
                for (int i = repeat - 1; i >= 0; i--) {
                    output[i] = ch;
                }
                break;
            case 2:
                char ch0 = input[0];
                char ch1 = input[1];
                for (int i = repeat * 2 - 2; i >= 0; i--,i--) {
                    output[i] = ch0;
                    output[i + 1] = ch1;
                }
                break;
            default:
                for (int i = repeat - 1; i >= 0; i--) {
                    System.arraycopy(input, 0, output, i * inputLength, inputLength);
                }
                break;            
        }
        return new String(output);
    }",Repeat a String repeat times to form a new string.,1,409
2182,"public WorkerIdentity getWorkerIdentity() {
    return m_workerIdentity;
  }",Accessor for the worker identity.,1,19
2183,"public boolean isContainer(Object obj) {
        return (isList(obj) || isMap(obj));
    }",checks if object is instanceof java.util.List or java.util.Map,1,35
2184,"public Counter newCounter(Class<?> klass,
                                    String name) {
        return newCounter(klass, name, null);
    }",Creates a new  Counter and registers it under the given class and name.,1,40
2185,"public Context getContext() {
        return mContext;
    }",Get a  Context.,1,19
2186,"public static Literal str(String s) {
		return new Literal(s);
	}",Shortcut for  new Literal(s).,1,29
2187,"public TimeOfDay getTimeOfDay() {
            return iTimeOfDay;
        }",Gets the partial that this property belongs to.,1,19
2188,"public GenericTypeList getTypeVariables() {
            return new GenericTypeList.Explicit(typeVariables);
        }",Returns the type variables of the the represented method.,1,26
2189,"@SchedulerSupport(SchedulerSupport.NONE)
    public final TestObserver<T> test() {
        TestObserver<T> ts = new TestObserver<T>();
        subscribe(ts);
        return ts;
    }",Creates a TestObserver and subscribes it to this Maybe.,1,59
2190,"public DataStream<OUT> partitionBy(int... fields) {

		return setConnectionType(new FieldsPartitioner<OUT>(FieldsKeySelector.getSelector(
				getOutputType(), fields)));
	}",Sets the partitioning of the  DataStream so that the output is partitioned by the selected fields.,1,52
2191,"public static GLContextWindows createFromCurrent() {
		long hglrc = wglGetCurrentContext();
		if ( hglrc == NULL )
			throw new IllegalStateException(""No OpenGL context is current in the current thread."");

		ContextCapabilities capabilities = GL.createCapabilities(false);

		return new GLContextWindows(capabilities, hglrc);
	}",Creates a  GLContextWindows from the current OpenGL context of the current thread.,1,85
2192,"public Highlight getHighlight(float x, float y) {

        float xVal = getXForTouch(x);

        SelectionDetail selectionDetail = getSelectionDetail(xVal, x, y, -1);
        if (selectionDetail == null)
            return null;

        return new Highlight(selectionDetail.xValue,
                selectionDetail.yValue,
                selectionDetail.dataIndex,
                selectionDetail.dataSetIndex);
    }",Returns a Highlight object corresponding to the given xPx- and yPx- touch positions in pixels.,1,109
2193,"public int getOrientation() {
        return mOrientation;
    }",Get the menu mOrientation.,1,19
2194,"@SuppressWarnings(""unchecked"")
    public Object clone() {
        return new Equivalence(name, (ArrayList<Term>) cloneList(components), (ArrayList<Variable>) cloneList(openVariables), complexity);
    }",Clone an object,1,61
2195,"protected AxisState drawAxis(ValueAxis axis, PolarAxisLocation location,
            Graphics2D g2, Rectangle2D plotArea) {

        double centerX = plotArea.getCenterX();
        double centerY = plotArea.getCenterY();
        double r = Math.min(plotArea.getWidth() / 2.0,
                plotArea.getHeight() / 2.0) - margin;
        double x = centerX - r;
        double y = centerY - r;

        Rectangle2D dataArea = null;
        AxisState result = null;
        if (location == PolarAxisLocation.NORTH_RIGHT) {
            dataArea = new Rectangle2D.Double(x, y, r, r);
            result = axis.draw(g2, centerX, plotArea, dataArea,
                    RectangleEdge.RIGHT, null);
        }
        else if (location == PolarAxisLocation.NORTH_LEFT) {
            dataArea = new Rectangle2D.Double(centerX, y, r, r);
            result = axis.draw(g2, centerX, plotArea, dataArea,
                    RectangleEdge.LEFT, null);
        }
        else if (location == PolarAxisLocation.SOUTH_LEFT) {
            dataArea = new Rectangle2D.Double(centerX, centerY, r, r);
            result = axis.draw(g2, centerX, plotArea, dataArea,
                    RectangleEdge.LEFT, null);
        }
        else if (location == PolarAxisLocation.SOUTH_RIGHT) {
            dataArea = new Rectangle2D.Double(x, centerY, r, r);
            result = axis.draw(g2, centerX, plotArea, dataArea,
                    RectangleEdge.RIGHT, null);
        }
        else if (location == PolarAxisLocation.EAST_ABOVE) {
            dataArea = new Rectangle2D.Double(centerX, centerY, r, r);
            result = axis.draw(g2, centerY, plotArea, dataArea,
                    RectangleEdge.TOP, null);
        }
        else if (location == PolarAxisLocation.EAST_BELOW) {
            dataArea = new Rectangle2D.Double(centerX, y, r, r);
            result = axis.draw(g2, centerY, plotArea, dataArea,
                    RectangleEdge.BOTTOM, null);
        }
        else if (location == PolarAxisLocation.WEST_ABOVE) {
            dataArea = new Rectangle2D.Double(x, centerY, r, r);
            result = axis.draw(g2, centerY, plotArea, dataArea,
                    RectangleEdge.TOP, null);
        }
        else if (location == PolarAxisLocation.WEST_BELOW) {
            dataArea = new Rectangle2D.Double(x, y, r, r);
            result = axis.draw(g2, centerY, plotArea, dataArea,
                    RectangleEdge.BOTTOM, null);
        }
       
        return result;
    }",Draws the axis with the specified index.,1,763
2196,"public Transformer<? super I, ? extends O>[] getTransformers() {
        return FunctorUtils.<I, O>copy(iTransformers);
    }",Gets the transformers.,1,46
2197,"SearchRow readRow(DataPage data, int offset) throws SQLException {
        data.setPos(offset);
        SearchRow row = table.getTemplateSimpleRow(columns.length == 1);
        row.setPos(data.readInt());
        for (int i = 0; i < columns.length; i++) {
            int idx = columns[i].getColumnId();
            row.setValue(idx, data.readValue());
        }
        return row;
    }",Read a row from the data page at the given offset.,1,138
2198,"@Override
    public int compareTo(final RyaType o) {
        if (o == null) {
            return 1;
        }
        final String dataTypeStr = getDataType() != null ? getDataType().stringValue() : null;
        final String otherDataTypeStr = o.getDataType() != null ? o.getDataType().stringValue() : null;
        final CompareToBuilder builder = new CompareToBuilder()
                .append(getData(), o.getData())
                .append(dataTypeStr, otherDataTypeStr)
                .append(getLanguage(), o.getLanguage());
        return builder.toComparison();
    }","Define a natural ordering based on data, datatype, and language.",1,182
2199,"public GWTJahiaLinkCheckerStatus lookForCheckedLinks() {
        GWTJahiaLinkCheckerStatus status = new GWTJahiaLinkCheckerStatus();
        status.setProperties(linkChecker.getStatus().getProperties());

        List<Object[]> invalidLinks = linkChecker.getLinks();
        if (!invalidLinks.isEmpty()) {
            ProcessingContext ctx = retrieveParamBean();
            JahiaData jData = retrieveJahiaData(new GWTJahiaPageContext(ctx
                    .getPageID(), ctx.getOperationMode()));
            for (Object[] processedLink : invalidLinks) {
                status
                        .getLinks()
                        .add(
                                getGWTViewObject(
                                        (Link) processedLink[0],
                                        (LinkValidationResult) processedLink[1],
                                        jData));
            }
        }
        return status;
    }",Retrieves the status and list of links to be displayed in the report.,1,196
2200,"public I18nMessage regexDoesNotMatch(String value, String regex) {
    return createMessage(bundlePath, 17, value, regex);
  }",Generates a  I18nMessage for a  value which doesn't match a given  regex,1,39
2201,"public JIRAAction remove(JIRAAction jiraAction) throws SystemException {
		return super.remove(jiraAction);
	}",Removes the j i r a action from the database.,1,31
2202,"public I18nMessage failedBooleanValidation(boolean value, boolean expected) {
    return createMessage(bundlePath, 1, expected, value);
  }",Generates a  I18nMessage for a boolean validation that failed,1,39
2203,"public static ResultHolder getResultHolder(AggregationFunction function, long maxNumResults) {
    String functionName = function.getName();

    int initialCapacity = (int) Math.min(maxNumResults, INITIAL_RESULT_HOLDER_CAPACITY);

    switch (functionName.toLowerCase()) {
      case ""count"":
      case ""sum"":
      case ""min"":
      case ""max"":
        double defaultValue = function.getDefaultValue();
        DoubleResultArray doubleResultArray = new DoubleResultArray(initialCapacity, defaultValue);
        return new DoubleArrayBasedResultHolder(doubleResultArray, initialCapacity, (int) maxNumResults, defaultValue);

      case ""avg"":
        DoubleLongResultArray doubleLongResultArray =
            new DoubleLongResultArray(initialCapacity, new Pair<Double, Long>(0.0, 0L));
        return new PairArrayBasedResultHolder(doubleLongResultArray, initialCapacity);

      case ""minmaxrange"":
        DoubleDoubleResultArray doubleDoubleResultArray = new DoubleDoubleResultArray(initialCapacity,
            new Pair<Double, Double>(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY));
        return new PairArrayBasedResultHolder(doubleDoubleResultArray, initialCapacity);

      default:
        throw new RuntimeException(""Aggregation function not implemented in ResultHolder: "" + functionName);
    }
  }","Creates and returns the appropriate implementation of ResultHolder, based on aggregation function.",1,303
2204,"private OBISMsgType getOBISMsgType(String obisId) {
		if (obisLookupTable.containsKey(obisId)) {
			return obisLookupTable.get(obisId);
		} else {
			return OBISMsgType.UNKNOWN;
		}
	}",Returns the OBIS message type (See  OBISMsgType) for the specified,1,59
2205,"public static RecognitionManager createRecognitionManager(final Context context,
            final RecognitionListener listener, final Intent recognizerIntent) {
        if (context == null || recognizerIntent == null) {
            throw new IllegalArgumentException(
                    ""Context and recognizerListener argument cannot be null)"");
        }
        RecognitionManager manager = new RecognitionManager(listener, context);
        manager.mConnection = manager.new Connection();
        if (!context.bindService(recognizerIntent, manager.mConnection, Context.BIND_AUTO_CREATE)) {
            Log.e(TAG, ""bind to recognition service failed"");
            listener.onError(CLIENT_ERROR);
            return null;
        }
        return manager;
    }",Factory method to create a new RecognitionManager,1,174
2206,"public Dataset<OUT> output() {
      return new OutputBuilder<>(
          this.using.name, this.using.input, this.functor, null).output();
    }",Specifies a function to derive the input elements' event time.,1,54
2207,"public ClickServlet getServlet() {
        return clickServlet;
    }",Return the mock  net.sf.click.ClickServlet instance for this context.,1,19
2208,"public static List<ConfigChangeAction> validate(VespaModel model, ValidationParameters validationParameters, DeployState deployState) {
        if (validationParameters.checkRouting()) {
            new RoutingValidator().validate(model, deployState);
            new RoutingSelectorValidator().validate(model, deployState);
        }
        new ComponentValidator().validate(model, deployState);
        new SearchDataTypeValidator().validate(model, deployState);
        new ComplexAttributeFieldsValidator().validate(model, deployState);
        new StreamingValidator().validate(model, deployState);
        new RankSetupValidator(validationParameters.ignoreValidationErrors()).validate(model, deployState);
        new NoPrefixForIndexes().validate(model, deployState);
        new DeploymentFileValidator().validate(model, deployState);
        new RankingConstantsValidator().validate(model, deployState);
        new SecretStoreValidator().validate(model, deployState);

        List<ConfigChangeAction> result = Collections.emptyList();
        if (deployState.getProperties().isFirstTimeDeployment()) {
            validateFirstTimeDeployment(model, deployState);
        } else {
            Optional<Model> currentActiveModel = deployState.getPreviousModel();
            if (currentActiveModel.isPresent() && (currentActiveModel.get() instanceof VespaModel))
                result = validateChanges((VespaModel) currentActiveModel.get(), model,
                                         deployState.validationOverrides(), deployState.getDeployLogger(), deployState.now());
        }
        return result;
    }","Validates the model supplied, and if there already exists a model for the application validates changes between the previous and current model",1,376
2209,"public static String center(String str, int size) {
        if (str == null) {
            return null;
        }
        if (size < 0) {
            size = 0;
        }
        int sz = str.length();
        int p = size - sz;
        if (p < 1) {
            return str;
        }
        str = leftPad(str, sz + p / 2, ' ');
        str = rightPad(str, size, ' ');
        return str;
    }","Center a String in a larger String of size size using the space character (' '). If the size is less than the string length, the string is returned.",1,168
2210,"public static int getRelativeInfoColor(Context context, int relative) {
        if (relative < RELATIVE_THRESHOLD_WARNING) {
            return ThemeUtils.primaryColor(context, true);
        } else {
            return context.getResources().getColor(R.color.infolevel_warning);
        }
    }",determines the info level color based on  #RELATIVE_THRESHOLD_WARNING.,1,79
2211,"public int rank(Key key) {
        int lo = 0, hi = N-1; 
        while (lo <= hi) { 
            int mid = lo + (hi - lo) / 2; 
            int cmp = key.compareTo(keys[mid]);
            if      (cmp < 0) hi = mid - 1; 
            else if (cmp > 0) lo = mid + 1; 
            else return mid; 
        } 
        return lo;
    }",Returns the number of keys in the symbol table strictly less than key.,1,161
2212,"public static long usToMs(long timeUs) {
    return (timeUs == TIME_UNSET || timeUs == TIME_END_OF_SOURCE) ? timeUs : (timeUs / 1000);
  }","Converts a time in microseconds to the corresponding time in milliseconds, preserving  #TIME_UNSET and  #TIME_END_OF_SOURCE values.",1,55
2213,"@Override
    protected Decoder createDecoder(final TestData file) throws IOException, DataStoreException {
        return createChannelDecoder(file);
    }",Creates a new decoder for the specified dataset.,1,37
2214,"public Object eval(Source source) throws IOException {
        String mimeType = source.getMimeType();
        checkThread();
        TruffleLanguage<?> l = getTruffleLang(mimeType);
        if (l == null) {
            throw new IOException(""No language for MIME type "" + mimeType + "" found. Supported types: "" + langs.keySet());
        }
        return eval(l, source);
    }",Evaluates provided source.,1,116
2215,"static boolean isJavaName(String name) {
			return isNotRestrictedKeyword(name) && isJavaIdentifier(name);
		}",Determine if the supplied  name is a syntactically valid qualified name.,1,33
2216,"public final String urlFor(final Class pageClass, final PageParameters parameters)
	{
		return getRequestCycle().urlFor(getPage().getPageMap(), pageClass, parameters);
	}",Returns a bookmarkable URL that references a given page class using a given set of page parameters.,1,53
2217,"public List<Occupant> getParticipants() throws NoResponseException, XMPPErrorException, NotConnectedException {
        return getOccupants(MUCRole.participant);
    }",Returns a list of Occupant with the room participants.,1,37
2218,"public static Color color(String hex) {
		ensureNotNull(hex,""hex value"");
		if(hex.startsWith(""0x"")) {
		    hex = hex.substring(2);
		}
		if (!hex.startsWith(""#"")) {
			hex = ""#"" + hex;
		}
		return Color.decode(hex);
	}","Tries to decode the provided  String into an HEX color definition in RRGGBB, 0xRRGGBB or #RRGGBB format",1,105
2219,"private static List<FoundIndication> findIndications(FailureCause cause, Run build, PrintStream buildLog) {
        long start = System.currentTimeMillis();
        List<Indication> indicationList = cause.getIndications();
        List<FoundIndication> foundIndicationList = new LinkedList<FoundIndication>();
        for (Indication indication : indicationList) {
            Thread.currentThread().setName(""BFA-scanner-""
                                                   + build.getFullDisplayName() + "": ""
                                                   + cause.getName() + ""-""
                                                   + indication.getUserProvidedExpression());
            FoundIndication foundIndication = findIndication(indication, build, buildLog);
            if (foundIndication != null) {
                foundIndicationList.add(foundIndication);
            }
        }
        if (logger.isLoggable(Level.FINER)) {
            logger.log(Level.FINER, ""[BFA] [{0}] [{1}] {2}ms"", new Object[]
                    {build.getFullDisplayName(),
                            cause.getName(),
                            String.valueOf(System.currentTimeMillis() - start), });
        }
        return foundIndicationList;
    }",Finds the indications of a failure cause.,1,283
2220,"long responseTimeoutMillis() {
            if (!timeoutForWholeRetryEnabled()) {
                return responseTimeoutMillisForEachAttempt;
            }

            final long actualResponseTimeoutMillis = actualResponseTimeoutMillis();

            // Consider 0 or less than 0 of actualResponseTimeoutMillis as timed out.
            if (actualResponseTimeoutMillis <= 0) {
                return -1;
            }

            if (responseTimeoutMillisForEachAttempt > 0) {
                return Math.min(responseTimeoutMillisForEachAttempt, actualResponseTimeoutMillis);
            }

            return actualResponseTimeoutMillis;
        }",Returns the smaller value between  #responseTimeoutMillisForEachAttempt and remaining  #responseTimeoutMillis.,1,113
2221,"public static ResponseType getResponseType(JSONObject brokerRequest)
      throws JSONException {
    if (!brokerRequest.has((BROKER_RESPONSE_TYPE_KEY))) {
      return ResponseType.BROKER_RESPONSE_TYPE_NATIVE;
    }

    return ResponseType.valueOf(brokerRequest.get(BROKER_RESPONSE_TYPE_KEY).toString());
  }","Given a brokerRequest JSONObject, return the requested enum ResponseType - If request does not have responseType property, return the default value of ResponseType.BROKER_RESPONSE_NATIVE - If requested responseType property does not match enum values, throws IllegalArgumentException.",1,72
2222,"public String getCtags() {
        String value;
        return ctags != null ? ctags : (value =
            threadConfig.get().getCtags()) != null ? value :
            System.getProperty(""org.opengrok.indexer.analysis.Ctags"",
            ""ctags"");
    }","Gets the name of the ctags program to use: either the last value passed successfully to  #setCtags(java.lang.String), or  Configuration#getCtags(), or the system property for  ""org.opengrok.indexer.analysis.Ctags"", or ""ctags"" as a default.",1,80
2223,"public String toStringMeta()
	{
		// We (Sven Boden) did explicit performance testing for this
		// part. The original version used Strings instead of StringBuffers,
		// performance between the 2 does not differ that much. A few milliseconds
		// on 100000 iterations in the advantage of StringBuffers. The
		// lessened creation of objects may be worth it in the long run.
		StringBuffer retval=new StringBuffer(getTypeDesc());
		
		switch(getType())
		{
		case VALUE_TYPE_STRING :  
			if (getLength()>0) retval.append('(').append(getLength()).append(')');  
			break;
		case VALUE_TYPE_NUMBER :
        case VALUE_TYPE_BIGNUMBER :
			if (getLength()>0)
			{
				retval.append('(').append(getLength());
				if (getPrecision()>0)
				{
					retval.append("", "").append(getPrecision());
				}
				retval.append(')');
			}
			break;
		case VALUE_TYPE_INTEGER:  
			if (getLength()>0)
			{
				retval.append('(').append(getLength()).append(')');
			}
			break;
		default: break; 
		}
		
		return retval.toString();
	}","a String text representation of this Value, optionally padded to the specified length",1,268
2224,"public static int indexOf(byte[] array, byte valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        for (int i = startIndex; i < array.length; i++) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex is treated as zero.,1,141
2225,"@NonNull
    @Override
    public Observable<PutResults<T>> createObservable() {
        throwExceptionIfRxJavaIsNotAvailable(""createObservable()"");

        return Observable
                .create(OnSubscribeExecuteAsBlocking.newInstance(this))
                .subscribeOn(Schedulers.io());
    }",Creates  Observable which will perform Put Operation and send result to observer.,1,64
2226,"public Definition getDefinition(String name, java.util.Locale locale) {
        return null;
    }",Returns a Definition object that matches the given name and locale.,1,31
2227,"public QueryOperation create(Expression callExpr) {
		return callExpr.accept(calculatedTableCreator);
	}",Creates a valid  CalculatedQueryOperation operation.,1,27
2228,"public static Job getInstance(Configuration conf) throws IOException {
    // create with a null Cluster
    JobConf jobConf = new JobConf(conf);
    return new Job(jobConf);
  }",Creates a new  Job with no particular  Cluster and a given  Configuration.,1,51
2229,"public static List<HostAddress> resolveXMPPServerDomain(String domain) {
        return resolveDomain(domain, 's');
    }",Returns a list of HostAddresses under which the specified XMPP server can be reached at for server-to-server communication.,1,33
2230,"public WSRPConsumerPortlet remove(long wsrpConsumerPortletId)
		throws NoSuchConsumerPortletException, SystemException {
		return remove(Long.valueOf(wsrpConsumerPortletId));
	}",Removes the w s r p consumer portlet with the primary key from the database.,1,38
2231,"public List<PwPolicy> getPolicies()
    {
        return this.policies;
    }",Used by  FortressAntTask#deletePolicies() to retrieve list of PwPolicy as defined in input xml file.,1,25
2232,"private static long loadUid(File[] files) {
    for (File file : files) {
      String fileName = file.getName();
      if (fileName.endsWith(UID_FILE_SUFFIX)) {
        try {
          return parseUid(fileName);
        } catch (NumberFormatException e) {
          // This should never happen, but if it does delete the malformed UID file and continue.
          Log.e(TAG, ""Malformed UID file: "" + file);
          file.delete();
        }
      }
    }
    return -1;
  }",Loads the cache UID from the files belonging to the root directory.,1,135
2233,"public static List<Message> toMessageCollection(Collection<Result> results,
                                                  CursorProviderFactory cursorProviderFactory,
                                                  Event event) {
    if (!(results instanceof List)) {
      results = new ArrayList<>(results);
    }

    return new ResultsToMessageList((List) results, cursorProviderFactory, event);
  }",Transforms the given  results into a list of  Message objects,1,92
2234,"public Asset remove(long assetId)
		throws NoSuchAssetException, SystemException {
		return remove(Long.valueOf(assetId));
	}",Removes the asset with the primary key from the database.,1,38
2235,"private IFigure getDownwardsPortSvgString(final Color color) {
        PointList pointList = new PointList();
        pointList.addPoint(0,0);
        pointList.addPoint(7,0);
        pointList.addPoint(new Point(3.5, 7));
        pointList.addPoint(0,0);
        PolygonShape figure = new PolygonShape();
        figure.setPoints(pointList);
        figure.setBackgroundColor(color);
        figure.setForegroundColor(ColorConstants.black);
        figure.setLineWidth(1);
        figure.getBounds().setSize(8,8);
        return figure;
    }",Holds a figure of a triangle pointing south.,1,155
2236,"protected XmlRpcElement parseParameterElement(Element parameterElement) {
    NodeList children = parameterElement.getChildNodes();
    int childCount = children.getLength();

    for (int i = 0; i < childCount; i++) {
      Node child = children.item(i);

      if (child instanceof Element) {
        String nodeName = child.getNodeName();
        if (XmlRpcEntity.VALUE.equals(nodeName)) {
          Element valueElement = (Element) child;
          return this.parseValueElement(valueElement);
        }
        throw new XmlRpcParsingException(""Unexpected element '"" + nodeName
            + ""'"");
      }
    }

    // we should not reach this point.
    return null;
  }",Parses the given XML element that contains a single parameter of either a,1,199
2237,"public Permission applyUMask(Mode umask) {
    mMode = mMode.applyUMask(umask);
    return this;
  }",Applies umask to the mode bits.,1,35
2238,"public static boolean contains(CharSequence seq, CharSequence searchSeq) {
        if (seq == null || searchSeq == null) {
            return false;
        }
        return indexOfSequence(seq, searchSeq, 0) >= 0;
    }","Checks if CharSequence contains a search CharSequence, handling  null.",1,76
2239,"public DataStream<Tuple1<String>> readTextStream(String path) {
		return addSource(new FileStreamFunction(path), 1);
	}",Streams a text file from the given path by reading through it multiple times.,1,39
2240,"public Vector<Message> getMessages(int seqNo) throws RpcClientFailedException {
		try {
			String request;
			if (seqNo == 0) {
				// get all messages
				request = ""<get_messages/>\n"";
			}
			else {
				request =
					""<get_messages>\n"" +
					"" <seqno>"" + seqNo + ""</seqno>\n"" +
					""</get_messages>\n"";
			}
			sendRequest(request);
			Vector<Message> messages = MessagesParser.parse(receiveReply());
			return messages;
		}
		catch (IOException e) {
			throw new ConnectionFailedException(""Connection failed in getMessages()"", e);
		}
	}",Performs   RPC towards BOINC client,1,181
2241,"protected final ViewportPolicy getViewportPolicy() {
		return viewportPolicy;
	}",Returns the  ViewportPolicy that is used by this policy.,1,21
2242,"public I18nMessage collectionIsEmpty() {
    return createMessage(bundlePath, 10);
  }",Generates a  I18nMessage for a value that was expected to be not empty but was,1,25
2243,"public String blockingGetAuthToken(Account account, String authTokenType,
            boolean notifyAuthFailure)
            throws OperationCanceledException, IOException, AuthenticatorException {
        Bundle bundle = getAuthToken(account, authTokenType, notifyAuthFailure, null /* callback */,
                null /* handler */).getResult();
        return bundle.getString(KEY_AUTHTOKEN);
    }","Convenience method that makes a blocking call to  #getAuthToken(Account, String, boolean, AccountManagerCallback, Handler) then extracts and returns the value of  #KEY_AUTHTOKEN from its result.",1,83
2244,"public static boolean containsOnly(CharSequence cs, char[] valid) {
        // All these pre-checks are to maintain API with an older version
        if (valid == null || cs == null) {
            return false;
        }
        if (cs.length() == 0) {
            return true;
        }
        if (valid.length == 0) {
            return false;
        }
        return indexOfAnyBut(cs, valid) == -1;
    }",Checks if the CharSequence contains only certain characters. A null CharSequence will return false.,1,131
2245,"public static int indexOf(long[] array, long valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        for (int i = startIndex; i < array.length; i++) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex is treated as zero.,1,141
2246,"private Size aggregate(int sizeChange, int interimMaximalSize) {
            return new Size(sizeImpact + sizeChange, Math.max(maximalSize, sizeImpact + interimMaximalSize));
        }",Aggregates a size change with this stack manipulation size.,1,51
2247,"protected HttpContext createHttpContext() {
		HttpContext defaultHttpContext = httpService.createDefaultHttpContext();
		return new SecureHttpContext(defaultHttpContext, ""openHAB.org"");
	}",Creates a  SecureHttpContext which handles the security for this,1,43
2248,"public Intent getNextStartedActivity() {
    ActivityThread activityThread = (ActivityThread) RuntimeEnvironment.getActivityThread();
    ShadowInstrumentation shadowInstrumentation = shadowOf(activityThread.getInstrumentation());
    return shadowInstrumentation.getNextStartedActivity();
  }",Consumes the most recent  Intent started by  #startActivity(android.content.Intent) and returns it.,1,58
2249,"public Collection<Range<Token>> getPrimaryRangesForEndpoint(String keyspace, InetAddress ep)
    {
        AbstractReplicationStrategy strategy = Table.open(keyspace).getReplicationStrategy();
        Collection<Range<Token>> primaryRanges = new HashSet<Range<Token>>();
        TokenMetadata metadata = tokenMetadata.cloneOnlyTokenMap();
        for (Token token : metadata.sortedTokens())
        {
            List<InetAddress> endpoints = strategy.calculateNaturalEndpoints(token, metadata);
            if (endpoints.size() > 0 && endpoints.get(0).equals(ep))
                primaryRanges.add(new Range<Token>(metadata.getPredecessor(token), token));
        }
        return primaryRanges;
    }","Get the ""primary ranges"" for the specified keyspace and endpoint.",1,192
2250,"public Authentication get() {
        Jenkins h = Jenkins.getInstance();
        Secret userName = Secret.decrypt(props.getProperty(getPropertyKey()));
        if (userName==null) return Jenkins.ANONYMOUS; // failed to decrypt
        try {
            UserDetails u = h.getSecurityRealm().loadUserByUsername(userName.toString());
            return new UsernamePasswordAuthenticationToken(u.getUsername(), """", u.getAuthorities());
        } catch (AuthenticationException e) {
            return Jenkins.ANONYMOUS;
        } catch (DataAccessException e) {
            return Jenkins.ANONYMOUS;
        }
    }",Gets the persisted authentication for this Jenkins.,1,167
2251,"private Markup loadMarkupAndWatchForChanges(final String key,
			final IResourceStream markupResourceStream)
	{
		// Watch file in the future
		final ModificationWatcher watcher = application.getResourceWatcher();
		if (watcher != null)
		{
			watcher.add(markupResourceStream, new IChangeListener()
			{
				public void onChange()
				{
					log.info(""Reloading markup from "" + markupResourceStream);
					loadMarkup(key, markupResourceStream);
				}
			});
		}

		log.info(""Loading markup from "" + markupResourceStream);
		return loadMarkup(key, markupResourceStream);
	}","Load markup from an IResourceStream and add an  IChangeListenerto the  ModificationWatcher so that if the resource changes, we can reload it automatically.",1,154
2252,"public Template remove(Template template) throws SystemException {
		return super.remove(template);
	}",Removes the template from the database.,1,31
2253,"@NonNull
    public static DefaultAvatarTextDrawable createAvatar(String accountName, float radiusInDp) throws
            UnsupportedEncodingException, NoSuchAlgorithmException {
        int[] rgb = BitmapUtils.calculateRGB(accountName);
        DefaultAvatarTextDrawable avatar = new DefaultAvatarTextDrawable(
                accountName.substring(0, 1).toUpperCase(), rgb[0], rgb[1], rgb[2], radiusInDp);
        return avatar;
    }",creates an avatar in form of a DefaultAvatarTextDrawable with the first letter of the account name in a circle with the given radius.,1,107
2254,"public static boolean isExtended(int opcode) {
    	return (flags[opcode & 0xff] & EXTENSION) != 0;
    }",Determines if a given opcode denotes an extended bytecode.,1,42
2255,"public boolean isDeleted(Column column)
    {
        return isDeleted(column.name(), column.timestamp());
    }",Return whether a given column is deleted by the container having this deletion info.,1,37
2256,"public Vector3D negate() {
    return new Vector3D(-x, -y, -z);
  }",Get the opposite of the instance.,1,33
2257,"public OCShareEntity getShareByRemoteId(long id) {
        OCShareEntity share = null;
        Cursor c = getShareCursorForValue(
                ProviderTableMeta.OCSHARES_ID_REMOTE_SHARED,
                String.valueOf(id)
        );
        if (c != null) {
            if (c.moveToFirst()) {
                share = createShareInstance(c);
            }
            c.close();
        }
        return share;
    }",Retrieves an stored  OCShareEntity given its id.,1,112
2258,"private static InternalMessage transformBindRequest( LdapMessageCodec codecMessage, int messageId )
    {
        BindRequestImpl internalMessage = new BindRequestImpl( messageId );
        BindRequestCodec bindRequest = codecMessage.getBindRequest();

        // Codec : int version -> Internal : boolean isVersion3
        internalMessage.setVersion3( bindRequest.isLdapV3() );

        // Codec : LdapDN name -> Internal : LdapDN name
        internalMessage.setName( bindRequest.getName() );

        // Codec : Asn1Object authentication instanceOf SimpleAuthentication ->
        // Internal : boolean isSimple
        // Codec : SimpleAuthentication OctetString simple -> Internal : byte []
        // credentials
        Asn1Object authentication = bindRequest.getAuthentication();

        if ( authentication instanceof SimpleAuthentication )
        {
            internalMessage.setSimple( true );
            internalMessage.setCredentials( ( ( SimpleAuthentication ) authentication ).getSimple() );
        }
        else
        {
            internalMessage.setSimple( false );
            internalMessage.setCredentials( ( ( SaslCredentials ) authentication ).getCredentials() );
            internalMessage.setSaslMechanism( ( ( SaslCredentials ) authentication ).getMechanism() );
        }

        return internalMessage;
    }",Transform a BindRequest message from a CodecMessage to a InternalMessage,1,255
2259,"public static Object sum(Collection self, Object initialValue) {
        return sum(self, initialValue, false);
    }",Sums the non-null items in a collection.,1,38
2260,"public Shape getStartDecoration() {
		return startDecoration;
	}","Returns the start decoration  Shape of this  Connection, or null.",1,19
2261,"public QueryOperation createLimitWithOffset(int offset, QueryOperation child) {
		SortQueryOperation previousSort = validateAndGetChildSort(child);

		if (offset < 0) {
			throw new ValidationException(""Offset should be greater or equal 0"");
		}

		if (previousSort.getOffset() != -1) {
			throw new ValidationException(""OFFSET already defined"");
		}

		return new SortQueryOperation(previousSort.getOrder(), previousSort.getChild(), offset, -1);
	}",Adds offset to the underlying  SortQueryOperation if it is a valid one.,1,130
2262,"public FieldDesc[] getFields()
    {
	return _fields;
    }",Returns the fields described for this class.,1,22
2263,"public Object caseAreaSeries( AreaSeries object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Area Series'.,1,25
2264,"public static List<Properties> loadJobConfigs(Properties properties)
      throws IOException {
    Iterable<String> jobConfigFileExtensionsIterable = Splitter.on("","").omitEmptyStrings().trimResults().split(
        properties.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_EXTENSIONS_KEY,
            ConfigurationKeys.DEFAULT_JOB_CONFIG_FILE_EXTENSIONS));
    Set<String> jobConfigFileExtensions = Sets.newHashSet(
        Iterables.transform(jobConfigFileExtensionsIterable, new Function<String, String>() {
          @Override
          public String apply(String input) {
            return input.toLowerCase();
          }
        }));
    List<Properties> jobConfigs = Lists.newArrayList();
    loadJobConfigsRecursive(jobConfigs, properties, jobConfigFileExtensions,
        new File(properties.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY)));
    return jobConfigs;
  }",Load job configurations from job configuration files stored under the root job configuration directory.,1,199
2265,"public static List<EmailAttachment> mapToEmailAttachments(Object payload)
    {
        return payload instanceof DefaultMultiPartPayload
                ? ((DefaultMultiPartPayload) payload).getNonBodyParts()
                                                     .stream()
                                                     .map(p -> new EmailAttachment(((PartAttributes) p.getAttributes()).getName(), p.getPayload(),
                                                             p.getDataType().getMediaType()))
                                                     .collect(toList())
                : Collections.emptyList();
    }",Transforms the attachments in a  MultiPartPayload into a  List of  EmailAttachments.,1,121
2266,"protected Texture loadImageFromFile(String name, BlenderContext blenderContext) {
        // @Marcin: please, please disable the use of ""TAB""
        // in your IDE in favor of four spaces.
        // All your code looks like this for us: http://i.imgur.com/sGcBv6Q.png
        // spaces always work ;)
        if (!name.contains(""."")) {
            return null; // no extension means not a valid image
        }

        AssetManager assetManager = blenderContext.getAssetManager();
        name = name.replaceAll(""\\\\"", ""\\/"");
        Texture result = null;

        if (name.startsWith(""//"")) {
            // This is a relative path, so try to find it relative to the .blend file
            String relativePath = name.substring(2);
            // Augument the path with blender key path
            BlenderKey blenderKey = blenderContext.getBlenderKey();
            int idx = blenderKey.getName().lastIndexOf('/');
            String blenderAssetFolder = blenderKey.getName().substring(0, idx != -1 ? idx : 0);
            String absoluteName = blenderAssetFolder + '/' + relativePath;
            // Directly try to load texture so AssetManager can report missing textures
            try {
                TextureKey key = new TextureKey(absoluteName);
                assetManager.loadTexture(key);
            } catch (AssetNotFoundException e) {
                LOGGER.fine(e.getLocalizedMessage());
            }
        } else {
            // This is a full path, try to truncate it until the file can be found
            // this works as the assetManager root is most probably a part of the
            // image path. E.g. AssetManager has a locator at c:/Files/ and the
            // texture path is c:/Files/Textures/Models/Image.jpg.
            // For this we create a list with every possible full path name from
            // the asset name to the root. Image.jpg, Models/Image.jpg,
            // Textures/Models/Image.jpg (bingo) etc.
            List<String> assetNames = new ArrayList<String>();
            String[] paths = name.split(""\\/"");
            StringBuilder sb = new StringBuilder(paths[paths.length - 1]);// the asset name
            assetNames.add(paths[paths.length - 1]);

            for (int i = paths.length - 2; i >= 0; --i) {
                sb.insert(0, '/');
                sb.insert(0, paths[i]);
                assetNames.add(0, sb.toString());
            }
            // Now try to locate the asset
            for (String assetName : assetNames) {
                try {
                    TextureKey key = new TextureKey(assetName);
                    key.setAsCube(false);
                    AssetInfo info = assetManager.locateAsset(key);
                    if (info != null) {
                        Texture texture = assetManager.loadTexture(key);
                        result = texture;
                        //if texture is found return it;
                        return result;
                    }
                } catch (AssetNotFoundException e) {
                    LOGGER.fine(e.getLocalizedMessage());
                }
            }
            // The asset was not found in the loop above, call loadTexture with
            // the original path once anyway so that the AssetManager can report
            // the missing asset to subsystems.
            try {
                TextureKey key = new TextureKey(name);
                assetManager.loadTexture(key);
            } catch (AssetNotFoundException e) {
                LOGGER.fine(e.getLocalizedMessage());
            }
        }

        return result;
    }",This method loads the textre from outside the blend file using the,1,706
2267,"public final static byte[] decodeFast(char[] chars, int offset, int charsLen) {
        // Check special case
        if (charsLen == 0) {
            return new byte[0];
        }

        int sIx = offset, eIx = offset + charsLen - 1; // Start and end index after trimming.

        // Trim illegal chars from start
        while (sIx < eIx && IA[chars[sIx]] < 0)
            sIx++;

        // Trim illegal chars from end
        while (eIx > 0 && IA[chars[eIx]] < 0)
            eIx--;

        // get the padding count (=) (0, 1 or 2)
        int pad = chars[eIx] == '=' ? (chars[eIx - 1] == '=' ? 2 : 1) : 0; // Count '=' at end.
        int cCnt = eIx - sIx + 1; // Content count including possible separators
        int sepCnt = charsLen > 76 ? (chars[76] == '\r' ? cCnt / 78 : 0) << 1 : 0;

        int len = ((cCnt - sepCnt) * 6 >> 3) - pad; // The number of decoded bytes
        byte[] bytes = new byte[len]; // Preallocate byte[] of exact length

        // Decode all but the last 0 - 2 bytes.
        int d = 0;
        for (int cc = 0, eLen = (len / 3) * 3; d < eLen;) {
            // Assemble three bytes into an int from four ""valid"" characters.
            int i = IA[chars[sIx++]] << 18 | IA[chars[sIx++]] << 12 | IA[chars[sIx++]] << 6 | IA[chars[sIx++]];

            // Add the bytes
            bytes[d++] = (byte) (i >> 16);
            bytes[d++] = (byte) (i >> 8);
            bytes[d++] = (byte) i;

            // If line separator, jump over it.
            if (sepCnt > 0 && ++cc == 19) {
                sIx += 2;
                cc = 0;
            }
        }

        if (d < len) {
            // Decode last 1-3 bytes (incl '=') into 1-3 bytes
            int i = 0;
            for (int j = 0; sIx <= eIx - pad; j++)
                i |= IA[chars[sIx++]] << (18 - j * 6);

            for (int r = 16; d < len; r -= 8)
                bytes[d++] = (byte) (i >> r);
        }

        return bytes;
    }",Decodes a BASE64 encoded char array that is known to be resonably well formatted.,1,740
2268,"public final Fieldable[] getFields(String name) {
     List result = new ArrayList();
     for (int i = 0; i < fields.size(); i++) {
       Fieldable field = (Fieldable)fields.get(i);
       if (field.name().equals(name)) {
         result.add(field);
       }
     }

     if (result.size() == 0)
       return null;

     return (Fieldable[])result.toArray(new Fieldable[result.size()]);
   }",Returns an array of  Fieldables with the given name.,1,165
2269,"protected Map<String, ?> getCompositeContext(Map<String, ?> context) {
        Map<String, Object> result = new HashMap<String, Object>(context);
        for (Entry<String, Object> config : module.getConfiguration().entrySet()) {
            result.put(""$"" + config.getKey(), config.getValue());
        }

        Map<String, String> inputs = null;

        if (module instanceof Condition) {
            inputs = ((Condition) module).getInputs();
        } else if (module instanceof Action) {
            inputs = ((Action) module).getInputs();
        }

        if (inputs != null) {
            for (Entry<String, String> input : inputs.entrySet()) {
                Object o = context.get(input.getValue());
                result.put(""$"" + input.getKey(), o);
            }
        }
        return result;
    }",This method creates internal composite context which will be used as context passed to the child handlers.,1,293
2270,"private Collection<DirectoryOrObject> listInternal(final String prefix) throws IOException {
    Directory directory = new Directory(prefix, PATH_SEPARATOR_CHAR);
    Container container = mAccount.getContainer(mContainerName);
    // Reset cache to avoid stale listings
    mAccount.resetContainerCache();
    return container.listDirectory(directory);
  }",Lists the files or folders which match the given prefix.,1,80
2271,"private final boolean tryInactivate() {
        if (scans == 0 && !pool.tryDecrementActiveCount())
            return false;
        ++scans;
        if (pool.getActiveThreadCount() != 0) {
            if (scans >= SCANS_PER_PAUSE) {
                scans = 1;
                pauseAwaitingWork(null);
            }
            return false;
        }
        if (sp != 0) { // renormalize indices
            setSp(0);
            base = 0;
        }
        int sc = stealCount; // accumulate steals
        if (sc != 0) {
            long fsc = fullStealCount + sc;
            stealCount = 0;
            fullStealCount = fsc;
        }
        eventCount = pool.barrierSync(eventCount);
        return true;
    }",Possibly inactivate and block or pause waiting for work.,1,220
2272,"public String mapNativeFormat(final CoverageInfo cInfo) throws IOException {
        // checks
        Utilities.ensureNonNull(""cInfo"", cInfo);
        
        String mime = mimeTypeCache.get(cInfo.getId());
        if(mime != null) {
            if(NO_MIME_TYPE.equals(mime)) {
                return DEFAULT_FORMAT;
            } else {
                return mime;
            }
        }
        
        for (CoverageMimeTypeMapper mapper : mappers) {
            mime = mapper.getMimeType(cInfo);
            if(mime != null) {
                break;
            }
        }
        
        // the native format must be encodable
        if (mime != null && outputMimeTypes.contains(mime)) {
            mimeTypeCache.put(cInfo.getId(), mime);
            if (LOGGER.isLoggable(Level.FINE)) {
                LOGGER.fine(""Added mapping for mime: "" + mime);
            }
            return mime;
        } else {
            // we either don't have a clue about the mime, or we don't have an encoder, 
            // save the response as null
            mimeTypeCache.put(cInfo.getId(), NO_MIME_TYPE);
            return DEFAULT_FORMAT;
        }
    }",Returns a mime types for the provided  CoverageInfo using the  CoverageInfo#getNativeFormat() as its key.,1,287
2273,"public default UnaryOperator<Function<Object[], GraphTraversal<Edge, Edge>>> getGraphEStrategy(final Strategy.Context<StrategyWrappedGraph> ctx) {
        return UnaryOperator.identity();
    }",Construct a  java.util.function.Function that enhances the features of  com.tinkerpop.gremlin.structure.Graph#E.,1,52
2274,"URL getQuery(String url, ParameterizedQuery pq) throws SQLException {
		URL rv=(URL)getMap(url, queryMap).get(pq);
		if(rv == null) {
			throw new SQLException(""No mapping registered for query "" + pq
				+ "" in DB specified as "" + url);
		}
		return(rv);
	}",Get the URL for the specified query.,1,96
2275,"private static List<Call> getActiveCalls()
    {
        CallConference[] conferences;

        synchronized (callPanels)
        {
            Set<CallConference> keySet = callPanels.keySet();

            conferences = keySet.toArray(new CallConference[keySet.size()]);
        }

        List<Call> calls = new ArrayList<Call>();

        for (CallConference conference : conferences)
        {
            for (Call call : conference.getCalls())
            {
                if (call.getCallState() == CallState.CALL_IN_PROGRESS)
                    calls.add(call);
            }
        }
        return calls;
    }",Returns a list of all currently active calls.,1,178
2276,"public String getPath(Uri uri) {
        final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;

        // DocumentProvider
        if (isKitKat && DocumentsContract.isDocumentUri(getApplicationContext(), uri)) {
            // ExternalStorageProvider
            if (isExternalStorageDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                final String type = split[0];

                if (""primary"".equalsIgnoreCase(type)) {
                    return Environment.getExternalStorageDirectory() + ""/"" + split[1];
                }
            }
            // DownloadsProvider
            else if (isDownloadsDocument(uri)) {

                final String id = DocumentsContract.getDocumentId(uri);
                final Uri contentUri = ContentUris.withAppendedId(Uri.parse(""content://downloads/public_downloads""),
                        Long.valueOf(id));

                return getDataColumn(getApplicationContext(), contentUri, null, null);
            }
            // MediaProvider
            else if (isMediaDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                final String type = split[0];

                Uri contentUri = null;
                if (""image"".equals(type)) {
                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                } else if (""video"".equals(type)) {
                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                } else if (""audio"".equals(type)) {
                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                }

                final String selection = ""_id=?"";
                final String[] selectionArgs = new String[] { split[1] };

                return getDataColumn(getApplicationContext(), contentUri, selection, selectionArgs);
            }
            // Google Drive
            else if (isGoogleDriveDocument(uri)) {
                return uri.toString();
            }
        }
        // MediaStore (and general)
        else if (""content"".equalsIgnoreCase(uri.getScheme())) {

            // Return the remote address
            if (isGooglePhotosUri(uri))
                return uri.getLastPathSegment();

            return getDataColumn(getApplicationContext(), uri, null, null);
        }
        // File
        else if (""file"".equalsIgnoreCase(uri.getScheme())) {
            return uri.getPath();
        }
        return null;
    }",Translates a content URI of an content to a physical path on the disk,1,673
2277,"public static double get(MetricKey<ASTMethodOrConstructorDeclaration> key, ASTMethodOrConstructorDeclaration node) {
        return FACADE.computeForOperation(key, node, MetricOptions.emptyOptions());
    }",Computes the standard version of the metric identified by the key on a operation AST node.,1,47
2278,"static <T> Stream<T> gen(Supplier<T> supplier) {
        Objects.requireNonNull(supplier, ""supplier is null"");
        return new Cons<>(supplier.get(), () -> gen(supplier));
    }",Generates an (theoretically) infinitely long Stream using a value Supplier.,1,69
2279,"public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the last index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex will return  #INDEX_NOT_FOUND (-1).,1,172
2280,"public VaadinServiceSession findVaadinSession(VaadinRequest request)
            throws ServiceException, SessionExpiredException {
        VaadinServiceSession vaadinSession = findOrCreateVaadinSession(request);
        if (vaadinSession == null) {
            return null;
        }

        VaadinServiceSession.setCurrent(vaadinSession);
        request.setAttribute(VaadinServiceSession.class.getName(),
                vaadinSession);

        return vaadinSession;
    }",Attempts to find a Vaadin service session associated with this request.,1,96
2281,"public final static int secondaryOrder(int ce)
    {
        return (ce & RuleBasedCollator.CE_SECONDARY_MASK_) 
               >> RuleBasedCollator.CE_SECONDARY_SHIFT_;
    }",Return the secondary order of a collation element ce.,1,44
2282,"public long getDelay() {
        return delayMillis;
    }",Return the delay in milliseconds.,1,19
2283,"public static <T extends CharSequence> T validIndex(T chars, int index) {
        return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE, index);
    }","Validates that the index is within the bounds of the argument character sequence; otherwise throwing an exception. Validate.validIndex(myStr, 2); If the character sequence is null, then the message of the exception is &quot;The validated object is null&quot;. If the index is invalid, then the message of the exception is &quot;The validated character sequence index is invalid: &quot; followed by the index.",1,49
2284,"public ArrayRealVector combine(double a, double b, double[] y) {
        return copy().combineToSelf(a, b, y);
    }",Updates  this with the linear combination of  this and  y.,1,47
2285,"public List<ObjectCountPair<String>> getNbrOfFailureCausesPerId(GraphFilterBuilder filter, int limit) {
        return null;
    }",Gets a list of  ObjectCountPair where each pair contains a unique FailureCause id as key and a belonging count value for how many times that FailureCause was triggered.,1,33
2286,"public PaData[] getPaData()
    {
        return paData;
    }",Returns an array of  PaDatas.,1,22
2287,"public static String uncapitalize(String str) {
        int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return str;
        }
        return new StringBuilder(strLen)
            .append(Character.toLowerCase(str.charAt(0)))
            .append(str.substring(1))
            .toString();
    }",Uncapitalizes a String changing the first letter to title case as per  Character#toLowerCase(char).,1,113
2288,"public I18nMessage greaterThanMaxSize(Object value, int maxSize, int actualSize) {
    return createMessage(bundlePath, 8, value, maxSize, actualSize);
  }",Generates a  I18nMessage for a value that was expected to have a maximum size but didn't,1,47
2289,"public static Frame transform3D(Frame input, final int height, final int width, final int depth, final boolean inverse) {
      initCheck(input, height, width, depth);
      return new MRTask() {
        @Override
        public void map(Chunk[] cs, NewChunk[] ncs) {
          double[][][] a = new double[height][width][depth];

          // each row is a 3D sample
          for (int row = 0; row < cs[0]._len; ++row) {
            for (int i = 0; i < height; ++i)
              for (int j = 0; j < width; ++j)
                for (int k = 0; k < depth; ++k)
                  a[i][j][k] = cs[i*(width*depth) + j*depth + k].atd(row);

            // compute 3D DCT
            if (!inverse)
              new DoubleDCT_3D(height, width, depth).forward(a, true);
            else
              new DoubleDCT_3D(height, width, depth).inverse(a, true);

            // write result to NewChunk
            for (int i = 0; i < height; ++i)
              for (int j = 0; j < width; ++j)
                for (int k = 0; k < depth; ++k)
                  ncs[i].addNum(a[i][j][k]);
          }
        }
      }.doAll(input.numCols(), input).outputFrame();
    }","Compute the 3D discrete cosine transform for each row in the given Frame, and return a new Frame",1,465
2290,"private static boolean isObjectParam(DetailAST paramNode) {
        final DetailAST typeNode = paramNode.findFirstToken(TokenTypes.TYPE);
        final FullIdent fullIdent = FullIdent.createFullIdentBelow(typeNode);
        final String name = fullIdent.getText();
        return ""Object"".equals(name) || ""java.lang.Object"".equals(name);
    }",Determines if an AST is a formal param of type Object.,1,95
2291,"public static boolean anyExists(int doc, FunctionValues values1, FunctionValues values2) {
    return values1.exists(doc) || values2.exists(doc);
  }","Equivilent the the  FunctionValues[] method with the same name, but optimized for dealing with exactly 2 arguments.",1,49
2292,"public JvmModuleAssert asJvmModule(Language language) {
		return new JvmModuleAssert(this.actual, language);
	}","Return a  JvmModuleAssert JVM module assertion for the specified  Language, to allow chaining of jvm module-specific assertions from this call.",1,32
2293,"public static ExecutionResults execute(String engineId, EngineDiscoveryRequest discoveryRequest)
			throws PreconditionViolationException {

		Preconditions.notBlank(engineId, ""TestEngine ID must not be null or blank"");

		return execute(loadTestEngine(engineId.trim()), discoveryRequest);
	}",Execute tests for a given  EngineDiscoveryRequest using the  TestEngine with the provided ID.,1,63
2294,"private static List<FoundIndication> findIndications(FailureCause cause, Run build, PrintStream buildLog) {
        long start = System.currentTimeMillis();
        List<Indication> indicationList = cause.getIndications();
        List<FoundIndication> foundIndicationList = new LinkedList<FoundIndication>();
        for (Indication indication : indicationList) {
            Thread.currentThread().setName(""BFA-scanner-""
                                                   + build.getFullDisplayName() + "": ""
                                                   + cause.getName() + ""-""
                                                   + indication.getUserProvidedExpression());
            FoundIndication foundIndication = findIndication(indication, build, buildLog);
            if (foundIndication != null) {
                foundIndicationList.add(foundIndication);
            }
        }
        if (logger.isLoggable(Level.FINER)) {
            logger.log(Level.FINER, ""[BFA] [{0}] [{1}] {2}ms"", new Object[]
                    {build.getFullDisplayName(),
                            cause.getName(),
                            String.valueOf(System.currentTimeMillis() - start), });
        }
        return foundIndicationList;
    }",Finds the indications of a failure cause.,1,283
2295,"public static ClassFileVersion forKnownJavaVersion(int javaVersion) {
        switch (javaVersion) {
            case 1:
                return JAVA_V1;
            case 2:
                return JAVA_V2;
            case 3:
                return JAVA_V3;
            case 4:
                return JAVA_V4;
            case 5:
                return JAVA_V5;
            case 6:
                return JAVA_V6;
            case 7:
                return JAVA_V7;
            case 8:
                return JAVA_V8;
            default:
                throw new IllegalArgumentException(""Unknown Java version: "" + javaVersion);
        }
    }",Creates a class file version for a given major release of Java.,1,147
2296,"public List<N> getChildren() {
    return children;
  }",Gets the list of children.,1,22
2297,"public static HttpServletResponse closeShield(HttpServletResponse response, boolean retry) {
    if (!retry) {
      return new HttpServletResponseWrapper(response) {

        @Override
        public ServletOutputStream getOutputStream() throws IOException {

          return new ServletOutputStreamWrapper(super.getOutputStream()) {
            @Override
            public void close() {
              // even though we skip closes, we let local tests know not to close so that a full understanding can take
              // place
              assert Thread.currentThread().getStackTrace()[2].getClassName().matches(
                  ""org\\.apache\\.(?:solr|lucene).*"") ? false : true : ""Attempted close of response output stream - never do this, you will spoil connection reuse and possibly disrupt a client"";
              stream = ClosedServletOutputStream.CLOSED_SERVLET_OUTPUT_STREAM;
            }
          };
        }

      };
    } else {
      return response;
    }
  }",Wrap the response's output stream with a close shield.,1,190
2298,"public static boolean remove(final java.io.File file)
	{
		if (file != null && file.isFile())
		{
			for (int j = 0; j < 5; ++j)
			{
				for (int i = 0; i < 10; ++i)
				{
					if (file.delete())
					{
						return true;
					}

					try
					{
						Thread.sleep(100);
					}
					catch (InterruptedException ix)
					{
						Thread.currentThread().interrupt();
					}
				}
			}
		}

		return false;
	}",Deletes a normal file.,1,190
2299,"public Double getCurrencyValue() {
		if (getTypeAttr() == OfficeValueTypeAttribute.Value.CURRENCY) {
			return mCellElement.getOfficeValueAttribute();
		} else {
			throw new IllegalArgumentException();
		}
	}",Get the currency value of this cell as Double object.,1,63
2300,"public static String[] splitPreserveAllTokens(final String str) {
        return splitWorker( str,
                            null,
                            -1,
                            true );
    }","Splits the provided text into an array, using whitespace as the separator, preserving all tokens, including empty tokens created by adjacent separators.",1,46
2301,"public KaleoLog remove(KaleoLog kaleoLog) throws SystemException {
		return super.remove(kaleoLog);
	}",Removes the kaleo log from the database.,1,31
2302,"public float getScale() {
        return scaleChipPixels2ScreenPixels;
    }",Pixel drawing scale.,1,19
2303,"@Override
	public String getDefault() {
		OdfElement parentElement = (OdfElement)getOwnerElement();
		String defaultValue = null;
		if (parentElement != null) {
			if( parentElement instanceof DrawConnectorElement ){
				defaultValue = DEFAULT_VALUE_STANDARD;
			}else if( parentElement instanceof DrawEnhancedGeometryElement ){
				defaultValue = DEFAULT_VALUE_NONPRIMITIVE;
			}			
		}
		return defaultValue;
	}",Returns the default value of @odf.attribute draw:type dependent of its element name,1,113
2304,"@Override
  public String getCurrentVersion() {
    Path configStoreDir = new Path(new Path(this.physicalStoreRoot), CONFIG_STORE_NAME);

    try {
      if (!this.fs.exists(configStoreDir)) {
        throw new VersionDoesNotExistException(getStoreURI(), ""CURRENT"", """");
      }
    } catch (IOException e) {
      throw new RuntimeException(
          String.format(""Error while checking if the configStoreDir: \""%s\"" exists"", configStoreDir), e);
    }

    try {
      FileStatus[] fileStatuses = Iterables.toArray(
          Iterables.filter(Arrays.asList(this.fs.listStatus(configStoreDir)), new FileStatusIsDir()), FileStatus.class);
      Arrays.sort(fileStatuses, new FileStatusPathNameComparator());
      return fileStatuses[fileStatuses.length - 1].getPath().getName();
    } catch (IOException e) {
      throw new RuntimeException(
          String.format(""Error while checking current version for configStoreDir: \""%s\"""", configStoreDir), e);
    }
  }",Returns a  String representation of the highest version stored in the  ConfigStore.,1,273
2305,"public KaleoTaskAssignment remove(long kaleoTaskAssignmentId)
		throws NoSuchTaskAssignmentException, SystemException {
		return remove(Long.valueOf(kaleoTaskAssignmentId));
	}",Removes the kaleo task assignment with the primary key from the database.,1,38
2306,"private ColumnFamily getThroughCache(UUID cfId, QueryFilter filter)
    {
        assert isRowCacheEnabled()
               : String.format(""Row cache is not enabled on column family ["" + name + ""]"");

        RowCacheKey key = new RowCacheKey(cfId, filter.key);

        // attempt a sentinel-read-cache sequence.  if a write invalidates our sentinel, we'll return our
        // (now potentially obsolete) data, but won't cache it. see CASSANDRA-3862
        IRowCacheEntry cached = CacheService.instance.rowCache.get(key);
        if (cached != null)
        {
            if (cached instanceof RowCacheSentinel)
            {
                // Some other read is trying to cache the value, just do a normal non-caching read
                Tracing.trace(""Row cache miss (race)"");
                return getTopLevelColumns(filter, Integer.MIN_VALUE);
            }
            Tracing.trace(""Row cache hit"");
            return (ColumnFamily) cached;
        }

        Tracing.trace(""Row cache miss"");
        RowCacheSentinel sentinel = new RowCacheSentinel();
        boolean sentinelSuccess = CacheService.instance.rowCache.putIfAbsent(key, sentinel);

        try
        {
            ColumnFamily data = getTopLevelColumns(QueryFilter.getIdentityFilter(filter.key, name, filter.timestamp),
                                                   Integer.MIN_VALUE);
            if (sentinelSuccess && data != null)
                CacheService.instance.rowCache.replace(key, sentinel, data);

            return data;
        }
        finally
        {
            if (sentinelSuccess && data == null)
                invalidateCachedRow(key);
        }
    }","fetch the row given by filter.key if it is in the cache; if not, read it from disk and cache it",1,351
2307,"public boolean isHostMatch(String host) {
        return isHostMatch(host, getPatterns());
    }",Checks if a given host name / address matches the entry's host pattern(s),1,30
2308,"private static VMPackage vm(Option<String> option) {
        String value = option.getValue();
        if (value == null) {
            return null;
        }
        return (VMPackage) BootImagePackage.fromName(value);
    }",Cast the value of an option to a  VMPackage.,1,73
2309,"private Entity loadEntity(Yard entityhubYard, Representation rep) throws YardException {
        if(rep != null){
            Representation data;
            Representation metadata = null;
            String entityId = ModelUtils.getAboutRepresentation(rep);
            if(entityId != null){
                data = entityhubYard.getRepresentation(entityId);
                metadata = rep;
            } else {
                data = rep;
                entityId = rep.getId(); //needed for logs
            }
            if(data != null){
                metadata = lookupMetadata(entityhubYard, rep.getId(),true);
                return new EntityImpl(config.getID(), data,metadata);
            } else {
                log.warn(""Unable find representation for Entity {} (metadata: {}"",
                    entityId,metadata);
                return null;
            }
        } else {
            return null;
        }
    }",Loads the Entity based on the parsed representation.,1,234
2310,"public static Value[] makeSerialValueArray(Value[] values) {
        if (values != null) {
            Value[] serials = new Value[values.length];
            for (int i = 0; i < values.length; i++) {
                serials[i] = new SerialValue(values[i]);
            }
            return serials;
        } else {
            return new Value[0];
        }
    }",Utility method for decorating an array of values.,1,133
2311,"public List<String> ltRuleAsList(HashMap<String,String> rule, String id, String name, String type) {
        ArrayList<String> ltRule = new ArrayList<String>();
        if (id != null && name != null) {
            ltRule.add(firstIndent + ""<rule "" + ""id=\"""" + id + ""\"" name=\"""" + name + ""\"">"");
        } else {
            ltRule.add(firstIndent + ""<rule>"");
        }    
        // for the ""avoid"" rules
        if (type.equals(""avoid"")) {
            if (Boolean.parseBoolean(rule.get(""casesensitive""))) {
                ltRule.add(secondIndent + ""<pattern case_sensitive=\""yes\"">"");
            } else {
                ltRule.add(secondIndent + ""<pattern>"");
            }            
            String[] pattern = rule.get(""pattern"").split(""\\ +"");
            for (String e : pattern) {
                // for proper handling of apostrophes
                if (e.contains(""'"")) {
                    String[] temp = e.replaceAll(""'"", "" ' "").split(""\\ +"");
                    for (String sTemp : temp) {
                        ltRule = addTokenHelper(ltRule,sTemp,thirdIndentInt);
                    }
                } else {
                    ltRule = addTokenHelper(ltRule,e,thirdIndentInt);
                }
                
            }
            ltRule.add(secondIndent + ""</pattern>"");
            ltRule.add(secondIndent + ""<message>"" + rule.get(""explanation"") + ""</message>"");
            ltRule.add(firstIndent + ""</rule>"");   
        }
        // for the default rules ( pattern::declaration=""...""::declaration=""..."" )
        else if (type.equals(""default"")) {
            // don't deal with filter=kill for now (meaning, likely, lots of false positives)
            //TODO: add negative rule matches here
        	// these will go into the disambiguation file (?) according to the formalism being developed by Marcin
            if (Boolean.parseBoolean(rule.get(""casesensitive""))) {
                ltRule.add(secondIndent + ""<pattern case_sensitive=\""yes\"">"");
            } else {
                ltRule.add(secondIndent + ""<pattern>"");
            }
            String[] pattern = rule.get(""pattern"").split(""\\ +"");
            for (int i=0;i<pattern.length;i++) {
                // for proper handling of apostrophes
                String e = pattern[i];
                if (e.contains(""'"")) {
                    String[] temp = e.replaceAll(""'"", "" ' "").split(""\\ +"");
                    for (String sTemp : temp) {
                        ltRule = addTokenHelper(ltRule,sTemp,thirdIndentInt);
                    }
                } else {
                    ltRule = addTokenHelper(ltRule,e,thirdIndentInt);
                }
            }
            ltRule.add(secondIndent + ""</pattern>"");
            if (rule.containsKey(""word"")) {
                ltRule = addSuggestion(ltRule, rule.get(""word""), pattern, secondIndentInt);
            }
            if (rule.containsKey(""filter"")) {
                if (rule.get(""filter"").equals(""kill"")) {
                    ltRule.add(secondIndent + ""<disambig action=\""immunize\""/>"");
                }
            }
            ltRule.add(firstIndent + ""</rule>"");
            
        }
        
        return ltRule;
        
    }","Takes a HashMap of an AtD rule, and returns a list of lines of XML in LT format.",1,886
2312,"public static String getDateTimeString(final ZonedDateTime self) {
        return self.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) + self.format(ZONE_SHORT_FORMATTER);
    }","Formats this date/time with the  java.time.format.DateTimeFormatter#ISO_LOCAL_DATE_TIME formatter and appends the zone's short name, e.g.",1,42
2313,"public static WindowsGLContext create() {
		long hglrc = wglGetCurrentContext();
		if ( hglrc == NULL )
			throw new IllegalStateException(""No OpenGL context is current in the current thread."");

		ContextCapabilities capabilities = GL.createCapabilities(false);

		return new WindowsGLContext(capabilities, hglrc);
	}",Creates a  WindowContext from the current OpenGL context of the current thread.,1,85
2314,"public LogBuffersMessageFlyweight positionCounterId(final int positionCounterId)
    {
        atomicBuffer().putInt(offset() + POSITION_COUNTER_ID_OFFSET, positionCounterId, LITTLE_ENDIAN);
        return this;
    }",set position counter id field,1,48
2315,"static public DecimalType minimumSince(Item item, AbstractInstant timestamp) {
		if(isDefaultServiceAvailable()) {
			return minimumSince(item, timestamp, defaultService);
		} else {
			return null;
		}
	}",Gets the minimum value of the state of a given item since a certain point in time.,1,64
2316,"public static String getLabel(Edge edge) {
		Object value = edge.attributesProperty().get(ELEMENT_LABEL);
		if (value instanceof Provider) {
			return (String) ((Provider<?>) value).get();
		}
		return (String) value;
	}",Returns the value of the  #ELEMENT_LABEL attribute for the given  Edge.,1,86
2317,"public ArrayList<JanuaryResource> getResources() {
		return new ArrayList<JanuaryResource>(this);
	}",This operation gets all of the JanuaryResources from the component.,1,30
2318,"public DiscoverInfo discoverInfo(String entityID) throws XMPPException {
        if (entityID == null)
            return discoverInfo(null, null);

        // Check if the have it cached in the Entity Capabilities Manager
        DiscoverInfo info = EntityCapsManager.getDiscoverInfoByUser(entityID);

        if (info != null) {
            // We were able to retrieve the information from Entity Caps and
            // avoided a disco request, hurray!
            return info;
        }

        // Try to get the newest node#version if it's known, otherwise null is
        // returned
        EntityCapsManager.NodeVerHash nvh = EntityCapsManager.getNodeVerHashByJid(entityID);

        // Discover by requesting the information from the remote entity
        // Note that wee need to use NodeVer as argument for Node if it exists
        info = discoverInfo(entityID, nvh != null ? nvh.getNodeVer() : null);

        // If the node version is known, store the new entry.
        if (nvh != null) {
            if (EntityCapsManager.verifyDiscvoerInfoVersion(nvh.getVer(), nvh.getHash(), info))
                EntityCapsManager.addDiscoverInfoByNode(nvh.getNodeVer(), info);
        }

        return info;
    }",Returns the discovered information of a given XMPP entity addressed by its JID.,1,225
2319,"public static int getOrder(Class<?> type, int defaultOrder) {
		Integer order = getOrder(type);
		return (order != null ? order : defaultOrder);
	}","Return the order on the specified  type, or the specified default value if none can be found.",1,60
2320,"public static String parseName(String ID) {
        if (ID == null) {
            return null;
        }
        int atIndex = ID.indexOf(""@"");
        if (atIndex < 0) {
            return ID.substring(0);
        }
        else {
            return ID.substring(0, atIndex);

        }
    }",Returns the name portion of a XMPP ID.,1,108
2321,"public Iterable<T> upload(HttpServletRequest request, String extraField, MultipartFile uploadfile)
        throws SQLException, FileNotFoundException, IOException, AuthorizeException {
        Context context = obtainContext();
        Iterable<T> entity = upload(context, request, extraField, uploadfile);
        context.commit();
        return entity;
    }",Bulk create object instances from an uploaded file,1,94
2322,"public static GooglePaymentCardNonce fromPaymentData(PaymentData paymentData) throws JSONException {
        GooglePaymentCardNonce googlePaymentCardNonce = GooglePaymentCardNonce
                .fromJson(paymentData.getPaymentMethodToken().getToken());
        googlePaymentCardNonce.mDescription = paymentData.getCardInfo().getCardDescription();
        googlePaymentCardNonce.mEmail = paymentData.getEmail();
        googlePaymentCardNonce.mBillingAddress = paymentData.getCardInfo().getBillingAddress();
        googlePaymentCardNonce.mShippingAddress = paymentData.getShippingAddress();

        return googlePaymentCardNonce;
    }",Convert  PaymentData to a  GooglePaymentCardNonce.,1,118
2323,"public BucketAutoOperation withGranularity(Granularity granularity) {

		Assert.notNull(granularity, ""Granularity must not be null!"");

		return new BucketAutoOperation(this, buckets, granularity.getMongoRepresentation());
	}",Configures  Granularity granularity that specifies the preferred number series to use to ensure that the calculated boundary edges end on preferred round numbers or their powers of 10 and return a new  BucketAutoOperation.,1,53
2324,"public Checkout remove(Checkout checkout) throws SystemException {
		return super.remove(checkout);
	}",Removes the checkout from the database.,1,31
2325,"public static StringBuffer render( Map<String, List<String>> extensions )
    {
        StringBuffer buf = new StringBuffer();

        if ( extensions.isEmpty() )
        {
            return buf;
        }

        for ( Map.Entry<String, List<String>> entry : extensions.entrySet() )
        {
            buf.append( "" "" ).append( entry.getKey() ).append( "" "" );

            List<String> values = entry.getValue();

            // For extensions without values like X-IS-HUMAN-READIBLE
            if ( values == null || values.isEmpty() )
            {
                continue;
            }

            // For extensions with a single value we can use one qdstring like 'value'
            if ( values.size() == 1 )
            {
                buf.append( ""'"" ).append( values.get( 0 ) ).append( ""' "" );
                continue;
            }

            // For extensions with several values we have to surround whitespace
            // separated list of qdstrings like ( 'value0' 'value1' 'value2' )
            buf.append( ""( "" );
            for ( String value : values )
            {
                buf.append( ""'"" ).append( value ).append( ""' "" );
            }
            buf.append( "")"" );
        }

        if ( buf.charAt( buf.length() - 1 ) != ' ' )
        {
            buf.append( "" "" );
        }

        return buf;
    }",Renders the schema extensions into a new StringBuffer.,1,402
2326,"public static InputStream getInputStreamFromUrl(String imageUrl, int readTimeOutMillis) {
        return getInputStreamFromUrl(imageUrl, readTimeOutMillis, null);
    }","get input stream from network by imageurl, you need to close inputStream yourself",1,38
2327,"public Hashtable getDataTypeDefinitions() {
        return ComponentHelper.getComponentHelper(this).getDataTypeDefinitions();
    }",Returns the current datatype definition hashtable.,1,28
2328,"public ProbeInstrument attach(Probe probe, StandardInstrumentListener listener, String instrumentInfo) {
        final ProbeInstrument instrument = new ProbeInstrument.StandardInstrument(listener, instrumentInfo);
        probe.attach(instrument);
        return instrument;
    }","Attaches a  StandardInstrumentListener listener to a  Probe, creating a binding called an  ProbeInstrument.",1,63
2329,"public static UtilityList<Object> asList(JSONArray array) {
        log.debug(""Returning {} using {}"", JSONArrayList.class.getName(), array);
        return new JSONArrayList(array);
    }",Provides a  UtilityList-based view on a  JSONArray.,1,55
2330,"public static String getParticipantId(String hostName, ContainerId containerId) {
    return getHelixInstanceName(hostName, containerId);
  }",Get a Helix partition ID from a given host name and a given Yarn  ContainerId.,1,35
2331,"public MetadataResult<ComponentMetadataDescriptor> getMetadata()
    {
        ComponentMetadataDescriptorBuilder componentDescriptorBuilder = MetadataDescriptorBuilder.componentDescriptor(componentModel.getName())
                .withParametersDescriptor(getParametersMetadataDescriptors())
                .withOutputDescriptor(getOutputMetadataDescriptor());

        Optional<TypeMetadataDescriptor> contentDescriptor = getContentMetadataDescriptor();
        if (contentDescriptor.isPresent())
        {
            componentDescriptorBuilder.withContentDescriptor(contentDescriptor.get());
        }

        return success(componentDescriptorBuilder.build());
    }","Resolves the  ComponentMetadataDescriptor for the associated  MetadataAware Component using only the static types of the Component parameters, attributes and output.",1,114
2332,"public static boolean isUiStyleDefault(String backStackEntryName) {
        return backStackEntryName != null && backStackEntryName.startsWith(ENTRY_NAME_REPLACE);
    }",Returns true if the backstack represents GuidedStepFragment with  #UI_STYLE_REPLACE; false otherwise.,1,39
2333,"@SuppressWarnings(""resource"")
	public TunnelHandle tunnel(SSHTunnelConnector tunnelConnector) {
		String jmxHost = tunnelConnector.getJmxConnectorHost();
		int jmxPort = tunnelConnector.getJmxConnectorPort();
		int localPort = tunnelConnector.getLocalPort();		
		LocalPortForwarderWrapper tunnel = null;
		final String key;
		if(localPort < 1) {
			localPort = 0;
			key = String.format(""%s:%s"", jmxHost, jmxPort);
			tunnel = tunnelsByAddress.get(key);
			if(tunnel == null) {
				synchronized(tunnelsByAddress) {
					tunnelsByAddress.get(key);
					if(tunnel == null) {
						ConnectionWrapper cw = _connect(tunnelConnector);
						try {
							tunnel = new LocalPortForwarderWrapper(
									cw.createLocalPortForwarder(localPort, jmxHost, jmxPort),
									jmxHost, jmxPort, true
							);
							registerTunnel(tunnel);
						} catch (IOException e) {
							throw new RuntimeException(""Failed to tunnel to ["" + jmxHost + "":"" + jmxPort + ""]"", e);
						}
					}
				}
			}
		} else {
			key = String.format(""%s:%s:%s"", jmxHost, localPort, jmxPort);
			tunnel = tunnelsByAddressWithLocal.get(key);
			if(tunnel == null) {
				synchronized(tunnelsByAddressWithLocal) {
					tunnelsByAddressWithLocal.get(key);
					if(tunnel == null) {
						ConnectionWrapper cw = _connect(tunnelConnector);
						try {
							tunnel = new LocalPortForwarderWrapper(
									cw.createLocalPortForwarder(localPort, jmxHost, jmxPort),
									jmxHost, jmxPort, true
							);
							registerTunnel(tunnel);
						} catch (IOException e) {
							throw new RuntimeException(""Failed to tunnel to ["" + jmxHost + "":"" + jmxPort + ""] with local port ["" + localPort + ""]"", e);
						}
					}
				}
			}
		}		
		return tunnel;
	}",Creates or acquires a new tunnel,1,537
2334,"public ZonedDateTime getExpires() {
        return expires;
    }",Get the ZonedDateTime that this Token expires,1,19
2335,"Optional<Path> enqueueCoredump(Path containerCrashPathOnHost, Path containerProcessingPathOnHost) {
        List<Path> toProcess = FileFinder.files(containerCrashPathOnHost)
                .match(nameStartsWith(""."").negate()) // Skip core dump files currently being written
                .maxDepth(1)
                .stream()
                .sorted(Comparator.comparing(FileFinder.FileAttributes::lastModifiedTime))
                .map(FileFinder.FileAttributes::path)
                .collect(Collectors.toList());

        int coredumpIndex = IntStream.range(0, toProcess.size())
                .filter(i -> !HS_ERR_PATTERN.matcher(toProcess.get(i).getFileName().toString()).matches())
                .findFirst()
                .orElse(-1);

        // Either there are no files in crash directory, or all the files are hs_err files.
        if (coredumpIndex == -1) return Optional.empty();

        Path enqueuedDir = uncheck(() -> Files.createDirectories(containerProcessingPathOnHost.resolve(coredumpIdSupplier.get())));
        IntStream.range(0, coredumpIndex + 1)
                .forEach(i -> {
                    Path path = toProcess.get(i);
                    String prefix = i == coredumpIndex ? COREDUMP_FILENAME_PREFIX : """";
                    uncheck(() -> Files.move(path, enqueuedDir.resolve(prefix + path.getFileName())));
                });
        return Optional.of(enqueuedDir);
    }",Moves a coredump and related hs_err file(s) to a new directory under the processing/ directory.,1,358
2336,"private SpringDataMongodbQuery<T> applySorting(SpringDataMongodbQuery<T> query, Sort sort) {

		// TODO: find better solution than instanceof check
		if (sort instanceof QSort) {

			List<OrderSpecifier<?>> orderSpecifiers = ((QSort) sort).getOrderSpecifiers();
			query.orderBy(orderSpecifiers.toArray(new OrderSpecifier<?>[orderSpecifiers.size()]));

			return query;
		}

		sort.stream().map(this::toOrder).forEach(query::orderBy);

		return query;
	}",Applies the given  Sort to the given  SpringDataMongodbQuery.,1,139
2337,"public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the last index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex will return  #INDEX_NOT_FOUND (-1).,1,172
2339,"@Override
    public boolean isValidated()
    {
        String chosenPath = pathSelectionPanel.getPath();
        boolean ok = true;

        boolean modifyinstallation = Boolean.valueOf(
                this.installData.getVariable(InstallData.MODIFY_INSTALLATION));
        if (modifyinstallation)
        {
            // installation directory has to exist in a modification installation
            mustExist = true;

            File installationinformation = new File(
                    pathSelectionPanel.getPath() + File.separator + InstallData.INSTALLATION_INFORMATION);
            if (!installationinformation.exists())
            {
                emitError(getString(""installer.error""),
                          getString(""PathInputPanel.required.forModificationInstallation""));

                return false;
            }
        }

        // We put a warning if the specified target is nameless
        if (chosenPath.length() == 0)
        {
            if (isMustExist())
            {
                emitError(getString(""installer.error""), getString(""PathInputPanel.required""));
                return false;
            }
            ok = emitWarning(getString(""installer.warning""), emptyTargetMsg);
        }
        if (!ok)
        {
            return ok;
        }

        // Expand unix home reference
        if (chosenPath.startsWith(""~""))
        {
            String home = System.getProperty(""user.home"");
            chosenPath = home + chosenPath.substring(1);
        }

        // Normalize the path
        File path = new File(chosenPath).getAbsoluteFile();
        chosenPath = path.toString();
        pathSelectionPanel.setPath(chosenPath);
        if (isMustExist())
        {
            if (!path.exists())
            {
                emitError(getString(""installer.error""), getString(getI18nStringForClass(""required"", ""PathInputPanel"")));
                return false;
            }
            if (!pathIsValid())
            {
                emitError(getString(""installer.error""), getString(getI18nStringForClass(""notValid"", ""PathInputPanel"")));
                return false;
            }
        }
        else
        {
            // We assume, that we would install something into this dir
            if (!isWriteable())
            {
                emitError(getString(""installer.error""), getI18nStringForClass(
                        ""notwritable"", ""TargetPanel""));
                return false;
            }
            // We put a warning if the directory exists else we warn
            // that it will be created
            if (path.exists())
            {
                int res = askQuestion(getString(""installer.warning""), warnMsg,
                                      AbstractUIHandler.CHOICES_YES_NO, AbstractUIHandler.ANSWER_YES);
                ok = res == AbstractUIHandler.ANSWER_YES;
            }
            else
            {
                //if 'ShowCreateDirectoryMessage' variable set to 'false'
                // then don't show ""directory will be created"" dialog:
                final String vStr =
                        installData.getVariable(""ShowCreateDirectoryMessage"");
                if (vStr == null || Boolean.getBoolean(vStr))
                {
                    ok = this.emitNotificationFeedback(getI18nStringForClass(
                            ""createdir"", ""TargetPanel"") + ""\n"" + chosenPath);
                }
            }
        }
        return ok;
    }",Indicates wether the panel has been validated or not.,1,733
2340,"public static <T> Set<T> asImmutable(Set<T> self) {
        return asUnmodifiable(new LinkedHashSet<T>(self));
    }",A convenience method for creating an immutable Set.,1,45
2341,"public static ModuleIdentifier asModuleIdentifier(ModelNode value, ModuleIdentifier defaultValue) {
        return value.isDefined() ? ModuleIdentifier.fromString(value.asString()) : defaultValue;
    }","Returns the value of the node as a module identifier, or the specified default if the node is undefined.",1,50
2342,"public MiniHBaseCluster startMiniCluster() throws Exception {
    return startMiniCluster(1, 1);
  }","Start up a minicluster of hbase, dfs, and zookeeper.",1,29
2343,"private static Object add(Object array, int index, Object element, Class clss) {
        if (array == null) {
            if (index != 0) {
                throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: 0"");
            }
            Object joinedArray = Array.newInstance(clss, 1);
            Array.set(joinedArray, 0, element);
            return joinedArray;
        }
        int length = Array.getLength(array);
        if (index > length || index < 0) {
            throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: "" + length);
        }
        Object result = Array.newInstance(clss, length + 1);
        System.arraycopy(array, 0, result, 0, index);
        Array.set(result, index, element);
        if (index < length) {
            System.arraycopy(array, index, result, index + 1, length - index);
        }
        return result;
    }","Underlying implementation of add(array, index, element) methods.",1,305
2344,"public static double[] toPrimitive(final Double[] array, final double valueForNull) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_DOUBLE_ARRAY;
        }
        final double[] result = new double[array.length];
        for (int i = 0; i < array.length; i++) {
            Double b = array[i];
            result[i] = (b == null ? valueForNull : b.doubleValue());
        }
        return result;
    }",Converts an array of object Doubles to primitives handling null. This method returns null if null array input.,1,182
2345,"public MeetupsEntry remove(long meetupsEntryId)
		throws NoSuchMeetupsEntryException, SystemException {
		return remove(Long.valueOf(meetupsEntryId));
	}",Removes the meetups entry with the primary key from the database.,1,38
2346,"protected SparklingApplication getApplication(FilterConfig filterConfig) throws ServletException {
        try {
            String applicationClassName = filterConfig.getInitParameter(APPLICATION_CLASS_PARAM);
            Class<?> applicationClass = Class.forName(applicationClassName);
            return (SparklingApplication) applicationClass.newInstance();
        } catch (Exception e) {
            throw new ServletException(e);
        }
    }",Returns an instance of  SparklingApplication which on which  SparklingApplication#init() init() will be called.,1,99
2347,"@SchedulerSupport(SchedulerSupport.NONE)
    public final TestObserver<Void> test(boolean cancelled) {
        TestObserver<Void> ts = new TestObserver<Void>();

        if (cancelled) {
            ts.cancel();
        }
        subscribe(ts);
        return ts;
    }","Creates a TestObserver optionally in cancelled state, then subscribes it to this Completable.",1,83
2348,"public Event getMuleEvent() {
    return muleEvent;
  }",Returns the  Event on which the validation was triggered,1,19
2349,"public static String padRight(CharSequence self, Number numberOfChars, CharSequence padding) {
        String s = self.toString();
        int numChars = numberOfChars.intValue();
        if (numChars <= s.length()) {
            return s;
        } else {
            return s + getPadding(padding.toString(), numChars - s.length());
        }
    }","Pad a CharSequence to a minimum length specified by numberOfChars, adding the supplied padding",1,118
2350,"public Bar remove(long barId) throws NoSuchBarException, SystemException {
		return remove(Long.valueOf(barId));
	}",Removes the bar with the primary key from the database.,1,37
2351,"public boolean addDelegate(TransportAddress transportAddress, DelegateTransport transport) {
        return transport().transports.put(transportAddress, transport) == null;
    }",Adds a new delegate transport that is used for communication with the given transport address.,1,44
2352,"static public String dateToString(ZonedDateTime d) {
//        return d.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
        return d.format(DateTimeFormatter.ISO_INSTANT);
    }",Convert a date/time to an ISO_LOCAL_DATE_TIME string,1,33
2353,"public static XBooleanListValue removeBooleanFromList(XID actorID, XField field, boolean bool) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XBooleanListValue) {
			XBooleanListValue listValue = (XBooleanListValue)value;
			
			// manipulate the contained list
			List<Boolean> list = XX.asList(listValue);
			list.remove(bool);
			
			listValue = toBooleanListValue(list);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Removes the first occurrence of the given boolean from the  XBooleanListValue of the given  XField,1,172
2354,"public static BibEntry getEntry(String entryUrl) {
        try {
            // Replace special characters by corresponding sequences:
            entryUrl = entryUrl.replaceAll(""%"", ""%25"").replaceAll("":"", ""%3A"").replaceAll(""/"", ""%2F"").replaceAll(""\\?"", ""%3F"").replaceAll(""&"", ""%26"").replaceAll(""="", ""%3D"");

            URL url = new URL(BibsonomyScraper.BIBSONOMY_SCRAPER + entryUrl + BibsonomyScraper.BIBSONOMY_SCRAPER_POST);
            String bibtex = new URLDownload(url).downloadToString(StandardCharsets.UTF_8);
            BibtexParser bp = new BibtexParser(new StringReader(bibtex));
            ParserResult pr = bp.parse();
            if ((pr != null) && (pr.getDatabase().getEntryCount() > 0)) {
                return pr.getDatabase().getEntries().iterator().next();
            } else {
                return null;
            }

        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        } catch (RuntimeException ex) {
            ex.printStackTrace();
            return null;
        }
    }",Return a BibEntry by looking up the given url from the BibSonomy scraper.,1,322
2355,"public static Histogram newHistogram(MetricName metricName,
                                               boolean biased) {
        return DEFAULT_REGISTRY.newHistogram(metricName, biased);
    }",Creates a new  com.yammer.metrics.core.Histogram and registers it under the given metric name.,1,38
2356,"public static <T> T[] noNullElements(T[] array) {
        return noNullElements(array, DEFAULT_NO_NULL_ELEMENTS_ARRAY_EXCEPTION_MESSAGE);
    }",Validate that the specified argument array is neither null nor contains any elements that are null; otherwise throwing an exception.,1,38
2357,"public static List<ColumnDefinition> fromSchema(Row row, CFMetaData cfm)
    {
        if (row.cf == null)
            return Collections.emptyList();

        List<ColumnDefinition> cds = new ArrayList<ColumnDefinition>();
        for (UntypedResultSet.Row result : QueryProcessor.resultify(""SELECT * FROM system.schema_columns"", row))
        {
            try
            {
                IndexType index_type = null;
                Map<String,String> index_options = null;
                String index_name = null;
                Integer componentIndex = null;

                if (result.has(""index_type""))
                    index_type = IndexType.valueOf(result.getString(""index_type""));
                if (result.has(""index_options""))
                    index_options = FBUtilities.fromJsonMap(result.getString(""index_options""));
                if (result.has(""index_name""))
                    index_name = result.getString(""index_name"");
                if (result.has(""component_index""))
                    componentIndex = result.getInt(""component_index"");

                cds.add(new ColumnDefinition(cfm.getColumnDefinitionComparator(componentIndex).fromString(result.getString(""column"")),
                                             TypeParser.parse(result.getString(""validator"")),
                                             index_type,
                                             index_options,
                                             index_name,
                                             componentIndex));
            }
            catch (ConfigurationException e)
            {
                throw new RuntimeException(e);
            }
        }

        return cds;
    }",Deserialize columns from low-level representation,1,381
2358,"public Iterator<Presence> getPresences(String user) {
        String key = getPresenceMapKey(user);
        Map<String, Presence> userPresences = presenceMap.get(key);
        if (userPresences == null) {
            return Arrays.asList(new Presence(Presence.Type.unavailable)).iterator();
        }
        else {
            synchronized (userPresences) {
                return new HashMap<String, Presence>(userPresences).values().iterator();
            }
        }
    }","Returns an iterator (of Presence objects) for all of a user's current presences or an unavailable presence if the user is unavailable (offline) or if no presence information is available, such as when you are not subscribed to the user's presence updates.",1,139
2359,"public RVMMethod peekInterfaceMethod() {
    if (resolvedMember != null) return resolvedMember;

    // Hasn't been resolved yet. Try to do it now.
    RVMClass declaringClass = (RVMClass) type.peekType();
    if (declaringClass == null) return null;
    if (!declaringClass.isResolved()) {
      declaringClass.resolve();
    }
    if (!declaringClass.isInterface()) return null;
    return resolveInterfaceMethodInternal(declaringClass);
  }",Find the RVMMethod that this member reference refers to using the search order specified in JVM spec 5.4.3.4.,1,120
2360,"private static IResource drop(IResource sourceResource,
            TmfTraceFolder traceFolder,
            int operation) {

        if (sourceResource.getProject().equals(traceFolder.getResource().getProject())) {
            return null;
        }
        String targetName = sourceResource.getName();
        for (TmfTraceElement trace : traceFolder.getTraces()) {
            if (trace.getName().equals(targetName)) {
                targetName = promptRename(trace);
                if (targetName == null) {
                    return null;
                }
                break;
            }
        }
        try {
            if (operation == DND.DROP_COPY) {
                IPath destination = traceFolder.getResource().getFullPath().addTrailingSeparator().append(targetName);
                sourceResource.copy(destination, false, null);
                cleanupBookmarks(destination);
            } else {
                createLink(traceFolder.getResource(), sourceResource, targetName);
            }
            return traceFolder.getResource().findMember(targetName);
        } catch (CoreException e) {
            displayException(e);
        }
        return null;
    }",Drop a trace by copying/linking a resource in a trace folder,1,302
2361,"private static MapKeyLookupResult getContextMapKeyForJBoss(ClassLoader loader) {
        ClassLoader applicationLoader = loader;
        String archiveFileName = null;
        // safety counter to keep from taking too long or looping forever, just in case of some unexpected circumstance
        int i = 0;
        // iterate up the loader hierarchy looking for the top-level application loader
        while (i < COUNTER_LIMIT) {
            if (jBossClassLoaderHasArchiveFileInfo(loader)) {
                // current loader has archive file info - store it
                applicationLoader = loader;
            }
            final ClassLoader parent = loader.getParent();
            // once we have hit the top we will stop looking
            if (parent == null || parent == loader) {
                // get the archive file name from the loader we are going to return
                archiveFileName = getApplicationNameFromJBossClassLoader(applicationLoader.toString());
                break;
            }
            // move up and try again
            loader = parent;
            i++;
        }
        // if we found the archive file name, use it as the key
        if (archiveFileName != null) {
            return new MapKeyLookupResult(archiveFileName, applicationLoader);
        }
        // at this point we don't know the archive file name so the loader will be the key
        return new MapKeyLookupResult(applicationLoader);
    }",Attempt to return a MapKeyLookupResult instance wrapping the archive file name and application loader based on a given JBoss classloader.,1,229
2362,"public static TypeLiteral<?>[] get( final TypeLiteral<?> genericType )
    {
        final Type type = genericType.getType();
        if ( type instanceof ParameterizedType )
        {
            final Type[] arguments = ( (ParameterizedType) type ).getActualTypeArguments();
            final TypeLiteral<?>[] parameters = new TypeLiteral[arguments.length];
            for ( int i = 0; i < arguments.length; i++ )
            {
                parameters[i] = expand( arguments[i] );
            }
            return parameters;
        }
        if ( type instanceof GenericArrayType )
        {
            return new TypeLiteral[] { expand( ( (GenericArrayType) type ).getGenericComponentType() ) };
        }
        return NO_TYPE_LITERALS;
    }","Get all type parameters from a generic type, for example  [Foo,Bar] from  Map.",1,234
2363,"/*--------------------------------------------------------------------------*/
    private boolean readRuleField(UIElement field)
    {
        RuleInputField ruleField = null;
        String variable = null;
        String message = null;

        try
        {
            ruleField = (RuleInputField) field.getComponent();
            variable = field.getAssociatedVariable();
            message = field.getMessage();
        }
        catch (Throwable exception)
        {
            return (true);
        }
        if ((variable == null) || (ruleField == null))
        {
            return (true);
        }

        boolean success = !validating || ruleField.validateContents();
        if (!success)
        {
            showWarningMessageDialog(parentFrame, message);
            return (false);
        }

        installData.setVariable(variable, ruleField.getText());
        entries.add(new TextValuePair(variable, ruleField.getText()));
        return (true);
    }",Reads the data from the rule input field and sets the associated variable.,1,262
2364,"public DebuggerSession startSession() {
        return getDebugger().startSession(new SuspendedCallback() {
            public void onSuspend(SuspendedEvent event) {
                DebuggerTester.this.onSuspend(event);
            }
        });
    }",Starts a new  Debugger#startSession(SuspendedCallback) debugger session in the context's  Engine engine.,1,63
2365,"public static BackendHandler createBackendHandler(final int sequenceId, final String sql, final BackendConnection backendConnection, final DatabaseType databaseType) {
        Optional<TransactionOperationType> transactionOperationType = TransactionOperationType.getOperationType(sql);
        if (transactionOperationType.isPresent()) {
            return new TransactionBackendHandler(transactionOperationType.get(), backendConnection);
        }
        if (sql.startsWith(SCTL_SET)) {
            return new ShardingCTLBackendHandler(sql, backendConnection);
        }
        SQLStatement sqlStatement = new SQLJudgeEngine(sql).judge();
        if (SQLType.DCL == sqlStatement.getType() || sqlStatement instanceof SetStatement) {
            return new SchemaBroadcastBackendHandler(sequenceId, sql, backendConnection, databaseType);
        } else if (sqlStatement instanceof UseStatement) {
            return new UseSchemaBackendHandler((UseStatement) sqlStatement, backendConnection);
        } else if (sqlStatement instanceof ShowDatabasesStatement) {
            return new ShowDatabasesBackendHandler();
        } else {
            return BackendHandlerFactory.newTextProtocolInstance(sequenceId, sql, backendConnection, DatabaseType.MySQL);
        }
    }",Create new com query backend handler instance.,1,286
2366,"private IFigure getUpwardsPortSvgString(final Color color) {
        PointList pointList = new PointList();
        pointList.addPoint(0,7);
        pointList.addPoint(7,7);
        pointList.addPoint(new Point(3.5, 0));
        pointList.addPoint(0,7);
        PolygonShape figure = new PolygonShape();
        figure.setPoints(pointList);
        figure.setBackgroundColor(color);
        figure.setForegroundColor(ColorConstants.black);
        figure.setLineWidth(1);
        figure.getBounds().setSize(8,8);
        return figure;
    }",Holds a figure of a triangle pointing north.,1,155
2367,"static PathContainer subPath(PathContainer path, int startIndex, int endIndex) {
		return DefaultPathContainer.subPath(path, startIndex, endIndex);
	}",Extract a sub-path from the given start offset (inclusive) into the path element list and to the end offset (exclusive).,1,43
2368,"public static List<ColumnDefinition> fromSchema(Row serializedColumns, CFMetaData cfm)
    {
        List<ColumnDefinition> cds = new ArrayList<>();

        String query = String.format(""SELECT * FROM %s.%s"", Keyspace.SYSTEM_KS, SystemKeyspace.SCHEMA_COLUMNS_CF);
        for (UntypedResultSet.Row row : QueryProcessor.resultify(query, serializedColumns))
        {
            Type type = row.has(TYPE)
                      ? Enum.valueOf(Type.class, row.getString(TYPE).toUpperCase())
                      : Type.REGULAR;

            Integer componentIndex = null;
            if (row.has(COMPONENT_INDEX))
                componentIndex = row.getInt(COMPONENT_INDEX);
            else if (type == Type.CLUSTERING_KEY && cfm.isSuper())
                componentIndex = 1; // A ColumnDefinition for super columns applies to the column component

            ByteBuffer name = cfm.getComponentComparator(componentIndex, type).fromString(row.getString(COLUMN_NAME));

            AbstractType<?> validator;
            try
            {
                validator = TypeParser.parse(row.getString(VALIDATOR));
            }
            catch (RequestValidationException e)
            {
                throw new RuntimeException(e);
            }

            IndexType indexType = null;
            if (row.has(INDEX_TYPE))
                indexType = IndexType.valueOf(row.getString(INDEX_TYPE));

            Map<String, String> indexOptions = null;
            if (row.has(INDEX_OPTIONS))
                indexOptions = FBUtilities.fromJsonMap(row.getString(INDEX_OPTIONS));

            String indexName = null;
            if (row.has(INDEX_NAME))
                indexName = row.getString(INDEX_NAME);

            cds.add(new ColumnDefinition(name, validator, indexType, indexOptions, indexName, componentIndex, type));
        }

        return cds;
    }",Deserialize columns from storage-level representation,1,476
2369,"private ExtensionManager createExtensionManager(final MuleContext muleContext) throws InitialisationException {
    if (muleContext.getExtensionManager() != null) {
      // TODO MULE-10982: implement a testing framework for XML based connectors, for now we workaround the current generation of the ExtensionManager if it was already created (see org.mule.test.operation.AbstractXmlExtensionMuleArtifactFunctionalTestCase)
      return muleContext.getExtensionManager();
    }
    ExtensionManager extensionManager = extensionManagerFactory.create(muleContext);

    ((DefaultMuleContext) muleContext).setExtensionManager(extensionManager);

    return extensionManager;
  }",Creates an  ExtensionManager to be used for registering the extensions.,1,94
2370,"public static String getRelativePath(File file) {
        String repositoryPath = null;
        SvnClient client = Subversion.getInstance().getClient();

        List path = new ArrayList();
        SVNUrl repositoryURL = null;
        while (Subversion.getInstance().isManaged(file)) {

            ISVNInfo info = null;
            try {
                info = client.getInfoFromWorkingCopy(file);
            } catch (SVNClientException ex) {
                if (ex.getMessage().indexOf(""(Not a versioned resource)"") == -1) {  // NOI18N
                    ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
                }
            }

            if (info != null) {
                SVNUrl fileURL = info.getUrl();
                repositoryURL = info.getRepository();
                int status = Subversion.getInstance().getStatusCache().getStatus(file).getStatus();
                if (repositoryURL == null && (status & FileInformation.STATUS_MANAGED) != 0) {
                    // checked out with 1.2 client
                    // XXX - IMPORTANT! this hack won't work as long you get the client by
                    //       calling the getClient() method and connecting through a PROXY
                    //     - use getClient(SVNUrl, *) to obtain a client properly configured for the given url
                    try {
                        repositoryURL = client.getInfo(fileURL).getRepository();
                    } catch (SVNClientException ex) {
                        if (ex.getMessage().indexOf(""(Not a versioned resource)"") == -1) {  // NOI18N
                            ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
                        }
                    }
                }

                if (fileURL != null && repositoryURL !=  null) {
                    String fileLink = fileURL.toString();
                    String repositoryLink = repositoryURL.toString();
                    repositoryPath = fileLink.substring(repositoryLink.length());

                    Iterator it = path.iterator();
                    StringBuffer sb = new StringBuffer();
                    while (it.hasNext()) {
                        String segment = (String) it.next();
                        sb.append(""/"" + segment);
                    }
                    repositoryPath += sb.toString();
                    break;
                }
            }

            path.add(0, file.getName());
            file = file.getParentFile();

        }
                
        return repositoryPath;
    }",Compute relative path to repository root.,1,597
2371,"public HttpSessionImpl getSession(final String sessionId) {
        final SessionManager sessionManager = deployment.getSessionManager();
        Session session = sessionManager.getSession(sessionId);
        if (session != null) {
            return HttpSessionImpl.forSession(session, this, false);
        }
        return null;
    }",Gets the session with the specified ID if it exists,1,89
2372,"private IFigure getPortSvgString(final Color color) {
        PointList pointList = new PointList();
        pointList.addPoint(0,7);
        pointList.addPoint(0,0);
        pointList.addPoint(new Point(7, 3.5));
        pointList.addPoint(0,7);
        PolygonShape figure = new PolygonShape();
        figure.setPoints(pointList);
        figure.setBackgroundColor(color);
        figure.setForegroundColor(ColorConstants.black);
        figure.setLineWidth(1);
        figure.getBounds().setSize(8,8);
        return figure;
    }",Holds a figure of a triangle pointing east.,1,155
2373,"private ParameterBinding getBindingFor(Query jpaQuery, int position, Parameter methodParameter) {

		try {

			jpaQuery.getParameter(position);
			return query.getBindingFor(position);

		} catch (IllegalArgumentException o_O) {

			if (hasNamedParameter(jpaQuery)) {
				return query.getBindingFor(methodParameter.getName());
			}
		}

		return null;
	}",Finds the  LikeParameterBinding to be applied before binding a parameter value to the query.,1,108
2374,"public static double missingFeaturesFromType(final MetaLayout metaLayout, final String typeId) {
        LayoutTypeData typeData = LayoutDataService.getInstance().getTypeData(typeId);
        EnumSet<GraphFeature> graphFeatures = metaLayout.getGraphFeatures();
        double penalty = GraphFeature.values().length;
        for (LayoutAlgorithmData algorithmData : typeData.getLayouters()) {
            double p = 0;
            for (GraphFeature feature : graphFeatures) {
                int prio = algorithmData.getSupportedPriority(feature);
                if (prio <= -SUPP_FEATURE_PRIO_SCALE) {
                    p++;
                } else if (prio < 0) {
                    p += (double) -prio / SUPP_FEATURE_PRIO_SCALE;
                }
            }
            if (p < penalty) {
                penalty = p;
            }
        }
        return penalty;
    }",Determine a penalty value for the features that are not supported by a layout algorithm of given type.,1,233
2375,"public static Quantifier _0_1(RulePart... parsers) {
		return mul(0, 1, parsers);
	}","Shortcut for  new Quantifier((parsers.length == 1) ? parsers[0] : new Sequence(parsers), 0, 1) .",1,36
2376,"public Environment createProcessingEnvironment(Object dataModel, Writer out, ObjectWrapper wrapper)
    throws TemplateException, IOException {
        final TemplateHashModel dataModelHash;
        if (dataModel instanceof TemplateHashModel) {
            dataModelHash = (TemplateHashModel) dataModel;
        } else {
            if(wrapper == null) {
                wrapper = getObjectWrapper();
            }

            if (dataModel == null) {
                dataModelHash = new SimpleHash(wrapper);
            } else {
                TemplateModel wrappedDataModel = wrapper.wrap(dataModel);
                if (wrappedDataModel instanceof TemplateHashModel) {
                    dataModelHash = (TemplateHashModel) wrappedDataModel;
                } else if (wrappedDataModel == null) {
                    throw new IllegalArgumentException(
                            wrapper.getClass().getName() + "" converted "" + dataModel.getClass().getName() + "" to null."");
                } else {
                    throw new IllegalArgumentException(
                            wrapper.getClass().getName() + "" didn't convert "" + dataModel.getClass().getName()
                            + "" to a TemplateHashModel. Generally, you want to use a Map<String, Object> or a ""
                            + ""Java Bean as the root-map (aka. data-model) parameter. The Map key-s or Java Bean ""
                            + ""property names will be the variable names in the template."");
                }
            }
        }
        return new Environment(this, dataModelHash, out);
    }","Creates a  freemarker.core.Environment Environment object, using this template, the data-model provided as parameter.",1,331
2377,"public List<WriterInterceptor> getWriterInterceptors() {
        return writerInterceptors;
    }",Get all reader interceptors applicable to the  #getResourceMethod() resource method wrapped by this invoker.,1,22
2378,"static ActionWrapper[] getShortcuts() {
        ActionWrapper[] actions = shortcutHash.values().toArray(
                new ActionWrapper[shortcutHash.size()]);
        Arrays.sort(actions, new Comparator<ActionWrapper>() {
            public int compare(ActionWrapper o1, ActionWrapper o2) {
                String name1 = o1.getActionName();
                if (name1 == null) {
                    name1 = """";
                }
                String name2 = o2.getActionName();
                if (name2 == null) {
                    name2 = """";
                }
                return name1.compareTo(name2);
            }
        });
        return actions;
    }",Return the shortcuts as an ActionWrapper array,1,190
2379,"public static ServerName readRegionLocation(CatalogTracker catalogTracker,
      byte [] regionName)
  throws IOException {
    Pair<HRegionInfo, ServerName> pair = getRegion(catalogTracker, regionName);
    return (pair == null || pair.getSecond() == null)? null: pair.getSecond();
  }",Reads the location of the specified region,1,91
2380,"protected Object createValue(int count) {
		
		if (count == 1) return new Double(randomDouble(MIN, MAX));
		
		Double[] values = new Double[count];
		for (int i=0; i<values.length; i++) values[i] = (Double)createValue(1);
		return values;
	}",Creates and returns (count) number of legal Double values,1,110
2381,"protected SortedArrayStringMap getStringMap() {
        return map;
    }",Returns the SortedArrayStringMap with  List values that this MapFilter was constructed with.,1,19
2382,"public static String comparableQualifier( String qualifier )
        {
            int i = _QUALIFIERS.indexOf( qualifier );

            return i == -1 ? _QUALIFIERS.size() + ""-"" + qualifier : String.valueOf( i );
        }",Returns a comparable value for a qualifier.,1,80
2383,"public static String formatDurationHMS(final long durationMillis) {
        return formatDuration(durationMillis, ""HH:mm:ss.SSS"");
    }",Formats the time gap as a string. The format used is ISO 8601-like:  HH:mm:ss.SSS.,1,34
2384,"public static Executor chainedExecutor(Executor[] executors) {
        executors = copy(executors);
        validate(executors);
        return new ChainedExecutor(executors);
    }","Create a new Executor that calls each executor in turn, passing the result into the next executor.",1,49
2385,"public static Optional<BaseEmailAttributes> getAttributesFromMessage(Message muleMessage) {
    if (muleMessage.getAttributes() instanceof BaseEmailAttributes) {
      return Optional.ofNullable((BaseEmailAttributes) muleMessage.getAttributes());
    }
    return Optional.empty();
  }",Extracts the incoming  Message attributes of  BaseEmailAttributes type.,1,70
2386,"public Iterable<DrawMarkerElement> getMarker() {
        if (mMarker != null) {
            return mMarker.values();
        } else {
            return new ArrayList<DrawMarkerElement>();
        }
    }",Returns an iterator for all DrawMarkerElement elements.,1,63
2387,"public List<Occupant> getModerators() throws NoResponseException, XMPPErrorException, NotConnectedException {
        return getOccupants(MUCRole.moderator);
    }",Returns a list of Occupant with the room moderators.,1,37
2388,"public static UriComponentsBuilder fromMethodCall(Object invocationInfo) {
		Assert.isInstanceOf(MethodInvocationInfo.class, invocationInfo);
		MethodInvocationInfo info = (MethodInvocationInfo) invocationInfo;
		return fromMethod(info.getControllerMethod(), info.getArgumentValues());
	}","Create a  UriComponentsBuilder by invoking a ""mock"" controller method.",1,66
2389,"public List<CourseAttributes> getCoursesForInstructor(List<InstructorAttributes> instructorList)
            throws EntityDoesNotExistException {
        
        Assumption.assertNotNull(ERROR_NULL_PARAMETER, instructorList);
    
        return coursesLogic.getCoursesForInstructor(instructorList);
    
    }",Preconditions:,1,56
2390,"public ErrorHandler errorHandler()
        {
            return errorHandler;
        }",Get the error handler that will be called for errors reported back from the media driver.,1,20
2391,"public boolean isExternalTarget(final SplitNode splitNode, final BreakableNode target) {
        for (int i = sp; i-- > 0;) {
            final LexicalContextNode next = stack[i];
            if (next == splitNode) {
                return true;
            } else if (next == target) {
                return false;
            }
        }
        throw new AssertionError(target + "" was expected in lexical context "" + LexicalContext.this + "" but wasn't"");
    }",Checks whether a given target is a jump destination that lies outside a given split node,1,144
2392,"public int queryExecuteUpdate(Map<String, String> tenantId, String name, Map<?, ?> parameters, Map<String, ?> hints) {
        EntityManager em = getEmf().createEntityManager(tenantId);
        try {
            Query query = constructQuery(em, name, parameters, hints);
            transaction.beginTransaction(em);
            int result = query.executeUpdate();
            transaction.commitTransaction(em);
            return result;
        } finally {
            em.close();
        }
    }",Query execute update.,1,149
2393,"public static TimeZone getTimeZone() {
		LocaleContext localeContext = getLocaleContext();
		if (localeContext instanceof TimeZoneAwareLocaleContext) {
			TimeZone timeZone = ((TimeZoneAwareLocaleContext) localeContext).getTimeZone();
			if (timeZone != null) {
				return timeZone;
			}
		}
		return (defaultTimeZone != null ? defaultTimeZone : TimeZone.getDefault());
	}","Return the TimeZone associated with the current thread, if any, or the system default TimeZone otherwise.",1,111
2394,"public MPPointD getValuesByTouchPoint(float x, float y, AxisDependency axis) {
        MPPointD result = MPPointD.getInstance(0,0);
        getValuesByTouchPoint(x,y,axis,result);
        return result;
    }",Returns a recyclable MPPointD instance,1,62
2395,"public String getAttributeIndex() {

    return m_Insert.getSingleIndex();
  }",Get the index of the attribute used.,1,24
2396,"public static String uncapitalize(final String str) {
        int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return str;
        }

        final int firstCodepoint = str.codePointAt(0);
        final int newCodePoint = Character.toLowerCase(firstCodepoint);
        if (firstCodepoint == newCodePoint) {
            // already capitalized
            return str;
        }

        int newCodePoints[] = new int[strLen]; // cannot be longer than the char array
        int outOffset = 0;
        newCodePoints[outOffset++] = newCodePoint; // copy the first codepoint
        for (int inOffset = Character.charCount(firstCodepoint); inOffset < strLen; ) {
            final int codepoint = str.codePointAt(inOffset);
            newCodePoints[outOffset++] = codepoint; // copy the remaining ones
            inOffset += Character.charCount(codepoint);
         }
        return new String(newCodePoints, 0, outOffset);
    }","Uncapitalizes a String, changing the first character to lower case as per  Character#toLowerCase(int).",1,270
2397,"private WebMockView loadHTML(final String html) {
        mWorker.getHandler().post(new Runnable() {
            public void run() {
                if (mWebView == null) {
                    mWebView = getActivity().getWebView();
                    mWebView.setWebViewClient(new WebViewClient() {
                        @Override
                        public void onPageFinished(WebMockView view, String url) {
                            mWorker.getHandler().post(new Runnable() {
                                public void run() {
                                    synchronized (sTestLock) {
                                        sTestLock.notifyAll();
                                    }
                                }
                            });
                        }
                    });
                }
                mWebView.loadData(html, ""text/html"", null);
            }
        });
        synchronized (sTestLock) {
            try {
                sTestLock.wait();
            } catch (InterruptedException ie) {
                /* ignore */
            }
        }
        return mWebView;
    }",Loads HTML content in a  WebMockView.,1,251
2398,"private static List<FieldInfo> extractFieldInfoFromAtomicType(TypeInformation<?> atomicType, Expression[] exprs) {
		List<FieldInfo> fields = new ArrayList<>(exprs.length);
		boolean alreadyReferenced = false;
		for (int i = 0; i < exprs.length; i++) {
			Expression expr = exprs[i];
			if (expr instanceof UnresolvedReferenceExpression) {
				if (alreadyReferenced) {
					throw new ValidationException(""Too many fields referenced from an atomic type."");
				}

				alreadyReferenced = true;
				String name = ((UnresolvedReferenceExpression) expr).getName();
				fields.add(new FieldInfo(name, i, fromLegacyInfoToDataType(atomicType)));
			} else if (isRowTimeExpression(expr)) {
				UnresolvedReferenceExpression reference = getChildAsReference(expr);
				fields.add(createTimeAttributeField(reference, TimestampKind.ROWTIME, null));
			} else if (isProcTimeExpression(expr)) {
				UnresolvedReferenceExpression reference = getChildAsReference(expr);
				fields.add(createTimeAttributeField(reference, TimestampKind.PROCTIME, null));
			} else {
				throw new ValidationException(""Field reference expression expected."");
			}
		}
		return fields;
	}",Returns field types for a given  TypeInformation.,1,325
2399,"public static int[] newStack(int bytes, boolean immortal)
    throws VM_PragmaInline, VM_PragmaInterruptible {
    if (!immortal || !VM.runningVM)
      return new int[bytes >> 2];

    int logAlignment = 12;
    int alignment = 1 << logAlignment; // 4096
    VM_Array stackType = VM_Array.IntArray;
    Object [] stackTib = stackType.getTypeInformationBlock();
    int offset = VM_JavaHeader.computeArrayHeaderSize(stackType);
    int arraySize = stackType.getInstanceSize(bytes >> 2);
    int fullSize = arraySize + alignment;  // somewhat wasteful
    if (VM.VerifyAssertions) VM._assert(alignment > offset);
    AllocAdvice advice = VM_Interface.getPlan().getAllocAdvice(null, fullSize, null, null);
    VM_Address fullRegion = VM_Interface.getPlan().alloc(fullSize, false, Plan.IMMORTAL_SPACE, advice);
    VM_Address tmp = fullRegion.add(alignment);
    VM_Word mask = VM_Word.one().lsh(logAlignment).sub(VM_Word.one()).not();
    VM_Address region = tmp.toWord().and(mask).sub(VM_Word.fromIntSignExtend(offset)).toAddress();
    Object result = VM_ObjectModel.initializeArray(region, stackTib, bytes >> 2, arraySize);
    VM_Interface.getPlan().postAlloc(VM_Magic.objectAsAddress(result), stackTib, arraySize, false, Plan.IMMORTAL_SPACE);
    return (int []) result;
  }",Allocate a stack,1,406
2400,"public PresenceStatus queryContactStatus(final String contactIdentifier)
        throws IllegalArgumentException,
        IllegalStateException,
        OperationFailedException
    {
        final IrcConnection connection =
            this.parentProvider.getIrcStack().getConnection();
        if (connection == null)
        {
            throw new IllegalStateException(""not connected"");
        }
        try
        {
            return connection.getPresenceManager().query(contactIdentifier);
        }
        catch (IOException e)
        {
            throw new OperationFailedException(""Presence query failed."",
                OperationFailedException.NETWORK_FAILURE, e);
        }
        catch (InterruptedException e)
        {
            throw new OperationFailedException(""Presence query interrupted."",
                OperationFailedException.GENERAL_ERROR, e);
        }
    }",Query contact status using WHOIS query to IRC server.,1,184
2401,"public static Object getSimpleValue(final String iValue) {
		if (iValue == null)
			return null;

		if (iValue.length() > 1 && iValue.charAt(0) == '""' && iValue.charAt(iValue.length() - 1) == '""')
			// STRING
			return iValue.substring(1, iValue.length() - 1);

		if (iValue.charAt(0) == ORID.PREFIX)
			// RID
			return new ORecordId(iValue);

		boolean integer = true;
		char c;

		for (int index = 0; index < iValue.length(); ++index) {
			c = iValue.charAt(index);
			if (c < '0' || c > '9')
				if ((index == 0 && (c == '+' || c == '-')))
					continue;
				else if (c == DECIMAL_SEPARATOR)
					integer = false;
				else {
					if (index > 0) {
						final String v = iValue.substring(0, index);

						if (c == 'f')
							return new Float(v);
						else if (c == 'l')
							return new Long(v);
						else if (c == 'd')
							return new Double(v);
						else if (c == 'b')
							return new Byte(v);
						else if (c == 'a' || c == 't')
							return new Date(Long.parseLong(v));
						else if (c == 's')
							return new Short(v);
					}
					return iValue;
				}
		}

		if (integer)
			return new Integer(iValue);
		else
			return new Float(iValue);
	}",Parses a string returning the value with the closer type.,1,545
2402,"public Collection<I> getRecombined()
    {
        return recombined;
    }","Return the collection of recombined individuals, for recombined or mutated events.",1,23
2403,"public static CryptoCipher getCipherInstance(CipherTransformation transformation,
                                               Properties props) throws IOException {
    try {
      return CryptoCipherFactory.getInstance(transformation, props);
    } catch (GeneralSecurityException e) {
      throw new IOException(e);
    }
  }",Helper method to create a CryptoCipher instance and throws only IOException.,1,74
2404,"public Observable<T> call(Observable<T> source) {
                return source.takeUntil(
                    Observable.combineLatest(
                        sharedLifecycle.take(1).map(correspondingEvents),
                        sharedLifecycle.skip(1),
                        new Func2<R, R, Boolean>() {
                            @Override
                            public Boolean call(R bindUntilEvent, R lifecycleEvent) {
                                return lifecycleEvent == bindUntilEvent;
                            }
                        })
                        .onErrorReturn(RESUME_FUNCTION)
                        .takeFirst(SHOULD_COMPLETE)
                );
            }",Binds the given source to a lifecycle.,1,135
2405,"@Override
    public Coordinates3D parse(final String source) throws MathParseException {
        ParsePosition parsePosition = new ParsePosition(0);
        Coordinates3D result = parse(source, parsePosition);
        if (parsePosition.getIndex() == 0) {
            throw new MathParseException(source,
                                         parsePosition.getErrorIndex(),
                                         Coordinates3D.class);
        }
        return result;
    }",Parses a string to produce a  Coordinates3D object.,1,108
2406,"public BidiGraphConfig getGraphConfig()
	{
		return this.graphConfig;
	}",Returns the  BidiGraphConfig which this context belongs to.,1,22
2407,"public ICCU825SysInfo getSysInfo() throws CCU825ProtocolException 
	{
		CCU825Packet rp = exchange(new CCU825SysInfoReqPacket() );
		switch( rp.getPacketPayload()[0] )
		{
		case CCU825Packet.PKT_TYPE_SYSINFO:
			return new CCU825SysInfo(rp.getPacketPayload());
		case CCU825Packet.PKT_TYPE_SYSINFO_EX:
			return new CCU825SysInfoEx(rp.getPacketPayload());
		}
		
		throw new CCU825PacketFormatException(String.format(""sysInfo payload type is %X"", rp.getPacketPayload()[0]));
	}",Does a request to get SysInfo.,1,134
2408,"public ChatRoom findRoom(String roomName)
        throws OperationFailedException, OperationNotSupportedException
    {
        //make sure we are connected and multichat is supported.
        assertSupportedAndConnected();

        //first check whether we have already initialized the room.
        ChatRoom room = (ChatRoom)chatRoomCache.get(roomName);

        //if yes - we return it
        if(room != null)
        {
            return room;
        }
        //if not, we create it.
        else
        {
            MultiUserChat muc = new MultiUserChat(getXmppConnection(), roomName);

            try
            {
                muc.create(getXmppConnection().getUser());
            }
            catch (XMPPException ex)
            {
                logger.error(""Failed to create chat room."", ex);
                throw new OperationFailedException(""Failed to create chat room""
                                                   , ex.getXMPPError().getCode()
                                                   , ex.getCause());
            }
            return createLocalChatRoomInstance(muc);
        }
    }",Returns a reference to a chatRoom named roomName.,1,213
2410,"public static List<Window> getStageList() {
        return windows;
    }",Returns the complete list of windows,1,24
2411,"public static Executor forExecutor(int count, Executor executor) {
        if (count < 0) {
            throw new IllegalArgumentException(""The loop count must not be less than zero, it was "" + count);
        }
        if (executor == null) {
            throw new IllegalArgumentException(""The executor must not be null"");
        }
        return new ForExecutor(count, executor);
    }",Creates a Executor that will call the executor count times.,1,100
2412,"@SafeVarargs
	public static Sequence seq(RulePart... parsers) {
		return new Sequence(parsers);
	}",Shortcut for  new Sequence(parsers)).,1,35
2413,"static ExchangeStrategies withDefaults() {
		return builder().build();
	}",Return a new  ExchangeStrategies with default initialization.,1,25
2414,"public static List<String> findAll(CharSequence self, Pattern pattern) {
        Matcher matcher = pattern.matcher(self.toString());
        boolean hasGroup = hasGroup(matcher);
        List<String> list = new ArrayList<String>();
        for (Iterator iter = iterator(matcher); iter.hasNext();) {
            if (hasGroup) {
                list.add((String) ((List) iter.next()).get(0));
            } else {
                list.add((String) iter.next());
            }
        }
        return new ArrayList<String>(list);
    }",Returns a (possibly empty) list of all occurrences of a regular expression (in Pattern format) found within a CharSequence.,1,185
2415,"public Closure<? super E>[] getClosures() {
        return FunctorUtils.copy(iClosures);
    }",Gets the closures.,1,33
2416,"public static String toString(int value) {
		byte[] bytes = new byte[4];
		int byteIndex = bytes.length - 1;
		while (value != 0) {
			bytes[byteIndex] = (byte) value;
			value = value >> 8;
			--byteIndex;
		}
		return new String(bytes);
	}",Converts an integer into a string.,1,113
2417,"public SearchConfig getSearchConfig() {
        return sc;
    }",Returns the workspace search index configuration.,1,19
2418,"public ColumnType getColumnType(long columnIndex) {
        return ColumnType.fromNativeValue(nativeGetColumnType(nativePointer, columnIndex));
    }",Get the type of a column identified by the columnIndex.,1,33
2419,"public List<FrameInstance> getStack() {
        return stack;
    }","Gets the stack frames from the currently halted  com.oracle.truffle.api.vm.PolyglotEngine execution, not counting the Node and Frame where halted.",1,22
2420,"public int getTiedJobCount() {
        if (tiedJobsCount != -1) return tiedJobsCount;

        // denormalize for performance
        // we don't need to respect security as much when returning a simple count
        SecurityContext context = ACL.impersonate(ACL.SYSTEM);
        try {
            int result = 0;
            // top level gives the map without checking security of items in the map
            // therefore best performance
            for (TopLevelItem topLevelItem : Jenkins.getInstance().getItemMap().values()) {
                if (topLevelItem instanceof AbstractProject) {
                    final AbstractProject project = (AbstractProject) topLevelItem;
                    if (matches(project.getAssignedLabelString())) {
                        result++;
                    }
                }
                if (topLevelItem instanceof ItemGroup) {
                    Stack<ItemGroup> q = new Stack<ItemGroup>();
                    q.push((ItemGroup) topLevelItem);

                    while (!q.isEmpty()) {
                        ItemGroup<?> parent = q.pop();
                        // we run the risk of permissions checks in ItemGroup#getItems()
                        // not much we can do here though
                        for (Item i : parent.getItems()) {
                            if (i instanceof AbstractProject) {
                                final AbstractProject project = (AbstractProject) i;
                                if (matches(project.getAssignedLabelString())) {
                                    result++;
                                }
                            }
                            if (i instanceof ItemGroup) {
                                q.push((ItemGroup) i);
                            }
                        }
                    }
                }
            }
            return tiedJobsCount = result;
        } finally {
            SecurityContextHolder.setContext(context);
        }
    }",Returns an approximate count of projects that are tied on this node.,1,390
2421,"public static Long createLong(String str) {
        if (str == null) {
            return null;
        }
        return Long.decode(str);
    }",Convert a String to a Long; since 3.0.2 it handles hex and octal notations. Returns null if the string is null.,1,52
2422,"public CompareToBuilder append(Object lhs, Object rhs, Comparator comparator) {
        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null) {
            comparison = -1;
            return this;
        }
        if (rhs == null) {
            comparison = +1;
            return this;
        }
        Class lhsClass = lhs.getClass();
        if (lhsClass.isArray()) {
            // 'Switch' on type of array, to dispatch to the correct handler
            // This handles multi dimensional arrays
            // this could throw a ClassCastException is rhs is not the correct array type
            if (lhs instanceof long[]) {
                append((long[]) lhs, (long[]) rhs);
            } else if (lhs instanceof int[]) {
                append((int[]) lhs, (int[]) rhs);
            } else if (lhs instanceof short[]) {
                append((short[]) lhs, (short[]) rhs);
            } else if (lhs instanceof char[]) {
                append((char[]) lhs, (char[]) rhs);
            } else if (lhs instanceof byte[]) {
                append((byte[]) lhs, (byte[]) rhs);
            } else if (lhs instanceof double[]) {
                append((double[]) lhs, (double[]) rhs);
            } else if (lhs instanceof float[]) {
                append((float[]) lhs, (float[]) rhs);
            } else if (lhs instanceof boolean[]) {
                append((boolean[]) lhs, (boolean[]) rhs);
            } else {
                // Not an array of primitives
                // this could throw a ClassCastException is rhs is not an array
                append((Object[]) lhs, (Object[]) rhs, comparator);
            }
        } else {
            // the simple case, not an array, just test the element
            if (comparator == null) {
                comparison = ((Comparable) lhs).compareTo(rhs);
            } else {
                comparison = comparator.compare(lhs, rhs);
            }
        }
        return this;
    }","Comparison of two Object references.  Check if Objects are same using == Check if either is null, a null object is less than a non-null Check the object contents  If the first parameter to be compared is an array, the array methods will be used.",1,615
2423,"public String getUsername() {
		return this.username;
	}",Return the configured username or  null if none was configured.,1,21
2424,"public KBComment remove(long kbCommentId)
		throws NoSuchCommentException, SystemException {
		return remove(Long.valueOf(kbCommentId));
	}",Removes the k b comment with the primary key from the database.,1,38
2425,"public List<Item> getItems() {
        synchronized (items) {
            return Collections.unmodifiableList(new ArrayList<>(items));
        }
    }",Returns a List of item children that holds information about offline messages to view or delete.,1,46
2426,"public static int indexOf(int[] array, int valueToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        for (int i = startIndex; i < array.length; i++) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex is treated as zero.,1,141
2427,"private static File getFile(TableRow bitstream)
        throws IOException
    {
        // Check that bitstream is not null
        if (bitstream == null)
        {
            return null;
        }
        
        // Get the store to use
        int storeNumber = bitstream.getIntColumn(""store_number"");
        
        // Default to zero ('assetstore.dir') for backwards compatibility
        if (storeNumber == -1)
        {
            storeNumber = 0;
        }
        
        File store = assetStores[storeNumber];
        
        // Turn the internal ID into a file path relative to the asset store
        // directory
        String id = bitstream.getStringColumn(""internal_id"");
        BigInteger bigint = new BigInteger(id);

        StringBuffer result = new StringBuffer().append(store.getCanonicalPath());

        // Split the id into groups
        for (int i = 0; i < directoryLevels; i++)
        {
            int digits = i * digitsPerLevel;

            result.append(File.separator).append(id.substring(digits, digits + digitsPerLevel));
        }

        String theName = result.append(File.separator).append(id).toString();

        if (log.isDebugEnabled())
            log.debug(""Filename for "" + id + "" is "" + theName);

        return new File(theName);
    }",Return the file corresponding to a bitstream.,1,338
2428,"String getPageSegmentNameFor(String uri) {
        return (String)pageSegmentMap.get(uri);
    }",Returns the page segment name for a given URI if it actually represents a page segment.,1,28
2429,"public static OperationSignature buildFor(ASTConstructorDeclaration node) {
        return new OperationSignature(Visibility.get(node), Role.CONSTRUCTOR, node.isAbstract());
    }",Builds an operation signature from a constructor declaration.,1,46
2430,"public Fraction add(Fraction fraction) {
        if (fraction == null) {
            throw new IllegalArgumentException(""The fraction must not be null"");
        }
        if (numerator == 0) {
            return fraction;
        }
        if (fraction.numerator == 0) {
            return this;
        }     
        // Compute lcd explicitly to limit overflow
        int gcd = greatestCommonDivisor(Math.abs(fraction.denominator), Math.abs(denominator));
        int thisResidue = denominator/gcd;
        int thatResidue = fraction.denominator/gcd;
        double denominatorValue = Math.abs((double) gcd * thisResidue * thatResidue);
        double numeratorValue = (double) numerator * thatResidue + fraction.numerator * thisResidue;
        if (Math.abs(numeratorValue) > Integer.MAX_VALUE || 
            Math.abs(denominatorValue) > Integer.MAX_VALUE) {
                throw new ArithmeticException(""Integer overflow"");
        }
        return Fraction.getReducedFraction((int) numeratorValue, (int) denominatorValue);
    }","Adds the value of this fraction to another, returning the result in reduced form.",1,283
2431,"public NodeClassIterable inputs() {
        return nodeClass.getInputEdges().getIterable(this);
    }",Returns an  NodeClassIterable iterable which can be used to traverse all non-null input edges of this node.,1,28
2432,"public Result read(Patient patient, LogicCriteria criteria) throws LogicException {
		LogicService logicService = Context.getLogicService();
		LogicDataSource dataSource = logicService.getLogicDataSource(""obs"");
		return read(patient, dataSource, criteria);
	}",Auto generated method comment,1,71
2433,"public static RedisCacheConfiguration defaultCacheConfig() {

		DefaultFormattingConversionService conversionService = new DefaultFormattingConversionService();

		registerDefaultConverters(conversionService);

		return new RedisCacheConfiguration(Duration.ZERO, true, true, null,
				SerializationPair.fromSerializer(new StringRedisSerializer()),
				SerializationPair.fromSerializer(new JdkSerializationRedisSerializer()), conversionService);
	}",Default  RedisCacheConfiguration using the following:  key expiration eternal cache null values yes prefix cache keys yes default prefix [the actual cache name] key serializer StringRedisSerializer.class value serializer JdkSerializationRedisSerializer.class conversion service  DefaultFormattingConversionService with  #registerDefaultConverters(ConverterRegistry) default cache key converters,1,90
2434,"public static boolean isWhitespace(int c){
        return c == ' ' || c == '\t' || c == '\n' || c == '\f' || c == '\r';
    }","Tests if a code point is ""whitespace"" as defined in the HTML spec.",1,68
2435,"public Delegator getDelegator() {
        return this.delegator;
    }",Gets the Delegator associated with this dispatcher,1,21
2436,"public ShardingXAConnection wrapPhysicalConnection(final Connection connection, final DatabaseType databaseType) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException,
        ClassNotFoundException, SQLException {
        Class<?> clazz = xaDataSource.getClass();
        switch (databaseType) {
            case MySQL:
                Connection mysqlPhysicalConnection = (Connection) connection.unwrap(Class.forName(""com.mysql.jdbc.Connection""));
                XAConnection xaConnection = (XAConnection) ReflectiveUtil.findMethod(xaDataSource, ""wrapConnection"", Connection.class).invoke(xaDataSource, mysqlPhysicalConnection);
                return new ShardingXAConnection(datasourceName, xaConnection);
            default:
                throw new UnsupportedOperationException(String.format(""Cannot support database type: `%s`"", databaseType));
        }
    }",Wrap physical connection to sharding XA connection.,1,179
2437,"TerracottaStore getUnderlyingStore() {
        return nonstopActiveDelegateHolder.getUnderlyingTerracottaStore();
    }",Package protected method - used in tests,1,21
2438,"private int getPreferredClearPort()
    {
        
        int preferredPort =  SipActivator.getConfigurationService().getInt(
            PREFERRED_CLEAR_PORT_PROPERTY_NAME, -1);

        if(preferredPort <= 1)
        {
            // check for default value
            preferredPort =  SipActivator.getResources().getSettingsInt(
                PREFERRED_CLEAR_PORT_PROPERTY_NAME);
        }

        if(preferredPort <= 1)
            return ListeningPoint.PORT_5060;
        else
            return preferredPort;
    }",Fetches the preferred UDP and TCP port for clear communications in the user preferences or search is default value set in settings or fallback on a default value.,1,110
2439,"public static IPath getFilterPath(String filePath, IProject project) {
		IPath path = new Path(filePath);
		if(path.isAbsolute()) {
			return path;
		}
		IPath wspLocation = ResourcesPlugin.getWorkspace().getRoot().getLocation();
		if(project == null) {
			IPath newPath = wspLocation.append(path);
			if(newPath.toFile().exists()){
				return newPath;
			}
		} else {
			// try first project relative location
			IPath newPath = project.getLocation().append(path);
			if(newPath.toFile().exists()){
				return newPath;
			}
			// try to resolve relative to workspace (if we use workspace properties for project)
			newPath = wspLocation.append(path);
			if(newPath.toFile().exists()){
				return newPath;
			}
		}
		// something which we have no idea what it can be (or missing/wrong file path)
		return path;
	}",Checks the given path and convert it to absolute path if it is specified relative to the given project or workspace,1,238
2440,"Set<SourceName> sourcesWithField(final ColumnName columnName) {

    final Optional<String> maybeSourceName = SchemaUtil.getFieldNameAlias(columnName.name());
    if (!maybeSourceName.isPresent()) {
      return sourceSchemas.entrySet().stream()
          .filter(e -> e.getValue().findColumn(columnName).isPresent())
          .map(Entry::getKey)
          .collect(Collectors.toSet());
    }

    final SourceName sourceName = SourceName.of(maybeSourceName.get());
    final String baseColumnName = SchemaUtil.getFieldNameWithNoAlias(columnName.name());

    final LogicalSchema sourceSchema = sourceSchemas.get(sourceName);
    if (sourceSchema == null) {
      return ImmutableSet.of();
    }

    return sourceSchema.findColumn(baseColumnName).isPresent()
        ? ImmutableSet.of(sourceName)
        : ImmutableSet.of();
  }",Find the name of any sources containing the supplied  columnName.,1,244
2441,"default Traversable<T> drop(int n) {
        Traversable<T> traversable = this;
        for (int i = n; i > 0 && !traversable.isEmpty(); i--) {
            traversable = traversable.tail();
        }
        return traversable;
    }","Drops the first n elements of this Traversable or the all elements, if this length &lt; n.",1,90
2442,"protected int getNextIndexed(int axisRoot, int nextPotential,
                                 int expandedTypeID)
    {

      int nsIndex = m_expandedNameTable.getNamespaceID(expandedTypeID);
      int lnIndex = m_expandedNameTable.getLocalNameID(expandedTypeID);

      for (; ; ) 
      {
        int nextID = findElementFromIndex(nsIndex, lnIndex, nextPotential);

        if (NOTPROCESSED != nextID)
        {
          int parentID = m_parent.elementAt(nextID);
          
          // Is it a child?
          if(parentID == axisRoot)
            return nextID;
          
          // If the parent occured before the subtree root, then 
          // we know it is past the child axis.
          if(parentID < axisRoot)
              return NULL;
          
          // Otherwise, it could be a descendant below the subtree root 
          // children, or it could be after the subtree root.  So we have 
          // to climb up until the parent is less than the subtree root, in 
          // which case we return NULL, or until it is equal to the subtree 
          // root, in which case we continue to look.
          do
          {
            parentID = m_parent.elementAt(parentID);
            if(parentID < axisRoot)
              return NULL;
          }
            while(parentID > axisRoot);
          
          // System.out.println(""Found node via index: ""+first);
          nextPotential = nextID+1;
          continue;
        }

        nextNode();
        
        if(!(m_nextsib.elementAt(axisRoot) == NOTPROCESSED))
          break;
      }

      return DTM.NULL;
    }",Get the next indexed node that matches the expanded type ID.,1,302
2444,"public Iterable<NumberBooleanStyleElement> getBooleanStyles() {
        return mStylesBaseImpl.getBooleanStyles();
    }",Returns an iterator for all NumberBooleanStyleElement elements.,1,26
2445,"@SafeVarargs
	public static Parser.Quantifier _0_n(Supplier<Parser>... parsers) {
		return quantifier(parsers, Parser.Quantifier.Bounds.ZERO_TO_N);
	}","Shortcut for  new Parser.Quantifier(new Parser.Sequence(parsers), Parser.Quantifier.Bounds.ZERO_TO_N).",1,47
2446,"public static MethodDescription of(MethodDescription overridingMethod, MethodDescription overriddenMethod) {
            List<MethodDescription> methodChain;
            if (overridingMethod instanceof OverriddenClassMethod) {
                OverriddenClassMethod overriddenClassMethod = (OverriddenClassMethod) overridingMethod;
                methodChain = new ArrayList<MethodDescription>(overriddenClassMethod.methodChain.size() + 1);
                methodChain.addAll(overriddenClassMethod.methodChain);
            } else {
                methodChain = new ArrayList<MethodDescription>(2);
                methodChain.add(overridingMethod);
            }
            methodChain.add(overriddenMethod);
            return new OverriddenClassMethod(methodChain);
        }",Creates a new method description of an overriding method to an overridden method.,1,151
2447,"public boolean cleanup(long sessionId, long blockId) throws IOException {
    BlockInfo blockInfo;
    mLock.lock();
    try {
      blockInfo = mBlocks.get(new Key(sessionId, blockId));
      if (blockInfo == null) {
        return false;
      }
    } finally {
      mLock.unlock();
    }
    return blockInfo.closeReaderOrWriter();
  }",Cleans up the block reader or writer and checks whether it is necessary to commit the block to Local block store.,1,116
2448,"public static NSObject parse(Document doc) throws PropertyListFormatException, IOException, ParseException {
        DocumentType docType = doc.getDoctype();
        if (docType == null) {
            if (!doc.getDocumentElement().getNodeName().equals(""plist"")) {
                throw new UnsupportedOperationException(""The given XML document is not a property list."");
            }
        } else if (!docType.getName().equals(""plist"")) {
            throw new UnsupportedOperationException(""The given XML document is not a property list."");
        }

        Node rootNode;

        if (doc.getDocumentElement().getNodeName().equals(""plist"")) {
            //Root element wrapped in plist tag
            List<Node> rootNodes = filterElementNodes(doc.getDocumentElement().getChildNodes());
            if (rootNodes.isEmpty()) {
                throw new PropertyListFormatException(""The given XML property list has no root element!"");
            } else if (rootNodes.size() == 1) {
                rootNode = rootNodes.get(0);
            } else {
                throw new PropertyListFormatException(""The given XML property list has more than one root element!"");
            }
        } else {
            //Root NSObject not wrapped in plist-tag
            rootNode = doc.getDocumentElement();
        }

        return parseObject(rootNode);
    }",Parses a property list from an XML document.,1,316
2449,"public Vector<Result> getActiveResults() throws RpcClientFailedException {
		final String request =
			""<get_results>\n"" +
			""<active_only>1</active_only>\n"" +
			""</get_results>\n"";
		try {
			sendRequest(request);
			Vector<Result> results = ResultsParser.parse(receiveReply());
			return results;
		}
		catch (IOException e) {
			throw new ConnectionFailedException(""Connection failed in getActiveResults()"", e);
		}
	}",Performs   RPC towards BOINC client (only active results),1,126
2450,"public boolean isDatabaseHierarchyXmlAvailable()
  {
    try
    {
    	// get the xml filename
    	String dbXml = getDatabaseHierarchyXml();
    	if( dbXml == null )
    	{
    		return false;
    	}
    	
    	// not null, try to open it for reading
    	java.io.FileInputStream fis = new java.io.FileInputStream( dbXml );
    }
    catch( java.io.FileNotFoundException fnfe )
    {
    	// file not found
    	return false;
    }
    catch (OsidConfigurationException ignore) { }

    // filename is not null and the file is readable
    return true;
  }",Is the database hierarchy XML file provided and readable,1,145
2451,"static SchemaVersion extractSchemaVersion(String migrationName) {
        String rawVersion;

		// Handle the description
		String description = null;
		int descriptionPos = migrationName.indexOf(""__"");
		if (descriptionPos < 0) {
            rawVersion = migrationName;
        } else {
			description = migrationName.substring(descriptionPos + 2).replaceAll(""_"", "" "");
			rawVersion = migrationName.substring(0, descriptionPos);
		}

		return new SchemaVersion(rawVersion.replace(""_"", "".""), description);
	}",Extracts the schema version from a migration name formatted as 1_2__Description.,1,156
2452,"public String getString(String key)
    {
        return installData.getMessages().get(key);
    }",Helper to return a language resource string.,1,32
2453,"public ApReq getAuthHeader()
    {
        return authHeader;
    }",Returns the  ApReq.,1,20
2454,"public static Flux<Long> interval(Duration delay, Duration period) {
		return interval(delay, period, Schedulers.parallel());
	}","Create a  Flux that emits long values starting with 0 and incrementing at specified time intervals, after an initial delay, on the global timer.",1,45
2455,"public RequestProcessingContext apply(final RequestProcessingContext context) {
        final ContainerRequest containerRequest = context.request();
        containerRequestRefProvider.get().set(containerRequest);

        final RequestScopedInitializer requestScopedInitializer = containerRequest.getRequestScopedInitializer();
        if (requestScopedInitializer != null) {
            requestScopedInitializer.initialize(locator);
        }

        return context;
    }",Initialize the request references using the incoming request processing context.,1,97
2456,"public static RedissonClient create() {
        Config config = new Config();
        config.useSingleServer().setAddress(""127.0.0.1:6379"");
//        config.useMasterSlaveConnection().setMasterAddress(""127.0.0.1:6379"").addSlaveAddress(""127.0.0.1:6389"").addSlaveAddress(""127.0.0.1:6399"");
//        config.useSentinelConnection().setMasterName(""mymaster"").addSentinelAddress(""127.0.0.1:26389"", ""127.0.0.1:26379"");
//        config.useClusterServers().addNodeAddress(""127.0.0.1:7000"");
        return create(config);
    }",Create sync/async Redisson instance with default config,1,59
2457,"public static OfflineMessageStore getInstance() {
        return BasicServer.getInstance().getOfflineMessageStore();
    }",Returns the instance of OfflineMessageStore being used by the XMPPServer.,1,29
2458,"public Class<T> getAnnotationType() {
                    return annotationType;
                }",Creates a factory for an offset mapping that loads the provided value.,1,22
2459,"public GlobalDescr globalStatement(PackageDescrBuilder pkg) throws RecognitionException {
        GlobalDescrBuilder global = null;
        try {
            global = helper.start(pkg,
                    GlobalDescrBuilder.class,
                    null);

            // 'global'
            match(input,
                    DRL6Lexer.ID,
                    DroolsSoftKeywords.GLOBAL,
                    null,
                    DroolsEditorType.KEYWORD);
            if (state.failed)
                return null;

            while (input.LA(1) == DRL6Lexer.AT) {
                // annotation*
                annotation(global);
                if (state.failed)
                    return null;
            }

            // type
            String type = type();
            if (state.backtracking == 0)
                global.type(type);
            if (state.failed)
                return null;

            // identifier
            Token id = match(input,
                    DRL6Lexer.ID,
                    null,
                    null,
                    DroolsEditorType.IDENTIFIER_TYPE);
            if (state.failed)
                return null;
            if (state.backtracking == 0) {
                global.identifier(id.getText());
                helper.setParaphrasesValue(DroolsParaphraseTypes.GLOBAL,
                        id.getText());
            }

        } catch (RecognitionException re) {
            reportError(re);
        } finally {
            helper.end(GlobalDescrBuilder.class,
                    global);
        }
        return (global != null) ? global.getDescr() : null;
    }",globalStatement := GLOBAL annotation type ID,1,384
2460,"public List<Item> getItems() {
        synchronized (items) {
            return Collections.unmodifiableList(new ArrayList<Item>(items));
        }
    }",Returns a List of item childs that holds information about offline messages to view or delete.,1,47
2461,"public Document getMappedObject(Bson query, MongoPersistentEntity<?> entity) {

		if (isNestedKeyword(query)) {
			return getMappedKeyword(new Keyword(query), entity);
		}

		Document result = new Document();

		for (String key : BsonUtils.asMap(query).keySet()) {

			// TODO: remove one once QueryMapper can work with Query instances directly
			if (Query.isRestrictedTypeKey(key)) {

				@SuppressWarnings(""unchecked"")
				Set<Class<?>> restrictedTypes = (Set<Class<?>>) BsonUtils.get(query, key);
				this.converter.getTypeMapper().writeTypeRestrictions(result, restrictedTypes);

				continue;
			}

			if (isKeyword(key)) {
				result.putAll(getMappedKeyword(new Keyword(query, key), entity));
				continue;
			}

			try {

				Field field = createPropertyField(entity, key, mappingContext);
				Entry<String, Object> entry = getMappedObjectForField(field, BsonUtils.get(query, key));

				result.put(entry.getKey(), entry.getValue());
			} catch (InvalidPersistentPropertyPath invalidPathException) {

				// in case the object has not already been mapped
				if (!(BsonUtils.get(query, key) instanceof Document)) {
					throw invalidPathException;
				}
				result.put(key, BsonUtils.get(query, key));
			}
		}

		return result;
	}",Replaces the property keys used in the given  Document with the appropriate keys by using the  PersistentEntity metadata.,1,387
2462,"DomNode create( final HtmlPage page, final Node xmlElement ) {
        try {
            return (DomNode)constructor_.newInstance( new Object[]{page, xmlElement});
        }
        catch( final IllegalAccessException e) {
            throw new ObjectInstantiationException(
                ""Exception when calling constructor [""+constructor_+""]"", e);
        }
        catch( final InstantiationException e ) {
            throw new ObjectInstantiationException(
                ""Exception when calling constructor [""+constructor_+""]"", e);
        }
        catch( final InvocationTargetException e ) {
            throw new ObjectInstantiationException(
                ""Exception when calling constructor [""+constructor_+""]"", e.getTargetException());
        }
    }","Create a DomNode for the specified xmlElement, contained in the specified page.",1,184
2463,"public AngularObject add(String name, Object o, String noteId, String paragraphId, boolean emit) {
    AngularObject ao = createNewAngularObject(name, o, noteId, paragraphId);

    synchronized (registry) {
      Map<String, AngularObject> noteLocalRegistry = getRegistryForKey(noteId, paragraphId);
      noteLocalRegistry.put(name, ao);
      if (listener != null && emit) {
        listener.onAdd(interpreterId, ao);
      }
    }

    return ao;
  }",Add object into registry Paragraph scope when noteId and paragraphId both not null Notebook scope when paragraphId is null Global scope when noteId and paragraphId both null,1,146
2464,"public String getMessage(String name) {
        if (name == null) {
            throw new IllegalArgumentException(""Null name parameter"");
        }

        String message = null;

        if (getParentMessages() != null && getParentMessages().containsKey(name))
        {
            message = (String) getParentMessages().get(name);
        }

        if (message == null && getMessages().containsKey(name)) {
            message = (String) getMessages().get(name);
        }

        return message;
    }","Return the localized message for the given key, or null if not found.",1,165
2465,"default OptionalDouble getDouble(String key){

        Optional<Double> val = get(key, Double.class);
        if(val.isPresent()){
            return OptionalDouble.empty().of(val.get());
        }
        return OptionalDouble.empty();
    }",Get the property keys as  Double.,1,80
2466,"public static final <S, R> R visitChildren(Iterable<?> container, final IVisitor<S, R> visitor)
	{
		return visitChildren(container, visitor, IVisitFilter.ANY);
	}",Visits children of the specified  Iterable pre-order (parent first).,1,61
2467,"public Collection<I> getPopulation()
    {
        return population;
    }",Return the population of individuals.,1,23
2468,"protected XmlRpcElement parseValueElement(Element valueElement) {
    NodeList children = valueElement.getChildNodes();
    int childCount = children.getLength();

    for (int i = 0; i < childCount; i++) {
      Node child = children.item(i);

      if (child instanceof Element) {
        String childName = child.getNodeName();
        Element xmlElement = (Element) child;

        if (XmlRpcEntity.ARRAY.equals(childName)) {
          return this.parseArrayElement(xmlElement);

        } else if (XmlRpcEntity.BASE_64.equals(childName)) {
          String source = DomUtils.getTextValue(xmlElement);
          return new XmlRpcBase64(source);

        } else if (XmlRpcEntity.BOOLEAN.equals(childName)) {
          String source = DomUtils.getTextValue(xmlElement);
          return new XmlRpcBoolean(source);

        } else if (XmlRpcEntity.DATE_TIME.equals(childName)) {
          String source = DomUtils.getTextValue(xmlElement);
          return new XmlRpcDateTime(source);

        } else if (XmlRpcEntity.DOUBLE.equals(childName)) {
          String source = DomUtils.getTextValue(xmlElement);
          return new XmlRpcDouble(source);

        } else if (XmlRpcEntity.I4.equals(childName)
            || XmlRpcEntity.INT.equals(childName)) {
          String source = DomUtils.getTextValue(xmlElement);
          return new XmlRpcInteger(source);

        } else if (XmlRpcEntity.STRING.equals(childName)
            || XmlRpcEntity.INT.equals(childName)) {
          String source = DomUtils.getTextValue(xmlElement);
          return new XmlRpcString(source);

        } else if (XmlRpcEntity.STRUCT.equals(childName)) {
          return this.parseStructElement(xmlElement);

        } else {
          throw new XmlRpcParsingException(""Unexpected element '"" + childName
              + ""'"");
        }

      } else if (child instanceof Text) {
        String source = DomUtils.getTextValue(valueElement);
        return new XmlRpcString(source);
      }
    }

    // we should not reach this point.
    return null;
  }","Parses the given XML element that contains the value of a parameter, a struct member or an element of an array.",1,592
2469,"public static XADataSource build(final DatabaseType databaseType, final DataSource dataSource) {
        try {
            DataSourceParameter dataSourceParameter = DataSourceSwapperRegistry.getSwapper(dataSource.getClass()).swap(dataSource);
            XADataSource xaDataSource = newXADataSourceInstance(databaseType);
            Properties xaProperties = XAPropertiesFactory.createXAProperties(databaseType).build(dataSourceParameter);
            PropertyUtils.setProperties(xaDataSource, xaProperties);
            return xaDataSource;
        } catch (final PropertyException ex) {
            log.error(""Failed to create ShardingXADataSource"");
            throw new ShardingException(ex);
        }
    }",Create XA data source through general data source.,1,147
2470,"public static Executor doWhileExecutor(Executor executor, Predicate predicate) {
        if (executor == null) {
            throw new IllegalArgumentException(""The executor must not be null"");
        }
        if (predicate == null) {
            throw new IllegalArgumentException(""The predicate must not be null"");
        }
        return new WhileExecutor(predicate, executor, true);
    }",Creates a Executor that will call the executor once and then repeatedly until the predicate returns false.,1,100
2471,"public static String getFC_NFKC_Closure(int c) {
        // Compute the FC_NFKC_Closure on the fly:
        // We have the API for complete coverage of Unicode properties, although
        // this value by itself is not useful via API.
        // (What could be useful is a custom normalization table that combines
        // case folding and NFKC.)
        // For the derivation, see Unicode's DerivedNormalizationProps.txt.
        Normalizer2Impl nfkcImpl=Norm2AllModes.getNFKCInstanceNoIOException().impl;
        UCaseProps csp;
        try {
            csp=UCaseProps.getSingleton();
        } catch(IOException e) {
            throw new RuntimeException(e);
        }
        // first: b = NFKC(Fold(a))
        StringBuffer folded=new StringBuffer();
        String kc1;
        int folded1Length=csp.toFullFolding(c, folded, 0);
        if(folded1Length<0) {
            kc1=nfkcImpl.getDecomposition(c);
            if(kc1==null) {
                return """";  // c does not change at all under CaseFolding+NFKC
            }
        } else {
            if(folded1Length>UCaseProps.MAX_STRING_LENGTH) {
                folded.appendCodePoint(folded1Length);
            }
            kc1=NFKC.normalizer2.normalize(folded);
        }
        // second: c = NFKC(Fold(b))
        String kc2=NFKC.normalizer2.normalize(UCharacter.foldCase(kc1, 0));
        // if (c != b) add the mapping from a to c
        if(kc1.equals(kc2)) {
            return """";
        } else {
            return kc2;
        }
    }",Gets the FC_NFKC closure value.,1,293
2472,"public CrosstabCellHandle getHeader( )
	{
		return getHeader( 0 );
	}",Gets the first header cell for this measure.,1,26
2473,"public static List<DiscoverySelector> selectClasspathRoots(Set<File> directories) {
		Preconditions.notNull(directories, ""directories must not be null"");

		// @formatter:off
		return directories.stream()
				.filter(File::isDirectory)
				.map(ClasspathSelector::new)
				.collect(toList());
		// @formatter:on
	}",Create a list of  ClasspathSelectors for the supplied  directories.,1,84
2474,"public Variable newVariable(CiKind kind) {
        CiKind stackKind = kind.stackKind();
        switch (stackKind) {
            case Jsr:
            case Int:
            case Long:
            case Object:
                return new Variable(stackKind, lir.nextVariable(), CiRegister.RegisterFlag.CPU);
            case Float:
            case Double:
                return new Variable(stackKind, lir.nextVariable(), CiRegister.RegisterFlag.FPU);
            default:
                throw Util.shouldNotReachHere();
        }
    }",Creates a new plain Variable variable.,1,142
2475,"@Override
	protected RequestMappingInfo getMatchingMapping(RequestMappingInfo info, HttpServletRequest request) {
		return info.getMatchingCondition(request);
	}",Check if the given RequestMappingInfo matches the current request and return a (potentially new) instance with conditions that match the current request -- for example with a subset of URL patterns.,1,35
2476,"public String channel()
    {
        final int length = buffer.getInt(offset + CHANNEL_OFFSET);
        lengthOfChannel = SIZE_OF_INT + length;

        return buffer.getStringAscii(offset + CHANNEL_OFFSET, length);
    }",Get the channel field as ASCII,1,66
2477,"public T executeForResult(final ManagementRequestConnectionStrategy connectionStrategy) throws Exception {
        return execute(connectionStrategy).get();
    }",Execute the request and wait for the result.,1,35
2478,"public I18nMessage invalidUrl(String url) {
    return createMessage(bundlePath, 16, url);
  }",Generates a  I18nMessage for a  url that is not valid,1,31
2479,"public static HighAvailabilityMode getRecoveryMode(Configuration config) {
		return HighAvailabilityMode.fromConfig(config);
	}","Gets the recovery mode as configured, based on the  ConfigConstants#HIGH_AVAILABILITY config key.",1,29
2480,"public static StatsValues createStatsValues(StatsField statsField) {

    final SchemaField sf = statsField.getSchemaField();

    if (null == sf) {
      // function stats
      return new NumericStatsValues(statsField);
    } 

    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.
    
    if (TrieDateField.class.isInstance(fieldType)) {
      return new DateStatsValues(statsField);
    } else if (TrieField.class.isInstance(fieldType)) {
      return new NumericStatsValues(statsField);
    } else if (StrField.class.isInstance(fieldType)) {
      return new StringStatsValues(statsField);
    } else if (sf.getType().getClass().equals(EnumField.class)) {
      return new EnumStatsValues(statsField);
    } else {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ""Field type "" + fieldType + "" is not currently supported"");
    }
  }",Creates an instance of StatsValues which supports values from the specified  StatsField,1,257
2482,"public MergedAndroidData write(AndroidDataWriter mergedDataWriter) throws IOException {
    try {
      writeParsedAndroidData(primary, mergedDataWriter);
      writeParsedAndroidData(deps, mergedDataWriter);
      return new MergedAndroidData(
          mergedDataWriter.resourceDirectory(),
          mergedDataWriter.assetDirectory(),
          mergedDataWriter.copyManifest(this.manifest));
    } finally {
      // Flush to make sure all writing is completed before returning a MergedAndroidData.
      // If resources aren't fully written, the MergedAndroidData might be invalid.
      mergedDataWriter.flush();
    }
  }",Writes the android data to the filesystem.,1,105
2483,"public final static int tertiaryOrder(int ce)
    {
        return ce & RuleBasedCollator.CE_TERTIARY_MASK_;
    }",Return the tertiary order of a collation element ce.,1,33
2484,"public InternalDocumentRevision build() {
        DocumentRevisionOptions options = new DocumentRevisionOptions();
        options.sequence = sequence;
        options.docInternalId = docInternalId;
        options.deleted = deleted;
        options.current = current;
        options.parent = parent;
        options.attachments = attachments;
        return new InternalDocumentRevision(docId, revId, body, options);
    }",Builds and returns the  InternalDocumentRevision for this builder.,1,107
2485,"public List<Column> getColumns() {
        return Collections.unmodifiableList(new ArrayList<Column>(columns));
    }",Returns a List of the columns returned from a search.,1,35
2486,"public static String[] getAllDetectableCharsets() {
        String[] allCharsetNames = new String[ALL_CS_RECOGNIZERS.size()];
        for (int i = 0; i < allCharsetNames.length; i++) {
            allCharsetNames[i] = ALL_CS_RECOGNIZERS.get(i).recognizer.getName();
        }
        return allCharsetNames;
    }",Get the names of all charsets supported by CharsetDetector class.,1,98
2487,"public List<HostedRoom> getHostedRooms(String serviceName) throws NoResponseException, XMPPErrorException,
                    NotConnectedException {
        ServiceDiscoveryManager discoManager = ServiceDiscoveryManager.getInstanceFor(connection());
        DiscoverItems discoverItems = discoManager.discoverItems(serviceName);
        List<DiscoverItems.Item> items = discoverItems.getItems();
        List<HostedRoom> answer = new ArrayList<HostedRoom>(items.size());
        for (DiscoverItems.Item item : items) {
            answer.add(new HostedRoom(item));
        }
        return answer;
    }",Returns a List of HostedRooms where each HostedRoom has the XMPP address of the room and the room's name.,1,146
2488,"private String buildSearchFilter(String query)
    {
        if (""custom"".equals(settings.getQueryMode()))
        {
            return settings.getCustomQuery().replace(""<query>"", query);
        }

        StringBuffer searchFilter = new StringBuffer();
        searchFilter.append(""(|"");

        /* cn=*query* OR sn=*query* OR ... */
        for(String attribute : searchableAttrs)
        {
            searchFilter.append(""("");
            searchFilter.append(attribute);
            searchFilter.append(""="");
            searchFilter.append(query);
            searchFilter.append("")"");
        }

        //searchFilter.append(""))"");
        searchFilter.append("")"");
        return searchFilter.toString();
    }","Builds an LDAP search filter, based on the query string entered and the searchable fields defined in the static constructor.",1,185
2489,"public static ExecutionResults execute(TestEngine testEngine, EngineDiscoveryRequest discoveryRequest) {
		ExecutionRecorder executionReporter = new ExecutionRecorder();
		execute(testEngine, discoveryRequest, executionReporter);
		return executionReporter.getExecutionResults();
	}","Execute tests via a  EngineDiscoveryRequest using the provided  TestEngine, then return the recorded  ExecutionResults to the caller.",1,60
2490,"protected P makeGradient(boolean radial, PDFDeviceColorSpace colorspace,
            List<Color> colors, List<Double> bounds, List<Double> coords, List<Double> matrix) {
        List<Function> functions = new ArrayList<Function>();
        // if 5 elements, the penultimate element is 3.
        // do not go beyond that, because you always need
        // to have a next color when creating the function.
        for (int currentPosition = 0, lastPosition = colors.size() - 1; currentPosition < lastPosition;
                currentPosition++) {    // for every consecutive color pair
            Color currentColor = colors.get(currentPosition);
            Color nextColor = colors.get(currentPosition + 1);

            // colorspace must be consistent, so we simply convert to sRGB where necessary
            if (!currentColor.getColorSpace().isCS_sRGB()) {
                //Convert to sRGB
                currentColor = ColorUtil.toSRGBColor(currentColor);
                colors.set(currentPosition, currentColor);
            }
            if (!nextColor.getColorSpace().isCS_sRGB()) {
                //Convert to sRGB
                nextColor = ColorUtil.toSRGBColor(nextColor);
                colors.set(currentPosition + 1, nextColor);
            }
            List<Double> c0 = toColorVector(currentColor);
            List<Double> c1 = toColorVector(nextColor);
            Function function = makeFunction(2, null, null, c0, c1, 1.0);
            functions.add(function);
        }

        Function function = makeFunction(3, null, null, functions, bounds, null);
        Shading shading;
        if (radial) {
            if (coords.size() == 6) {
                shading = makeShading(3, colorspace, null, null, false, coords, null, function, null);
            } else {    // if the center x, center y, and radius specifiy
                // the gradient, then assume the same center x, center y,
                // and radius of zero for the other necessary component
                List<Double> newCoords = new ArrayList<Double>();
                newCoords.add(coords.get(0));
                newCoords.add(coords.get(1));
                newCoords.add(coords.get(2));
                newCoords.add(coords.get(0));
                newCoords.add(coords.get(1));
                newCoords.add(Double.valueOf(0.0));

                shading = makeShading(3, colorspace, null, null, false, newCoords,
                        null, function, null);
            }
        } else {
            shading = makeShading(2, colorspace, null, null, false, coords,
                    null, function, null);
        }
        return makePattern(2, shading, null, null, matrix);
    }",Creates a new gradient.,1,663
2491,"protected FocusModel getFocusModel() {
		return focusModel;
	}",Returns the  FocusModel at which this  FocusBehavior is registered for changes.,1,19
2492,"public final static int primaryOrder(int ce)
    {
        return (ce & RuleBasedCollator.CE_PRIMARY_MASK_) 
                >>> RuleBasedCollator.CE_PRIMARY_SHIFT_;
    }",Return the primary order of a collation element ce.,1,45
2493,"public double getQualityValue() {
		String qualityFactor = getParameter(PARAM_QUALITY_FACTOR);
		return (qualityFactor != null ? Double.parseDouble(unquote(qualityFactor)) : 1D);
	}","Return the quality factor, as indicated by a  q parameter, if any.",1,55
2494,"public static BaseEvent createErrorEvent(BaseEvent currentEvent, Component obj,
                                           MessagingException me, ErrorTypeLocator locator) {
    Throwable cause = me.getCause() != null ? me.getCause() : me;
    List<ErrorMapping> errorMappings = getErrorMappings(obj);
    if (!errorMappings.isEmpty() || isMessagingExceptionCause(me, cause)) {
      Error newError = getErrorFromFailingProcessor(currentEvent, obj, cause, locator);
      BaseEvent newEvent = BaseEvent.builder(me.getEvent()).error(newError).build();
      me.setProcessedEvent(newEvent);
      return newEvent;
    } else {
      return currentEvent;
    }
  }",Create new  BaseEvent with  org.mule.runtime.api.message.Error instance set.,1,187
2495,"public static INDArray createUninitialized(DataType type, long[] shape, char ordering) {
        if (shape.length == 0) {
            if(type == DataType.UTF8){
                return scalar("""");
            }
            return scalar(type, 0);
        }

        checkShapeValues(shape);
        return INSTANCE.createUninitialized(type, shape, ordering, Nd4j.getMemoryManager().getCurrentWorkspace());
    }","Creates an uninitialized array with the specified data type, shape and ordering.",1,124
2496,"public List<CourseAttributes> getCoursesForInstructor(String googleId, boolean omitArchived)
            throws EntityDoesNotExistException {
        
        Assumption.assertNotNull(ERROR_NULL_PARAMETER, googleId);
    
        return coursesLogic.getCoursesForInstructor(googleId, omitArchived);
    
    }",Omits archived courses if omitArchived == true,1,61
2497,"static MethodHandle lookupMethod(Class<?> receiverClass, String name, Object args[], long recipe) {
         Method method = lookupMethodInternal(receiverClass, name, args.length - 1);
         MethodHandle handle = method.handle;
         MethodHandle filters[] = new MethodHandle[args.length];

         if (recipe != 0) {
             for (int i = 0; i < args.length; i++) {
                 // its a functional reference, replace the argument with an impl
                 if ((recipe & (1L << (i - 1))) != 0) {
                     filters[i] = lookupReference(method.arguments.get(i - 1).clazz, (String) args[i]);
                 }
             }
         }
         handle = MethodHandles.filterArguments(handle, 0, filters);
         
         return handle;
     }","Looks up handle for a dynamic method call, with lambda replacement",1,245
2498,"public int getSessionAverageAliveTime() {
        // Copy current stats
        List<SessionTiming> copy = new ArrayList<SessionTiming>();
        synchronized (sessionExpirationTiming) {
            copy.addAll(sessionExpirationTiming);
        }
        
        // Init
        int counter = 0;
        int result = 0;
        Iterator<SessionTiming> iter = copy.iterator();
        
        // Calculate average
        while (iter.hasNext()) {
            SessionTiming timing = iter.next();
            if (timing != null) {
                int timeAlive = timing.getDuration();
                counter++;
                // Very careful not to overflow - probably not necessary
                result =
                    (result * ((counter - 1)/counter)) + (timeAlive/counter);
            }
        }
        return result;
    }",Gets the average time (in seconds) that expired sessions had been alive based on the last 100 sessions to expire.,1,213
2499,"public static boolean isNotEmpty(Object value) {
        if (value == null) {
            return false;
        } else if (value instanceof String) {
            String text = (String) value;
            return text.trim().length() > 0;
        } else if (value instanceof Collection) {
            return !((Collection<?>)value).isEmpty();
        } else if (value instanceof Map) {
            return !((Map<?, ?>)value).isEmpty();
        } else {
            return true;
        }
    }","Tests whether the value is not null, an empty string or an empty collection/map.",1,178
2500,"public static RPCBlockWriteRequest decode(ByteBuf in) {
    Preconditions.checkNotNull(in);

    long userId = in.readLong();
    long blockId = in.readLong();
    long offset = in.readLong();
    long length = in.readLong();
    DataBuffer data = null;
    if (length > 0) {
      // TODO: look into accessing Netty ByteBuf directly, to avoid copying the data.
      ByteBuffer buffer = ByteBuffer.allocate((int) length);
      in.readBytes(buffer);
      data = new DataByteBuffer(buffer, (int) length);
    }
    return new RPCBlockWriteRequest(userId, blockId, offset, length, data);
  }",Decodes the input  ByteBuf into a  RPCBlockWriteRequest object and returns it.,1,184
2501,"public static LogReader.DataHandler rateReporterHandler(final RateReporter reporter)
    {
        return (buffer, offset, length, header) -> reporter.onMessage(1, length);
    }","Return a reusable, parameteried  LogReader.DataHandler that calls into a  RateReporter.",1,53
2502,"public static int unsignedCompare(long left, long right) {
        /*
         * This method assumes that the arithmetic overflow on signed
         * integer wrap on a circular domain (modulo arithmetic in
         * two-complement), which is the defined behavior in Java.
         *
         * This idea is to rotate the domain by the length of the negative
         * space, and then use the signed operator.
         */
        return Long.compare(left + Long.MIN_VALUE, right + Long.MIN_VALUE);
    }",Performs an unsigned long comparison on two unsigned long numbers.,1,52
2503,"public String downloadToString() throws IOException {
        return downloadToString(Globals.prefs.get(JabRefPreferences.DEFAULT_ENCODING));
    }",Encoding will be determined from JabRefPreferences.DEFAULT_ENCODING,1,35
2504,"public Map<ServiceName, ServiceBuilder.DependencyType> getDependencies() {
        return dependencies;
    }",Get the dependency map.,1,27
2505,"public Definition getDefinition(String name) {
        return null;
    }",Returns a Definition object that matches the given name.,1,22
2506,"protected Format getFormat(int streamIndex, Format oldValue)
    {
        if (oldValue != null)
            return oldValue;

        Format[] supportedFormats = getSupportedFormats(streamIndex);

        return
            ((supportedFormats == null) || (supportedFormats.length < 1))
                ? null
                : supportedFormats[0];
    }",Gets the Format to be reported by the FormatControl of a PushBufferStream at a specific zero-based index in the list of streams of this PushBufferDataSource.,1,99
2507,"public KaleoNode remove(KaleoNode kaleoNode) throws SystemException {
		return super.remove(kaleoNode);
	}",Removes the kaleo node from the database.,1,31
2508,"String endTestSuite(Test test)
    {
        final double elapsed = ((System.currentTimeMillis() - this.startTime) / 1000.0);
        final StringBuffer summary = new StringBuffer(""Tests: "" + String.valueOf(this.numberOfTests) + "", "");
        summary.append(""Failures: "" + String.valueOf(this.numberOfFailures) + "", "");
        summary.append(""Errors: "" + String.valueOf(this.numberOfErrors) + "", "");
        summary.append(""Time elapsed: "" + elapsed).append("" sec"");
        summary.append(newLine);
        summary.append(newLine);
        this.reportWriter.print(summary);
        if (this.reportFile != null)
        {
            try
            {
                final File parent = this.reportFile.getParentFile();
                if (parent != null && !parent.exists())
                {
                    parent.mkdirs();
                }
                final FileWriter writer = new FileWriter(this.reportFile);
                writer.write(report.toString());
                writer.flush();
                writer.close();
            }
            catch (IOException exception)
            {
                throw new RuntimeException(exception);
            }
        }
        return summary.toString();
    }",Signifies the test suite ended and returns the summary of the test.,1,355
2509,"public StrTokenizer asTokenizer() {
        return new StrBuilderTokenizer();
    }",Creates a tokenizer that can tokenize the contents of this builder.,1,23
2510,"public ResultSetMetaData getMetaData() throws SQLException {
        return getResultSet().getMetaData();
    }","Retrieves the number, types and properties of this getResultSet() object's columns.",1,29
2511,"public int poll(final int fragmentCountLimit)
    {
        roundRobinIndex++;
        if (connectedSubscriptions.size() == roundRobinIndex)
        {
            roundRobinIndex = 0;
        }

        return connectedSubscriptions.doLimitedAction(roundRobinIndex, fragmentCountLimit, ConnectedSubscription::poll);
    }",Read waiting data and deliver to  DataHandlers.,1,76
2512,"public static Object[] add(final Object[] array, final Object element) {
        Object newArray = copyArrayGrow1(array, element != null ? element.getClass() : Object.class);
        Array.set(newArray, lastIndex(newArray), element);
        return (Object[]) newArray;
    }",Copies the given array and adds the given element at the end of the new array. The new array contains the same elements of the input array plus the given element in the last position.,1,96
2513,"public List<ObjectCountPair<FailureCause>> getNbrOfFailureCauses(GraphFilterBuilder filter) {
        return null;
    }",Gets a list of  ObjectCountPair where each pair contains a unique  FailureCause as key and the number of times that failure cause was triggered as count.,1,28
2514,"public SingleServerConfig useSingleServer() {
        return useSingleServer(new SingleServerConfig());
    }",Init single server configuration.,1,26
2515,"public CacheControlConfig cacheControl() {
        return cacheControl.enable();
    }",Allows customizing the  CacheControlHeadersWriter.,1,23
2516,"public static List<Extension> getExtensions(String pointId, Extension.MEDIA_TYPE type) {
		String key = Extension.toExtensionId(pointId, type);
		List<Extension> extensions = getExtensionMap().get(key);
		if (extensions != null) {
			log.debug(""Getting extensions defined by : "" + key);
			return extensions;
		} else {
			return getExtensions(pointId);
		}
	}",Return all of the extensions associated with the given pointId Returns getExtension(pointId) if no modules extend this pointId for given media type,1,120
2517,"public boolean failed() {
        return isDone && exception != null;
    }",Check if the request failed.,1,29
2518,"public DBObject explain() {
        MongoFind copy = new MongoFind(find);
        copy.explain();
        if (copy.getLimit() > 0) {
            // need to pass a negative batchSize as limit for explain
            copy.batchSize(copy.getLimit() * -1);
            copy.limit(0);
        }
        QueryResult<DBObject> queryResult = getConnector().query(collection.getNamespace(), copy, collection.getDocumentCodec(),
                new DBObjectCodec(PrimitiveCodecs.createDefault()));
        return queryResult.getResults().get(0);
    }","Returns an object containing basic information about the execution of the query that created this cursor This creates a DBObject with a number of fields, including but not limited to: cursor : cursor type nScanned number of records examined by the database for this query n : the number of records that the database returned millis : how long it took the database to execute the query",1,148
2519,"public LeftProjection<Option<L>, Option<R>> filter(Predicate<? super L> predicate) {
            Objects.requireNonNull(predicate);
            if (either.isRight() || (either.isLeft() && predicate.test(asLeft()))) {
                return new LeftProjection<>(either.bimap(Some::new, Some::new));
            } else {
                return new LeftProjection<>(new Left<>(None.instance()));
            }
        }","Returns   LeftProjection(Left(Some(value))), if the underlying  Either of this projection is a  Left and the left value satisfies the given predicate  LeftProjection(Left(None))) if the underlying  Either of this projection is a  Left and the left value does not satisfy the given predicate  LeftProjection(Right(Some(value))) otherwise, i.e.",1,141
2520,"protected static Implementation.SpecialMethodInvocation of(MethodDescription resolvedMethod,
                                                                   TypeDescription instrumentedType,
                                                                   StackManipulation additionalArguments) {
            StackManipulation stackManipulation = resolvedMethod.isStatic()
                    ? MethodInvocation.invoke(resolvedMethod)
                    : MethodInvocation.invoke(resolvedMethod).special(instrumentedType);
            return stackManipulation.isValid()
                    ? new RebasedMethodInvocation(resolvedMethod, instrumentedType, new Compound(additionalArguments, stackManipulation))
                    : Illegal.INSTANCE;
        }",Creates a special method invocation for the given method.,1,112
2521,"public Connection getConnection() {
		return connection;
	}",Returns the  Connection which is manipulated by this operation.,1,19
2522,"public static String getFileMD5(String filepath) {
        File file = new File(filepath);
        return getFileMD5(file);
    }",Get MD5 of one file! The test ok!,1,42
2523,"public List getBinStats() {
        return binStats;
    }",Returns an ArrayList of  SummaryStatistics instances containing statistics describing the values in each of the bins.,1,19
2524,"public static int indexOf(CharSequence seq, CharSequence searchSeq, int startPos) {
        if (seq == null || searchSeq == null) {
            return INDEX_NOT_FOUND;
        }
        return StringUtils.indexOfSequence(seq, searchSeq, startPos);
    }","Finds the first index within a CharSequence, handling  null.",1,78
2525,"public static GenericPropertyBuilder<Boolean> booleanProperty(String name, boolean defaultValue) {
        return booleanProperty(name).defaultValue(defaultValue);
    }","Returns a builder for a boolean property, with a default value already specified.",1,40
2526,"public static Striped<ReadWriteLock> lazyWeakReadWriteLock(int stripes) {
    return lazy(stripes, READ_WRITE_LOCK_SUPPLIER);
  }","Creates a  Striped with lazily initialized, weakly referenced read-write locks.",1,33
2527,"private LookupStrategy getClassLoaderLookupStrategy(PluginUrlClassification currentPluginClassification,
                                                      PluginUrlClassification dependencyPluginClassification) {
    final LookupStrategy parentFirst;
    if (currentPluginClassification.getPluginDependencies().contains(dependencyPluginClassification.getName())) {
      parentFirst = PARENT_FIRST;
    } else {
      parentFirst = CHILD_ONLY;
    }
    return parentFirst;
  }",If the plugin declares the dependency the  PluginUrlClassification would be  ParentFirstLookupStrategy otherwise  ChildOnlyLookupStrategy.,1,84
2528,"public static boolean isFileURL(URL url) {
		String protocol = url.getProtocol();
		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||
				URL_PROTOCOL_VFS.equals(protocol));
	}","Determine whether the given URL points to a resource in the file system, that is, has protocol ""file"", ""vfsfile"" or ""vfs"".",1,66
2529,"public Matrix<O> inverse() {
        if (isSquare())
            return lu().inverse();
        Matrix<O> thisTranspose = this.transpose();
        return (thisTranspose.times(this)).inverse().times(thisTranspose);
    }",Returns the inverse or pseudo-inverse if this matrix if not square.,1,76
2530,"public static boolean containsAny(final Collection coll1, final Collection coll2) {
        if (coll1.size() > coll2.size()) {
            for (Iterator it = coll1.iterator(); it.hasNext();) {
                if (coll2.contains(it.next())) {
                    return true;
                }
            }
        } else {
            for (Iterator it = coll2.iterator(); it.hasNext();) {
                if (coll1.contains(it.next())) {
                    return true;
                }
            }
        }
        return false;
    }",Returns true iff at least one element is in both collections.,1,178
2531,"public <F> ConnectedIterativeDataStreams<T, F> withFeedbackType(String feedbackTypeString) {
		return withFeedbackType(TypeInfoParser.<F> parse(feedbackTypeString));
	}","Changes the feedback type of the iteration and allows the user to apply co-transformations on the input and feedback stream, as in a  ConnectedStreams.",1,44
2532,"public static List<MediaType> createFrom(String[] mediaTypes) {
        List<MediaType> l = new ArrayList<MediaType>();
        try {
            for (String mediaType : mediaTypes) {
                HttpHeaderReader.readMediaTypes(l, mediaType);
            }

            Collections.sort(l, MEDIA_TYPE_COMPARATOR);
            return l;
        } catch (ParseException ex) {
            throw new IllegalArgumentException(ex);
        }
    }",Create a list of media type from a string array of media types.,1,124
2533,"public VaadinServiceSession getSession() {
        return session;
    }",Gets the Vaadin service session that is no longer used.,1,19
2534,"public ParameterBinding getBindingFor(String name) {

		for (StringQuery.ParameterBinding binding : bindings) {
			if (binding.hasName(name)) {
				return binding;
			}
		}

		return null;
	}",Returns the  ParameterBinding for the given name.,1,67
2535,"public int getNotMetRequirements(Context context) {
    @RequirementFlags int notMetRequirements = getNotMetNetworkRequirements(context);
    if (isChargingRequired() && !isDeviceCharging(context)) {
      notMetRequirements |= DEVICE_CHARGING;
    }
    if (isIdleRequired() && !isDeviceIdle(context)) {
      notMetRequirements |= DEVICE_IDLE;
    }
    return notMetRequirements;
  }","Returns requirements that are not met, or 0.",1,101
2536,"public Optional<JComponent> getExtra(final FieldEditor editor) {
        final String fieldName = editor.getFieldName();

        final String fieldExtras = InternalBibtexFields.getFieldExtras(fieldName);

        // timestamp or a other field with datepicker command
        if (Globals.prefs.get(JabRefPreferences.TIME_STAMP_FIELD).equals(fieldName)
                || InternalBibtexFields.EXTRA_DATEPICKER.equals(fieldExtras)) {
            // double click AND datefield => insert the current date (today)
            return FieldExtraComponents.getDateTimeExtraComponent(editor,
                    InternalBibtexFields.EXTRA_DATEPICKER.equals(fieldExtras));
        } else if (InternalBibtexFields.EXTRA_EXTERNAL.equals(fieldExtras)) {
            // Add external viewer listener for ""pdf"" and ""url"" fields.
            return FieldExtraComponents.getExternalExtraComponent(editor, this);
        } else if (InternalBibtexFields.EXTRA_JOURNAL_NAMES.equals(fieldExtras)) {
            // Add controls for switching between abbreviated and full journal names.
            // If this field also has a FieldContentSelector, we need to combine these.
            return FieldExtraComponents.getJournalExtraComponent(frame, panel, editor, entry, contentSelectors,
                    storeFieldAction);
        } else if (panel.metaData.getData(Globals.SELECTOR_META_PREFIX + fieldName) != null) {
            return FieldExtraComponents.getSelectorExtraComponent(frame, panel, editor, contentSelectors,
                    storeFieldAction);
        } else if (InternalBibtexFields.EXTRA_BROWSE.equals(fieldExtras)) {
            return FieldExtraComponents.getBrowseExtraComponent(frame, editor, this);
        } else if (InternalBibtexFields.EXTRA_BROWSE_DOC.equals(fieldExtras)
                || InternalBibtexFields.EXTRA_BROWSE_DOC_ZIP.equals(fieldExtras)) {
            return FieldExtraComponents.getBrowseDocExtraComponent(frame, panel, editor, this,
                    InternalBibtexFields.EXTRA_BROWSE_DOC_ZIP.equals(fieldExtras));
        } else if (InternalBibtexFields.EXTRA_URL.equals(fieldExtras)) {
            return FieldExtraComponents.getURLExtraComponent(editor, storeFieldAction);
        } else if (InternalBibtexFields.EXTRA_SET_OWNER.equals(fieldExtras)) {
            return FieldExtraComponents.getSetOwnerExtraComponent(editor, storeFieldAction);
        } else if (InternalBibtexFields.EXTRA_YES_NO.equals(fieldExtras)) {
            return FieldExtraComponents.getYesNoExtraComponent(editor, this);
        } else if (InternalBibtexFields.EXTRA_MONTH.equals(fieldExtras)) {
            return FieldExtraComponents.getMonthExtraComponent(editor, this);
        }
        return Optional.empty();
    }",getExtra checks the field name against InternalBibtexFields.getFieldExtras(name).,1,515
2537,"public static String getCompilerName(List compilers) {
		if (compilers.isEmpty()) {
			return AtlCompiler.DEFAULT_COMPILER_NAME;
		} else {
			return compilers.get(0).toString();
		}
	}","Returns the compiler name, or the default name if null.",1,64
2538,"public SolrInputField removeField(String name) {
    return _fields.remove( name );
  }",Remove a field from the document,1,29
2539,"public List<StackInformation> listBlueprints() throws Exception {
        List<StackInformation> list;
        try {
            list = Blueprints.getInstance().getBlueprintList();
            if (list.isEmpty()) {
                throw new WebApplicationException(Response.Status.NO_CONTENT);
            } 
            return list;
        }catch (WebApplicationException we) {
            throw we;
        }catch (Exception e) {
            throw new WebApplicationException((new ExceptionResponse(e)).get());
        } 
    }",Get the list of stacks,1,144
2540,"public List<MgmtSoftwareModuleRequestBodyPost> build() {
        return Lists.newArrayList(doBuild(name));
    }",Builds a list with a single entry of  MgmtSoftwareModuleRequestBodyPost which can directly be used in the,1,30
2541,"public static int getDefaultBufferSize(int trackType) {
    switch (trackType) {
      case C.TRACK_TYPE_DEFAULT:
        return C.DEFAULT_MUXED_BUFFER_SIZE;
      case C.TRACK_TYPE_AUDIO:
        return C.DEFAULT_AUDIO_BUFFER_SIZE;
      case C.TRACK_TYPE_VIDEO:
        return C.DEFAULT_VIDEO_BUFFER_SIZE;
      case C.TRACK_TYPE_TEXT:
        return C.DEFAULT_TEXT_BUFFER_SIZE;
      case C.TRACK_TYPE_METADATA:
        return C.DEFAULT_METADATA_BUFFER_SIZE;
      case C.TRACK_TYPE_CAMERA_MOTION:
        return C.DEFAULT_CAMERA_MOTION_BUFFER_SIZE;
      case C.TRACK_TYPE_NONE:
        return 0;
      default:
        throw new IllegalArgumentException();
    }
  }",Maps a  C  TRACK_TYPE_ constant to the corresponding  C,1,154
2542,"public static boolean isWhitespace(final String str) {
    if (""\u0002"".equals(str) // unbreakable field, e.g. a footnote number in OOo
        || ""\u0001"".equals(str)) { // breakable field in OOo
      return false;
    }
    final String trimStr = str.trim();
    if (isEmpty(trimStr)) {
      return true;
    }
    if (trimStr.length() == 1) {
      if (""\u200B"".equals(str)) {
        // We need u200Bââ to be detected as whitespace for Khmer, as it was the case before Java 7.
        return true;
      }
      return Character.isWhitespace(trimStr.charAt(0));
    }
    return false;
  }","Checks if a string contains only whitespace, including all Unicode whitespace, but not the non-breaking space.",1,173
2543,"private int getInMemoryPercentage(Inode inode) {
    if (!inode.isFile()) {
      return 0;
    }
    InodeFile inodeFile = (InodeFile) inode;

    long length = inodeFile.getLength();
    if (length == 0) {
      return 100;
    }

    long inMemoryLength = 0;
    for (BlockInfo info : mBlockMaster.getBlockInfoList(inodeFile.getBlockIds())) {
      if (isInMemory(info)) {
        inMemoryLength += info.getLength();
      }
    }
    return (int) (inMemoryLength * 100 / length);
  }",Get the in-memory percentage of an Inode.,1,177
2544,"public I18nMessage invalidTime(String time, String locale, String pattern) {
    return createMessage(bundlePath, 15, time, pattern, locale);
  }",Generates a  I18nMessage for a  time expressed as a  String but couldn't be parsed using the given  locale and  pattern,1,47
2545,"public int compareRows(Cell left, byte[] right, int roffset, int rlength) {
    if (left instanceof ByteBufferedCell) {
      return ByteBufferUtils.compareTo(((ByteBufferedCell) left).getRowByteBuffer(),
          ((ByteBufferedCell) left).getRowPositionInByteBuffer(), left.getRowLength(), right,
          roffset, rlength);
    }
    return Bytes.compareTo(left.getRowArray(), left.getRowOffset(), left.getRowLength(), right,
        roffset, rlength);
  }",Compares the row part of the cell with a simple plain byte[] like the stopRow in Scan.,1,140
2546,"public static Properties createStringAdaptingProperties() {
		return new SortedProperties(false) {
			@Override
			@Nullable
			public String getProperty(String key) {
				Object value = get(key);
				return (value != null ? value.toString() : null);
			}
		};
	}",Create a variant of  java.util.Properties that automatically adapts non-String values to String representations in  Properties#getProperty.,1,92
2547,"public List<String> getInstructions() {
        synchronized (instructions) {
            return Collections.unmodifiableList(new ArrayList<String>(instructions));
        }
    }",Returns a List of the list of instructions that explain how to fill out the form and what the form is about.,1,47
2548,"protected DatanodeDescriptor chooseRandom(String scope,
      Set<Node> excludedNodes,
      long blocksize,
      int maxNodesPerRack,
      List<DatanodeDescriptor> results,
      boolean avoidStaleNodes)
          throws NotEnoughReplicasException {
    return chooseRandom(1, scope, excludedNodes, blocksize, maxNodesPerRack,
        results, avoidStaleNodes);
  }",Randomly choose one target from the given scope.,1,85
2549,"@SafeVarargs
	public static Parser.Sequence seq(Supplier<Parser>... parsers) {
		return new Parser.Sequence(parsers);
	}",Shortcut for  new Parser.Sequence(parsers)).,1,42
2550,"public double max() {
        return reduce(NaturalDoubleMaxReducer.max, -Double.MAX_VALUE);
    }","Returns the maximum element, or -Double.MAX_VALUE if empty assuming that all elements are Comparables",1,30
2551,"public LoopType loop(int count) {
        LoopType loop = getNodeFactory().createLoop();
        loop.setExpression(new ConstantExpression(Integer.toString(count)));
        addOutput(loop);
        return loop;
    }",Creates a loop which must evaluate to an integer that determines how many times the exchange should be sent down the rest of the route.,1,64
2552,"private Bucket getBucket(Resource reference) {
    if (StringUtils.isNotBlank(reference.getKey())) {
      return buckets.get(reference);
    }
    if (StringUtils.isNotBlank(reference.getDeprecatedKey())) {
      // Fallback to use deprecated key
      Bucket bucket = bucketsByDeprecatedKey.get(reference.getDeprecatedKey());
      if (bucket != null) {
        // Fix reference resource
        reference.setKey(bucket.getResource().getKey());
        reference.setPath(bucket.getResource().getPath());
        LOG.debug(""Resource {} was found using deprecated key. Please update your plugin."", reference);
        return bucket;
      }
    }
    return null;
  }","Should support 2 situations 1) key = new key and deprecatedKey = old key : this is the standard use case in a perfect world 2) key = null and deprecatedKey = oldKey : this is for plugins that are using deprecated constructors of  JavaFile,  JavaPackage,  File,  Directory",1,171
2553,"private String wrapText(String string) {
        //wrap string
        if (isWrap()) {
            int lastSpace = 0;
            int lastWrap = 0;
            StringBuilder wrapText = new StringBuilder(string + "" "");

            wrapPosition.clear();

            float wrapWidth = getSize().x - margin.y - margin.w;

            if (wrapWidth > 0) {
                //loop through whole string
                for (int i = 0; i < wrapText.length(); i++) {

                    //check if character is a space -> string can only be wrapped at spaces
                    if (wrapText.charAt(i) == ' ') {
                        //check if the string (from the beginning of the new line) is bigger than the container width
                        if (calcTextWidth(wrapText.substring(lastWrap, i)) > wrapWidth) {
                            //than wrap the string at the previous space
                            wrapText.insert(lastSpace + 1, '\n');
                            wrapPosition.add(new Integer(lastSpace + 1));

                            lastWrap = lastSpace + 1;
                        }

                        lastSpace = i;
                    } else if (wrapText.charAt(i) == '\n') {
                        lastSpace = i;
                        lastWrap = i;
                    }
                }
            }

            wrapText.replace(wrapText.length() - 1, wrapText.length(), """");

            return wrapText.toString();
        } else {
            //no wrap
            return string;
        }
    }",Wraps the string to the with of the wrapWidth.,1,374
2554,"public Collection getObjectFlowStates(StateMachine stateMachine)
    {
        return getSubvertices(stateMachine, objectFlowStateFilter);
    }",Returns the collection of ObjectFlowState instances found in the argument StateMachine.,1,29
2555,"public static <T> BodyInserter<T> fromObject(T body) {
		Assert.notNull(body, ""'body' must not be null"");
		return BodyInserter.of(
				(response, configuration) -> writeWithMessageWriters(response, configuration,
						Mono.just(body), ResolvableType.forInstance(body)),
				() -> body);
	}",Return a  BodyInserter that writes the given single object.,1,95
2556,"public boolean isConnected()
    {
        for (final Image image : images)
        {
            if (!image.isClosed())
            {
                return true;
            }
        }

        return false;
    }",Is this subscription connected by having at least one open publication  Image.,1,66
2557,"public KubernetesClient connect() throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException,
            IOException, CertificateEncodingException {

        LOGGER.log(Level.FINE, ""Building connection to Kubernetes host "" + name + "" URL "" + serverUrl);

        if (client == null) {
            synchronized (this) {
                if (client == null) {
                    client = new KubernetesFactoryAdapter(serverUrl, serverCertificate, credentialsId, skipTlsVerify)
                            .createClient();
                }
            }
        }
        return client;

    }",Connects to Kubernetes.,1,143
2558,"public BigInteger getJ()
    {
        return j;
    }",Return the subgroup factor J.,1,20
2559,"private static int getMaxInputSize(MediaCodecInfo codecInfo, Format format) {
    if (format.maxInputSize != Format.NO_VALUE) {
      // The format defines an explicit maximum input size. Add the total size of initialization
      // data buffers, as they may need to be queued in the same input buffer as the largest sample.
      int totalInitializationDataSize = 0;
      int initializationDataCount = format.initializationData.size();
      for (int i = 0; i < initializationDataCount; i++) {
        totalInitializationDataSize += format.initializationData.get(i).length;
      }
      return format.maxInputSize + totalInitializationDataSize;
    } else {
      // Calculated maximum input sizes are overestimates, so it's not necessary to add the size of
      // initialization data.
      return getMaxInputSize(codecInfo, format.sampleMimeType, format.width, format.height);
    }
  }",Returns a maximum input buffer size for a given codec and format.,1,173
2560,"public boolean isEmpty() {
    return !NameNodeResourcePolicy.areResourcesAvailable(journals,
        minimumRedundantJournals);
  }","Returns true if there are no journals, all redundant journals are disabled, or any required journals are disabled.",1,29
2561,"public static String translate(String str, String searchChars, String replaceChars) {
        if (str == null || str.length() == 0) {
            return str;
        }
        StringBuffer buffer = new StringBuffer(str.length());
        char[] chrs = str.toCharArray();
        char[] withChrs = replaceChars.toCharArray();
        int sz = chrs.length;
        int withMax = replaceChars.length() - 1;
        for(int i=0; i<sz; i++) {
            int idx = searchChars.indexOf(chrs[i]);
            if(idx != -1) {
                if(idx > withMax) {
                    idx = withMax;
                }
                buffer.append(withChrs[idx]);
            } else {
                buffer.append(chrs[i]);
            }
        }
        return buffer.toString();
    }",Translate characters in a String.,1,270
2562,"public static String getMetadataInstance(final String metadataId) {
		if (isIdentifyingInstance(metadataId)) {
			return metadataId.substring(metadataId.indexOf(INSTANCE_DELIMITER) + 1);
		}
		return null;
	}",Returns the instance key from the given metadata ID.,1,61
2563,"public static String easyDateFormat(Date date)
    {
        // first use, create an instance
        if (dateFormatter == null)
        {
          String format = Globals.prefs.get( ""timeStampFormat"" ) ;
          dateFormatter = new SimpleDateFormat( format ) ;
        }
        return dateFormatter.format(date);
    }",Creates a readable Date string from the parameter date.,1,89
2564,"protected String getSubject(Event event)
	{
		// get the message
		Reference ref = EntityManager.newReference(event.getResource());
		AnnouncementMessage msg = (AnnouncementMessage) ref.getEntity();
		AnnouncementMessageHeader hdr = (AnnouncementMessageHeader) msg.getAnnouncementHeader();

		// use either the configured site, or if not configured, the site (context) of the resource
		String siteId = (getSite() != null) ? getSite() : ref.getContext();

		// get a site title
		String title = siteId;
		try
		{
			Site site = SiteService.getSite(siteId);
			title = site.getTitle();
		}
		catch (Exception ignore)
		{
		}

		// use the message's subject
		return ""[ "" + title + "" - "" + rb.getString(""Announcement"") + "" ]   "" + hdr.getSubject();
	}",Format the announcement notification subject line.,1,224
2565,"public int copyRecursiveTo(final DirScanner scanner, final FilePath target, final String description) throws IOException, InterruptedException {
        if(this.channel==target.channel) {
            // local to local copy.
            return act(new FileCallable<Integer>() {
                private static final long serialVersionUID = 1L;
                public Integer invoke(File base, VirtualChannel channel) throws IOException {
                    if(!base.exists())  return 0;
                    assert target.channel==null;
                    final File dest = new File(target.remote);
                    final AtomicInteger count = new AtomicInteger();
                    scanner.scan(base, new FileVisitor() {
                        @Override public void visit(File f, String relativePath) throws IOException {
                            if (f.isFile()) {
                                File target = new File(dest, relativePath);
                                target.getParentFile().mkdirs();
                                Util.copyFile(f, target);
                                count.incrementAndGet();
                            }
                        }
                        @Override public boolean understandsSymlink() {
                            return true;
                        }
                        @Override public void visitSymlink(File link, String target, String relativePath) throws IOException {
                            try {
                                Util.createSymlink(dest, target, relativePath, TaskListener.NULL);
                            } catch (InterruptedException x) {
                                throw new IOException(x);
                            }
                            count.incrementAndGet();
                        }
                    });
                    return count.get();
                }
            });
        } else
        if(this.channel==null) {
            // local -> remote copy
            final Pipe pipe = Pipe.createLocalToRemote();

            Future<Void> future = target.actAsync(new FileCallable<Void>() {
                private static final long serialVersionUID = 1L;
                public Void invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        readFromTar(remote + '/' + description, f,TarCompression.GZIP.extract(pipe.getIn()));
                        return null;
                    } finally {
                        pipe.getIn().close();
                    }
                }
            });
            int r = writeToTar(new File(remote), scanner, TarCompression.GZIP.compress(pipe.getOut()));
            try {
                future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
            return r;
        } else {
            // remote -> local copy
            final Pipe pipe = Pipe.createRemoteToLocal();

            Future<Integer> future = actAsync(new FileCallable<Integer>() {
                private static final long serialVersionUID = 1L;
                public Integer invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        return writeToTar(f, scanner, TarCompression.GZIP.compress(pipe.getOut()));
                    } finally {
                        pipe.getOut().close();
                    }
                }
            });
            try {
                readFromTar(remote + '/' + description,new File(target.remote),TarCompression.GZIP.extract(pipe.getIn()));
            } catch (IOException e) {// BuildException or IOException
                try {
                    future.get(3,TimeUnit.SECONDS);
                    throw e;    // the remote side completed successfully, so the error must be local
                } catch (ExecutionException x) {
                    // report both errors
                    throw new IOException2(Functions.printThrowable(e),x);
                } catch (TimeoutException _) {
                    // remote is hanging
                    throw e;
                }
            }
            try {
                return future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
        }
    }",Copies files according to a specified scanner to a target node.,1,1016
2566,"public int getActivatedPosition() {
		List<Integer> selectedPositions = mAdapter.getSelectedPositions();
		if (mAdapter.getMode() == SelectableAdapter.MODE_SINGLE &&
				selectedPositions.size() == 1) {
			return selectedPositions.get(0);
		}
		return RecyclerView.NO_POSITION;
	}",Gets the activated position only when mode is  MODE_SINGLE.,1,87
2567,"public FutureTarget<TranscodeType> into(int width, int height) {
        final RequestFutureTarget<ModelType, TranscodeType> target =
                new RequestFutureTarget<ModelType, TranscodeType>(glide.getMainHandler(), width, height);
        listener(target);

        // TODO: Currently all loads must be started on the main thread...
        glide.getMainHandler().post(new Runnable() {
            @Override
            public void run() {
                if (!target.isCancelled()) {
                    into(target);
                }
            }
        });

        return target;
    }",Returns a future that can be used to do a blocking get on a background thread.,1,145
2568,"public static Rule<Date> before(Date when) {
        Preconditions.checkNotNull(when, ""When"");
        return new BeforeRule(when);
    }",Creates a  Rule which evaluates to true when passed in a date which is before the specified date.,1,46
2569,"public MethodSelectingRouter build(
                final MessageBodyWorkers workers, final List<MethodAcceptorPair> methodAcceptorPairs) {
            return new MethodSelectingRouter(services, injector, workers, methodAcceptorPairs);
        }",Create a new  MethodSelectingRouter for all the methods on the same path.,1,50
2570,"private String getAudioSystem(CaptureDeviceInfo cdi)
    {
        String res = null;
        // Here we iterate over the available audio systems
        // to be sure that the audio system 
        // is available and enabled on the system we are running on
        if(cdi.getLocator().getProtocol().equals(""javasound""))
        {
            Iterator<String> iter = audioSystems.iterator();
            while (iter.hasNext())
            {
                String asName = iter.next();
                if(asName.equals(AUDIO_SYSTEM_JAVASOUND))
                    res = asName;
            }
        }
        else if(cdi.getLocator().getProtocol().equals(""portaudio""))
        {
            Iterator<String> iter = audioSystems.iterator();
            while (iter.hasNext())
            {
                String asName = iter.next();
                if(asName.equals(AUDIO_SYSTEM_PORTAUDIO))
                    res = asName;
            }
        }

        if(res == null)
            res = AUDIO_SYSTEM_NONE;

        return res;
    }",Extracts the audio system for the given device info.,1,253
2571,"private UIFileInfo getUiFileInfo(FileSystem fileSystem, long fileId)
      throws FileDoesNotExistException, BlockDoesNotExistException, IOException, TachyonException {
    return getUiFileInfo(fileSystem, fileId, TachyonURI.EMPTY_URI);
  }",Gets the  UIFileInfo object based on file id.,1,52
2572,"public boolean clipBegin (float x, float y, float width, float height) {
		Rectangle tableBounds = Rectangle.tmp;
		tableBounds.x = x;
		tableBounds.y = y;
		tableBounds.width = width;
		tableBounds.height = height;
		Stage stage = this.stage;
		Rectangle scissorBounds = Pools.obtain(Rectangle.class);
		stage.calculateScissors(tableBounds, scissorBounds);
		if (ScissorStack.pushScissors(scissorBounds)) return true;
		Pools.free(scissorBounds);
		return false;
	}","Clips the specified screen aligned rectangle, specified relative to the transform matrix of the stage's SpriteBatch.",1,157
2573,"public boolean checkParams( Shell shell ) {
    if ( parameterTableView != null ) {
      for ( int i = 0; i < parameterTableView.getItemCount(); i++ ) {
        String[] params = parameterTableView.getItem( i );
        if ( Utils.isEmpty( params[ 0 ] ) && ( !Utils.isEmpty( params[ 1 ] ) || !Utils.isEmpty( params[ 2 ] ) ) ) {
          new SimpleMessageDialog( shell, BaseMessages.getString( ""Dialog.Parameters.Missing.Parameter.Title"" ),
            BaseMessages.getString( ""Dialog.Parameters.Missing.Parameter.Message"" ), MessageDialog.ERROR,
            BaseMessages.getString( ""System.Button.OK"" ), 350, SimpleMessageDialog.BUTTON_WIDTH ).open();
          return true;
        } else if ( !Utils.isEmpty( params[ 0 ] ) && Utils.isEmpty( params[ 1 ] ) && Utils.isEmpty( params[ 2 ] ) ) {
          new SimpleMessageDialog( shell, BaseMessages.getString( ""Dialog.Parameters.Missing.Value.Title"" ),
            BaseMessages.getString( ""Dialog.Parameters.Missing.Value.Message"" ), MessageDialog.ERROR,
            BaseMessages.getString( ""System.Button.OK"" ), 350, SimpleMessageDialog.BUTTON_WIDTH ).open();
          return true;
        }
      }
    }
    return false;
  }","If user has not entered a parameter name, but has entered a value/variable, OR if user has entered a parameter name, but not entered a value/variable.",1,370
2574,"public T singleResult(final Query query) {
        query.setMaxResults(1);
        List<T> list = list(query);
        if (CollectionUtils.isNotEmpty(list)) {
            return list.get(0);
        } else {
            return null;
        }

    }",This method will return the first result from the given query or null if no results were found,1,85
2575,"protected final ViewportPolicy getViewportPolicy() {
		return viewportPolicy;
	}",Returns the  ViewportPolicy that is used for changing the viewport within the current scroll gesture.,1,21
2576,"public static Boolean[] toObject(final boolean[] array) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_BOOLEAN_OBJECT_ARRAY;
        }
        final Boolean[] result = new Boolean[array.length];
        for (int i = 0; i < array.length; i++) {
            result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);
        }
        return result;
    }",Converts an array of primitive booleans to objects. This method returns null if null array input.,1,160
2578,"public List<FormField> getFields() {
        synchronized (fields) {
            return Collections.unmodifiableList(new ArrayList<FormField>(fields));
        }
    }",Returns a List of the fields that are part of the form.,1,47
2579,"public static Builder newBuilder(HostAccess base) {
        return EXPLICIT.new Builder(base);
    }",Configure your own access configuration based on another existing.,1,31
2580,"public int complete() throws IOException {
        int numDeletions = completeDeletions();
        LOGGER.log(Level.FINE, ""deleted {0} file(s)"", numDeletions);
        int numRenamings = completeRenamings();
        LOGGER.log(Level.FINE, ""renamed {0} file(s)"", numRenamings);
        return numDeletions + numRenamings;
    }",Complete all the tracked file operations: first in a stage for pending deletions and then in a stage for pending renamings.,1,89
2581,"/*--------------------------------------------------------------------------*/
    private boolean readTextField(UIElement field)
    {
        TextInputField textField = null;
        String variable = null;
        String value = null;
        String message = null;

        try
        {
            textField = (TextInputField) field.getComponent();
            variable = field.getAssociatedVariable();
            message = field.getMessage();
            value = textField.getText();
        }
        catch (Throwable exception)
        {
            return (true);
        }
        if ((variable == null) || (value == null))
        {
            return (true);
        }

        // validate the input
        Debug.trace(""Validating text field"");
        boolean success = textField.validateContents();
        if (!success)
        {
            Debug.trace(""Validation did not pass, message: "" + message);
            if (message == null)
            {
                message = ""Text entered did not pass validation."";
            }
            showWarningMessageDialog(parentFrame, message);
            return (false);
        }
        Debug.trace(""Field validated"");
        installData.setVariable(variable, value);
        entries.add(new TextValuePair(variable, value));
        return (true);
    }",Reads data from the text field and sets the associated variable.,1,337
2582,"public Type remove(long typeId) throws NoSuchTypeException, SystemException {
		return remove(Long.valueOf(typeId));
	}",Removes the type with the primary key from the database.,1,37
2583,"public HRegionLocation getRegionLocation(Text row) throws IOException {
    return connection.getRegionLocation(tableName, row, false);
  }",Find region location hosting passed row using cached info,1,37
2584,"public BrowseCVSModuleOperator browseModule() {
        btBrowseModule().pushNoBlock();
        return new BrowseCVSModuleOperator();
    }","clicks on ""Browse..."" JButton and returns BrowseCVSModuleOperator",1,33
2585,"public String getHost()
	{
		return StringUtils.substringBefore(getHostPort(), Constants.COLON);
	}",Gets the host.,1,32
2586,"OperationStats getOperationStats(String operationName, JavaOperationSignature sig) {
        if (sig == null) {
            return getOperationStats(operationName);
        }

        Map<String, OperationStats> sigMap = operations.get(sig);

        return sigMap == null ? null : sigMap.get(operationName);
    }",Returns the correct operation stats.,1,92
2587,"public static String repeat(char c, int n) {
		if (n <= 0) {
			return """";
		} else {
			final char[] buf = new char[n];
			fill(buf, ' ');
			return String.valueOf(buf);
		}
	}",Duplicates a char n times.,1,94
2588,"public Intent getNextStartedService() {
    if (startedServices.isEmpty()) {
      return null;
    } else {
      return startedServices.remove(0).getIntent();
    }
  }",Consumes the most recent  Intent started by  #startService(android.content.Intent) and returns it.,1,57
2589,"public WSRPConsumer remove(WSRPConsumer wsrpConsumer)
		throws SystemException {
		return super.remove(wsrpConsumer);
	}",Removes the w s r p consumer from the database.,1,32
2590,"public AttributeDecl getAttributeDecl(String name) {
        return attributes.getAttribute(name);
    } //-- getAttributeDecl",Returns the AttributeDecl associated with the given name,1,29
2591,"public String getHomeDir() {
        return home;
    }",Returns the repository home directory.,1,19
2592,"public IGerritHudsonTriggerConfig getConfig(String serverName) {
        GerritServer server = PluginImpl.getInstance().getServer(serverName);
        if (server != null) {
            return server.getConfig();
        } else {
            logger.error(""Could not find the Gerrit Server: {}"", serverName);
        }
        return null;
    }",Shortcut method to get the config from  com.sonyericsson.hudson.plugins.gerrit.trigger.GerritServer.,1,89
2593,"public String getProperty() {
        return property;
    }",Get the property name,1,19
2594,"public Connector getConnector(Class<? extends Connector> cls) {
    List<ConnectorConfiguration> configs = getConnectorConfigurations(cls);
    if (!configs.isEmpty()) {
      return getConnector(configs.get(0).getId());
    } else {
      return null;
    }
  }",Return the first connector with the given class or null if none was found,1,87
2595,"public int compareTo(Object other) {
        if (other == this) {
            return 0;
        }
        if (other.getClass() != this.getClass()) {
            if (other.getClass().getName().equals(this.getClass().getName())) {
                return iValue - getValueInOtherClassLoader(other);
            }
            throw new ClassCastException(
                    ""Different enum class '"" + ClassUtils.getShortClassName(other.getClass()) + ""'"");
        }
        return iValue - ((ValuedEnum) other).iValue;
    }","Tests for order. The default ordering is numeric by value, but this can be overridden by subclasses. NOTE: From v2.2 the enums must be of the same type.",1,162
2596,"private static long loadUid(File directory, File[] files) throws IOException {
    if (files != null) {
      for (File file : files) {
        String fileName = file.getName();
        if (fileName.endsWith(UID_FILE_SUFFIX)) {
          try {
            return parseUid(fileName);
          } catch (NumberFormatException e) {
            // This should never happen, but if it does delete the malformed UID file and continue.
            Log.e(TAG, ""Malformed UID file: "" + file);
            file.delete();
          }
        }
      }
    }
    return createUid(directory);
  }","Loads the cache UID from the files belonging to the root directory, generating one if needed.",1,163
2597,"private int rmInternal(String path) {
    final AlluxioURI turi = mPathResolverCache.getUnchecked(path);

    try {
      mFileSystem.delete(turi);
    } catch (FileDoesNotExistException e) {
      LOG.debug(""File does not exist {}"", path, e);
      return -ErrorCodes.ENOENT();
    } catch (IOException e) {
      LOG.error(""IOException on {}"", path, e);
      return -ErrorCodes.EIO();
    } catch (DirectoryNotEmptyException e) {
      LOG.error(""{} is not empty"", path, e);
      return -ErrorCodes.ENOTEMPTY();
    } catch (AlluxioException e) {
      LOG.error(""AlluxioException on {}"", path, e);
      return -ErrorCodes.EFAULT();
    } catch (Throwable e) {
      LOG.error(""Unexpected exception on {}"", path, e);
      return -ErrorCodes.EFAULT();
    }

    return 0;
  }",Convenience internal method to remove files or non-empty directories.,1,263
2598,"public static String abbreviate(final String str, final String abbrevMarker, int offset, final int maxWidth) {
        if (isEmpty(str) || isEmpty(abbrevMarker)) {
            return str;
        }

        final int abbrevMarkerLength = abbrevMarker.length();
        final int minAbbrevWidth = abbrevMarkerLength + 1;
        final int minAbbrevWidthOffset = abbrevMarkerLength + abbrevMarkerLength + 1;

        if (maxWidth < minAbbrevWidth) {
            throw new IllegalArgumentException(String.format(""Minimum abbreviation width is %d"", minAbbrevWidth));
        }
        if (str.length() <= maxWidth) {
            return str;
        }
        if (offset > str.length()) {
            offset = str.length();
        }
        if (str.length() - offset < maxWidth - abbrevMarkerLength) {
            offset = str.length() - (maxWidth - abbrevMarkerLength);
        }
        if (offset <= abbrevMarkerLength+1) {
            return str.substring(0, maxWidth - abbrevMarkerLength) + abbrevMarker;
        }
        if (maxWidth < minAbbrevWidthOffset) {
            throw new IllegalArgumentException(String.format(""Minimum abbreviation width with offset is %d"", minAbbrevWidthOffset));
        }
        if (offset + maxWidth - abbrevMarkerLength < str.length()) {
            return abbrevMarker + abbreviate(str.substring(offset), abbrevMarker, maxWidth - abbrevMarkerLength);
        }
        return abbrevMarker + str.substring(str.length() - (maxWidth - abbrevMarkerLength));
    }",Abbreviates a String using a given replacement marker.,1,431
2599,"public static long barrett(long number, int q, int barrettMultiplication, int barrettDivision)
    {

        return number - ((number * barrettMultiplication) >> barrettDivision) * q;

    }",Description: Barrett Reduction for Provably-Secure qTESLA Security Category-1 and,1,63
2600,"HsqlArrayList getTables() {
        return tTable;
    }",Retrieves a HsqlArrayList containing references to all registered non-system tables and views.,1,17
2601,"public static FsMasterResource createLeaderFileSystemMasterFromJournal() throws Exception {
    return createFileSystemMasterFromJournal(true, null);
  }","Creates a new leader  FileSystemMaster from journal along with its dependencies, and returns the master registry and the journal system.",1,31
2602,"public synchronized ClientDependencyInfo getClientDependencyInfo(int depId) throws IOException {
    return mMasterClient.getClientDependencyInfo(depId);
  }",Get a ClientDependencyInfo by the dependency id,1,33
2603,"@Override
    public Unit<Angle> getAngularUnit() {
        return Units.DEGREE;
    }","Returns the angular unit, which is fixed to  Units#DEGREE.",1,27
2604,"public boolean offer(final AtomicBuffer buffer, final int offset, final int length)
    {
        if (!canAppend())
        {
            return false;
        }

        final LogAppender logAppender = logAppenders[currentBuffer];
        final boolean hasAppended = logAppender.append(buffer, offset, length);
        if (!hasAppended)
        {
            currentBuffer = rotateId(currentBuffer);
            rollTerm();
        }

        return hasAppended;
    }",Non-blocking send of a partial buffer.,1,132
2605,"public List<RosterGroup> getGroups() {
        List<RosterGroup> results = new ArrayList<RosterGroup>();
        // Loop through all roster groups and find the ones that contain this
        // entry. This algorithm should be fine
        for (RosterGroup group: roster.getGroups()) {
            if (group.contains(this)) {
                results.add(group);
            }
        }
        return results;
    }",Returns an copied list of the roster groups that this entry belongs to.,1,95
2606,"public static XDoubleListValue addDoubleToList(XID actorID, XField field, double doub) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XDoubleListValue) {
			XDoubleListValue listValue = (XDoubleListValue)value;
			
			// manipulate the contained list
			listValue = addDoubleToList(listValue, listValue.size(), doub);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Appends a new Double to end of the  XDoubleListValue of the given  XField,1,153
2607,"public RequestKey combine(RequestKey other, PathMatcher pathMatcher) {
		Set<String> patterns = combinePatterns(this.patterns, other.patterns, pathMatcher);
		Set<RequestMethod> methods = union(this.methods, other.methods);
		RequestCondition params = RequestConditionFactory.and(this.paramsCondition, other.paramsCondition);
		RequestCondition headers = RequestConditionFactory.and(this.headersCondition, other.headersCondition);

		return new RequestKey(patterns, methods, params, headers, null);
	}",Combines this  RequestKey with another.,1,138
2608,"public ActivitiRequestObject getBody() {
    try {
      return new JSONRequestObject(req);
    } catch (IOException e) {
      throw new WebScriptException(Status.STATUS_BAD_REQUEST, ""Can't read obj"");
    }
  }",Returns the webscript request obj in an abstracted form so multiple formats may be implemented seamlessly in the future.,1,63
2609,"public MongoCursor<T> execute() {
        ServerConnectionProvider provider = getSession().createServerConnectionProvider(getServerConnectionProviderOptions());
        CommandResult commandResult = new CommandProtocol(namespace.getDatabaseName(), command, commandCodec, resultDecoder,
                                                          getBufferProvider(), provider.getServerDescription(), provider.getConnection(),
                                                          isCloseSession())
                                          .execute();

        if (mapReduce.isInline()) {
            return new InlineMongoCursor<T>(commandResult, (List<T>) commandResult.getResponse().get(""results""));
        } else {
            return new MongoQueryCursor(getResultsNamespaceFromResponse(commandResult.getResponse(), namespace.getDatabaseName()),
                                        new Find(),
                                        commandCodec,
                                        collectibleDecoder,
                                        getBufferProvider(),
                                        getSession(),
                                        isCloseSession());
        }
    }",Executing this will return a cursor with your results in.,1,213
2610,"public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, StrategiesSupplier strategies) {
		Assert.notNull(routerFunction, ""'routerFunction' must not be null"");
		Assert.notNull(strategies, ""'strategies' must not be null"");

		return new HttpWebHandlerAdapter(exchange -> {
			Request request = new DefaultRequest(exchange, strategies);
			addAttributes(exchange, request);

			HandlerFunction<?> handlerFunction = routerFunction.route(request).orElse(notFound());
			Response<?> response = handlerFunction.handle(request);
			return response.writeTo(exchange, strategies);
		});
	}","Converts the given plain RouterFunction routing function into a  HttpHandler, using the given strategies.",1,160
2611,"public static byte[] copyOfRange(byte[] original, int from, int to)
    {
        int newLength = getLength(from, to);
        byte[] copy = new byte[newLength];
        System.arraycopy(original, from, copy, 0, Math.min(original.length - from, newLength));
        return copy;
    }",Make a copy of a range of bytes from the passed in array.,1,107
2612,"public ClientSession createClientSession(Connection conn, StreamID id)
            throws UnauthorizedException {
        if (serverName == null) {
            throw new UnauthorizedException(""Server not initialized"");
        }
        ClientSession session = new ClientSession(serverName, conn, id);
        conn.init(session);
        // Register to receive close notification on this session so we can
        // remove  and also send an unavailable presence if it wasn't
        // sent before
        conn.registerCloseListener(clientSessionListener, session);

        // Add to pre-authenticated sessions.
        preAuthenticatedSessions.put(session.getAddress().getResource(), session);
        return session;
    }",Creates a new ClientSession with the specified streamID.,1,137
2613,"protected Dimension calculatePreferredSize(IFigure container, int wHint, int hHint){
	ScrollPane scrollpane = (ScrollPane)container;
	ScrollBar hBar = scrollpane.getHorizontalScrollBar();
	ScrollBar vBar = scrollpane.getVerticalScrollBar();
	Insets insets = scrollpane.getInsets();

	int reservedWidth = insets.getWidth();
	int reservedHeight = insets.getHeight();

	if (scrollpane.getVerticalScrollBarVisibility() != ScrollPane.NEVER)
		reservedWidth += vBar.getPreferredSize().width;
	if (scrollpane.getHorizontalScrollBarVisibility() != ScrollPane.NEVER)
		reservedHeight += hBar.getPreferredSize().height;

	if (wHint > -1)
		wHint = Math.max(0, wHint - reservedWidth);
	if (hHint > -1)
		hHint = Math.max(0, hHint - reservedHeight);

	return scrollpane
		.getViewport()
		.getPreferredSize(wHint, hHint)
		.getExpanded(reservedWidth, reservedHeight);
}",Calculates and returns the preferred size of the container based on the given hints.,1,273
2614,"public static BlockInStream create(FileSystemContext context, long blockId, long blockSize,
      WorkerNetAddress address, BlockInStreamSource blockSource,
      Protocol.OpenUfsBlockOptions openUfsBlockOptions, InStreamOptions options)
          throws IOException {
    if (Configuration.getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED)
        && !NettyUtils.isDomainSocketSupported(address)
        && blockSource == BlockInStreamSource.LOCAL) {
      try {
        LOG.debug(""Creating short circuit input stream for block {} @ {}"", blockId, address);
        return createLocalBlockInStream(context, address, blockId, blockSize, options);
      } catch (NotFoundException e) {
        // Failed to do short circuit read because the block is not available in Alluxio.
        // We will try to read from UFS via netty. So this exception is ignored.
        LOG.warn(""Failed to create short circuit input stream for block {} @ {}"", blockId, address);
      }
    }
    Protocol.ReadRequest.Builder builder = Protocol.ReadRequest.newBuilder().setBlockId(blockId)
        .setPromote(options.getAlluxioStorageType().isPromote());
    if (openUfsBlockOptions != null) {
      builder.setOpenUfsBlockOptions(openUfsBlockOptions);
    }

    LOG.debug(""Creating netty input stream for block {} @ {} from client {}"", blockId, address,
        NetworkAddressUtils.getClientHostName());
    return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),
        blockSize, options);
  }",Creates an  BlockInStream that reads from a local block.,1,304
2615,"public static String getString(String key, Object... values) {
        if (getBundle().containsKey(key)) {
            return MessageFormat.format(getBundle().getString(key), values);
        }
        else {
            return ""\"""" + key + ""\"" not found"";
        }
    }",Returns localised text as result of lookup with key using values as parameters for the text.,1,93
2616,"public Iterator<Ava> iterator()
    {
        if ( nbAvas == 1 || nbAvas == 0 )
        {
            return new Iterator<Ava>()
            {
                private boolean hasMoreElement = nbAvas == 1;


                public boolean hasNext()
                {
                    return hasMoreElement;
                }


                public Ava next()
                {
                    Ava obj = ava;
                    hasMoreElement = false;
                    return obj;
                }


                public void remove()
                {
                    // nothing to do
                }
            };
        }
        else
        {
            return avas.iterator();
        }
    }",Retrieves the components of this Rdn as an iterator of Avas.,1,186
2617,"public long lockBlock(long userId, long blockId, BlockLockType blockLockType) throws IOException {
    // TODO: generate real hashValue on blockID.
    int hashValue = (int) (blockId % (long) NUM_LOCKS);
    ClientRWLock blockLock = mLockArray.get(hashValue);
    Lock lock;
    if (blockLockType == BlockLockType.READ) {
      lock = blockLock.readLock();
    } else { // blockLockType == BlockLockType.WRITE
      lock = blockLock.writeLock();
    }
    lock.lock();
    if (!mMetaManager.hasBlockMeta(blockId)) {
      lock.unlock();
      throw new IOException(""No blockId "" + blockId + ""found"");
    }
    long lockId = LOCK_ID_GEN.getAndIncrement();
    synchronized (mSharedMapsLock) {
      mLockIdToRecordMap.put(lockId, new LockRecord(userId, blockId, lock));
      Set<Long> userLockIds = mUserIdToLockIdsMap.get(userId);
      if (null == userLockIds) {
        mUserIdToLockIdsMap.put(userId, Sets.newHashSet(lockId));
      } else {
        userLockIds.add(lockId);
      }
    }
    return lockId;
  }","Lock a block if it exists, throw IOException otherwise.",1,310
2618,"public static int getLaunchProperty() {
		String s = System.getProperty(""findbugs.launchUI"", ""gui2"");

		// See if the property value is one of the human-readable
		// UI names.
		if (uiNameToCodeMap.containsKey(s)) {
			return uiNameToCodeMap.get(s);
		}

		// Fall back: try to parse it as an integer.
		try {
			return Integer.parseInt(s);
		} catch (NumberFormatException nfe) {
			return 2;
		}
	}","User should set the findbugs.launchUI system property to one of the following values:  -Dfindbugs.launchUI=textui for textui,   -Dfindbugs.launchUI=gui1 for the original swing gui,   -Dfindbugs.launchUI=gui2 for the new swing gui,   -Dfindbugs.launchUI=version for the ShowVersion main() method, or   -Dfindbugs.launchUI=help for the ShowHelp main() method.",1,114
2619,"public Duration getMaxInclusive() {
        return _maxInclusive;
    } //-- getMaxInclusive",Returns the maximum inclusive value that this XSDuration can hold.,1,21
2620,"public SWTBotRootMenu contextMenu() throws WidgetNotFoundException {
		if (widget instanceof Control) {
			return contextMenu((Control) widget);
		}
		throw new WidgetNotFoundException(""Could not find context menu for widget: "" + widget); //$NON-NLS-1$
	}",Gets the context menu of this widget.,1,65
2621,"private EntityRef getEntityRef(RecordedEvent recordedEvent) {
        return this.entityManager.getEntity(recordedEvent.getEntityId());
    }","Since only the EntityRef's id is saved in the RecordedEvent, it is necessary to get the real EntityRef when processing a RecordedEvent.",1,33
2622,"ExtensionModel getExtension(String name)
    {
        return extensions.get(name);
    }",Returns a registered  ExtensionModel of the given  name,1,26
2623,"public static NamedCompound upgradePdfPsToFile(BibDatabase database, String[] fields) {
        NamedCompound ce = new NamedCompound(Localization.lang(""Move external links to 'file' field""));

        for (BibEntry entry : database.getEntryMap().values()) {
            upgradePdfPsToFile(entry, fields, ce);
        }

        ce.end();
        return ce;
    }","Collect file links from the given set of fields, and add them to the list contained in the field",1,102
2624,"public ZonedDateTime getCreated() {
        return created;
    }",Get the ZonedDateTime that this Token was Created,1,19
2625,"public Object caseScale( Scale object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Scale'.,1,25
2626,"default String getClaimAsString(String claim) {
		if (!this.containsClaim(claim)) {
			return null;
		}
		Object claimValue = this.getClaims().get(claim);
		return (claimValue != null ? claimValue.toString() : null);
	}",Returns the claim value as a  String or  null if it does not exist or is equal to  null.,1,84
2628,"public RVMMethod peekResolvedMethod() {
    if (resolvedMember != null) return resolvedMember;

    // Hasn't been resolved yet. Try to do it now without triggering class loading.
    RVMClass declaringClass = (RVMClass) type.peekType();
    if (declaringClass == null) return null;
    return resolveInternal(declaringClass);
  }",Find the RVMMethod that this method reference refers to using the search order specified in JVM spec 5.4.3.3.,1,78
2629,"public List<InterceptorFactory> getPostConstructInterceptors() {
        return postConstructInterceptors.getSortedItems();
    }",Get the post-construct interceptors.,1,26
2630,"protected ActionResult performPageAction(Page page, String pageAction, Context context) {
        ActionResult actionResult = ClickUtils.invokeAction(page, pageAction);

        if (logger.isTraceEnabled()) {
            HtmlStringBuffer buffer = new HtmlStringBuffer();
            String pageClassName = ClassUtils.getShortClassName(page.getClass());
            buffer.append(""   invoked: "");
            buffer.append(pageClassName);
            buffer.append(""."").append(pageAction).append(""() : "");
            if (actionResult == null) {
                buffer.append(""null (*no* ActionResult was returned by PageAction)"");
            } else {
                buffer.append(ClassUtils.getShortClassName(actionResult.getClass()));
            }
            logger.trace(buffer.toString());
        }
        return actionResult;
    }",Perform the page action for the given page and return the action result.,1,209
2631,"public MqttAndroidClient createClient(Context context, String serverURI, String clientId)
  {
    MqttAndroidClient client = new MqttAndroidClient(context, serverURI, clientId);
    return client;
  }",Create a fully initialised MqttAndroidClient for the parameters given,1,54
2632,"protected ChangeViewportPolicy getViewportPolicy() {
		return viewportPolicy;
	}",Returns the  ChangeViewportPolicy that is used for changing the viewport within the current scroll gesture.,1,19
2633,"List<String> readOsRelease() throws IOException {
        final List<String> lines;
        if (Files.exists(PathUtils.get(""/etc/os-release""))) {
            lines = Files.readAllLines(PathUtils.get(""/etc/os-release""));
            assert lines != null && lines.isEmpty() == false;
            return lines;
        } else if (Files.exists(PathUtils.get(""/usr/lib/os-release""))) {
            lines = Files.readAllLines(PathUtils.get(""/usr/lib/os-release""));
            assert lines != null && lines.isEmpty() == false;
            return lines;
        } else if (Files.exists(PathUtils.get(""/etc/system-release""))) {
            // fallback for older Red Hat-like OS
            lines = Files.readAllLines(PathUtils.get(""/etc/system-release""));
            assert lines != null && lines.size() == 1;
            return Collections.singletonList(""PRETTY_NAME=\"""" + lines.get(0) + ""\"""");
        } else {
            return Collections.emptyList();
        }
    }","The lines from  /etc/os-release or  /usr/lib/os-release as a fallback, with an additional fallback to  /etc/system-release.",1,299
2634,"public static FragmentHandler rateReporterHandler(final RateReporter reporter)
    {
        return (buffer, offset, length, header) -> reporter.onMessage(1, length);
    }","Return a reusable, parameteried  FragmentHandler that calls into a  RateReporter.",1,51
2635,"public static List<Class<? extends CompressionCodec>> getCodecClasses(Configuration conf) {
    List<Class<? extends CompressionCodec>> result
      = new ArrayList<Class<? extends CompressionCodec>>();
    // Add codec classes discovered via service loading
    for (CompressionCodec codec : CODEC_PROVIDERS) {
      result.add(codec.getClass());
    }
    // Add codec classes from configuration
    String codecsString = conf.get(""io.compression.codecs"");
    if (codecsString != null) {
      StringTokenizer codecSplit = new StringTokenizer(codecsString, "","");
      while (codecSplit.hasMoreElements()) {
        String codecSubstring = codecSplit.nextToken();
        if (codecSubstring.length() != 0) {
          try {
            Class<?> cls = conf.getClassByName(codecSubstring);
            if (!CompressionCodec.class.isAssignableFrom(cls)) {
              throw new IllegalArgumentException(""Class "" + codecSubstring +
                                                 "" is not a CompressionCodec"");
            }
            result.add(cls.asSubclass(CompressionCodec.class));
          } catch (ClassNotFoundException ex) {
            throw new IllegalArgumentException(""Compression codec "" + 
                                               codecSubstring + "" not found."",
                                               ex);
          }
        }
      }
    }
    return result;
  }","Get the list of codecs discovered via a Java ServiceLoader, or listed in the configuration.",1,339
2636,"public static DnsProtocolUdpCodecFactory getInstance()
    {
        return INSTANCE;
    }",Returns the singleton instance of  DnsProtocolUdpCodecFactory.,1,22
2637,"public RequestMappingInfo getMatchingRequestMapping(String lookupPath, HttpServletRequest request, PathMatcher pathMatcher) {
		ParamsRequestCondition matchingParamsCondition = paramsCondition.getMatchingCondition(request);
		HeadersRequestCondition matchingHeadersCondition = headersCondition.getMatchingCondition(request);
		ConsumesRequestCondition matchingConsumesCondition = consumesCondition.getMatchingCondition(request);

		if (!checkMethod(request) || matchingParamsCondition == null || matchingHeadersCondition == null ||
				matchingConsumesCondition == null) {
			return null;
		}
		else {
			List<String> matchingPatterns = getMatchingPatterns(lookupPath, request, pathMatcher);
			if (!matchingPatterns.isEmpty()) {
				Set<RequestMethod> matchingMethods = getMatchingMethod(request);
				return new RequestMappingInfo(matchingPatterns, matchingMethods, matchingParamsCondition,
						matchingHeadersCondition, matchingConsumesCondition);
			}
			else {
				return null;
			}
		}
	}",Returns a new  RequestMappingInfo that contains all conditions of this key that are relevant to the request.,1,226
2638,"public InjectionSite getMemberSite() {
        return injectionSite;
    }",Returns the InjectionSite that this property is mapped to.,1,19
2639,"public GeoJsonFeature getFeature(Polygon polygon) {
        return mRenderer.getFeature(polygon);
    }",Retrieves a corresponding GeoJsonFeature instance for the given Polygon,1,27
2640,"private MulePluginLoaderProperty build() {
      checkArgument(!isBlank(id), ""ID cannot be a blank"");
      return new MulePluginLoaderProperty(id, properties);
    }",Creates and returns a new  MulePluginLoaderProperty according to the values set,1,43
2641,"public static <T> List<T> drop(Iterable<T> self, int num) {
        return toList(drop(self.iterator(), num));
    }",Drops the given number of elements from the head of this Iterable.,1,52
2642,"public I18nMessage mapIsEmpty() {
    return createMessage(bundlePath, 12);
  }",Generates a  I18nMessage for a map that was expected to be not empty but was,1,25
2643,"public static String getDisplayScript(String localeID, String displayLocaleID) {
	return getDisplayScript(localeID, new ULocale(displayLocaleID));
    }",Return a locale's script localized for display in the provided locale.,1,40
2644,"public static Vec categoricalDomainsToNumeric(final Vec src) {
    if( !src.isCategorical() ) throw new H2OIllegalArgumentException(""categoricalToNumeric() conversion only works on categorical columns"");
    // check if the 1st lvl of the domain can be parsed as int
    return new MRTask() {
        @Override public void map(Chunk c) {
          for (int i=0;i<c._len;++i)
            if( !c.isNA(i) )
              c.set(i, Integer.parseInt(src.domain()[(int)c.at8(i)]));
        }
      }.doAll(Vec.T_NUM, src).outputFrame().anyVec();
  }",Create a new vector of numeric values from a categorical vector.,1,167
2645,"public List<ShardRouting> getAssignedShards() {
        return this.assignedShards;
    }",Returns a  List of assigned shards,1,24
2646,"private ColumnFamily getThroughCache(UUID cfId, QueryFilter filter)
    {
        assert isRowCacheEnabled()
               : String.format(""Row cache is not enabled on column family ["" + name + ""]"");

        RowCacheKey key = new RowCacheKey(cfId, filter.key);

        // attempt a sentinel-read-cache sequence.  if a write invalidates our sentinel, we'll return our
        // (now potentially obsolete) data, but won't cache it. see CASSANDRA-3862
        IRowCacheEntry cached = CacheService.instance.rowCache.get(key);
        if (cached != null)
        {
            if (cached instanceof RowCacheSentinel)
            {
                // Some other read is trying to cache the value, just do a normal non-caching read
                Tracing.trace(""Row cache miss (race)"");
                return getTopLevelColumns(filter, Integer.MIN_VALUE);
            }
            Tracing.trace(""Row cache hit"");
            return (ColumnFamily) cached;
        }

        Tracing.trace(""Row cache miss"");
        RowCacheSentinel sentinel = new RowCacheSentinel();
        boolean sentinelSuccess = CacheService.instance.rowCache.putIfAbsent(key, sentinel);

        try
        {
            ColumnFamily data = getTopLevelColumns(QueryFilter.getIdentityFilter(filter.key, name, filter.timestamp),
                                                   Integer.MIN_VALUE);
            if (sentinelSuccess && data != null)
                CacheService.instance.rowCache.replace(key, sentinel, data);

            return data;
        }
        finally
        {
            if (sentinelSuccess && data == null)
                invalidateCachedRow(key);
        }
    }","fetch the row given by filter.key if it is in the cache; if not, read it from disk and cache it",1,351
2647,"public static String resolveUrlToHandle(Context context, String url)
            throws SQLException
    {
        String dspaceUrl = ConfigurationManager.getProperty(""dspace.url"")
                + ""/handle/"";
        String handleResolver = ConfigurationManager.getProperty(""handle.canonical.prefix"");
        
        String handle = null;
        
        if (url.startsWith(dspaceUrl))
        {
            handle = url.substring(dspaceUrl.length());
        }
        
        if (url.startsWith(handleResolver))
        {
            handle = url.substring(handleResolver.length());
        }
        
        if (null == handle)
        {
            return null;
        }
        
        // remove trainling slashes
        while (handle.startsWith(""/""))
        {
            handle = handle.substring(1);
        }
        TableRow dbhandle = findHandleInternal(context, handle);
        
        return (null == dbhandle) ? null : handle;
    }",Try to detect a handle in a URL.,1,259
2648,"public DownloadAction[] load() throws IOException {
    if (!actionFile.exists()) {
      return new DownloadAction[0];
    }
    InputStream inputStream = null;
    try {
      inputStream = atomicFile.openRead();
      DataInputStream dataInputStream = new DataInputStream(inputStream);
      int version = dataInputStream.readInt();
      if (version > VERSION) {
        throw new IOException(""Unsupported action file version: "" + version);
      }
      int actionCount = dataInputStream.readInt();
      DownloadAction[] actions = new DownloadAction[actionCount];
      for (int i = 0; i < actionCount; i++) {
        actions[i] = DownloadAction.deserializeFromStream(dataInputStream);
      }
      return actions;
    } finally {
      Util.closeQuietly(inputStream);
    }
  }",Loads  DownloadActions from file.,1,238
2649,"public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the last index of the given object in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex will return  #INDEX_NOT_FOUND (-1).,1,253
2650,"public JniTime getCurrentEventTimestamp() {
        return currentEventTimestamp;
    }",Getter for the last read event timestamp,1,19
2651,"public List<ObjectCountPair<String>> getNbrOfFailureCategoriesPerName(GraphFilterBuilder filter, int limit) {
        return null;
    }",Gets a list of  ObjectCountPair where each pair contains a unique failure category string as key and the number of times that the failure cause category was triggered as count.,1,33
2652,"public Map execute(FileSystem fs) throws IOException {
      StatusPairs sp = new StatusPairs(fs, path, filter);
      return sp.toJson();
    }",Returns data for a JSON Map containing the information for the set of files in 'path' that match 'filter'.,1,51
2653,"public CompareToBuilder append(boolean[] lhs, boolean[] rhs) {
        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null) {
            comparison = -1;
            return this;
        }
        if (rhs == null) {
            comparison = +1;
            return this;
        }
        if (lhs.length != rhs.length) {
            comparison = (lhs.length < rhs.length) ? -1 : +1;
            return this;
        }
        for (int i = 0; i < lhs.length && comparison == 0; i++) {
            append(lhs[i], rhs[i]);
        }
        return this;
    }","Deep comparison of a boolean/code> array.  Check if arrays are same using == Check if either is null, a null array is less than a non-null Check array length, a shorter length array is less than a longer length array Check array contents element by element using  #append(boolean, boolean)",1,254
2654,"public boolean doInAsyncProducer(Endpoint endpoint, Exchange exchange, ExchangePattern pattern, AsyncCallback callback, AsyncProducerCallback producerCallback) {
        boolean sync = true;

        // get the producer and we do not mind if its pooled as we can handle returning it back to the pool
        Producer producer = doGetProducer(endpoint, true);

        if (producer == null) {
            if (isStopped()) {
                LOG.warn(""Ignoring exchange sent after processor is stopped: "" + exchange);
                return false;
            } else {
                throw new IllegalStateException(""No producer, this processor has not been started: "" + this);
            }
        }

        StopWatch watch = null;
        if (exchange != null) {
            // record timing for sending the exchange using the producer
            watch = new StopWatch();
        }

        try {
            // invoke the callback
            AsyncProcessor asyncProcessor = AsyncProcessorTypeConverter.convert(producer);
            sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, callback);
        } catch (Throwable e) {
            // ensure exceptions is caught and set on the exchange
            if (exchange != null) {
                exchange.setException(e);
            }
        } finally {
            if (exchange != null) {
                long timeTaken = watch.stop();
                // emit event that the exchange was sent to the endpoint
                EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);
            }
            if (producer instanceof ServicePoolAware) {
                // release back to the pool
                pool.release(endpoint, producer);
            } else if (!producer.isSingleton()) {
                // stop non singleton producers as we should not leak resources
                try {
                    ServiceHelper.stopService(producer);
                } catch (Exception e) {
                    // ignore and continue
                    LOG.warn(""Error stopping producer: "" + producer, e);
                }
            }
        }

        return sync;
    }",Sends an exchange to an endpoint using a supplied callback supporting the asynchronous routing engine.,1,453
2655,"public static String getMimeType(String value) {
        if (value == null) {
            throw new IllegalArgumentException(""null filename/extension parameter"");
        }

        String ext = value;

        int index = value.lastIndexOf(""."");
        if (index != -1) {
            ext = value.substring(index + 1);
        }

        try {
            ResourceBundle bundle = getBundle(""org/apache/click/util/mime-type"");

            return bundle.getString(ext.toLowerCase());

        } catch (MissingResourceException mre) {
            return null;
        }
    }",Return the mime-type or content-type for the given filename/extension.,1,172
2656,"public static UnicodeSet getExemplarSet(ULocale locale, int options) {
        ICUResourceBundle bundle = (ICUResourceBundle)UResourceBundle.getBundleInstance(UResourceBundle.ICU_BASE_NAME, locale);
        String pattern = bundle.getString(EXEMPLAR_CHARS);
        return new UnicodeSet(pattern, UnicodeSet.IGNORE_SPACE | options);
    }",Returns the set of exemplar characters for a locale.,1,81
2657,"public static CiConstant forWord(Number i) {
        if (i instanceof Integer || i instanceof Long) {
            return new CiConstant(CiKind.Word, i); // only Integer and Long are allowed
        }
        throw new IllegalArgumentException(""cannot create word constant for object of type "" + i.getClass());
    }",Utility method to create a value type for a word constant.,1,82
2658,"public static <T> T notNull(T object) {
        return notNull(object, DEFAULT_IS_NULL_EXCEPTION_MESSAGE);
    }",Validate that the specified argument is not null; otherwise throwing an exception.,1,34
2659,"public String validateAntFileMask(final String fileMasks) throws IOException, InterruptedException {
        return act(new FileCallable<String>() {
            public String invoke(File dir, VirtualChannel channel) throws IOException {
                StringTokenizer tokens = new StringTokenizer(fileMasks);

                OUTER:
                while(tokens.hasMoreTokens()) {
                    final String fileMask = tokens.nextToken().trim();
                    String previous = null;
                    String pattern = fileMask;

                    while(true) {
                        FileSet fs = new FileSet();
                        fs.setDir(dir);
                        fs.setIncludes(pattern);

                        DirectoryScanner ds = fs.getDirectoryScanner(new org.apache.tools.ant.Project());

                        if(ds.getIncludedFilesCount()!=0 || ds.getIncludedDirsCount()!=0) {
                            // found a match
                            if(pattern.equals(fileMask))
                                continue OUTER;    // no error
                            if(previous==null)
                                return String.format(""'%s' doesn't match anything, although '%s' exists"",
                                    fileMask, pattern );
                            else
                                return String.format(""'%s' doesn't match anything: '%s' exists but not '%s'"",
                                    fileMask, pattern, previous );
                        }

                        int idx = Math.max(pattern.lastIndexOf('\\'),pattern.lastIndexOf('/'));
                        if(idx<0) {
                            if(pattern.equals(fileMask))
                                return String.format(""'%s' doesn't match anything"", fileMask );
                            else
                                return String.format(""'%s' doesn't match anything: even '%s' doesn't exist"",
                                    fileMask, pattern );
                        }

                        // cut off the trailing component and try again
                        previous = pattern;
                        pattern = pattern.substring(0,idx);
                    }
                }

                return null; // no error
            }
        });
    }","Validates the ant file mask (like ""foo/bar/.txt, zot/.jar"") against this directory, and try to point out the problem.",1,457
2660,"public String getPath(Uri uri) {
        String[] projection = { MediaStore.Images.Media.DATA };
        Cursor cursor = managedQuery(uri, projection, null, null, null);
        if (cursor != null) {
            int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
            cursor.moveToFirst();
            return cursor.getString(column_index);
        } 
        return null;
    }",Translates a content URI of an image to a physical path on the disk,1,129
2661,"public KBArticle remove(long kbArticleId)
		throws NoSuchArticleException, SystemException {
		return remove(Long.valueOf(kbArticleId));
	}",Removes the k b article with the primary key from the database.,1,38
2662,"public Object getSalt(UserDetails user) {
        Method saltMethod = findSaltMethod(user);

        try {            
            return saltMethod.invoke(user, new Object[] {});
        } catch (Exception exception) {
            throw new AuthenticationServiceException(exception.getMessage(), exception);
        }
    }",Performs reflection on the passed User to obtain the salt.,1,91
2663,"public static HttpServer createHttpServer(final URI uri, final ApplicationHandler appHandler, boolean start) {
        return createHttpServer(uri, new JdkHttpHandlerContainer(appHandler), start);
    }",Create (and possibly start) the  HttpServer JDK HttpServer with the JAX-RS / Jersey application deployed on the given  URI.,1,52
2664,"@SuppressWarnings(""unchecked"")
        @Override
        public <U> LeftProjection<U, R> map(Function<? super L, ? extends U> mapper) {
            Objects.requireNonNull(mapper);
            if (either.isLeft())
                return Left.<U, R>of(mapper.apply(asLeft())).left();
            else {
                return (LeftProjection<U, R>) this;
            }
        }",Maps the left value if the projected Either is a Left.,1,123
2665,"public final Set<CacheEventListener> getCacheEventListeners() {
        Set listenerSet = new HashSet();
        for (ListenerWrapper listenerWrapper : cacheEventListeners) {
            listenerSet.add(listenerWrapper.getListener());
        }
        return listenerSet;
    }",Gets a copy of the set of the listeners registered to this class,1,69
2666,"public static ALCapabilities createCapabilities(ALCCapabilities alcCaps) {
		long GetString = functionProvider.getFunctionAddress(""alGetString"");
		long GetError = functionProvider.getFunctionAddress(""alGetError"");
		long IsExtensionPresent = functionProvider.getFunctionAddress(""alIsExtensionPresent"");
		if ( GetString == NULL || GetError == NULL || IsExtensionPresent == NULL )
			throw new IllegalStateException(""Core OpenAL functions could not be found. Make sure that the OpenAL library has been loaded correctly."");

		long versionString = invokeIP(GetString, AL_VERSION);
		if ( versionString == NULL || callI(GetError) != AL_NO_ERROR )
			throw new IllegalStateException(""There is no OpenAL context current in the current thread or process."");

		APIVersion apiVersion = apiParseVersion(memDecodeASCII(versionString));
		int majorVersion = apiVersion.major;
		int minorVersion = apiVersion.minor;

		int[][] AL_VERSIONS = {
			{ 0, 1 }  // OpenAL 1
		};

		Set<String> supportedExtensions = new HashSet<String>(32);

		for ( int major = 1; major <= AL_VERSIONS.length; major++ ) {
			int[] minors = AL_VERSIONS[major - 1];
			for ( int minor : minors ) {
				if ( major < majorVersion || (major == majorVersion && minor <= minorVersion) )
					supportedExtensions.add(""OpenAL"" + Integer.toString(major) + Integer.toString(minor));
			}
		}

		// Parse EXTENSIONS string
		String extensionsString = memDecodeUTF8(checkPointer(invokeIP(GetString, AL_EXTENSIONS)));

		/*
		OpenALSoft: AL_EXT_ALAW AL_EXT_DOUBLE AL_EXT_EXPONENT_DISTANCE AL_EXT_FLOAT32 AL_EXT_IMA4 AL_EXT_LINEAR_DISTANCE AL_EXT_MCFORMATS AL_EXT_MULAW
		AL_EXT_MULAW_MCFORMATS AL_EXT_OFFSET AL_EXT_source_distance_model AL_LOKI_quadriphonic AL_SOFT_buffer_samples AL_SOFT_buffer_sub_data
		AL_SOFTX_deferred_updates AL_SOFT_direct_channels AL_SOFT_loop_points
		Creative: EAX EAX2.0 EAX3.0 EAX4.0 EAX5.0 EAX3.0EMULATED EAX4.0EMULATED AL_EXT_OFFSET AL_EXT_LINEAR_DISTANCE AL_EXT_EXPONENT_DISTANCE
		 */

		APIBuffer __buffer = apiBuffer();
		StringTokenizer tokenizer = new StringTokenizer(extensionsString);
		while ( tokenizer.hasMoreTokens() ) {
			String extName = tokenizer.nextToken();
			__buffer.reset().stringParamASCII(extName, true);
			if ( invokePZ(IsExtensionPresent, __buffer.address()) )
				supportedExtensions.add(extName);
		}

		return new ALCapabilities(functionProvider, supportedExtensions, alcCaps);
	}",Creates a new  ALCapabilities instance for the OpenAL context that is current in the current thread or process.,1,557
2667,"private float calculateCenterOffsetForPage(int pageNb) {
    	if (swipeVertical) {
    		float imageY = -(pageNb * optimalPageHeight);
	        imageY += getHeight() / 2 - optimalPageHeight / 2;
	        return imageY;
    	} else {
	        float imageX = -(pageNb * optimalPageWidth);
	        imageX += getWidth() / 2 - optimalPageWidth / 2;
	        return imageX;
    	}
    }",Calculate the x/y-offset needed to have the given page centered on the screen.,1,127
2668,"private static String generateUniqueLogFileName( String directoryName )
	{
		SimpleDateFormat df = new SimpleDateFormat(""yyyy_MM_dd_HH_mm_ss""); //$NON-NLS-1$
		String dateTimeString = df.format( new Date() );
		
		if ( directoryName == null )
			directoryName = """"; //$NON-NLS-1$
		else if ( directoryName.length() > 0 )
			directoryName += System.getProperty(""file.separator""); //$NON-NLS-1$
		
		return new String( directoryName + ""ReportEngine_"" + dateTimeString + "".log"" ); //$NON-NLS-1$; $NON-NLS-2$;
	}",This is a utility function that will create an unique file name with the timestamp information in the file name and append the file name into the directory name.,1,158
2669,"public Iterable<FileChannelRecordBatch> batches() {
        return batches;
    }",Get an iterator over the record batches in the file.,1,22
2670,"@Override
    @SuppressWarnings(""unchecked"")
    public Object clone() {
        return new ImplicationBefore(name, (ArrayList<Term>) cloneList(components), (ArrayList<Variable>) cloneList(openVariables), complexity);
    }",Clone an object,1,64
2671,"public ServerEntry put( ServerEntry entry, Object id ) throws NamingException
    {
        return ( ServerEntry ) super.put( id, entry );
    }",Puts the ServerEntry into this master table at an index specified by id.,1,50
2672,"public ChangeViewportOperation getChangeViewportOperation() {
		return changeViewportOperation;
	}",Returns the  ChangeViewportOperation that is used by this  NavigateOperation to update the viewport.,1,19
2673,"public Option<T> apply(T obj) {
                return Objects.equals(obj, prototype) ? Option.some(obj) : Option.none();
            }","Value pattern, checks for equality.",1,50
2674,"public int jsxGet_y() {
        return element_.getPosY();
    }",Returns the Y position of this box object's element.,1,23
2675,"public int setBytes(long pos, byte[] bytes, int offset, int len)
            throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode(""setBytes("" + pos + "", "" + quoteBytes(bytes) + "", "" + offset + "", "" + len + "");"");
            }
            checkClosed();
            if (pos != 1) {
                throw DbException.getInvalidValueException(""pos"", pos);
            }
            value = conn.createBlob(new ByteArrayInputStream(bytes, offset, len), -1);
            return (int) value.getPrecision();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }",Sets some bytes of the object.,1,215
2676,"public synchronized StorageDir lock(long blockId, int blockLockId) {
    if (!mLockedBlockIds.containsKey(blockId)) {
      StorageDir storageDir =  mWorkerStorage.lockBlock(blockId, mUserId);
      if (storageDir != null) {
        Set<Integer> lockIdSet = new HashSet<Integer>();
        lockIdSet.add(blockLockId);
        mLockedBlockIds.put(blockId, lockIdSet);
        mLockedBlockIdToStorageDir.put(blockId, storageDir);
        return storageDir;
      }
      return null;
    } else {
      mLockedBlockIds.get(blockId).add(blockLockId);
      return mLockedBlockIdToStorageDir.get(blockId);
    }
  }",Lock a block with specified lock id.,1,173
2677,"public Socks5CmdStatus cmdStatus() {
        return cmdStatus;
    }",Returns the  Socks5CmdStatus of this  Socks5CmdResponse,1,19
2678,"public List<InputSplit> getSplits(JobContext context) throws IOException {
    // The paths are MapReduce program's inputs specified in
    // {@code mapreduce.input.fileinputformat.inputdir}, each path should be a key-value store.
    Path[] paths = FileInputFormat.getInputPaths(context);
    List<InputSplit> splits = Lists.newArrayList();
    try {
      for (Path path : paths) {
        List<PartitionInfo> partitionInfos =
            mKeyValueMasterClient.getPartitionInfo(new AlluxioURI(path.toString()));
        for (PartitionInfo partitionInfo : partitionInfos) {
          splits.add(new KeyValueInputSplit(partitionInfo));
        }
      }
    } catch (AlluxioException e) {
      throw new IOException(e);
    }
    return splits;
  }",Returns a list of  KeyValueInputSplit where each split is one key-value partition.,1,179
2679,"public static Set<String> findAllWordsInField(BibDatabase db, String field, String remove) {
        Set<String> res = new TreeSet<>();
        StringTokenizer tok;
        for (String s : db.getKeySet()) {
            BibEntry be = db.getEntryById(s);
            Object o = be.getField(field);
            if (o != null) {
                tok = new StringTokenizer(o.toString(), remove, false);
                while (tok.hasMoreTokens()) {
                    res.add(net.sf.jabref.model.entry.EntryUtil.capitalizeFirst(tok.nextToken().trim()));
                }
            }
        }
        return res;
    }",Returns a Set containing all words used in the database in the given field type.,1,202
2680,"boolean add(SimpleFeature feature) {
        if (feature == null) {
            return false; // cannot add null!
        }
        final String ID = getKey(feature.getIdentifier());
        if (ID == null) {
            return false; // ID is required!
        }
        if (contents.containsKey(ID)) {
            return false; // feature all ready present
        }    
        if (this.schema == null) {
            this.schema = feature.getFeatureType();
        }
        SimpleFeatureType childType = (SimpleFeatureType) getSchema();
        if (!feature.getFeatureType().equals(childType)) {
            LOGGER.warning(""Feature Collection contains a heterogeneous""
                    + "" mix of features"");
        }
        contents.put(ID, feature);
        return true;
    }",Used by FeatureSourceDecorator to stage versioned content.,1,216
2681,"public String toString() {
        return ""{"" +
                ""credentials="" + credentialsMap +
                '}';
    }",Gets the MongoCredentials in this map as a List,1,37
2682,"public static boolean isFacetApplied(String facetName, Map<String, List<KeyValue>> appliedFacets,
                                         PropertyDefinition propDef) {
        return appliedFacets != null && appliedFacets.containsKey(facetName);
    }",Check whether a facet is currently applied to the query,1,59
2683,"public int getLength() {
        return position.getLength();
    }",Returns the length of current element.,1,23
2684,"protected BendConnectionOperation getBendConnectionOperation() {
		return (BendConnectionOperation) getOperation();
	}",Returns the  BendConnectionOperation to be used by this policy.,1,25
2685,"public static double get(MetricKey<ASTMethodOrConstructorDeclaration> key, ASTMethodOrConstructorDeclaration node) {
        return FACADE.computeForOperation(key, node);
    }",Computes the standard version of the metric identified by the key on a operation AST node.,1,40
2686,"public PrintWriter defaultOutput() {
    return m_DefaultOutput;
  }","Gets writer, which is used for outputting to stdout.",1,19
2687,"public boolean isSearchResult() {
        return !TextUtils.isEmpty(searchQuery);
    }",Returns true if the current list is showing search results,1,25
2688,"public DynamicRealmList getList(String fieldName) {
        long columnIndex = row.getColumnIndex(fieldName);
        return new DynamicRealmList(row.getLinkList(columnIndex), realm);
    }",Returns the  io.realm.RealmList of objects being linked to from this field.,1,50
2689,"public static <C extends Comparable<E>, E> Rule<C> gt(E value) {
        return new GtRule<C, E>(value);
    }",Returns a rule which evaluates to true if the supplied input is greater than the given value.,1,52
2690,"public boolean equals(Object obj) {
        return (obj instanceof MutableDouble)
            && (Double.doubleToLongBits(((MutableDouble) obj).value) == Double.doubleToLongBits(value));
    }",Compares this object against the specified object.,1,59
2691,"public static String saveIptablesRules() {
        return BashCommands.alternatives(
                BashCommands.ifExecutableElse1(""iptables-save"", sudo(""iptables-save"")),
                iptablesService(""save""));
    }","Returns the command that saves on disk iptables rules, to make them resilient to reboot.",1,52
2692,"@CheckForNull
    public Status getStatus() {
        return loadLocation().getStatus();
    }",Get the status of this item.,1,28
2693,"public static boolean contains(IPolyShape ps, IShape s) {
		for (ICurve c : s.getOutlineSegments())
			if (!contains(ps, c))
				return false;
		return true;
	}",Checks if the  IShape is contained by the  IPolyShape.,1,66
2694,"protected Integer getModifiers() {
                    return modifiers;
                }",Returns the modifiers of the parameter or  null if no modifiers are known.,1,19
2695,"public long getElapsedToday() {
        // Time elapsed so far today
        return (calendar.get(Calendar.HOUR_OF_DAY) * 60 + calendar.get(Calendar.MINUTE)) * MS_PER_MINUTE
                + calendar.get(Calendar.SECOND) * 1000
                + calendar.get(Calendar.MILLISECOND);
    }",Returns the time elapsed so far today in milliseconds.,1,78
2696,"private JsonArrayImpl transform(ViewData data) {
        List result = new ArrayList(data.size());

        for (Entry<String, SectionData> sectionEntry : data.entrySet()) {
            LinkedHashSet<Object> newSectionData = new LinkedHashSet<>(sectionEntry.getValue().size());

            for (int i = 0; i < sectionEntry.getValue().size(); i++) {
                List<ValueData> rowData = sectionEntry.getValue().get(i);
                List<String> newRowData = new ArrayList<>(rowData.size());

                for (int j = 0; j < rowData.size(); j++) {
                    newRowData.add(rowData.get(j).getAsString());
                }

                newSectionData.add(newRowData);
            }

            result.add(newSectionData);
        }

        return new JsonArrayImpl(result);
    }",Transforms view data into table in json format.,1,262
2697,"public static int compile(DiagnosticListener<JavaFileObject> listener, String[] args) {
    return new ErrorProneCompiler.Builder().listenToDiagnostics(listener).build().compile(args);
  }","Convenient helper method for compiling in-process, using reflection.",1,54
2698,"public static CiConstant forLong(long i) {
        return i == 0 ? LONG_0 : i == 1 ? LONG_1 : new CiConstant(CiKind.Long, i);
    }",Utility method to create a value type for an long constant.,1,60
2699,"public static GLFWErrorCallback errorfunPrint() {
		return errorfunPrint(System.err);
	}",Returns a  GLFWErrorCallback instance that prints the error in the standard error stream.,1,26
2700,"private static Writer openOutput(final ISchemaVersion schemaVersion, final String description, final TestType type) throws IOException {
        final String schemaVersionPrefix = ""v""+ schemaVersion.schemaVersionNumber() + ""_"";
        final String header;
        final String filename;
        switch(type) {
            case ADD:
                header = ""cardinality,raw_value,HLL\n"";
                filename = schemaVersionPrefix + ""cumulative_add_"" + description + "".csv"";
                break;
            case UNION:
                header = ""cardinality,HLL,union_cardinality,union_HLL\n"";
                filename = schemaVersionPrefix + ""cumulative_union_"" + description + "".csv"";
                break;
            default:
                throw new RuntimeException(""Unknown test type "" + type);
        }

        final Writer output = Files.newBufferedWriter(
            Paths.get(OUTPUT_DIRECTORY, filename), StandardCharsets.UTF_8);
        output.write(header);
        output.flush();
        return output;
    }",Opens a  Writer and writes out an appropriate CSV header.,1,261
2701,"public Type type() {
    return type;
  }",Returns the  Type of this  TypePromoter,1,19
2702,"public Visibility getVisibility() {
        return visibility;
    }",This method is used to obtain visibility of the  ModuleType.,1,19
2703,"public OptionalInt valueColumnIndex(final ColumnRef target) {
    int idx = 0;
    for (final Column column : value()) {
      if (column.matches(target)) {
        return OptionalInt.of(idx);
      }
      ++idx;
    }

    return OptionalInt.empty();
  }",Find the index of the column with the supplied exact  target.,1,95
2704,"public Graph<VcfSample, Relationship> getGraph() {
        return graph;
    }",Return the graph of relationships between samples for this VCF pedigree.,1,25
2705,"public INDArray pack(List<Pair<INDArray, INDArray>> layers) {
        if (layers.size() != this.neuralNets.length + 1)
            throw new IllegalArgumentException(""Illegal number of neuralNets passed in. Was "" + layers.size() + "" when should have been "" + (this.neuralNets.length + 1));

        List<INDArray> list = new ArrayList<>();
        for(int i = 0; i < layers.size(); i++) {
            list.add(layers.get(i).getFirst());
            list.add(layers.get(i).getSecond());
        }
        INDArray ret = NDArrays.toFlattened(list);
        if(ret.length() != numParams())
            throw new IllegalStateException(""Illegal number of parameters found in the layers"");
        return ret;
    }",Packs a set of matrices in to one vector,1,230
2706,"public final BranchOperand asBranch() {
    return (BranchOperand) this;
  }",Cast to an  BranchOperand.,1,25
2707,"public ExpressionClause<SortDefinition> sort() {
        SortDefinition answer = new SortDefinition();
        addOutput(answer);
        return ExpressionClause.createAndSetExpression(answer);
    }",Sorts the expression,1,48
2708,"public static boolean contains(CharSequence seq, int searchChar) {
        if (isEmpty(seq)) {
            return false;
        }
        return indexOfSequence(seq, searchChar, 0) >= 0;
    }","Checks if CharSequence contains a search character, handling  null.",1,64
2709,"public Gadget remove(long gadgetId)
		throws NoSuchGadgetException, SystemException {
		return remove(Long.valueOf(gadgetId));
	}",Removes the gadget with the primary key from the database.,1,38
2710,"public MemberRequest remove(long memberRequestId)
		throws NoSuchMemberRequestException, SystemException {
		return remove(Long.valueOf(memberRequestId));
	}",Removes the member request with the primary key from the database.,1,38
2711,"protected Filter[] obtainAllDefinedFilters() {
        return filterChainMap.getAllDefinedFilters();
    }",Obtains all of the uniqueFilter instances registered in the FilterChainMap.,1,25
2712,"public static ClusteredMediaDriver launch()
    {
        return new ClusteredMediaDriver();
    }",Launch a new  ClusteredMediaDriver with default contexts.,1,26
2713,"public WindowedValue<T> call(T t) {
        return WindowedValue.valueInGlobalWindow(t);
      }",A Spark function for converting a value to a  WindowedValue.,1,30
2714,"public static PeriodFormatter getDefault() {
        return wordBased(Locale.ENGLISH);
    }",Gets the default formatter that outputs words in English.,1,26
2716,"public boolean shouldSkip(HttpResponse response) {
        return !httpCompressionStrategy.shouldCompress(response);
    }",Determines if encoding should occur based on the response.,1,28
2717,"public static double get(MetricKey<ASTMethod> key, ASTMethod node, MetricVersion version) {
        return FACADE.computeForOperation(key, node, version);
    }",Computes a metric identified by its key on a operation AST node.,1,48
2718,"public Result[] scannerGet(Integer id, Long numRows)
      throws HBaseRestException {
    try {
      ArrayList<Result> a;
      ResultScanner s;
      Result r;

      a = new ArrayList<Result>();
      s = scannerMaster.getScanner(id);

      if (s == null) {
        throw new HBaseRestException(""ScannerId: "" + id
            + "" is unavailable.  Please create a new scanner"");
      }

      for (int i = 0; i < numRows; i++) {
        if ((r = s.next()) != null) {
          a.add(r);
        } else {
          scannerMaster.scannerClose(id);
          break;
        }
      }

      return a.toArray(new Result[0]);
    } catch (IOException e) {
      throw new HBaseRestException(e);
    }
  }",returns the next numResults Results from the Scaner mapped to Integer id.,1,256
2719,"static boolean isDefinitionNode(Node n) {
    Node parent = n.getParent();
    if (parent == null) {
      return false;
    }

    if (NodeUtil.isVarDeclaration(n) && (n.isFromExterns() || n.hasChildren())) {
      return true;
    } else if (parent.isFunction() && parent.getFirstChild() == n) {
      if (!NodeUtil.isFunctionExpression(parent)) {
        return true;
      } else if (!n.getString().isEmpty()) {
        return true;
      }
    } else if (parent.isClass() && parent.getFirstChild() == n) {
      if (!NodeUtil.isClassExpression(parent)) {
        return true;
      } else if (!n.isEmpty()) {
        return true;
      }
    } else if (n.isMemberFunctionDef() && parent.isClassMembers()) {
      return true;
    } else if (parent.isAssign() && parent.getFirstChild() == n) {
      return true;
    } else if (NodeUtil.isObjectLitKey(n)) {
      return true;
    } else if (parent.isParamList()) {
      return true;
    } else if (parent.getToken() == Token.COLON
        && parent.getFirstChild() == n
        && n.isFromExterns()) {
      Node grandparent = parent.getParent();
      checkState(grandparent.getToken() == Token.LB);
      checkState(grandparent.getParent().getToken() == Token.LC);
      return true;
    } else if (n.isFromExterns() && parent.isExprResult() && n.isGetProp() && n.isQualifiedName()) {
      return true;
    }
    return false;
  }","This logic must match  #getDefinition(Node, boolean).",1,540
2720,"public boolean isAssignableTo(TypeDescriptor typeDescriptor) {
		return typeDescriptor.getObjectType().isAssignableFrom(getObjectType());
	}",Returns true if an object of this type can be assigned to a reference of the given type.,1,33
2721,"public Highlight getHighlightByTouchPoint(float x, float y) {

        // create an array of the touch-point
        float[] pts = new float[2];
        pts[0] = x;
        pts[1] = y;

        Matrix tmp = new Matrix();

        // invert all matrixes to convert back to the original value
        mMatrixOffset.invert(tmp);
        tmp.mapPoints(pts);

        mMatrixTouch.invert(tmp);
        tmp.mapPoints(pts);

        mMatrixValueToPx.invert(tmp);
        tmp.mapPoints(pts);

        double xTouchVal = pts[0];
        double yTouchVal = pts[1];
        double base = Math.floor(xTouchVal);

        Log.i(LOG_TAG, ""touchindex x: "" + xTouchVal + "", touchindex y: "" + yTouchVal);

        // touch out of chart
        if (this instanceof LineChart && (xTouchVal < 0 || xTouchVal > mDeltaX))
            return null;
        if (this instanceof BarChart && (xTouchVal < 0 || xTouchVal > mDeltaX + 1))
            return null;

        int xIndex = (int) base;
        int dataSetIndex = 0; // index of the DataSet inside the ChartData
                              // object

        if (this instanceof LineChart) {

            // check if we are more than half of a x-value or not
            if (xTouchVal - base > 0.5) {
                xIndex = (int) base + 1;
            }
        }

        ArrayList<SelInfo> valsAtIndex = getYValsAtIndex(xIndex);

        dataSetIndex = getClosestDataSetIndex(valsAtIndex, (float) yTouchVal);

        if (dataSetIndex == -1)
            return null;

        return new Highlight(xIndex, dataSetIndex);
    }",returns the Highlight object (contains x-index and DataSet index) of the selected value at the given touch point.,1,450
2722,"@Override
    public Coordinates3D parse(final String source, final ParsePosition pos) {
        final double[] coordinates = parseCoordinates(3, source, pos);
        if (coordinates == null) {
            return null;
        }
        return new Coordinates3D(coordinates[0], coordinates[1], coordinates[2]);
    }",Parses a string to produce a  Coordinates3D object.,1,100
2723,"public JIRAChangeItem remove(long jiraChangeItemId)
		throws NoSuchJIRAChangeItemException, SystemException {
		return remove(Long.valueOf(jiraChangeItemId));
	}",Removes the j i r a change item with the primary key from the database.,1,38
2724,"public Object caseBounds( Bounds object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Bounds'.,1,25
2725,"@Override
  public List<T> findDatasets() throws IOException {
    List<T> datasets = Lists.newArrayList();
    for (FileStatus fileStatus : this.fs.globStatus(datasetPattern)) {
      Path pathToMatch = PathUtils.getPathWithoutSchemeAndAuthority(fileStatus.getPath());
      if (this.blacklist.isPresent() && this.blacklist.get().matcher(pathToMatch.toString()).find()) {
        continue;
      }
      LOG.info(""Found dataset at "" + fileStatus.getPath());
      datasets.add(datasetAtPath(fileStatus.getPath()));
    }
    return datasets;
  }","Finds all directories satisfying the input glob pattern, and creates a  gobblin.data.management.retention.dataset.CleanableDataset for each one using  #datasetAtPath.",1,171
2726,"public JettisonConfiguration build() {
            return new JettisonConfiguration(this);
        }",Constructs a new immutable  JettisonConfiguration object based on options set on this Builder,1,24
2727,"private String typeAnsAnswerFilter(String buf, String userAnswer, String correctAnswer) {
        Matcher m = sTypeAnsPat.matcher(buf);
        DiffEngine diff = new DiffEngine();
        StringBuilder sb = new StringBuilder();
        boolean theSame = userAnswer.equals(correctAnswer);
        sb.append(""<div"");
        if (!mPrefWriteAnswers) {
            sb.append("" class=\""typeOff\"""");
        }
        sb.append(""><code id=typeans>"");
        if (!theSame && !userAnswer.isEmpty()) {
            sb.append(diff.diff_prettyHtml(diff.diff_main(userAnswer, correctAnswer), mNightMode));
            sb.append(""<br>&darr;<br>"");
        }
        if (mPrefWriteAnswers) {
            sb.append(diff.diff_prettyHtml(diff.diff_main(correctAnswer, correctAnswer), mNightMode));
            if (theSame) {
                sb.append(""\u2714"");  // ""Heavy check mark""
            }
        } else {
            sb.append(correctAnswer);
        }
        sb.append(""</code></div>"");
        return m.replaceFirst(sb.toString());
    }",Fill the placeholder for the type comparison.,1,297
2728,"private ExternalGraphic createExternalGraphicForSprite(Expression iconName, MBStyle styleContext) {
        Expression spriteUrl;
        
        if (styleContext != null && styleContext.getSprite() != null) {
            String spriteBase = styleContext.getSprite().trim() + ""#"";
            spriteUrl = ff.function(""Concatenate"", ff.literal(spriteBase),
                    iconName);
        } else {
            spriteUrl = iconName;
        }

        // TODO: (Functions milestone) The icon name can be a function, so evaluating the expression to a string (below) is wrong.
        // Evaluate it for now, because (for now) External Graphics do not take an expression for the URL.
        // TODO: Allow External Graphics to take an expression for the URL
        String spriteUrlStr = spriteUrl.evaluate(null, String.class);

        return sf.createExternalGraphic(spriteUrlStr, SpriteGraphicFactory.FORMAT);

    }","Takes the name of an icon, and an  MBStyle as a context, and returns an External Graphic referencing the full URL of the image for consumption by the  SpriteGraphicFactory.",1,174
2729,"public static Optional<Method> loadMethod(String fullyQualifiedMethodName) {
		Preconditions.notBlank(fullyQualifiedMethodName, ""fully qualified method name must not be null or empty"");
		fullyQualifiedMethodName = fullyQualifiedMethodName.trim();

		// TODO Handle overloaded and inherited methods

		int hashPosition = fullyQualifiedMethodName.lastIndexOf('#');
		if (hashPosition >= 0 && hashPosition < fullyQualifiedMethodName.length()) {
			String className = fullyQualifiedMethodName.substring(0, hashPosition);
			String methodName = fullyQualifiedMethodName.substring(hashPosition + 1);
			if (StringUtils.isNotBlank(className) && StringUtils.isNotBlank(methodName)) {
				Optional<Class<?>> classOptional = loadClass(className);
				if (classOptional.isPresent()) {
					try {
						return Optional.of(classOptional.get().getDeclaredMethod(methodName));
					}
					catch (NoSuchMethodException ignore) {
					}
				}
			}
		}
		return Optional.empty();
	}",Load a method by its fully qualified name.,1,248
2730,"public double max()
    {
        return summaryStatistics.getMax();
    }",Return the maximum elapsed time recorded by this timer in nanoseconds.,1,24
2731,"public static ReadOnlyThreadContextMap getThreadContextMap() {
        return readOnlyContextMap;
    }","Returns a read-only view of the internal data structure used to store thread context key-value pairs, or  null if the internal data structure does not implement the  ReadOnlyThreadContextMap interface.",1,21
2732,"public RepositoryConfiguration createInstanceConfiguration() {
    RepositoryConfiguration configuration = new RepositoryConfiguration(getName());
    BeanUtils.copyProperties(this, configuration);
    configuration.setEnableAccessControl(accessMethod == AccessMethod.USER);
    return configuration;
  }",Create an populate a RepositoryConfiguration based on the contens of this config command instance.,1,64
2733,"public static String saveIptablesRules() {
        return BashCommands.alternatives(
                BashCommands.ifExecutableElse1(""iptables-save"", sudo(""iptables-save"")),
                iptablesService(""save""));
    }","Returns the command that saves on disk iptables rules, to make them resilient to reboot.",1,52
2734,"public Flowable<T> autoConnect(int numberOfSubscribers) {
        return autoConnect(numberOfSubscribers, Functions.emptyConsumer());
    }",Returns an Observable that automatically connects to this ConnectableObservable when the specified number of Subscribers subscribe to it.,1,35
2735,"public static <T> ReceivePort<T> take(final ReceivePort<T> channel, final long count) {
        return new TakeReceivePort<>(channel, count);
    }",Returns a  ReceivePort that can provide at most  count messages from  channel.,1,53
2736,"public GroupedDataStream<T> groupBy(KeySelector<T, ?> keySelector) {
		return new GroupedDataStream<T>(this, clean(keySelector));
	}",Groups the elements of a  DataStream by the key extracted by the  KeySelector to be used with grouped operators like  GroupedDataStream#reduce(org.apache.flink.api.common.functions.ReduceFunction).,1,45
2737,"public ${rib_name}Router build() {
        ${rib_name}Interactor interactor = new ${rib_name}Interactor();
        Component component = Dagger${rib_name}Builder_Component.builder()
                .parentComponent(getDependency())
                .interactor(interactor)
                .build();

        return component.${rib_name_to_lower}Router();
    }",Builds a new  $rib_nameRouter.,1,94
2738,"public static long getLong(Object o, long defaultValue) {
        try {
            if (o == null) {
                return defaultValue;
            }
            if (o instanceof Number) {
                return ((Number) o).longValue();
            }
            return Long.parseLong(o.toString());
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }","Converts object to a long, return defaultValue if object is not convertible or is null.",1,120
2740,"public RVMField peekResolvedField() {
    if (resolvedMember != null) return resolvedMember;

    // Hasn't been resolved yet. Try to do it now without triggering class loading.
    RVMClass declaringClass = (RVMClass) type.peekType();
    if (declaringClass == null) return null;
    return resolveInternal(declaringClass);
  }",Find the RVMField that this field reference refers to using the search order specified in JVM spec 5.4.3.2.,1,78
2741,"protected BendVisualOperation getBendOperation() {
		return (BendVisualOperation) ((AbstractCompositeOperation) super.getOperation())
				.getOperations().get(0);
	}",Returns an  BendVisualOperation that is extracted from the operation created by  #createOperation().,1,44
2742,"public String timerChannel()
        {
            return consensusModuleChannel;
        }",Get the channel parameter for sending messages to the Consensus Module.,1,20
2743,"public boolean updateByQuery(ESSyncConfig config, Map<String, Object> paramsTmp, Map<String, Object> esFieldData) {
        if (paramsTmp.isEmpty()) {
            return false;
        }
        ESMapping mapping = config.getEsMapping();
        BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();
        paramsTmp.forEach((fieldName, value) -> queryBuilder.must(QueryBuilders.termsQuery(fieldName, value)));

        SearchResponse response = transportClient.prepareSearch(mapping.get_index())
            .setTypes(mapping.get_type())
            .setSize(0)
            .setQuery(queryBuilder)
            .get();
        long count = response.getHits().getTotalHits();
        // å¦ææ´æ°éå¤§äºMax, æ¥è¯¢sqlæ¹éæ´æ°
        if (count > MAX_BATCH_SIZE) {
            BulkRequestBuilder bulkRequestBuilder = transportClient.prepareBulk();

            DataSource ds = DatasourceConfig.DATA_SOURCES.get(config.getDataSourceKey());
            // æ¥è¯¢sqlæ´æ°
            StringBuilder sql = new StringBuilder(""SELECT * FROM ("" + mapping.getSql() + "") _v WHERE "");
            paramsTmp.forEach(
                (fieldName, value) -> sql.append(""_v."").append(fieldName).append(""="").append(value).append("" AND ""));
            int len = sql.length();
            sql.delete(len - 4, len);
            ESSyncUtil.sqlRS(ds, sql.toString(), rs -> {
                int exeCount = 1;
                try {
                    BulkRequestBuilder bulkRequestBuilderTmp = bulkRequestBuilder;
                    while (rs.next()) {
                        Object idVal = getIdValFromRS(mapping, rs);
                        append4Update(bulkRequestBuilderTmp, mapping, idVal, esFieldData);

                        if (exeCount % mapping.getCommitBatch() == 0 && bulkRequestBuilderTmp.numberOfActions() > 0) {
                            commitBulkRequest(bulkRequestBuilderTmp);
                            bulkRequestBuilderTmp = transportClient.prepareBulk();
                        }
                        exeCount++;
                    }

                    if (bulkRequestBuilder.numberOfActions() > 0) {
                        commitBulkRequest(bulkRequestBuilderTmp);
                    }
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                return 0;
            });
            return true;
        } else {
            return updateByQuery(mapping, queryBuilder, esFieldData, 1);
        }
    }",update by query,1,616
2744,"public LayoutElement generateLayoutElement(MainFragment mainFragment, UtilitiesProviderInterface utilitiesProvider) {
        switch (mode) {
            case FILE:
            case ROOT:
                File file = new File(path);
                LayoutElement layoutElement;
                if (isDirectory()) {

                    layoutElement = utilitiesProvider.getFutils()
                            .newElement(mainFragment.folder,
                                    path, RootHelper.parseFilePermission(file),
                                    """", folderSize() + """", 0, true, false,
                                    file.lastModified() + """");
                } else {
                    layoutElement = utilitiesProvider.getFutils().newElement(Icons.loadMimeIcon(
                            file.getPath(), !mainFragment.IS_LIST, mainFragment.res),
                            file.getPath(), RootHelper.parseFilePermission(file),
                            file.getPath(), file.length() + """", file.length(), false, false, file.lastModified() + """");
                }
                layoutElement.setMode(mode);
                return layoutElement;
            default:
                return null;
        }
    }",Generates a  LayoutElement adapted compatible element.,1,283
2745,"public boolean handleBuffer(ByteBuffer buffer, long presentationTimeUs)
      throws InitializationException, WriteException {
    if (!isInitialized()) {
      initialize();
      if (playing) {
        play();
      }
    }

    boolean hadData = hasData;
    hasData = hasPendingData();
    if (hadData && !hasData && audioTrack.getPlayState() != PLAYSTATE_STOPPED) {
      long elapsedSinceLastFeedMs = SystemClock.elapsedRealtime() - lastFeedElapsedRealtimeMs;
      listener.onUnderrun(bufferSize, C.usToMs(bufferSizeUs), elapsedSinceLastFeedMs);
    }
    boolean result = writeBuffer(buffer, presentationTimeUs);
    lastFeedElapsedRealtimeMs = SystemClock.elapsedRealtime();
    return result;
  }","Attempts to write data from a  ByteBuffer to the audio track, starting from its current position and ending at its limit (exclusive).",1,193
2746,"@SuppressWarnings(""unchecked"")
    public V compute(K key, RemappingFunction<? super K, V> remappingFunction) {
        if (key == null || remappingFunction == null)
            throw new NullPointerException();
        return (V)internalCompute(key, remappingFunction);
    }",Computes and enters a new mapping value given a key and its current mapped value (or  null if there is no current mapping).,1,86
2747,"static boolean areAdjacent(RegionInfo regionA, RegionInfo regionB) {
    if (regionA == null || regionB == null) {
      throw new IllegalArgumentException(
      ""Can't check whether adjacent for null region"");
    }
    if (!regionA.getTable().equals(regionB.getTable())) {
      return false;
    }
    RegionInfo a = regionA;
    RegionInfo b = regionB;
    if (Bytes.compareTo(a.getStartKey(), b.getStartKey()) > 0) {
      a = regionB;
      b = regionA;
    }
    return Bytes.equals(a.getEndKey(), b.getStartKey());
  }",Check whether two regions are adjacent; i.e.,1,185
2748,"@RunsInEDT
  public TableCell cell(JTable table, TableCellFinder cellFinder) {
    if (cellFinder == null) throw new NullPointerException(""The cell finder to use should not be null"");
    TableCell cell = cellFinder.findCell(table);
    validateCellIndices(table, cell);
    return cell;
  }",Returns a cell from the given  JTable using the given cell finder.,1,79
2749,"public Expression getAbstractSchemaName() {
		if (rootObject == null) {
			rootObject = buildNullExpression();
		}
		return rootObject;
	}","Returns the  Expression that represents the ""root"" object.",1,46
2750,"public boolean deleteById(Object... idValues) {
		Table table = getTable();
		if (idValues == null || idValues.length != table.getPrimaryKey().length)
			throw new IllegalArgumentException(""Primary key nubmer must equals id value number and can not be null"");
		
		return deleteById(table, idValues);
	}",Delete model by composite id values.,1,88
2751,"private PkgImportControl getRoot() {
        return (PkgImportControl) stack.peek();
    }",Returns root PkgImportControl.,1,27
2752,"public List<Affiliate> getAdmins() throws NoResponseException, XMPPErrorException, NotConnectedException {
        return getAffiliatesByAdmin(MUCAffiliation.admin);
    }",Returns a list of Affiliate with the room administrators.,1,37
2753,"public static AndroidPayCardNonce fromJson(String json) throws JSONException {
        AndroidPayCardNonce androidPayCardNonce = new AndroidPayCardNonce();
        androidPayCardNonce
                .fromJson(AndroidPayCardNonce.getJsonObjectForType(API_RESOURCE_KEY, json));
        return androidPayCardNonce;
    }",Convert an API response to an  AndroidPayCardNonce.,1,61
2754,"private String stripPrefixIfPresent(String key) {
    if (key.startsWith(mBucketPrefix)) {
      return key.substring(mBucketPrefix.length());
    }
    if (key.startsWith(PATH_SEPARATOR)) {
      return key.substring(PATH_SEPARATOR.length());
    }
    return key;
  }",Strips the s3 bucket prefix or the preceding path separator from the key if it is present.,1,86
2755,"public static <A, T> BoundNullaryFunction<T> bind(Function<? super A, ? extends T> function, A arg) {
        return null == function ? null : new BoundNullaryFunction<T>(function, arg);
    }","Adapt the given, possibly-null,  Function Function to the  NullaryFunction NullaryFunction interface by binding the specified Object as a constant argument.",1,77
2756,"protected LoadFile createLoadFileTask(String inFile, String propName)
    {
        Project project = AntUtilities.createProject();
        LoadFile loadFileTask = ( LoadFile ) project.createTask( ""loadfile"" );
        loadFileTask.init();
        loadFileTask.setProperty(propName);

        getLog().info( ""Using filename "" + inFile + "" to drive the configuration"" );

        loadFileTask.setSrcFile(new File(inFile));

        return loadFileTask;

    }",This method will create an ANT based LoadFile task based on an infile and a property name.,1,127
2757,"public int getNextMarkedNode() {
		List<Integer> list = markedNodes;
		if (collapse_mode)
			list = markedCollapsedNodes;
		
		if (list.size() == 0)
			return -1;
		
		
		nextMarkedNode++;
		if (nextMarkedNode >= list.size())
			nextMarkedNode = 0;
		
		
		return list.get(nextMarkedNode);
	}",Returns the id of the next marked node in current collapse mode.,1,115
2758,"protected boolean processUnknowPacket(Element doc) {
        // Handle subsequent bind packets
        if (""bind"".equals(doc.getName())) {
            ComponentSession componentSession = (ComponentSession) session;
            // Get the external component of this session
            ComponentSession.ExternalComponent component = componentSession.getExternalComponent();
            String initialDomain = component.getInitialSubdomain();
            String extraDomain = doc.attributeValue(""name"");
            if (extraDomain == null || """".equals(extraDomain)) {
                // No new bind domain was specified so return a bad_request error
                Element reply = doc.createCopy();
                reply.add(new PacketError(PacketError.Condition.bad_request).getElement());
                connection.deliverRawText(reply.asXML());
            }
            else if (extraDomain.endsWith(initialDomain)) {
                // Only accept subdomains under the initial registered domain
                if (component.getSubdomains().contains(extraDomain)) {
                    // Domain already in use so return a conflict error
                    Element reply = doc.createCopy();
                    reply.add(new PacketError(PacketError.Condition.conflict).getElement());
                    connection.deliverRawText(reply.asXML());
                }
                else {
                    try {
                        InternalComponentManager.getInstance().addComponent(extraDomain, component);
                        component.addSubdomain(extraDomain);
                        // Send confirmation that the new domain has been registered
                        connection.deliverRawText(""<bind/>"");
                    }
                    catch (ComponentException e) {
                        Log.error(""Error binding extra domain: "" + extraDomain + "" to component: "" +
                                component, e);
                        // Return internal server error
                        Element reply = doc.createCopy();
                        reply.add(new PacketError(
                                PacketError.Condition.internal_server_error).getElement());
                        connection.deliverRawText(reply.asXML());
                    }
                }
            }
            else {
                // Return forbidden error since we only allow subdomains of the intial domain
                // to be used by the same external component
                Element reply = doc.createCopy();
                reply.add(new PacketError(PacketError.Condition.forbidden).getElement());
                connection.deliverRawText(reply.asXML());
            }
            return true;
        }
        // This is an unknown packet so return false (and close the connection)
        return false;
    }",Only bind packets will be processed by this class to bind more domains to existing external components.,1,511
2759,"public Set<BlockPosition> positions() {
        return _blocks.keySet();
    }",Simple return of the BlockPositions this collection holds,1,26
2760,"@Override
  public synchronized List<ClientFileInfo> listStatus(TachyonURI path) throws IOException {
    validateUri(path);
    return mMasterClient.listStatus(path.getPath());
  }","If the path is a directory, returns all the direct entries in it.",1,50
2761,"public Definition remove(Definition definition) throws SystemException {
		return super.remove(definition);
	}",Removes the definition from the database.,1,31
2762,"public boolean getSigninPromoShown() {
        int lastMajorVersion = mSharedPreferences.getInt(SIGNIN_PROMO_LAST_SHOWN, 0);
        if (lastMajorVersion == 0) {
            setSigninPromoShown();
            return true;
        }

        return ChromeVersionInfo.getProductMajorVersion() < lastMajorVersion + 2;
    }",Signin promo could be shown at most once every at least 2 Chrome major versions.,1,79
2763,"private boolean checkIsEvent(
			AbstractEvent event,
			Class<?> eventClass) throws IOException {

		final Buffer serializedEvent = EventSerializer.toBuffer(event);
		try {
			return EventSerializer.isEvent(serializedEvent, eventClass);
		} finally {
			serializedEvent.recycleBuffer();
		}
	}","Returns the result of  EventSerializer#isEvent(Buffer, Class) on a buffer that encodes the given event.",1,86
2764,"public static Future<Boolean> execute(Executor executor, Runnable task) {
        FutureTask<Boolean> ftask = new FutureTask<Boolean>(task, Boolean.TRUE);
        executor.execute(ftask);
        return ftask;
    }",Executes a Runnable task and returns a Future representing that task.,1,67
2765,"public OldWebSocketClient newWebSocketClient()
    {
        return new OldWebSocketClient(this);
    }","Creates and returns a new instance of a  OldWebSocketClient, configured with this",1,25
2766,"private String collectMediaCodecList() {
        prepare();
        final MediaCodecInfo[] infos;
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
            //noinspection deprecation
            final int codecCount = MediaCodecList.getCodecCount();
            infos = new MediaCodecInfo[codecCount];
            for (int codecIdx = 0; codecIdx < codecCount; codecIdx++) {
                //noinspection deprecation
                infos[codecIdx] = MediaCodecList.getCodecInfoAt(codecIdx);
            }
        } else {
            infos = new MediaCodecList(MediaCodecList.ALL_CODECS).getCodecInfos();
        }

        final StringBuilder result = new StringBuilder();
        for (int i = 0; i < infos.length; i++) {
            final MediaCodecInfo codecInfo = infos[i];
            result.append('\n')
                    .append(i).append("": "").append(codecInfo.getName()).append('\n')
                    .append(""isEncoder: "").append(codecInfo.isEncoder()).append('\n');

            final String[] supportedTypes = codecInfo.getSupportedTypes();
            result.append(""Supported types: "").append(Arrays.toString(supportedTypes)).append('\n');
            for (String type : supportedTypes) {
                result.append(collectCapabilitiesForType(codecInfo, type));
            }
            result.append('\n');
        }
        return result.toString();
    }","Builds a String describing the list of available codecs on the device with their capabilities (supported Color Formats, Codec Profiles et",1,381
2767,"public int getEndIndex()
    {
        return m_limit_;
    }",Returns the limit offset of the text to iterate,1,20
2768,"public static int indexOf(Object[] array, Object objectToFind, int startIndex) {
        if (array == null) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i < array.length; i++) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i < array.length; i++) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the index of the given object in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex is treated as zero.,1,223
2769,"private String getComponentRelativePath(final Component component,
			final MarkupContainer parentWithAssociatedMarkup)
	{
		final String componentPath = component.getParent().getPageRelativePath();
		final String parentWithAssociatedMarkupPath = parentWithAssociatedMarkup
				.getPageRelativePath();
		String relativePath = componentPath.substring(parentWithAssociatedMarkupPath.length());
		if (relativePath.startsWith("":""))
		{
			relativePath = relativePath.substring(1);
		}
		return relativePath;
	}",Get component path relativ to the parent container with associated markup,1,123
2770,"private InputStream openAtPosition(long position) throws IOException {
      if (position >= mLength) {
        return null;
      }

      LOG.info(""Open at position {}"", position);

      // If no stream has been created or if we need to go backward, make a new cached stream.
      if (mStream == null || mInitPos + mStream.getCount() > position) {
        LOG.info(""Creating new stream at position {}"", position);

        if (mStream != null) { // Close the existing stream if needed
          mStream.close();
        }
        UnderFileSystem ufs = UnderFileSystem.get(mUri, mConfiguration);
        // TODO(calvin): Consider making openAtPosition part of the UFS API
        if (ufs instanceof S3UnderFileSystem) { // Optimization for S3 UFS
          mStream =
              new CountingInputStream(((S3UnderFileSystem) ufs).openAtPosition(mUri, position));
          mInitPos = position;
        } else if (ufs instanceof GCSUnderFileSystem) { // Optimization for GCS UFS
          mStream =
              new CountingInputStream(((GCSUnderFileSystem) ufs).openAtPosition(mUri, position));
          mInitPos = position;
        } else { // Other UFSs can skip efficiently, so open at start of the file
          mStream = new CountingInputStream(ufs.open(mUri));
          mInitPos = 0;
        }
      }

      // We are guaranteed mStream has been created and the initial position has been set.
      // Guaranteed by the previous code block that currentPos <= position.
      long currentPos = mInitPos + mStream.getCount();
      if (position > currentPos) { // Can skip to next position with the same stream
        long toSkip = position - currentPos;
        if (toSkip != mStream.skip(toSkip)) {
          throw new IOException(ExceptionMessage.FAILED_SKIP.getMessage(toSkip));
        }
      }
      LOG.info(""Returning stream, possibly cached"");
      return mStream;
    }",Checks if the current stream can be reused to serve the request.,1,417
2771,"public Integer mtu()
    {
        return mtu;
    }",Get the maximum transmission unit (MTU) including Aeron header for a datagram payload.,1,20
2772,"public String toString()
    {
        return upName;
    }","A String representation of an Ava, as provided by the user.",1,20
2773,"public String determinePassword(File passwordFile, Locale clientLocale) throws Exception {
		AbstractBuildClient buildClient = getBuildClient();
		return buildClient.determinePassword(passwordFile, clientLocale);
	}",Determines the password to use when connecting to the repository from the file.,1,51
2774,"public static String getLocalizedString(String key, String pluginName, List arguments, Locale locale, boolean fallback) {
        if (pluginName == null) {
            return getLocalizedString(key, arguments);
        }

        if (locale == null) {
        	locale = JiveGlobals.getLocale();
        }
        String i18nFile = pluginName + ""_i18n"";

        // Retrieve classloader from pluginName.
        final XMPPServer xmppServer = XMPPServer.getInstance();
        PluginManager pluginManager = xmppServer.getPluginManager();
        Plugin plugin = pluginManager.getPlugin(pluginName);
        if (plugin == null) {
            throw new NullPointerException(""Plugin could not be located: "" + pluginName);
        }

        ClassLoader pluginClassLoader = pluginManager.getPluginClassloader(plugin);
        try {
            ResourceBundle bundle = ResourceBundle.getBundle(i18nFile, locale, pluginClassLoader);
            return getLocalizedString(key, locale, arguments, bundle);
        }
        catch (MissingResourceException mre) {
        	Locale jivesLocale = JiveGlobals.getLocale();
        	if (fallback && !jivesLocale.equals(locale)) {
        		Log.info(""Could not find the requested locale. Falling back to default locale."", mre);
            	return getLocalizedString(key, pluginName, arguments, jivesLocale, false);
        	}
        	
            Log.error(mre);
            return key;
        }
    }","Returns an internationalized string loaded from a resource bundle from the passed in plugin, using the passed in Locale.",1,362
2775,"protected Xrefer newXref(Reader reader) {
        return new JFlexXref(new PlainXref(reader));
    }",Creates a wrapped  PlainXref instance.,1,32
2776,"public static Mono<Void> when(final Iterable<? extends Publisher<?>> sources) {
		return onAssembly(new MonoWhen(false, sources));
	}",Aggregate given publishers into a new @literal Mono that will be fulfilled when all of the given @literal Publishers have completed.,1,50
2777,"public boolean isClustered() {
        return cluster;
    }",Returns true if the connection was opened in cluster mode.,1,19
2778,"public String getIdentifier() {
		return getText();
	}",Returns the identifier this expression represents.,1,21
2779,"public final boolean isConstant() {
        final ClassActor holder = holder();


        if (isFinal()) {
            if (isStatic()) {
                // Static final field:
                if (!holder().hasClassInitializer()) {
                    // The field will have the value specified by a ConstantValue attribute. If
                    // no such attribute is present for this field, then it will have the
                    // default value for its type.
                    return true;
                }
                if (MaxineVM.isPrototyping() && MaxineVM.isMaxineClass(holder())) {
                    // The class initializers of all Maxine classes are run while prototyping and
                    // the values they assign to static final fields are frozen in the boot image.
                    return true;
                }
                // This is now a field in a class with a class initializer:
                // before the class initializer is executed, the field's value is not guaranteed to be immutable.
                return holder().isInitialized();
            }

            // Non-static final field:
            return true;
        }

        if (isConstant(flags())) {
            assert MaxineVM.isMaxineClass(holder()) : ""@CONSTANT applied to field of non-Maxine class: "" + this;
            if (MaxineVM.isPrototyping()) {
                return true;
            }
            return !isStatic() || holder.isInitialized();
        }
        return false;
    }",Determines if the value read from this field will always be the same from this time on.,1,251
2780,"public static boolean getSymlink(Configuration conf){
    return true;
  }","Originally intended to check if symlinks should be used, but currently symlinks cannot be disabled.",1,23
2781,"public Object evaluate(Object o) throws JaxenException {
        setContexts(o);
        return xpath.evaluate(getEvaluationObject(o));
    }",Evaluates the XPath over the specified SOAPEnvelope.,1,41
2782,"public Object caseRule( Rule object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Rule'.,1,25
2783,"private Path getKotlinHome() {
    if (kotlinHome != null) {
      return kotlinHome;
    }

    try {
      // Check the buck configuration for a specified kotlin home
      Optional<String> value = delegate.getValue(SECTION, ""kotlin_home"");

      if (value.isPresent()) {
        boolean isAbsolute = Paths.get(value.get()).isAbsolute();
        Optional<Path> homePath = delegate.getPath(SECTION, ""kotlin_home"", !isAbsolute);
        if (homePath.isPresent() && Files.isDirectory(homePath.get())) {
          return homePath.get().toRealPath().normalize();
        } else {
          throw new HumanReadableException(
              ""Kotlin home directory ("" + homePath + "") specified in .buckconfig was not found."");
        }
      } else {
        // If the KOTLIN_HOME environment variable is specified we trust it
        String home = delegate.getEnvironment().get(""KOTLIN_HOME"");
        if (home != null) {
          return Paths.get(home).normalize();
        } else {
          // Lastly, we try to resolve from the system PATH
          Optional<Path> compiler =
              new ExecutableFinder()
                  .getOptionalExecutable(DEFAULT_KOTLIN_COMPILER, delegate.getEnvironment());
          if (compiler.isPresent()) {
            kotlinHome = compiler.get().toRealPath().getParent().normalize();
            if (kotlinHome != null && kotlinHome.endsWith(Paths.get(""bin""))) {
              kotlinHome = kotlinHome.getParent().normalize();
            }
            return kotlinHome;
          } else {
            throw new HumanReadableException(
                ""Could not resolve kotlin home directory, Consider setting KOTLIN_HOME."");
          }
        }
      }
    } catch (IOException io) {
      throw new HumanReadableException(
          ""Could not resolve kotlin home directory, Consider setting KOTLIN_HOME."", io);
    }
  }","Find the Kotlin home (installation) directory by searching in this order:   If the ""kotlin_home"" directory is specified in .buckconfig then use it.",1,472
2784,"public boolean isOwningCollection(Collection c)
    {
        if (owningCollectionId > 0)
        {
            if (c.getID() == owningCollectionId)
            {
                return true;
            }
        }
        else if (owningCollection != null)
        {
            if (c.getID() == owningCollection.getID())
            {
                return true;
            }
        }

        // not the owner
        return false;
    }",Return true if the given Collection 'owns' this item.,1,124
2785,"public StatisticsSet getStatistics() {
      return m_statistics;
    }",Get the  StatisticsSet.,1,19
2786,"public Feed remove(long feedId) throws NoSuchFeedException, SystemException {
		return remove(Long.valueOf(feedId));
	}",Removes the feed with the primary key from the database.,1,37
2787,"public O block() {
		return block(null);
	}","Block the calling thread indefinitely, waiting for the completion of this  MonoProcessor.",1,22
2788,"public final MemoryOperand asMemory() {
    return (MemoryOperand) this;
  }",Cast to an  MemoryOperand.,1,25
2789,"public RawLog newConnection(
        final String channel, final int sessionId, final int streamId, final long correlationId, final int termBufferLength)
    {
        if (termBufferLength > connectionTermBufferMaxLength)
        {
            throw new IllegalArgumentException(
                ""connection term buffer larger than max length: "" + termBufferLength + "" > "" + connectionTermBufferMaxLength);
        }

        return newInstance(subscriptionsDir, channel, sessionId, streamId, correlationId, termBufferLength);
    }",Create new  RawLog in the subscriptions directory for the supplied triplet.,1,120
2790,"AdvancedInstrumentRootFactory createAdvancedInstrumentRootFactory(Probe probe, String expr, AdvancedInstrumentResultListener resultListener) throws IOException {
        try {
            Class<? extends TruffleLanguage> langugageClass = ACCESSOR.findLanguage(probe);
            TruffleLanguage.Env env = ACCESSOR.findLanguage(vm, langugageClass);
            TruffleLanguage<?> l = ACCESSOR.findLanguage(env);
            DebugSupportProvider dsp = ACCESSOR.getDebugSupport(l);
            return dsp.createAdvancedInstrumentRootFactory(expr, resultListener);
        } catch (DebugSupportException ex) {
            throw new IOException(ex);
        }
    }","Creates a language-specific factory to produce instances of  AdvancedInstrumentRoot that, when executed, computes the result of a textual expression in the language; used to create an plain Instrument#create(AdvancedInstrumentResultListener, AdvancedInstrumentRootFactory, Class, String)",1,149
2791,"public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key){
		return new KeyedStream<T, K>(this, clean(key));
	}",It creates a new  KeyedStream that uses the provided key for partitioning its operator states.,1,54
2792,"public JCheckBoxMenuItem getWatchMenuItem() {
        for (Component component : fileMenu.getMenuComponents()) {
            if (component instanceof JCheckBoxMenuItem
                && ((JCheckBoxMenuItem) component).getActionCommand().equals(ActionCommands.WATCH.toString())) {
                
                return (JCheckBoxMenuItem) component;
            }
        }
        
        throw new IllegalStateException(""StayOpenCheckBoxMenuItem with actionCommand '"" + ActionCommands.WATCH + ""' not found"");
    }","Returns MenuItem, which is associated with ""WATCH"" action command.",1,117
2793,"public static Number minus(Character left, Character right) {
        return minus(Integer.valueOf(left), right);
    }",Subtract one Character from another.,1,40
2794,"protected List<byte[]> serializeMetered(String name, Metered meter) {
    List<byte[]> metrics = new ArrayList<byte[]>();

    metrics.add(serializeValue(name, meter.getCount(), ""count""));
    metrics.add(serializeValue(name, meter.getMeanRate(), ""rate"", ""mean""));
    metrics.add(serializeValue(name, meter.getOneMinuteRate(), ""rate"", ""1m""));
    metrics.add(serializeValue(name, meter.getFiveMinuteRate(), ""rate"", ""5m""));
    metrics.add(serializeValue(name, meter.getFifteenMinuteRate(), ""rate"", ""15m""));

    return metrics;
  }",Serialize a  com.codahale.metrics.Metered.,1,198
2795,"public static Parsers.Range range(char from, char to) {
		return new Parsers.Range(from, to);
	}","Shortcut for  new Parsers.Range(from, to).",1,41
2796,"public MultiLayerNetwork fit(JavaRDD<LabeledPoint> rdd,int batchSize) {
        FeedForwardLayer outputLayer = (FeedForwardLayer) conf.getConf(conf.getConfs().size() - 1).getLayer();
        return fitDataSet(MLLibUtil.fromLabeledPoint(rdd, outputLayer.getNOut(), batchSize));
    }",Fit the given rdd given the context.,1,82
2797,"public static IClasspathEntry newSourceEntry(IPath path) {

		return newSourceEntry(path, ClasspathEntry.NO_EXCLUSION_PATTERNS, null /*output location*/);
	}",Creates and returns a new classpath entry of kind CPE_SOURCE for the project's source folder identified by the given absolute workspace-relative path.,1,38
2798,"private XAResourceProducer createBean(String configuredName, List propertyPairs) throws ClassNotFoundException, IllegalAccessException, InstantiationException {
        for (int i = 0; i < propertyPairs.size(); i++) {
            PropertyPair propertyPair = (PropertyPair) propertyPairs.get(i);
            if (propertyPair.getName().equals(""className"")) {
                String className = propertyPair.getValue();
                XAResourceProducer producer = instanciate(className);
                if (producer == null)
                    throw new ResourceConfigurationException(""property <className> "" +
                            ""for resource <"" + configuredName + ""> in resources configuration file "" +
                            ""must be the name of a class implementing either javax.sql.XADataSource or javax.jms.XAConnectionFactory"");
                return producer;
            }
        }
        throw new ResourceConfigurationException(""missing mandatory property <className> for resource <"" + configuredName + ""> in resources configuration file"");
    }","Create a populated, uninitialized  XAResourceProducer instance depending on the className value.",1,212
2799,"public int getSlot() {
        return slot;
    }",Get the field number or spill slot,1,19
2800,"public Collection<Item> getItems() {
        synchronized (items) {
            return Collections.unmodifiableList(new ArrayList<Item>(items));
        }
    }","Returns a Collection of item childs that holds information about roles, affiliation, jids and nicks.",1,47
2801,"public String obtainGitHubToken(final String keycloakToken)
      throws ServerException, UnauthorizedException, ForbiddenException, NotFoundException,
          ConflictException, BadRequestException, IOException {
    return getAccessToken(gitHubEndpoint, keycloakToken);
  }","Return GitHub access token based on Keycloak token Note: valid response from keycloak endpoint: ""access_token"":""token"",""scope"":""admin:repo_hook,gist,read:org,repo,user"",""token_type"":""bearer""",1,54
2802,"public static MemoryAllocationsInspector make(Inspection inspection) {
        if (memoryAllocationsInspector == null) {
            memoryAllocationsInspector = new MemoryAllocationsInspector(inspection);
        }
        return memoryAllocationsInspector;
    }",Displays the (singleton) MemoryAllocations inspector.,1,54
2803,"public ChatRoom findRoom(String roomName)
        throws OperationFailedException, OperationNotSupportedException
    {
        //make sure we are connected and multichat is supported.
        assertSupportedAndConnected();

        String canonicalRoomName = getCanonicalRoomName(roomName);

        ChatRoom room = chatRoomCache.get(canonicalRoomName);

        if (room == null)
        {
            try
            {
                RoomInfo infos = MultiUserChat.getRoomInfo(
                    getXmppConnection(), canonicalRoomName);

                if (infos.getRoom().equals(canonicalRoomName))
                {
                    MultiUserChat muc =
                        new MultiUserChat(getXmppConnection(), canonicalRoomName);
                    room = new ChatRoomJabberImpl(muc,
                        jabberProvider);

                    chatRoomCache.put(canonicalRoomName, room);
                }
            } catch (XMPPException ex)
            {
                logger.debug(
                    ""failed to find room "" + canonicalRoomName + ""\n"", ex);
            }
        }
        return room;
    }",Returns a reference to a chatRoom named roomName or null if that room does not exist.,1,235
2804,"public static String generateDefaultTemplateName(Object object) {
        String classname = object.getClass().getName();
        int index = classname.lastIndexOf('.');
        return classname.substring(index + 1) + DEFAULT_TEMPLATE_EXTENSION;
    }","Return the name of the passed object class, without the package information.",1,70
2805,"public Predicate<? super E>[] getPredicates() {
        return FunctorUtils.copy(iPredicates);
    }",Gets the predicates.,1,33
2806,"public ECPair transform(ECPair cipherText)
    {
        if (key == null)
        {
            throw new IllegalStateException(""ECNewPublicKeyTransform not initialised"");
        }

        ECDomainParameters ec = key.getParameters();
        BigInteger n = ec.getN();

        ECMultiplier basePointMultiplier = new FixedPointCombMultiplier();
        BigInteger k = ECUtil.generateK(n, random);

        ECPoint[] gamma_phi = new ECPoint[]{
            basePointMultiplier.multiply(ec.getG(), k),
            key.getQ().multiply(k).add(cipherText.getY())
        };

        ec.getCurve().normalizeAll(gamma_phi);

        return new ECPair(gamma_phi[0], gamma_phi[1]);
    }",Transform an existing cipher text pair using the ElGamal algorithm.,1,203
2807,"public static Vector2 fromString (String v) {
		int s = v.indexOf(',', 1);
		if (s != -1 && v.charAt(0) == '(' && v.charAt(v.length() - 1) == ')') {
			try {
				float x = Float.parseFloat(v.substring(1, s));
				float y = Float.parseFloat(v.substring(s + 1, v.length() - 1));
				return new Vector2(x, y);
			} catch (NumberFormatException ex) {
				// Throw a GdxRuntimeException
			}
		}
		throw new GdxRuntimeException(""Malformed Vector2: "" + v);
	}",Parses the  Vector2 represented by the given string according to the format of  #toString().,1,206
2808,"public Firmware getFirmware(FirmwareUID firmwareUID) {
        return getFirmware(firmwareUID, localeProvider.getLocale());
    }",Returns the firmware for the given UID using the locale provided by the  LocaleProvider.,1,32
2809,"public static final String[] getKeywordValues(String key, ULocale locale, boolean commonlyUsed) {
        // Resolve region
        String prefRegion = locale.getCountry();
        if (prefRegion.length() == 0){
            ULocale loc = ULocale.addLikelySubtags(locale);
            prefRegion = loc.getCountry();
        }

        // Read preferred calendar values from supplementalData calendarPreferences
        LinkedList values = new LinkedList();
        //TODO: START
        String[] preferences = CALPREF[0];
        for (int i = 0; i < CALPREF.length; i++) {
            if (prefRegion.equals(CALPREF[i][0])) {
                preferences = CALPREF[i];
                break;
            }
        }
        for (int i = 1; i < preferences.length; i++) {
            if (!values.contains(preferences[i])) {
                values.add(preferences[i]);
            }
        }
        //TODO: END

        if (!commonlyUsed) {
            // if not commonlyUsed, add other available values
            for (int i = 0; i < calTypes.length; i++) {
                if (!values.contains(calTypes[i])) {
                    values.add(calTypes[i]);
                }
            }
        }
        return (String[])values.toArray(new String[values.size()]);
    }","Given a key and a locale, returns an array of string values in a preferred order that would make a difference.",1,377
2810,"public static LithoView create(ComponentContext context, Component component) {
    final LithoView componentView = new LithoView(context);
    componentView.setComponentTree(ComponentTree.create(context, component).build());

    return componentView;
  }",Create a new  LithoView instance and initialize it with the given  Component root.,1,68
2811,"public DomDocumentFragment createDocumentFragment() {
        return new DomDocumentFragment(this);
    }",Creates an empty  DomDocumentFragment object.,1,24
2812,"public GeoPoint fromPixels(final float x, final float y) {
			final Rect screenRect = getScreenRect();
			return TileSystem.PixelXYToLatLong(screenRect.left + (int) x + worldSize_2,
					screenRect.top + (int) y + worldSize_2, mZoomLevelProjection, null);
		}",Converts screen coordinates to the underlying GeoPoint.,1,88
2813,"protected String createId(Context context) throws SQLException
    {
        // Get configured prefix
        String handlePrefix = getPrefix();

        // Get next available suffix (as a Long, since DSpace uses an incrementing sequence)
        Long handleSuffix = handleDAO.getNextHandleSuffix(context);

        return handlePrefix + (handlePrefix.endsWith(""/"") ? """" : ""/"") + handleSuffix.toString();
    }",Create/mint a new handle id.,1,94
2814,"public User getUser() {
        return syncSession.getConfiguration().getUser();
    }",Returns the  User defined by the  SyncConfiguration that is used to connect to the,1,27
2815,"public AccountManagerFuture<Bundle> addAccount(final String accountType,
            final String authTokenType, final String[] requiredFeatures,
            final Bundle addAccountOptions,
            final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler) {
        return new AmsTask(activity, handler, callback) {
            public void doWork() throws RemoteException {
                if (accountType == null) {
                    Log.e(TAG, ""the account must not be null"");
                    // to unblock caller waiting on Future.get()
                    set(new Bundle()); 
                    return;
                }
                mService.addAcount(mResponse, accountType, authTokenType,
                        requiredFeatures, activity != null, addAccountOptions);
            }
        }.start();
    }",Request that an account be added with the given accountType.,1,191
2816,"public MotionRange getMotionRange(int rangeType) {
        if (rangeType < 0 || rangeType > MOTION_RANGE_LAST) {
            throw new IllegalArgumentException(""Requested range is out of bounds."");
        }
        
        return mMotionRanges[rangeType];
    }",Gets information about the range of values for a particular  MotionEvent coordinate.,1,65
2817,"public Optional<Column> getGenerateKeyColumn(final String logicTableName) {
        for (TableRule each : tableRules) {
            if (each.getLogicTable().equalsIgnoreCase(logicTableName) && null != each.getGenerateKeyColumn()) {
                return Optional.of(new Column(each.getGenerateKeyColumn(), logicTableName));
            }
        }
        return Optional.absent();
    }",get generated key's column.,1,107
2818,"public static <K, V, M> OutputOperatorSpec<M> createSendToOperatorSpec(
      OutputStreamImpl<K, V, M> outputStream, int opId) {
    return new OutputOperatorSpec<>(outputStream, OperatorSpec.OpCode.SEND_TO, opId);
  }",Creates a  OutputOperatorSpec for the sendTo operator.,1,70
2819,"public List<? extends FrameSlot> getSlots() {
        return Collections.unmodifiableList(slots);
    }",Current set of slots in the descriptor.,1,31
2820,"public static Artifact getArtifactFromId(String guid, IOseeBranch branch) throws OseeCoreException {
      return getOrCheckArtifactFromId(guid, branch, EXCLUDE_DELETED, QueryType.GET);
   }",search for exactly one artifact by one its guid - otherwise throw an exception,1,47
2821,"public boolean needsCallee() {
        return needsParentScope() || needsSelfSymbol() || (needsArguments() && !isStrictMode());
    }",Check if this function's generated Java method needs a  callee parameter.,1,45
2822,"private static List<String> getJoinedRooms(XMPPConnection connection) {
        List<String> rooms = joinedRooms.get(connection);
        if (rooms != null) {
            return rooms;
        }
        // Return an empty collection (i.e. the user never joined a room)
        return Collections.emptyList();
    }",Returns a List of the rooms where the user has joined using a given connection.,1,75
2823,"public KaleoInstance remove(long kaleoInstanceId)
		throws NoSuchInstanceException, SystemException {
		return remove(Long.valueOf(kaleoInstanceId));
	}",Removes the kaleo instance with the primary key from the database.,1,38
2824,"static ResolvableType forType(Type type, VariableResolver variableResolver) {
		if(type == null) {
			return NONE;
		}
		// Check the cache, we may have a ResolvableType that may have already been resolved
		ResolvableType key = new ResolvableType(type, variableResolver, null);
		ResolvableType resolvableType = cache.get(key);
		if (resolvableType == null) {
			resolvableType = key;
			cache.put(key, resolvableType);
		}
		return resolvableType;
	}",Return a  ResolvableType for the specified  Type backed by a given  VariableResolver.,1,125
2825,"public boolean equals(Object obj) {
        if (obj instanceof MutableLong) {
            return value == ((MutableLong) obj).longValue();
        }
        return false;
    }",Compares this object against the specified object.,1,59
2826,"public static <K, V, M> SinkOperatorSpec<M> createSendToOperatorSpec(
      OutputStreamInternal<K, V, M> outputStream, int opId) {
    return new SinkOperatorSpec<>(outputStream, OperatorSpec.OpCode.SEND_TO, opId);
  }",Creates a  SinkOperatorSpec for the sendTo operator.,1,70
2827,"public static Function<CoreEvent, CoreEvent> updateEventForStreaming(final StreamingManager streamingManager) {
    return event -> {
      TypedValue payload = event.getMessage().getPayload();
      if (payload.getValue() instanceof CursorProvider) {
        Message message = Message.builder(event.getMessage())
            .payload(updateTypedValueForStreaming(payload, event, streamingManager))
            .build();
        return CoreEvent.builder(event).message(message).build();
      }
      return event;
    };
  }",Provides a function that updates the payload value of an  CoreEvent by replacing it with a  CursorProvider.,1,145
2828,"public static boolean isCase(CharSequence caseValue, Object switchValue) {
        String s = caseValue.toString();
        if (switchValue == null) {
            return s == null;
        }
        return s.equals(switchValue.toString());
    }","'Case' implementation for a CharSequence, which uses equals between the toString() of the caseValue and the switchValue.",1,80
2829,"public String getContent() {
        return content;
    }",Return the CssStyle content.,1,19
2830,"public Map getMap() {
        // cache the Map
        if (mapDecorator == null) {
            mapDecorator = new DynaBeanMapDecorator(this);
        }
        return mapDecorator;
    }",Return a Map representation of this DynaBean.,1,52
2831,"private Object getSelectedItem() {
		Object result = null;
		
		TreeNode node = getSelectedNode();
		if (node != null) {
			Object object = node.getValue();
			if (object instanceof String) {
				TreeNode root = getRootParentNode(node);
				if (root.getValue() instanceof ISDKRepository) {
					result = root.getValue();
				}
			} else {
				result = node.getValue();				
			}
		}
		return result;
	}",Gets the selected item  Object.,1,155
2832,"public Iterator getMatchingMimeHeaders(String[] names) {
        return mimeHeaders.getMatchingHeaders(names);
    }",Retrieves all MimeHeader objects that match a name in the given array.,1,29
2833,"@SuppressWarnings(""unchecked"")
        @Override
        public <U, LEFT_PROJECTION extends HigherKinded<U, LeftProjection<?, R>>> LeftProjection<U, R> flatMap(Function<? super L, ? extends LEFT_PROJECTION> mapper) {
            Objects.requireNonNull(mapper);
            if (either.isLeft()) {
                return (LeftProjection<U, R>) mapper.apply(asLeft());
            } else {
                return (LeftProjection<U, R>) this;
            }
        }",FlatMaps the left value if the projected Either is a Left.,1,141
2834,"public DContentRule parse( String schemaDescription ) throws ParseException
    {
        return parseDITContentRuleDescription( schemaDescription );
    }",Parses a DContentRule description.,1,34
2835,"public MPPointD getPixelsForValues(float x, float y, AxisDependency axis) {
        return getTransformer(axis).getPixelsForValues(x, y);
    }",Returns a recyclable MPPointD instance,1,43
2836,"public static final String makeLongTimeString(final Context context, long secs) {
        long hours, mins;

        hours = secs / 3600;
        secs %= 3600;
        mins = secs / 60;

        int stringId = R.string.duration_mins;
        if (hours != 0) {
            stringId = R.string.duration_hours;
        }

        final String durationFormat = context.getResources().getString(stringId);
        return String.format(durationFormat, hours, mins);
    }",Used to create a formatted time string in the format of #h #m or #m if there is only minutes,1,153
2837,"public CiKind argumentKindAt(int index) {
        return kinds[index];
    }",Gets the kind of the specified argument.,1,25
2838,"public Comment remove(Comment comment) throws SystemException {
		return super.remove(comment);
	}",Removes the comment from the database.,1,31
2839,"public static StringBuilder leftShift(StringBuilder self, Object value) {
        self.append(value);
        return self;
    }",Overloads the left shift operator to provide syntactic sugar for appending to a StringBuilder.,1,38
2840,"public boolean addBean(Object o)
    {
        if (o instanceof LifeCycle)
        {
            LifeCycle l = (LifeCycle)o;
            return addBean(o,l.isRunning()?Managed.UNMANAGED:Managed.AUTO);
        }
        return addBean(o,Managed.MANAGED);
    }","Adds the given bean, detecting whether to manage it or not.",1,83
2841,"public PeriodType withMonthsRemoved() {
        if (!months().isSupported()) {
            return this;
        }
        return MaskedType.mask(this, 1 << 1);
    }",Returns a version of this PeriodType instance that does not support months.,1,57
2842,"public MPPointF getTrans(float x, float y) {

        ViewPortHandler vph = mChart.getViewPortHandler();

        float xTrans = x - vph.offsetLeft();
        float yTrans = 0f;

        // check if axis is inverted
        if (inverted()) {
            yTrans = -(y - vph.offsetTop());
        } else {
            yTrans = -(mChart.getMeasuredHeight() - y - vph.offsetBottom());
        }

        return MPPointF.getInstance(xTrans, yTrans);
    }",Returns a recyclable MPPointF instance.,1,151
2843,"public String getPath(Uri uri) {
        final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;

        // DocumentProvider
        if (isKitKat && DocumentsContract.isDocumentUri(getApplicationContext(), uri)) {
            // ExternalStorageProvider
            if (isExternalStorageDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                final String type = split[0];

                if (""primary"".equalsIgnoreCase(type)) {
                    return Environment.getExternalStorageDirectory() + ""/"" + split[1];
                }
            }
            // DownloadsProvider
            else if (isDownloadsDocument(uri)) {

                final String id = DocumentsContract.getDocumentId(uri);
                final Uri contentUri = ContentUris.withAppendedId(Uri.parse(""content://downloads/public_downloads""),
                        Long.valueOf(id));

                return getDataColumn(getApplicationContext(), contentUri, null, null);
            }
            // MediaProvider
            else if (isMediaDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                final String type = split[0];

                Uri contentUri = null;
                if (""image"".equals(type)) {
                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                } else if (""video"".equals(type)) {
                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                } else if (""audio"".equals(type)) {
                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                }

                final String selection = ""_id=?"";
                final String[] selectionArgs = new String[] { split[1] };

                return getDataColumn(getApplicationContext(), contentUri, selection, selectionArgs);
            }
            // Documents providers returned as content://...
            else if (isContentDocument(uri)) {
                return uri.toString();
            }
        }
        // MediaStore (and general)
        else if (""content"".equalsIgnoreCase(uri.getScheme())) {

            // Return the remote address
            if (isGooglePhotosUri(uri))
                return uri.getLastPathSegment();

            return getDataColumn(getApplicationContext(), uri, null, null);
        }
        // File
        else if (""file"".equalsIgnoreCase(uri.getScheme())) {
            return uri.getPath();
        }
        return null;
    }",Translates a content URI of an content to a physical path on the disk,1,673
2844,"public static boolean isStatic(final HttpServletRequest request) {
        final boolean requestStaticResourceChecked =
                      null == request.getAttribute(REQUEST_STATIC_RESOURCE_CHECKED)
                      ? false : (Boolean) request.getAttribute(REQUEST_STATIC_RESOURCE_CHECKED);
        if (requestStaticResourceChecked) {
            return (Boolean) request.getAttribute(IS_REQUEST_STATIC_RESOURCE);
        }

        request.setAttribute(REQUEST_STATIC_RESOURCE_CHECKED, true);
        request.setAttribute(IS_REQUEST_STATIC_RESOURCE, false);

        final String requestURI = request.getRequestURI();
        for (final String pattern : STATIC_RESOURCE_PATHS) {
            if (AntPathMatcher.match(pattern, requestURI)) {
                request.setAttribute(IS_REQUEST_STATIC_RESOURCE, true);
                return true;
            }
        }

        return false;
    }",Determines whether the client requests a static resource with the specified request.,1,195
2845,"public boolean match(File file) {
        boolean ret = false;

        String fileName = file.getName();
        String absolute = file.getAbsolutePath();

        if (filename.contains(fileName)) {
            ret = true;
        } else {
            for (Pattern p : patterns) {
                Matcher m = p.matcher(fileName);
                if (m.matches()) {
                    ret = true;
                    break;
                }
                if (p.pattern().contains(""/"")) {
                    m = p.matcher(absolute);
                    if (m.matches()) {
                        ret = true;
                        break;
                    }
                }
            }
        }

        if (!ret) {
            for (String s : path) {
                if (absolute.endsWith(s)) {
                    ret = true;
                    break;
                }
            }
        }

        //Check File extension
        if (!ret) {      
            int start = fileName.indexOf(""."");          
            if(start != -1){
                String fileExtension = fileName.substring(start,fileName.length());
                 if (filename.contains(fileExtension)) {
                     ret = true;
                }
            }
        }
        
        return ret;
    }",Should the file be ignored or not?,1,380
2846,"private List<Stage> filterParallelPerHostStages(List<Stage> stages) {
    List<Stage> retVal = new ArrayList<Stage>();
    Set<String> affectedHosts = new HashSet<String>();
    Set<Long> affectedRequests = new HashSet<Long>();

    for (Stage s : stages) {
      long requestId = s.getRequestId();

      if (LOG.isTraceEnabled()) {
        LOG.trace(""==> Processing stage: {}/{} ({}) for {}"", requestId, s.getStageId(), s.getRequestContext());
      }

      boolean addStage = true;

      // Iterate over the relevant hosts for this stage to see if any intersect with the set of
      // hosts needed for previous stages.  If any intersection occurs, this stage may not be
      // executed in parallel.
      for (String host : s.getHosts()) {
        LOG.trace(""===> Processing Host {}"", host);

        if (affectedHosts.contains(host)) {
          if (LOG.isTraceEnabled()) {
            LOG.trace(""===>  Skipping stage since it utilizes at least one host that a previous stage requires: {}/{} ({})"", s.getRequestId(), s.getStageId(), s.getRequestContext());
          }

          addStage &= false;
        } else {
          if (!Stage.INTERNAL_HOSTNAME.equalsIgnoreCase(host) && !isStageHasBackgroundCommandsOnly(s, host)) {
            LOG.trace(""====>  Adding host to affected hosts: {}"", host);
            affectedHosts.add(host);
          }

          addStage &= true;
        }
      }

      // If this stage is for a request that we have already processed, the it cannot execute in
      // parallel since only one stage per request my execute at a time. The first time we encounter
      // a request id, will be for the first pending stage for that request, so it is a candidate
      // for execution at this time - if the previous test for host intersection succeeds.
      if (affectedRequests.contains(requestId)) {
        if (LOG.isTraceEnabled()) {
          LOG.trace(""===>  Skipping stage since the request it is in has been processed already: {}/{} ({})"", s.getRequestId(), s.getStageId(), s.getRequestContext());
        }

        addStage = false;
      } else {
        if (LOG.isTraceEnabled()) {
          LOG.trace(""====>  Adding request to affected requests: {}"", requestId);
        }

        affectedRequests.add(requestId);
        addStage &= true;
      }

      // If both tests pass - the stage is the first pending stage in its request and the hosts
      // required in the stage do not intersect with hosts from stages that should occur before this,
      // than add it to the list of stages that may be executed in parallel.
      if (addStage) {
        if (LOG.isTraceEnabled()) {
          LOG.trace(""===>  Adding stage to return value: {}/{} ({})"", s.getRequestId(), s.getStageId(), s.getRequestContext());
        }

        retVal.add(s);
      }
    }

    return retVal;
  }",Returns filtered list of stages such that the returned list is an ordered list of stages that may be executed in parallel or in the order in which they are presented,1,595
2847,"private View createView(int event, boolean advancingPage) {
        FormController formController = getFormController();

        setTitle(formController.getFormTitle());

        formController.getAuditEventLogger().logEvent(AuditEvent.getAuditEventTypeFromFecType(event),
                formController.getFormIndex().getReference(), true);

        switch (event) {
            case FormEntryController.EVENT_BEGINNING_OF_FORM:
                return createViewForFormBeginning(formController);
            case FormEntryController.EVENT_END_OF_FORM:
                return createViewForFormEnd(formController);
            case FormEntryController.EVENT_QUESTION:
            case FormEntryController.EVENT_GROUP:
            case FormEntryController.EVENT_REPEAT:
                releaseOdkView();
                // should only be a group here if the event_group is a field-list
                try {
                    FormEntryPrompt[] prompts = formController.getQuestionPrompts();
                    FormEntryCaption[] groups = formController
                            .getGroupsForCurrentIndex();
                    odkView = new ODKView(this, prompts, groups, advancingPage);
                    odkView.setWidgetValueChangedListener(this);
                    Timber.i(""Created view for group %s %s"",
                            groups.length > 0 ? groups[groups.length - 1].getLongText() : ""[top]"",
                            prompts.length > 0 ? prompts[0].getQuestionText() : ""[no question]"");
                } catch (RuntimeException e) {
                    Timber.e(e);
                    // this is badness to avoid a crash.
                    try {
                        event = formController.stepToNextScreenEvent();
                        createErrorDialog(e.getMessage(), DO_NOT_EXIT);
                    } catch (JavaRosaException e1) {
                        Timber.d(e1);
                        createErrorDialog(e.getMessage() + ""\n\n"" + e1.getCause().getMessage(),
                                DO_NOT_EXIT);
                    }
                    return createView(event, advancingPage);
                }

                if (showNavigationButtons) {
                    updateNavigationButtonVisibility();
                }
                return odkView;

            case FormEntryController.EVENT_PROMPT_NEW_REPEAT:
                createRepeatDialog();
                return new EmptyView(this);

            default:
                Timber.e(""Attempted to create a view that does not exist."");
                // this is badness to avoid a crash.
                try {
                    event = formController.stepToNextScreenEvent();
                    createErrorDialog(getString(R.string.survey_internal_error), EXIT);
                } catch (JavaRosaException e) {
                    Timber.d(e);
                    createErrorDialog(e.getCause().getMessage(), EXIT);
                }
                return createView(event, advancingPage);
        }
    }",Creates and returns a new view based on the event type passed in.,1,590
2848,"public long getUsedBytes() {
    long ret = 0;
    for (StorageTier tier : mStorageTiers) {
      ret += tier.getUsedBytes();
    }
    return ret;
  }",Get the total used bytes of the worker.,1,60
2849,"public Collection<Item> getRosterItems() {
        synchronized (rosterItems) {
            return Collections.unmodifiableList(new ArrayList<Item>(rosterItems));
        }
    }",Returns an unmodifiable collection for the roster items in the packet.,1,47
2850,"public int selectedRow(JTable table) {
    int selectedRow = selectedRowOf(table);
    assertThat(selectedRow).as(propertyName(table, ""selectedRow"")).isGreaterThanOrEqualTo(0);
    return selectedRow;
  }",Returns the index of the first selected row in the given  JTable.,1,60
2851,"private List<DownloadItem> updateAllNotifications(List<DownloadProgress> progresses) {
        assert !ThreadUtils.runningOnUiThread();
        List<DownloadItem> downloadItems = new ArrayList<DownloadItem>();
        for (int i = 0; i < progresses.size(); ++i) {
            DownloadProgress progress = progresses.get(i);
            DownloadItem item = progress.mDownloadItem;
            DownloadInfo info = item.getDownloadInfo();
            switch (progress.mDownloadStatus) {
                case DOWNLOAD_STATUS_COMPLETE:
                    boolean success = addCompletedDownload(item);
                    if (success) {
                        boolean canResolve = isOMADownloadDescription(info)
                                || canResolveDownloadItem(
                                        mContext, item, progress.mIsSupportedMimeType);
                        long systemDownloadId = item.getSystemDownloadId();
                        mDownloadNotifier.notifyDownloadSuccessful(
                                info, systemDownloadId, canResolve, progress.mIsSupportedMimeType);
                        broadcastDownloadSuccessful(info);
                    } else {
                        downloadItems.add(item);
                        mDownloadNotifier.notifyDownloadFailed(info);
                    }
                    break;
                case DOWNLOAD_STATUS_FAILED:
                    downloadItems.add(item);
                    mDownloadNotifier.notifyDownloadFailed(info);
                    Log.w(TAG, ""Download failed: "" + info.getFilePath());
                    break;
                case DOWNLOAD_STATUS_IN_PROGRESS:
                    if (info.isPaused()) {
                        mDownloadNotifier.notifyDownloadPaused(info);
                        recordDownloadResumption(UMA_DOWNLOAD_RESUMPTION_MANUAL_PAUSE);
                    } else {
                        mDownloadNotifier.notifyDownloadProgress(info,
                                progress.mStartTimeInMillis, progress.mCanDownloadWhileMetered);
                    }
                    break;
                case DOWNLOAD_STATUS_CANCELLED:
                    mDownloadNotifier.notifyDownloadCanceled(item.getId());
                    break;
                case DOWNLOAD_STATUS_INTERRUPTED:
                    mDownloadNotifier.notifyDownloadInterrupted(info, progress.mIsAutoResumable);
                    break;
                default:
                    assert false;
                    break;
            }
        }
        return downloadItems;
    }",Updates notifications for a given list of downloads.,1,463
2852,"protected VaadinServiceSession getSession() {
        UI uI = getUI();
        if (uI == null) {
            return null;
        } else {
            return uI.getSession();
        }
    }",Finds the  VaadinServiceSession to which this connector belongs.,1,65
2853,"public boolean isAnimating() {
		return mAnimationListener.isAnimating();
	}",Check mAnimationListener.isAnimating() to determine if view is animating.,1,23
2854,"public BasicDocumentRevision getCurrentRevision() {
        for(DocumentRevisionNode n : leafs) {
            if(n.getData().isCurrent()) {
                return n.getData();
            }
        }
        throw new IllegalStateException(""No current revision found."");
    }",Returns the  BasicDocumentRevision that is the current winning revision for this  DocumentRevisionTree.,1,72
2855,"public static boolean applyFontToTextView(final Context context, final TextView textView, final String filePath) {
        if (textView == null || context == null) return false;
        final AssetManager assetManager = context.getAssets();
        final Typeface typeface = TypefaceUtils.load(assetManager, filePath);
        return applyFontToTextView(textView, typeface);
    }",Useful for manually fonts to a TextView.,1,109
2856,"public static Target of(Object value) {
                    if (value == null) {
                        return new ForStackManipulation(NullConstant.INSTANCE);
                    } else if (value instanceof Boolean) {
                        return new ForStackManipulation(IntegerConstant.forValue((Boolean) value));
                    } else if (value instanceof Byte) {
                        return new ForStackManipulation(IntegerConstant.forValue((Byte) value));
                    } else if (value instanceof Short) {
                        return new ForStackManipulation(IntegerConstant.forValue((Short) value));
                    } else if (value instanceof Character) {
                        return new ForStackManipulation(IntegerConstant.forValue((Character) value));
                    } else if (value instanceof Integer) {
                        return new ForStackManipulation(IntegerConstant.forValue((Integer) value));
                    } else if (value instanceof Long) {
                        return new ForStackManipulation(LongConstant.forValue((Long) value));
                    } else if (value instanceof Float) {
                        return new ForStackManipulation(FloatConstant.forValue((Float) value));
                    } else if (value instanceof Double) {
                        return new ForStackManipulation(DoubleConstant.forValue((Double) value));
                    } else if (value instanceof String) {
                        return new ForStackManipulation(new TextConstant((String) value));
                    } else {
                        throw new IllegalArgumentException(""Not a constant value: "" + value);
                    }
                }",Creates a target for an offset mapping for a constant value or  null.,1,405
2857,"public static <A> BoundNullaryProcedure bind(Procedure<? super A> procedure, A arg) {
        return null == procedure ? null : new BoundNullaryProcedure(procedure, arg);
    }","Adapt the given, possibly-null,  Procedure Procedure to the  NullaryProcedure NullaryProcedure interface by binding the specified Object as a constant argument.",1,61
2858,"public final boolean isMinimalPutsEnabledByDefault() {
        return true;
    }",Whether to optimize for minimals puts or minimal gets.,1,21
2859,"FunctionType supAndInfHelper(FunctionType that, boolean leastSuper) {
    // NOTE(nicksantos): When we remove the unknown type, the function types
    // form a lattice with the universal constructor at the top of the lattice,
    // and the LEAST_FUNCTION_TYPE type at the bottom of the lattice.
    //
    // When we introduce the unknown type, it's much more difficult to make
    // heads or tails of the partial ordering of types, because there's no
    // clear hierarchy between the different components (parameter types and
    // return types) in the ArrowType.
    //
    // Rather than make the situation more complicated by introducing new
    // types (like unions of functions), we just fallback on the simpler
    // approach of getting things right at the top and the bottom of the
    // lattice.
    //
    // If there are unknown parameters or return types making things
    // ambiguous, then sup(A, B) is always the top function type, and
    // inf(A, B) is always the bottom function type.
    Preconditions.checkNotNull(that);

    if (isEquivalentTo(that)) {
      return this;
    }

    // If these are ordinary functions, then merge them.
    // Don't do this if any of the params/return
    // values are unknown, because then there will be cycles in
    // their local lattice and they will merge in weird ways.
    if (isOrdinaryFunction() && that.isOrdinaryFunction() &&
        !this.call.hasUnknownParamsOrReturn() &&
        !that.call.hasUnknownParamsOrReturn()) {

      // Check for the degenerate case, but double check
      // that there's not a cycle.
      boolean isSubtypeOfThat = this.isSubtype(that);
      boolean isSubtypeOfThis = that.isSubtype(this);
      if (isSubtypeOfThat && !isSubtypeOfThis) {
        return leastSuper ? that : this;
      } else if (isSubtypeOfThis && !isSubtypeOfThat) {
        return leastSuper ? this : that;
      }

      // Merge the two functions component-wise.
      FunctionType merged = tryMergeFunctionPiecewise(that, leastSuper);
      if (merged != null) {
        return merged;
      }
    }

    // The function instance type is a special case
    // that lives above the rest of the lattice.
    JSType functionInstance = registry.getNativeType(
        JSTypeNative.FUNCTION_INSTANCE_TYPE);
    if (functionInstance.isEquivalentTo(that)) {
      return leastSuper ? that : this;
    } else if (functionInstance.isEquivalentTo(this)) {
      return leastSuper ? this : that;
    }

    // In theory, we should be using the GREATEST_FUNCTION_TYPE as the
    // greatest function. In practice, we don't because it's way too
    // broad. The greatest function takes var_args None parameters, which
    // means that all parameters register a type warning.
    //
    // Instead, we use the U2U ctor type, which has unknown type args.
    FunctionType greatestFn =
        registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
    FunctionType leastFn =
        registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);
    return leastSuper ? greatestFn : leastFn;
  }",Computes the supremum or infimum of two functions.,1,466
2860,"public BoundingVolume mergeLocal(BoundingVolume volume) {
        if (volume == null) {
            return this;
        }

        switch (volume.getType()) {
            case AABB:
                BoundingBox vBox = (BoundingBox) volume;
                return mergeLocal(vBox.center, vBox.xExtent, vBox.yExtent,
                        vBox.zExtent);

            case Sphere:
                BoundingSphere vSphere = (BoundingSphere) volume;
                return mergeLocal(vSphere.center, vSphere.radius,
                        vSphere.radius, vSphere.radius);

//            case OBB: {
//                return mergeOBB((OrientedBoundingBox) volume);
//            }

            default:
                return null;
        }
    }",mergeLocal combines this bounding box locally with a second bounding volume.,1,168
2861,"public static List<EmailAttachment> mapToEmailAttachments(Object payload) {
    return payload instanceof DefaultMultiPartContent
        ? ((DefaultMultiPartContent) payload)
            .getNonBodyParts().stream().map(p -> new EmailAttachment(((PartAttributes) p.getAttributes()).getName(),
                                                                     p.getPayload().getValue(),
                                                                     p.getPayload().getDataType().getMediaType()))
            .collect(toList())
        : emptyList();
  }",Transforms the attachments in a  MultiPartContent into a  List of  EmailAttachments.,1,125
2862,"public ChannelType getChannelType(Channel channel) {
        return getChannelType(channel, null);
    }",Returns the channel type for a given channel.,1,28
2863,"public Object clone( ) throws CloneNotSupportedException
	{
		throw new CloneNotSupportedException( );
	}",This method is not supported in report design.,1,30
2864,"public static Timer newTimer(Class<?> klass,
                                       String name,
                                       String scope) {
        return DEFAULT_REGISTRY.newTimer(klass, name, scope);
    }","Creates a new  com.yammer.metrics.core.Timer and registers it under the given class, name, and scope, measuring elapsed time in milliseconds and invocations per second.",1,50
2865,"public static String repeat(String str, String separator, int repeat) {
        if(str == null || separator == null) {
            return repeat(str, repeat);
        } else {
            // given that repeat(String, int) is quite optimized, better to rely on it than try and splice this into it
            String result = repeat(str + separator, repeat);
            return removeEnd(result, separator);
        }
    }","Repeat a String repeat times to form a new String, with a String separator injected each time.",1,108
2866,"public OptionalMethodInterception withImplementing(Collection<? extends TypeDefinition> typeDefinitions) {
        return new OptionalMethodInterception(classFileVersion,
                namingStrategy,
                auxiliaryTypeNamingStrategy,
                implementationContextFactory,
                joinUniqueRaw(interfaceTypes, new GenericTypeList.Explicit(toList(isImplementable(typeDefinitions)))),
                ignoredMethods,
                classVisitorWrapper,
                methodRegistry,
                modifiers,
                typeAttributeAppender,
                methodGraphCompiler,
                defaultFieldAttributeAppenderFactory,
                defaultMethodAttributeAppenderFactory,
                new LatentMethodMatcher.Resolved(isDeclaredBy(anyOf(new GenericTypeList.Explicit(toList(typeDefinitions)).asErasures()))));
    }",Defines all dynamic typeDefinitions that are created by this configuration to implement the given interfaces.,1,132
2867,"private static ImportedRow mapLine(final String[] line, final Map<Integer, ImportedColumn> mapping, final Map<String, String> userMap) {

		final ImportedRow row = new ImportedRow();

		for (final Map.Entry<Integer, ImportedColumn> entry : mapping.entrySet()) {

			final int i = entry.getKey();
			final ImportedColumn column = entry.getValue();

			// In case there aren't enough data fields in the line to match up with the number of columns needed
			String lineVal = null;
			if (i < line.length) {
				lineVal = trim(line[i]);
			}

			final String columnTitle = column.getColumnTitle();

			ImportedCell cell = row.getCellMap().get(columnTitle);
			if (cell == null) {
				cell = new ImportedCell();
			}

			if (column.getType() == ImportedColumn.Type.USER_ID) {

				//skip blank lines
				if(StringUtils.isBlank(lineVal)) {
					log.debug(""Skipping empty row"");
					return null;
				}

				// check user is in the map (ie in the site)
				final String studentUuid = userMap.get(lineVal);
				if(StringUtils.isBlank(studentUuid)){
					log.debug(""Student was found in file but not in site: "" + lineVal);
					throw new GbImportExportUnknownStudentException(""Student was found in file but not in site: "" + lineVal);
				}
				row.setStudentEid(lineVal);
				row.setStudentUuid(studentUuid);

			} else if (column.getType() == ImportedColumn.Type.USER_NAME) {
				row.setStudentName(lineVal);

			} else if (column.getType() == ImportedColumn.Type.GB_ITEM_WITH_POINTS) {
				cell.setScore(lineVal);
				row.getCellMap().put(columnTitle, cell);

			} else if (column.getType() == ImportedColumn.Type.GB_ITEM_WITHOUT_POINTS) {
				row.getCellMap().put(columnTitle, cell);

			} else if (column.getType() == ImportedColumn.Type.COMMENTS) {
				cell.setComment(lineVal);
				row.getCellMap().put(columnTitle, cell);
			}

		}

		return row;
	}",Takes a row of data and maps it into the appropriate  ImportedRow pieces,1,583
2868,"public Plan getPlan( String notation ) {
		CommandDependency dep = manager.getCommands().get( notation );
		return getPlan( dep.getTarget() );
	}",Get a  Plan for a notation,1,54
2869,"public ConfigChangeListener listenerProvider() {
        ConfigChangeListener listener=new ConfigChangeListener() {
            @Override
            public ExecutorService getExecutor() {
                return null;
            }

            @Override
            public void receiveConfigInfo(String configInfo) {
                System.out.print(configInfo);
            }
        };
        return listener;
    }",Listener provider,1,91
2870,"public DateTimeZone getZone() {
        return getChronology().getZone();
    }",Gets the time zone of the instant from the chronology.,1,25
2871,"public List<Affiliate> getOutcasts() throws NoResponseException, XMPPErrorException, NotConnectedException {
        return getAffiliatesByAdmin(MUCAffiliation.outcast);
    }",Returns a list of Affiliate with the room outcasts.,1,37
2872,"public static Constant readUnsafeConstant(Kind kind, Object object, long displacement) {
        assert object != null;
        switch (kind) {
            case Boolean:
                return Constant.forBoolean(unsafe.getBoolean(object, displacement));
            case Byte:
                return Constant.forByte(unsafe.getByte(object, displacement));
            case Char:
                return Constant.forChar(unsafe.getChar(object, displacement));
            case Short:
                return Constant.forShort(unsafe.getShort(object, displacement));
            case Int:
                return Constant.forInt(unsafe.getInt(object, displacement));
            case Long:
                return Constant.forLong(unsafe.getLong(object, displacement));
            case Float:
                return Constant.forFloat(unsafe.getFloat(object, displacement));
            case Double:
                return Constant.forDouble(unsafe.getDouble(object, displacement));
            case Object:
                return Constant.forObject(unsafe.getObject(object, displacement));
            default:
                throw GraalInternalError.shouldNotReachHere();
        }
    }",Utility function for reading a value of this kind using an object and a displacement.,1,290
2873,"public boolean addTexture(Texture texture, String mapName, String sourceTextureName) {
        if (texture == null) {
            return false;
        }
        String name = textureName(texture);
        if (texture.getImage() != null && name != null) {
            return addImage(texture.getImage(), name, mapName, sourceTextureName);
        } else {
            return false;
        }
    }",Add a texture for a specific map name at the location of another existing texture (on the master map).,1,128
2874,"protected DatanodeDescriptor chooseRandom(
                                          String nodes,
                                          HashMap<Node, Node> excludedNodes,
                                          long blocksize,
                                          int maxNodesPerRack,
                                          List<DatanodeDescriptor> results,
                                          boolean avoidStaleNodes) 
    throws NotEnoughReplicasException {
    int numOfAvailableNodes =
      clusterMap.countNumOfAvailableNodes(nodes, excludedNodes.keySet());
    StringBuilder builder = null;
    if (LOG.isDebugEnabled()) {
      builder = threadLocalBuilder.get();
      builder.setLength(0);
      builder.append(""["");
    }
    boolean badTarget = false;
    while(numOfAvailableNodes > 0) {
      DatanodeDescriptor chosenNode = 
        (DatanodeDescriptor)(clusterMap.chooseRandom(nodes));

      Node oldNode = excludedNodes.put(chosenNode, chosenNode);
      if (oldNode == null) { // chosenNode was not in the excluded list
        numOfAvailableNodes--;
        if (isGoodTarget(chosenNode, blocksize, 
                maxNodesPerRack, results, avoidStaleNodes)) {
          results.add(chosenNode);
          // add chosenNode and related nodes to excludedNode
          addToExcludedNodes(chosenNode, excludedNodes);
          adjustExcludedNodes(excludedNodes, chosenNode);
          return chosenNode;
        } else {
          badTarget = true;
        }
      }
    }

    String detail = enableDebugLogging;
    if (LOG.isDebugEnabled()) {
      if (badTarget && builder != null) {
        detail = builder.append(""]"").toString();
        builder.setLength(0);
      } else detail = """";
    }
    throw new NotEnoughReplicasException(detail);
  }",/ Randomly choose one target from nodes.,1,415
2875,"public static String convertToBitfinexWithdrawalType(String currency) {
    switch (currency.toUpperCase()) {
      case ""BTC"":
        return ""bitcoin"";
      case ""LTC"":
        return ""litecoin"";
      case ""ETH"":
        return ""ethereum"";
      case ""ETC"":
        return ""ethereumc"";
      case ""ZEC"":
        return ""zcash"";
      case ""XMR"":
        return ""monero"";
      case ""USD"":
        return ""mastercoin"";
      case ""DASH"":
        return ""dash"";
      case ""TETHER"":
        return ""tether"";
      default:
        throw new BitfinexException(""Cannot determine withdrawal type."");
    }

  }","can be one of the following ['bitcoin', 'litecoin', 'ethereum', 'ethereumc', 'mastercoin', 'zcash', 'monero', 'wire', 'dash']",1,196
2876,"public static JSONElement parse(Reader reader) throws ConverterException {
//        TODO: Migrate to new javacc based parser
//        JSONParser parser = new JSONParser(reader);
//        try {
//            return parser.parseJSON();
//        }
//        catch (ParseException e) {
//            throw new ConverterException(""Error parsing JSON: "" + e.getMessage(), e);
//        }

        try {
            return parse(IOUtils.toString(reader));
        }
        catch (IOException e) {
            throw new ConverterException(e);
        }
    }",Parses the given JSON String and returns ether a JSONObject or a JSONArry,1,86
2877,"@Override
    @XmlElement(name = ""associationType"", required = true)
    public AssociationType getAssociationType() {
        return associationType;
    }",Returns the type of relation between the resources.,1,41
2878,"public Object getImage(final String path, final LoadedCallback cb){
        final Object token = cb;
        final String key = getKey(path, 0, 0, ResizeType.AS_IS);
        if (!returnFromCache(key, cb)) {
            final Runnable task = resizer.loadAsIs(path, getResizeCb(key, token, cb, false, false));
            postJob(task, token);
        }
        return token;
    }",Loads the image for the given id,1,132
2879,"public static RedisConnection bindConnection(RedisConnectionFactory factory, boolean transactionSupport) {
		return doGetConnection(factory, true, true, transactionSupport);
	}","Binds a new Redis connection (from the given factory) to the current thread, if none is already bound and enables transaction support if  transactionSupport is set to @literal true.",1,41
2880,"protected static HostRoleStatus calculateSummaryStatus(Map<HostRoleStatus, Integer> counters, int total) {
    return counters.get(HostRoleStatus.HOLDING) > 0 ? HostRoleStatus.HOLDING :
        counters.get(HostRoleStatus.HOLDING_FAILED) > 0 ? HostRoleStatus.HOLDING_FAILED :
        counters.get(HostRoleStatus.HOLDING_TIMEDOUT) > 0 ? HostRoleStatus.HOLDING_TIMEDOUT :
        counters.get(HostRoleStatus.FAILED) > 0 ? HostRoleStatus.FAILED :
        counters.get(HostRoleStatus.ABORTED) > 0 ? HostRoleStatus.ABORTED :
        counters.get(HostRoleStatus.TIMEDOUT) > 0 ? HostRoleStatus.TIMEDOUT :
        counters.get(HostRoleStatus.IN_PROGRESS) > 0 ? HostRoleStatus.IN_PROGRESS :
        counters.get(HostRoleStatus.COMPLETED) == total ? HostRoleStatus.COMPLETED : HostRoleStatus.PENDING;
  }",Calculate an overall status based on the given status counts.,1,213
2881,"public JCRPermission savePermission(final String name, final String group,final String site) throws RepositoryException {
        return savePermission(new JCRSitePermission(name, group,site));
    }",Creates or updates the specified  JCRPermission.,1,54
2882,"public MicroblogsEntry remove(long microblogsEntryId)
		throws NoSuchEntryException, SystemException {
		return remove(Long.valueOf(microblogsEntryId));
	}",Removes the microblogs entry with the primary key from the database.,1,38
2883,"public Message remove(Message message) throws SystemException {
		return super.remove(message);
	}",Removes the message from the database.,1,31
2884,"public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
    try {
      if (systemId != null) {
        String lowerCaseSystemId = systemId.toLowerCase(Locale.ENGLISH);
        if (lowerCaseSystemId.contains(MYBATIS_CONFIG_SYSTEM) || lowerCaseSystemId.contains(IBATIS_CONFIG_SYSTEM)) {
          return getDtdInputSource(MYBATIS_CONFIG_DTD, publicId, systemId);
        } else if (lowerCaseSystemId.contains(MYBATIS_MAPPER_SYSTEM) || lowerCaseSystemId.contains(IBATIS_MAPPER_SYSTEM)) {
          return getDtdInputSource(MYBATIS_MAPPER_DTD, publicId, systemId);
        } else if (systemId.contains(MYBATIS_CONFIG)) {
          return getXsdInputSource(MYBATIS_CONFIG_XSD);
        } else if (systemId.contains(MYBATIS_MAPPER)){
          return getXsdInputSource(MYBATIS_MAPPER_XSD);
        }
      }
      return null;
    } catch (Exception e) {
      throw new SAXException(e.toString());
    }
  }",Converts a public DTD(XSD) into a local one,1,239
2885,"public static OptimizeEngine newInstance(final ShardingRule shardingRule, final SQLStatement sqlStatement, final List<Object> parameters, final GeneratedKey generatedKey) {
        if (sqlStatement instanceof InsertStatement) {
            return new InsertOptimizeEngine(shardingRule, (InsertStatement) sqlStatement, parameters, generatedKey);
        }
        if (sqlStatement instanceof DMLStatement) {
            return new QueryOptimizeEngine(sqlStatement, parameters, ((DMLStatement) sqlStatement).getShardingConditions());
        }
        // TODO do with DDL and DAL
        return new QueryOptimizeEngine(sqlStatement, parameters, new Conditions());
    }",Create optimize engine instance.,1,151
2886,"protected Type resolveType(Type type) {

        Map<TypeVariable, Type> map = new HashMap<>();
        map.putAll(getTypeVariableMap());

        return ResolvableType.forType(type, new TypeVariableMapVariableResolver(map)).resolveType().getType();
    }",Resolves the given type into a  Type.,1,78
2887,"public boolean isUserInRoles() {
        for (Iterator i = getRoles().iterator(); i.hasNext();) {
            String rolename = (String) i.next();
            if (getContext().getRequest().isUserInRole(rolename)) {
                return true;
            }
        }

        for (Iterator i = getChildren().iterator(); i.hasNext();) {
            Menu child = (Menu) i.next();
            if (child.isUserInRoles()) {
                return true;
            }
        }

        return false;
    }","Return true if the user is in one of the menu roles, or if any child menus have the user in one of their menu roles.",1,172
2888,"public byte fingerprintHash(ByteBuffer key) {
    byte[] keyBytes = BufferUtils.newByteArrayFromByteBuffer(key);
    return fingerprintHash(keyBytes);
  }","Hashes a key in  ByteBuffer into a non-zero, one byte fingerprint.",1,42
2889,"public Task cloneTask() {
        return new Task(description, keyword, """", priority, STATE_NEW, 0, notificationTime, automaticStart, privateTask);
    }","Returns clone of itself with time set to 0, empty notes and state set to STATE_NEW.",1,49
2890,"protected boolean shouldRegisterJspServlet() {
		return this.jspServlet != null && this.jspServlet.getRegistered() && ClassUtils
				.isPresent(this.jspServlet.getClassName(), getClass().getClassLoader());
	}",Returns whether or not the JSP servlet should be registered with the embedded container.,1,64
2891,"public static MetadataType[] getMethodArgumentTypes(Method method, ClassTypeLoader typeLoader)
    {
        checkArgument(method != null, ""Can't introspect a null method"");
        Class<?>[] parameters = method.getParameterTypes();
        if (ArrayUtils.isEmpty(parameters))
        {
            return new MetadataType[] {};
        }

        MetadataType[] types = new MetadataType[parameters.length];
        for (int i = 0; i < parameters.length; i++)
        {
            ResolvableType type = ResolvableType.forMethodParameter(method, i);
            types[i] = typeLoader.load(type.getType());
        }

        return types;
    }",Returns an array of  MetadataType representing each of the given  Method's argument types.,1,191
2892,"@Nonnull
  @ReturnsMutableCopy
  public static List <IHCNode> mergeOutOfBandJS (@Nonnull final List <IHCNode> aSourceOutOfBandNodes)
  {
    final List <IHCNode> ret = new ArrayList <IHCNode> ();

    final CollectingJSCodeProvider aOnDocumentReadyJS = new CollectingJSCodeProvider ();
    final CollectingJSCodeProvider aInlineJS = new CollectingJSCodeProvider ();
    for (final IHCNode aOOBNode : aSourceOutOfBandNodes)
    {
      if (aOOBNode instanceof HCScriptOnDocumentReady)
      {
        aOnDocumentReadyJS.append (((HCScriptOnDocumentReady) aOOBNode).getOnDocumentReadyCode ());
      }
      else
        if (aOOBNode instanceof HCScript)
        {
          aInlineJS.append (((HCScript) aOOBNode).getJSCodeProvider ());
        }
        else
          ret.add (aOOBNode);
    }

    // on document ready always as last inline JS!
    if (!aOnDocumentReadyJS.isEmpty ())
      aInlineJS.append (JQuery.onDocumentReady (aOnDocumentReadyJS));

    // Finally add the inline JS
    if (!aInlineJS.isEmpty ())
      ret.add (new HCScript (aInlineJS));

    return ret;
  }",Merge all inline JS elements contained in aSourceOutOfBandNodes into one script elements,1,284
2893,"public Map<String, Reflector> fields() {
        Map<String, Reflector> result;
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
            result = new ArrayMap<>();
        } else {
            result = new HashMap<>();
        }
        Class<?> type = type();
        do {
            // all field
            for (Field field : type.getDeclaredFields()) {
                if (!isClass ^ Modifier.isStatic(field.getModifiers())) {
                    String name = field.getName();
                    // add
                    if (!result.containsKey(name))
                        result.put(name, field(name));
                }
            }

            type = type.getSuperclass();
        }
        while (type != null);

        return result;
    }",Get current  Reflector#obj fields by create Map,1,251
2894,"protected List<String> formatSubdiagnostics(JCDiagnostic d, Locale l) {
        List<String> subdiagnostics = List.nil();
        int maxDepth = config.getMultilineLimit(MultilineLimit.DEPTH);
        if (maxDepth == -1 || depth < maxDepth) {
            depth++;
            try {
                int maxCount = config.getMultilineLimit(MultilineLimit.LENGTH);
                int count = 0;
                for (JCDiagnostic d2 : d.getSubdiagnostics()) {
                    if (maxCount == -1 || count < maxCount) {
                        subdiagnostics = subdiagnostics.append(formatSubdiagnostic(d, d2, l));
                        count++;
                    }
                    else
                        break;
                }
            }
            finally {
                depth--;
            }
        }
        return subdiagnostics;
    }",Format all the subdiagnostics attached to a given diagnostic.,1,230
2895,"static ResourceBundle getBundle( final Locale locale, final String packagePath ) throws MissingResourceException {
    return GlobalMessageUtil.getBundle( locale, packagePath, PKG );
  }","Returns a  ResourceBundle for the given  Locale and  packagePath, using the",1,50
2896,"protected String stripPrefixIfPresent(String path) {
    String stripedKey = CommonUtils.stripPrefixIfPresent(path, getRootKey());
    if (!stripedKey.equals(path)) {
      return stripedKey;
    }
    return CommonUtils.stripPrefixIfPresent(path, PATH_SEPARATOR);
  }",Strips the bucket prefix or the preceding path separator from the path if it is present.,1,74
2897,"public ServerEntry get( Object id ) throws NamingException
    {
        return ( ServerEntry ) super.get( id );
    }",Gets the ServerEntry from this MasterTable.,1,42
2898,"public List getFieldList() {
        return fieldList;
    }","Return the ordered list of form fields and fieldsets, excluding buttons.",1,19
2899,"public SpacecraftState reset(final SpacecraftState oldState)
        throws OrekitException {

        if (!pendingEvent) {
            return oldState;
        }

        SpacecraftState newState =
            (nextAction == EventDetector.RESET_STATE) ?
            detector.resetState(oldState) : oldState;
        pendingEvent      = false;
        pendingEventTime  = null;

        return newState;

    }",Let the event detector reset the state if it wants.,1,102
2901,"public I18nMessage valueIsNull() {
    return createMessage(bundlePath, 9);
  }",Generates a  I18nMessage for a value that is  null what it wasn't expected to be,1,25
2902,"public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {
    Spans matchSpans = match.getSpans(context, acceptDocs, termContexts);
    return (matchSpans == null) ? null : new PositionCheckSpans(matchSpans);
  }","Implementing classes are required to return whether the current position is a match for the passed in ""match""  SpanQuery.",1,84
2903,"public static String chomp(String str, String separator) {
        if (str.length() == 0) {
            return str;
        }
        if (str.endsWith(separator)) {
            return str.substring(0, str.length() - separator.length());
        }
        return str;
    }","Remove one string (the separator) from the end of another string if it's there, otherwise leave it alone.",1,99
2904,"public JIRAIssue remove(long jiraIssueId)
		throws NoSuchJIRAIssueException, SystemException {
		return remove(Long.valueOf(jiraIssueId));
	}",Removes the j i r a issue with the primary key from the database.,1,38
2905,"public Store getCertificates()
    {
        return HELPER.getCertificates(signedData.getCertificates());
    }",Return any X.509 certificate objects in this SignedData structure as a Store of X509CertificateHolder objects.,1,29
2906,"public ClusterConfigEntity merge(ClusterConfigEntity clusterConfigEntity) {
    EntityManager entityManager = entityManagerProvider.get();
    return entityManager.merge(clusterConfigEntity);
  }",Merge the specified entity into the current persistence context.,1,41
2907,"private static GeoJsonGeometry createGeometry(String geometryType, JSONArray geometryArray)
            throws JSONException {
        if (geometryType.equals(POINT)) {
            return createPoint(geometryArray);
        } else if (geometryType.equals(MULTIPOINT)) {
            return createMultiPoint(geometryArray);
        } else if (geometryType.equals(LINESTRING)) {
            return createLineString(geometryArray);
        } else if (geometryType.equals(MULTILINESTRING)) {
            return createMultiLineString(geometryArray);
        } else if (geometryType.equals(POLYGON)) {
            return createPolygon(geometryArray);
        } else if (geometryType.equals(MULTIPOLYGON)) {
            return createMultiPolygon(geometryArray);
        } else if (geometryType.equals(GEOMETRY_COLLECTION)) {
            return createGeometryCollection(geometryArray);
        }
        return null;
    }",Creates a GeoJsonGeometry object from the given type of geometry and its coordinates or geometries array,1,222
2908,"public static ReferencedEnvelope reference(BoundingBox e) {
        return reference( (org.opengis.geometry.Envelope) e);
    }",Cast to a ReferencedEnvelope (used to ensure that an Envelope if a ReferencedEnvelope).,1,38
2909,"public boolean equals( Object thatObj )
    {
        if ( this == thatObj )
            return true;
        if ( this.getObjName() == null )
            return false;
        if ( !( thatObj instanceof PermObj ) )
            return false;
        PermObj thatPermObj = ( PermObj ) thatObj;
        if ( thatPermObj.getObjName() == null )
            return false;
        return thatPermObj.getObjName().equalsIgnoreCase( this.getObjName() );
    }",Matches the objName from two PermObj entities.,1,148
2910,"public ServerConnector createWidget(int tag, ApplicationConfiguration conf) {
        /*
         * Yes, this (including the generated code in WidgetMap) may look very
         * odd code, but due the nature of GWT, we cannot do this any cleaner.
         * Luckily this is mostly written by WidgetSetGenerator, here are just
         * some hacks. Extra instantiation code is needed if client side widget
         * has no ""native"" counterpart on client side.
         */

        Class<? extends ServerConnector> classType = resolveInheritedWidgetType(
                conf, tag);

        if (classType == null || classType == UnknownComponentConnector.class) {
            String serverSideName = conf.getUnknownServerClassNameByTag(tag);
            UnknownComponentConnector c = GWT
                    .create(UnknownComponentConnector.class);
            c.setServerSideClassName(serverSideName);
            return c;
        } else {
            /*
             * let the auto generated code instantiate this type
             */
            return widgetMap.instantiate(classType);
        }
    }",Create an uninitialized connector that best matches given UIDL.,1,150
2911,"public final TIBConstantOperand asTIBConstant() {
    return (TIBConstantOperand) this;
  }",Cast to an  TIBConstantOperand.,1,25
2912,"public SWTBotTreeItem expandNode(String... nodes) throws WidgetNotFoundException {
		if (nodes == null || nodes.length == 0) {
			throw new IllegalArgumentException(""Node path must be supplied"");
		}

		log.debug(MessageFormat.format(""Expanding nodes {0} in tree {1}"", StringUtils.join(nodes, "">""), this));

		waitForEnabled();
		SWTBotTreeItem item = getTreeItem(nodes[0]);
		item.expand();

		for (int i = 1; i < nodes.length; i++) {
			item = item.getNode(nodes[i]).expand();
		}

		return item;
	}",Attempts to expand all nodes along the path specified by the node array parameter..,1,189
2913,"static Stream<Long> rangeClosed(long from, long toInclusive) {
        if (from > toInclusive) {
            return Nil.instance();
        } else if (from == Long.MAX_VALUE) {
            return Stream.of(Long.MAX_VALUE);
        } else {
            return new Cons<>(() -> from, () -> rangeClosed(from + 1, toInclusive));
        }
    }","Creates a Stream of long numbers starting from  from, extending to  toInclusive.",1,128
2914,"private int getTextWidth(TextLayout textLayout) {
        if (textLayout != null) {
            return (int)Math.ceil(textLayout.getAdvance());
        }
        return 0;
    }","The text width is the just the ""advance"" value of the  TextLayout (if any) or 0 if  null.",1,57
2915,"public static Range range(char from, char to) {
		return new Range(from, to);
	}","Shortcut for  new Range(from, to).",1,37
2916,"public final Selected.Mutator selectedMutator(int id) throws InlinePragma {
    return mutators[id];
  }",Return the Selected.Mutator instance given its unique identifier.,1,33
2917,"public static ReviewMgr createInstance()
        throws SecurityException
    {
        return createInstance( GlobalIds.HOME );
    }",Create and return a reference to  ReviewMgr object using HOME context.,1,34
2918,"public FontTriplet[] fontLookup(String[] families, String style,
                             int weight) {
        FontTriplet triplet;
        List tmpTriplets = new ArrayList();
        for (int i = 0; i < families.length; i++) {
            triplet = fontLookup(families[i], style, weight, (i >= families.length - 1));
            if (triplet != null) {
                tmpTriplets.add(triplet);
            }
        }
        if (tmpTriplets.size() != 0) {
            FontTriplet[] triplets = (FontTriplet[]) tmpTriplets.toArray(TRIPLETS_TYPE);
            return (FontTriplet[]) triplets;
        }
        throw new IllegalStateException(
                    ""fontLookup must return an array with at least one ""
                    + ""FontTriplet on the last call."");
    }",Looks up a set of fonts.,1,223
2919,"public Collection getMergePoints(StateMachine stateMachine)
    {
        return getSubvertices(stateMachine, mergePointsFilter);
    }",Returns a Collection containing the merge points that are model elements in the argument StateMachine.,1,29
2920,"public String jsxGet_src() {
        final HtmlImage img = (HtmlImage) getDomNodeOrDie();
        final String src = img.getSrcAttribute();
        if (instantiatedViaJavaScript_ && """".equals(src)) {
            return src;
        }
        try {
            final HtmlPage page = (HtmlPage) img.getPage();
            return page.getFullyQualifiedUrl(src).toExternalForm();
        }
        catch (final MalformedURLException e) {
            final String msg = ""Unable to create fully qualified URL for src attribute of image "" + e.getMessage();
            throw Context.reportRuntimeError(msg);
        }
    }",Returns the value of the src attribute.,1,168
2921,"@SchedulerSupport(SchedulerSupport.NONE)
    public static Completable create(CompletableOnSubscribe source) {
        Objects.requireNonNull(source, ""source is null"");
        return RxJavaPlugins.onAssembly(new CompletableCreate(source));
    }",Provides an API (via a cold Completable) that bridges the reactive world with the callback-style world.,1,56
2922,"public SP800SecureRandom buildDualEC(DualECPoints[] pointSet, Digest digest, byte[] nonce, boolean predictionResistant)
    {
        return new SP800SecureRandom(random, entropySourceProvider.get(entropyBitsRequired), new ConfigurableDualECDRBGProvider(pointSet, digest, nonce, personalizationString, securityStrength), predictionResistant);
    }",Build a SecureRandom based on a SP 800-90A Dual EC DRBG according to a defined point set.,1,78
2923,"public static <S extends Publisher<T>, T> BodyInsertor<S> fromPublisher(S publisher,
			Class<T> elementClass) {

		Assert.notNull(publisher, ""'publisher' must not be null"");
		Assert.notNull(elementClass, ""'elementClass' must not be null"");
		return fromPublisher(publisher, ResolvableType.forClass(elementClass));
	}",Return a  BodyInsertor that writes the given  Publisher.,1,90
2924,"public Entry<T, Integer> rowToItem(final int row) {
        final List<Entry<T, Integer>> orderedList = this.model.getOrderedList();
        return (row >= 0) && (row < orderedList.size()) ? orderedList.get(row) : null;
    }",Row to item.,1,92
2925,"protected List<ICreationMenuItem> getItems() {
		return items;
	}",Returns the list containing the  ICreationMenuItems that are displayed by this policy.,1,22
2926,"public OAuthToken remove(OAuthToken oAuthToken) throws SystemException {
		return super.remove(oAuthToken);
	}",Removes the o auth token from the database.,1,31
2927,"public static  IComplexNDArray ifft(IComplexNDArray inputC,int numElements,int dimension) {
        return Nd4j.getFFt().ifft(inputC,numElements,dimension);
    }","1d discrete fourier transform, note that this will throw an exception if the passed in input isn't a vector.",1,45
2928,"public Collection<ServerName> getServerInfo() {
    return getServers();
  }",Returns detailed region server information: A list of  ServerName.,1,24
2929,"private static boolean startsWith(CharSequence str, CharSequence prefix, boolean ignoreCase) {
        if (str == null || prefix == null) {
            return (str == null && prefix == null);
        }
        if (prefix.length() > str.length()) {
            return false;
        }
        return regionMatchesSequence(str, ignoreCase, 0, prefix, 0, prefix.length());
    }",Check if a CharSequence starts with a specified prefix (optionally case insensitive).,1,136
2930,"@SafeVarargs
	public static Parser.Rule rule(String name, Supplier<Parser>... alternatives) {
		return new Parser.Rule(name, alternatives);
	}","Shortcut for  new Parser.Rule(name, alternatives).",1,50
2931,"public Response performRequest(String method, String endpoint, Header... headers) throws IOException {
        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), (HttpEntity)null, headers);
    }",Sends a request to the elasticsearch cluster that the client points to and waits for the corresponding response to be returned.,1,67
2932,"public static OrderBook adaptOrderBook(BitcoinToYouOrderBook bitcoinToYouOrderBook, CurrencyPair currencyPair) {

    List<LimitOrder> asks = createOrders(currencyPair, OrderType.ASK, bitcoinToYouOrderBook.getAsks());
    List<LimitOrder> bids = createOrders(currencyPair, OrderType.BID, bitcoinToYouOrderBook.getBids());
    return new OrderBook(null, asks, bids);
  }",Adapts a com.xeiam.xchange.bitcointoyou.dto.marketdata.OrderBook to a,1,97
2933,"protected IMarkupFilter onAppendMarkupFilter(final IMarkupFilter filter)
	{
		return filter;
	}",a) Allow subclasses to configure individual Wicket filters  b) Allow to replace default filter with extended one  c) Allows to disable Wicket filters via returning false,1,25
2934,"public String rawAttributeText(XMLStreamReader reader, String attributeName, String defaultValue) {
        return reader.getAttributeValue("""", attributeName) == null
                ? defaultValue :
                reader.getAttributeValue("""", attributeName).trim();
    }",Reads and trims the text for the given attribute and returns it or  defaultValue if there is no value for the attribute,1,69
2935,"public MPPointF getPosition(Entry e, AxisDependency axis) {

        if (e == null)
            return null;

        float[] vals = new float[]{
                e.getX(), e.getY()
        };

        getTransformer(axis).pointValuesToPixel(vals);

        return MPPointF.getInstance(vals[0], vals[1]);
    }",Returns a recyclable MPPointF instance.,1,109
2936,"public boolean perform() {
        Process process;
        try {
            // Java exec requires that commands containing spaces be in an array
            process = Runtime.getRuntime().exec(args);

            int exitCode = process.waitFor();
            if (exitCode != 0) {
                return false;
            }
        } catch (InterruptedException e) {
            log(""Could not execute job: "" + e.getMessage());
        } catch (IOException e) {
            log(""Could not execute job: "" + e.getMessage());
        }
        return true;
    }",Executes cloudscan with configured arguments,1,151
2937,"public static <T extends CharSequence> T notEmpty(T chars) {
        return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EXCEPTION_MESSAGE);
    }",Validate that the specified argument character sequence is neither null nor a length of zero (no characters); otherwise throwing an exception with the specified message.,1,38
2938,"public List<D> getInputStreams(FlinkOperator<?> operator) {
    return getInputOperators(operator).stream()
            .map(p -> {
              D pout = outputs.get(dag.getNode(p).get());
              if (pout == null) {
                throw new IllegalArgumentException(
                        ""Output DataStream/DataSet missing for operator "" + p.getName());
              }
              return pout;
            })
            .collect(toList());
  }",Retrieves list of Flink  DataStream inputs of given operator,1,129
2939,"public boolean isOpen() {
        return !mCanSlide || mSlideOffset > 0;
    }",Check if the layout is open.,1,29
2940,"public static Value strspn(String string,
		             String characters,
		             @Optional int offset,
			     @Optional(""-2147483648"") int length)
    throws Throwable
  {
    return strspnImpl(string, characters, offset, length, true);
  }",Finds the number of initial characters in string that match one of the characters in characters,1,72
2941,"public String getMessage(String name, Object[] args) {
        if (args == null) {
            throw new IllegalArgumentException(""Null args parameter"");
        }
        String value = getMessage(name);
        if (value == null) {
            return null;
        }
        return MessageFormat.format(value, args);
    }","Return the formatted message for the given resource name, message format arguments and the context request locale, or null if no message was found.",1,103
2942,"public static Source createStaxSource(XMLStreamReader streamReader) {
		if (jaxp14Available) {
			return Jaxp14StaxHandler.createStaxSource(streamReader);
		}
		else {
			return createCustomStaxSource(streamReader);
		}
	}",Create a StAX  Source for the given  XMLStreamReader.,1,58
2943,"protected CoreAdminHandler createMultiCoreHandler() {
    return new CoreAdminHandler() {
      @Override
      public CoreContainer getMultiCore() {
        return CoreContainer.this;
      }
    };
  }",Creates a CoreAdminHandler for this CoreContainer.,1,53
2944,"public static Ticker adaptPublicTicker(CryptsyPublicMarketData publicMarketData) {

    List<CryptsyPublicTrade> recentTrades = publicMarketData.getRecentTrades();
    BigDecimal last = (recentTrades != null && recentTrades.size() > 0) ? recentTrades.get(0).getPrice() : null;
    List<CryptsyPublicOrder> bids = publicMarketData.getBuyOrders();
    BigDecimal bid = (bids != null && bids.size() > 0) ? bids.get(0).getPrice() : null;
    List<CryptsyPublicOrder> asks = publicMarketData.getSellOrders();
    BigDecimal ask = (asks != null && asks.size() > 0) ? asks.get(0).getPrice() : null;
    BigDecimal high = null;
    BigDecimal low = null;
    BigDecimal volume = publicMarketData.getVolume();

    return new Ticker.Builder().currencyPair(adaptCurrencyPair(publicMarketData)).last(last).bid(bid).ask(ask).high(high).low(low).volume(volume).build();
  }",Adapts CryptsyPublicMarketData DTO to XChange standard Ticker DTO Note:,1,300
2945,"public static List<DiscoverySelector> selectClasspathRoots(Set<File> directories) {
		Preconditions.notNull(directories, ""directories must not be null"");

		// @formatter:off
		return directories.stream()
				.filter(File::isDirectory)
				.map(ClasspathRootSelector::new)
				.collect(toList());
		// @formatter:on
	}",Create a list of  ClasspathRootSelectors for the supplied  directories.,1,84
2946,"public static String getMessage(String key)
    {
        return getMessage(key.trim(), DEFAULTLOCALE);
    }",Get the i18n message string for a given key and use the default Locale.,1,35
2947,"protected boolean advanceAfterCurrent() throws IOException {
    do { // repeat until minimum nr of matchers
      currentDoc = scorerDocQueue.topDoc();
      currentScore = scorerDocQueue.topScore();
      nrMatchers = 1;
      do { // Until all subscorers are after currentDoc
        if (! scorerDocQueue.topNextAndAdjustElsePop()) {
          if (--queueSize == 0) {
            break; // nothing more to advance, check for last match.
          }
        }
        if (scorerDocQueue.topDoc() != currentDoc) {
          break; // All remaining subscorers are after currentDoc.
        }
        currentScore += scorerDocQueue.topScore();
        nrMatchers++;
      } while (true);
      
      if (nrMatchers >= minimumNrMatchers) {
        return true;
      } else if (queueSize < minimumNrMatchers) {
        return false;
      }
    } while (true);
  }",Advance all subscorers after the current document determined by the top of the scorerDocQueue.,1,220
2948,"public boolean isExampleOf(String word, Pattern tokenPattern, Pattern posPattern, Element e) {
    	if (tokenPattern.pattern().isEmpty() && posPattern == null) {
        	return true;
        }
    	boolean tokenMatches = true;
        boolean postagMatches = false;
        boolean isTokenEmpty = e.getString().isEmpty();
        boolean hasPosTag = (posPattern != null);
        boolean negate = e.getNegation();
        boolean postagNegate = e.getPOSNegation();
        boolean inflected = e.isInflected();
        
        if (posPattern == null) {
        	postagMatches = true;
        }
        if (!isTokenEmpty) {
        	Matcher m;
        	boolean matches = false;
        	// checking inflected matches
        	if (inflected) {
        		if (isInflectedStringMatch(word,e)) {
        			matches = true;
        		}
        	} else {
        		m = tokenPattern.matcher(word);
        		if (m.matches()) matches = true;
        	}
            
            if (matches) {
                if (negate) {
                    tokenMatches = false; 
                }
            } else {
                if (!negate) {
                    tokenMatches = false;
                }
            }
        }
        if (hasPosTag) {
            List<String> postags = getPosTags(word);
            for (String s : postags) {
                Matcher m = posPattern.matcher(s);
                if (m.matches()) {
                    if (!postagNegate) {
                        postagMatches = true;
                        break;
                    }
                } else {
                    if (postagNegate) {
                        postagMatches = true;
                        break;
                    }
                }
            }
            if (postags.size() == 0) {
                postagMatches = false;
            }
            
        }
        return (tokenMatches && postagMatches);
    }","Faster version of isExampleOf, since you don't have to recompile the Patterns every time",1,538
2949,"public RequestSpecBuilder setRelaxedHTTPSValidation() {
        return setRelaxedHTTPSValidation(SSL);
    }",Use relaxed HTTP validation with SSLContext protocol  #SSL.,1,22
2950,"public static IntegrationFlowBuilder from(Class<?> serviceInterface) {
		final DirectChannel gatewayRequestChannel = new DirectChannel();

		GatewayProxyFactoryBean gatewayProxyFactoryBean =
				new AnnotationGatewayProxyFactoryBean(serviceInterface) {

					@Override
					protected void onInit() {
						super.onInit();
						getGateways()
								.values()
								.forEach(gateway ->
										gateway.setRequestChannel(gatewayRequestChannel));
					}

				};

		return from(gatewayRequestChannel)
				.addComponent(gatewayProxyFactoryBean);
	}","Populate the  MessageChannel to the new  IntegrationFlowBuilder chain, which becomes as a  requestChannel for the Messaging Gateway(s) built on the provided service interface.",1,133
2951,"public Geometry offset(Geometry g) {
        // shortcut for too short offset
        if (abs(offset) < EPS) {
            return g;
        }

        if (g == null) {
            return null;
        }

        double threshold = abs(offset) / 10;
        final List<LineString> lines = extractLineStrings(g);
        List<LineString> offsets = new ArrayList<>();
        for (LineString ls : lines) {
            LineString simplified = (LineString) DouglasPeuckerSimplifier.simplify(ls, threshold);
            if (simplified == null) {
                return null;
            }
            if (ls.isClosed() && !simplified.isClosed()) {
                CoordinateSequence source = simplified.getCoordinateSequence();
                int numCoordinates = source.size();
                LiteCoordinateSequence dest = new LiteCoordinateSequence(numCoordinates + 1, 2);
                for (int i = 0; i < numCoordinates; i++) {
                    dest.setOrdinate(i, 0, source.getOrdinate(i, 0));
                    dest.setOrdinate(i, 1, source.getOrdinate(i, 1));
                }
                dest.setOrdinate(numCoordinates, 0, source.getOrdinate(0, 0));
                dest.setOrdinate(numCoordinates, 1, source.getOrdinate(0, 1));
                simplified = simplified.getFactory().createLinearRing(dest);
            }
            LineString offsetLine = (LineString) offset(simplified);
            if (offsetLine != null) {
                offsets.add(offsetLine);
            }
        }
        if (offsets.isEmpty()) {
            return null;
        } else if (offsets.size() == 1) {
            return offsets.get(0);
        } else {
            GeometryFactory factory = offsets.get(0).getFactory();
            MultiLineString result =
                    factory.createMultiLineString(offsets.toArray(new LineString[offsets.size()]));
            return result;
        }
    }",Builds and return the perpendicular offset geometry.,1,561
2952,"public Trace getTrace(int moduleId) {
        return traceSystem.getTrace(moduleId);
    }",Get the trace object for the given module id.,1,27
2953,"static public List<TRowResult> rowResultFromHBase(Result[] in) {
    return rowResultFromHBase(in, false);
  }","This utility method creates a list of Thrift TRowResult ""struct"" based on an array of Hbase RowResult objects.",1,35
2954,"public static long convertTimeToMillis(String timeStr){        
        
        long timeAsLong = 0;
        
        timeStr = timeStr.toLowerCase()
                         .replace(""second"", ""s"")
                         .replace(""seconds"", ""s"")
                         .replace(""sec"", ""s"")
                         .replace(""millisecond"", ""l"")
                         .replace(""milliseconds"", ""l"")
                         .replace(""milli"", ""l"")
                         .replace(""millis"", ""l"")
                         .replace(""ml"" , ""l"")
                         .replace(""ms"" , ""l"");
        
        if(timeStr.contains(""m"") || timeStr.contains(""s"") || timeStr.contains(""l"")){           
            Pattern second = Pattern.compile(""(\\d+)\\s*s"");
            Pattern milli = Pattern.compile(""(\\d+)\\s*l"");
            
            long secondAsLong;
            long milliAsLong;
            
            Matcher m = second.matcher(timeStr);
            if(m.find()){
                secondAsLong = Long.parseLong(m.group().replace(""s"", """").trim());
            } else {
                secondAsLong = 0;
            }
            
            m = milli.matcher(timeStr);
            if(m.find()){
                milliAsLong = Long.parseLong(m.group().replace(""l"", """").trim());
            } else {
                milliAsLong = 0;
            }
            timeAsLong =  secondAsLong * 1000 + milliAsLong;
        }
          
        return timeAsLong > 60000 ? 60000 : timeAsLong;
    }","This converts a time string in admin log filter to corresponding long value accepted format: digits followed by correct units: s,seconds,second,ms,milliseconds,millisecond,ml",1,462
2955,"public int stop() {

        trace(""stop() entered"");

        int previousState = getState();

        if (serverThread == null) {
            trace(""stop() serverThread is null; no action taken"");

            return previousState;
        }

        releaseServerSocket();
        trace(""stop() exiting"");

        return previousState;
    }",Stops this server asynchronously.,1,93
2956,"public I18nMessage collectionIsNotEmpty() {
    return createMessage(bundlePath, 20);
  }",Generates a  I18nMessage for a  Collection which was expected to be empty but wasn't,1,25
2957,"public static String parseName(String XMPPAddress) {
        if (XMPPAddress == null) {
            return null;
        }
        int atIndex = XMPPAddress.indexOf(""@"");
        if (atIndex < 0) {
            return XMPPAddress.substring(0);
        }
        else {
            return XMPPAddress.substring(0, atIndex);

        }
    }",Returns the name portion of a XMPP address.,1,108
2959,"private static FieldSearchResult accept( final Class<?> componentClass,
    		final Field field,
            final boolean acceptPrivate,
            final boolean acceptPackage,
            final SimpleLogger logger)
    {
        // check modifiers now
        final int mod = field.getModifiers();

        // static fields
        if ( Modifier.isStatic( mod ) )
        {
            logger.log( LogService.LOG_ERROR, ""Field {0} must not be static"", new Object[]
                    { toString(componentClass, field) }, null );
            return new FieldSearchResult(field, false);
        }

        // accept public and protected fields
        if ( Modifier.isPublic( mod ) || Modifier.isProtected( mod ) )
        {
            setAccessible( field );
            return new FieldSearchResult(field, true);
        }

        // accept private if accepted
        if ( Modifier.isPrivate( mod ) )
        {
            if ( acceptPrivate )
            {
                setAccessible( field );
                return new FieldSearchResult(field, true);
            }

        } else {

        	// accept default (package)
        	if ( acceptPackage )
        	{
        		setAccessible( field );
        		return new FieldSearchResult(field, true);
        	}
        }

        // else don't accept
        // the method would fit the requirements but is not acceptable
        logger.log( LogService.LOG_ERROR,
                ""findField: Suitable but non-accessible field {0}"", new Object[]
                    { toString(componentClass, field) }, null );
        return new FieldSearchResult(field, false);
    }",This method checks whether the found field is acceptable (= usable) for the component instance.,1,395
2960,"public String getString(long offset, String encoding) {
        return Native.getString(peer + offset, encoding);
    }",Copy native memory to a Java String using the requested encoding.,1,39
2961,"public KaleoDefinition remove(KaleoDefinition kaleoDefinition)
		throws SystemException {
		return super.remove(kaleoDefinition);
	}",Removes the kaleo definition from the database.,1,32
2962,"@Override
  public Collection<Symptom> detect(Collection<Measurement> measurements) {

    Collection<Symptom> result = new ArrayList<>();

    MeasurementsTable waitQueueMetrics
        = MeasurementsTable.of(measurements).type(METRIC_WAIT_Q_SIZE.text());
    for (String component : waitQueueMetrics.uniqueComponents()) {
      Set<String> addresses = new HashSet<>();
      MeasurementsTable instanceMetrics = waitQueueMetrics.component(component);
      for (String instance : instanceMetrics.uniqueInstances()) {
        double avgWaitQSize = instanceMetrics.instance(instance).mean();
        if (avgWaitQSize > sizeLimit) {
          LOG.info(String.format(""Detected large wait queues for instance""
              + ""%s, smallest queue is + %f"", instance, avgWaitQSize));
          addresses.add(instance);
        }
      }
      if (addresses.size() > 0) {
        result.add(new Symptom(SYMPTOM_LARGE_WAIT_Q.text(), context.checkpoint(), addresses));
      }
    }

    return result;
  }",Detects all components having a large pending buffer or wait queue,1,277
2963,"public RawLog rawLogBuffers()
    {
        return rawLog;
    }",Get the  uk.co.real_logic.aeron.driver.buffer.RawLog the back this connection.,1,20
2965,"public FileSystem getClient(TachyonConf tachyonConf) throws IOException {
    final FileSystem fs = TachyonFileSystemFactory.get();
    mClients.add(fs);
    return fs;
  }",Returns a  tachyon.client.file.FileSystem client.,1,51
2966,"public DslElementSyntax resolve(MetadataType type)
    {
        DslElementSyntaxBuilder typeBuilder = DslElementSyntaxBuilder.create();
        resolve(type, typeBuilder);
        return typeBuilder.build();
    }",Resolves the xml top level element  DslElementSyntax for the given  MetadataType,1,51
2967,"@Processor
	public List<Recipe> getRecentlyAdded() {
		return getClient().getRecentlyAdded();
	}",Get a list of the most recently added Ingredients @sample.xml ../../../doc/cook-book-connector.xml.sample cook-book:getRecentlyAdded,1,31
2968,"public Object caseNeedle( Needle object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Needle'.,1,25
2969,"public OptionalMethodInterception withImplementing(Collection<? extends TypeDescription> types) {
        return new OptionalMethodInterception(classFileVersion,
                namingStrategy,
                auxiliaryTypeNamingStrategy,
                joinUnique(interfaceTypes, toList(isInterface(types))),
                ignoredMethods,
                bridgeMethodResolverFactory,
                classVisitorWrapperChain,
                methodRegistry,
                modifiers,
                typeAttributeAppender,
                methodLookupEngineFactory,
                defaultFieldAttributeAppenderFactory,
                defaultMethodAttributeAppenderFactory,
                new LatentMethodMatcher.Resolved(isDeclaredBy(anyOf(new ArrayList<TypeDescription>(types)))));
    }",Defines all dynamic types that are created by this configuration to implement the given interfaces.,1,119
2970,"public static XBooleanListValue addBooleanToList(XID actorID, XField field, int index,
	        boolean bool) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XBooleanListValue) {
			XBooleanListValue listValue = (XBooleanListValue)value;
			
			// manipulate the contained list
			listValue = addBooleanToList(listValue, index, bool);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Adds a new boolean at the specified index to the  XBooleanListValue of the given  XField.,1,155
2971,"public int expandAll() {
		return expandAll(mMinCollapsibleLevel);
	}",Expands all IExpandable items with minimum of level  #mMinCollapsibleLevel.,1,22
2972,"public Status remove(long statusId)
		throws NoSuchStatusException, SystemException {
		return remove(Long.valueOf(statusId));
	}",Removes the status with the primary key from the database.,1,38
2973,"public boolean isGwtEnabled() {
		for (final Plugin buildPlugin : buildPlugins) {
			if (""gwt-maven-plugin"".equals(buildPlugin.getArtifactId())) {
				return true;
			}
		}
		return false;
	}",Determines whether the GWT Maven plugin exists in the pom.,1,68
2974,"public Socks5AuthStatus authStatus() {
        return authStatus;
    }",Returns the  Socks5AuthStatus of this  Socks5AuthResponse,1,19
2975,"@SuppressWarnings(""unchecked"")
  public static <T extends gobblin.dataset.Dataset> DatasetFinder<T> instantiateDatasetFinder(Properties props, FileSystem fs,
      String def) throws IOException {
    String className = def;
    if (props.containsKey(DATASET_PROFILE_CLASS_KEY)) {
      className = props.getProperty(DATASET_PROFILE_CLASS_KEY);
    }
    try {
      Class<?> datasetFinderClass = Class.forName(className);
      return (DatasetFinder<T>) datasetFinderClass.getConstructor(FileSystem.class, Properties.class).newInstance(fs,
          props);
    } catch (ClassNotFoundException exception) {
      throw new IOException(exception);
    } catch (NoSuchMethodException exception) {
      throw new IOException(exception);
    } catch (InstantiationException exception) {
      throw new IOException(exception);
    } catch (IllegalAccessException exception) {
      throw new IOException(exception);
    } catch (InvocationTargetException exception) {
      throw new IOException(exception);
    }

  }",Instantiate a  DatasetFinder.,1,277
2976,"public Map<String, Param<?>> getParams(Class clazz) {
        if (params.containsKey(clazz.getName())) {
            return params.get(clazz.getName());
        }
        return EMPTY_PARAMS;
    }",Gets all the params for the specified class,1,67
2977,"public static Metric from(String fullName, double value) {
    String[] pieces = fullName.split(""\\."");
    Preconditions.checkArgument(pieces.length > 1, ""Incorrect metrics name: %s."", fullName);

    String hostname = null;
    String id = null;
    String name = null;
    int tagStartIdx = 0;
    // Master or cluster metrics don't have hostname included.
    if (pieces[0].equals(MetricsSystem.InstanceType.MASTER.toString())
        || pieces[0].equals(MetricsSystem.CLUSTER.toString())) {
      name = pieces[1];
      tagStartIdx = 2;
    } else {
      if (pieces[1].contains(ID_SEPARATOR)) {
        String[] ids = pieces[1].split(ID_SEPARATOR);
        hostname = ids[0];
        id = ids[1];
      } else {
        hostname = pieces[1];
      }
      name = pieces[2];
      tagStartIdx = 3;
    }
    MetricsSystem.InstanceType instance = MetricsSystem.InstanceType.fromString(pieces[0]);
    Metric metric = new Metric(instance, hostname, id, name, value);

    // parse tags
    for (int i = tagStartIdx; i < pieces.length; i++) {
      String tagStr = pieces[i];
      if (!tagStr.contains(TAG_SEPARATOR)) {
        // Unknown tag
        continue;
      }
      int tagSeparatorIdx = tagStr.indexOf(TAG_SEPARATOR);
      metric.addTag(tagStr.substring(0, tagSeparatorIdx), tagStr.substring(tagSeparatorIdx + 1));
    }
    return metric;
  }",Creates the metric from the full name and the value.,1,456
2978,"protected String generateMessageNumber(Object umlMessage, 
            Object umlPredecessor,
            int position) {
        Iterator it;
        String activatorIntNo = """";
        Object umlActivator;
        int subpos = 0, submax = 1;

        if (umlMessage == null) {
            return null;
        }

        umlActivator = Model.getFacade().getActivator(umlMessage);
        if (umlActivator != null) {
            activatorIntNo = generateMessageNumber(umlActivator);
            // activatorIntNo is now guaranteed not null
        }

        if (umlPredecessor != null) {
            // get the ordered list of immediate successors:
            Collection c = Model.getFacade().getSuccessors(umlPredecessor);
            submax = c.size();
            it = c.iterator();
            while (it.hasNext() && it.next() != umlMessage) {
                subpos++;
            }
        }

        StringBuilder result = new StringBuilder(activatorIntNo);
        if (activatorIntNo.length() > 0) {
            result.append(""."");
        }
        result.append(position);
        if (submax > 1) {
            result.append((char) ('a' + subpos));
        }
        return result.toString();
    }","Generate the ""intno"" of the given Message.",1,343
2979,"public boolean saveToGallery(String fileName, String subFolderPath, String fileDescription, Bitmap.CompressFormat format, int quality) {
        // restrain quality
        if (quality < 0 || quality > 100)
            quality = 50;

        long currentTime = System.currentTimeMillis();

        File extBaseDir = Environment.getExternalStorageDirectory();
        File file = new File(extBaseDir.getAbsolutePath() + ""/DCIM/"" + subFolderPath);
        if (!file.exists()) {
            if (!file.mkdirs()) {
                return false;
            }
        }

        String mimeType = """";
        switch (format) {
            case PNG:
                mimeType = ""image/png"";
                if (!fileName.endsWith("".png""))
                    fileName += "".png"";
                    break;
            case WEBP:
                mimeType = ""image/webp"";
                if (!fileName.endsWith("".webp""))
                    fileName += "".webp"";
                break;
            case JPEG:
            default:
                mimeType = ""image/jpeg"";
                if (!(fileName.endsWith("".jpg"") || fileName.endsWith("".jpeg"")))
                    fileName += "".jpg"";
                break;
        }

        String filePath = file.getAbsolutePath() + ""/"" + fileName;
        FileOutputStream out = null;
        try {
            out = new FileOutputStream(filePath);

            Bitmap b = getChartBitmap();
            b.compress(format, quality, out);

            out.flush();
            out.close();

        } catch (IOException e) {
            e.printStackTrace();

            return false;
        }

        long size = new File(filePath).length();

        ContentValues values = new ContentValues(8);

        // store the details
        values.put(Images.Media.TITLE, fileName);
        values.put(Images.Media.DISPLAY_NAME, fileName);
        values.put(Images.Media.DATE_ADDED, currentTime);
        values.put(Images.Media.MIME_TYPE, mimeType);
        values.put(Images.Media.DESCRIPTION, fileDescription);
        values.put(Images.Media.ORIENTATION, 0);
        values.put(Images.Media.DATA, filePath);
        values.put(Images.Media.SIZE, size);

        return getContext().getContentResolver().insert(Images.Media.EXTERNAL_CONTENT_URI, values) != null;
    }",Saves the current state of the chart to the gallery as an image type.,1,676
2980,"public static Throwable getCause(Throwable throwable, String[] methodNames) {
        if (throwable == null) {
            return null;
        }
        Throwable cause = getCauseUsingWellKnownTypes(throwable);
        if (cause == null) {
            if (methodNames == null) {
                methodNames = CAUSE_METHOD_NAMES;
            }
            for (int i = 0; i < methodNames.length; i++) {
                String methodName = methodNames[i];
                if (methodName != null) {
                    cause = getCauseUsingMethodName(throwable, methodName);
                    if (cause != null) {
                        break;
                    }
                }
            }

            if (cause == null) {
                cause = getCauseUsingFieldName(throwable, ""detail"");
            }
        }
        return cause;
    }",Introspects the Throwable to obtain the cause.  Try known exception types. Try the supplied array of method names. Try the field 'detail'.  A null set of method names means use the default set.,1,240
2981,"private AbstractRenderer createRenderer(int renderType) throws IllegalArgumentException {

        switch (renderType) {
        case Constants.RENDER_PDF:
            return new org.apache.fop.render.pdf.PDFRenderer();
        case Constants.RENDER_AWT:
            return new org.apache.fop.render.awt.AWTRenderer();
        case Constants.RENDER_PRINT:
            return new org.apache.fop.render.awt.AWTPrintRenderer();
        case Constants.RENDER_PCL:
            return new org.apache.fop.render.pcl.PCLRenderer();
        case Constants.RENDER_PS:
            return new org.apache.fop.render.ps.PSRenderer();
        case Constants.RENDER_TXT:
            return new org.apache.fop.render.txt.TXTRenderer();
        case Constants.RENDER_XML:
            return new org.apache.fop.render.xml.XMLRenderer();
        case Constants.RENDER_SVG:
            return new org.apache.fop.render.svg.SVGRenderer();
        default:
            throw new IllegalArgumentException(""Invalid renderer type "" 
                + renderType);
        }
    }",Creates an AbstractRenderer object based on render-type desired,1,280
2982,"public UserThread remove(UserThread userThread) throws SystemException {
		return super.remove(userThread);
	}",Removes the user thread from the database.,1,31
2983,"public boolean epsilonEquals (float x, float y) {
		return epsilonEquals(x, y, MathUtils.FLOAT_ROUNDING_ERROR);
	}",Compares this vector with the other vector using MathUtils.FLOAT_ROUNDING_ERROR for fuzzy equality testing,1,39
2984,"public Comparator<T> getComparator() {
        return comparator;
    }","Gets the comparator being used to determine if objects are within the range. Natural ordering uses an internal comparator implementation, thus this method never returns null.",1,22
2985,"public List<PersistenceProvider> getProvider() {
        return providerList;
    }",returns the persistence providers that are deployed with an application.,1,22
2986,"HRegionLocation getRegionLocation(Text row, boolean reload) throws IOException {
    checkClosed();
    return reload?
      this.connection.relocateRegion(this.tableName, row):
      this.connection.locateRegion(tableName, row);
  }",Find region location hosting passed row,1,65
2987,"public Foo remove(Foo foo) throws SystemException {
		return super.remove(foo);
	}",Removes the foo from the database.,1,31
2988,"public static CardNonce fromJson(String json) throws JSONException {
        CardNonce cardNonce = new CardNonce();
        cardNonce.fromJson(CardNonce.getJsonObjectForType(API_RESOURCE_KEY, json));
        return cardNonce;
    }",Convert an API response to a  CardNonce.,1,59
2989,"public static Field findField(Class<?> clazz, String name) {
		return findField(clazz, name, null);
	}",Attempt to find a  Field field on the supplied  Class with the supplied  name.,1,41
2990,"public long partBytes(int part) {
            if (numberOfParts == 1) {
                return length();
            }
            // First and last-but-one parts have a size equal to partBytes
            if (part < (numberOfParts - 1)) {
                return partBytes;
            }
            // Last part size is deducted from the length and the number of parts
            return length() - (partBytes * (numberOfParts-1));
        }",Returns the size (in bytes) of a given part,1,97
2991,"public static boolean compactRealmFile(Context context) {
        return compactRealm(new RealmConfiguration.Builder(context).build());
    }",Deprecated: Use  #compactRealm(RealmConfiguration) instead.,1,38
2992,"public List<SelectionDetail> getYValsAtIndex(int xIndex) {

        List<SelectionDetail> vals = new ArrayList<SelectionDetail>();

        for (int i = 0; i < mData.getDataSetCount(); i++) {

            DataSet<?> dataSet = mData.getDataSetByIndex(i);

            // extract all y-values from all DataSets at the given x-index
            float yVal = dataSet.getYValForXIndex(xIndex);

            if (!Float.isNaN(yVal)) {
                vals.add(new SelectionDetail(yVal, i, dataSet));
            }
        }

        return vals;
    }",Returns an array of SelectionDetail objects for the given x-index.,1,159
2993,"public String getEntityName() {
		return entityName;
	}",Returns the JPA name of this entity.,1,19
2994,"public boolean isNANPACountry(String regionCode) {
    return regionCode != null && nanpaRegions.contains(regionCode.toUpperCase());
  }",Checks if this is a region under the North American Numbering Plan Administration (NANPA).,1,41
2995,"public AsyncProducer acquireProducer(Endpoint endpoint) {
        try {
            AsyncProducer producer = producers.acquire(endpoint);
            if (statistics != null) {
                statistics.onHit(endpoint.getEndpointUri());
            }
            return producer;
        } catch (Throwable e) {
            throw new FailedToCreateProducerException(endpoint, e);
        }
    }","Acquires a pooled producer which you must release back again after usage using the  #releaseProducer(org.apache.camel.Endpoint, org.apache.camel.AsyncProducer) method.",1,102
2996,"public static CiConstant forInt(int i) {
        switch (i) {
            case -1 : return INT_MINUS_1;
            case 0  : return INT_0;
            case 1  : return INT_1;
            case 2  : return INT_2;
            case 3  : return INT_3;
            case 4  : return INT_4;
            case 5  : return INT_5;
        }
        return get(CiKind.Int, i);
    }",Creates a boxed integer constant.,1,129
2997,"public static byte[] decrypt(String key, byte[] inputBytes) throws EncryptionException {
		Assert.hasText(key, ""A key is required to attempt decryption"");
		return cipher(key, Base64.decodeBase64(inputBytes), Cipher.DECRYPT_MODE);
	}",Decrypts the inputBytes using the key.,1,67
2998,"public static String[] split(String str, char separatorChar) {
        // Performance tuned for 2.0 (JDK1.4)
        
        if (str == null) {
            return null;
        }
        int len = str.length();
        if (len == 0) {
            return ArrayUtils.EMPTY_STRING_ARRAY;
        }
        List list = new ArrayList();
        int i =0, start = 0;
        boolean match = false;
        while (i < len) {
            if (str.charAt(i) == separatorChar) {
                if (match) {
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            match = true;
            i++;
        }
        if (match) {
            list.add(str.substring(start, i));
        }
        return (String[]) list.toArray(new String[list.size()]);
    }","Splits the provided text into an array, separator specified.",1,290
2999,"public String getGt() {
        return fields.get(""GT"").get(0);
    }",Return the value of the GT genotype field for this VCF genotype.,1,31
3000,"public Set<String> getGroupNames() {
            return Collections.unmodifiableSet(groupNames);
        }",Returns an unmodifiable set of the group names that the roster item belongs to.,1,27
3001,"public Message createMessage(String messageText)
    {
        return new MessageYahooImpl(
            messageText, 
            DEFAULT_MIME_TYPE, 
            DEFAULT_MIME_ENCODING, null);
    }",Create a Message instance for sending a simple text messages with default (text/plain) content type and encoding.,1,43
3002,"PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
        if (pStmtPool == null) {
            return connection.prepareStatement(sql, autoGeneratedKeys);
        }
        try {
            return pStmtPool.borrowObject(createKey(sql, autoGeneratedKeys));
        } catch (final RuntimeException e) {
            throw e;
        } catch (final Exception e) {
            throw new SQLException(""Borrow prepareStatement from pool failed"", e);
        }
    }",Creates or obtains a  PreparedStatement from my pool.,1,135
3003,"static CompilerMessage parseModernError( int exitCode, String error )
    {
        StringTokenizer tokens = new StringTokenizer( error, "":"" );

        boolean isError = exitCode != 0;

        StringBuilder msgBuffer;

        try
        {
            // With Java 6 error output lines from the compiler got longer. For backward compatibility
            // .. and the time being, we eat up all (if any) tokens up to the erroneous file and source
            // .. line indicator tokens.

            boolean tokenIsAnInteger;

            String file = null;

            String currentToken = null;

            do
            {
                if ( currentToken != null )
                {
                    if ( file == null )
                    {
                        file = currentToken;
                    }
                    else
                    {
                        file = file + ':' + currentToken;
                    }
                }

                currentToken = tokens.nextToken();

                // Probably the only backward compatible means of checking if a string is an integer.

                tokenIsAnInteger = true;

                try
                {
                    Integer.parseInt( currentToken );
                }
                catch ( NumberFormatException e )
                {
                    tokenIsAnInteger = false;
                }
            }
            while ( !tokenIsAnInteger );

            String lineIndicator = currentToken;

            int startOfFileName = file.lastIndexOf( ']' );

            if ( startOfFileName > -1 )
            {
                file = file.substring( startOfFileName + 1 + EOL.length() );
            }

            int line = Integer.parseInt( lineIndicator );

            msgBuffer = new StringBuilder();

            String msg = tokens.nextToken( EOL ).substring( 2 );

            // Remove the 'warning: ' prefix
            String warnPrefix = getWarnPrefix( msg );
            if ( warnPrefix != null )
            {
                isError = false;
                msg = msg.substring( warnPrefix.length() );
            }
            else
            {
                isError = exitCode != 0;
            }

            msgBuffer.append( msg );

            msgBuffer.append( EOL );

            String context = tokens.nextToken( EOL );

            String pointer = tokens.nextToken( EOL );

            if ( tokens.hasMoreTokens() )
            {
                msgBuffer.append( context );    // 'symbol' line

                msgBuffer.append( EOL );

                msgBuffer.append( pointer );    // 'location' line

                msgBuffer.append( EOL );

                context = tokens.nextToken( EOL );

                try
                {
                    pointer = tokens.nextToken( EOL );
                }
                catch ( NoSuchElementException e )
                {
                    pointer = context;

                    context = null;
                }

            }

            String message = msgBuffer.toString();

            int startcolumn = pointer.indexOf( ""^"" );

            int endcolumn = context == null ? startcolumn : context.indexOf( "" "", startcolumn );

            if ( endcolumn == -1 )
            {
                endcolumn = context.length();
            }

            return new CompilerMessage( file, isError, line, startcolumn, line, endcolumn, message.trim() );
        }
        catch ( NoSuchElementException e )
        {
            return new CompilerMessage( ""no more tokens - could not parse error message: "" + error, isError );
        }
        catch ( NumberFormatException e )
        {
            return new CompilerMessage( ""could not parse error message: "" + error, isError );
        }
        catch ( Exception e )
        {
            return new CompilerMessage( ""could not parse error message: "" + error, isError );
        }
    }",Construct a CompilerMessage object from a line of the compiler output,1,969
3004,"public List<MgmtTargetRequestBody> build() {
        return Lists.newArrayList(doBuild(controllerId));
    }",Builds a list with a single entry of  MgmtTargetRequestBody which can directly be used in the RESTful-API.,1,30
3005,"public static DirLock tryLock(FileSystem fs, Path dir) throws IOException {
    Path lockFile = new Path(dir.toString() + Path.SEPARATOR_CHAR + DIR_LOCK_FILE );

    try {
      FSDataOutputStream ostream = HdfsUtils.tryCreateFile(fs, lockFile);
      if (ostream!=null) {
        log.info(""Thread ({}) acquired lock on dir {}"", threadInfo(), dir);
        ostream.close();
        return new DirLock(fs, lockFile);
      } else {
        log.info(""Thread ({}) cannot lock dir {} as its already locked."", threadInfo(), dir);
        return null;
      }
    } catch (IOException e) {
        log.error(""Error when acquiring lock on dir "" + dir, e);
        throw e;
    }
  }",Get a lock on file if not already locked,1,209
3006,"public final WebTarget target() {
        return client().target(getTestContainer().getBaseUri());
    }",Create a JAX-RS web target whose URI refers to the  #getBaseUri() base URI the tested,1,34
3007,"public boolean hasNext() {
                    return count > 0 && that.hasNext();
                }",Take the first n elements from this iterator.,1,32
3008,"public static String canonicalPath(String path)
    {
        if (path == null || path.isEmpty() || !path.contains("".""))
            return path;

        if(path.startsWith(""/..""))
            return null;

        List<String> directories = new ArrayList<>();
        Collections.addAll(directories, __PATH_SPLIT.split(path));
        
        for(ListIterator<String> iterator = directories.listIterator(); iterator.hasNext();)
        {
            switch (iterator.next()) {
                case ""./"":
                case ""."":
                    if (iterator.hasNext() && directories.get(iterator.nextIndex()).equals(""/""))
                        break;

                    iterator.remove();
                    break;
                case ""../"":
                case "".."":
                    if(iterator.previousIndex() == 0)
                        return null;

                    iterator.remove();
                    if(iterator.previous().equals(""/"") && iterator.nextIndex() == 0)
                        return null;

                    iterator.remove();
                    break;
            }
        }

        return String.join("""", directories);
    }",Convert a path to a cananonical form.,1,344
3009,"public Set<ChatMessageListener> getListeners() {
        return Collections.unmodifiableSet(listeners);
    }",Returns an unmodifiable set of all of the listeners registered with this chat.,1,27
3010,"boolean matches(List<Type> sourceTypes, Type targetType) {
        // check & collect generic types.
        List<? extends VariableElement> candidateParameters = candidateMethod.getExecutable().getParameters();

        if ( candidateParameters.size() != sourceTypes.size() ) {
            return false;
        }

        Map<TypeVariable, TypeMirror> genericTypesMap = new HashMap<TypeVariable, TypeMirror>();

        int i = 0;
        for ( VariableElement candidateParameter : candidateParameters ) {
            TypeMatcher parameterMatcher = new TypeMatcher( Assignability.VISITED_ASSIGNABLE_FROM, genericTypesMap );
            if ( !parameterMatcher.visit( candidateParameter.asType(), sourceTypes.get( i++ ).getTypeMirror() ) ) {
                return false;
            }
        }

        // check return type
        TypeMirror candidateReturnType = candidateMethod.getExecutable().getReturnType();
        TypeMatcher returnTypeMatcher = new TypeMatcher( Assignability.VISITED_ASSIGNABLE_TO, genericTypesMap );

        if ( !returnTypeMatcher.visit( candidateReturnType, targetType.getTypeMirror() ) ) {
            if ( targetType.isPrimitive() ) {
                TypeMirror boxedType = typeUtils.boxedClass( (PrimitiveType) targetType.getTypeMirror() ).asType();
                TypeMatcher boxedReturnTypeMatcher =
                    new TypeMatcher( Assignability.VISITED_ASSIGNABLE_TO, genericTypesMap );

                if ( !boxedReturnTypeMatcher.visit( candidateReturnType, boxedType ) ) {
                    return false;
                }
            }
            else {
                return false;
            }
        }

        // check if all type parameters are indeed mapped
        if ( candidateMethod.getExecutable().getTypeParameters().size() != genericTypesMap.size() ) {
            return false;
        }

        // check if all entries are in the bounds
        for ( Map.Entry<TypeVariable, TypeMirror> entry : genericTypesMap.entrySet() ) {
            if ( !isWithinBounds( entry.getValue(), getTypeParamFromCandidate( entry.getKey() ) ) ) {
                // checks if the found Type is in bounds of the TypeParameters bounds.
                return false;
            }
        }
        return true;
    }",Whether the given source and target types are matched by this matcher's candidate method.,1,534
3011,"public AbstractProject getRootProject() {
        if (this.getParent() instanceof Jenkins) {
            return this;
        } else {
            return ((AbstractProject) this.getParent()).getRootProject();
        }
    }",Returns the root project value.,1,66
3012,"public static BlockInStream create(FileSystemContext context, long blockId, long blockSize,
      WorkerNetAddress address, BlockInStreamSource blockSource,
      Protocol.OpenUfsBlockOptions openUfsBlockOptions, InStreamOptions options)
          throws IOException {
    if (Configuration.getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED)
        && !NettyUtils.isDomainSocketSupported(address)
        && blockSource == BlockInStreamSource.LOCAL) {
      try {
        LOG.debug(""Creating short circuit input stream for block {} @ {}"", blockId, address);
        return createLocalBlockInStream(context, address, blockId, blockSize, options);
      } catch (NotFoundException e) {
        // Failed to do short circuit read because the block is not available in Alluxio.
        // We will try to read from UFS via netty. So this exception is ignored.
        LOG.warn(""Failed to create short circuit input stream for block {} @ {}"", blockId, address);
      }
    }
    Protocol.ReadRequest.Builder builder = Protocol.ReadRequest.newBuilder().setBlockId(blockId)
        .setPromote(options.getAlluxioStorageType().isPromote());
    if (openUfsBlockOptions != null) {
      builder.setOpenUfsBlockOptions(openUfsBlockOptions);
    }

    LOG.debug(""Creating netty input stream for block {} @ {} from client {}"", blockId, address,
        NetworkAddressUtils.getClientHostName());
    return createNettyBlockInStream(context, address, blockSource, builder.buildPartial(),
        blockSize, options);
  }",Creates an  BlockInStream that reads from a local block.,1,304
3013,"public static String optimizerPlanAsJSON(Plan plan) throws Exception {
		final int parallelism = plan.getDefaultParallelism() == -1 ? 1 : plan.getDefaultParallelism();

		Optimizer pc = new Optimizer(new DataStatistics(), new Configuration());
		pc.setDefaultParallelism(parallelism);
		OptimizedPlan op = pc.compile(plan);

		return new PlanJSONDumpGenerator().getOptimizerPlanAsJSON(op);
	}",Creates a JSON representation of the given dataflow's execution plan.,1,123
3014,"public AttributeDescriptor getAttributeDescriptor(SimpleFeatureType originalSchema) {
        AttributeTypeBuilder ab = new AttributeTypeBuilder();
        ExpressionTypeEvaluator typeEvaluator = new ExpressionTypeEvaluator(originalSchema);

        if (binding != null) {

            ab.setBinding(binding);
            ab.setName(name);
            if (crs != null) {
                ab.setCRS(crs);
            } else {
                // try to get it from the expression operands, under the assumption that
                // the geometry crs are not getting modified by the filter functions
                expression.accept(typeEvaluator, null);
                ab.setCRS(typeEvaluator.getCoordinateReferenceSystem());
            }

            return ab.buildDescriptor(name);
        } else {
            // in case no evaluation succeeds
            Class computedBinding = Object.class;

            // see if we are just passing a property trough
            if (expression instanceof PropertyName) {
                PropertyName pn = (PropertyName) expression;
                AttributeDescriptor descriptor = originalSchema.getDescriptor(pn.getPropertyName());

                if (descriptor == null) {
                    throw new IllegalArgumentException(
                            ""Original feature type does not have a property named "" + name);
                } else {
                    ab.init(descriptor);
                    ab.setName(name);
                    return ab.buildDescriptor(name);
                }
            } else {
                // try static analysis
                computedBinding = (Class) expression.accept(typeEvaluator, null);
                if(computedBinding == null) {
                    return null;
                }

                CoordinateReferenceSystem computedCRS = crs;
                if (Geometry.class.isAssignableFrom(computedBinding) && computedCRS == null) {
                    computedCRS = evaluateCRS(originalSchema);
                }

                ab.setBinding(computedBinding);
                ab.setName(name);
                if (computedCRS != null) {
                    ab.setCRS(computedCRS);
                }

                return ab.buildDescriptor(name);
            }
        }
    }",Computes the output attribute descriptor for this  Definition given only the original feature type.,1,466
3015,"public Collection<MetadataType> getSubTypes(MetadataType type) {
    return subTypesMapping.map(mapping -> mapping.getSubTypes(type)).orElse(ImmutableList.of());
  }",Returns a  Collection with all the declared  MetadataType subtypes for the indicated  MetadataType  type.,1,49
3016,"public static ConfigModel of(String name, boolean required, String expression) {
        return new Builder(name).setRequired(required).setExpression(expression).build();
    }",Creates a new ConfigModel,1,53
3017,"public synchronized String getSiteConfigUsePreferredUrls()
  {
    String value = getConfigurationParameter(""provide-direct-url"");

    if (value == null)
    {
      return ""false"";
    }
    
    value = value.trim().toLowerCase();
    
    if (!(value.equals(""false"") || 
          value.equals(""related-link"") || 
          value.equals(""title-link"")))
    {
      m_log.debug(""Invalid value for <provide-direct-url>: \"""" 
                  + value 
                  + ""\"", using \""false\""""); 
      value = ""false"";
    }
    return value;
  }","How should we use URLs marked as ""preferred"" by the OSID implementation?",1,176
3018,"public ResultInterface getResult(Session session) {
        ValueResultSet v = getValueResultSet(session);
        if (v == null) {
            return null;
        }
        if (cachedResult != null && cachedValue == v) {
            cachedResult.reset();
            return cachedResult;
        }
        LocalResult result = LocalResult.read(session,  v.getResultSet(), 0);
        if (function.isDeterministic()) {
            cachedResult = result;
            cachedValue = v;
        }
        return result;
    }",Read the result from the function.,1,156
3019,"@Override
    @SuppressWarnings(""unchecked"")
    public Object clone() {
        return new ImplicationAfter(name, (ArrayList<Term>) cloneList(components), (ArrayList<Variable>) cloneList(openVariables), complexity);
    }",Clone an object,1,64
3020,"@Override
  public synchronized List<FileInfo> listStatus(TachyonURI path) throws IOException {
    validateUri(path);
    return mMasterClient.listStatus(path.getPath());
  }","If the path is a directory, return all the direct entries in it.",1,50
3021,"public static long ZSTD_DCtx_refPrefix(@NativeType(""ZSTD_DCtx *"") long dctx, @NativeType(""void const *"") ByteBuffer prefix) {
        if (CHECKS) {
            check(dctx);
        }
        return nZSTD_DCtx_refPrefix(dctx, memAddress(prefix), prefix.remaining());
    }",References a prefix (single-usage dictionary) to decompress next frame.,1,78
3022,"@SuppressWarnings(""serial"")
	protected IHandlePartFactory<VR> getHandlePartFactory() {
		IViewer<VR> viewer = getHost().getRoot().getViewer();
		return viewer.getAdapter(
				AdapterKey.get(new TypeToken<IHandlePartFactory<VR>>() {
				}.where(new TypeParameter<VR>() {
				}, Types.<VR> argumentOf(viewer.getClass())),
						SELECTION_HANDLE_PART_FACTORY));
	}",Returns the  IHandlePartFactory for selection feedback.,1,117
3023,"public static List<ConfigChangeAction> validate(VespaModel model, boolean checkRouting, boolean force, DeployState deployState) {
        if (checkRouting) {
            new RoutingValidator().validate(model, deployState);
            new RoutingSelectorValidator().validate(model, deployState);
        }
        new ComponentValidator().validate(model, deployState);
        new SearchDataTypeValidator().validate(model, deployState);
        new StreamingValidator().validate(model, deployState);
        new RankSetupValidator(force).validate(model, deployState);
        new NoPrefixForIndexes().validate(model, deployState);
        new DeploymentFileValidator().validate(model, deployState);
        new RankingConstantsValidator().validate(model, deployState);
        new SecretStoreValidator().validate(model, deployState);

        Optional<Model> currentActiveModel = deployState.getPreviousModel();
        if (currentActiveModel.isPresent() && (currentActiveModel.get() instanceof VespaModel))
            return validateChanges((VespaModel)currentActiveModel.get(), model,
                                   deployState.validationOverrides(), deployState.getDeployLogger(), deployState.now());
        else
            validateFirstTimeDeployment(model, deployState);
            return new ArrayList<>();
    }","Validate with optional checking of routing, which cannot always be valid in unit tests",1,319
3024,"public PreparedGetListOfObjects<T> prepare() {
            final ContentResolverTypeDefaults<T> typeDefaults = storIOContentResolver.internal().typeDefaults(type);

            if (mapFunc == null && typeDefaults != null) {
                mapFunc = typeDefaults.mapFromCursor;
            }

            checkNotNull(mapFunc, ""Please specify map function"");

            if (getResolver == null) {
                if (typeDefaults != null && typeDefaults.getResolver != null) {
                    getResolver = typeDefaults.getResolver;
                } else {
                    getResolver = DefaultGetResolver.INSTANCE;
                }
            }

            checkNotNull(getResolver, ""Please specify Get Resolver"");

            return new PreparedGetListOfObjects<T>(
                    storIOContentResolver,
                    getResolver,
                    mapFunc,
                    query
            );
        }",Builds new instance of  PreparedGetListOfObjects,1,209
3025,"public boolean equals(Object o) {
        if (o == null) {
            return false;
        }
        if (!(o instanceof RenderState)) {
            return false;
        }
        RenderState rs = (RenderState) o;
        if (pointSprite != rs.pointSprite) {
            return false;
        }

        if (wireframe != rs.wireframe) {
            return false;
        }

        if (cullMode != rs.cullMode) {
            return false;
        }

        if (depthWrite != rs.depthWrite) {
            return false;
        }

        if (depthTest != rs.depthTest) {
            return false;
        }
        if (depthTest) {
            if (depthFunc != rs.depthFunc) {
                return false;
            }
        }

        if (colorWrite != rs.colorWrite) {
            return false;
        }

        if (blendMode != rs.blendMode) {
            return false;
        }

        if (alphaTest != rs.alphaTest) {
            return false;
        }
        if (alphaTest) {
            if (alphaFunc != rs.alphaFunc) {
                return false;
            }
        }

        if (alphaFallOff != rs.alphaFallOff) {
            return false;
        }

        if (offsetEnabled != rs.offsetEnabled) {
            return false;
        }

        if (offsetFactor != rs.offsetFactor) {
            return false;
        }

        if (offsetUnits != rs.offsetUnits) {
            return false;
        }

        if (stencilTest != rs.stencilTest) {
            return false;
        }

        if (stencilTest) {
            if (frontStencilStencilFailOperation != rs.frontStencilStencilFailOperation) {
                return false;
            }
            if (frontStencilDepthFailOperation != rs.frontStencilDepthFailOperation) {
                return false;
            }
            if (frontStencilDepthPassOperation != rs.frontStencilDepthPassOperation) {
                return false;
            }
            if (backStencilStencilFailOperation != rs.backStencilStencilFailOperation) {
                return false;
            }
            if (backStencilDepthFailOperation != rs.backStencilDepthFailOperation) {
                return false;
            }

            if (backStencilDepthPassOperation != rs.backStencilDepthPassOperation) {
                return false;
            }
            if (frontStencilFunction != rs.frontStencilFunction) {
                return false;
            }
            if (backStencilFunction != rs.backStencilFunction) {
                return false;
            }
        }

        return true;
    }",returns true if the given renderState is equall to this one,1,710
3026,"private MyService extract(Uri data) {
		if (""http"".equalsIgnoreCase(data.getScheme()) && ""maps.google.com"".equals(data.getHost())) {
			String q = null;
			String parameter = data.getQueryParameter(""q"");
			if (parameter == null) {
				parameter = data.getQueryParameter(""daddr"");
			}
			if(parameter != null) {
			    q = parameter.split("" "")[0];	
			}
			if (q.indexOf(',') != -1) {
				int i = q.indexOf(',');
				String lat = q.substring(0, i);
				String lon = q.substring(i + 1);
				if (lat.indexOf(':') != -1) {
					i = lat.indexOf(':');
					lat = lat.substring(i + 1);
				}
				try {
					double llat = Double.parseDouble(lat.trim());
					double llon = Double.parseDouble(lon.trim());
					return new GeoPointSearch(llat, llon);
				} catch (NumberFormatException e) {
					showErrorMessage(q);
				}
			} else {
				showErrorMessage(q);
			}
		} else if (data.getSchemeSpecificPart().indexOf(""0,0?"") != -1) {
			// it is 0,0? that means a search
			return new GeoAddressSearch(data.getQuery());
		} else {
			String geo = data.getSchemeSpecificPart();
			if(geo == null) {
				showErrorMessage("""");
			} else {
				int latIndex = geo.indexOf(',');
				if (latIndex > 0) {
					int lonIndex = geo.indexOf(',', latIndex + 1);
					int altIndex = geo.indexOf(';', latIndex + 1);
					int paramIndex = geo.indexOf('?', latIndex + 1);
					paramIndex = paramIndex > 0 ? paramIndex : geo.length();
					altIndex = altIndex > 0 && altIndex < paramIndex ? altIndex : paramIndex;
					lonIndex = lonIndex > 0 && lonIndex < altIndex ? lonIndex : altIndex;
					try {
						double lat = Double.parseDouble(geo.substring(0, latIndex).trim());
						double lon = Double.parseDouble(geo.substring(latIndex + 1, lonIndex).trim());
						return new GeoPointSearch(lat, lon);
					} catch (NumberFormatException e) {
						showErrorMessage(geo);
					}
				} else {
					showErrorMessage(geo);
				}
			}
		}
		return new Empty();
	}","geo:latitude,longitude geo:latitude,longitude?z=zoom geo:0,0?q=my+street+address geo:0,0?q=business+near+city",1,774
3027,"@Override
	public String toString() {
		return ""$"" + getName() + ""="" + getValue();
	}","Returns a string representation for this named value, such as ""$myVariable=786"".",1,42
3028,"public static String toString(long v, int radix) {
        return IntegralToString.longToString(v, radix);
    }",Converts the specified signed long value into a string representation based on the specified radix.,1,37
3029,"private boolean testUnlessAllows() {
        PropertyHelper propertyHelper = PropertyHelper.getPropertyHelper(getProject());
        Object o = propertyHelper.parseProperties(unlessCondition);
        if (!propertyHelper.testUnlessCondition(o)) {
            return false;
        }
        if (unless != null && unless.eval()) {
            return false;
        }
        return true;
    }","Tests whether or not the ""unless"" conditions (via String AND Condition) allows the execution of this target.",1,107
3030,"private static InternalMessage transformModifyDNRequest( LdapMessageCodec codecMessage, int messageId )
    {
        ModifyDnRequestImpl internalMessage = new ModifyDnRequestImpl( messageId );
        ModifyDNRequestCodec modifyDNRequest = codecMessage.getModifyDNRequest();

        // Codec : LdapDN entry -> Internal : LdapDN m_name
        internalMessage.setName( modifyDNRequest.getEntry() );

        // Codec : RelativeLdapDN newRDN -> Internal : LdapDN m_newRdn
        internalMessage.setNewRdn( modifyDNRequest.getNewRDN() );

        // Codec : boolean deleteOldRDN -> Internal : boolean m_deleteOldRdn
        internalMessage.setDeleteOldRdn( modifyDNRequest.isDeleteOldRDN() );

        // Codec : LdapDN newSuperior -> Internal : LdapDN m_newSuperior
        internalMessage.setNewSuperior( modifyDNRequest.getNewSuperior() );

        return internalMessage;
    }",Transform a ModifyDNRequest message from a CodecMessage to a,1,140
3031,"public boolean supportsMixedCaseIdentifiers() throws SQLException{
        debugCodeCall(""supportsMixedCaseIdentifiers"");
        JdbcConnection.Settings settings = conn.getSettings();
        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;
    }","Checks if for CREATE TABLE Test(ID INT), getTables returns Test as the table name and identifiers are case sensitive.",1,66
3032,"public static BibEntry createAdaptedEntry(BibEntry entry) {
        if (entry == null) {
            return null;
        }
        BibEntry e = (BibEntry) entry.clone();
        for (String field : e.getFieldNames()) {
            if (field.equals(BibEntry.KEY_FIELD)) {
                continue;
            }
            String value = e.getField(field);
            // If the running JabRef version doesn't support post-processing in Layout,
            // preprocess fields instead:
            if (!OpenOfficePanel.postLayoutSupported && value != null) {
                e.setField(field, OOUtil.postformatter.format(value));
            }
        }
        return e;
    }",Make a cloned BibEntry and do the necessary preprocessing for use by the plugin.,1,175
3033,"public Object put( int key, Object v ) {
        while ( key >= size() )
            add( null );
        set( key , v );
        return v;
    }",Puts a value at an index.,1,67
3034,"public Object defaultCase( EObject object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'EObject'.,1,25
3035,"public static Pattern createPattern(String pattern, int flags) {
        try {
            return Pattern.compile(pattern, flags);
        }
        catch (final PatternSyntaxException e) {
            throw new ConversionException(
                    ""Failed to initialise regular expression "" + pattern, e);
        }
    }",Helper method to create a regular expression with a specific flags.,1,83
3036,"public CalendarResource remove(long calendarResourceId)
		throws NoSuchResourceException, SystemException {
		return remove(Long.valueOf(calendarResourceId));
	}",Removes the calendar resource with the primary key from the database.,1,38
3037,"private static double getPointForKey(String key) {
    return new Random(Hashing.sha384().hashString(key, StandardCharsets.UTF_8).asLong())
        .nextDouble();
  }","Return a double uniformly distributed between  [0, 1) derived from the  key.",1,53
3038,"protected RDF createRDFTermFactory() {
		return new SimpleRDFFactory();
	}",Create a new  RDF for a parse session.,1,23
3039,"public Observable<T> throttleWithTimeout(long timeout, TimeUnit unit, Scheduler scheduler) {
        return create(OperationDebounce.debounce(this, timeout, unit, scheduler));
    }",Debounces by dropping all values that are followed by newer values before the timeout value expires.,1,52
3040,"public static Process execute(final List commands, final List envp, final File dir) throws IOException {
        return Runtime.getRuntime().exec(stringify(commands), stringify(envp), dir);
    }","Executes the command specified by the given list, with the environment defined by envp and under the working directory dir.",1,65
3041,"public int copyFromLocal(File srcFile, TachyonURI dstPath) throws IOException {
    TachyonFS tachyonClient = createFS(dstPath);
    int ret = copyPath(srcFile, tachyonClient, dstPath);
    if (ret == 0) {
      System.out.println(""Copied "" + srcFile.getPath() + "" to "" + dstPath);
    }
    return ret;
  }",Copies a file or directory specified by srcPath from the local filesystem to dstPath in the Tachyon filesystem space.,1,111
3042,"public static XIDListValue removeIDFromList(XID actorID, XField field, int index) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XIDListValue) {
			XIDListValue listValue = (XIDListValue)value;
			
			// manipulate the contained list
			List<XID> list = XX.asList(listValue);
			list.remove(index);
			
			listValue = toIDListValue(list);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Removes the  XID at the specified index from the  XIDListValue of the given  XField,1,172
3043,"public List<String> getValue(String key) {
        List<String> result = data.get(key);
        //  Test to see if we found anything
        if (result == null) {
            // check default value
            result = getDefaultValue();
            if (result == null) {
                // we are the ""last"" to ask
                // we don't have anything left
                return getLastLevelBibtexKeyPattern(key);
            }
        }
        return result;

    }",Gets an object for a desired key from this BibtexKeyPattern or one of it's parents (in the case of DatabaseBibtexKeyPattern).,1,109
3044,"public TypeDeclarationDescr declare( PackageDescrBuilder pkg ) throws RecognitionException {
        DeclareDescrBuilder declare = null;
        try {
            declare = helper.start( pkg,
                                    DeclareDescrBuilder.class,
                                    null );

            // 'declare'
            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.DECLARE,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            // type may be qualified when adding metadata
            String type = qualifiedIdentifier();
            if ( state.failed ) return null;
            if ( state.backtracking == 0 ) declare.type( type );

            if ( helper.validateIdentifierKey( DroolsSoftKeywords.EXTENDS ) ) {
                match( input,
                       DRLLexer.ID,
                       DroolsSoftKeywords.EXTENDS,
                       null,
                       DroolsEditorType.KEYWORD );
                if ( !state.failed ) {
                    // Going for type includes generics, which is a no-no (JIRA-3040)
                    String superType = qualifiedIdentifier();
                    declare.superType( superType );
                }
            }

            while ( input.LA( 1 ) == DRLLexer.AT ) {
                // metadata*
                annotation( declare );
                if ( state.failed ) return null;
            }

            //boolean qualified = type.indexOf( '.' ) >= 0;
            while ( //! qualified &&
            input.LA( 1 ) == DRLLexer.ID && !helper.validateIdentifierKey( DroolsSoftKeywords.END ) ) {
                // field*
                field( declare );
                if ( state.failed ) return null;
            }

            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.END,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

        } catch ( RecognitionException re ) {
            reportError( re );
        } finally {
            helper.end( DeclareDescrBuilder.class,
                        declare );
        }
        return (declare != null) ? declare.getDescr() : null;
    }",declare := DECLARE qualifiedIdentifier (EXTENDS qualifiedIdentifier)? annotation field,1,529
3045,"public static Throwable getCause(Throwable t)
    {
        return getCause(t, CAUSE_METHOD_NAMES);
    }","Introspects the specified Throwable for a getCause(), getNextException(), getTargetException(), or getException() method which returns a Throwable object (standard as of JDK 1.4, and part of the  org.apache.commons.lang.exception.NestableException API), extracting and returning the cause of the exception.",1,31
3046,"public List<List<Object>> executeInsert(String sql, List<Object> params) throws SQLException {
        Connection connection = createConnection();
        PreparedStatement statement = null;
        try {
            log.fine(sql);
            statement = getPreparedStatement(connection, sql, params, Statement.RETURN_GENERATED_KEYS);
            this.updateCount = statement.executeUpdate();
            ResultSet keys = statement.getGeneratedKeys();
            return calculateKeys(keys);
        }
        catch (SQLException e) {
            log.log(Level.FINE, ""Failed to execute: "" + sql, e);
            throw e;
        }
        finally {
            closeResources(connection, statement);
        }
    }",Executes the given SQL statement (typically an INSERT statement).,1,193
3047,"public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {
		if (!StringUtils.hasLength(mediaTypes)) {
			return Collections.emptyList();
		}
		return MimeTypeUtils.tokenize(mediaTypes).stream()
				.map(MediaType::parseMediaType).collect(Collectors.toList());
	}",Parse the comma-separated string into a list of  MediaType objects.,1,85
3048,"public static Function create(Class<?> clazz, String methodName) {
    final Method method = findMethod(clazz, methodName);
    if (method == null) {
      return null;
    }
    return create(method);
  }",Creates  org.apache.calcite.schema.Function from given class.,1,76
3049,"public JSONObject getJSONObject(JSONObject json, String tag, JSONObject fallback) {
        if (json == null) {
            throw new IllegalArgumentException(""json required"");
        }
        if (tag == null) {
            throw new IllegalArgumentException(""tag required for json access"");
        }
        if (json.containsKey(tag) && json.get(tag) instanceof JSONObject) {
            return (JSONObject) json.get(tag);
        } else {
            return fallback;
        }
    }","Access JSONObject for the indicated tag, with the provided fallback if the the json does not contain a JSONObject for that tag.",1,145
3050,"public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {
		return getGenericArgumentValue(requiredType, requiredName, null);
	}",Look for a generic argument value that matches the given type.,1,39
3051,"public static DeviceBandwidthSampler getInstance() {
    return DeviceBandwidthSamplerHolder.instance;
  }",Retrieval method for the DeviceBandwidthSampler singleton.,1,23
3052,"public Histogram newHistogram(MetricName metricName,
                                        boolean biased) {
        return getOrAdd(metricName,
                        new Histogram(biased ? SampleType.BIASED : SampleType.UNIFORM));
    }",Creates a new  Histogram and registers it under the given metric name.,1,52
3053,"Result executeUpdateStatement(Session session) {

        int                       count          = 0;
        Expression[]              colExpressions = updateExpressions;
        RowSetNavigatorDataChange rowset = new RowSetNavigatorDataChange();
        Type[]                    colTypes       = baseTable.getColumnTypes();
        RangeIterator it = RangeVariable.getIterator(session,
            targetRangeVariables);

        while (it.next()) {
            session.sessionData.startRowProcessing();

            Row      row  = it.getCurrentRow();
            Object[] data = row.getData();
            Object[] newData = getUpdatedData(session, baseTable,
                                              updateColumnMap, colExpressions,
                                              colTypes, data);

            if (updatableTableCheck != null) {
                it.setCurrent(newData);

                boolean check = updatableTableCheck.testCondition(session);

                if (!check) {
                    throw Error.error(ErrorCode.X_44000);
                }
            }

            rowset.addRow(session, row, newData, colTypes, updateColumnMap);
        }

/* debug 190
        if (rowset.size() == 0) {
            System.out.println(targetTable.getName().name + "" zero update: session ""
                               + session.getId());
        } else if (rowset.size() >1) {
           System.out.println(""multiple update: session ""
                              + session.getId() + "", "" + rowset.size());
       }

//* debug 190 */
        rowset.beforeFirst();

        if (rowset.getSize() > 0) {
            count = update(session, baseTable, rowset);
        } else {
            return Result.updateZeroResult;
        }

        if (count == 1) {
            return Result.updateOneResult;
        }

        return new Result(ResultConstants.UPDATECOUNT, count);
    }",Executes a MERGE statement.,1,375
3054,"public static double multiplySaturate(double a, double b) {
        double r = a * b;
        if (r > 1 / MIN_PROBABILITY) {
            return 1 / MIN_PROBABILITY;
        }
        return r;
    }",Multiplies a and b and saturates the result to 1/ #MIN_PROBABILITY.,1,73
3055,"public static Source fromFileName(CharSequence chars, String fileName) throws IOException {
        CompilerAsserts.neverPartOfCompilation();
        assert chars != null;

        final WeakReference<Source> nameRef = nameToSource.get(fileName);
        Source source = nameRef == null ? null : nameRef.get();
        if (source == null) {
            final File file = new File(fileName);
            // We are going to trust that the fileName is readable.
            final String path = file.getCanonicalPath();
            final WeakReference<Source> pathRef = nameToSource.get(path);
            source = pathRef == null ? null : pathRef.get();
            if (source == null) {
                source = new ClientManagedFileSource(file, fileName, path, chars);
                nameToSource.put(path, new WeakReference<>(source));
            }
        } else if (source instanceof ClientManagedFileSource) {
            final ClientManagedFileSource modifiableSource = (ClientManagedFileSource) source;
            modifiableSource.setCode(chars);
            return modifiableSource;
        } else {
            throw new IOException(""Attempt to modify contents of a file Source"");
        }
        return source;
    }","Gets the canonical representation of a source file whose contents are the responsibility of the client:  If no Source exists corresponding to the provided file name, then a new Source is created whose contents are those provided.",1,324
3056,"protected HttpResponse rewrite(HttpRequest request, HttpResponse response) {
    if (rewriterRegistry != null) {
      HttpResponse rewritten = response;
      for (ContentRewriter rewriter : rewriterRegistry.getRewriters()) {
        rewritten = rewriter.rewrite(request, rewritten);
      }
      if (response != rewritten) {
        return rewritten;
      }
    }
    return null;
  }",Rewrite the content.,1,115
3057,"public boolean isWordEnd() {
    return isWordEnd;
  }","Returns a value which specifies, whether the word is finished or not.",1,19
3058,"protected boolean isRegistered()
    {
        boolean retval = false;
        try
        {
            // Get the default registry handler.
            RegistryHandler registryHandler = RegistryDefaultHandler.getInstance();
            if (registryHandler != null)
            {
                registryHandler.verify(installData);
                retval = registryHandler.isProductRegistered();

            }
            // else we are on a os which has no registry or the
            // needed dll was not bound to this installation. In
            // both cases we forget the ""already exist"" check.

        }
        catch (Exception e)
        { // Will only be happen if registry handler is good, but an
            // exception at performing was thrown. This is an error...
            e.printStackTrace();
        }
        return (retval);
    }",Returns wether the handled application is already registered or not.,1,136
3059,"public synchronized CAS getTCas(long aTimeout) {
    long startTime = new Date().getTime();
    CAS cas;
    while ((cas = getTCas()) == null) {
      try {
        wait(aTimeout);
      } catch (InterruptedException e) {
      }
      if (aTimeout > 0 && (new Date().getTime() - startTime) >= aTimeout) {
        // Timeout has expired
        return null;
      }
    }
    return cas;
  }",Checks out a CAS from the pool.,1,150
3060,"public Iterable<Stream> getStreams() {
        return streams.values();
    }",Get all the streams as an iterable.,1,26
3061,"public ProbeInstrument attach(Probe probe, SimpleInstrumentListener listener, String instrumentInfo) {
        final ProbeInstrument instrument = new ProbeInstrument.SimpleInstrument(listener, instrumentInfo);
        probe.attach(instrument);
        return instrument;
    }","Attaches a  SimpleInstrumentListener listener to a  Probe, creating a binding called an  ProbeInstrument.",1,63
3062,"public final LongConstantOperand asLongConstant() {
    return (LongConstantOperand) this;
  }",Cast to an  LongConstantOperand.,1,25
3063,"private ClientIdentity getIdentity(HttpServletRequest request, HttpServletResponse response) throws APIException{
    	
    	if(getLoginCookie(request) != null){ // check if login cookie is set
			
			Cookie loginCookie = getLoginCookie(request);
			
			ClientCredential credential = new ClientCredential(ClientCredential.Type.cookie, loginCookie.getValue());
			Authentication authentication = new Authentication(credential, DAO.authentication);
			
			if(authentication.getIdentity() != null && authentication.checkExpireTime()) {

				//reset cookie validity time
				authentication.setExpireTime(defaultCookieTime);
				loginCookie.setMaxAge(defaultCookieTime.intValue());
				loginCookie.setPath(""/""); // bug. The path gets reset
				response.addCookie(loginCookie);

				return authentication.getIdentity();
			}

			authentication.delete();

			// delete cookie if set
			deleteLoginCookie(response);

			Log.getLog().info(""Invalid login try via cookie from host: "" + request.getRemoteHost());
		}
		else if(request.getSession().getAttribute(""identity"") != null){ // check session is set
			return (ClientIdentity) request.getSession().getAttribute(""identity"");
		}
    	else if (request.getParameter(""access_token"") != null){ // access tokens can be used by api calls, somehow the stateless equivalent of sessions for browsers
    		ClientCredential credential = new ClientCredential(ClientCredential.Type.access_token, request.getParameter(""access_token""));
    		Authentication authentication = new Authentication(credential, DAO.authentication);
			
    		
    		// check if access_token is valid
    		if(authentication.getIdentity() != null){
    			ClientIdentity identity = authentication.getIdentity();
    			
    			if(authentication.checkExpireTime()){
    				Log.getLog().info(""login for user: "" + identity.getName() + "" via access token from host: "" + request.getRemoteHost());
    				
    				if(""true"".equals(request.getParameter(""request_session""))){
            			request.getSession().setAttribute(""identity"",identity);
            		}
    				if(authentication.has(""one_time"") && authentication.getBoolean(""one_time"")){
    					authentication.delete();
    				}
    				return identity;
    			}
    		}
    		Log.getLog().info(""Invalid access token from host: "" + request.getRemoteHost());
    		authentication.delete();
    		throw new APIException(422, ""Invalid access token"");
    	}
    	
        return getAnonymousIdentity(request);
    }","Checks a request for valid login data, either a existing session, a cookie or an access token",1,607
3064,"private Set<String> indicesWithMissingShards(ImmutableMap<ShardId, SnapshotMetaData.ShardSnapshotStatus> shards) {
        Set<String> indices = null;
        for (ImmutableMap.Entry<ShardId, SnapshotMetaData.ShardSnapshotStatus> entry : shards.entrySet()) {
            if (entry.getValue().state() == State.MISSING) {
                if (indices == null) {
                    indices = newHashSet();
                }
                indices.add(entry.getKey().getIndex());
            }
        }
        return indices;
    }",Returns list of indices with missing shards,1,149
3065,"private BeanDefinition getMongoUri(Element element) {

		boolean hasClientUri = element.hasAttribute(""client-uri"");

		if (!hasClientUri && !element.hasAttribute(""uri"")) {
			return null;
		}

		Class<?> type = hasClientUri ? MongoClientURI.class : MongoURI.class;
		String uri = hasClientUri ? element.getAttribute(""client-uri"") : element.getAttribute(""uri"");

		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(type);
		builder.addConstructorArgValue(uri);

		return builder.getBeanDefinition();
	}",Creates a  BeanDefinition for a  MongoURI or  MongoClientURI depending on configured attributes.,1,161
3066,"public Iterator<T> iterator() {
        return new DecoratingIterator<T>(null) {
          Iterator<E> oldTypeIterator = iterable.iterator();

          @Override
          public T computeNext() {
            if (oldTypeIterator.hasNext()) {
              E candidate = oldTypeIterator.next();
              return function.apply(candidate);
            } else {
              return null;
            }
          }
        };
      }",Transforms this FluentIterable into a new one containing objects of the type T.,1,124
3067,"@Override
    public Cartesian3D parse(final String source, final ParsePosition pos) {
        final double[] coordinates = parseCoordinates(3, source, pos);
        if (coordinates == null) {
            return null;
        }
        return new Cartesian3D(coordinates[0], coordinates[1], coordinates[2]);
    }",Parses a string to produce a  Cartesian3D object.,1,100
3068,"public DocumentRevision getCurrentRevision() {
        for(DocumentRevisionNode n : leafs) {
            if(n.getData().isCurrent()) {
                return n.getData();
            }
        }
        throw new IllegalStateException(""No current revision found."");
    }",Returns the  DocumentRevision that is the current winning revision for this  DocumentRevisionTree.,1,72
3069,"public static int barrett(int number, int q, int barrettMultiplication, int barrettDivision)
    {

        return number - (int)(((long)number * barrettMultiplication) >> barrettDivision) * q;

    }",Description: Barrett Reduction for Heuristic qTESLA Security Category-3 (Option for Size or Speed),1,69
3070,"public static boolean equalsIgnoreCase(final CharSequence s1, final CharSequence s2) {
        if (s1 == s2) {
            return true;
        }
        if (s1 == null || s2 == null) {
            return false;
        }
        final int lg1 = s1.length();
        final int lg2 = s2.length();
        int i1 = 0, i2 = 0;
        while (i1<lg1 && i2<lg2) {
            final int c1 = codePointAt(s1, i1);
            final int c2 = codePointAt(s2, i2);
            if (c1 != c2 && !equalsIgnoreCase(c1, c2)) {
                return false;
            }
            i1 += charCount(c1);
            i2 += charCount(c2);
        }
        return i1 == i2;
    }","Returns  true if the two given texts are equal, ignoring case.",1,259
3071,"static String[] getPathNames(String path) {
    if (path == null || !path.startsWith(Path.SEPARATOR)) {
      throw new AssertionError(""Absolute path required"");
    }
    return path.split(Path.SEPARATOR);
  }",Splits an absolute path into an array of path components.,1,74
3072,"public static boolean isAllWhitespace(CharSequence self) {
        return isAllWhitespace(self.toString());
    }",True if a CharSequence only contains whitespace characters.,1,31
3073,"public static  IComplexNDArray fft(IComplexNDArray inputC,int numElements,int dimension) {
        return Nd4j.getFFt().fft(inputC,numElements,dimension);
    }","1d discrete fourier transform, note that this will throw an exception if the passed in input isn't a vector.",1,45
3074,"public boolean bind(CamelContext camelContext, Object target, String key, Object value) {
            org.apache.camel.util.ObjectHelper.notNull(camelContext, ""camelContext"");
            org.apache.camel.util.ObjectHelper.notNull(target, ""target"");
            org.apache.camel.util.ObjectHelper.notNull(key, ""key"");
            org.apache.camel.util.ObjectHelper.notNull(value, ""value"");

            Map<String, Object> properties = Collections.singletonMap(key, value);

            // do not remove parameters as this is a single property
            return doBindProperties(camelContext, target, properties, optionPrefix, ignoreCase, false, mandatory,
                    nesting, deepNesting, fluentBuilder, allowPrivateSetter, reference, placeholder);
        }",Binds the property to the target object.,1,194
3075,"public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {
		checkNotNull(jobId);
		return getFileInternal(jobId, key);
	}",Returns the path to a local copy of the file associated with the provided job ID and blob key.,1,44
3076,"public String getDescription() throws ProgramInvocationException {
		if (this.planAssembler instanceof ProgramDescription) {
			try {
				return ((ProgramDescription) this.planAssembler).getDescription();
			}
			catch (Throwable t) {
				throw new ProgramInvocationException(""Error while getting the program description"" + 
						(t.getMessage() == null ? ""."" : "": "" + t.getMessage()), t);
			}
		} else {
			return null;
		}
	}",Returns the description provided by the Program class.,1,141
3077,"public boolean isFileColumn(int modelIndex) {
        return tableFormat.getTableColumn(modelIndex) != null && tableFormat.getTableColumn(modelIndex)
                .getBibtexFields().contains(Globals.FILE_FIELD);
    }",method to check whether a MainTableColumn at the modelIndex refers to the file field (either as a specific file extension filter or not),1,55
3078,"public Set<Object> getIdentifiers() {
        return unmodifiableSetFromEconomicMap(identifierToSlotMap);
    }",Retrieve the list of all the identifiers associated with this frame descriptor.,1,25
3079,"public Permission applyFileUMask(Configuration conf) {
    mMode = mMode.applyUMask(Mode.getUMask(conf)).applyUMask(FILE_UMASK);
    return this;
  }",Applies the default umask for newly created files to the mode bits.,1,45
3080,"public String getValue() {
		return toString();
	}",Gets this PactString as a String.,1,21
3081,"private int get(int pos, int x, int level) {
        int n = readVarInt(data, pos);
        if (n < 2) {
            return 0;
        } else if (n > SPLIT_MANY) {
            int size = getSize(n);
            int offset = getOffset(n, size);
            return hash(x, level, offset, size);
        }
        pos++;
        int split;
        if (n == SPLIT_MANY) {
            split = readVarInt(data, pos);
            pos += getVarIntLength(data, pos);
        } else {
            split = n;
        }
        int h = hash(x, level, 0, split);
        int s;
        if (level == 0 && topPos != null) {
            s = topSize[h];
            pos = topPos[h];
        } else {
            int start = pos;
            for (int i = 0; i < h; i++) {
                pos = getNextPos(pos);
            }
            s = getSizeSum(start, pos);
        }
        return s + get(pos, x, level + 1);
    }","Get the hash value for the given key, starting at a certain position and level.",1,373
3082,"private QueryResult findQueryResultByQOM(QueryObjectModel queryModel) throws InvalidQueryException, RepositoryException {
        QueryResult queryResult = null;
        if (logger.isDebugEnabled()) {
            logger.debug(""Find node by qom [ "" + queryModel.getStatement() + "" ]"");
        }
        if (limit > 0) {
            queryModel.setLimit(limit);
        }
        if (offset > 0) {
            queryModel.setOffset(offset);
        }
        // execute query
        queryResult = queryModel.execute();
        if (logger.isDebugEnabled()) {
            logger.debug(""Query["" + queryModel.getStatement() + ""] --> found ["" + queryResult + ""] values."");
        }

        return queryResult;
    }",Executes the query of the provided QueryObjectModel.,1,197
3083,"public static FragmentHandler reassembledStringMessage1(final int streamId) throws Exception
    {
        return
            (buffer, offset, length, header) ->
            {
                final byte[] data = new byte[length];
                buffer.getBytes(offset, data);

                System.out.format(
                    ""message to stream %d from session %x term id %x term offset %d (%d@%d)%n"",
                    streamId, header.sessionId(), header.termId(), header.termOffset(), length, offset);

                if (length != 10000)
                {
                    System.out.format(
                        ""Received message was not assembled properly; received length was %d, but was expecting 10000%n"",
                        length);
                }
            };
    }","Return a reusable, parameterized  FragmentHandler that prints to stdout for the first stream(STREAM)",1,168
3084,"public static String format(InetAddress address, PortsRange portsRange) {
        Objects.requireNonNull(address);

        StringBuilder builder = new StringBuilder();

        int numberOfPorts = portsRange.ports().length;

        if (numberOfPorts != 0 && address instanceof Inet6Address) {
            builder.append(InetAddresses.toUriString(address));
        } else {
            builder.append(InetAddresses.toAddrString(address));
        }

        if (numberOfPorts != 0) {
            builder.append(':');
            if (numberOfPorts == 1) {
                builder.append(portsRange.getPortRangeString());
            } else {
                builder.append(""["").append(portsRange.getPortRangeString()).append(""]"");
            }
        }

        return builder.toString();
    }",Formats a network address and port range for display purposes.,1,228
3085,"public I18nMessage wasExpectingNull() {
    return createMessage(bundlePath, 14);
  }",Generates a  I18nMessage for a value that was expected to be  null but wasn't,1,25
3087,"public Deferred<Object> flush() throws HBaseException {
    final class HClientFlush implements Callback<Object, ArrayList<Object>> {
      public Object call(final ArrayList<Object> args) {
        return client.flush();
      }
      public String toString() {
        return ""flush HBase client"";
      }
    }

    return config.enable_compactions() && compactionq != null
      ? compactionq.flush().addCallback(new HClientFlush())
      : client.flush();
  }",Forces a flush of any un-committed in memory data including left over compactions.,1,147
3088,"public List<RepositoryInfo> getRepositoryInfo(Project p) {
        if (!cfg.isAllowed(p)) {
            return new ArrayList<>();
        }
        Map<Project, List<RepositoryInfo>> map = cfg.getEnv().getProjectRepositoriesMap();
        List<RepositoryInfo> info = map.get(p);
        return info == null ? new ArrayList<>() : new ArrayList<>(info);
    }",Get repository info list for particular project.,1,126
3089,"public Layer getSelectedMapLayer() {
        return selectedMapLayer;
    }",Getter for the selected  Layer.,1,19
3090,"private RepositoryNode initRepositoryNode(ISVNInfo entry, String id) {
    if (entry.getNodeKind().equals(SVNNodeKind.DIR)) {
      return createFolderNode(entry, id);
    }
    if (entry.getNodeKind().equals(SVNNodeKind.FILE)) {
      return createArtifactNode(entry, id);
    }
    return null;
    // TODO: other types ?
  }",creates and initializes a new  RepositoryNode for the given  ISVNInfo and the given id.,1,100
3091,"public float matches(MediaType o) {
		if (this.mediaType == o || mediaType.matches(o))
			return qValue;
		return 0;
	}",Matches the specified media type against this range and returns a q-value between 0 and 1 indicating the quality of the match.,1,52
3092,"public ExpectedKeyboardBuilder toUpperCase(final Locale locale) {
        final int rowCount = getRowCount();
        for (int row = 1; row <= rowCount; row++) {
            final ExpectedKey[] lowerCaseKeys = getRowAt(row);
            final ExpectedKey[] upperCaseKeys = new ExpectedKey[lowerCaseKeys.length];
            for (int columnIndex = 0; columnIndex < lowerCaseKeys.length; columnIndex++) {
                upperCaseKeys[columnIndex] = lowerCaseKeys[columnIndex].toUpperCase(locale);
            }
            setRowAt(row, upperCaseKeys);
        }
        return this;
    }",Convert all keys of this keyboard builder to upper case keys.,1,168
3093,"public List<APIConnection> convertConnectionList(List<? extends org.glyptodon.guacamole.net.auth.Connection> connections) 
            throws GuacamoleException {
        List<APIConnection> restConnections = new ArrayList<APIConnection>();
        
        for(org.glyptodon.guacamole.net.auth.Connection connection : connections) {
            restConnections.add(new APIConnection(connection));
        }
            
        return restConnections;
    }",Converts a list of org.glyptodon.guacamole.net.auth.APIConnection to,1,113
3094,"public String getTitleSuffix() {
        String showTime = (String) Settings.getDefault().getSetting(""showTime"");
        if (showTime.equals(""none"")) return """";
        boolean usableTask = (task != null) && !task.isIdleTask();
        String taskDescription = usableTask ? task.getDescription() + "" "" : """";
        String taskTime = usableTask ? Tools.getTimeShort(task.getDuration()) : """";
        String totalTime = Tools.getTimeShort(Plan.getDefault().getDay(new Date()).getTotalTime());
        if (showTime.equals(""both"")) {
            // Rachota 2.1 - Discussion [00:13 / 05:12]
            // Rachota 2.1 - [05:12]
            String suffix = ""- "" + taskDescription + ""["";
            if (usableTask) suffix = suffix + taskTime + "" / "";
            suffix = suffix + totalTime + ""]"";
            return suffix;
        }
        if (showTime.equals(""total"")) {
            // Rachota 2.1 - [05:12] Discussion
            // Rachota 2.1 - [05:12]
            String suffix = ""- ["" + totalTime + ""]"";
            if (usableTask) suffix = suffix + "" "" + taskDescription;
            return suffix;
        }
        // Rachota 2.1 - Discussion [00:13]
        // Rachota 2.1
        String suffix = """";
        if (usableTask) suffix = suffix + ""- "" + taskDescription + ""["" + taskTime + ""]"";
        return suffix;
    }",Get suffix to be appended to title of application depending on user preference.,1,409
3095,"public SOAPHeaderBlock addHeaderBlock(String localName, OMNamespace ns) throws OMException {
        SOAPHeaderBlock soapHeaderBlock = new SOAPHeaderBlockImpl(localName, ns);
        this.addChild(soapHeaderBlock);
        soapHeaderBlock.setComplete(true);
        return soapHeaderBlock;
    }",Creates a new SOAPHeaderBlock object initialized with the specified name and adds it to this SOAPHeader object.,1,67
3096,"protected Object deserialize(byte[] payload) throws SerializationException {
    return deserialize(false, null, null, payload);
  }","Deserializes the payload without including schema information for primitive types, maps, and arrays.",1,40
3097,"ResourceInstance createSettingResource(String settingName) {
    return createResource(Resource.Type.Setting,
        Collections.singletonMap(Resource.Type.Setting, settingName));
  }",Create a setting resource instance.,1,43
3098,"public Format setInputFormat(Format format)
    {
        VideoFormat videoFormat = (VideoFormat) format;

        if (videoFormat.getSize() == null)
            return null;    // must set a size.

        return super.setInputFormat(format);
    }",Sets the input format.,1,68
3099,"public Option<Void> apply(Object o) {
                return Pattern0.equals(o, value);
            }",Entry point of the match API.,1,33
3100,"public List getRules()
    {
        return this.rules;
    }",Retrieve a List of all Rules in this RuleSet.,1,22
3101,"private static boolean equals(ParameterizedType p, Type t) {
        if (t instanceof ParameterizedType) {
            final ParameterizedType other = (ParameterizedType) t;
            if (equals(p.getRawType(), other.getRawType()) && equals(p.getOwnerType(), other.getOwnerType())) {
                return equals(p.getActualTypeArguments(), other.getActualTypeArguments());
            }
        }
        return false;
    }",Learn whether  t equals  p.,1,126
3102,"protected final Future<Void> isConnected() {
        final Future<Boolean> messagingCheck = Optional.ofNullable(messaging)
                .map(client -> client.isConnected()).orElse(Future.succeededFuture(Boolean.FALSE));
        final Future<Boolean> registrationCheck = Optional.ofNullable(registration)
                .map(client -> client.isConnected()).orElse(Future.succeededFuture(Boolean.FALSE));
        return CompositeFuture.all(messagingCheck, registrationCheck).compose(ok -> {
            if (messagingCheck.result() && registrationCheck.result()) {
                return Future.succeededFuture();
            } else {
                return Future.failedFuture(new IllegalStateException(""not connected""));
            }
        });
    }",Checks if this adapter is connected to the services it depends on.,1,201
3103,"protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,
      ValueType type, IOContext context) throws IOException {
    switch (type) {
    case FIXED_INTS_16:
    case FIXED_INTS_32:
    case FIXED_INTS_64:
    case FIXED_INTS_8:
    case VAR_INTS:
      return Ints.getValues(dir, id, docCount, type, context);
    case FLOAT_32:
      return Floats.getValues(dir, id, docCount, context, type);
    case FLOAT_64:
      return Floats.getValues(dir, id, docCount, context, type);
    case BYTES_FIXED_STRAIGHT:
      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount, getComparator(), context);
    case BYTES_FIXED_DEREF:
      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount, getComparator(), context);
    case BYTES_FIXED_SORTED:
      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount, getComparator(), context);
    case BYTES_VAR_STRAIGHT:
      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount, getComparator(), context);
    case BYTES_VAR_DEREF:
      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount, getComparator(), context);
    case BYTES_VAR_SORTED:
      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount, getComparator(), context);
    default:
      throw new IllegalStateException(""unrecognized index values mode "" + type);
    }
  }",Loads a  IndexDocValues instance depending on the given  ValueType.,1,431
3104,"HsqlArrayList getUsers() {
        return uUser;
    }",This method is used to access the entire HsqlArrayList of User objects for this database.,1,17
3105,"public static FragmentHandler reassembledStringMessage2(final int streamId) throws Exception
    {
        return
            (buffer, offset, length, header) ->
            {
                final byte[] data = new byte[length];
                buffer.getBytes(offset, data);

                System.out.format(
                    ""message to stream %d from session %x term id %x term offset %d (%d@%d)%n"",
                    streamId, header.sessionId(), header.termId(), header.termOffset(), length, offset);

                if (length != 9000)
                {
                    System.out.format(
                        ""Received message was not assembled properly; received length was %d, but was expecting 9000%n"",
                        length);
                }
            };
    }","Return a reusable, parameterized  FragmentHandler that prints to stdout for the second stream (STREAM + 1)",1,168
3106,"public final DirectBuffer buffer()
    {
        return buffer;
    }",The  org.agrona.DirectBuffer containing the header.,1,22
3107,"boolean isManaged(File file) {
        if (file.isDirectory() && file.getName().equals(FILENAME_CVS)) return false;
        if (file.isFile()) file = file.getParentFile();
        for (; file != null; file = file.getParentFile()) {
            File repository = new File(file, FILENAME_CVS_REPOSITORY);
            if (repository.canRead()) return true;
        }
        return false;
    }",Tests whether a file or directory is managed by CVS.,1,136
3108,"public Set<AegisType> getDependencies() {
        return null;
    }",Return a set of AegisType dependencies.,1,22
3109,"public Object caseDifferenceSeries( DifferenceSeries object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Difference Series'.,1,25
3110,"public Entry getEntry(int index, String dataSetLabel) {
        return mCurrentData.getDataSetByLabel(dataSetLabel, true).getYVals().get(index);
    }",returns the Entry object at the given index from the DataSet with the given label.,1,44
3111,"public OptionalMethodInterception withImplementing(Collection<? extends TypeDescription> types) {
        return new OptionalMethodInterception(classFileVersion,
                namingStrategy,
                auxiliaryTypeNamingStrategy,
                implementationContextFactory,
                joinUniqueRaw(interfaceTypes, toList(isImplementable(types))),
                ignoredMethods,
                classVisitorWrapper,
                methodRegistry,
                modifiers,
                typeAttributeAppender,
                methodGraphCompiler,
                defaultFieldAttributeAppenderFactory,
                defaultMethodAttributeAppenderFactory,
                new LatentMethodMatcher.Resolved(isDeclaredBy(anyOf(new GenericTypeList.Explicit(toList(types)).asErasures()))));
    }",Defines all dynamic types that are created by this configuration to implement the given interfaces.,1,125
3112,"public static final String[] getKeywordValues(String key, ULocale locale, boolean commonlyUsed) {
        // Note: The parameter commonlyUsed is actually not used.
        // The switch is in the method signature for consistency
        // with other locale services.

        // Read available collation values from collation bundles
        String baseLoc = locale.getBaseName();
        LinkedList values = new LinkedList();

        UResourceBundle bundle = UResourceBundle.getBundleInstance(
                ICUResourceBundle.ICU_BASE_NAME + ""/coll"", baseLoc);

        String defcoll = null;
        while (bundle != null) {
            UResourceBundle collations = bundle.get(""collations"");
            Enumeration collEnum = collations.getKeys();
            while (collEnum.hasMoreElements()) {
                String collkey = (String)collEnum.nextElement();
                if (collkey.equals(""default"")) {
                    if (defcoll == null) {
                        // Keep the default
                        defcoll = collations.getString(""default"");
                    }
                } else if (!values.contains(collkey)) {
                    values.add(collkey);
                }
            }
            bundle = ((ICUResourceBundle)bundle).getParent();
        }
        // Reordering
        Iterator itr = values.iterator();
        String[] result = new String[values.size()];
        result[0] = defcoll;
        int idx = 1;
        while (itr.hasNext()) {
            String collKey = (String)itr.next();
            if (!collKey.equals(defcoll)) {
                result[idx++] = collKey;
            }
        }
        return result;
    }","Given a key and a locale, returns an array of string values in a preferred order that would make a difference.",1,422
3113,"public Vector<Project> getProjectStatus() throws RpcClientFailedException {
		try {
			sendRequest(""<get_project_status/>\n"");
			Vector<Project> projects = ProjectsParser.parse(receiveReply());
			return projects;
		}
		catch (IOException e) {
			throw new ConnectionFailedException(""Connection failed in getProjectStatus()"", e);
		}
	}",Performs   RPC towards BOINC client,1,95
3114,"static String[] getVersionComponents(final String version) {
    assert(version != null);
    String[] strComps = version.split(""[\\.-]"");
    assert(strComps.length > 0);

    String[] comps = new String[strComps.length];
    for (int i = 0; i < strComps.length; ++i) {
      if (StringUtils.isNumeric(strComps[i])) {
        comps[i] = strComps[i];
      } else if (StringUtils.isEmpty(strComps[i])) {
        comps[i] = String.valueOf(VERY_LARGE_NUMBER);
      } else {
        if(""SNAPSHOT"".equals(strComps[i])) {
          comps[i] = ""-1"";
        } else if(""beta"".equals(strComps[i])) {
          comps[i] = ""-2"";
        } else if(""alpha"".equals(strComps[i])) {
          comps[i] = ""-3"";
        } else {
          comps[i] = ""-4"";
        }
      }
    }
    return comps;
  }",Returns the version components as String objects,1,326
3115,"public ZonedDateTime getExpires() {
        return expires;
    }",Get the ZonedDateTime that this Token expires,1,19
3116,"public static DataType getMethodReturnType(Method method)
    {
        checkArgument(method != null, ""Can't introspect a null method"");
        return toDataType(ResolvableType.forMethodReturnType(method));
    }",Returns a  DataType representing the given  java.lang.reflect.Method's return type,1,50
3117,"public boolean captureScreen(byte output[])
    {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        return captureScreen(0, 0, dim.width, dim.height,
                output);
    }",Capture the full desktop screen using native grabber.,1,64
3118,"private static ImportedSpreadsheetWrapper parseCsv(final InputStream is, final Map<String, String> userMap) throws GbImportExportInvalidColumnException, IOException {

		// manually parse method so we can support arbitrary columns
		final CSVReader reader = new CSVReader(new InputStreamReader(is));
		String[] nextLine;
		int lineCount = 0;
		final List<ImportedRow> list = new ArrayList<ImportedRow>();
		Map<Integer, ImportedColumn> mapping = new LinkedHashMap<>();

		try {
			while ((nextLine = reader.readNext()) != null) {

				if (lineCount == 0) {
					// header row, capture it
					mapping = mapHeaderRow(nextLine);
				} else {
					// map the fields into the object
					final ImportedRow importedRow = mapLine(nextLine, mapping, userMap);
					if(importedRow != null) {
						list.add(importedRow);
					}
				}
				lineCount++;
			}
		} finally {
			try {
				reader.close();
			} catch (final IOException e) {
				e.printStackTrace();
			}
		}

		final ImportedSpreadsheetWrapper importedGradeWrapper = new ImportedSpreadsheetWrapper();
		importedGradeWrapper.setColumns(new ArrayList<>(mapping.values()));
		importedGradeWrapper.setRows(list);

		return importedGradeWrapper;
	}",Parse a CSV into a list of  ImportedRow objects.,1,357
3119,"@Override
	public String getDefault() {
		return null;
	}",Returns the default value of @odf.attribute chart:data-label-number.,1,22
3120,"String getMessage(String baseMsg) {
        StringBuffer msg = new StringBuffer();
        if (baseMsg != null) {
            msg.append(baseMsg);
        }

        Throwable nestedCause = ExceptionUtils.getCause(this.nestable);
        if (nestedCause != null) {
            String causeMsg = nestedCause.getMessage();
            if (causeMsg != null) {
                if (baseMsg != null) {
                    msg.append("": "");
                }
                msg.append(causeMsg);
            }

        }
        return (msg.length() > 0 ? msg.toString() : null);
    }",Returns the full message contained by the Nestable and any nested Throwables.,1,186
3121,"protected WorkflowElementType getComputedElementType() {
		if (recomputeTypeInfo) {
			computeTypeInfo();
		}
		return type;
	}",Returns the computed type of the current workflow element.,1,37
3122,"public static RPCBlockReadResponse decode(ByteBuf in) {
    long blockId = in.readLong();
    long offset = in.readLong();
    long length = in.readLong();
    short status = in.readShort();
    DataBuffer data = null;
    if (length > 0) {
      // TODO: look into accessing Netty ByteBuf directly, to avoid copying the data.
      assert(in.nioBufferCount() == 1);
      in.retain();
      data = new DataByteBuffer(in.nioBuffer(), (int)length);
      //ByteBuffer buffer = ByteBuffer.allocate((int) length);
      //in.readBytes(buffer);
      //data = new DataByteBuffer(buffer, (int) length);
    }
    return new RPCBlockReadResponse(blockId, offset, length, data, Status.fromShort(status));
  }",Decode the input  ByteBuf into a  RPCBlockReadResponse object and return it.,1,187
3123,"Result matchUsage(ValueNode node, MatchContext context) {
        Result result = matchUsage(node, context, true);
        if (result == Result.OK) {
            result = context.validate();
        }
        return result;
    }",Match any named nodes and ensure that the consumed nodes can be safely merged.,1,75
3124,"public String toSQL(final RoutingUnit routingUnit, final Map<String, String> logicAndActualTables) {
        if (sqlTokens.isEmpty()) {
            return logicSQL;
        }
        Collections.sort(sqlTokens);
        StringBuilder result = new StringBuilder();
        result.append(logicSQL.substring(0, sqlTokens.get(0).getStartIndex()));
        for (SQLToken each : sqlTokens) {
            result.append(getSQLTokenText(each, routingUnit, logicAndActualTables));
            result.append(getConjunctionText(each));
        }
        return result.toString();
    }",Build SQL.,1,160
3125,"public Enumeration<String> getValues(Buffer name)
    {
        final Field field = getField(name);
        if (field == null) 
        {
            List<String> empty=Collections.emptyList();
            return Collections.enumeration(empty);
        }

        return new Enumeration<String>()
        {
            Field f = field;

            public boolean hasMoreElements()
            {
                return f != null;
            }

            public String nextElement() throws NoSuchElementException
            {
                if (f == null) throw new NoSuchElementException();
                Field n = f;
                f = f._next;
                return n.getValue();
            }
        };
    }",Get multi headers,1,208
3126,"public List<Integer> getConnectionRanks(boolean forward) {
		List<Integer> connectionRanks = new LinkedList<Integer>();
		if (forward) {
			for (LayerConnection connection : incoming) {
				if (connection.getSourcePort() != null) {
					// the source is a node or a port
					connectionRanks.add(new Integer(connection.getSourceElement()
						.getPortRank(connection.getSourcePort(), forward)
						+ connection.getSourceElement().rank));
				}
				else {
					// the source is an edge
					connectionRanks.add(new Integer(connection.getSourceElement().rank));
				}
			}
		}
		else {
			for (LayerConnection connection : outgoing) {
				if (connection.getTargetPort() != null) {
					// the target is a node or a port
					connectionRanks.add(new Integer(connection.getTargetElement()
						.getPortRank(connection.getTargetPort(), forward)
						+ connection.getTargetElement().rank));
				}
				else {
					// the target is an edge
					connectionRanks.add(new Integer(connection.getTargetElement().rank));
				}
			}
		}
		return connectionRanks;
	}",Gets a list of combined element and port ranks for all incoming or for all outgoing connections.,1,297
3127,"public static Meter newMeter(Class<?> klass,
                                       String name,
                                       String eventType,
                                       TimeUnit unit) {
        return DEFAULT_REGISTRY.newMeter(klass, name, eventType, unit);
    }",Creates a new  com.yammer.metrics.core.Meter and registers it under the given class and name.,1,59
3128,"@Override
    default List<T> peek(Consumer<? super T> action) {
        Objects.requireNonNull(action, ""action is null"");
        if (!isEmpty()) {
            action.accept(head());
        }
        return this;
    }",Performs an action on the head element of this  List.,1,75
3129,"public CompareToBuilder append(long[] lhs, long[] rhs) {
        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null) {
            comparison = -1;
            return this;
        }
        if (rhs == null) {
            comparison = +1;
            return this;
        }
        if (lhs.length != rhs.length) {
            comparison = (lhs.length < rhs.length) ? -1 : +1;
            return this;
        }
        for (int i = 0; i < lhs.length && comparison == 0; i++) {
            append(lhs[i], rhs[i]);
        }
        return this;
    }","Deep comparison of a long array.  Check if arrays are same using == Check if either is null, a null array is less than a non-null Check array length, a shorter length array is less than a longer length array Check array contents element by element using  #append(long, long)",1,254
3130,"public Vector3D multiply(double a) {
    return new Vector3D(a * x, a * y, a * z);
  }",Multiply the instance by a scalar,1,45
3131,"public Set<TestIdentifier> getDescendants(TestIdentifier parent) {
		Set<TestIdentifier> result = new LinkedHashSet<>();
		Set<TestIdentifier> children = getChildren(parent);
		result.addAll(children);
		for (TestIdentifier child : children) {
			result.addAll(getDescendants(child));
		}
		return Collections.unmodifiableSet(result);
	}","Get all descendants of the supplied  TestIdentifier (i.e., all of its children and their children, recursively).",1,104
3132,"public final InspectorAction removeWatchpoint(MemoryRegion memoryRegion, String title) {
        return new RemoveWatchpointAction(memoryRegion, title);
    }",Creates an action that will remove a watchpoint.,1,37
3133,"public Class loadScriptByName(String scriptName, ClassLoader parentClassLoader)
            throws ResourceException, ScriptException {
        throw new DeprecationException(
                ""The method GroovyScriptEngine#loadScripByName(String,ClassLoader) ""+
                ""is no longer supported. Use GroovyScriptEngine#loadScripByName(String) instead.""
        );
    }","Get the class of the scriptName in question, so that you can instantiate",1,52
3134,"protected Control createButtonRemove(Composite compButton) {
		return UIControlsFactory.createButton(compButton, Messages.MasterDetailsComposite_buttonRemove);
	}",Creates the 'Remove' Control.,1,32
3135,"public static <T> List<T> getAt(List<T> self, Range range) {
        RangeInfo info = subListBorders(self.size(), range);
        List<T> answer = self.subList(info.from, info.to);  // sublist is always exclusive, but Ranges are not
        if (info.reverse) {
            answer = reverse(answer);
        }
        return answer;
    }",Support the range subscript operator for a List.,1,111
3136,"public Map<String, SAMLRealm> getRealmMap() {
        return realmMap;
    }",Get the map of realm->SAMLRealm for this token provider,1,25
3137,"private boolean isOptimisticLockingException(List<DbOperation> operationsToFlush, Throwable cause) {

    boolean isConstraintViolation = ExceptionUtil.checkForeignKeyConstraintViolation(cause);
    BatchExecutorException batchExecutorException = ExceptionUtil.findBatchExecutorException(cause);

    if (isConstraintViolation && batchExecutorException != null) {

      int failedOperationIndex = batchExecutorException.getSuccessfulBatchResults().size();
      if (failedOperationIndex < operationsToFlush.size()) {
        DbOperation failedOperation = operationsToFlush.get(failedOperationIndex);
        return isOptimisticLockingException(failedOperation);
      }
    }

    return false;
  }",An OptimisticLockingException check for batch processing,1,148
3138,"public int getInputLength(TRegexDFAExecutorLocals locals) {
        return lengthNode.execute(locals.getInput());
    }","The length of the  input argument given to  TRegexExecRootNode#execute(Object, int).",1,31
3139,"public static IntegrationFlowBuilder from(Publisher<Message<?>> publisher) {
		ReactiveChannel reactiveChannel = new ReactiveChannel();
		reactiveChannel.subscribeTo(publisher);
		return from((MessageChannel) reactiveChannel);
	}",Populate a  ReactiveChannel to the  IntegrationFlowBuilder chain and subscribe it to the provided  Publisher.,1,60
3140,"public static Flux<Long> interval(Duration delay, Duration period, Scheduler timer) {
		return onAssembly(new FluxInterval(delay.toMillis(), period.toMillis(), TimeUnit.MILLISECONDS, timer));
	}","Create a  Flux that emits long values starting with 0 and incrementing at specified time intervals, after an initial delay, on the specified  Scheduler.",1,64
3141,"static Future<Void> run(Executor executor, CheckedRunnable unit) {
        Objects.requireNonNull(executor, ""executor is null"");
        Objects.requireNonNull(unit, ""unit is null"");
        return of(executor, () -> {
            unit.run();
            return null;
        });
    }","Starts an asynchronous computation, backed by the given  Executor.",1,87
3142,"public static synchronized SyncSession getSession(SyncConfiguration syncConfiguration) {
        if (syncConfiguration == null) {
            throw new IllegalArgumentException(""A non-empty 'syncConfiguration' is required."");
        }

        if (SessionStore.hasSession(syncConfiguration)) {
            return SessionStore.getPublicSession(syncConfiguration);
        } else {
            ObjectServerSession internalSession = new ObjectServerSession(
                    syncConfiguration,
                    authServer,
                    syncConfiguration.getUser().getSyncUser(),
                    syncConfiguration.getSyncPolicy(),
                    syncConfiguration.getErrorHandler()
            );
            SyncSession publicSession = new SyncSession(internalSession);
            SessionStore.addSession(publicSession, internalSession);
            syncConfiguration.getUser().getSyncUser().addSession(publicSession);
            syncConfiguration.getSyncPolicy().onSessionCreated(internalSession);
            return publicSession;
        }
    }",Gets any cached  SyncSession for the given  SyncConfiguration or create a new one if no one exists.,1,200
3143,"public InstallData provide(Variables variables) throws IOException
    {
        AutomatedInstallData result = createInstallData(variables);
        populate(result);
        return result;
    }",Provides an  InstallData.,1,47
3144,"boolean isRecordingStats() {
    return (statsCounterSupplier != null);
  }",Enables the accumulation of  CacheStats during the operation of the cache.,1,24
3145,"public boolean isEventSourceAccepted(EntriesEvent event) {
        EntriesEventSource eventSource = event.getEntriesEventSource();
        return ((eventSource == EntriesEventSource.LOCAL) || (eventSource == EntriesEventSource.UNDO));
    }",Checks whether the  EntriesEventSource of an  EntriesEvent is crucial for this class.,1,61
3146,"public Program getCEQ() {
        return this;

    }",Transform Lustre program into simplified ceq.,1,20
3147,"public static Histogram newHistogram(Class<?> klass,
                                               String name,
                                               boolean biased) {
        return DEFAULT_REGISTRY.newHistogram(klass, name, biased);
    }",Creates a new  com.yammer.metrics.core.Histogram and registers it under the given class and name.,1,50
3148,"public List<MgmtSoftwareModuleAssigment> build() {
        final List<MgmtSoftwareModuleAssigment> softwareModuleAssigmentRestList = new ArrayList<>();
        for (final Long id : ids) {
            final MgmtSoftwareModuleAssigment softwareModuleAssigmentRest = new MgmtSoftwareModuleAssigment();
            softwareModuleAssigmentRest.setId(id);
            softwareModuleAssigmentRestList.add(softwareModuleAssigmentRest);
        }
        return softwareModuleAssigmentRestList;
    }",Builds a list with a single entry of  MgmtSoftwareModuleAssigment which can directly be used in the RESTful-API.,1,97
3149,"public AppResult getAnalysis() throws Exception {
    ElephantFetcher fetcher = ElephantContext.instance().getFetcherForApplicationType(getAppType());
    HadoopApplicationData data = fetcher.fetchData(this);

    // Run all heuristics over the fetched data
    List<HeuristicResult> analysisResults = new ArrayList<HeuristicResult>();
    if (data == null || data.isEmpty()) {
      // Example: a MR job has 0 mappers and 0 reducers
      logger.info(""No Data Received for analytic job: "" + getAppId());
      HeuristicResult.NO_DATA.addResultDetail(""No Data Received"", """");
      analysisResults.add(HeuristicResult.NO_DATA);
    } else {
      List<Heuristic> heuristics = ElephantContext.instance().getHeuristicsForApplicationType(getAppType());
      for (Heuristic heuristic : heuristics) {
        HeuristicResult result = heuristic.apply(data);
        if (result != null) {
          analysisResults.add(result);
        }
      }
    }

    JobType jobType = ElephantContext.instance().matchJobType(data);
    String jobTypeName = jobType == null ? UNKNOWN_JOB_TYPE : jobType.getName();

    // Load job information
    AppResult result = new AppResult();
    result.id = getAppId();
    result.trackingUrl = getTrackingUrl();
    result.queueName = getQueueName();
    result.username = getUser();
    result.startTime = new Date(getStartTime());
    result.finishTime = new Date(getFinishTime());
    result.name = getName();
    result.jobType = jobTypeName;

    // Truncate long names
    if (result.name.length() > 255) {
      result.name = result.name.substring(0, 252) + ""..."";
    }

    // Load App Heuristic information
    int jobScore = 0;
    result.yarnAppHeuristicResults = new ArrayList<AppHeuristicResult>();
    Severity worstSeverity = Severity.NONE;
    for (HeuristicResult heuristicResult : analysisResults) {
      AppHeuristicResult detail = new AppHeuristicResult();
      detail.heuristicClass = heuristicResult.getHeuristicClassName();
      detail.heuristicName = heuristicResult.getHeuristicName();
      detail.severity = heuristicResult.getSeverity();
      detail.score = heuristicResult.getScore();
      for (HeuristicResultDetails heuristicResultDetails : heuristicResult.getHeuristicResultDetails()) {
        AppHeuristicResultDetails heuristicDetail = new AppHeuristicResultDetails();
        heuristicDetail.yarnAppHeuristicResult = detail;
        heuristicDetail.name = heuristicResultDetails.getName();
        heuristicDetail.value = heuristicResultDetails.getValue();
        heuristicDetail.details = heuristicResultDetails.getDetails();
        detail.yarnAppHeuristicResultDetails.add(heuristicDetail);
      }
      result.yarnAppHeuristicResults.add(detail);
      worstSeverity = Severity.max(worstSeverity, detail.severity);
      jobScore += detail.score;
    }
    result.severity = worstSeverity;
    result.score = jobScore;

    // Retrieve Azkaban execution, flow and jobs URLs from jobData and store them into result.
    InfoExtractor.retrieveURLs(result, data);

    return result;
  }",Returns the analysed AppResult that could be directly serialized into DB.,1,775
3150,"public Iterable<DrawGradientElement> getGradients() {
        if (mGradients != null) {
            return mGradients.values();
        } else {
            return new ArrayList<DrawGradientElement>();
        }
    }",Returns an iterator for all DrawGradientElement elements.,1,63
3151,"public TaskIOMetricGroup getIOMetricGroup() {
		return ioMetrics;
	}",Returns the TaskIOMetricGroup for this task.,1,19
3152,"public static boolean isNotBlank(CharSequence cs) {
        return !StringUtils.isBlank(cs);
    }","Checks if a CharSequence is not empty (""""), not null and not whitespace only.",1,30
3153,"public List breadthFirst() {
        return breadthFirst(true);
    }",Provides a collection of all the nodes in the tree using a breadth-first preorder traversal.,1,22
3154,"public App remove(long appId) throws NoSuchAppException, SystemException {
		return remove(Long.valueOf(appId));
	}",Removes the app with the primary key from the database.,1,37
3155,"public synchronized BlockMeta getBlockMeta(long blockId) throws IOException {
    for (StorageTier tier : mTiers) {
      for (StorageDir dir : tier.getStorageDirs()) {
        if (dir.hasBlockMeta(blockId)) {
          return dir.getBlockMeta(blockId);
        }
      }
    }
    throw new IOException(""Failed to get BlockMeta: blockId "" + blockId + "" not found"");
  }",Gets the metadata of a block given its blockId or throws IOException.,1,113
3156,"public Meter newMeter(Class<?> klass,
                                String name,
                                String eventType,
                                TimeUnit unit) {
        return newMeter(klass, name, null, eventType, unit);
    }",Creates a new  Meter and registers it under the given class and name.,1,58
3157,"public ArrayList getChildBookmarks() {
        return childBookmarks;
    }",Get the child Bookmarks in an java.util.ArrayList.,1,19
3158,"public TimeoutHandler getTimeoutHandlers() {
        return timeoutHandler;
    }",Returns the timeout handler that has been registered for notification.,1,19
3159,"public SearchResult<WorkflowSummary> search(Integer start, Integer size, String sort, String freeText, String query) {
        Object[] params = new Object[]{""start"", start, ""size"", size, ""sort"", sort, ""freeText"", freeText, ""query"", query};
        return getForEntity(""workflow/search"", params, searchResultWfSummary);
    }",Search for workflows based on payload using pagination,1,112
3160,"public List<GroovyRowResult> rows(String sql, List<Object> params, int offset, int maxRows, Closure metaClosure)
        throws SQLException {
        
        AbstractQueryCommand command = createPreparedQueryCommand(sql, params);
        try {
            return asList(sql, command.execute(), offset, maxRows, metaClosure);
        }
        finally {
            command.closeResources();
        }
    }","Performs the given SQL query and return a ""page"" of rows from the result set.",1,114
3161,"public static RedisCacheConfiguration defaultCacheConfig() {
		return defaultCacheConfig(null);
	}",Default  RedisCacheConfiguration using the following:  key expiration eternal cache null values yes prefix cache keys yes default prefix [the actual cache name] key serializer  org.springframework.data.redis.serializer.StringRedisSerializer value serializer  org.springframework.data.redis.serializer.JdkSerializationRedisSerializer conversion service  DefaultFormattingConversionService with  #registerDefaultConverters(ConverterRegistry) default cache key converters,1,24
3162,"public Object getDiff() {
		return diff;
	}",Returns this ModelCompareInput's diff.,1,19
3163,"protected boolean isIncluded(TraversableSource source) {
        return (this.includeRE == null) ? true : this.includeRE.match(source.getName());
    }",Determines if a given source shall be visible.,1,50
3164,"public boolean isSubtype(JSType that) {
    return JSType.isSubtype(this, that);
  }",The All type is the greatest type (top) and is never a subtype of another except itself or the Unknown type or a named alias.,1,30
3165,"public static String append(final String url, final Map<String, ?> params) {
		if (params == null || params.isEmpty())
			return url;

		final StringBuilder result = new StringBuilder(url);

		// Add trailing slash if the base URL doesn't have any path segments.
		// The following test is checking for the last slash not being part of
		// the protocol to host separator '://'.
		int firstColon = url.indexOf(':');
		int lastSlash = url.lastIndexOf('/');
		if (firstColon + 2 == lastSlash)
			result.append('/');
		result.append('?');

		Entry<String, ?> entry;
		Object value;
		Iterator<?> iterator = params.entrySet().iterator();
		entry = (Entry<String, ?>) iterator.next();
		result.append(entry.getKey());
		result.append('=');
		value = entry.getValue();
		if (value != null)
			result.append(value);

		while (iterator.hasNext()) {
			result.append('&');
			entry = (Entry<String, ?>) iterator.next();
			result.append(entry.getKey());
			result.append('=');
			value = entry.getValue();
			if (value != null)
				result.append(value);
		}

		return result.toString();
	}",Append given query parameters to base URL,1,383
3166,"public KaleoCondition remove(long kaleoConditionId)
		throws NoSuchConditionException, SystemException {
		return remove(Long.valueOf(kaleoConditionId));
	}",Removes the kaleo condition with the primary key from the database.,1,38
3167,"public static AnyListQueryBuilder getSubjectListQueryBuilder() {
        return new AnyListQueryBuilder();
    }","Returns a new instance of  AnyListQueryBuilder, for assisted building of some service's  list() arguments.",1,25
3169,"public static Object sum(Iterator self, Object initialValue) {
        return sum(toList(self), initialValue, false);
    }",Sums the items from an Iterator.,1,41
3170,"public UserThread remove(long userThreadId)
		throws NoSuchUserThreadException, SystemException {
		return remove(Long.valueOf(userThreadId));
	}",Removes the user thread with the primary key from the database.,1,38
3171,"public static RequestManager with(Fragment fragment) {
        return RequestManagerRetriever.get(fragment);
    }",Begin a load with Glide that will be tied to the given  android.support.v4.app.Fragment's lifecycle and that uses the given  android.support.v4.app.Fragment's default options.,1,29
3172,"private File saveSchemasFromJar(File tmpBase, Version vespaVersion) throws IOException {
        Class<? extends SchemaValidators> schemaValidatorClass = this.getClass();
        ClassLoader classLoader = schemaValidatorClass.getClassLoader();
        Enumeration<URL> uris = classLoader.getResources(""schema"");
        if (uris == null) throw new IllegalArgumentException(""Could not find XML schemas "");

        File tmpDir = createTempDirectory(tmpBase.toPath(), ""vespa"").toFile();
        log.log(LogLevel.DEBUG, ""Will save all XML schemas for "" + vespaVersion + "" to "" + tmpDir);
        while (uris.hasMoreElements()) {
            URL u = uris.nextElement();
            log.log(LogLevel.DEBUG, ""uri for resource 'schema'="" + u.toString());
            // TODO: When is this the case? Remove?
            if (""jar"".equals(u.getProtocol())) {
                JarURLConnection jarConnection = (JarURLConnection) u.openConnection();
                JarFile jarFile = jarConnection.getJarFile();
                for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) {
                    JarEntry je = entries.nextElement();
                    if (je.getName().startsWith(""schema/"") && je.getName().endsWith("".rnc"")) {
                        writeContentsToFile(tmpDir, je.getName(), jarFile.getInputStream(je));
                    }
                }
                jarFile.close();
            } else if (""bundle"".equals(u.getProtocol())) {
                Bundle bundle = getBundle(schemaValidatorClass);
                log.log(LogLevel.DEBUG, ""bundle="" + bundle);
                // TODO: Hack to handle cases where bundle=null (which seems to always be the case with config-model-fat-amended.jar)
                if (bundle == null) {
                    String pathPrefix = getDefaults().underVespaHome(""share/vespa/schema/"");
                    File schemaPath = new File(pathPrefix + ""version/"" + vespaVersion.getMajor() + "".x/schema/"");
                    // Fallback to path without version if path with version does not exist
                    if (! schemaPath.exists())
                        schemaPath = new File(pathPrefix);
                    log.log(LogLevel.DEBUG, ""Using schemas found in "" + schemaPath);
                    copySchemas(schemaPath, tmpDir);
                } else {
                    log.log(LogLevel.DEBUG, String.format(""Saving schemas for model bundle %s:%s"", bundle.getSymbolicName(), bundle
                            .getVersion()));
                    for (Enumeration<URL> entries = bundle.findEntries(""schema"", ""*.rnc"", true);
                         entries.hasMoreElements(); ) {

                        URL url = entries.nextElement();
                        writeContentsToFile(tmpDir, url.getFile(), url.openStream());
                    }
                }
            // TODO: When is this the case? Remove?
            } else if (""file"".equals(u.getProtocol())) {
                File schemaPath = new File(u.getPath());
                copySchemas(schemaPath, tmpDir);
            }
        }
        return tmpDir;
    }",Look for the schema files in config-model.jar and saves them on temp dir.,1,768
3173,"public Folder remove(Folder folder) throws SystemException {
		return super.remove(folder);
	}",Removes the folder from the database.,1,31
3174,"public DateTime toDateTimeISO() {
        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));
    }","Get this object as a DateTime using ISOChronology, in the same zone.",1,36
3175,"public UI getRoot() {
        ClientConnector connector = this;
        while (connector != null) {
            if (connector instanceof UI) {
                return (UI) connector;
            }
            connector = connector.getParent();
        }
        return null;
    }",Finds a UI ancestor of this connector.,1,84
3176,"private Set<String> maybeDecorateInternalSourceTopics(final Set<String> sourceTopics) {
        return maybeDecorateInternalSourceTopics(sourceTopics.toArray(new String[sourceTopics.size()]));
    }",Returns the copartition groups.,1,47
3177,"public boolean isPlain() {
        return !(isFinal() || isVolatile() || isTransient());
    }","Returns  true if this manifestation represents a field that is neither  final,  transient or  volatile.",1,38
3178,"public Collection<RosterEntry> getUnfiledEntries() {
        synchronized (unfiledEntries) {
            return Collections.unmodifiableList(new ArrayList<RosterEntry>(unfiledEntries));
        }
    }",Returns an unmodifiable collection for the unfiled roster entries.,1,47
3179,"public static String getTimeString(final LocalTime self) {
        return self.format(DateTimeFormatter.ISO_LOCAL_TIME);
    }",Formats this time with the  java.time.format.DateTimeFormatter#ISO_LOCAL_TIME formatter.,1,33
3180,"public static RunSelector getSelectorFromXml(String xml) {
        return (RunSelector)XSTREAM.fromXML(xml);
    }",Convert xml fragment into a RunSelector object.,1,32
3181,"protected boolean isUpToDate(File jarFile, File signedjarFile) {
        if (null == jarFile && !jarFile.exists()) {
            //these are pathological case, but retained in case somebody
            //subclassed us.
            return false;
        }

        //we normally compare destination with source
        File destFile = signedjarFile;
        if (destFile == null) {
            //but if no dest is specified, compare source to source
            destFile = jarFile;
        }

        //if, by any means, the destfile and source match,
        if (jarFile.equals(destFile)) {
            if (lazy) {
                //we check the presence of signatures on lazy signing
                return isSigned(jarFile);
            }
            //unsigned or non-lazy self signings are always false
            return false;
        }

        //if they are different, the timestamps are used
        return FILE_UTILS.isUpToDate(jarFile, destFile);
    }",Compare a jar file with its corresponding signed jar.,1,174
3182,"public InputStream retrieveJSON(String methType, URL url, Map<String, Object> params)
            throws IOException {

        HttpClient client = new HttpClient();

        // Instanties the method based on the methType parameter
        HttpMethodBase meth;
        if (methType.equals(""GET"")) {
            meth = new GetMethod();
        } else {
            meth = new PostMethod();
        }

        // Sets the URI, request parameters and request body (depending on method
        // type)
        URI uri = new URI(url.toString(), false);
        NameValuePair[] kvps = new NameValuePair[params.size()];
        int i = 0;
        for (Object entry : params.entrySet().toArray()) {
            kvps[i++] =
                    new NameValuePair(
                            ((Map.Entry) entry).getKey().toString(),
                            ((Map.Entry) entry).getValue().toString());
        }

        if (methType.equals(""GET"")) {
            meth.setQueryString(kvps);
            uri.setQuery(meth.getQueryString());
            this.LOGGER.log(
                    Level.FINER,
                    ""About to query GET "" + url.toString() + ""?"" + meth.getQueryString());
        } else {
            ((PostMethod) (meth)).setContentChunked(true);
            ((PostMethod) (meth)).setRequestBody(kvps);
            this.LOGGER.log(
                    Level.FINER,
                    ""About to query POST "" + url.toString() + "" with body: "" + params.toString());
        }

        meth.setURI(uri);

        // Adds authorization if login/password is set
        if (this.user != null && this.password != null) {
            meth.addRequestHeader(
                    ""Authentication"", (new UsernamePasswordCredentials(user, password)).toString());
        }

        // Re-tries the request if necessary
        while (true) {

            // Executes the request (a POST, since the URL may get too long)
            int status = client.executeMethod(meth);

            // If HTTP error, throws an exception
            if (status != HttpStatus.SC_OK) {
                throw new IOException(
                        ""HTTP Status: ""
                                + status
                                + "" for URL: ""
                                + uri
                                + "" response: ""
                                + meth.getResponseBodyAsString());
            }

            // Retrieve the wait period is returned by the server
            int wait = 0;
            Header header = meth.getResponseHeader(""Retry-After"");
            if (header != null) {
                wait = Integer.valueOf(header.getValue());
            }

            // Exists if no retry is necessary
            if (wait == 0) {
                break;
            }

            try {
                Thread.sleep(wait * 1000);
            } catch (InterruptedException e) {
                LOGGER.log(Level.SEVERE, ""InterruptedException: "" + e.getMessage());
                throw new IOException(e);
            }
        }

        // Extracts an returns the response
        return meth.getResponseBodyAsStream();
    }",Helper method returning a JSON String out of a resource belongining to a ArcGIS ReST API instance (via a GET).,1,779
3183,"public Predicate<? super I>[] getPredicates() {
        return FunctorUtils.<I>copy(iPredicates);
    }",Gets the predicates.,1,36
3184,"public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, StrategiesSupplier strategies) {
		Assert.notNull(routerFunction, ""'routerFunction' must not be null"");
		Assert.notNull(strategies, ""'strategies' must not be null"");

		return exchange -> {
			Request request = new DefaultRequest(exchange, strategies);
			addAttributes(exchange, request);

			Optional<? extends HandlerFunction<?>> route = routerFunction.route(request);
			return Mono.justOrEmpty(route);
		};
	}","Converts the given plain RouterFunction routing function into a  HandlerMapping, using the given strategies.",1,134
3185,"Set<File> checkDirs() {
    synchronized(checkDirsMutex) {
      Set<File> failedVols = null;
      
      // Make a copy of volumes for performing modification 
      final List<FsVolumeImpl> volumeList = getVolumes();

      for(Iterator<FsVolumeImpl> i = volumeList.iterator(); i.hasNext(); ) {
        final FsVolumeImpl fsv = i.next();
        try (FsVolumeReference ref = fsv.obtainReference()) {
          fsv.checkDirs();
        } catch (DiskErrorException e) {
          FsDatasetImpl.LOG.warn(""Removing failed volume "" + fsv + "": "", e);
          if (failedVols == null) {
            failedVols = new HashSet<>(1);
          }
          failedVols.add(new File(fsv.getBasePath()).getAbsoluteFile());
          addVolumeFailureInfo(fsv);
          removeVolume(fsv);
        } catch (ClosedChannelException e) {
          FsDatasetImpl.LOG.debug(""Caught exception when obtaining "" +
            ""reference count on closed volume"", e);
        } catch (IOException e) {
          FsDatasetImpl.LOG.error(""Unexpected IOException"", e);
        }
      }
      
      if (failedVols != null && failedVols.size() > 0) {
        FsDatasetImpl.LOG.warn(""Completed checkDirs. Found "" + failedVols.size()
            + "" failure volumes."");
      }

      return failedVols;
    }
  }",Calls  FsVolumeImpl#checkDirs() on each volume.,1,379
3186,"public Param<?> getParam(Class clazz, String key) {
        Map<String, Param<?>> classParams = this.params.get(clazz.getName());
        if (classParams != null) {
            return classParams.get(key);
        }
        return null;
    }",Gets the value associated with given class and parameter,1,88
3187,"public default Set<String> keys() {
        final Set<String> keys = new HashSet<>();
        this.iterators().propertyIterator().forEachRemaining(property -> keys.add(property.key()));
        return keys;
    }",Get the keys from non-hidden properties.,1,76
3188,"@Function(attributes = Attribute.NOT_ENUMERABLE)
    public static Object __noSuchProperty__(final Object self, final Object name) {
        if (! (self instanceof NativeJavaImporter)) {
            throw typeError(""not.a.java.importer"", ScriptRuntime.safeToString(self));
        }
        return ((NativeJavaImporter)self).createProperty(JSType.toString(name));
    }","""No such property"" handler.",1,99
3189,"public Ava getAva( String type )
    {
        // First, let's normalize the type
        String normalizedType = Strings.lowerCaseAscii(Strings.trim(type));

        switch ( nbAvas )
        {
            case 0:
                return null;

            case 1:
                if ( ava.getNormType().equals( normalizedType ) )
                {
                    return ava;
                }

                return null;

            default:
                if ( avaTypes.containsKey( normalizedType ) )
                {
                    @SuppressWarnings(""unchecked"")
                    Collection<Ava> atavList = ( Collection<Ava> ) avaTypes.get( normalizedType );
                    return atavList.iterator().next();
                }

                return null;
        }
    }",Get the Ava which type is given as an argument.,1,200
3190,"public static SnapshotDescription readSnapshotInfo(FileSystem fs, Path snapshotDir)
      throws CorruptedSnapshotException {
    Path snapshotInfo = new Path(snapshotDir, SNAPSHOTINFO_FILE);
    try {
      FSDataInputStream in = null;
      try {
        in = fs.open(snapshotInfo);
        SnapshotDescription desc = SnapshotDescription.parseFrom(in);
        return desc;
      } finally {
        if (in != null) in.close();
      }
    } catch (IOException e) {
      throw new CorruptedSnapshotException(""Couldn't read snapshot info from:"" + snapshotInfo, e);
    }
  }",Read in the  org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription stored for the snapshot in the passed directory,1,165
3191,"public String format (String pattern, Object... args) {
		if (messageFormat != null) {
			messageFormat.applyPattern(replaceEscapeChars(pattern));
			return messageFormat.format(args);
		}
		return simpleFormat(pattern, args);
	}",Formats the given  pattern replacing its placeholders with the actual arguments specified by  args.,1,77
3192,"@SuppressWarnings(""serial"")
	protected IFeedbackPartFactory<VR> getFeedbackPartFactory() {
		IViewer<VR> viewer = getHost().getRoot().getViewer();
		return viewer.getAdapter(
				AdapterKey.get(new TypeToken<IFeedbackPartFactory<VR>>() {
				}.where(new TypeParameter<VR>() {
				}, Types.<VR> argumentOf(viewer.getClass())),
						SELECTION_FEEDBACK_PART_FACTORY));
	}",Returns the  IFeedbackPartFactory for selection feedback.,1,117
3193,"public String getStyleName() {
    String fullClassName = DOM.getElementProperty(element, ""className"");

    // The base style name is always the first token of the full CSS class
    // name. There can be no leading whitespace in the class name, so it's not
    // necessary to trim() it.
    int spaceIdx = fullClassName.indexOf(' ');
    if (spaceIdx >= 0) {
      return fullClassName.substring(0, spaceIdx);
    }
    return fullClassName;
  }",Gets the primary style name associated with the object.,1,95
3194,"public HttpBasicConfigurer<B> realmName(String realmName) throws Exception {
        basicAuthEntryPoint.setRealmName(realmName);
        basicAuthEntryPoint.afterPropertiesSet();
        return this;
    }","Allows easily changing the realm, but leaving the remaining defaults in place.",1,46
3195,"public static boolean checkModelParams(ModelNode node,Properties params){
    	
    	if (node==null) return false;
    	String str, par;
        Enumeration e = params.propertyNames();

        while (e.hasMoreElements()) {
        	str=(String)e.nextElement();
        	par=params.getProperty(str);
        	if (node.get(str)==null) return false;
        	else{
        		if (!node.get(str).asString().equals(par)) return false;
        	}
        }
        return true;
    }",Checks if result of re-parsing contains certain parameters,1,162
3196,"public int getPriority(final Class<?> contract) {
        if (contracts.containsKey(contract)) {
            final int priority = contracts.get(contract);
            return (priority != NO_PRIORITY) ? priority : defaultPriority;
        }
        return defaultPriority;
    }","Get the provider contract priority, if set, default component provider, if not set.",1,82
3197,"public InputSource resolveEntity( String publicId, String systemId ) throws SAXException, IOException {
        // avoid dtd files
        if (systemId != null && systemId.endsWith(""dtd"")) {
            return new InputSource(new StringReader(""""));
        }
        if (entityResolver != null) {
            return entityResolver.resolveEntity(publicId, systemId);
        } else {
            return super.resolveEntity(publicId, systemId);
        }
    }",Delegate to  #entityResolver if available.,1,131
3198,"public String getDriverClassName() {
		return determineDriverClassName();
	}",Determine the driver to use based on this configuration and the environment.,1,21
3199,"public ConfigurationPropertyName from(String name, char separator) {
		Assert.notNull(name, ""Name must not be null"");
		ConfigurationPropertyName result = this.nameCache.get(name);
		if (result != null) {
			return result;
		}
		List<Element> elements = new ArrayList<>();
		StringBuilder value = new StringBuilder(name.length());
		boolean indexed = false;
		for (int i = 0; i < name.length(); i++) {
			char ch = name.charAt(i);
			if (!indexed) {
				if (ch == '[') {
					addElement(elements, value);
					value.append(ch);
					indexed = true;
				}
				else if (ch == separator) {
					addElement(elements, value);
				}
				else {
					value.append(ch);
				}
			}
			else {
				value.append(ch);
				if (ch == ']') {
					addElement(elements, value);
					indexed = false;
				}
			}
		}
		addElement(elements, value);
		result = from(elements.stream().filter(Objects::nonNull)
				.filter((e) -> !e.getValue(Form.UNIFORM).isEmpty()).iterator());
		this.nameCache.put(name, result);
		return result;
	}",Build using the specified name split up into elements using a known separator.,1,410
3200,"public Entry remove(Entry entry) throws SystemException {
		return super.remove(entry);
	}",Removes the entry from the database.,1,31
3201,"public String getString()
    {
        return upValue != null ? upValue : """";
    }",Get the user provided value as a String.,1,34
3202,"public static boolean isFileContentBinary(File file) {
        FileObject fo = FileUtil.toFileObject(file);
        if (fo == null) return false;
        try {
            DataObject dao = DataObject.find(fo);
            return dao.getCookie(EditorCookie.class) == null;
        } catch (DataObjectNotFoundException e) {
            // not found, continue
        }
            return false;
        }",Checks if the file is binary.,1,113
3203,"public <T> boolean isSatisfiedBy(Contract contract) {
        return contract.isSatisfiedBy(this);
    }",Test whether the Resource in its current state satisfies the provided interface.,1,31
3204,"protected DatanodeDescriptor chooseRandom(
                                          String nodes,
                                          HashMap<Node, Node> excludedNodes,
                                          long blocksize,
                                          int maxNodesPerRack,
                                          List<DatanodeDescriptor> results,
                                          boolean avoidStaleNodes) 
    throws NotEnoughReplicasException {
    int numOfAvailableNodes =
      clusterMap.countNumOfAvailableNodes(nodes, excludedNodes.keySet());
    StringBuilder builder = null;
    if (LOG.isDebugEnabled()) {
      builder = threadLocalBuilder.get();
      builder.setLength(0);
      builder.append(""["");
    }
    boolean badTarget = false;
    while(numOfAvailableNodes > 0) {
      DatanodeDescriptor chosenNode = 
        (DatanodeDescriptor)(clusterMap.chooseRandom(nodes));

      Node oldNode = excludedNodes.put(chosenNode, chosenNode);
      if (oldNode == null) { // chosenNode was not in the excluded list
        numOfAvailableNodes--;
        if (isGoodTarget(chosenNode, blocksize, 
                maxNodesPerRack, results, avoidStaleNodes)) {
          results.add(chosenNode);
          // add chosenNode and related nodes to excludedNode
          addToExcludedNodes(chosenNode, excludedNodes);
          adjustExcludedNodes(excludedNodes, chosenNode);
          return chosenNode;
        } else {
          badTarget = true;
        }
      }
    }

    String detail = enableDebugLogging;
    if (LOG.isDebugEnabled()) {
      if (badTarget && builder != null) {
        detail = builder.append(""]"").toString();
        builder.setLength(0);
      } else detail = """";
    }
    throw new NotEnoughReplicasException(detail);
  }",/ Randomly choose one target from nodes.,1,415
3205,"public static double getUTCTimestampWithMilliseconds(long timestamp) {

        return Double.parseDouble(String.format(""%d.%d"", timestamp/1000, timestamp%1000));
    }",Get the UNIX epoch with milliseconds of the provided millisecond timestamp,1,47
3206,"public synchronized long lock(long storageDirId, long blockId, int blockLockId) {
    if (!mLockedBlockIds.containsKey(blockId)) {
      long storageDirIdLocked = mWorkerStorage.lockBlock(mUserId, storageDirId, blockId);
      if (!StorageDirId.isUnknown(storageDirIdLocked)) {
        mLockedBlockIds.put(blockId, new HashSet<Integer>());
        mLockedBlockIds.get(blockId).add(blockLockId);
        mLockedBlockIdToStorageDirId.put(blockId, storageDirIdLocked);
      }
      return storageDirIdLocked;
    } else {
      mLockedBlockIds.get(blockId).add(blockLockId);
      return mLockedBlockIdToStorageDirId.get(blockId);
    }
  }",Lock a block with lock id.,1,168
3207,"public I18nMessage lowerThanMinSize(Object value, int minSize, int actualSize) {
    return createMessage(bundlePath, 7, value, minSize, actualSize);
  }",Generates a  I18nMessage for a value that was expected to have a minimum size but didn't,1,47
3208,"public static SimpleFeatureType retype(SimpleFeatureType original, Query query) {
        CoordinateReferenceSystem crs = null;
        if (query.getCoordinateSystem() != null) {
            crs = query.getCoordinateSystem();
        }
        if (query.getCoordinateSystemReproject() != null) {
            crs = query.getCoordinateSystemReproject();
        }
        return retype(original, query.getPropertyNames(), crs);
    }",Create a SimpleFeatureType with the same content; just updating the geometry attribute to match the provided coordinate reference system.,1,118
3209,"public boolean sendMessageToEndPoint(final String url, final String message, final boolean async) {
        return sendMessageToEndPoint(async, new CallableMessageSender(url, message));
    }",Uses an instance of  CallableMessageSender by default as the executed task to send the message to the endpoint.,1,52
3210,"public DateTime addTo(ReadableInstant instant, int scalar) {
        long instantMillis = DateTimeUtils.getInstantMillis(instant);
        Chronology chrono = DateTimeUtils.getInstantChronology(instant, null);
        return new DateTime(addTo(instantMillis, scalar, chrono), chrono);
    }","Adds this period to the given instant using the chronology of the specified instant (if present), returning a new DateTime.",1,77
3211,"public static String expandString(String expression, Map<String, ? extends Object> context, Locale locale) {
        return expandString(expression, context, null, locale);
    }",Evaluate an expression and return the result as a String.,1,56
3212,"public int getBorrowed() {
        return -1;
    }","Unsupported, returns a negative value.",1,20
3213,"public LessonTracker getLessonTracker(WebSession s, AbstractLesson lesson) {
        UserTracker userTracker = UserTracker.instance();
        return userTracker.getLessonTracker(s, lesson);
    }",getLessonTracker.,1,49
3214,"public DataStreamSource<String> readTextFile(String filePath, String charsetName) {
		Preconditions.checkNotNull(filePath, ""The file path may not be null."");

		TextInputFormat format = new TextInputFormat(new Path(filePath));
		TypeInformation<String> typeInfo = BasicTypeInfo.STRING_TYPE_INFO;
		format.setCharsetName(charsetName);

		return readFile(format, filePath, FileProcessingMode.PROCESS_ONCE, -1,
			FilePathFilter.createDefaultFilter(), typeInfo);
	}",Reads the given file line-by-line and creates a data stream that contains a string with the contents of each such line.,1,116
3215,"private Direction canLocalHaveHorizontalAnnotations(ModifiersTree modifiers) {
    int parameterlessAnnotations = 0;
    for (AnnotationTree annotation : modifiers.getAnnotations()) {
      if (annotation.getArguments().isEmpty()) {
        parameterlessAnnotations++;
      }
    }
    return parameterlessAnnotations <= 1
            && parameterlessAnnotations == modifiers.getAnnotations().size()
        ? Direction.HORIZONTAL
        : Direction.VERTICAL;
  }","Can a local with a set of modifiers be declared with horizontal annotations? This is currently true if there is at most one parameterless annotation, and no others.",1,118
3216,"public String getDescription() {
        try {
            Class c = this.getClass();
            Description d = (Description) c.getAnnotation(Description.class);
            if(d==null) return null;
            return d.value();
        } catch (Exception e) {
            return null;
        }
    }",Returns Description value of this filter as annotated by Description annotation.,1,99
3217,"@NonNull
    @Override
    public Observable<PutResults<ContentValues>> createObservable() {
        throwExceptionIfRxJavaIsNotAvailable(""createObservable()"");

        return Observable
                .create(OnSubscribeExecuteAsBlocking.newInstance(this))
                .subscribeOn(Schedulers.io());
    }",Creates  Observable which will perform Put Operation and send result to observer.,1,64
3218,"boolean isLocaleAvailable(Parameters.Locale locale)
    {
        try
        {
            if (getLocalDictForLocale(locale).exists())
            {
                return true;
            }
            else
            {
                @SuppressWarnings (""unchecked"")
                Enumeration<URL> dictUrls
                    = SpellCheckActivator.bundleContext.getBundle()
                        .findEntries(DEFAULT_DICT_PATH,
                                    ""*.zip"",
                                    false);

                if (dictUrls != null)
                {
                    while (dictUrls.hasMoreElements())
                    {
                        URL dictUrl = dictUrls.nextElement();
                        if (new File(dictUrl.getFile()).getName().equals(
                            new File(locale.getDictUrl().getFile()).getName()))
                        {
                            return true;
                        }
                    }
                }
            }

            return false;
        }
        catch (Exception exc)
        {
            return false;
        }
    }",Determines if locale's dictionary is locally available or a system.,1,241
3219,"@Override
    public double nextNormalizedDouble() {
        return sampler.sample();
    }",Generates a random scalar with zero mean and unit standard deviation.,1,26
3220,"public Address alloc(int bytes, int align, int offset, int allocator, int site)
      throws InlinePragma {
    if (allocator == RC.ALLOC_DEFAULT) {
      // The default allocator for full heap RC is ALLOC_RC
      allocator = RC.ALLOC_RC;
    }
    return super.alloc(bytes, align, offset, allocator, site);
  }",Allocate memory for an object.,1,96
3221,"public String getEncoding()
    {
        return encoding;
    }",Returns the encoding.,1,20
3222,"static OptionType getInstanceForFIXValue(int inValue) {
        OptionType s = mFIXValueMap.get(inValue);
        return s == null
                ? Unknown
                : s;
    }",Gets the OptionType instance.,1,52
3223,"public static HttpServletRequest closeShield(HttpServletRequest request, boolean retry) {
    if (!retry) {
      return new HttpServletRequestWrapper(request) {

        @Override
        public ServletInputStream getInputStream() throws IOException {

          return new ServletInputStreamWrapper(super.getInputStream()) {
            @Override
            public void close() {
              // even though we skip closes, we let local tests know not to close so that a full understanding can take
              // place
              assert Thread.currentThread().getStackTrace()[2].getClassName().matches(
                  ""org\\.apache\\.(?:solr|lucene).*"") ? false : true : ""Attempted close of request input stream - never do this, you will spoil connection reuse and possibly disrupt a client"";
              this.stream = ClosedServletInputStream.CLOSED_SERVLET_INPUT_STREAM;
            }
          };

        }
      };
    } else {
      return request;
    }
  }",Wrap the request's input stream with a close shield.,1,192
3224,"public Duration getMinInclusive() {
        return _minInclusive;
    } //-- getMinInclusive",Returns the minimum inclusive value that this XSDuration can hold.,1,21
3225,"@SafeVarargs
	public static Parser.Quantifier _0_1(Supplier<Parser>... parsers) {
		return quantifier(parsers, Parser.Quantifier.Bounds.ZERO_TO_ONE);
	}","Shortcut for  new Parser.Quantifier(new Parser.Sequence(parsers), Parser.Quantifier.Bounds.ZERO_TO_ONE) .",1,47
3226,"ReadPreference getCommandReadPreference(DBObject command, ReadPreference requestedPreference){
        String comString = command.keySet().iterator().next();

        if (comString.equals(""getnonce"") || comString.equals(""authenticate"")) {
            return ReadPreference.primaryPreferred();
        }

        boolean primaryRequired;

        // explicitly check mapreduce commands are inline
        if(comString.equals(""mapreduce"")) {
            Object out = command.get(""out"");
            if (out instanceof BSONObject ){
                BSONObject outMap = (BSONObject) out;
                primaryRequired = outMap.get(""inline"") == null;
            }
            else
                primaryRequired = true;
        } else {
           primaryRequired =  !_obedientCommands.contains(comString);
        }

        if (primaryRequired) {
            return ReadPreference.primary();
        } else if (requestedPreference == null) {
            return ReadPreference.primary();
        } else {
            return requestedPreference;
        }
    }",Determines the read preference that should be used for the given command.,1,274
3227,"public Set<Pair<XAddress,XValue>> search(String key) {
		// IMPROVE rather simple search algorithm at the moment...
		
		/*
		 * the index uses lower case strings only, so we need to transform the
		 * given key appropriately
		 */
		String indexKey = key.toLowerCase();
		HashSet<Pair<XAddress,XValue>> set = new HashSet<Pair<XAddress,XValue>>();
		
		EqualsConstraint<String> constraint = new EqualsConstraint<String>(indexKey);
		Iterator<ValueIndexEntry> iterator = this.index.constraintIterator(constraint);
		
		while(iterator.hasNext()) {
			ValueIndexEntry entry = iterator.next();
			Pair<XAddress,XValue> pair = new Pair<XAddress,XValue>(entry.getAddress(),
			        entry.getValue());
			
			set.add(pair);
		}
		
		return set;
	}",Returns a set of pairs of  XAddress XAddresses and  XValue,1,206
3228,"private static ByteBuffer positionAtRow(RowState rowState, int rowNum,
                                          PageChannel pageChannel,
                                          JetFormat format)
    throws IOException
  {

    while(true) {
      ByteBuffer rowBuffer = rowState.getFinalPage();
    
      // note, we don't use findRowStart here cause we need the unmasked value
      short rowStart = rowBuffer.getShort(getRowStartOffset(rowNum, format));
      short rowEnd = findRowEnd(rowBuffer, rowNum, format);

      // note, if we are reading from an overflow page, the row will be marked
      // as deleted on that page, so ignore the deletedRow flag on overflow
      // pages
      boolean deletedRow =
        (((rowStart & DELETED_ROW_MASK) != 0) && !rowState.isOverflow());
      boolean overflowRow = ((rowStart & OVERFLOW_ROW_MASK) != 0);

      if(deletedRow ^ overflowRow) {
        if(LOG.isDebugEnabled()) {
          LOG.debug(""Row flags: deletedRow "" + deletedRow + "", overflowRow "" +
                    overflowRow);
        }
      }

      // now, strip flags from rowStart offset
      rowStart = (short)(rowStart & OFFSET_MASK);

      if (deletedRow) {
      
        // Deleted row.  Skip.
        if(LOG.isDebugEnabled()) {
          LOG.debug(""Skipping deleted row"");
        }
        rowState.setDeleted(true);
        return null;
      
      } else if (overflowRow) {

        if((rowEnd - rowStart) < 4) {
          throw new IOException(""invalid overflow row info"");
        }
      
        // Overflow page.  the ""row"" data in the current page points to another
        // page/row
        int overflowRowNum = rowBuffer.get(rowStart);
        int overflowPageNum = ByteUtil.get3ByteInt(rowBuffer, rowStart + 1);
        rowState.setOverflowPage(pageChannel, overflowPageNum);

        // reset row number and move to overflow page
        rowNum = overflowRowNum;
      
      } else {

        return PageChannel.narrowBuffer(rowBuffer, rowStart, rowEnd);
      }
    }    
  }","Sets the position and limit in a new buffer using the given rowState according to the given row number and row end, following overflow row pointers as necessary.",1,465
3229,"public static <S extends Publisher<T>, T> BodyInserter<S> fromPublisher(S publisher,
			Class<T> elementClass) {

		Assert.notNull(publisher, ""'publisher' must not be null"");
		Assert.notNull(elementClass, ""'elementClass' must not be null"");
		return fromPublisher(publisher, ResolvableType.forClass(elementClass));
	}",Return a  BodyInserter that writes the given  Publisher.,1,90
3230,"public Counter newCounter(MetricName metricName) {
        return getOrAdd(metricName, new Counter());
    }",Creates a new  Counter and registers it under the given metric name.,1,32
3231,"public Subscription subscribe() {
        return protectivelyWrapAndSubscribe(new Observer<T>() {

            @Override
            public void onCompleted() {
                // do nothing
            }

            @Override
            public void onError(Throwable e) {
                handleError(e);
                throw new OnErrorNotImplementedException(e);
            }

            @Override
            public void onNext(T args) {
                // do nothing
            }

        });
    }",Subscribe and ignore all events.,1,119
3232,"public static MamManager getInstanceFor(MultiUserChat multiUserChat) {
        XMPPConnection connection = multiUserChat.getXmppConnection();
        Jid archiveAddress = multiUserChat.getRoom();
        return getInstanceFor(connection, archiveAddress);
    }",Get a MamManager for the MAM archive of the given  MultiUserChat.,1,58
3233,"public MPPointD getPixelsForValues(float x, float y) {

        ptsBuffer[0] = x;
        ptsBuffer[1] = y;

        pointValuesToPixel(ptsBuffer);

        double xPx = ptsBuffer[0];
        double yPx = ptsBuffer[1];

        return MPPointD.getInstance(xPx, yPx);
    }",Returns a recyclable MPPointD instance.,1,94
3234,"public static VaadinPortletRequest cast(VaadinRequest request) {
        if (request instanceof CombinedRequest) {
            CombinedRequest combinedRequest = (CombinedRequest) request;
            request = combinedRequest.getSecondRequest();
        }
        return (VaadinPortletRequest) request;
    }",Helper method to get a  VaadinPortletRequest from a  VaadinRequest.,1,70
3235,"static int findLimit(InputStream in)
    {
        if (in instanceof LimitedInputStream)
        {
            return ((LimitedInputStream)in).getLimit();
        }
        else if (in instanceof ASN1InputStream)
        {
            return ((ASN1InputStream)in).getLimit();
        }
        else if (in instanceof ByteArrayInputStream)
        {
            return ((ByteArrayInputStream)in).available();
        }
        else if (in instanceof FileInputStream)
        {
            try
            {
                FileChannel channel = ((FileInputStream)in).getChannel();
                long  size = (channel != null) ? channel.size() : Integer.MAX_VALUE;

                if (size < Integer.MAX_VALUE)
                {
                    return (int)size;
                }
            }
            catch (IOException e)
            {
                // ignore - they'll find out soon enough!
            }
        }

        if (MAX_MEMORY > Integer.MAX_VALUE)
        {
            return Integer.MAX_VALUE;
        }

        return (int)MAX_MEMORY;
    }","Find out possible longest length, capped by available memory.",1,280
3236,"public static String rightPad(String str, int size) {
        int pads = size - str.length();
        if (pads <= 0) {
            return str; // returns original string when possible
        }
        if (pads > PAD_LIMIT) {
            return rightPad(str, size, ' ');
        }
        return str.concat(padding(pads));
    }",Right pad a String with spaces (' '). The String is padded to the size of size.,1,111
3237,"final boolean tryAwaitJoin(ForkJoinTask<?> joinMe, int retries) {
        if (joinMe.status < 0) // precheck to prime loop
            return false;
        int pc = parallelism;
        boolean running = true; // false when running count decremented
        outer:for (;;) {
            int wc = workerCounts;
            int rc = wc & RUNNING_COUNT_MASK;
            int tc = wc >>> TOTAL_COUNT_SHIFT;
            if (running) { // replace with spare or decrement count
                if (rc <= pc && tc > pc && 
                    (retries > 0 || tc > (runState & ACTIVE_COUNT_MASK))) {
                    ForkJoinWorkerThread[] ws = workers;
                    int nws = ws.length;
                    for (int i = 0; i < nws; ++i) { // search for spare
                        ForkJoinWorkerThread w = ws[i];
                        if (w != null) {
                            if (joinMe.status < 0)
                                return false;
                            if (w.isSuspended()) {
                                if ((workerCounts & RUNNING_COUNT_MASK)>=pc &&
                                    w.tryResumeSpare()) {
                                    running = false;
                                    break outer;
                                }
                                continue outer; // rescan
                            }
                        }
                    }
                }
                if (retries < 0 || // < 0 means replacement check only
                    rc == 0 || joinMe.status < 0 || workerCounts != wc ||
                    !UNSAFE.compareAndSwapInt(this, workerCountsOffset, 
                                              wc, wc - ONE_RUNNING))
                    return false; // done or inconsistent or contended
                running = false;
                if (rc > pc)
                    break;
            }
            else { // allow blocking if enough threads
                if (rc >= pc || joinMe.status < 0)
                    break;
                int sc = tc - pc + 1; // = spare threads, plus the one to add
                if (retries > sc) {
                    if (rc > 0 && rc >= pc - sc) // allow slack
                        break;
                    if (tc < MAX_THREADS && 
                        tc == (runState & ACTIVE_COUNT_MASK) && 
                        workerCounts == wc &&
                        UNSAFE.compareAndSwapInt(this, workerCountsOffset, wc,
                                                 wc+(ONE_RUNNING|ONE_TOTAL))) {
                        addWorker();
                        break;
                    }
                }
                if (workerCounts == wc &&        // back out to allow rescan
                    UNSAFE.compareAndSwapInt (this, workerCountsOffset,
                                              wc, wc + ONE_RUNNING)) {
                    releaseWaiters();            // help others progress
                    return true;                 // let caller retry
                }
            }
        }
        // arrive here if can block
        joinMe.internalAwaitDone();
        int c;                      // to inline incrementRunningCount
        do {} while (!UNSAFE.compareAndSwapInt
                     (this, workerCountsOffset,
                      c = workerCounts, c + ONE_RUNNING));
        return false;
    }","Awaits join of the given task if enough threads, or can resume or create a spare.",1,779
3238,"public static Builder builder(Class<? extends Application> applicationClass) {
        return new ApplicationBuilder(new ResourceConfig(applicationClass));
    }",Create new application builder configured with custom  javax.ws.rs.core.Application,1,41
3239,"public static Object makeObject(String[] aPackages, ClassLoader aLoader,
        String aName)
        throws CheckstyleException
    {
        final PackageObjectFactory factory = new PackageObjectFactory();
        return factory.doMakeObject(aPackages, aLoader, aName);
    }",Creates a new instance of a class from a given name.,1,70
3240,"public List<GroovyRowResult> rows(String sql, int offset, int maxRows) throws SQLException {
        return rows(sql, offset, maxRows, null);
    }","Performs the given SQL query and return a ""page"" of rows from the result set.",1,51
3241,"public static <T extends Collection<?>> T notEmpty(T collection) {
        return notEmpty(collection, DEFAULT_NOT_EMPTY_COLLECTION_EXCEPTION_MESSAGE);
    }",Validate that the specified argument collection is neither null nor a size of zero (no elements); otherwise throwing an exception.,1,41
3242,"public static boolean isAnIdenticalPolicyAlreadyInPlace(Context c, int dsoType, int dsoID, int groupID, int action, int policyID) throws SQLException
    {

        String select = ""SELECT * FROM resourcepolicy ""
                + ""WHERE resource_type_id= ? ""
                + ""AND resource_id= ? ""
                + ""AND epersongroup_id=? ""
                + ""AND action_id=? "";


        TableRow tr;
        if (policyID != -1)
        {
            select += "" AND policy_id <> ? "";
            tr = DatabaseManager.querySingleTable(c, ""resourcepolicy"", select, dsoType, dsoID, groupID, action, policyID);
        } else
        {
            tr = DatabaseManager.querySingleTable(c, ""resourcepolicy"", select, dsoType, dsoID, groupID, action);
        }

        if (tr != null) return true;

        return false;

    }",Is a policy with the specified parameters already in place?,1,230
3243,"public Variables getVariables()
    {
        return variables;
    }",Returns the variables.,1,20
3244,"protected static Target of(TypeDescription target, Serializable value) {
                        try {
                            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                            ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
                            try {
                                objectOutputStream.writeObject(value);
                            } finally {
                                objectOutputStream.close();
                            }
                            return new ForSerializedObject(target, byteArrayOutputStream.toString(CHARSET));
                        } catch (IOException exception) {
                            throw new IllegalStateException(""Cannot serialize "" + value, exception);
                        }
                    }",Resolves a serializable value to a target that reads a value from reconstructing a serializable string representation.,1,144
3245,"public FSDataInputStream open(Path cPath, int bufferSize) throws IOException {
    LOG.info(""open("" + cPath + "", "" + bufferSize + "")"");

    TachyonURI path = new TachyonURI(Utils.getPathWithoutScheme(cPath));
    fromHdfsToTachyon(path);
    int fileId = mTFS.getFileId(path);

    return new FSDataInputStream(new HdfsFileInputStream(mTFS, fileId, Utils.getHDFSPath(path,
        mUnderFSAddress), getConf(), bufferSize, mTachyonConf));
  }",Attempts to open the specified path for reading.,1,142
3246,"private static InternalMessage transformCompareRequest( LdapMessageCodec codecMessage, int messageId )
    {
        CompareRequestImpl internalMessage = new CompareRequestImpl( messageId );
        CompareRequestCodec compareRequest = codecMessage.getCompareRequest();

        // Codec : LdapDN entry -> Internal : private LdapDN
        internalMessage.setName( compareRequest.getEntry() );

        // Codec : LdapString attributeDesc -> Internal : String attrId
        internalMessage.setAttributeId( compareRequest.getAttributeDesc() );

        // Codec : OctetString assertionValue -> Internal : byte[] attrVal
        if ( compareRequest.getAssertionValue() instanceof String )
        {
            internalMessage.setAssertionValue( ( String ) compareRequest.getAssertionValue() );
        }
        else
        {
            internalMessage.setAssertionValue( ( byte[] ) compareRequest.getAssertionValue() );
        }

        return internalMessage;
    }",Transform a CompareRequest message from a CodecMessage to a,1,182
3247,"public final static FeedbackMessage warn(Component reporter, String message)
	{
		return new FeedbackMessage(reporter, message, WARNING);
	}",Gets a new constructed message with level WARNING.,1,43
3248,"public static Number plus(Character left, Character right) {
        return plus(Integer.valueOf(left), right);
    }",Add one Character to another.,1,40
3249,"static List<GeoPoint> filterPoints(final List<GeoPoint> input) {
    
    final List<GeoPoint> noIdenticalPoints = new ArrayList<>(input.size());
    
    // Backtrack to find something different from the first point
    int startIndex = -1;
    final GeoPoint comparePoint = input.get(0);
    for (int i = 0; i < input.size()-1; i++) {
      final GeoPoint thePoint = input.get(getLegalIndex(- i - 1, input.size()));
      if (!thePoint.isNumericallyIdentical(comparePoint)) {
        startIndex = getLegalIndex(-i, input.size());
        break;
      }
    }
    if (startIndex == -1) {
      return null;
    }
    
    // Now we can start the process of walking around, removing duplicate points.
    int currentIndex = startIndex;
    while (true) {
      final GeoPoint currentPoint = input.get(currentIndex);
      noIdenticalPoints.add(currentPoint);
      while (true) {
        currentIndex = getLegalIndex(currentIndex + 1, input.size());
        if (currentIndex == startIndex) {
          break;
        }
        final GeoPoint nextNonIdenticalPoint = input.get(currentIndex);
        if (!nextNonIdenticalPoint.isNumericallyIdentical(currentPoint)) {
          break;
        }
      }
      if (currentIndex == startIndex) {
        break;
      }
    }
    
    if (noIdenticalPoints.size() < 3) {
      return null;
    }
    
    return noIdenticalPoints;
  }",Filter duplicate points.,1,423
3250,"public int append(final DirectBuffer srcBuffer, final int srcOffset, final int length)
    {
        final int resultingOffset;
        if (length <= maxPayloadLength)
        {
            resultingOffset = appendUnfragmentedMessage(srcBuffer, srcOffset, length);
        }
        else
        {
            if (length > maxMessageLength)
            {
                throw new IllegalArgumentException(
                    String.format(""Encoded message exceeds maxMessageLength of %d, length=%d"", maxMessageLength, length));
            }

            resultingOffset = appendFragmentedMessage(srcBuffer, srcOffset, length);
        }

        return resultingOffset;
    }",Append a message to the term if sufficient capacity exists.,1,153
3251,"public float getYValue(int xIndex, int dataSetIndex) {
        DataSet<? extends Entry> set = mCurrentData.getDataSetByIndex(dataSetIndex);
        return set.getYValForXIndex(xIndex);
    }",returns the y-value for the given x-index and DataSet index,1,54
3252,"protected boolean isRoot(TraversableSource source) {
        return (this.rootRE == null) ? true : this.rootRE.match(source.getName());
    }",Determines if a given source is the defined root.,1,50
3253,"public static int indexOfThrowable(Throwable throwable, Class type, int fromIndex) {
        if (throwable == null) {
            return -1;
        }
        if (fromIndex < 0) {
            fromIndex = 0;
        }
        Throwable[] throwables = ExceptionUtils.getThrowables(throwable);
        if (fromIndex >= throwables.length) {
            return -1;
        }
        for (int i = fromIndex; i < throwables.length; i++) {
            if (throwables[i].getClass().equals(type)) {
                return i;
            }
        }
        return -1;
    }",Returns the (zero based) index of the first Throwable that matches the specified type in the exception chain from a specified index. A null throwable returns -1.,1,188
3254,"public StatementVisitor getVisitor(final DatabaseType dbType, final String commandName) {
        String key = dbType.name() + commandName;
        StatementVisitor visitor = visitors.get(key);
        if (visitor != null) {
            return visitor;
        }

        return visitors.get(commandName);
    }",get statement visitor,1,93
3256,"public long executeInsert() {
        mDatabase.lock();
        boolean logStats = mDatabase.mLogStats;
        long startTime = logStats ? SystemClock.elapsedRealtime() : 0;

        acquireReference();
        try {
            if (SQLiteDebug.DEBUG_SQL_STATEMENTS) {
                Log.v(TAG, ""executeInsert() for ["" + mSql + ""]"");
            }
            native_execute();
            if (logStats) {
                mDatabase.logTimeStat(false /* write */, startTime, SystemClock.elapsedRealtime());
            }
            return mDatabase.lastInsertRow();
        } finally {
            releaseReference();
            mDatabase.unlock();
        }
    }",Execute this SQL statement and return the ID of the most recently inserted row.,1,178
3257,"public I18nMessage invalidEmail(String email) {
    return createMessage(bundlePath, 5, email);
  }",Generates a  I18nMessage for an email validation that failed,1,31
3258,"public List<Command> getCommands() {
        return commands;
    }",Returns the list of commands used to deploy components.,1,22
3259,"static Map<String, List<String>> getAttributeAliasMap(Class<? extends Annotation> annotationType) {
		if (annotationType == null) {
			return Collections.emptyMap();
		}

		Map<String, List<String>> map = attributeAliasesCache.get(annotationType);
		if (map != null) {
			return map;
		}

		map = new HashMap<String, List<String>>();
		for (Method attribute : getAttributeMethods(annotationType)) {
			List<String> aliasNames = getAliasedAttributeNames(attribute);
			if (!aliasNames.isEmpty()) {
				map.put(attribute.getName(), aliasNames);
			}
		}

		attributeAliasesCache.put(annotationType, map);

		return map;
	}",Get a map of all attribute aliases declared via  @AliasFor in the supplied annotation type.,1,219
3260,"public Value array_splice(Env env, 
                            @Reference Value array, //array gets spliced at offset
                            long offset,
                            @Optional(""NULL"") Value length,
                            @Optional(""NULL"") Value replace)
  {
    Value arrayV;
    
    if (array != null) {
      arrayV = array.toValue();
      if (!(arrayV instanceof ArrayValue)) {
        env.warning(L.l(""'"" + arrayV.toString() + ""' is an unexpected argument, expected ArrayValue""));
        return NullValue.NULL;
      }
    } else
      return NullValue.NULL;

    long size = arrayV.getSize();

    long startIndex = offset;

    if (startIndex < 0)
      startIndex += size;

    long endIndex = size;

    if (length != NullValue.NULL) {
      endIndex = length.toLong();

      if (endIndex < 0)
        endIndex += size;
      else
        endIndex += startIndex;
    }

    ArrayValue replacement = new ArrayValueImpl();

    if (replace != NullValue.NULL) {
      if (replace instanceof ArrayValue)
        replacement = (ArrayValue) replace;
      else
        replacement.put(replace);
    }
    else if (endIndex <= startIndex)
      return new ArrayValueImpl();

    ArrayValue returnArray = new ArrayValueImpl();

    ArrayValue splicedArray = new ArrayValueImpl();

    long index = 0;

    /*// DEBUG
   if (offset == 2 && length == NullValue.NULL && replace == NullValue.NULL) {
     ArrayValue testArray = new ArrayValueImpl();
      
     testArray.put(new StringValue(""b""), new LongValue(2));
     testArray.put(new LongValue(3));
     testArray.put(new LongValue(4));
      
     return testArray;
   }
   // DEBUG*/

    /*// DEBUG
   env.warning(""startIndex = "" + startIndex);
   env.warning(""endIndex = "" + endIndex);
   // DEBUG*/

    if (size == 0)
      for (Map.Entry<Value, Value> rEntry : replacement.entrySet())
        splicedArray.put(rEntry.getValue());
    else {
      for (Map.Entry<Value, Value> entry : ((ArrayValue) arrayV).entrySet()) {
        Value entryKey = entry.getKey();

        Value entryValue = entry.getValue();

        if (index == startIndex)
          for (Map.Entry<Value, Value> rEntry : replacement.entrySet())
            splicedArray.put(rEntry.getValue());

        if (index >= startIndex && index < endIndex) {
          if (entryKey instanceof StringValue)
            returnArray.put(entryKey, entryValue);
          else
            returnArray.put(entryValue);
        }
        else {
          if (entryKey instanceof StringValue)
            splicedArray.put(entryKey, entryValue);
          else
            splicedArray.put(entryValue);
        }

        index++;
      }
    }
    array.set(splicedArray);
    return returnArray;
  }",Returns the removed chunk of the arrayV and splices in replace.,1,732
3261,"public DBCursor getFileList( DBObject query, DBObject sort){
        return _filesCollection.find( query ).sort(sort);
    }","gets a filtered list of files stored in this gridfs, sorted by param sort",1,39
3262,"public Cell get(byte [] family, byte [] columnQualifier) {
    return get(Bytes.add(family, KeyValue.COLUMN_FAMILY_DELIM_ARRAY, columnQualifier));
  }","Get a cell using seperate family, columnQualifier arguments.",1,49
3263,"public String getCharacter()
    {
        return str;
    }",Return the string of characters stored in this object.,1,20
3264,"public static ArrayList<GraphicalEditPart> getGroupMembersByGroupID(
			CompartmentEditPart compartmentEditPart, String groupID) {
		
		ArrayList<GraphicalEditPart> groupMembers = new ArrayList<GraphicalEditPart>();

		for (Object element : compartmentEditPart.getChildren()) {
			if (element != null
					&& element instanceof GraphicalEditPart
					&& KimlGMFLayoutHintHelper.getLayoutGroup(
							(GraphicalEditPart) element).equals(groupID)) {
				groupMembers.add((GraphicalEditPart) element);
			}
		}
		return groupMembers;

	}",Returns all the GraphicalEditParts which belong to the specified group,1,142
3265,"public Vector<Result> getResults() throws RpcClientFailedException {
		try {
			sendRequest(""<get_results/>\n"");
			Vector<Result> results = ResultsParser.parse(receiveReply());
			return results;
		}
		catch (IOException e) {
			throw new ConnectionFailedException(""Connection failed in getResults()"", e);
		}
	}",Performs   RPC towards BOINC client (all results),1,95
3266,"public boolean parse(TestElement el)
    {
        if (this.SOURCE == null)
        {
            this.SOURCE = this.openFile(this.FILENAME);
        }
        try
        {
            if (this.READER == null)
            {
                this.READER = new BufferedReader(new FileReader(this.SOURCE));
            }
            parse(this.READER,el);
        }
        catch (Exception exception)
        {
            log.error(""Problem creating samples"",exception);
        }
        return true;
    }",parse the entire file.,1,150
3267,"public String getUsername() {
		return determineUsername();
	}",Determine the username to use based on this configuration and the environment.,1,21
3268,"protected static boolean[] readBooleanArray(int numBools,DataInput is) throws IOException {
        boolean[] ret = new boolean[numBools];
        for(int i=0;i<numBools;){
            int b = is.readUnsignedByte();
            for(int j=0;i<numBools&&j<8;j++){
                ret[i++] = ((b>>>j)&1)!=0;
            }
        }
        return ret;
    }","Unpacks boolean[], each value in array is represented by single bite",1,137
3269,"private boolean onTap(float rawX, float rawY) {
        // Find tap point in preview frame coordinates.
        int[] location = new int[2];
        mGraphicOverlay.getLocationOnScreen(location);
        float x = (rawX - location[0]) / mGraphicOverlay.getWidthScaleFactor();
        float y = (rawY - location[1]) / mGraphicOverlay.getHeightScaleFactor();

        // Find the barcode whose center is closest to the tapped point.
        Barcode best = null;
        float bestDistance = Float.MAX_VALUE;
        for (BarcodeGraphic graphic : mGraphicOverlay.getGraphics()) {
            Barcode barcode = graphic.getBarcode();
            if (barcode.getBoundingBox().contains((int) x, (int) y)) {
                // Exact hit, no need to keep looking.
                best = barcode;
                break;
            }
            float dx = x - barcode.getBoundingBox().centerX();
            float dy = y - barcode.getBoundingBox().centerY();
            float distance = (dx * dx) + (dy * dy);  // actually squared distance
            if (distance < bestDistance) {
                best = barcode;
                bestDistance = distance;
            }
        }

        if (best != null) {
            Intent data = new Intent();
            data.putExtra(BarcodeObject, best);
            setResult(CommonStatusCodes.SUCCESS, data);
            finish();
            return true;
        }
        return false;
    }",onTap returns the tapped barcode result to the calling Activity.,1,391
3270,"public DownloadRequest[] load() throws IOException {
    if (!exists()) {
      return new DownloadRequest[0];
    }
    InputStream inputStream = null;
    try {
      inputStream = atomicFile.openRead();
      DataInputStream dataInputStream = new DataInputStream(inputStream);
      int version = dataInputStream.readInt();
      if (version > VERSION) {
        throw new IOException(""Unsupported action file version: "" + version);
      }
      int actionCount = dataInputStream.readInt();
      ArrayList<DownloadRequest> actions = new ArrayList<>();
      for (int i = 0; i < actionCount; i++) {
        try {
          actions.add(readDownloadRequest(dataInputStream));
        } catch (UnsupportedRequestException e) {
          // remove DownloadRequest is not supported. Ignore and continue loading rest.
        }
      }
      return actions.toArray(new DownloadRequest[0]);
    } finally {
      Util.closeQuietly(inputStream);
    }
  }",Loads  DownloadRequest DownloadRequests from the file.,1,268
3271,"private static DefaultFeatureType person() {
        final PropertyType nameType = new DefaultAttributeType<>(name(""name""), String.class, 1, 1, null);
        final PropertyType ageType  = new DefaultAttributeType<>(name(""age""), Integer.class, 1, 1, null);
        final PropertyType cmpType  = FeatureOperations.compound(name(""concat""), ""/"", ""prefix:"", "":suffix"", nameType, ageType);
        return new DefaultFeatureType(name(""person""), false, null, nameType, ageType, cmpType);
    }",Creates a feature type with an string join operation.,1,165
3272,"public String getAssetDirectory() {
    return String.format(""plugin-webapp/%s"", getId());
  }",Returns a uri to a plugin resources directory.,1,31
3273,"public static Process execute(final List commands, final String[] envp, final File dir) throws IOException {
        return Runtime.getRuntime().exec(stringify(commands), envp, dir);
    }","Executes the command specified by the given list, with the environment defined by envp and under the working directory dir.",1,64
3274,"private static SafePath findSafePath(final List<GeoPoint> points, final int startIndex, final double leniencyValue) {
    SafePath safePath = null;
    for (int i = startIndex; i < startIndex + points.size(); i++) {
      //get start point, always the same for an iteration
      final int startPointIndex = getLegalIndex(i -1, points.size());
      final GeoPoint startPoint = points.get(startPointIndex);
      //get end point, can be coplanar and therefore change
      int endPointIndex = getLegalIndex(i, points.size());
      GeoPoint endPoint = points.get(endPointIndex);

      if (startPoint.isNumericallyIdentical(endPoint)) {
        //go to next if identical
        continue;
      }
      //Check if nextPoints are co-planar, if so advance to next point.
      //if we go over the start index then we have no succeed.
      while (true) {
        int nextPointIndex = getLegalIndex(endPointIndex + 1, points.size());
        final GeoPoint nextPoint = points.get(nextPointIndex);
        if (startPoint.isNumericallyIdentical(nextPoint)) {
          //all coplanar
          return null;
        }
        Plane nextPlane = new Plane(startPoint, nextPoint);
        if (Math.abs(nextPlane.evaluate(endPoint)) > Vector.MINIMUM_RESOLUTION + leniencyValue) {
          //no coplanar.
          break;
        }
        if (endPointIndex == startIndex) {
          //we are over the path, we fail.
          return null;
        }
        //advance
        endPointIndex = nextPointIndex;
        endPoint = nextPoint;
        i++;
      }

      if (safePath != null && endPointIndex == startIndex) {
        //We are already at the start, current point is coplanar with
        //start point, no need to add this node.
        break;
      }
      //Create node and move to next one
      Plane currentPlane = new Plane(startPoint, endPoint);
      safePath = new SafePath(safePath, endPoint, endPointIndex, currentPlane);
    }
    return safePath;
  }",Iterative path search through ordered list of points.,1,473
3275,"protected String determinePrimaryCandidate(Map<String, Object> candidateBeans, Class<?> requiredType) {
		String primaryBeanName = null;
		for (Map.Entry<String, Object> entry : candidateBeans.entrySet()) {
			String candidateBeanName = entry.getKey();
			Object beanInstance = entry.getValue();
			if (isPrimary(candidateBeanName, beanInstance)) {
				if (primaryBeanName != null) {
					boolean candidateLocal = containsBeanDefinition(candidateBeanName);
					boolean primaryLocal = containsBeanDefinition(primaryBeanName);
					if (candidateLocal && primaryLocal) {
						throw new NoUniqueBeanDefinitionException(requiredType, candidateBeans.size(),
								""more than one 'primary' bean found among candidates: "" + candidateBeans.keySet());
					}
					else if (candidateLocal) {
						primaryBeanName = candidateBeanName;
					}
				}
				else {
					primaryBeanName = candidateBeanName;
				}
			}
		}
		return primaryBeanName;
	}",Determine the primary candidate in the given set of beans.,1,252
3276,"private MediaFormat buildVideoFormat() throws ParserException {
    if (videoTrackFormat != null && CODEC_ID_VP9.equals(videoTrackFormat.codecId)) {
      return MediaFormat.createVideoFormat(MimeTypes.VIDEO_VP9, MediaFormat.NO_VALUE, durationUs,
          videoTrackFormat.pixelWidth, videoTrackFormat.pixelHeight, null);
    } else {
      throw new ParserException(""Unable to build format"");
    }
  }",Builds an video  MediaFormat containing recently gathered Video information.,1,101
3277,"public static ServerSettings decodeStoreUri(String uri) {
        if (uri.startsWith(""imap"")) {
            return ImapStore.decodeUri(uri);
        } else if (uri.startsWith(""pop3"")) {
            return Pop3Store.decodeUri(uri);
        } else if (uri.startsWith(""webdav"")) {
            return WebDavStore.decodeUri(uri);
        } else {
            throw new IllegalArgumentException(""Not a valid store URI"");
        }
    }",Decodes the contents of store-specific URIs and puts them into a  ServerSettings object.,1,130
3278,"public boolean isPlaying() {
        if (mPlayer.isInitialized()) {
            return mPlayer.isPlaying();
        }
        return false;
    }",Returns whether playback is currently paused,1,45
3279,"public static Object deserialize(byte[] data, DataHandler dataHandler) {
        try {
            JavaObjectSerializer dbJavaObjectSerializer = null;
            if (dataHandler != null) {
                dbJavaObjectSerializer = dataHandler.getJavaObjectSerializer();
            }
            if (dbJavaObjectSerializer != null) {
                return dbJavaObjectSerializer.deserialize(data);
            }
            if (serializer != null) {
                return serializer.deserialize(data);
            }
            ByteArrayInputStream in = new ByteArrayInputStream(data);
            ObjectInputStream is;
            if (SysProperties.USE_THREAD_CONTEXT_CLASS_LOADER) {
                final ClassLoader loader = Thread.currentThread().getContextClassLoader();
                is = new ObjectInputStream(in) {
                    @Override
                    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
                        try {
                            return Class.forName(desc.getName(), true, loader);
                        } catch (ClassNotFoundException e) {
                            return super.resolveClass(desc);
                        }
                    }
                };
            } else {
                is = new ObjectInputStream(in);
            }
            return is.readObject();
        } catch (Throwable e) {
            throw DbException.get(ErrorCode.DESERIALIZATION_FAILED_1, e, e.toString());
        }
    }","De-serialize the byte array to an object, eventually using the serializer specified by the connection info.",1,350
3280,"public static SSLSocketFactory getSocketFactory() throws SSLInitializationException {
        return new SSLSocketFactory(
            SSLContexts.createDefault(),
            BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);
    }",Obtains default SSL socket factory with an SSL context based on the standard JSSE trust material (cacerts file in the security properties directory).,1,40
3281,"public Histogram newHistogram(Class<?> klass,
                                        String name,
                                        String scope) {
        return newHistogram(klass, name, scope, false);
    }","Creates a new non-biased  Histogram and registers it under the given class, name, and scope.",1,49
3282,"public ConfigModel build() {
            return new ParameterModel(this);
        }",Creates a new ConfigModel with the given parameters.,1,24
3283,"Mono<SocketAddress> getSocketAddressSupplier(ConnectionKey connectionKey) {

        return Mono.fromCallable(() -> {

            if (connectionKey.nodeId != null) {

                SocketAddress socketAddress = getSocketAddress(connectionKey.nodeId);
                logger.debug(""Resolved SocketAddress {} using for Cluster node {}"", socketAddress, connectionKey.nodeId);
                return socketAddress;
            }

            SocketAddress socketAddress = resolve(RedisURI.create(connectionKey.host, connectionKey.port));
            logger.debug(""Resolved SocketAddress {} using for Cluster node at {}:{}"", socketAddress, connectionKey.host,
                    connectionKey.port);
            return socketAddress;
        });
    }",Get a  Mono of  SocketAddress for a  io.lettuce.core.cluster.ClusterNodeConnectionFactory.ConnectionKey.,1,156
3284,"public InetAddress getLocalHost(InetAddress intendedDestination)
    {
        //no point in making sure that the localHostFinderSocket is initialized.
        //better let it through a NullPointerException.
        localHostFinderSocket.connect(intendedDestination
                                      , this.RANDOM_ADDR_DISC_PORT);
        InetAddress localHost = localHostFinderSocket.getLocalAddress();
        localHostFinderSocket.disconnect();
        return localHost;
    }","Returns an InetAddress instance that represents the localhost, and that a socket can bind upon or distribute to peers as a contact address.",1,67
3285,"public static AnySearchQueryBuilder getSubjectSearchQueryBuilder() {
        return new AnySearchQueryBuilder();
    }","Returns a new instance of  AnySearchQueryBuilder, for assisted building of some service's  search() arguments.",1,25
3286,"public SocksCmdType cmdType() {
        return cmdType;
    }",Returns the  SocksCmdType of this  SocksCmdRequest,1,19
3287,"public int getResourceCacheTime() {
        return resourceCacheTime;
    }",Returns the amount of milliseconds the browser should cache a file.,1,19
3288,"protected CacheControl lookupCacheSeconds(String urlPath) {
		// direct match?
		CacheControl cacheControl = this.cacheMappings.get(urlPath);
		if (cacheControl == null) {
			// pattern match?
			for (String registeredPath : this.cacheMappings.keySet()) {
				if (this.pathMatcher.match(registeredPath, urlPath)) {
					cacheControl = this.cacheMappings.get(registeredPath);
				}
			}
		}
		return cacheControl;
	}",Look up a  org.springframework.http.CacheControl instance for the given URL path.,1,123
3289,"public Promise<List<SymbolInformation>> symbol(WorkspaceSymbolParams params) {
    return Promises.create(
        (resolve, reject) ->
            requestTransmitter
                .newRequest()
                .endpointId(WS_AGENT_JSON_RPC_ENDPOINT_ID)
                .methodName(""workspace/symbol"")
                .paramsAsDto(params)
                .sendAndReceiveResultAsListOfDto(SymbolInformation.class)
                .onSuccess(resolve::apply)
                .onFailure(error -> reject.apply(getPromiseError(error))));
  }",GWT client implementation of  io.typefox.lsapi.WorkspaceService#symbol(io.typefox.lsapi.WorkspaceSymbolParams),1,114
3290,"public int copyFromLocal(String argv[]) throws IOException {
    if (argv.length != 3) {
      System.out.println(""Usage: tfs copyFromLocal <src> <remoteDst>"");
      return -1;
    }

    String srcPath = argv[1];
    String dstPath = argv[2];
    String dstFile = Utils.getFilePath(dstPath);
    File src = new File(srcPath);
    if (!src.exists()) {
      System.out.println(""Local file "" + srcPath + "" does not exist."");
      return -1;
    }
    TachyonFS tachyonClient = TachyonFS.get(Utils.getTachyonMasterAddress(dstPath));
    int fileId = tachyonClient.createFile(dstFile);
    if (fileId == -1) {
      return -1;
    }
    TachyonFile tFile = tachyonClient.getFile(fileId);
    OutStream os = (FileOutStream) tFile.getOutStream(WriteType.THROUGH);
    FileInputStream in = new FileInputStream(src);
    FileChannel channel = in.getChannel();
    ByteBuffer buf = ByteBuffer.allocate(1024);
    while (channel.read(buf) != -1) {
      buf.flip();
      os.write(buf.array(), 0, buf.limit());
    }
    os.close();
    channel.close();
    in.close();
    System.out.println(""Copied "" + srcPath + "" to "" + dstPath);
    return 0;
  }",Copies a file specified by argv from the local filesystem to the filesystem.,1,416
3291,"public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(
			P publisher, Class<T> elementClass) {

		return (message, context) ->
				writeWithMessageWriters(message, context, publisher, ResolvableType.forClass(elementClass));
	}",Inserter to write the given  Publisher.,1,83
3292,"public BuilderFacade getFacade() {
        BuilderFacade facade = constructFacade();
        facade.setName(getName());
        facade.setEnvironments(getEnvironments());
        facade.setBuildSuccessCondition(getBuildSuccessCondition());
        saveToFacade(facade);
        return facade;
    }",Gets the facade object of this builder.,1,71
3293,"public String[] getOptionValues(String... names) {
        String[] values = new String[names.length];
        EconomicMap<String, OptionDescriptor> optionDescriptors = getOptionDescriptors();
        for (int i = 0; i < names.length; i++) {
            OptionDescriptor option = optionDescriptors.get(names[i]);
            if (option != null) {
                OptionKey<?> optionKey = option.getOptionKey();
                Object value = optionKey.getValue(getOptions());
                String svalue;
                if (option.getOptionValueType() == String.class && value != null) {
                    svalue = ""\"""" + value + ""\"""";
                } else if (value == null) {
                    svalue = """";
                } else {
                    svalue = String.valueOf(value);
                }
                values[i] = svalue;
            } else {
                // null denotes the option does not exist
                values[i] = null;
            }
        }
        return values;
    }",Gets the values for the options corresponding to  names encoded as strings.,1,303
3294,"@Override
    public ReadOnlyStringMap getContextData() {
        return contextData;
    }",Returns the  ReadOnlyStringMap containing context data key-value pairs.,1,22
3295,"public IAnchor getWayAnchor(int index) {
		return anchorsProperty.get(getWayAnchorKey(index));
	}","Returns the way  IAnchor anchor for the given way anchor index which is currently assigned, or null if no way  IAnchor anchor is assigned for that index.",1,30
3296,"protected Region getGridCanvas() {
		return grid;
	}",Returns the  Region that is used to paint the background grid.,1,19
3297,"public static List<Object> findAnnotatedFieldValues(Object object, Class<? extends Annotation> annotationType) {
		Preconditions.notNull(object, ""Object must not be null"");
		List<Field> fields = findAnnotatedFields(object.getClass(), annotationType);
		return ReflectionUtils.readFieldValues(fields, object);
	}","Find the values of all plain Field fields of the supplied  object that are annotated or meta-annotated with the specified  annotationType, using top-down search semantics within the type hierarchy.",1,84
3298,"public static TaggedBulkheadMetrics ofBulkheadRegistry(BulkheadRegistry bulkheadRegistry) {
        return new TaggedBulkheadMetrics(MetricNames.ofDefaults(), bulkheadRegistry);
    }",Creates a new binder that uses given  registry as source of bulkheads.,1,36
3299,"public static InternalMessage toMuleMessagePart(String name, Object object, MediaType contentType) throws IOException {
    final Builder builder;

    if (object instanceof File) {
      builder = InternalMessage.builder().payload(new FileInputStream((File) object));
    } else if (object instanceof URL) {
      builder = InternalMessage.builder().payload(((URL) object).openStream());
    } else if (object instanceof String) {
      builder = InternalMessage.builder().payload(object);
      if (contentType == null || MediaType.ANY.matches(contentType)) {
        builder.mediaType(MediaType.TEXT);
      }
    } else {
      builder = InternalMessage.builder().payload(object);
    }

    if (contentType != null && !MediaType.ANY.matches(contentType)) {
      builder.mediaType(contentType);
    } else {
      final DataHandler dataHandler = toDataHandler(name, object, contentType);
      builder.mediaType(MediaType.parse(dataHandler.getContentType()));
    }

    return builder.attributes(new PartAttributes(name)).build();
  }",Transforms an Object into a  Message to be used in a  MultiPartContent.,1,332
3300,"public static Vector<Short> ofAll(short... elements) {
        Objects.requireNonNull(elements, ""elements is null"");
        return ofAll(BitMappedTrie.ofAll(elements));
    }",Creates a Vector from short values.,1,52
3301,"protected List<String> getPrincipalRoles(Request request) {
        List<String> roles = null;
        Principal principal = request.getPrincipal();
        if (principal != null) {
            if (principal instanceof GenericPrincipal) {
                GenericPrincipal gc = GenericPrincipal.class.cast(principal);
                roles = Arrays.asList(gc.getRoles());
            }
        }

        return roles;
    }",Get the roles that is stored in the authenticated  GenericPrincipal,1,120
3302,"public Builder gson(Gson gson) {
      checkNotNull(gson, ""gson"");

      // Will be used as a factory for BSON types (if Gson does not have one). By default, uses
      // TypeAdapter(s) from Gson if they're explicitly defined (not a ReflectiveTypeAdapter).
      // Otherwise delegate to BSON codec.
      TypeAdapterFactory bsonAdapterFactory = Codecs.delegatingTypeAdapterFactory(
              MongoClient.getDefaultCodecRegistry()
      );

      // Appending new TypeAdapterFactory to allow Gson and Bson adapters to co-exists.
      // Depending on the type we may need to use one or another. For instance,
      // Date should be serialized by Gson (even if Bson has codec for it).
      // But ObjectId / Decimal128 by BSON (if Gson doesn't have a type adapter for it).
      // Document or BsonDocument should only be handled by BSON (it's unlikely that users have direct dependency on them in POJOs).
      // So newGson is a way to extend existing Gson instance with ""BSON TypeAdapter(s)""
      Gson newGson = gson.newBuilder()
              .registerTypeAdapterFactory(bsonAdapterFactory)
              .create();

      // expose new Gson as CodecRegistry. Using fromRegistries() for caching
      CodecRegistry codecRegistry = CodecRegistries.fromRegistries(Codecs.codecRegistryFromGson(newGson));

      return codecRegistry(codecRegistry, new FieldNamingStrategy.GsonNamingStrategy(gson));
    }",Configures current repository setup with  Gson serialization.,1,151
3303,"public static LuceneCollectorExpression getExpression(ReferenceInfo referenceInfo) {
        String colName = referenceInfo.ident().columnIdent().fqn();
        assert referenceInfo.granularity() == RowGranularity.DOC;

        switch(referenceInfo.type()) {
            case BYTE:
                return new ByteColumnReference(colName);
            case SHORT:
                return new ShortColumnReference(colName);
            case STRING:
                return new BytesRefColumnReference(colName);
            case DOUBLE:
                return new DoubleColumnReference(colName);
            case BOOLEAN:
                return new BooleanColumnReference(colName);
            case OBJECT:
                return new ObjectColumnReference(colName);
            case FLOAT:
                return new FloatColumnReference(colName);
            case LONG:
            case TIMESTAMP:
                return new LongColumnReference(colName);
            case INTEGER:
                return new IntegerColumnReference(colName);
            default:
                throw new CrateException(String.format(""unsupported type '%s'"", referenceInfo.type().getName()));
        }
    }",Get a LuceneCollectorExpression to be used in  io.crate.operator.collector.LuceneDocCollectors from a  io.crate.metadata.ReferenceInfo.,1,265
3304,"public boolean contains(long sequence) {
		return sequence >= begin && sequence <= end;
	}",Return whether or not the interval contains given sequence number.,1,37
3305,"public String toString()
    {
    	// N.B. Other classes rely on this returning just the string.
        return getStringValue();
    }",Provides the string representation of the property.,1,25
3306,"private Result execute(int nr, Result prev_result, JobEntryCopy startpoint, JobEntryCopy previous, String reason) throws KettleException
	{
		Result res = null;
       
		if (stopped)
		{
			res=new Result(nr);
			res.stopped=true;
			return res;
		}
		
		log.logDetailed(toString(), ""exec(""+nr+"", ""+(prev_result!=null?prev_result.getNrErrors():0)+"", ""+(startpoint!=null?startpoint.toString():""null"")+"")"");
		
		// What entry is next?
		JobEntryInterface jei = startpoint.getEntry();

        // Track the fact that we are going to launch the next job entry...
        JobEntryResult jerBefore = new JobEntryResult(null, Messages.getString(""Job.Comment.JobStarted""), reason, startpoint);
        jobTracker.addJobTracker(new JobTracker(jobMeta, jerBefore));

        Result prevResult = null;
        if ( prev_result != null )
        {
            prevResult = (Result)prev_result.clone();
        }
        else
        {
            prevResult = new Result();
        }

        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        Thread.currentThread().setContextClassLoader(jei.getClass().getClassLoader());
        // Execute this entry...
        JobEntryInterface cloneJei = (JobEntryInterface)jei.clone();
        ((VariableSpace)cloneJei).copyVariablesFrom(this);        
        Result result = cloneJei.execute(prevResult, nr, rep, this);

        Thread.currentThread().setContextClassLoader(cl);
		addErrors((int)result.getNrErrors());
		
        // Save this result as well...
        JobEntryResult jerAfter = new JobEntryResult(result, Messages.getString(""Job.Comment.JobFinished""), null, startpoint);
        jobTracker.addJobTracker(new JobTracker(jobMeta, jerAfter));
				
		// Try all next job entries.
		// Launch only those where the hopinfo indicates true or false
		int nrNext = jobMeta.findNrNextJobEntries(startpoint);
		for (int i=0;i<nrNext && !isStopped();i++)
		{
			// The next entry is...
			JobEntryCopy nextEntry = jobMeta.findNextJobEntry(startpoint, i);
			
			// See if we need to execute this...
			JobHopMeta hi = jobMeta.findJobHop(startpoint, nextEntry);

			// The next comment...
			String nextComment = null;
			if (hi.isUnconditional()) 
			{
				nextComment = Messages.getString(""Job.Comment.FollowedUnconditional"");
			}
			else
			{
				if (result.getResult())
                {
					nextComment = Messages.getString(""Job.Comment.FollowedSuccess"");
                }
				else
                {
					nextComment = Messages.getString(""Job.Comment.FollowedFailure"");
                }
			}

			// 
			// If the link is unconditional, execute the next job entry (entries).
			// If the startpoint was an evaluation and the link color is correct: green or red, execute the next job entry...
			//
			if (  hi.isUnconditional() || ( startpoint.evaluates() && ( ! ( hi.getEvaluation() ^ result.getResult() ) ) ) ) 
			{				
				// Start this next step!
				log.logBasic(jobMeta.toString(), Messages.getString(""Job.Log.StartingEntry"",nextEntry.getName()));
                
                // Pass along the previous result, perhaps the next job can use it...
                // However, set the number of errors back to 0 (if it should be reset)
				// When an evaluation is executed the errors e.g. should not be reset.
				if ( nextEntry.resetErrorsBeforeExecution() )
				{
                    result.setNrErrors(0);
				}
                
                // Now execute!
                try
                {
                    res = execute(nr+1, result, nextEntry, startpoint, nextComment);
                }
                catch(Throwable e)
                {
                    log.logError(toString(), Const.getStackTracker(e));
                    throw new KettleException(Messages.getString(""Job.Log.UnexpectedError"",nextEntry.toString()), e);
                }
				
				log.logBasic(jobMeta.toString(), Messages.getString(""Job.Log.FinishedJobEntry"",nextEntry.getName(),res.getResult()+""""));
			}
		}
		
		// Perhaps we don't have next steps??
		// In this case, return the previous result.
		if (res==null)
		{
			res=prevResult;
		}

		return res;
	}",Execute a job entry recursively and move to the next job entry automatically.,1,1006
3307,"public I18nMessage invalidIp(String ip) {
    return createMessage(bundlePath, 6, ip);
  }",Generates a  I18nMessage for an ip address validation that failed,1,31
3308,"public boolean truncateLog(long zxid) throws IOException {
        clear();

        // truncate the log
        boolean truncated = snapLog.truncateLog(zxid);

        if (!truncated) {
            return false;
        }

        loadDataBase();
        return true;
    }",Truncate the ZKDatabase to the specified zxid,1,78
3309,"public boolean hasSpaceAfterAbstractSchemaName() {
		return hasSpaceAfterRootObject;
	}","Determines whether a whitespace was parsed after the ""root"" object.",1,19
3310,"public static MetricsCaptor loadCaptor(ApplicationContext applicationContext) {
		try {
			MeterRegistry registry = applicationContext.getBean(MeterRegistry.class);
			if (applicationContext instanceof GenericApplicationContext
					&& !applicationContext.containsBean(MICROMETER_CAPTOR_NAME)) {
				((GenericApplicationContext) applicationContext).registerBean(MICROMETER_CAPTOR_NAME,
						MicrometerMetricsCaptor.class,
						() -> new MicrometerMetricsCaptor(registry));
			}
			return applicationContext.getBean(MICROMETER_CAPTOR_NAME, MetricsCaptor.class);
		}
		catch (NoSuchBeanDefinitionException e) {
			return null;
		}
	}","Add a MicrometerMetricsCaptor to the context if there's a MeterRegistry; if there's already a  MetricsCaptor bean, return that.",1,143
3311,"@NonNull
	public Set<String> getRepositories() {
		String dirString;
		Set<String> dirs;
		synchronized (prefs) {
			dirString = prefs.get(PREFS_DIRECTORIES_REL, """"); //$NON-NLS-1$
			if (dirString.equals("""")) { //$NON-NLS-1$
				dirs = migrateAbolutePaths();
			} else {
				dirs = toDirSet(dirString);
			}
		}
		return dirs;
	}",Get the set of absolute path strings of all configured repositories.,1,119
3312,"public static String breadcrumbPath(String urlPrefix, String path) {
        return breadcrumbPath(urlPrefix, path, PATH_SEPARATOR);
    }","Convenience method for  breadcrumbPath(urlPrefix, path, PATH_SEPARATOR).",1,38
3313,"public List<JobHopMeta> getJobhops() {
    return hops;
  }",Gets the hops.,1,22
3314,"public static boolean isMDI() {
        // TODO names of states will be changed http://www.netbeans.org/issues/show_bug.cgi?id=36933
        return WindowManagerImpl.getInstance().getEditorAreaState() == Constants.EDITOR_AREA_JOINED;
    }",Checks whether NetBeans are in joined (full screen) or separated (multiple smaller windows) mode.,1,39
3315,"public static AliasDescriptor from(Method attribute) {
			AliasDescriptor descriptor = aliasDescriptorCache.get(attribute);
			if (descriptor != null) {
				return descriptor;
			}

			AliasFor aliasFor = attribute.getAnnotation(AliasFor.class);
			if (aliasFor == null) {
				return null;
			}

			descriptor = new AliasDescriptor(attribute, aliasFor);
			descriptor.validate();
			aliasDescriptorCache.put(attribute, descriptor);
			return descriptor;
		}",Create an  AliasDescriptor from the declaration of  @AliasFor on the supplied annotation attribute and validate the configuration of  @AliasFor.,1,140
3316,"public Fact getFactOnEdge(Edge edge) throws DataflowAnalysisException {
		BasicBlock block = isForwards() ? edge.getSource() : edge.getTarget();
		
		Fact predFact = createFact();
		copy(getResultFact(block), predFact);
		
		edgeTransfer(edge, predFact);
		
		Fact result = createFact();
		makeFactTop(result);
		meetInto(predFact, edge, result);

		return result;
	}",Get the fact that is true at the target of the given control edge.,1,128
3317,"public OCShareEntity getShareById(long id) {
        OCShareEntity share = null;
        Cursor c = getShareCursorForValue(
                ProviderTableMeta._ID,
                String.valueOf(id)
        );
        if (c != null) {
            if (c.moveToFirst()) {
                share = createShareInstance(c);
            }
            c.close();
        }
        return share;
    }",Retrieves an stored  OCShareEntity given its id.,1,112
3318,"public SWTBotTreeItem expandNode(final String... nodes) {
		Assert.isNotEmpty((Object[]) nodes);
		assertEnabled();

		SWTBotTreeItem item = this;
		for (String node : nodes)
			item = item.getNode(node).expand();

		return item;
	}",Expands the node matching the given node texts.,1,90
3319,"public boolean equals(Object object) {
        if (object == this) {
            return true;
        }
        if (object instanceof Bag == false) {
            return false;
        }
        Bag other = (Bag) object;
        if (other.size() != size()) {
            return false;
        }
        for (Iterator it = map.keySet().iterator(); it.hasNext();) {
            Object element = (Object) it.next();
            if (other.getCount(element) != getCount(element)) {
                return false;
            }
        }
        return true;
    }",Compares this Bag to another.,1,198
3320,"public Histogram newHistogram(Class<?> klass,
                                        String name,
                                        boolean biased) {
        return newHistogram(klass, name, null, biased);
    }",Creates a new  Histogram and registers it under the given class and name.,1,49
3321,"public static RealmLogger getFailureLogger(final int failureLevel) {
        return new RealmLogger() {
            private void failIfEqualOrAbove(int logLevel) {
                if (logLevel >= failureLevel) {
                    fail(""Message logged that was above valid level: "" + logLevel + "" >= "" + failureLevel);
                }
            }

            @Override
            public void log(int level, String tag, Throwable throwable, String message) {
                failIfEqualOrAbove(level);
            }
        };
    }",Returns a RealmLogger that will fail if it is asked to log a message above a certain level.,1,135
3322,"public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {
        if (array == null) {
            return -1;
        }
        if (startIndex < 0) {
            return -1;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return -1;
    }",Find the last index of the given value in the array starting at the given index. This method returns -1 if null array input. A negative startIndex will return -1.,1,179
3323,"public static ByteArrayComparable toComparator(ComparatorProtos.Comparator proto)
  throws IOException {
    String type = proto.getName();
    String funcName = ""parseFrom"";
    byte [] value = proto.getSerializedComparator().toByteArray();
    try {
      Class<? extends ByteArrayComparable> c =
        (Class<? extends ByteArrayComparable>)(Class.forName(type));
      Method parseFrom = c.getMethod(funcName, byte[].class);
      if (parseFrom == null) {
        throw new IOException(""Unable to locate function: "" + funcName + "" in type: "" + type);
      }
      return (ByteArrayComparable)parseFrom.invoke(null, value);
    } catch (Exception e) {
      throw new IOException(e);
    }
  }",Convert a protocol buffer Comparator to a ByteArrayComparable,1,222
3324,"public PersistentDataObject fetch(String id) {
        if(storage.containsKey(id)){
            return storage.get(id).persist();
        } else if(xmlMap.containsKey(id)){
            return xmlMap.get(id);
        } else {
            return null;
        }
    }",Fetches a previously stored object,1,86
3325,"public boolean isAcknowledged() {
        if (w instanceof Integer) {
            return (Integer) w > 0 || (journal != null && journal) || (fsync != null && fsync);
        }
        return true;
    }",Returns true if this write concern indicates that write operations must be acknowledged.,1,83
3326,"public static Completable wrap(CompletableSource source) {
        Objects.requireNonNull(source, ""source is null"");
        if (source instanceof Completable) {
            return (Completable)source;
        }
        return new CompletableFromSource(source);
    }",Wraps the given CompletableSource into a Completable if not already Completable.,1,68
3327,"public ThriftReply thriftReply() {
        return thriftReply;
    }",Returns the  ThriftReply object which includes Thrift reply information of the log.,1,19
3328,"public int size()
    {
        return nbAvas;
    }",Get the number of Avas of this Rdn,1,20
3329,"public static LoadedTypeInitializer accessible(String fieldName, Object value) {
            return new ForStaticField<Object>(fieldName, value, false);
        }",Creates a  LoadedTypeInitializer for given field name and value where the field is accessible by reflection.,1,43
3330,"public static boolean isSupported() {
    if (isSupported == null) {
      /*
       * Android 3.0 devices support touch scrolling natively.
       * 
       * TODO(jlabanca): Find a more reliable way to detect if native touch
       * scrolling is supported.
       */
      isSupported = TouchEvent.isSupported() && !isAndroid3();
    }
    return isSupported;
  }",Runtime check for whether touch scrolling is supported in this browser.,1,61
3331,"public JListOperator selectPage(String pageName) {
        new JToggleButtonOperator(this, pageName).push();
        return lstComponents();
        
    }","Select a component category like ""Swing""",1,42
3332,"public INDArray pack(List<Pair<INDArray, INDArray>> layers) {
        if (layers.size() != this.neuralNets.length + 1)
            throw new IllegalArgumentException(""Illegal number of neuralNets passed in. Was "" + layers.size() + "" when should have been "" + (this.neuralNets.length + 1));

        List<INDArray> list = new ArrayList<>();
        for(int i = 0; i < layers.size(); i++) {
            list.add(layers.get(i).getFirst());
            list.add(layers.get(i).getSecond());
        }



        INDArray ret = Nd4j.toFlattened(list);
        if(ret.length() != numParams())
            throw new IllegalStateException(""Illegal number of parameters found in the layers with a difference of "" + Math.abs(ret.length() - numParams()));
        return ret;
    }",Packs a set of matrices in to one vector,1,252
3333,"public Set<JahiaTemplatesPackage> getAvailableTemplatePackagesForModule(String moduleName) {
        Set<JahiaTemplatesPackage> r = templatePackageRegistry.getPackagesPerModule().get(moduleName);
        if (r == null) {
            return Collections.emptySet();
        }
        return r;
    }",Returns a set of all available template packages having templates for a module.,1,74
3334,"public boolean applyFilter(ContactListFilter filter)
    {
        // We set the isFiltering to true to indicate that we're currently
        // filtering.
        isFiltering = true;

        if (currentFilter == null || !currentFilter.equals(filter))
            this.currentFilter = filter;

        tempTreeModel = new ContactListTreeModel(
            GuiActivator.getContactListService().getRoot());

        // We synchronize the matching and all MetaContactListener events on
        // the searchTreeModel in order to prevent modification to be done on
        // the actual treeModel while we're working with the temporary model.
        synchronized (tempTreeModel)
        {
            addAllMatching(tempTreeModel);

            treeModel = tempTreeModel;
        }

        // If in the mean time someone has stopped filtering we return here.
        if (!isFiltering)
        {
            return (treeModel.getChildCount(treeModel.getRoot()) > 0);
        }

        SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                // Set the updated treeModel to the tree component.
                setTreeModel(treeModel);

                // Refresh the view.
                treeModel.reload();

                // Expand all rows. Should be done only after the new model
                // is visible to have effect.
                expandAllRows();

                // We should explicitly re-validate the whole tree as we
                // changed its model.
                revalidate();
                repaint();
            }
        });

        // We set the isFiltering to false to indicate that we finished
        // filtering.
        isFiltering = false;

        // As we update the tree in the swing thread, we should check the
        // temporary model here in order to given correct results.
        if (tempTreeModel.getChildCount(tempTreeModel.getRoot()) > 0)
            return true;

        return false;
    }",Applies the given filter.,1,311
3335,"public int copyRecursiveTo(final String fileMask, final String excludes, final FilePath target) throws IOException, InterruptedException {
        if(this.channel==target.channel) {
            // local to local copy.
            return act(new FileCallable<Integer>() {
                public Integer invoke(File base, VirtualChannel channel) throws IOException {
                    if(!base.exists())  return 0;
                    assert target.channel==null;

                    try {
                        class CopyImpl extends Copy {
                            private int copySize;

                            public CopyImpl() {
                                setProject(new org.apache.tools.ant.Project());
                            }

                            @Override
                            protected void doFileOperations() {
                                copySize = super.fileCopyMap.size();
                                super.doFileOperations();
                            }

                            public int getNumCopied() {
                                return copySize;
                            }
                        }

                        CopyImpl copyTask = new CopyImpl();
                        copyTask.setTodir(new File(target.remote));
                        copyTask.addFileset(Util.createFileSet(base,fileMask,excludes));
                        copyTask.setOverwrite(true);
                        copyTask.setIncludeEmptyDirs(false);

                        copyTask.execute();
                        return copyTask.getNumCopied();
                    } catch (BuildException e) {
                        throw new IOException2(""Failed to copy ""+base+""/""+fileMask+"" to ""+target,e);
                    }
                }
            });
        } else
        if(this.channel==null) {
            // local -> remote copy
            final Pipe pipe = Pipe.createLocalToRemote();

            Future<Void> future = target.actAsync(new FileCallable<Void>() {
                public Void invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        readFromTar(remote+'/'+fileMask, f,TarCompression.GZIP.extract(pipe.getIn()));
                        return null;
                    } finally {
                        pipe.getIn().close();
                    }
                }
            });
            int r = writeToTar(new File(remote),fileMask,excludes,TarCompression.GZIP.compress(pipe.getOut()));
            try {
                future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
            return r;
        } else {
            // remote -> local copy
            final Pipe pipe = Pipe.createRemoteToLocal();

            Future<Integer> future = actAsync(new FileCallable<Integer>() {
                public Integer invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        return writeToTar(f,fileMask,excludes,TarCompression.GZIP.compress(pipe.getOut()));
                    } finally {
                        pipe.getOut().close();
                    }
                }
            });
            try {
                readFromTar(remote+'/'+fileMask,new File(target.remote),TarCompression.GZIP.extract(pipe.getIn()));
            } catch (IOException e) {// BuildException or IOException
                try {
                    future.get(3,TimeUnit.SECONDS);
                    throw e;    // the remote side completed successfully, so the error must be local
                } catch (ExecutionException x) {
                    // report both errors
                    throw new IOException2(Functions.printThrowable(e),x);
                } catch (TimeoutException _) {
                    // remote is hanging
                    throw e;
                }
            }
            try {
                return future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
        }
    }",Copies the files that match the given file mask to the specified target node.,1,937
3336,"public static String capitalize(CharSequence self) {
        String s = self.toString();
        if (s == null || s.length() == 0) return s;
        return Character.toUpperCase(s.charAt(0)) + s.substring(1);
    }",Convenience method to capitalize the first letter of a CharSequence (typically the first letter of a word).,1,88
3337,"@SuppressWarnings(""unchecked"")
        @Override
        public RightProjection<L, R> filter(Predicate<? super R> predicate) {
            Objects.requireNonNull(predicate);
            if (either.isLeft() || (either.isRight() && predicate.test(asRight()))) {
                return this;
            } else {
                return Nothing.<L, R>instance().right();
            }
        }","Returns  RightProjection(Right(value)), if the underlying Either of this projection is a Right and the right value satisfies the given predicate.",1,121
3338,"public Elements select(String cssQuery) {
        return Selector.select(cssQuery, this);
    }","Find elements that match the  Selector CSS query, with this element as the starting context.",1,30
3339,"public static boolean isExtensionsAvailable() {
        final Jenkins jenkins = Jenkins.getInstanceOrNull();
        return jenkins != null && jenkins.getInitLevel().compareTo(InitMilestone.EXTENSIONS_AUGMENTED) >= 0;
    }","During Jenkins start-up, before  InitMilestone#PLUGINS_STARTED the extensions lists will be empty and they are not guaranteed to be fully populated until after  InitMilestone#EXTENSIONS_AUGMENTED.",1,63
3340,"public int getLockTime() {
        return txOutputs.get(0).getLockTime();
    }","The locktime is stored in the LOCKUP txOutput, which is the first txOutput.",1,28
3341,"public DevfileImpl workspaceToDevFile(WorkspaceConfigImpl wsConfig)
      throws WorkspaceExportException {
    if (wsConfig.getEnvironments().size() > 1) {
      throw new WorkspaceExportException(
          format(
              ""Workspace '%s' cannot be converted to devfile because it contains multiple environments"",
              wsConfig.getName()));
    }

    DevfileImpl devfile = new DevfileImpl();
    devfile.setSpecVersion(CURRENT_SPEC_VERSION);
    devfile.setName(wsConfig.getName());

    // Manage projects
    devfile.setProjects(
        wsConfig
            .getProjects()
            .stream()
            .map(projectConverter::toDevfileProject)
            .collect(toCollection(ArrayList::new)));

    for (CommandImpl command : wsConfig.getCommands()) {
      devfile.getCommands().add(commandConverter.toDevfileCommand(command));
    }

    for (ComponentProvisioner componentProvisioner : componentProvisioners) {
      componentProvisioner.provision(devfile, wsConfig);
    }

    return devfile;
  }",Exports workspace config into  DevfileImpl,1,239
3342,"public <S> Codec<F, S> compose(Bijection<T, S>  bijection) {
        return new ComposedCodec<F, T, S>(this, bijection);
    }",Composes this codec and the given bijection into a codec using the bijection as an adapter from  T->S and vice versa.,1,55
3343,"public KBTemplate remove(long kbTemplateId)
		throws NoSuchTemplateException, SystemException {
		return remove(Long.valueOf(kbTemplateId));
	}",Removes the k b template with the primary key from the database.,1,38
3344,"public int getPriority(final Class<?> contract) {
        return contracts.containsKey(contract) ? contracts.get(contract) : defaultPriority;
    }","Get the default provider priority, if set,  -1 if not set.",1,45
3345,"protected FXBendConnectionOperation getBendOperation() {
		return (FXBendConnectionOperation) super.getOperation();
	}",Returns an  FXBendConnectionOperation that is extracted from the operation created by  #createOperation().,1,27
3346,"public static double[] toPrimitive(final Double[] array) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_DOUBLE_ARRAY;
        }
        final double[] result = new double[array.length];
        for (int i = 0; i < array.length; i++) {
            result[i] = array[i].doubleValue();
        }
        return result;
    }",Converts an array of object Doubles to primitives. This method returns null if null array input.,1,150
3347,"public Duration getMaxExclusive() {
        return _maxExclusive;
    } //-- getMaxExclusive",Returns the maximum exclusive value that this XSDuration can hold.,1,21
3348,"public double getBeta() {
        return scale;
    }",Returns the scale parameter of  this distribution.,1,19
3349,"static MethodHandle lookupMethod(Class<?> receiverClass, String name, MethodType type) {
         // we don't consider receiver an argument/counting towards arity
         type = type.dropParameterTypes(0, 1);
         Definition.MethodKey key = new Definition.MethodKey(name, type.parameterCount());
         // check whitelist for matching method
         for (Class<?> clazz = receiverClass; clazz != null; clazz = clazz.getSuperclass()) {
             RuntimeClass struct = Definition.getRuntimeClass(clazz);

             if (struct != null) {
                 Method method = struct.methods.get(key);
                 if (method != null) {
                     return method.handle;
                 }
             }

             for (final Class<?> iface : clazz.getInterfaces()) {
                 struct = Definition.getRuntimeClass(iface);

                 if (struct != null) {
                     Method method = struct.methods.get(key);
                     if (method != null) {
                         return method.handle;
                     }
                 }
             }
         }

         // no matching methods in whitelist found
         throw new IllegalArgumentException(""Unable to find dynamic method ["" + name + ""] with signature ["" + type + ""] "" +
                 ""for class ["" + receiverClass.getCanonicalName() + ""]."");
    }",Looks up handle for a dynamic method call.,1,351
3350,"public int getTiedJobCount() {
        // denormalize for performance
        // we don't need to respect security as much when returning a simple count
        SecurityContext context = ACL.impersonate(ACL.SYSTEM);
        try {
            int result = 0;
            // top level gives the map without checking security of items in the map
            // therefore best performance
            for (TopLevelItem topLevelItem : Jenkins.getInstance().getItemMap().values()) {
                if (topLevelItem instanceof AbstractProject) {
                    final AbstractProject project = (AbstractProject) topLevelItem;
                    if (this.equals(project.getAssignedLabel())) {
                        result++;
                    }
                }
                if (topLevelItem instanceof ItemGroup) {
                    Stack<ItemGroup> q = new Stack<ItemGroup>();
                    q.push((ItemGroup) topLevelItem);

                    while (!q.isEmpty()) {
                        ItemGroup<?> parent = q.pop();
                        // we run the risk of permissions checks in ItemGroup#getItems()
                        // not much we can do here though
                        for (Item i : parent.getItems()) {
                            if (i instanceof AbstractProject) {
                                final AbstractProject project = (AbstractProject) i;
                                if (this.equals(project.getAssignedLabel())) {
                                    result++;
                                }
                            }
                            if (i instanceof ItemGroup) {
                                q.push((ItemGroup) i);
                            }
                        }
                    }
                }
            }
            return result;
        } finally {
            SecurityContextHolder.setContext(context);
        }
    }",Returns a count of projects that are tied on this node.,1,371
3351,"protected List<Sku> readAllActiveSkus(int page, int pageSize) {
        List<Sku> skus = skuDao.readAllActiveSkus(page, pageSize);
        ArrayList<Sku> skusToIndex = new ArrayList<Sku>();

        if (skus != null && !skus.isEmpty()) {
            for (Sku sku : skus) {
                //If the sku is not active, don't index it...
                if (!sku.isActive()) {
                    continue;
                }

                //If this is the default sku and the product has product options
                //and is not allowed to be sold without product options
                if (sku.getDefaultProduct() != null
                        && !sku.getProduct().getCanSellWithoutOptions()
                        && !sku.getProduct().getProductOptionXrefs().isEmpty()) {
                    continue;
                }

                skusToIndex.add(sku);
            }
        }

        return skusToIndex;
    }",This method to read active skus utilizes paging to improve performance.,1,218
3352,"private String findWildCardMatch(String viewId, String actionRef, String outcome) {
        String returnViewId = null;

        Assert.assert_it(null != wildcardMatchList);

	Iterator iter = wildcardMatchList.iterator();
	while (iter.hasNext()) {
	    String fromViewId = (String)iter.next();  
	    
            // See if the entire wildcard string (without the trailing ""*"" is
            // contained in the incoming viewId.  Ex: /foobar is contained with /foobarbaz
            // If so, then we have found our largest pattern match..
            // If not, then continue on to the next case;

            if (viewId.indexOf(fromViewId, 0) == -1) {
                continue;
            }

            // Append the trailing ""*"" so we can do our map lookup;

            String wcFromViewId = fromViewId + ""*""; 
            List caseList = (List)caseListMap.get(wcFromViewId);

            if (caseList == null) {
                return null;
            }

            // If we've found a match, then we need to evaluate actionref/outcome in the following
            // order:  1)elements specifying both from-action-ref and from-outcome
            // 2) elements specifying only from-outcome
            // 3) elements specifying only from-action-ref
            // 4) elements where both from-action-ref and from-outcome are null

            returnViewId = determineViewFromActionRefOutcome(caseList, actionRef, outcome);
            if (returnViewId != null) {
                break;
            }
        } 
        return returnViewId;
    }",This method traverses the wild card match List (containing from-view-id strings and finds the List of cases for each from-view-id string.,1,271
3353,"public static Fraction getFraction(String str) {
        if (str == null) {
            throw new IllegalArgumentException(""The string must not be null"");
        }
        // parse double format
        int pos = str.indexOf('.');
        if (pos >= 0) {
            return getFraction(Double.parseDouble(str));
        }

        // parse X Y/Z format
        pos = str.indexOf(' ');
        if (pos > 0) {
            int whole = Integer.parseInt(str.substring(0, pos));
            str = str.substring(pos + 1);
            pos = str.indexOf('/');
            if (pos < 0) {
                throw new NumberFormatException(""The fraction could not be parsed as the format X Y/Z"");
            } else {
                int numer = Integer.parseInt(str.substring(0, pos));
                int denom = Integer.parseInt(str.substring(pos + 1));
                return getFraction(whole, numer, denom);
            }
        }

        // parse Y/Z format
        pos = str.indexOf('/');
        if (pos < 0) {
            // simple whole number
            return getFraction(Integer.parseInt(str), 1);
        } else {
            int numer = Integer.parseInt(str.substring(0, pos));
            int denom = Integer.parseInt(str.substring(pos + 1));
            return getFraction(numer, denom);
        }
    }",Creates a Fraction from a String. The formats accepted are:  double String containing a dot 'X Y/Z' 'Y/Z' 'X' (a simple whole number)  and a .,1,400
3354,"public TreeSet<Object> getElevationDomain() {
        if (!hasElevation()) {
            return null;
        }
        // parse the values from the reader, they are exposed as strings...
        String[] elevationValues = reader.getMetadataValue(ELEVATION_DOMAIN).split("","");
        TreeSet<Object> elevations = new TreeSet<Object>(ELEVATION_COMPARATOR);
        for (String val : elevationValues) {
            try {
                elevations.add(parseNumberOrRange(val));
            } catch (Exception e) {
                LOGGER.log(Level.WARNING, e.getMessage(), e);
            }
        }

        return elevations;
    }","Returns the full set of elevation values (either as Double or NumberRange), sorted from smaller to higher",1,164
3355,"private boolean removeEmptyIncompatibleQueues(String queueToCreate,
      FSQueueType queueType) {
    queueToCreate = ensureRootPrefix(queueToCreate);

    // Ensure queueToCreate is not root and doesn't have the default queue in its
    // ancestry.
    if (queueToCreate.equals(ROOT_QUEUE) ||
        queueToCreate.startsWith(
            ROOT_QUEUE + ""."" + YarnConfiguration.DEFAULT_QUEUE_NAME + ""."")) {
      return false;
    }

    FSQueue queue = queues.get(queueToCreate);
    // Queue exists already.
    if (queue != null) {
      if (queue instanceof FSLeafQueue) {
        if (queueType == FSQueueType.LEAF) {
          // if queue is already a leaf then return true
          return true;
        }
        // remove incompatibility since queue is a leaf currently
        // needs to change to a parent.
        return removeQueueIfEmpty(queue);
      } else {
        if (queueType == FSQueueType.PARENT) {
          return true;
        }
        // If it's an existing parent queue and needs to change to leaf, 
        // remove it if it's empty.
        return removeQueueIfEmpty(queue);
      }
    }

    // Queue doesn't exist already. Check if the new queue would be created
    // under an existing leaf queue. If so, try removing that leaf queue.
    int sepIndex = queueToCreate.length();
    sepIndex = queueToCreate.lastIndexOf('.', sepIndex-1);
    while (sepIndex != -1) {
      String prefixString = queueToCreate.substring(0, sepIndex);
      FSQueue prefixQueue = queues.get(prefixString);
      if (prefixQueue != null && prefixQueue instanceof FSLeafQueue) {
        return removeQueueIfEmpty(prefixQueue);
      }
      sepIndex = queueToCreate.lastIndexOf('.', sepIndex-1);
    }
    return true;
  }","Make way for the given queue if possible, by removing incompatible queues with no apps in them.",1,385
3356,"public boolean removeAll (CharArray array) {
		int size = this.size;
		int startSize = size;
		char[] items = this.items;
		for (int i = 0, n = array.size; i < n; i++) {
			char item = array.get(i);
			for (int ii = 0, nn = size; ii < nn; ii++) {
				if (item == items[ii]) {
					removeIndex(ii);
					size--;
					break;
				}
			}
		}
		return size != startSize;
	}",Removes from this array all of elements contained in the specified array.,1,192
3357,"public static PropertyValue convert(PropertyValue value, int targetType,
            NamePathMapper mapper) {
        int sourceType = value.getType().tag();
        if (sourceType == targetType) {
            return value;
        }
        switch (targetType) {
        case PropertyType.BINARY:
            Blob blob = value.getValue(Type.BINARY);
            return newBinary(blob);
        case PropertyType.BOOLEAN:
            return newBoolean(value.getValue(Type.BOOLEAN));
        case PropertyType.DATE:
            return newDate(value.getValue(Type.DATE));
        case PropertyType.DOUBLE:
            return newDouble(value.getValue(Type.DOUBLE));
        case PropertyType.LONG:
            return newLong(value.getValue(Type.LONG));
        case PropertyType.DECIMAL:
            return newDecimal(value.getValue(Type.DECIMAL));
        }
        // for other types, the value is first converted to a string
        String v = value.getValue(Type.STRING);
        switch (targetType) {
        case PropertyType.STRING:
            return newString(v);
        case PropertyType.PATH:
            switch (sourceType) {
            case PropertyType.BINARY:
            case PropertyType.STRING:
            case PropertyType.NAME:
                return newPath(v);
            case PropertyType.URI:
                URI uri = URI.create(v);
                if (uri.isAbsolute()) {
                    // uri contains scheme
                    throw new IllegalArgumentException(
                            ""Failed to convert URI "" + v + "" to PATH"");
                }
                String p = uri.getPath();
                if (p.startsWith(""./"")) {
                    p = p.substring(2);
                }
                return newPath(v);
            }
            break;
        case PropertyType.NAME: 
            switch (sourceType) {
            case PropertyType.BINARY:
            case PropertyType.STRING:
            case PropertyType.PATH:
                // path might be a name (relative path of length 1)
                // try conversion via string
                return newName(getOakPath(v, mapper));
            case PropertyType.URI:
                URI uri = URI.create(v);
                if (uri.isAbsolute()) {
                    // uri contains scheme
                    throw new IllegalArgumentException(
                            ""Failed to convert URI "" + v + "" to PATH"");
                }
                String p = uri.getPath();
                if (p.startsWith(""./"")) {
                    p = p.substring(2);
                }
                return newName(getOakPath(v, mapper));
            }
            break;
        case PropertyType.REFERENCE:
            switch (sourceType) {
            case PropertyType.BINARY:
            case PropertyType.STRING:
            case PropertyType.WEAKREFERENCE:
                return newReference(v);
            }
            break;
        case PropertyType.WEAKREFERENCE:
            switch (sourceType) {
            case PropertyType.BINARY:
            case PropertyType.STRING:
            case PropertyType.REFERENCE:
                return newWeakReference(v);
            }
            break;
        case PropertyType.URI:
            switch (sourceType) {
            case PropertyType.BINARY:
            case PropertyType.STRING:
                return newUri(v);
            case PropertyType.NAME:
                // prefix name with ""./"" (JCR 2.0 spec 3.6.4.8)
                return newUri(""./"" + v);
            case PropertyType.PATH:
                // prefix name with ""./"" (JCR 2.0 spec 3.6.4.9)
                return newUri(""./"" + v);
            }
        }
        throw new IllegalArgumentException(
                ""Unsupported conversion from property type "" + 
                        PropertyType.nameFromValue(sourceType) + 
                        "" to property type "" +
                        PropertyType.nameFromValue(targetType));
    }",Converts the given value to a value of the specified target type.,1,917
3358,"private static Map<String, Map<WorkerSlot, WorkerResources>> computeTopoToNodePortToResources(
        Map<String, SchedulerAssignment> schedAssignments) {
        Map<String, Map<WorkerSlot, WorkerResources>> ret = new HashMap<>();
        for (Entry<String, SchedulerAssignment> schedEntry : schedAssignments.entrySet()) {
            ret.put(schedEntry.getKey(), schedEntry.getValue().getScheduledResources());
        }
        return ret;
    }",Convert topology-id -> SchedulerAssignment to topology-id -> WorkerSlot WorkerResources.,1,124
3359,"public PlaybackInfo copyWithTimeline(Timeline timeline, Object manifest) {
    return new PlaybackInfo(
        timeline,
        manifest,
        periodId,
        startPositionUs,
        contentPositionUs,
        playbackState,
        isLoading,
        trackGroups,
        trackSelectorResult,
        loadingMediaPeriodId,
        bufferedPositionUs,
        totalBufferedDurationUs,
        positionUs);
  }",Copies playback info with new timeline and manifest.,1,82
3360,"@Override
    @XmlElement(name = ""initiativeType"")
    public InitiativeType getInitiativeType() {
        return super.getInitiativeType();
    }",Type of initiative under which the aggregate dataset was produced.,1,38
3361,"protected Message doReceive(Session session, MessageConsumer consumer) throws JMSException {
		try {
			// Use transaction timeout (if available).
			long timeout = getReceiveTimeout();
			JmsResourceHolder resourceHolder =
					(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory());
			if (resourceHolder != null && resourceHolder.hasTimeout()) {
				timeout = Math.min(timeout, resourceHolder.getTimeToLiveInMillis());
			}
			Message message = receiveFromConsumer(consumer, timeout);
			if (session.getTransacted()) {
				// Commit necessary - but avoid commit call within a JTA transaction.
				if (isSessionLocallyTransacted(session)) {
					// Transacted session created by this template -> commit.
					JmsUtils.commitIfNecessary(session);
				}
			}
			else if (isClientAcknowledge(session)) {
				// Manually acknowledge message, if any.
				if (message != null) {
					message.acknowledge();
				}
			}
			return message;
		}
		finally {
			JmsUtils.closeMessageConsumer(consumer);
		}
	}",Actually receive a JMS message.,1,246
3362,"public void open(Configuration parameters) throws Exception {
				super.open(parameters);

				List<Tuple2<Integer, Long>> offsets = getRuntimeContext().getBroadcastVariableWithInitializer(
						""counts"",
						new BroadcastVariableInitializer<Tuple2<Integer, Long>, List<Tuple2<Integer, Long>>>() {
							@Override
							public List<Tuple2<Integer, Long>> initializeBroadcastVariable(Iterable<Tuple2<Integer, Long>> data) {
								// sort the list by task id to calculate the correct offset
								List<Tuple2<Integer, Long>> sortedData = Lists.newArrayList(data);
								Collections.sort(sortedData, new Comparator<Tuple2<Integer, Long>>() {
									@Override
									public int compare(Tuple2<Integer, Long> o1, Tuple2<Integer, Long> o2) {
										return o1.f0.compareTo(o2.f0);
									}
								});
								return sortedData;
							}
						});

				// compute the offset for each partition
				for (int i = 0; i < getRuntimeContext().getIndexOfThisSubtask(); i++) {
					start += offsets.get(i).f1;
				}
			}",Method that assigns a unique  Long value to all elements in the input data set.,1,303
3363,"public Account remove(Account account) throws SystemException {
		return super.remove(account);
	}",Removes the account from the database.,1,31
3364,"@Override
	public String getDefault() {
		OdfElement parentElement = (OdfElement)getOwnerElement();
		String defaultValue = null;
		if (parentElement != null) {
			defaultValue = DEFAULT_VALUE;			
		}
		return defaultValue;
	}",Returns the default value of @odf.attribute smil:fadeColor dependent of its element name,1,73
3365,"public static LithoView create(Context context, Component component) {
    return create(new ComponentContext(context), component);
  }",Create a new  LithoView instance and initialize it with the given  Component root.,1,40
3366,"private int toTextPosition(Vector2f mousePos) {
        Vector2f textAbsPos = text.getAbsolutePosition();
        mousePos = new Vector2f(Math.max(mousePos.x, textAbsPos.x), Math.max(mousePos.y, textAbsPos.y));
        Vector2f relative = new Vector2f(mousePos.x - textAbsPos.x, mousePos.y - textAbsPos.y);
        
        //multi line
        if (isMultiLine()) {
            relative.x = relative.x - getPadding().y - getPadding().w;
            //clicked bottom of text container
            //TODO if scrolling down is jumping (when mouse button is pressed), it could be caused by the following line
            if (mousePos.y >= (textAbsPos.y + getSize().y + getScrollPosition())) {
                return text.getText().length();
            }
            //clicked top of text container
            else if (mousePos.y <= textAbsPos.y) {
                return 0;
            }
            //calculate the cursor position
            else {
                for (int i = 0; i < text.getText().length();) {
                    //first calculate the height
                    if (calcTextHeight(text.getText().substring(0, i)) >= relative.y) {
                        for (int j = i; j < text.getText().length(); j++) {
                            //than calculate the width
                            if (calcTextWidth(text.getText().substring(i, j)) > relative.x || text.getText().charAt(j) == '\n' || j == text.getText().length() - 1) {
                                return j;
                            }
                        }
                    }
                    
                    i = findNextChar(i, '\n', false);
                }

                return text.getText().length();
            }
        }
        //single line
        else {
            //clicked right from text
            if (mousePos.x >= (textAbsPos.x + text.getSize().x)) {
                return text.getText().length();
            }
            //clicked left from text
            else if (mousePos.x <= textAbsPos.x) {
                return 0;
            }
            //clicked somewhere on the text
            else {            
                //calculate the cursor position
                for (int i = 0; i <= text.getText().length(); i++) {
                    if (calcTextWidth(text.getText().substring(0, i)) >= relative.x) {
                        return i;
                    }
                }
            }
        }
        
        return 0;
    }",Get the cursor position at the given display position.,1,672
3367,"public long getMultiplier() {
            String key = getValue().toLowerCase(Locale.ENGLISH);
            return timeTable.get(key);
        }",Convert the value to a multiplier (millisecond to unit).,1,43
3368,"private Pointer getNativeFunctionCallInstructionPointerInNativeStub(Pointer instructionPointer, boolean fatalIfNotFound) {
        final TargetMethod nativeStubTargetMethod = targetMethodFor(instructionPointer);
        //FatalError.check(nativeStubTargetMethod.classMethodActor().isNative(), ""Instruction pointer not within a native stub"");
        if (nativeStubTargetMethod != null) {
            final int targetCodePosition = nativeStubTargetMethod.targetCodePositionFor(instructionPointer);
            final int nativeFunctionCallPosition = nativeStubTargetMethod.findNextCall(targetCodePosition);
            final Pointer nativeFunctionCall = nativeFunctionCallPosition < 0 ? Pointer.zero() : nativeStubTargetMethod.codeStart().plus(nativeFunctionCallPosition);
            if (!nativeFunctionCall.isZero()) {
                return nativeFunctionCall;
            }
        }
        if (fatalIfNotFound) {
            if (nativeStubTargetMethod == null) {
                Log.print(""Could not find native stub for instruction pointer "");
                Log.println(instructionPointer);
            } else {
                Log.print(""Could not find native function call after "");
                Log.print(nativeStubTargetMethod.codeStart());
                Log.print(""+"");
                Log.print(instructionPointer.minus(nativeStubTargetMethod.codeStart()).toLong());
                Log.print("" in "");
                Log.printMethodActor(nativeStubTargetMethod.classMethodActor(), true);
            }
            throw FatalError.unexpected(""Could not find native function call in native stub"");
        }
        return instructionPointer;
    }",Gets the address of the call to the native function in a plain NativeStubGenerator native stub.,1,309
3369,"public int computeLength()
    {
        int newRdnlength = StringTools.getBytesUtf8( newRDN.toString() ).length;
        modifyDNRequestLength = 1 + TLV.getNbBytes( LdapDN.getNbBytes( entry ) ) + LdapDN.getNbBytes( entry ) + 1
            + TLV.getNbBytes( newRdnlength ) + newRdnlength + 1 + 1 + 1; // deleteOldRDN

        if ( newSuperior != null )
        {
            modifyDNRequestLength += 1 + TLV.getNbBytes( LdapDN.getNbBytes( newSuperior ) )
                + LdapDN.getNbBytes( newSuperior );
        }

        return 1 + TLV.getNbBytes( modifyDNRequestLength ) + modifyDNRequestLength;
    }",Compute the ModifyDNRequest length,1,190
3371,"@Nullable
  @SuppressWarnings(""unchecked"")
  protected <T> SelectorList<T> getSelectorList(String attributeName, Type<T> type) {
    Integer index = ruleClass.getAttributeIndex(attributeName);
    if (index == null) {
      return null;
    }
    Object attrValue = attributes.getAttributeValue(index);
    if (!(attrValue instanceof SelectorList)) {
      return null;
    }
    if (((SelectorList<?>) attrValue).getOriginalType() != type) {
      throw new IllegalArgumentException(""Attribute "" + attributeName
          + "" is not of type "" + type + "" in rule "" + ruleLabel);
    }
    return (SelectorList<T>) attrValue;
  }","Returns a  SelectorList for the given attribute if the attribute is configurable for this rule, null otherwise.",1,201
3372,"@Override
    public double inverseCumulativeProbability(final double p)
        throws MathException {
        if (p == 0) {
            return 0;
        }
        if (p == 1) {
            return Double.POSITIVE_INFINITY;
        }
        return super.inverseCumulativeProbability(p);
    }","For this distribution, X, this method returns the critical point x, such that  P(X < x) = p.",1,85
3373,"public static long[] toPrimitive(final Long[] array, final long valueForNull) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_LONG_ARRAY;
        }
        final long[] result = new long[array.length];
        for (int i = 0; i < array.length; i++) {
            Long b = array[i];
            result[i] = (b == null ? valueForNull : b.longValue());
        }
        return result;
    }",Converts an array of object Long to primitives handling null. This method returns null if null array input.,1,182
3374,"public O serve(ServiceRequestContext ctx, I req) throws Exception {
        final RoutingContext routingCtx = ctx.routingContext();
        final Routed<Service<I, O>> result = findService(routingCtx.overridePath(ctx.mappedPath()));
        if (!result.isPresent()) {
            throw HttpStatusException.of(HttpStatus.NOT_FOUND);
        }

        final Optional<String> childPrefix = result.route().prefix();
        if (childPrefix.isPresent()) {
            final Route newRoute = Route.builder().prefix(ctx.route().prefix().get() +
                                                          childPrefix.get().substring(1)).build();

            final ServiceRequestContext newCtx = new CompositeServiceRequestContext(
                    ctx, newRoute, result.routingResult().path());
            try (SafeCloseable ignored = newCtx.push(false)) {
                return result.value().serve(newCtx, req);
            }
        } else {
            return result.value().serve(ctx, req);
        }
    }",Finds the  Service whose  Route matches the  path.,1,295
3375,"public long length(Context context) {
        return RootHelper.getDocumentFile(path, context, false).length();
    }",Helper method to find length of file under otg,1,37
3376,"public static Collection plus(Collection left, Object right) {
        Collection answer;
        if (left instanceof Set)
            answer = new HashSet();
        else
            answer = new ArrayList(left.size() + 1);
        answer.addAll(left);
        answer.add(right);
        return answer;
    }",Create a collection as a union of a Collection and an Object.,1,100
3377,"public static IntegrationFlowBuilder from(Flux<Message<?>> publisher) {
		FluxMessageChannel reactiveChannel = new FluxMessageChannel();
		reactiveChannel.subscribeTo(publisher);
		return from(reactiveChannel);
	}",Populate a  FluxMessageChannel to the  IntegrationFlowBuilder chain and subscribe it to the provided  Publisher.,1,56
3378,"public static INDArray create(double[] data, int[] shape, char ordering) {
        //TODO: duplicate code and issue #8013
        if (shape.length == 1) {
            if (shape[0] != data.length)
                throw new ND4JIllegalStateException(""Shape of the new array "" + Arrays.toString(shape)
                        + "" doesn't match data length: "" + data.length);
        }

        checkShapeValues(data.length, shape);
        val lshape = ArrayUtil.toLongArray(shape);
       return INSTANCE.create(data, lshape, Nd4j.getStrides(lshape, ordering), ordering, DataType.DOUBLE, Nd4j.getMemoryManager().getCurrentWorkspace());
    }",Create an array withgiven shape and ordering based on a java double array.,1,178
3379,"public <F> ConnectedIterativeDataStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {
		return new ConnectedIterativeDataStreams<T, F>(originalInput, feedbackType, maxWaitTime);
	}","Changes the feedback type of the iteration and allows the user to apply co-transformations on the input and feedback stream, as in a  ConnectedStreams.",1,52
3380,"public DistributionSet generateDistributionSet(final String name, final String version,
            final DistributionSetType type, final Collection<SoftwareModule> modules,
            final boolean requiredMigrationStep) {
        return entityFactory.distributionSet().create().name(name).version(version).description(LOREM.words(10))
                .type(type).modules(modules.stream().map(SoftwareModule::getId).collect(Collectors.toList()))
                .requiredMigrationStep(requiredMigrationStep).build();
    }",Generates  DistributionSet object without persisting it.,1,129
3381,"public List<MenuItem> findMenus(Menu menu, Matcher<MenuItem> matcher, boolean recursive) {
		return menuFinder.findMenus(menu, matcher, recursive);
	}",Finds all menu items matching the given matcher in the given menu.,1,49
3382,"private int getAsInteger(final short key) {
        final Object value = geoKeys.get(key);
        if (value != null) {
            if (value instanceof Number) {
                return ((Number) value).intValue();
            } else try {
                return Integer.parseInt(value.toString());
            } catch (NumberFormatException e) {
                warning(Resources.Keys.InvalidGeoValue_2, value, GeoKeys.name(key));
            }
        }
        return Integer.MIN_VALUE;
    }",Returns a  GeoKeys value as an integer.,1,151
3383,"public Object caseGrid( Grid object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Grid'.,1,25
3384,"public ProtocolProviderService signin(String userName, String password)
        throws OperationFailedException
    {
        ProtocolProviderFactory factory =
            IcqAccRegWizzActivator.getIcqProtocolProviderFactory();

        return this.installAccount(factory, userName, password);
    }","Defines the operations that will be executed when the user clicks on the wizard ""Signin"" button.",1,60
3385,"public static MethodInvocation createFromClass(Class clazz, String methodName) {
        return createFromClass(clazz, methodName, null, null);
    }",Generates a MethodInvocation for specified methodName on the passed class.,1,41
3386,"public static IntentResult parseActivityResult(int resultCode, Intent intent) {
        if (resultCode == Activity.RESULT_OK) {
            String contents = intent.getStringExtra(Intents.Scan.RESULT);
            String formatName = intent.getStringExtra(Intents.Scan.RESULT_FORMAT);
            byte[] rawBytes = intent.getByteArrayExtra(Intents.Scan.RESULT_BYTES);
            int intentOrientation = intent.getIntExtra(Intents.Scan.RESULT_ORIENTATION, Integer.MIN_VALUE);
            Integer orientation = intentOrientation == Integer.MIN_VALUE ? null : intentOrientation;
            String errorCorrectionLevel = intent.getStringExtra(Intents.Scan.RESULT_ERROR_CORRECTION_LEVEL);
            String barcodeImagePath = intent.getStringExtra(Intents.Scan.RESULT_BARCODE_IMAGE_PATH);
            return new IntentResult(contents,
                    formatName,
                    rawBytes,
                    orientation,
                    errorCorrectionLevel,
                    barcodeImagePath);
        }
        return new IntentResult();
    }","Parse activity result, without checking the request code.",1,229
3387,"public Enumerable<EntitySetInfo> getEntitySets() {
    ODataClientRequest request = ODataClientRequest.get(serviceRootUri);
    return Enumerable.create(client.getCollections(request)).cast(EntitySetInfo.class);
  }",Lists all top-level entity-sets for the OData service.,1,54
3388,"public Response writeConfiguration(JSONObject request) {
    try {
      validateViewConfiguration();

      if (isOperator() == false) {
        return Response.status(401).build();
      }

      proxy.request(baseUrl).
            setData(makeConfigUpdateData(request)).
            put();

    } catch (WebApplicationException ex) {
      throw ex;
    } catch (Exception ex) {
      throw new ServiceFormattedException(ex.getMessage(), ex);
    }

    return readConfiguration();
  }",Sets capacity scheduler configuration.,1,151
3389,"protected boolean filterObject(T item, String constraint) {
		if (item instanceof IFilterable) {
			IFilterable filterable = (IFilterable) item;
			return filterable.filter(constraint);
		}
		return false;
	}","This method checks if the provided object is a type of  IFilterable interface, if yes, performs the filter on the implemented method  IFilterable#filter(String).",1,68
3390,"public Timer newTimer(Class<?> klass,
                                String name,
                                String scope,
                                TimeUnit durationUnit,
                                TimeUnit rateUnit) {
        return newTimer(createName(klass, name, scope), durationUnit, rateUnit);
    }","Creates a new  Timer and registers it under the given class, name, and scope.",1,67
3391,"// TODO: detect cycles => private String toString(Object o, Set<Object> visited)
	public static Boolean toBoolean(Object o) {
		return
				(o == null) ? null :
				(o instanceof Boolean) ? (Boolean) o :
				(o instanceof Number) ? numberToBoolean((Number) o) :
				(o instanceof Character) ? (Boolean) ((char) o != 0) :
				(o instanceof String) ? stringToBoolean((String) o) :
				(o.getClass().isArray()) ? toBoolean(unbox(arrayToList(o))) :
				(o instanceof Collection) ? toBoolean(unbox((Collection<?>) o)) :
				(o instanceof Optional) ? toBoolean(((Optional<?>) o).orElse(null)) :
				(o instanceof Option) ? toBoolean(((Option<?>) o).orElse(null)) :
				(o instanceof Try) ? toBoolean(((Try<?>) o).orElse(null)) :
				(o instanceof Either) ? toBoolean(unbox((Either<?,?>) o)) :
				stringToBoolean(o.toString());
	}","Converts an Object o to a Boolean according to these rules:  null -&gt; null Boolean b -&gt; b Number n -&gt; BigDecimal of n is not ZERO Character c -&gt; c as unsigned int is not zero String s -&gt; s.toLowerCase ""true"" =&gt; true, ""false"" =&gt; false, BigDecimal of s is not ZERO, else null Array, Collection, Optional, Option, Try, Either -&gt; the single element contained or null Object o -&gt; toBoolean(o.toString())",1,326
3392,"public boolean removeAll (FloatArray array) {
		int size = this.size;
		int startSize = size;
		float[] items = this.items;
		for (int i = 0, n = array.size; i < n; i++) {
			float item = array.get(i);
			for (int ii = 0, nn = size; ii < nn; ii++) {
				if (item == items[ii]) {
					removeIndex(ii);
					size--;
					break;
				}
			}
		}
		return size != startSize;
	}",Removes from this array all of elements contained in the specified array.,1,192
3393,"private InputStream openAtPosition(long position) throws IOException {
      if (position >= mLength) { // Position is at EOF
        return null;
      }

      // If no stream has been created or if we need to go backward, make a new cached stream.
      if (mStream == null || mInitPos + mStream.getCount() > position) {
        if (mStream != null) { // Close the existing stream if needed
          mStream.close();
        }
        UnderFileSystem ufs = UnderFileSystem.get(mUri, mConfiguration);
        // TODO(calvin): Consider making openAtPosition part of the UFS API
        if (ufs instanceof S3UnderFileSystem) { // Optimization for S3 UFS
          mStream =
              new CountingInputStream(((S3UnderFileSystem) ufs).openAtPosition(mUri, position));
          mInitPos = position;
        } else if (ufs instanceof GCSUnderFileSystem) { // Optimization for GCS UFS
          mStream =
              new CountingInputStream(((GCSUnderFileSystem) ufs).openAtPosition(mUri, position));
          mInitPos = position;
        } else { // Other UFSs can skip efficiently, so open at start of the file
          mStream = new CountingInputStream(ufs.open(mUri));
          mInitPos = 0;
        }
      }

      // We are guaranteed mStream has been created and the initial position has been set.
      // Guaranteed by the previous code block that currentPos <= position.
      long currentPos = mInitPos + mStream.getCount();
      if (position > currentPos) { // Can skip to next position with the same stream
        long toSkip = position - currentPos;
        if (toSkip != mStream.skip(toSkip)) {
          throw new IOException(ExceptionMessage.FAILED_SKIP.getMessage(toSkip));
        }
      }
      return mStream;
    }",Checks if the current stream can be reused to serve the request.,1,378
3394,"static Stream<Short> ofAll(short... elements) {
        Objects.requireNonNull(elements, ""elements is null"");
        return Stream.ofAll(Iterator.ofAll(elements));
    }",Creates a Stream from short values.,1,52
3395,"public Extent getAreaOfInterest() {
        return areaOfInterest;
    }","Returns the spatio-temporal area of interest, or  null if none.",1,19
3396,"public Collection<ConfigProperty> getRequiredConfigurationProperties(String service, PropertyInfo.PropertyType propertyType) {
    Collection<ConfigProperty> matchingProperties = new HashSet<ConfigProperty>();
    Map<String, Map<String, ConfigProperty>> requiredProperties = requiredServiceConfigurations.get(service);
    if (requiredProperties != null) {
      for (Map.Entry<String, Map<String, ConfigProperty>> typePropertiesEntry : requiredProperties.entrySet()) {
        for (ConfigProperty configProperty : typePropertiesEntry.getValue().values()) {
          if (configProperty.getPropertyTypes().contains(propertyType)) {
            matchingProperties.add(configProperty);
          }
        }

      }
    }
    return matchingProperties;
  }",Get required config properties for the specified service which belong to the specified property type.,1,189
3397,"protected int getFirstBoxIndex(int startIndex) {
        if (isEmpty() || startIndex < 0 || startIndex >= size()) {
            return -1;
        } else {
            ListElement element = null;
            int posIndex = startIndex;
            int lastIndex = size();
            while ( posIndex < lastIndex ) {
                element = getElement(posIndex);
                if ( !element.isBox() ) {
                    posIndex++;
                } else {
                    break;
                }
            }
            if ( posIndex != startIndex ) {
                if ( ( element != null ) && element.isBox() ) {
                    return posIndex - 1;
                } else {
                    return startIndex;
                }
            } else {
                return startIndex;
            }
        }
    }","Get the position index of the first box in this sequence, starting at the given index.",1,249
3399,"@Override /* RestInfoProvider */
	public String getMethodSummary(Method method, RestRequest req) throws Exception {
		VarResolverSession vr = req.getVarResolverSession();

		String s = method.getAnnotation(RestMethod.class).summary();
		if (s.isEmpty())
			s = context.getMessages().findFirstString(req.getLocale(), method.getName() + "".summary"");
		if (s != null)
			return vr.resolve(s);
		
		Operation o = getSwaggerOperationFromFile(method, req);
		return o == null ? null : o.getSummary();
	}",Returns the localized summary of the specified java method on this servlet.,1,175
3400,"public final ClassConstantOperand asClassConstant() {
    return (ClassConstantOperand) this;
  }",Cast to an  ClassConstantOperand.,1,25
3401,"public Integer initialTermId()
    {
        return initialTermId;
    }",the initial term id at which a publication will start.,1,20
3402,"public V get(Object key) {
        Page p = getRootPage();
        return (V) Page.get(p, key);
    }","Get the value for the given key, or null if not found.",1,46
3404,"public static Indent logAndIndent(boolean enabled, String msg, Object... args) {
        if (ENABLED) {
            Collection<DebugDumpHandler> dumpHandlers;
            PrintStream output;
            DebugConfig currentConfig = DebugScope.getConfig();
            if (currentConfig != null) {
                dumpHandlers = currentConfig.dumpHandlers();
                output = currentConfig.output();
            } else {
                dumpHandlers = Collections.<DebugDumpHandler> emptyList();
                output = System.out;
            }
            DebugConfigScope configScope = new DebugConfigScope(Debug.fixedConfig(enabled, Debug.isDumpEnabled(), false, false, dumpHandlers, output));
            return new IndentWithEnable(Debug.logAndIndent(msg, args), configScope);
        }
        return noLoggerInstance;
    }","A convenience function which combines enabling/disabling of logging and  #logAndIndent(String, Object...).",1,213
3405,"protected void mergeConfiguration(GraphAlgorithmWrappingBase other) {
		super.mergeConfiguration(other);

		EdgeSourceDegree rhs = (EdgeSourceDegree) other;

		reduceOnTargetId.mergeWith(rhs.reduceOnTargetId);
	}",The degree can be counted from either the edge source or target IDs.,1,52
3406,"public InputStream getSettingsInputStream(String streamKey)
    {
        String path = settingsResources.get(streamKey);

        if (path == null || path.length() == 0)
        {
            logger.warn(""Missing resource for key: "" + streamKey);
            return null;
        }

        return settingsPack.getClass()
            .getClassLoader().getResourceAsStream(path);
    }",Returns a stream from a given identifier.,1,108
3407,"public Class loadScriptByName(String scriptName) throws ResourceException, ScriptException {
        ScriptCacheEntry entry = scriptCache.get(scriptName);
        URLConnection conn = rc.getResourceConnection(scriptName);
        Class clazz = null;
        if (entry!=null) clazz=entry.scriptClass;
        if (isSourceNewer(conn, entry)) {
            try {
                clazz = groovyLoader.parseClass(conn.getInputStream(), conn.getURL().getFile());
            } catch (IOException e) {
                throw new ResourceException(e);
            }
        }
        return clazz;
    }","Get the class of the scriptName in question, so that you can instantiate",1,164
3408,"private static Object unbox(Either<?,?> either) {
		return either.isLeft() ? either.left().get() : either.right().get();
	}",Returns the single element of the Either either or null.,1,57
3409,"public SQLUnit toSQL(final Map<String, String> logicAndActualTableMap, final ShardingRule shardingRule) {
        StringBuilder result = new StringBuilder();
        for (Object each : segments) {
            if (!(each instanceof ShardingPlaceholder)) {
                result.append(each);
                continue;
            }
            String logicTableName = ((ShardingPlaceholder) each).getLogicTableName();
            String actualTableName = logicAndActualTableMap.get(logicTableName);
            if (each instanceof TablePlaceholder) {
                result.append(null == actualTableName ? logicTableName : actualTableName);
            } else if (each instanceof SchemaPlaceholder) {
                SchemaPlaceholder schemaPlaceholder = (SchemaPlaceholder) each;
                Optional<TableRule> tableRule = shardingRule.tryFindTableRuleByActualTable(actualTableName);
                if (!tableRule.isPresent() && Strings.isNullOrEmpty(shardingRule.getDefaultDataSourceName())) {
                    throw new ShardingJdbcException(""Cannot found schema name '%s' in sharding rule."", schemaPlaceholder.getLogicSchemaName());
                }
                // TODO 目前只能找到真实数据源名称. 未来需要在初始化sharding rule时创建connection,并验证连接是否正确,并获取出真实的schema的名字, 然后在这里替换actualDataSourceName为actualSchemaName
                // TODO 目前actualDataSourceName必须actualSchemaName一样,才能保证替换schema的场景不出错, 如: show columns xxx
                result.append(tableRule.get().getActualDatasourceNames().iterator().next());
            } else if (each instanceof IndexPlaceholder) {
                IndexPlaceholder indexPlaceholder = (IndexPlaceholder) each;
                result.append(indexPlaceholder.getLogicIndexName());
                if (!Strings.isNullOrEmpty(actualTableName)) {
                    result.append(""_"");
                    result.append(actualTableName);
                }
            } else {
                result.append(each);
            }
        }
        return new SQLUnit(result.toString(), parameters);
    }",Convert to SQL unit.,1,415
3410,"public COSArray getColorValues() throws IOException
    {
        PDFunction tintTransform = getTintTransform();
        if(tintTransform instanceof PDFunctionType2)
        {
            return (COSArray) getDictionary().getDictionaryObject(""C1"");
        }
        else
        {
            log.warn(""Unsupported tint transformation type: ""+tintTransform.getClass().getName() 
                    + "" in ""+getClass().getName()+"".getColorValues()""
                    + "" using color black instead."");
            int numberOfComponents = getAlternateColorSpace().getNumberOfComponents();
            // To get black as color:
            // 0.0f is used for the single value(s) if the colorspace is gray or RGB based
            // 1.0f is used for the single value if the colorspace is CMYK based
            float colorValue = numberOfComponents == 4 ? 1.0f : 0.0f;
            COSArray retval = new COSArray();
            for (int i=0;i<numberOfComponents;i++) 
            {
                retval.add(new COSFloat(colorValue));
            }
            return retval;
        }
    }",Returns the components of the color in the alternate colorspace for a tint value of 1.0.,1,230
3411,"private URI resolveByUri(LogicalReference reference, URI targetUri, LogicalComponent<?> composite)
            throws ResolutionException {
        URI sourceUri = reference.getUri();
        URI targetComponentUri = UriHelper.getDefragmentedName(targetUri);
        LogicalComponent<?> targetComponent = composite.getComponent(targetComponentUri);
        if (targetComponent == null) {
            throw new ComponentReferenceTargetNotFoundException(sourceUri, targetUri);
        }

        String serviceName = targetUri.getFragment();
        if (serviceName != null) {
            if (targetComponent.getService(serviceName) == null) {
                throw new ComponentReferenceTargetNotFoundException(sourceUri, targetUri);
            }
            return targetUri;
        } else if (targetComponent.getServices().size() == 1) {
            LogicalService targetService = targetComponent.getServices().iterator().next();
            return targetService.getUri();
        } else {
            if (targetComponent.getServices().size() > 1) {
                throw new AmbiguousComponentReferenceTargetException(sourceUri, targetComponentUri);
            } else {
                throw new IllegalTargetException(""Target has no services"", sourceUri, targetUri);
            }
        }
    }",Fully resolves a component reference to a target component service based on a URI.,1,315
3412,"@Override
    @XmlElement(name = ""distributionInfo"")
    public Collection<? extends Distribution> getDistributionInfo() {
        return distributionInfo = nonNullCollection(distributionInfo, Distribution.class);
    }",Returns information about the distributor of and options for obtaining the resource(s).,1,53
3413,"public static Logger getLogger()
    {
        return FMLCommonHandler.instance().getFMLLogger();
    }",Get a logger instance  FMLServerHandler#getFMLLogger(),1,30
3414,"private void addChild(int x, int childPageId, SearchRow row) throws SQLException {
        int rowLength = index.getRowSize(data, row, onlyPosition);
        int pageSize = index.getPageStore().getPageSize();
        int last = entryCount == 0 ? pageSize : offsets[entryCount - 1];
        if (last - rowLength < start + CHILD_OFFSET_PAIR_LENGTH) {
            if (entryCount > 0) {
                throw Message.throwInternalError();
            }
            onlyPosition = true;
            rowLength = index.getRowSize(data, row, onlyPosition);
        }
        int offset = last - rowLength;
        int[] newOffsets = new int[entryCount + 1];
        SearchRow[] newRows = new SearchRow[entryCount + 1];
        int[] newChildPageIds = new int[entryCount + 2];
        if (childPageIds != null) {
            System.arraycopy(childPageIds, 0, newChildPageIds, 0, x + 1);
        }
        if (entryCount > 0) {
            System.arraycopy(offsets, 0, newOffsets, 0, x);
            System.arraycopy(rows, 0, newRows, 0, x);
            if (x < entryCount) {
                for (int j = x; j < entryCount; j++) {
                    newOffsets[j + 1] = offsets[j] - rowLength;
                }
                offset = (x == 0 ? pageSize : offsets[x - 1]) - rowLength;
                System.arraycopy(rows, x, newRows, x + 1, entryCount - x);
                System.arraycopy(childPageIds, x + 1, newChildPageIds, x + 2, entryCount - x);
            }
        }
        newOffsets[x] = offset;
        newRows[x] = row;
        newChildPageIds[x + 1] = childPageId;
        start += CHILD_OFFSET_PAIR_LENGTH;
        offsets = newOffsets;
        rows = newRows;
        childPageIds = newChildPageIds;
        entryCount++;
    }",Add a row.,1,593
3415,"public Stream<String> getJobInputs(final UUID jobId) throws IOException {
        Objects.requireNonNull(jobId, ""Manta job id must not be null"");
        String path = String.format(""%s/jobs/%s/live/in"", home, jobId);

        HttpResponse response = httpGet(path);
        final Reader reader = new InputStreamReader(response.getContent());
        final BufferedReader br = new BufferedReader(reader);

        return br.lines().onClose(() -> {
            try {
                br.close();
                response.disconnect();
            } catch (IOException e) {
                throw new UncheckedIOException(e);
            }
        });
    }",Get a stream of all of the input objects submitted for a job. Make sure to close this stream when you are done with otherwise the HTTP socket will remain open.,1,187
3416,"public static String[] split(final String str) {
        return split( str,
                      null,
                      -1 );
    }","Splits the provided text into an array, using whitespace as the separator.",1,42
3417,"public static SQLExecuteCallback<Boolean> getPreparedSQLExecuteCallback(final DatabaseType databaseType, final boolean isExceptionThrown) {
        return new SQLExecuteCallback<Boolean>(databaseType, isExceptionThrown) {
            
            @Override
            protected Boolean executeSQL(final StatementExecuteUnit statementExecuteUnit) throws SQLException {
                return ((PreparedStatement) statementExecuteUnit.getStatement()).execute();
            }
        };
    }",Get execute callback.,1,100
3418,"private static int javaSegmentIndex(PathFragment path) {
    if (path.isAbsolute()) {
      throw new IllegalArgumentException(""path must not be absolute: '"" + path + ""'"");
    }
    int rootIndex = path.getFirstSegment(ImmutableSet.of(""java"", ""javatests"", ""src""));
    if (rootIndex < 0) {
      return rootIndex;
    }
    final boolean isSrc = ""src"".equals(path.getSegment(rootIndex));
    int checkMavenIndex = isSrc ? rootIndex : -1;
    if (rootIndex == 0 || isSrc) {
      // Check for a nested ""src"" directory.
      // Also, to support an existing case, ""javatests"" within ""src"".
      for (int i = rootIndex + 1, max = path.segmentCount() - 2; i <= max; i++) {
        String segment = path.getSegment(i);
        if (""src"".equals(segment)
            || (isSrc && (""javatests"".equals(segment) || ""java"".equals(segment)))) {
          String next = path.getSegment(i + 1);
          if (""com"".equals(next) || ""org"".equals(next) || ""net"".equals(next)) {
            // Check for common first element of java package, to avoid false positives.
            rootIndex = i;
          } else if (""src"".equals(segment)) {
            // Also accept maven style src/(main|test)/(java|resources).
            checkMavenIndex = i;
          }
          break;
        }
      }
    }
    // Check for (main|test)/(java|resources) after /src/.
    if (checkMavenIndex >= 0 && checkMavenIndex + 2 < path.segmentCount()) {
      String next = path.getSegment(checkMavenIndex + 1);
      if (""main"".equals(next) || ""test"".equals(next)) {
        next = path.getSegment(checkMavenIndex + 2);
        if (""java"".equals(next) || ""resources"".equals(next)) {
          rootIndex = checkMavenIndex + 2;
        }
      }
    }
    return rootIndex;
  }",Finds the index of the segment in a Java path fragment that precedes the source root.,1,561
3419,"public static <T extends Map<?, ?>> T notEmpty(T map) {
        return notEmpty(map, DEFAULT_NOT_EMPTY_MAP_EXCEPTION_MESSAGE);
    }",Validate that the specified argument map is neither null nor a size of zero (no elements); otherwise throwing an exception.,1,44
3420,"public static String nullStrToEmpty(Object str) {
        return (str == null ? """" : (str instanceof String ? (String)str : str.toString()));
    }",null Object to empty string  nullStrToEmpty(null) = &quot;&quot;; nullStrToEmpty(&quot;&quot;) = &quot;&quot;; nullStrToEmpty(&quot;aa&quot;) = &quot;aa&quot;;,1,61
3421,"public final TestStatistics getTotal()
    {
	final TestStatistics result = m_testStatisticsFactory.create();

	final java.util.Iterator iterator = m_data.values().iterator();

	while (iterator.hasNext()) {
	    result.add((TestStatistics)iterator.next());
	}

	return result;
    }",Get a new TestStatistics containing the totals of all our entries.,1,97
3422,"public boolean equals(Object object) {
            if (this == object) return true;
            if (object == null || getClass() != object.getClass()) return false;
            Default<?> aDefault = (Default<?>) object;
            return instrumentedType.equals(aDefault.instrumentedType)
                    && classFileVersion.equals(aDefault.classFileVersion)
                    && fieldPool.equals(aDefault.fieldPool)
                    && auxiliaryTypes.equals(aDefault.auxiliaryTypes)
                    && instrumentedMethods.equals(aDefault.instrumentedMethods)
                    && loadedTypeInitializer.equals(aDefault.loadedTypeInitializer)
                    && typeInitializer.equals(aDefault.typeInitializer)
                    && typeAttributeAppender.equals(aDefault.typeAttributeAppender)
                    && asmVisitorWrapper.equals(aDefault.asmVisitorWrapper)
                    && annotationValueFilterFactory.equals(aDefault.annotationValueFilterFactory)
                    && annotationRetention == aDefault.annotationRetention
                    && auxiliaryTypeNamingStrategy.equals(aDefault.auxiliaryTypeNamingStrategy)
                    && implementationContextFactory.equals(aDefault.implementationContextFactory)
                    && typeValidation == aDefault.typeValidation
                    && typePool.equals(aDefault.typePool);
        }",Creates an unresolved version of the dynamic type.,1,281
3423,"public Iterator<RosterItem> getItems(String username) {
        LinkedList<RosterItem> itemList = new LinkedList<RosterItem>();
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = DbConnectionManager.getConnection();
            pstmt = con.prepareStatement(LOAD_ROSTER);
            pstmt.setString(1, username);
            ResultSet rs = pstmt.executeQuery();
            // TODO: this code must be refactored ASAP. Not legal to have two open pstmts
            // TODO: on many databases.
            while (rs.next()) {
                RosterItem item = new RosterItem(rs.getLong(2),
                        new JID(rs.getString(1)),
                        RosterItem.SubType.getTypeFromInt(rs.getInt(3)),
                        RosterItem.AskType.getTypeFromInt(rs.getInt(4)),
                        RosterItem.RecvType.getTypeFromInt(rs.getInt(5)),
                        rs.getString(6),
                        null);
                Connection con2 = DbConnectionManager.getConnection();
                PreparedStatement gstmt = null;
                ResultSet gs = null;
                try {
                    gstmt = con2.prepareStatement(LOAD_ROSTER_ITEM_GROUPS);
                    gstmt.setLong(1, item.getID());
                    gs = gstmt.executeQuery();
                    while (gs.next()) {
                        item.getGroups().add(gs.getString(1));
                    }
                    itemList.add(item);
                }
                finally {
                    try { if (gstmt != null) { gstmt.close(); } }
                    catch (Exception e) { Log.error(e); }
                    try { if (con2 != null) { con2.close(); } }
                    catch (Exception e) { Log.error(e); }
                }
            }
        }
        catch (SQLException e) {
            Log.error(LocaleUtils.getLocalizedString(""admin.error""), e);
        }
        finally {
            try { if (pstmt != null) { pstmt.close(); } }
            catch (Exception e) { Log.error(e); }
            try { if (con != null) { con.close(); } }
            catch (Exception e) { Log.error(e); }
        }
        return itemList.iterator();
    }",Retrieve an iterator of RosterItems for the given user.,1,620
3424,"public static Charset getCharset(CharSequence contentTypeValue, Charset defaultCharset) {
        if (contentTypeValue != null) {
            CharSequence charsetCharSequence = getCharsetAsSequence(contentTypeValue);
            if (charsetCharSequence != null) {
                try {
                    return Charset.forName(charsetCharSequence.toString());
                } catch (UnsupportedCharsetException unsupportedException) {
                    return defaultCharset;
                }
            } else {
                return defaultCharset;
            }
        } else {
            return defaultCharset;
        }
    }",Fetch charset from Content-Type header value.,1,138
3425,"static List<GeoPoint> filterPoints(final List<GeoPoint> input, final double leniencyValue) {
    
    final List<GeoPoint> noIdenticalPoints = new ArrayList<>(input.size());
    
    // Backtrack to find something different from the first point
    int startIndex = -1;
    final GeoPoint comparePoint = input.get(0);
    for (int i = 0; i < input.size()-1; i++) {
      final GeoPoint thePoint = input.get(getLegalIndex(- i - 1, input.size()));
      if (!thePoint.isNumericallyIdentical(comparePoint)) {
        startIndex = getLegalIndex(-i, input.size());
        break;
      }
    }
    if (startIndex == -1) {
      return null;
    }
    
    // Now we can start the process of walking around, removing duplicate points.
    int currentIndex = startIndex;
    while (true) {
      final GeoPoint currentPoint = input.get(currentIndex);
      noIdenticalPoints.add(currentPoint);
      while (true) {
        currentIndex = getLegalIndex(currentIndex + 1, input.size());
        if (currentIndex == startIndex) {
          break;
        }
        final GeoPoint nextNonIdenticalPoint = input.get(currentIndex);
        if (!nextNonIdenticalPoint.isNumericallyIdentical(currentPoint)) {
          break;
        }
      }
      if (currentIndex == startIndex) {
        break;
      }
    }
    
    if (noIdenticalPoints.size() < 3) {
      return null;
    }
    
    // Now, do the depth-first search needed to find a path that has no coplanarities in it.
    // This is, unfortunately, not easy, because coplanarity is not transitive as you walk around the polygon.
    // If point C is not coplanar with edge A-B, there is no guarantee that A is not coplanar with B-C.
    // But we have to produce a polygon that is safe no matter which way it is looked at.
    // The approach I'm taking therefore is to do a depth-first search until we find a valid polygon.
    // This algorithmically awful in the worst case, but luckily we can presume that real-life data
    // does not require more than a couple of iterations.
    
    for  (int i = 0; i < noIdenticalPoints.size(); i++) {
      final SafePath startPath = new SafePath(null, noIdenticalPoints.get(i), i, null);
      // Search, with this as the start path.
      final SafePath resultPath = findSafePath(startPath, noIdenticalPoints, getLegalIndex(i+1, noIdenticalPoints.size()), i, leniencyValue);
      if (resultPath != null && resultPath.previous != null) {
        // Read out result, maintaining ordering
        final List<GeoPoint> rval = new ArrayList<>(noIdenticalPoints.size());
        resultPath.fillInList(rval);
        return rval;
      }
    }
    // No path found.  This means that everything was coplanar.
    return null;
  }",Filter duplicate points and coplanar points.,1,636
3426,"public static ImmutableList<Port> parse(List<String> ports) throws NumberFormatException {
    ImmutableList.Builder<Port> result = new ImmutableList.Builder<>();

    for (String port : ports) {
      Matcher matcher = portPattern.matcher(port);

      if (!matcher.matches()) {
        throw new NumberFormatException(
            ""Invalid port configuration: '""
                + port
                + ""'. Make sure the port is a single number or a range of two numbers separated ""
                + ""with a '-', with or without protocol specified (e.g. '<portNum>/tcp' or ""
                + ""'<portNum>/udp')."");
      }

      // Parse protocol
      int min = Integer.parseInt(matcher.group(1));
      int max = min;
      if (!Strings.isNullOrEmpty(matcher.group(2))) {
        max = Integer.parseInt(matcher.group(2));
      }
      Protocol protocol =
          Protocol.UDP.toString().equals(matcher.group(3)) ? Protocol.UDP : Protocol.TCP;

      // Error if configured as 'max-min' instead of 'min-max'
      if (min > max) {
        throw new NumberFormatException(
            ""Invalid port range '"" + port + ""'; smaller number must come first."");
      }

      // Warn for possibly invalid port numbers
      if (min < 1 || max > 65535) {
        throw new NumberFormatException(
            ""Port number '"" + port + ""' is out of usual range (1-65535)."");
      }

      for (int portNumber = min; portNumber <= max; portNumber++) {
        result.add(new Port(portNumber, protocol));
      }
    }

    return result.build();
  }",Converts/validates a list of strings representing port ranges to an expanded list of,1,417
3427,"@XmlElement(name = ""events"")
  public List<EventsOfOneEntity> getAllEvents() {
    return allEvents;
  }",Get a list of  EventsOfOneEntity instances,1,34
3428,"protected ExitStatus mapResult(Object result) {
		if (result instanceof ExitStatus) {
			return (ExitStatus) result;
		}
		return ExitStatus.FINISHED;
	}","If the result is an  ExitStatus already just return that, otherwise return  ExitStatus#FINISHED.",1,50
3429,"@SafeVarargs
	public static Parser.SubRule subRule(Supplier<Parser>... alternatives) {
		return new Parser.SubRule(alternatives);
	}",Shortcut for  new Parser.SubRule(alternatives).,1,42
3430,"public static boolean matchString(String pattern, String str) {
    	return stringMatcher.matches(pattern, str);
    }","Tests whether or not a string matches specified pattern, which may contain two special characters: '' means zero or more characters '?' means one and only one character",1,37
3431,"public static ParquetWriter create(TableSchema schema, AlluxioURI uri)
      throws IOException {
    return ParquetWriter.create(schema, uri, ROW_GROUP_SIZE, true);
  }",Creates a Parquet writer.,1,48
3432,"@Override
	public TextParagraphElementBase getOdfElement() {
		if (isHeading()) {
			return mHeadingElement;
		} else {
			return mParagraphElement;
		}
	}",Return the TextParagraphElementBase of this paragraph.,1,49
3433,"public static XIDListValue addIDToList(XID actorID, XField field, int index, XID id) {
		XValue value = field.getValue();
		
		if(value == null) {
			return null;
		}
		
		if(value instanceof XIDListValue) {
			XIDListValue listValue = (XIDListValue)value;
			
			// manipulate the contained list
			listValue = addIDToList(listValue, index, id);
			field.setValue(actorID, listValue);
			return listValue;
		} else {
			return null;
		}
	}",Adds a new  XID at the given index to the  XIDListValue of the given  XField (only works if the  XValue of the  XField actually is a  XIDListValue),1,154
3434,"public static boolean overlapConvexPolygons (Polygon p1, Polygon p2, MinimumTranslationVector mtv) {
		return overlapConvexPolygons(p1.getTransformedVertices(), p2.getTransformedVertices(), mtv);
	}",Check whether specified convex polygons overlap.,1,52
3435,"public static <T> CompletableFuture<List<T>> runWithAvailableThreads(
        Executor executor,
        IntSupplier availableThreads,
        Collection<Supplier<T>> suppliers) throws RejectedExecutionException {

        int threadsToUse = availableThreads.getAsInt();
        if (threadsToUse < suppliers.size()) {
            Iterable<List<Supplier<T>>> partitions = Iterables.partition(suppliers, suppliers.size() / threadsToUse);

            ArrayList<CompletableFuture<List<T>>> futures = new ArrayList<>(threadsToUse + 1);
            for (List<Supplier<T>> partition : partitions) {
                Supplier<List<T>> executePartition = () -> Lists2.copyAndReplace(partition, Supplier::get);
                futures.add(CompletableFuture.supplyAsync(executePartition, executor));
            }
            return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
                .thenApply(aVoid -> {
                    ArrayList<T> finalResult = new ArrayList<>(suppliers.size());
                    for (CompletableFuture<List<T>> future: futures) {
                        finalResult.addAll(future.join());
                    }
                    return finalResult;
                });
        } else {
            ArrayList<CompletableFuture<T>> futures = new ArrayList<>(suppliers.size());
            for (Supplier<T> supplier : suppliers) {
                futures.add(CompletableFuture.supplyAsync(supplier, executor));
            }
            return CompletableFutures.allAsList(futures);
        }
    }",Uses up to availableThreads threads to run all suppliers.,1,412
3436,"public Date getExpires() {
        return expires;
    }",Get the Date that this Token expires,1,19
3437,"public String getReplyText(TaskRepository taskRepository, ITask task, ITaskComment taskComment, boolean includeTask) {
		if (taskComment == null) {
			return Messages.AbstractRepositoryConnectorUi_InReplyToDescription;
		} else if (includeTask) {
			return MessageFormat.format(Messages.AbstractRepositoryConnectorUi_InReplyToTaskAndComment,
					task.getTaskKey(), taskComment.getNumber());
		} else {
			return MessageFormat.format(Messages.AbstractRepositoryConnectorUi_InReplyToComment,
					taskComment.getNumber());
		}
	}","Override to return a specific textual reference to a comment, e.g.",1,125
3438,"public DependencyTree getDependencyTree()
    {
        return dependencyTree;
    }",Gets the computed dependency tree for the Maven project.,1,20
3439,"public final Control getButtonNew() {
		return (Control) getUIControl(BIND_ID_NEW);
	}",Return the 'New' control.,1,28
3440,"public List<Output> getOutputs() {
        return outputs;
    }",This method is used to obtain the meta-information descriptions of  Outputs defined by this type.,1,22
3441,"public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            return INDEX_NOT_FOUND;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        for (int i = startIndex; i >= 0; i--) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the last index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex will return  #INDEX_NOT_FOUND (-1).,1,172
3442,"public boolean isManaged(File file) {
        return VersioningManager.getInstance().getOwner(file) instanceof SubversionVCS && !SvnUtils.isPartOfSubversionMetadata(file);
    }",Tests whether a file or directory should receive the STATUS_NOTVERSIONED_NOTMANAGED status.,1,46
3443,"public static String[] diffline(StringBuilder line1, StringBuilder line2) {
        int m = line1.length();
        int n = line2.length();
        if (n == 0 || m == 0) {
            return new String[] { line1.toString(), line2.toString() };
        }

        int s = 0;
        char[] csl1 = new char[m + SPAN_LEN];
        line1.getChars(0, m--, csl1, 0);
        char[] csl2 = new char[n + SPAN_LEN];
        line2.getChars(0, n--, csl2, 0);
        while (s <= m && s <= n && csl1[s] == csl2[s]) {
            s++ ;
        }
        while (s <= m && s <= n && csl1[m] == csl2[n]) {
            m-- ;
            n-- ;
        }

        String[] ret = new String[2];
        // deleted
        if (s <= m) {
            m++;
            System.arraycopy(csl1, m, csl1, m + SPAN_LEN, line1.length() - m);
            System.arraycopy(csl1, s, csl1, s + SPAN_D.length(), m - s);
            SPAN_E.getChars(0, SPAN_E.length(), csl1, m + SPAN_D.length());
            SPAN_D.getChars(0, SPAN_D.length(), csl1, s);
            ret[0] = new String(csl1);
        } else {
            ret[0] = line1.toString();
        }
        // added
        if (s <= n) {
            n++;
            System.arraycopy(csl2, n, csl2, n + SPAN_LEN, line2.length() - n);
            System.arraycopy(csl2, s, csl2, s + SPAN_A.length(), n - s);
            SPAN_E.getChars(0, SPAN_E.length(), csl2, n + SPAN_A.length());
            SPAN_A.getChars(0, SPAN_A.length(), csl2, s);
            ret[1] = new String(csl2);
        } else {
            ret[1] = line2.toString();
        }
        return ret;
    }",Tag changes in the given line1 and line2 for highlighting.,1,695
3444,"public List<IAnchor> getWayAnchors() {
		int wayPointsCount = getWayAnchorsSize();
		List<IAnchor> wayPointAnchors = new ArrayList<IAnchor>(
				wayPointsCount);
		for (int i = 0; i < wayPointsCount; i++) {
			IAnchor wayAnchor = getWayAnchor(i);
			if (wayAnchor == null) {
				throw new IllegalStateException(
						""Way anchor may never be null."");
			}
			wayPointAnchors.add(wayAnchor);
		}
		return wayPointAnchors;
	}",Returns a  List containing the way  IAnchor anchors currently assigned to this  Connection.,1,141
3445,"public boolean removeAll (BooleanArray array) {
		int size = this.size;
		int startSize = size;
		boolean[] items = this.items;
		for (int i = 0, n = array.size; i < n; i++) {
			boolean item = array.get(i);
			for (int ii = 0, nn = size; ii < nn; ii++) {
				if (item == items[ii]) {
					removeIndex(ii);
					size--;
					break;
				}
			}
		}
		return size != startSize;
	}",Removes from this array all of elements contained in the specified array.,1,192
3446,"public synchronized FileInfo getFileStatus(int fileId, String path) throws IOException {
    if (path == null) {
      path = """";
    }
    if (fileId == -1 && !path.startsWith(TachyonURI.SEPARATOR)) {
      throw new IOException(""Illegal path parameter: "" + path);
    }

    while (!mIsClosed) {
      connect();

      try {
        return mClient.getFileStatus(fileId, path);
      } catch (InvalidPathException e) {
        throw new IOException(e);
      } catch (TException e) {
        LOG.error(e.getMessage(), e);
        mConnected = false;
      }
    }
    return null;
  }",Get the file status from master server.,1,211
3447,"public static String getStyle(Edge edge) {
		return (String) edge.attributesProperty().get(STYLE__GNE);
	}",Returns the value of the  #STYLE__GNE attribute of the given  Edge.,1,37
3448,"@SuppressWarnings(""unchecked"")
        @Override
        public <U> RightProjection<L, U> map(Function<? super R, ? extends U> mapper) {
            Objects.requireNonNull(mapper);
            if (either.isRight())
                return Right.<L, U>of(mapper.apply(asRight())).right();
            else {
                return (RightProjection<L, U>) this;
            }
        }",Maps the right value if the projected Either is a Right.,1,123
3449,"public Map<String, SolrInfoMBean> getInfoRegistry() {
    return infoRegistry;
  }",Returns a Map of name vs SolrInfoMBean objects.,1,25
3450,"public SimpleFormatter getByVariant(CharSequence variant) {
        assert isValid();
        int idx = StandardPlural.indexOrOtherIndexFromString(variant);
        SimpleFormatter template = templates[idx];
        return (template == null && idx != StandardPlural.OTHER_INDEX) ?
                templates[StandardPlural.OTHER_INDEX] : template;
    }",Gets the SimpleFormatter for a particular variant.,1,91
3451,"public static ExpressionEvaluator getExpressionEvaluator() {
	return FACES_EXPRESSION_EVALUATOR;
    }",Return the single  ExpressionEvaluator instance.,1,21
3452,"public int findColumn(String columnName) throws SQLException {
        return getResultSet().findColumn(columnName);
    }",Maps the given getResultSet() column name to its getResultSet() column index.,1,33
3453,"public String getDisplayName(ULocale displayLocale) {
	return getDisplayName(localeID, displayLocale);
    }",Return this locale name localized for display in the provided locale.,1,28
3454,"public static Rule<String> contains(CharSequence s) {
        Preconditions.checkNotNull(s, ""String"");
        return new ContainsRule(s);
    }",Creates a  Rule which evaluates to true when passed in a string which contains the specified char sequence.,1,46
3455,"public static Collection<Object> getIQProviders() {
        return Collections.unmodifiableCollection(iqProviders.values());
    }",Returns an unmodifiable collection of all IQProvider instances.,1,33
3456,"public Cell resolve(Cell reference, boolean cacheBlocks) throws IOException {
    return resolve(reference, cacheBlocks, -1, true);
  }","Reads the cell from the mob file, and the read point does not count.",1,44
3457,"static SchemaVersion extractSchemaVersion(String migrationName) {
        String rawVersion;

		// Handle the description
		String description = null;
		int descriptionPos = migrationName.indexOf(""__"");
		if (descriptionPos < 0) {
            rawVersion = migrationName;
        } else {
			description = migrationName.substring(descriptionPos + 2).replaceAll(""_"", "" "");
			rawVersion = migrationName.substring(0, descriptionPos);
		}

		return new SchemaVersion(rawVersion, description);
	}",Extracts the schema version from a migration name formatted as 1_2__Description.,1,144
3458,"public String getMetricIdentifier(String metricName, CharacterFilter filter, int reporterIndex) {
		if (filter != null) {
			scopeString = ScopeFormat.concat(filter, registry.getDelimiter(reporterIndex), scopeComponents);
			return scopeString + registry.getDelimiter(reporterIndex) + filter.filterCharacters(metricName);
		} else {
			scopeString = ScopeFormat.concat(registry.getDelimiter(reporterIndex), scopeComponents);
			return scopeString + registry.getDelimiter(reporterIndex) + metricName;
		}
	}","Returns the fully qualified metric name using the configured delimiter for the reporter with the given index, for example  ""host-7.taskmanager-2.window_word_count.my-mapper.metricName""",1,138
3459,"private boolean deleteRecursiveInternal(long fileId, boolean replayed, long opTimeMs)
      throws FileDoesNotExistException, IOException {
    try {
      return deleteInternal(fileId, true, replayed, opTimeMs);
    } catch (DirectoryNotEmptyException e) {
      throw new IllegalStateException(
          ""deleteInternal should never throw DirectoryNotEmptyException when recursive is true"",
          e);
    }
  }","Convenience method for avoiding  DirectoryNotEmptyException when calling  #deleteInternal(long, boolean, boolean, long).",1,92
3460,"public Set getProperties() {
        return this.propertiesSet;
    }",Getter for the propertiesSet.,1,21
3461,"T call(URL url) throws IOException, RegistryException {
    boolean isHttpProtocol = ""http"".equals(url.getProtocol());
    if (!allowInsecureRegistries && isHttpProtocol) {
      throw new InsecureRegistryException(url);
    }

    try (Connection connection = connectionFactory.apply(url)) {
      Request.Builder requestBuilder =
          Request.builder()
              .setUserAgent(userAgent)
              .setHttpTimeout(Integer.getInteger(""jib.httpTimeout""))
              .setAccept(registryEndpointProvider.getAccept())
              .setBody(registryEndpointProvider.getContent());
      // Only sends authorization if using HTTPS.
      if (!isHttpProtocol || Boolean.getBoolean(""sendCredentialsOverHttp"")) {
        requestBuilder.setAuthorization(authorization);
      }
      Response response =
          connection.send(registryEndpointProvider.getHttpMethod(), requestBuilder.build());

      return registryEndpointProvider.handleResponse(response);

    } catch (HttpResponseException ex) {
      // First, see if the endpoint provider handles an exception as an expected response.
      try {
        return registryEndpointProvider.handleHttpResponseException(ex);

      } catch (HttpResponseException httpResponseException) {
        if (httpResponseException.getStatusCode() == HttpStatusCodes.STATUS_CODE_BAD_REQUEST
            || httpResponseException.getStatusCode() == HttpStatusCodes.STATUS_CODE_NOT_FOUND
            || httpResponseException.getStatusCode()
                == HttpStatusCodes.STATUS_CODE_METHOD_NOT_ALLOWED) {
          // The name or reference was invalid.
          ErrorResponseTemplate errorResponse =
              JsonTemplateMapper.readJson(
                  httpResponseException.getContent(), ErrorResponseTemplate.class);
          RegistryErrorExceptionBuilder registryErrorExceptionBuilder =
              new RegistryErrorExceptionBuilder(
                  registryEndpointProvider.getActionDescription(), httpResponseException);
          for (ErrorEntryTemplate errorEntry : errorResponse.getErrors()) {
            registryErrorExceptionBuilder.addReason(errorEntry);
          }

          throw registryErrorExceptionBuilder.build();

        } else if (httpResponseException.getStatusCode() == HttpStatusCodes.STATUS_CODE_FORBIDDEN) {
          throw new RegistryUnauthorizedException(
              registryEndpointRequestProperties.getServerUrl(),
              registryEndpointRequestProperties.getImageName(),
              httpResponseException);

        } else if (httpResponseException.getStatusCode()
            == HttpStatusCodes.STATUS_CODE_UNAUTHORIZED) {
          if (isHttpProtocol) {
            // Using HTTP, so credentials weren't sent.
            throw new RegistryCredentialsNotSentException(
                registryEndpointRequestProperties.getServerUrl(),
                registryEndpointRequestProperties.getImageName());

          } else {
            // Using HTTPS, so credentials are missing.
            throw new RegistryUnauthorizedException(
                registryEndpointRequestProperties.getServerUrl(),
                registryEndpointRequestProperties.getImageName(),
                httpResponseException);
          }

        } else if (httpResponseException.getStatusCode()
                == HttpStatusCodes.STATUS_CODE_TEMPORARY_REDIRECT
            || httpResponseException.getStatusCode()
                == HttpStatusCodes.STATUS_CODE_MOVED_PERMANENTLY
            || httpResponseException.getStatusCode() == STATUS_CODE_PERMANENT_REDIRECT) {
          // 'Location' header can be relative or absolute.
          URL redirectLocation = new URL(url, httpResponseException.getHeaders().getLocation());
          return call(redirectLocation);

        } else {
          // Unknown
          throw httpResponseException;
        }
      }

    } catch (HttpHostConnectException | SSLPeerUnverifiedException ex) {
      // Tries to call with HTTP protocol if HTTPS failed to connect.
      // Note that this will not succeed if 'allowInsecureRegistries' is false.
      if (""https"".equals(url.getProtocol())) {
        GenericUrl httpUrl = new GenericUrl(url);
        httpUrl.setScheme(""http"");
        return call(httpUrl.toURL());
      }

      throw ex;

    } catch (NoHttpResponseException ex) {
      throw new RegistryNoResponseException(ex);
    }
  }",Calls the registry endpoint with a certain  URL.,1,828
3462,"public static RemoveFilesDialogFragment newInstance(OCFile file) {
        ArrayList<OCFile> list = new ArrayList<>();
        list.add(file);
        return newInstance(list);
    }",Convenience factory method to create new RemoveFilesDialogFragment instances for a single file,1,55
3463,"public double taylor(final double[] ds, final int dsOffset, final double ... delta) {
        double value = 0;
        for (int i = getSize() - 1; i >= 0; --i) {
            final int[] orders = getPartialDerivativeOrders(i);
            double term = ds[dsOffset + i];
            for (int k = 0; k < orders.length; ++k) {
                if (orders[k] > 0) {
                    term *= FastMath.pow(delta[k], orders[k]) / ArithmeticUtils.factorial(orders[k]);
                }
            }
            value += term;
        }
        return value;
    }",Evaluate Taylor expansion of a derivative structure.,1,220
3465,"public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String name,
			P publisher, ParameterizedTypeReference<T> typeReference) {

		Assert.notNull(name, ""'key' must not be null"");
		Assert.notNull(publisher, ""'publisher' must not be null"");
		Assert.notNull(typeReference, ""'typeReference' must not be null"");

		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference);
	}","Variant of  #fromMultipartAsyncData(String, Publisher, Class) that accepts a  ParameterizedTypeReference for the element type, which allows specifying generic type information.",1,111
3466,"public TableOperation create(Expression callExpr) {
		return callExpr.accept(calculatedTableCreator);
	}",Creates a valid  CalculatedTableOperation operation.,1,27
3467,"public static long uniform(long n) {
        if (n <= 0L) throw new IllegalArgumentException(""argument must be positive: "" + n);

        // https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#longs-long-long-long-
        long r = random.nextLong();
        long m = n - 1;

        // power of two
        if ((n & m) == 0L) {
            return r & m;
        }

        // reject over-represented candidates
        long u = r >>> 1;
        while (u + m - (r = u % n) < 0L) {
            u = random.nextLong() >>> 1;
        }
        return r;
    }","Returns a random long integer uniformly in [0, n).",1,196
3468,"public boolean isDefault() {
        return defaultQualifier;
    }",Returns true if the qualifier is the default.,1,19
3469,"protected Connection getConnection() {
		return (Connection) getHost().getVisual();
	}",Returns the  Connection that is manipulated by this policy.,1,29
3470,"public static <S extends Publisher<T>, T> BodyInserter<S> fromPublisher(S publisher,
			ResolvableType elementType) {

		Assert.notNull(publisher, ""'publisher' must not be null"");
		Assert.notNull(elementType, ""'elementType' must not be null"");
		return BodyInserter.of(
				(response, configuration) -> writeWithMessageWriters(response, configuration,
						publisher, elementType),
				() -> publisher
		);
	}",Return a  BodyInserter that writes the given  Publisher.,1,118
3471,"public static long[] toPrimitive(final Long[] array) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_LONG_ARRAY;
        }
        final long[] result = new long[array.length];
        for (int i = 0; i < array.length; i++) {
            result[i] = array[i].longValue();
        }
        return result;
    }",Converts an array of object Longs to primitives. This method returns null if null array input.,1,150
3472,"@Override
  public JsonValue nth(long n) throws Exception 
  {
    if (n<0 || n>=count()) {
      return null;
    }
    if (n < cacheSize) {     // read from cache
      JsonValue value = getCache((int)n);
      JsonValue copiedValue = value.getEncoding().newInstance();
      copiedValue.setCopy(value);
      return copiedValue;
    } else {                  // read from file
      JsonIterator iter = iter();
      boolean valid = iter.moveN(n-cacheSize);
      assert valid;
      return iter.current();
    }
  }",Returns the item at position n or null if there is no such element.,1,176
3473,"public static boolean intersectPolygons (Polygon p1, Polygon p2, Polygon overlap) {
		//reusable points to trace edges around polygon
		floatArray2.clear();
		floatArray.clear();
		floatArray2.addAll(p1.getTransformedVertices());
		for (int i = 0; i < p2.getTransformedVertices().length; i += 2) {
			ep1.set(p2.getTransformedVertices()[i], p2.getTransformedVertices()[i+1]);
			//wrap around to beginning of array if index points to end;
			if (i < p2.getTransformedVertices().length - 2) {
				ep2.set(p2.getTransformedVertices()[i + 2], p2.getTransformedVertices()[i + 3]);
			} else {
				ep2.set(p2.getTransformedVertices()[0], p2.getTransformedVertices()[1]);
			}
			if (floatArray2.size == 0) {
				return false;
			}
			s.set(floatArray2.get(floatArray2.size - 2), floatArray2.get(floatArray2.size - 1));
			for (int j = 0; j < floatArray2.size; j += 2) {
				e.set(floatArray2.get(j), floatArray2.get(j + 1));
				//determine if point is inside clip edge
				if (Intersector.pointLineSide(ep2, ep1, e) > 0) {
					if (!(Intersector.pointLineSide(ep2, ep1, s) > 0)) {
						Intersector.intersectLines(s, e, ep1, ep2, ip);
						floatArray.add(ip.x);
						floatArray.add(ip.y);
					}
					floatArray.add(e.x);
					floatArray.add(e.y);
				} else if (Intersector.pointLineSide(ep2, ep1, s) > 0) {
					Intersector.intersectLines(s, e, ep1, ep2, ip);
					floatArray.add(ip.x);
					floatArray.add(ip.y);
				}
				s.set(e.x, e.y);
			}
			floatArray2.clear();
			floatArray2.addAll(floatArray);
			floatArray.clear();
		}
		if (! (floatArray2.size == 0)) {
			overlap.setVertices(floatArray2.toArray());
			return true;
		} else {
			return false;
		}
	}",Intersects the two closed polygons and returns the polygon resulting from the intersection.,1,636
3474,"private LockOutFlag checkUserDisabled(Node responseNode) {
        try {
            Node userNode = responseNode.selectSingleNode(""return"");

            // Gets the username
            String username = userNode.selectSingleNode(""username"").getText();

            // Gets the enabled field
            boolean isEnabled = Boolean.valueOf(userNode.selectSingleNode(""enabled"").getText());
            if (isEnabled) {
                // We're good, indicate that they're not locked out.
                return null;
            }
            else {
                // Creates the lock out flag
                return new LockOutFlag(username, null, null);
            }
        }
        catch (Exception e) {
            // Hrm.  This is not good.  We have to opt on the side of positive.
            Log.error(""Error while looking up user's disabled status from Clearspace: "", e);
            return null;
        }
    }",Examines the XML returned about a user to find out if they are enabled or disabled.,1,182
3475,"public static ClassRidgetMapper getInstance() {
		return CRM.getInstance();
	}",Answer the singleton ClassRidgetMapper,1,25
3476,"public Fraction pow(int power) {
        if (power == 1) {
            return this;
        } else if (power == 0) {
            return ONE;
        } else if (power < 0) {
            if (power==Integer.MIN_VALUE) { // MIN_VALUE can't be negated.
                return this.invert().pow(2).pow(-(power/2));
            }
            return this.invert().pow(-power);
        } else {
            Fraction f = this.multiplyBy(this);
            if ((power % 2) == 0) { // if even...
                return f.pow(power/2);
            } else { // if odd...
                return f.pow(power/2).multiplyBy(this);
            }
        }
    }",Gets a fraction that is raised to the passed in power. The returned fraction is in reduced form.,1,227
3477,"public static String center(CharSequence self, Number numberOfChars, CharSequence padding) {
        String s = self.toString();
        String padding1 = padding.toString();
        int numChars = numberOfChars.intValue();
        if (numChars <= s.length()) {
            return s;
        } else {
            int charsToAdd = numChars - s.length();
            String semiPad = charsToAdd % 2 == 1 ?
                    getPadding(padding1, charsToAdd / 2 + 1) :
                    getPadding(padding1, charsToAdd / 2);
            if (charsToAdd % 2 == 0)
                return semiPad + s + semiPad;
            else
                return semiPad.substring(0, charsToAdd / 2) + s + semiPad;
        }
    }","Pad a CharSequence to a minimum length specified by numberOfChars, appending the supplied padding CharSequence around the original as many times as needed keeping it centered.",1,234
3478,"public static <C extends Comparable<E>, E> Rule<C> eq(E value) {
        return new EqRule<C, E>(value);
    }",Returns a rule which evaluates to true if the supplied input is equals to the given value.,1,52
3479,"protected boolean addCompletedDownload(DownloadItem downloadItem) {
        DownloadInfo downloadInfo = downloadItem.getDownloadInfo();
        String description = downloadInfo.getDescription();
        if (TextUtils.isEmpty(description)) description = downloadInfo.getFileName();
        try {
            // Exceptions can be thrown when calling this, although it is not
            // documented on Android SDK page.
            long downloadId = mDownloadManagerDelegate.addCompletedDownload(
                    downloadInfo.getFileName(), description, downloadInfo.getMimeType(),
                    downloadInfo.getFilePath(), downloadInfo.getContentLength(),
                    downloadInfo.getOriginalUrl(), downloadInfo.getReferer(),
                    downloadInfo.getDownloadGuid());
            downloadItem.setSystemDownloadId(downloadId);
            return true;
        } catch (RuntimeException e) {
            Log.w(TAG, ""Failed to add the download item to DownloadManager: "", e);
            if (downloadInfo.getFilePath() != null) {
                File file = new File(downloadInfo.getFilePath());
                if (!file.delete()) {
                    Log.w(TAG, ""Failed to remove the unsuccessful download"");
                }
            }
        }
        return false;
    }",Adds a completed download into Android DownloadManager.,1,272
3480,"static String[] resolveContextLocations(ContextLoader contextLoader, Class<?> clazz) {
		Assert.notNull(contextLoader, ""ContextLoader must not be null"");
		Assert.notNull(clazz, ""Class must not be null"");

		boolean processConfigurationClasses = (contextLoader instanceof ResourceTypeAwareContextLoader)
				&& ResourceType.CLASSES == ((ResourceTypeAwareContextLoader) contextLoader).getResourceType();
		LocationsResolver locationsResolver = processConfigurationClasses ? classNameLocationsResolver
				: resourcePathLocationsResolver;

		Class<ContextConfiguration> annotationType = ContextConfiguration.class;
		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz);
		Assert.notNull(declaringClass, String.format(
			""Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]"", annotationType,
			clazz));

		final List<String> locationsList = new ArrayList<String>();

		while (declaringClass != null) {
			ContextConfiguration contextConfiguration = declaringClass.getAnnotation(annotationType);

			if (logger.isTraceEnabled()) {
				logger.trace(String.format(""Retrieved @ContextConfiguration [%s] for declaring class [%s]."",
					contextConfiguration, declaringClass));
			}

			String[] resolvedLocations = locationsResolver.resolveLocations(contextConfiguration, declaringClass);
			String[] processedLocations = contextLoader.processLocations(declaringClass, resolvedLocations);
			locationsList.addAll(0, Arrays.asList(processedLocations));

			declaringClass = contextConfiguration.inheritLocations() ? AnnotationUtils.findAnnotationDeclaringClass(
				annotationType, declaringClass.getSuperclass()) : null;
		}

		return StringUtils.toStringArray(locationsList);
	}","Resolves  ApplicationContext resource locations for the supplied  Class class, using the supplied  ContextLoader to  ContextLoader#processLocations(Class, String...) process the locations.",1,379
3481,"protected String getLocalePrefix() {
	    if (BroadleafRequestContext.getBroadleafRequestContext() != null) {
	        Locale locale = BroadleafRequestContext.getBroadleafRequestContext().getLocale();
	        if (locale != null) {
	            return locale.getLocaleCode() + ""_"";
	        }
	    }
	    return getDefaultLocalePrefix();
	}",Determines if there is a locale prefix that needs to be applied to the given field for this particular request.,1,93
3482,"public Reflector call(String name, Object... args) throws ReflectException {
        Class<?>[] types = getTypes(args);

        try {
            Method method = exactMethod(name, types);
            return with(method, obj, args);
        } catch (NoSuchMethodException e) {
            try {
                Method method = similarMethod(name, types);
                return with(method, obj, args);
            } catch (NoSuchMethodException e1) {
                throw new ReflectException(e1);
            }
        }
    }",Call current  Reflector#obj method,1,162
3483,"public boolean login() throws LoginException
    {
        // Ignore this module if already authenticated
        if ( m_subject.getPrincipals().contains( Role.AUTHENTICATED ) )
        {
            // If login ignored, remove asserted role
            m_principalsToRemove.add( Role.ASSERTED );
            return false;
        }
        
        // Otherwise, let's go and look for the cookie!
        HttpRequestCallback hcb = new HttpRequestCallback();
        Callback[] callbacks = new Callback[]
        { hcb };
        try
        {
            m_handler.handle( callbacks );
            HttpServletRequest request = hcb.getRequest();
            HttpSession session = ( request == null ) ? null : request.getSession( false );
            String sid = ( session == null ) ? NULL : session.getId();
            String name = getUserCookie( request );
            if ( name == null )
            {
                if ( log.isDebugEnabled() )
                {
                    log.debug( ""No cookie "" + PREFS_COOKIE_NAME + "" present in session ID=:  "" + sid );
                }
                throw new FailedLoginException( ""The user cookie was not found."" );
            }
            
            if ( log.isDebugEnabled() )
            {
                log.debug( ""Logged in session ID="" + sid );
                log.debug( ""Added Principals "" + name + "",Role.ASSERTED,Role.ALL"" );
            }
            // If login succeeds, commit these principals/roles
            m_principals.add( new WikiPrincipal( name, WikiPrincipal.FULL_NAME ) );
            m_principals.add( Role.ASSERTED );
            m_principals.add( Role.ALL );
            
            // If login succeeds, overwrite these principals/roles
            m_principalsToOverwrite.add( WikiPrincipal.GUEST );
            m_principalsToOverwrite.add( Role.ANONYMOUS );
            
            // If login fails, remove these roles
            m_principalsToRemove.add( Role.ASSERTED );
            return true;
        }
        catch( IOException e )
        {
            log.error( ""IOException: "" + e.getMessage() );
            return false;
        }
        catch( UnsupportedCallbackException e )
        {
            String message = ""Unable to handle callback, disallowing login."";
            log.error( message, e );
            throw new LoginException( message );
        }

    }",Logs in the user by calling back to the registered CallbackHandler with an HttpRequestCallback.,1,575
3484,"// FIXME: Should really get a Date object and do proper comparisons.
    //        This is terribly wasteful.
    public List<WikiPage> getRecentChanges(String space)
    {
        try
        {
            List<WikiPage>   pages = m_contentManager.getAllPages(space);
            Collections.sort( pages, PAGE_TIME_COMPARATOR );
            return pages;
        }
        catch( ProviderException e )
        {
            log.error( ""Unable to fetch all pages: "",e);
            return null;
        }
    }","Returns a List of WikiPages, sorted in time order of last change (i.e.",1,109
3485,"String[] getFileNamePatterns() {
        String[] result;
        if (fileNamePatternCount == 0) {
            result = noFileNamePatterns;
        } else {
            result = new String[fileNamePatternCount];
            int srcIndex = fileNamePatternCount - 1;
            int dstIndex = 0;
            do {
                result[dstIndex++] = fileNamePatterns[srcIndex--];
            } while (srcIndex != -1);
        }
        return result;
    }",Returns last used file name patterns in order from the most recently used ones to the oldest ones.,1,135
3486,"@NonNull
        public PreparedPutObjects<T> prepare() {
            final ContentResolverTypeMapping<T> typeMapping = storIOContentResolver.internal().typeMapping(type);

            if (putResolver == null && typeMapping != null) {
                putResolver = typeMapping.putResolver();
            }

            checkNotNull(putResolver, ""StorIO can not perform put of objects = "" +
                    objects + ""\nof type "" + type +
                    "" without type mapping or Operation resolver."" +
                    ""\n Please add type mapping or Operation resolver"");

            return new PreparedPutObjects<T>(
                    storIOContentResolver,
                    putResolver,
                    objects
            );
        }",Builds new instance of  PreparedPutObjects.,1,154
3487,"public static ResultSet search(Connection conn, String text, int limit, int offset) throws SQLException {
        return search(conn, text, limit, offset, false);
    }",Searches from the full text index for this database.,1,58
3488,"public GlobalDescr globalStatement( PackageDescrBuilder pkg ) throws RecognitionException {
        GlobalDescrBuilder global = null;
        try {
            global = helper.start( pkg,
                                   GlobalDescrBuilder.class,
                                   null );

            // 'global'
            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.GLOBAL,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            // type
            String type = type();
            if ( state.backtracking == 0 ) global.type( type );
            if ( state.failed ) return null;

            // identifier
            Token id = match( input,
                              DRLLexer.ID,
                              null,
                              null,
                              DroolsEditorType.IDENTIFIER_TYPE );
            if ( state.failed ) return null;
            if ( state.backtracking == 0 ) {
                global.identifier( id.getText() );
                helper.setParaphrasesValue( DroolsParaphraseTypes.GLOBAL,
                                            id.getText() );
            }

        } catch ( RecognitionException re ) {
            reportError( re );
        } finally {
            helper.end( GlobalDescrBuilder.class,
                        global );
        }
        return (global != null) ? global.getDescr() : null;
    }",globalStatement := GLOBAL type ID,1,360
3489,"public DiagramViewPart updateView(final String id, final String name, final Object model,
            final IPropertyHolder propertyHolder) {
        // register the manager as part listener if necessary
        registerPartListener();

        // get the view
        IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        IWorkbenchPage page = window.getActivePage();
        DiagramViewPart diagramView = getView(id);
        ViewContext viewContext = idContextMapping.get(id);
        if (diagramView != null && viewContext != null) {
            // set the view name
            if (name != null) {
                diagramView.setName(name);
            }

            // update the view context
            if (model != null) {
                page.bringToTop(diagramView);
                // update the view context and viewer
                if (!LightDiagramServices.getInstance().updateViewContext(viewContext, model,
                        propertyHolder)) {
                    return null;
                }
            }
            return diagramView;
        }
        return null;
    }",Updates the diagram view with the given identifier with a specified name and model.,1,249
3490,"public String toString() {
    return mLevel + ""_"" + mAlias;
  }",Request space from StorageDir candidates in the StorageTier.,1,29
3491,"@Override
    public final Card getCard() {
        return this.card;
    }",Gets the card.,1,26
3492,"public boolean canEditPage() {
		if(getEditPrivs() <= 1) {
			return true;
		}else {
			return false;
		}
	}","Returns true if user has site.upd, simplepage.upd, or is page owner.",1,49
3493,"public TimeValue getLatency() {
        return latency;
    }",The latency interval during which out-of-order records should be handled.,1,19
3494,"public Object put(Object key, Object value) {
        boolean result = false;
        Collection coll = getCollection(key);
        if (coll == null) {
            coll = createCollection(1);
            result = coll.add(value);
            if (coll.size() > 0) {
                // only add if non-zero size to maintain class state
                getMap().put(key, coll);
                result = false;
            }
        } else {
            result = coll.add(value);
        }
        return (result ? value : null);
    }",Adds the value to the collection associated with the specified key.,1,166
3495,"public static Tuple2 fromArray(Object[] list) {
		if (list == null || list.length == 0) {
			throw new IllegalArgumentException(""null or empty array, need between 1 and 8 values"");
		}

		switch (list.length){
			case 1:
				return of(list[0], null);
			case 2:
				return of(list[0], list[1]);
			case 3:
				return of(list[0], list[1], list[2]);
			case 4:
				return of(list[0], list[1], list[2], list[3]);
			case 5:
				return of(list[0], list[1], list[2], list[3], list[4]);
			case 6:
				return of(list[0], list[1], list[2], list[3], list[4], list[5]);
			case 7:
				return of(list[0], list[1], list[2], list[3], list[4], list[5], list[6]);
			case 8:
				return of(list[0], list[1], list[2], list[3], list[4], list[5], list[6], list[7]);
		}
		throw new IllegalArgumentException(""too many arguments (""+ list.length + ""), need between 1 and 8 values"");
	}",Create a  Tuple2 with the given array if it is small enough to fit inside a  Tuple2 to  Tuple8.,1,415
3496,"public TrackSelectorResult selectTracks(float playbackSpeed, Timeline timeline)
      throws ExoPlaybackException {
    TrackSelectorResult selectorResult =
        trackSelector.selectTracks(rendererCapabilities, getTrackGroups(), info.id, timeline);
    for (TrackSelection trackSelection : selectorResult.selections.getAll()) {
      if (trackSelection != null) {
        trackSelection.onPlaybackSpeed(playbackSpeed);
      }
    }
    return selectorResult;
  }",Selects tracks for the period.,1,111
3497,"public static MPPointF getPosition(MPPointF center, float dist, float angle) {

        MPPointF p = MPPointF.getInstance(0,0);
        getPosition(center, dist, angle, p);
        return p;
    }",Returns a recyclable MPPointF instance.,1,68
3498,"public I18nMessage stringIsBlank() {
    return createMessage(bundlePath, 11);
  }",Generates a  I18nMessage for a string that was expected to be not blank but wasn't,1,25
3499,"public static PointerBuffer memSlice(PointerBuffer buffer, int offset, int capacity) {
		int position = buffer.position();
		int limit = buffer.limit();

		try {
			buffer.position(position + offset);
			buffer.limit(position + offset + capacity);

			return buffer.slice();
		} finally {
			buffer.position(position);
			buffer.limit(limit);
		}
	}",Returns a slice of the specified buffer between  (buffer.position() + offset) and  (buffer.position() + offset + capacity).,1,131
3500,"public String toSQL(final MasterSlaveRule masterSlaveRule, final ShardingDataSourceMetaData shardingDataSourceMetaData) {
        StringBuilder result = new StringBuilder();
        for (Object each : segments) {
            if (each instanceof SchemaPlaceholder) {
                result.append(shardingDataSourceMetaData.getActualDataSourceMetaData(masterSlaveRule.getMasterDataSourceName()).getSchemeName());
            } else {
                result.append(each);
            }
        }
        return result.toString();
    }",Convert to sql for master slave rule.,1,121
3501,"private int calcTextWidth(String string) {
        return font.getWidth(string);
    }",Calculate the width of the given string.,1,27
3502,"public synchronized CAS getTCas() {
    if (!mFreeInstances.isEmpty()) {
      return (CAS) mFreeInstances.remove(0);
    } else {
      // no instances available
      return null;
    }
  }",Checks out a CAS from the pool.,1,63
3503,"@JsxGetter(@WebBrowser(IE))
    public boolean getExpando() {
        final Object owner = getOwnerElement();
        if (null == owner) {
            return false;
        }
        return !ScriptableObject.hasProperty((Scriptable) owner, getName());
    }",Returns true if the attribute is an custom property.,1,80
3504,"public Throwable getBeforeFailure()
    {
        return before;
    }",Gets the Throwable thrown if at all within the before InterceptorPipeline.,1,20
3505,"protected Comparator<PromotableOrderItem> getQualifierItemComparator(final boolean applyToSalePrice) {
        return new Comparator<PromotableOrderItem>() {
            @Override
            public int compare(PromotableOrderItem o1, PromotableOrderItem o2) {
                Money price = o1.getPriceBeforeAdjustments(applyToSalePrice);
                Money price2 = o2.getPriceBeforeAdjustments(applyToSalePrice);
                
                // highest amount first
                return price2.compareTo(price);
            }
        };
    }","Used in  #applyItemQualifiersAndTargets(PromotableCandidateItemOffer, PromotableOrder) allow for customized sorting for which qualifier items should be attempted to be used first for a promotion.",1,110
3506,"public byte[] getColumn(final byte[] key, final byte[] qualifier) {
    return getColumn(default_table, key, default_family, qualifier);
  }",Retrieve the most recent contents of a single column with the default family and in the default table,1,49
3507,"public static byte getRTPPayloadType(String jmfEncoding, double clockRate)
    {
        if (jmfEncoding == null)
            return MediaFormat.RTP_PAYLOAD_TYPE_UNKNOWN;
        else if (jmfEncoding.equals(AudioFormat.ULAW_RTP))
            return SdpConstants.PCMU;
        else if (jmfEncoding.equals(Constants.ALAW_RTP))
            return SdpConstants.PCMA;
        else if (jmfEncoding.equals(AudioFormat.GSM_RTP))
            return SdpConstants.GSM;
        else if (jmfEncoding.equals(AudioFormat.G723_RTP))
            return SdpConstants.G723;
        else if (jmfEncoding.equals(AudioFormat.DVI_RTP)
                    && (clockRate == 8000))
            return SdpConstants.DVI4_8000;
        else if (jmfEncoding.equals(AudioFormat.DVI_RTP)
                    && (clockRate == 16000))
            return SdpConstants.DVI4_16000;
        else if (jmfEncoding.equals(AudioFormat.ALAW))
            return SdpConstants.PCMA;
        else if (jmfEncoding.equals(AudioFormat.G728_RTP))
            return SdpConstants.G728;
        else if (jmfEncoding.equals(AudioFormat.G729_RTP))
            return SdpConstants.G729;
        else if (jmfEncoding.equals(VideoFormat.H263_RTP))
            return SdpConstants.H263;
        else if (jmfEncoding.equals(VideoFormat.JPEG_RTP))
            return SdpConstants.JPEG;
        else if (jmfEncoding.equals(VideoFormat.H261_RTP))
            return SdpConstants.H261;
        else
            return MediaFormat.RTP_PAYLOAD_TYPE_UNKNOWN;
    }",Gets the RTP payload type corresponding to a specific JMF encoding and clock rate.,1,369
3508,"static HandlerStrategies withDefaults() {
		return builder().build();
	}",Return a new  HandlerStrategies with default initialization.,1,25
3509,"public Vector<Transfer> getFileTransfers() throws RpcClientFailedException {
		try {
			sendRequest(""<get_file_transfers/>\n"");
			Vector<Transfer> transfers = TransfersParser.parse(receiveReply());
			return transfers;
		}
		catch (IOException e) {
			throw new ConnectionFailedException(""Connection failed in getFileTransfers()"", e);
		}
	}",Performs   RPC towards BOINC client,1,95
3510,"public List<Repository> clearCache(Collection<String> repositories) throws HistoryException {
        List<Repository> repos = new ArrayList<>();
        HistoryCache cache = historyCache;

        if (!useCache()) {
            return repos;
        }

        for (Repository r : getReposFromString(repositories)) {
            try {
                cache.clear(r);
                repos.add(r);
                LOGGER.log(Level.INFO,
                        ""History cache for {0} cleared."", r.getDirectoryName());
            } catch (HistoryException e) {
                LOGGER.log(Level.WARNING,
                        ""Clearing history cache for repository {0} failed: {1}"",
                        new Object[]{r.getDirectoryName(), e.getLocalizedMessage()});
            }
        }

        return repos;
    }",Remove history data for a list of repositories,1,208
3511,"public static String parseServer(String ID) {
        if (ID == null) {
            return null;
        }
        int atIndex = ID.indexOf(""@"");
        // If the String ends with '@', return the empty string.
        if (atIndex + 1 > ID.length() || atIndex < 0) {
            return """";
        }
        int slashIndex = ID.indexOf(""/"");
        if (slashIndex > 0) {
            return ID.substring(atIndex + 1, slashIndex);
        }
        else {
            return ID.substring(atIndex + 1);
        }
    }",Returns the name portion of a XMPP ID.,1,175
3512,"public int getFetchDirection() throws SQLException {
        return getResultSet().getFetchDirection();
    }",Retrieves the fetch direction for this getResultSet() object.,1,29
3513,"public AbstractButtonOperator getToolbarButton(String buttonTooltip) {
        ToolbarButtonChooser chooser = new ToolbarButtonChooser(buttonTooltip, getComparator());
        return new AbstractButtonOperator(
                AbstractButtonOperator.waitAbstractButton((Container)this.getSource(), chooser));
    }",Return AbstractButtonOperator representing a toolbar button found by given tooltip within the Source Editor.,1,64
3514,"public Subscription subscribe() {
        return protectivelyWrapAndSubscribe(new Observer<T>() {

            @Override
            public void onCompleted() {
                // do nothing
            }

            @Override
            public void onError(Throwable e) {
                handleError(e);
                throw new OnErrorNotImplementedException(e);
            }

            @Override
            public void onNext(T args) {
                // do nothing
            }

        });
    }",Subscribe and ignore all events.,1,119
3515,"public Object caseLabel( Label object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Label'.,1,25
3516,"public default Affine getContentTransform() {
		throw new UnsupportedOperationException();
	}",Returns the current  Affine according to this  ITransformableContentPart's content.,1,25
3517,"@Deprecated
    public AttitudeProvider getNonRotatingLaw() {
        return nonRotatingLaw;
    }",Get the underlying non-rotating attitude provider.,1,22
3518,"public MasterSheet getMasterSheet(){
        SlideMaster[] master = getSlideShow().getSlidesMasters();
        SlideAtom sa = getSlideRecord().getSlideAtom();
        int masterId = sa.getMasterID();
        MasterSheet sheet = null;
        for (int i = 0; i < master.length; i++) {
            if (masterId == master[i]._getSheetNumber()) {
                sheet = master[i];
                break;
            }
        }
        if (sheet == null){
            TitleMaster[] titleMaster = getSlideShow().getTitleMasters();
            if(titleMaster != null) for (int i = 0; i < titleMaster.length; i++) {
                if (masterId == titleMaster[i]._getSheetNumber()) {
                    sheet = titleMaster[i];
                    break;
                }
            }
        }
        return sheet;
    }",Returns master sheet associated with this slide.,1,262
3519,"public static CAS createTCas(AnalysisEngineMetaData aMetaData)
          throws ResourceInitializationException {
    List list = new ArrayList();
    list.add(aMetaData);
    return createTCas(list);
  }",Creates a new CAS instance.,1,55
3520,"public static FanOutServerSender bindTo(String grinderID,
                                          String addressString,
                                          int port)
    throws CommunicationException {

    final Acceptor acceptor = new Acceptor(addressString, port);

    try {
      final String senderID =
        addressString + "":"" + acceptor.getPort() + "":"" +
        InetAddress.getLocalHost().getHostName();

      return new FanOutServerSender(
        grinderID, senderID, acceptor, new Kernel(3));
    }
    catch (UnknownHostException e) {
      throw new CommunicationException(""Can't get local host"", e);
    }
  }",Factory method that creates a FanOutServerSender that listens on the given address.,1,169
3521,"public static String capitalize(final String str) {
        int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return str;
        }

        final int firstCodepoint = str.codePointAt(0);
        final int newCodePoint = Character.toTitleCase(firstCodepoint);
        if (firstCodepoint == newCodePoint) {
            // already capitalized
            return str;
        }

        int newCodePoints[] = new int[strLen]; // cannot be longer than the char array
        int outOffset = 0;
        newCodePoints[outOffset++] = newCodePoint; // copy the first codepoint
        for (int inOffset = Character.charCount(firstCodepoint); inOffset < strLen; ) {
            final int codepoint = str.codePointAt(inOffset);
            newCodePoints[outOffset++] = codepoint; // copy the remaining ones
            inOffset += Character.charCount(codepoint);
         }
        return new String(newCodePoints, 0, outOffset);
    }",Capitalizes a String changing the first character to title case as per  Character#toTitleCase(int).,1,270
3522,"public String replace(Object source) {
        if (source == null) {
            return null;
        }
        StrBuilder buf = new StrBuilder().append(source);
        substitute(buf, 0, buf.length());
        return buf.toString();
    }",Replaces all the occurrences of variables in the given source object with their matching values from the resolver.,1,85
3523,"public HostInfo getHostInfo() throws RpcClientFailedException {
		try {
			sendRequest(""<get_host_info/>\n"");
			HostInfo hostInfo = HostInfoParser.parse(receiveReply());
			return hostInfo;
		}
		catch (IOException e) {
			throw new ConnectionFailedException(""Connection failed in getHostInfo()"", e);
		}
	}",Performs   RPC towards BOINC client,1,89
3524,"private boolean isSideVisibleForBlockTypes(byte blockToCheck, byte currentBlock) {
        Block bCheck = BlockManager.getInstance().getBlock(blockToCheck);
        Block cBlock = BlockManager.getInstance().getBlock(currentBlock);

        return bCheck.getId() == 0x0 || cBlock.doNotTessellate() || bCheck.getBlockForm() == Block.BLOCK_FORM.BILLBOARD || (!cBlock.isBlockTypeTranslucent() && bCheck.isBlockTypeTranslucent()) || (bCheck.getBlockForm() == Block.BLOCK_FORM.LOWERED_BOCK && cBlock.getBlockForm() != Block.BLOCK_FORM.LOWERED_BOCK);
    }",Returns true if the block side is adjacent to a translucent block or an air block.,1,161
3525,"public HlsMasterPlaylist copy(List<RenditionKey> renditionKeys) {
    return new HlsMasterPlaylist(
        baseUri,
        tags,
        copyRenditionsList(variants, renditionKeys),
        copyRenditionsList(audios, renditionKeys),
        copyRenditionsList(subtitles, renditionKeys),
        muxedAudioFormat,
        muxedCaptionFormats);
  }",Returns a copy of this playlist which includes only the renditions identified by the given keys.,1,74
3526,"public double getAlpha() {
        return shape;
    }",Returns the shape parameter of  this distribution.,1,19
3527,"String[] listTablePrivileges(HsqlName name) {

        return UserManager.getRightsArray(rightsMap.get(name));
    }","Retrieves a string[] whose elements are the names, of the rights granted to this User object on the Table object identified by the name argument.",1,33
3528,"public Iterable<Rule> getRules(TriggerTypes triggerType, String channel, String event) {
        List<Rule> result = Lists.newArrayList();

        switch (triggerType) {
            case TRIGGER:
                Set<Rule> rules = triggerEventTriggeredRules.get(channel);
                if (rules == null) {
                    return Sets.newHashSet();
                }
                for (Rule rule : rules) {
                    for (EventTrigger t : rule.getEventtrigger()) {
                        if (t instanceof EventEmittedTrigger) {
                            EventEmittedTrigger et = (EventEmittedTrigger) t;
                            if (et.getTrigger() != null) {
                                if (!et.getTrigger().equals(event)) {
                                    continue;
                                }
                            }
                            result.add(rule);
                        }
                    }
                }
                break;
            default:
                return Sets.newHashSet();
        }

        return result;
    }",Returns all rules for which the trigger condition is true for the given type and channel.,1,261
3529,"public GenericIndexed<T> withCache(int maxBytes)
  {
    return new GenericIndexed<>(this, maxBytes);
  }",The returned GenericIndexed must be closed to release the underlying memory,1,36
3530,"public static Identifier parse(String stringValue) {
        if (stringValue == null) {
            throw new NullPointerException(""Identifiers cannot be constructed from null pointers but \""stringValue\"" is null."");
        }

        if (HEX_PATTERN.matcher(stringValue).matches()) {
            return parseHex(stringValue.substring(2));
        }

        if (UUID_PATTERN.matcher(stringValue).matches()) {
            try {
                return fromUuid(UUID.fromString(stringValue));
            }
            catch (Throwable t) {
                throw new IllegalArgumentException(""Unable to parse Identifier in UUID format."", t);
            }
        }

        if (DECIMAL_PATTERN.matcher(stringValue).matches()) {
            int value = -1;
            try {
                value = Integer.valueOf(stringValue);
            }
            catch (Throwable t) {
                throw new IllegalArgumentException(""Unable to parse Identifier in decimal format."", t);
            }
            return fromInt(value);
        }

        throw new IllegalArgumentException(""Unable to parse Identifier."");
    }",Allowed formats: UUID: 2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6 (16 bytes Identifier) HEX: 0x000000000003 (number of bytes is based on String length) Decimal: 65536 (2 bytes Identifier),1,269
3531,"@Deprecated
	public String getPassword() {
		return determinePassword();
	}",Determine the password to use based on this configuration and the environment.,1,24
3532,"private static int getMaxInputSize(String sampleMimeType, int width, int height) {
    if (width == Format.NO_VALUE || height == Format.NO_VALUE) {
      // We can't infer a maximum input size without video dimensions.
      return Format.NO_VALUE;
    }

    // Attempt to infer a maximum input size from the format.
    int maxPixels;
    int minCompressionRatio;
    switch (sampleMimeType) {
      case MimeTypes.VIDEO_H263:
      case MimeTypes.VIDEO_MP4V:
        maxPixels = width * height;
        minCompressionRatio = 2;
        break;
      case MimeTypes.VIDEO_H264:
        if (""BRAVIA 4K 2015"".equals(Util.MODEL)) {
          // The Sony BRAVIA 4k TV has input buffers that are too small for the calculated 4k video
          // maximum input size, so use the default value.
          return Format.NO_VALUE;
        }
        // Round up width/height to an integer number of macroblocks.
        maxPixels = Util.ceilDivide(width, 16) * Util.ceilDivide(height, 16) * 16 * 16;
        minCompressionRatio = 2;
        break;
      case MimeTypes.VIDEO_VP8:
        // VPX does not specify a ratio so use the values from the platform's SoftVPX.cpp.
        maxPixels = width * height;
        minCompressionRatio = 2;
        break;
      case MimeTypes.VIDEO_H265:
      case MimeTypes.VIDEO_VP9:
        maxPixels = width * height;
        minCompressionRatio = 4;
        break;
      default:
        // Leave the default max input size.
        return Format.NO_VALUE;
    }
    // Estimate the maximum input size assuming three channel 4:2:0 subsampled input frames.
    return (maxPixels * 3) / (2 * minCompressionRatio);
  }","Returns a maximum input size for a given mime type, width and height.",1,347
3533,"public static Component makeMenuItem(MenuInfo info, String actionCommand) {
        JMenuItem newMenuChoice = new JMenuItem(info.getLabel());
        newMenuChoice.setName(info.getClassName());
        newMenuChoice.addActionListener(ActionRouter.getInstance());
        if (actionCommand != null) {
            newMenuChoice.setActionCommand(actionCommand);
        }

        return newMenuChoice;
    }",Create a single menu item from a MenuInfo object,1,101
3534,"@SuppressWarnings(""unchecked"")
    public Iterable<? extends Object> toIterable(Object obj) {
        if (isArray(obj))
            return ((Iterable) obj);
        else
            throw new JsonPathException(""Cannot iterate over "" + obj!=null?obj.getClass().getName():""null"");
    }",Converts given array to an  Iterable,1,90
3535,"public static Method getTimeoutMethod(TimeoutMethod timeoutMethodInfo, TimedObjectInvoker timedObjectInvoker) {
        if(timeoutMethodInfo == null) {
            return null;
        }
        String declaringClass = timeoutMethodInfo.getDeclaringClass();
        Class<?> timeoutMethodDeclaringClass = null;
        try {
            timeoutMethodDeclaringClass = Class.forName(declaringClass, false, timedObjectInvoker.getClassLoader());
        } catch (ClassNotFoundException cnfe) {
            throw MESSAGES.failToLoadDeclaringClassOfTimeOut(declaringClass);
        }

        String timeoutMethodName = timeoutMethodInfo.getMethodName();
        String[] timeoutMethodParams = timeoutMethodInfo.getMethodParams();
        // load the method param classes
        Class<?>[] timeoutMethodParamTypes = new Class<?>[]
                {};
        if (timeoutMethodParams != null) {
            timeoutMethodParamTypes = new Class<?>[timeoutMethodParams.length];
            int i = 0;
            for (String paramClassName : timeoutMethodParams) {
                Class<?> methodParamClass = null;
                try {
                    methodParamClass = Class.forName(paramClassName, false, timedObjectInvoker.getClassLoader());
                } catch (ClassNotFoundException cnfe) {
                    throw MESSAGES.failedToLoadTimeoutMethodParamClass(cnfe, paramClassName);
                }
                timeoutMethodParamTypes[i++] = methodParamClass;
            }
        }
        // now start looking for the method
        Class<?> klass = timeoutMethodDeclaringClass;
        while (klass != null) {
            Method[] methods = klass.getDeclaredMethods();
            for (Method method : methods) {
                if (method.getName().equals(timeoutMethodName)) {
                    Class<?>[] methodParamTypes = method.getParameterTypes();
                    // param length doesn't match
                    if (timeoutMethodParamTypes.length != methodParamTypes.length) {
                        continue;
                    }
                    boolean match = true;
                    for (int i = 0; i < methodParamTypes.length; i++) {
                        // param type doesn't match
                        if (!timeoutMethodParamTypes[i].equals(methodParamTypes[i])) {
                            match = false;
                            break;
                        }
                    }
                    if (match) {
                        // match found
                        return method;
                    }
                }
            }
            klass = klass.getSuperclass();

        }
        // no match found
        return null;
    }","Returns the  java.lang.reflect.Method, represented by the  org.jboss.as.ejb3.timerservice.persistence.TimeoutMethod",1,593
3536,"public static ActionMapping getDefaultActionForMode() {
        return (ActionMapping)getContext().get(DEFAULT_ACTION_FOR_MODE);
    }",Get the default action mapping for the current mode.,1,31
3537,"public static <T> List<T> dropRight(Iterable<T> self, int num) {
        return dropRight(asList(self), num);
    }",Drops the given number of elements from the tail of this Iterable.,1,48
3538,"public IndexSchema addField(SchemaField newField, Collection<String> copyFieldNames) {
    return addFields(singletonList(newField), singletonMap(newField.getName(), copyFieldNames), true);
  }","Copies this schema, adds the given field to the copy",1,52
3539,"private static int javaSegmentIndex(PathFragment path) {
    if (path.isAbsolute()) {
      throw new IllegalArgumentException(""path must not be absolute: '"" + path + ""'"");
    }
    int rootIndex = path.getFirstSegment(ImmutableSet.of(""java"", ""javatests"", ""src""));
    if (rootIndex < 0) {
      return rootIndex;
    }
    final boolean isSrc = ""src"".equals(path.getSegment(rootIndex));
    int checkMavenIndex = isSrc ? rootIndex : -1;
    if (rootIndex == 0) {
      // Check for a nested ""src"" directory.
      // Also, to support an existing case, ""javatests"" within ""src"".
      for (int i = 1, max = path.segmentCount() - 2; i <= max; i++) {
        String segment = path.getSegment(i);
        if (""src"".equals(segment) || (isSrc && ""javatests"".equals(segment))) {
          String next = path.getSegment(i + 1);
          if (""com"".equals(next) || ""org"".equals(next) || ""net"".equals(next)) {
            // Check for common first element of java package, to avoid false positives.
            rootIndex = i;
          } else if (""src"".equals(segment)) {
            // Also accept maven style src/(main|test)/java.
            checkMavenIndex = i;
          }
          break;
        }
      }
    }
    // Check for (main|test)/java after /src/.
    if (checkMavenIndex >= 0 && checkMavenIndex + 2 < path.segmentCount()) {
      if (""java"".equals(path.getSegment(checkMavenIndex + 2))) {
        String next = path.getSegment(checkMavenIndex + 1);
        if (""main"".equals(next) || ""test"".equals(next)) {
          rootIndex = checkMavenIndex + 2;
        }
      }
    }
    return rootIndex;
  }",Finds the index of the segment in a Java path fragment that precedes the source root.,1,517
3540,"public static Frame sampleFrameStratified(final Frame fr, Vec label, float[] sampling_ratios, long maxrows, final long seed, final boolean allowOversampling, final boolean verbose) {
    if (fr == null) return null;
    assert(label.isEnum());
    assert(maxrows >= label.domain().length);

    long[] dist = new ClassDist(label).doAll(label).dist();
    assert(dist.length > 0);
    Log.info(""Doing stratified sampling for data set containing "" + fr.numRows() + "" rows from "" + dist.length + "" classes. Oversampling: "" + (allowOversampling ? ""on"" : ""off""));
    if (verbose)
      for (int i=0; i<dist.length;++i)
        Log.info(""Class "" + label.factor(i) + "": count: "" + dist[i] + "" prior: "" + (float)dist[i]/fr.numRows());

    // create sampling_ratios for class balance with max. maxrows rows (fill
    // existing array if not null).  Make a defensive copy.
    sampling_ratios = sampling_ratios == null ? new float[dist.length] : sampling_ratios.clone();
    assert sampling_ratios.length == dist.length;
    if( ArrayUtils.minValue(sampling_ratios) == 0 && ArrayUtils.maxValue(sampling_ratios) == 0 ) {
      // compute sampling ratios to achieve class balance
      for (int i=0; i<dist.length;++i)
        sampling_ratios[i] = ((float)fr.numRows() / label.domain().length) / dist[i]; // prior^-1 / num_classes
      final float inv_scale = ArrayUtils.minValue(sampling_ratios); //majority class has lowest required oversampling factor to achieve balance
      if (!Float.isNaN(inv_scale) && !Float.isInfinite(inv_scale))
        ArrayUtils.div(sampling_ratios, inv_scale); //want sampling_ratio 1.0 for majority class (no downsampling)
    }

    if (!allowOversampling)
      for (int i=0; i<sampling_ratios.length; ++i)
        sampling_ratios[i] = Math.min(1.0f, sampling_ratios[i]);

    // given these sampling ratios, and the original class distribution, this is the expected number of resulting rows
    float numrows = 0;
    for (int i=0; i<sampling_ratios.length; ++i)
      numrows += sampling_ratios[i] * dist[i];

    final long actualnumrows = Math.min(maxrows, Math.round(numrows)); //cap #rows at maxrows
    assert(actualnumrows >= 0); //can have no matching rows in case of sparse data where we had to fill in a makeZero() vector
    Log.info(""Stratified sampling to a total of "" + String.format(""%,d"", actualnumrows) + "" rows"" + (actualnumrows < numrows ? "" (limited by max_after_balance_size)."":"".""));

    if (actualnumrows != numrows) {
      ArrayUtils.mult(sampling_ratios, (float)actualnumrows/numrows); //adjust the sampling_ratios by the global rescaling factor
      if (verbose)
        Log.info(""Downsampling majority class by "" + (float)actualnumrows/numrows
                + "" to limit number of rows to "" + String.format(""%,d"", maxrows));
    }
    for (int i=0;i<label.domain().length;++i) {
      Log.info(""Class '"" + label.domain()[i] + ""' sampling ratio: "" + sampling_ratios[i]);
    }

    return sampleFrameStratified(fr, label, sampling_ratios, seed, verbose);
  }",Stratified sampling for classifiers,1,871
3541,"public CorsConfig build() {
        if (preflightHeaders.isEmpty() && !noPreflightHeaders) {
            preflightHeaders.put(""date"", DateValueGenerator.INSTANCE);
            preflightHeaders.put(""content-length"", new ConstantValueGenerator(""0""));
        }
        return new CorsConfig(this);
    }",Builds a  CorsConfig with settings specified by previous method calls.,1,83
3542,"public static boolean autowireSingletonPropertiesFromRegistry(CamelContext camelContext, Object target) {
        return autowireSingletonPropertiesFromRegistry(camelContext, target, false, false, null);
    }","This will discover all the properties on the target, and automatic bind the properties that are null by looking up in the registry to see if there is a single instance of the same type as the property.",1,44
3543,"@Override
  public boolean isSingleSwitch() {
    return false;
  }",Declare that this mapping is always multi-switch,1,22
3544,"public static String parseResource(String XMPPAddress) {
        if (XMPPAddress == null) {
            return null;
        }
        int slashIndex = XMPPAddress.indexOf(""/"");
        if (slashIndex + 1 > XMPPAddress.length() || slashIndex < 0) {
            return """";
        }
        else {
            return XMPPAddress.substring(slashIndex + 1);
        }
    }",Returns the name portion of a XMPP address.,1,121
3545,"public static int lastIndexOf(CharSequence seq, int searchChar) {
        if (isEmpty(seq)) {
            return INDEX_NOT_FOUND;
        }
        return StringUtils.lastIndexOfSequence(seq, searchChar, seq.length());
    }","Finds the last index within a CharSequence, handling  null.",1,65
3546,"private T call(RequestState requestState) throws IOException, RegistryException {
    try (Connection connection = connectionFactory.apply(requestState.url)) {
      Request request =
          Request.builder()
              .setAuthorization(requestState.authorization)
              .setUserAgent(userAgent)
              .setAccept(registryEndpointProvider.getAccept())
              .setBody(registryEndpointProvider.getContent())
              .build();
      Response response = connection.send(registryEndpointProvider.getHttpMethod(), request);

      return registryEndpointProvider.handleResponse(response);

    } catch (HttpResponseException ex) {
      // First, see if the endpoint provider handles an exception as an expected response.
      try {
        return registryEndpointProvider.handleHttpResponseException(ex);

      } catch (HttpResponseException httpResponseException) {
        if (httpResponseException.getStatusCode() == HttpStatusCodes.STATUS_CODE_BAD_REQUEST
            || httpResponseException.getStatusCode() == HttpStatusCodes.STATUS_CODE_NOT_FOUND
            || httpResponseException.getStatusCode()
                == HttpStatusCodes.STATUS_CODE_METHOD_NOT_ALLOWED) {
          // The name or reference was invalid.
          ErrorResponseTemplate errorResponse =
              JsonTemplateMapper.readJson(
                  httpResponseException.getContent(), ErrorResponseTemplate.class);
          RegistryErrorExceptionBuilder registryErrorExceptionBuilder =
              new RegistryErrorExceptionBuilder(
                  registryEndpointProvider.getActionDescription(), httpResponseException);
          for (ErrorEntryTemplate errorEntry : errorResponse.getErrors()) {
            registryErrorExceptionBuilder.addReason(errorEntry);
          }

          throw registryErrorExceptionBuilder.build();

        } else if (httpResponseException.getStatusCode() == HttpStatusCodes.STATUS_CODE_UNAUTHORIZED
            || httpResponseException.getStatusCode() == HttpStatusCodes.STATUS_CODE_FORBIDDEN) {
          throw new RegistryUnauthorizedException(
              registryEndpointProperties.getServerUrl(),
              registryEndpointProperties.getImageName(),
              httpResponseException);

        } else if (httpResponseException.getStatusCode()
            == HttpStatusCodes.STATUS_CODE_TEMPORARY_REDIRECT) {
          // 'Location' header can be relative or absolute.
          URL redirectLocation =
              new URL(requestState.url, httpResponseException.getHeaders().getLocation());
          // TODO: Use copy-construct builder.
          return call(new RequestState(requestState.authorization, redirectLocation));

        } else {
          // Unknown
          throw httpResponseException;
        }
      }

    } catch (NoHttpResponseException ex) {
      throw new RegistryNoResponseException(ex);

    } catch (SSLPeerUnverifiedException ex) {
      // Fall-back to HTTP
      GenericUrl httpUrl = new GenericUrl(requestState.url);
      httpUrl.setScheme(""http"");
      return call(new RequestState(requestState.authorization, httpUrl.toURL()));
    }
  }",Calls the registry endpoint with a certain  RequestState.,1,607
3547,"public static Histogram newHistogram(Class<?> klass,
                                               String name,
                                               String scope,
                                               boolean biased) {
        return DEFAULT_REGISTRY.newHistogram(klass, name, scope, biased);
    }","Creates a new  com.yammer.metrics.core.Histogram and registers it under the given class, name, and scope.",1,59
3548,"public static int cardinality(Object obj, final Collection coll) {
        if (coll instanceof Set) {
            return (coll.contains(obj) ? 1 : 0);
        }
        if (coll instanceof Bag) {
            return ((Bag) coll).getCount(obj);
        }
        int count = 0;
        if (obj == null) {
            for (Iterator it = coll.iterator();it.hasNext();) {
                if (it.next() == null) {
                    count++;
                }
            }
        } else {
            for (Iterator it = coll.iterator();it.hasNext();) {
                if (obj.equals(it.next())) {
                    count++;
                }
            }
        }
        return count;
    }",Returns the number of occurrences of obj in coll.,1,247
3549,"public MediaRouteSelector buildRouteSelector() {
        try {
            return new MediaRouteSelector.Builder()
                    .addControlCategory(CastMediaControlIntent.categoryForCast(mApplicationId))
                    .build();
        } catch (IllegalArgumentException e) {
            return null;
        }
    }",Returns a new  MediaRouteSelector to use for Cast device filtering for this particular media source or null if the application id is invalid.,1,70
3550,"public Project reload() {
    return Project.get(resourceManager, projectId());
  }",Fetches the current project's latest information.,1,29
3551,"private boolean isSideVisibleForBlockTypes(byte blockToCheck, byte currentBlock) {
        Block bCheck = BlockManager.getInstance().getBlock(blockToCheck);
        Block cBlock = BlockManager.getInstance().getBlock(currentBlock);

        return bCheck.getId() == 0x0 || cBlock.doNotTessellate() || bCheck.getBlockForm() == Block.BLOCK_FORM.BILLBOARD || (!cBlock.isBlockTypeTranslucent() && bCheck.isBlockTypeTranslucent()) || (bCheck.getBlockForm() == Block.BLOCK_FORM.LOWERED_BOCK && cBlock.getBlockForm() != Block.BLOCK_FORM.LOWERED_BOCK);
    }",Returns true if the block side is adjacent to a translucent block or an air block.,1,161
3552,"public static RedissonClient create() {
        Config config = new Config();
        config.useSingleServer().setAddress(""127.0.0.1:6379"");
//        config.useMasterSlaveConnection().setMasterAddress(""127.0.0.1:6379"").addSlaveAddress(""127.0.0.1:6389"").addSlaveAddress(""127.0.0.1:6399"");
//        config.useSentinelConnection().setMasterName(""mymaster"").addSentinelAddress(""127.0.0.1:26389"", ""127.0.0.1:26379"");
//        config.useClusterServers().addNodeAddress(""127.0.0.1:7000"");
        return create(config);
    }",Create sync/async Redisson instance with default config,1,59
3553,"public TypeMirror getMethodType(DeclaredType includingType, Element method) {
        return typeUtils.asMemberOf( includingType, method );
    }",Get the Type for given method as part of usedMapper.,1,37
3554,"public RationalNumber subtract(RationalNumber r) {
    return new RationalNumber(p.multiply(r.q).subtract(r.p.multiply(q)),
                              q.multiply(r.q));
  }",Subtract a rational number from the instance.,1,57
3555,"public InvokeDynamic as(TypeDescription typeDescription) {
            return new InvokeDynamic(bootstrapMethod,
                    handleArguments,
                    invocationProvider.appendArgument(new InvocationProvider.ArgumentProvider
                            .ForExplicitTypedMethodParameter(index, nonNull(typeDescription))),
                    terminationHandler,
                    assigner,
                    dynamicallyTyped);
        }",Defines the given argument to be treated as an instance of the provided type.,1,69
3556,"protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,
      ValueType type) throws IOException {
    switch (type) {
    case INTS:
      return Ints.getValues(dir, id, false);
    case FLOAT_32:
      return Floats.getValues(dir, id, docCount);
    case FLOAT_64:
      return Floats.getValues(dir, id, docCount);
    case BYTES_FIXED_STRAIGHT:
      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);
    case BYTES_FIXED_DEREF:
      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);
    case BYTES_FIXED_SORTED:
      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);
    case BYTES_VAR_STRAIGHT:
      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);
    case BYTES_VAR_DEREF:
      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);
    case BYTES_VAR_SORTED:
      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);
    default:
      throw new IllegalStateException(""unrecognized index values mode "" + type);
    }
  }",Loads a  IndexDocValues instance depending on the given  ValueType.,1,336
3557,"public static ImportedSpreadsheetWrapper parseImportedGradeFile(final InputStream is, final String mimetype, final Map<String, String> userMap) throws GbImportExportInvalidColumnException, GbImportExportInvalidFileTypeException, IOException, InvalidFormatException {

		ImportedSpreadsheetWrapper rval = null;

		// determine file type and delegate
		if (ArrayUtils.contains(CSV_MIME_TYPES, mimetype)) {
			rval = ImportGradesHelper.parseCsv(is, userMap);
		} else if (ArrayUtils.contains(XLS_MIME_TYPES, mimetype)) {
			rval = ImportGradesHelper.parseXls(is, userMap);
		} else {
			throw new GbImportExportInvalidFileTypeException(""Invalid file type for grade import: "" + mimetype);
		}
		return rval;
	}",Helper to parse the imported file into an  ImportedSpreadsheetWrapper depending on its type,1,171
3558,"public static String leftPad(String str, int size, String padStr) {
        if (padStr.length() == 1 && size - str.length() <= PAD_LIMIT)
           return leftPad(str, size, padStr.charAt(0));
        size = (size - str.length()) / padStr.length();
        if (size > 0) {
            str = repeat(padStr, size) + str;
        }
        return str;
    }",Left pad a String with a specified string. Pad to a size of size.,1,148
3559,"public OptionsOperator proxyConfiguration() {
        btProxyConfiguration().pushNoBlock();
        return new OptionsOperator();
    }","clicks on ""Proxy Configuration..."" JButton and returns OptionsOperator.",1,33
3560,"protected IHandlerResolver getTargetPolicyResolver() {
		return getDomain().getAdapter(IHandlerResolver.class);
	}",Returns the  IHandlerResolver of the  IDomain.,1,28
3561,"public int getDTMIdentity(DTM dtm)
  {
		// Shortcut using DTMDefaultBase's extension hooks
		// %REVIEW% Should the lookup be part of the basic DTM API?
		if(dtm instanceof DTMDefaultBase)
		{
			DTMDefaultBase dtmdb=(DTMDefaultBase)dtm;
			if(dtmdb.getManager()==this)
				return dtmdb.getDTMIDs().elementAt(0);
			else
				return -1;
		}
				
    int n = m_dtms.length;

    for (int i = 0; i < n; i++)
    {
      DTM tdtm = m_dtms[i];

      if (tdtm == dtm && m_dtm_offsets[i]==0)
        return i;
    }

    return -1;
  }","Given a DTM, find the ID number in the DTM tables which addresses the start of the document.",1,185
3562,"public FluentIterable<TYPE> filter(Predicate<? super TYPE> predicate) {
        return new LazyFluentIterable<TYPE>() {
            @Override
            public Iterator<TYPE> iterator() {
                return new DecoratingIterator<TYPE>(iterable.iterator()) {
                    @Override
                    public TYPE computeNext() {
                        while(fromIterator.hasNext()) {
                            TYPE candidate = fromIterator.next();
                            if(!predicate.test(candidate)) {
                                continue;
                            }
                            return candidate;
                        }

                        return null;
                    }
                };
            }
        };
    }","Filters the contents of Iterable using the given predicate, leaving only the ones which satisfy the predicate.",1,167
3563,"public Foo remove(long fooId) throws NoSuchFooException, SystemException {
		return remove(Long.valueOf(fooId));
	}",Removes the foo with the primary key from the database.,1,37
3564,"public CiKind kind() {
        return basicType;
    }",Gets the basic type for this compiler interface type.,1,19
3565,"private boolean checkThatRemotePathExists(String remotePath) {
		SftpSession session = null;
		ChannelSftp channelSftp = null;
		try {
			session = this.sessionPool.getSession();
			session.start();
			channelSftp = session.getChannel();
		} 
		catch (RuntimeException re) {
			throw re;
		}
		catch (Exception e){
			throw new MessagingException(""Failed to get SftpSession while checking for existance of the remote directory"", e);
		}
		
		try {
			SftpATTRS attrs = channelSftp.stat(remotePath);
			assert (attrs != null) && attrs.isDir() : ""attrs can't be null, and should indicate that it's a directory!"";
			return true;
		} 
		catch (Throwable th) {
			if (this.autoCreateDirectories && (this.sessionPool != null) && (session != null)) {
				try {
					if (channelSftp != null) {
						channelSftp.mkdir(remotePath);

						if (channelSftp.stat(remotePath).isDir()) {
							return true;
						}
					}
				} 
				catch (RuntimeException re) {
					throw re;
				}
				catch (Exception e){
					throw new MessagingException(""Failed to auto-create remote directory"", e);
				}

			}
		} 
		finally {
			this.sessionPool.release(session);
		}

		return false;
	}",This method will check to ensure that the remote directory exists.,1,382
3566,"public boolean equals(Object arg0) {
        if (arg0 == null || !(arg0 instanceof ObjectIdentityImpl)) {
            return false;
        }

        ObjectIdentityImpl other = (ObjectIdentityImpl) arg0;

        if (identifier instanceof Number && other.identifier instanceof Number) {
            // Integers and Longs with same value should be considered equal
            if (((Number)identifier).longValue() != ((Number)other.identifier).longValue()) {
                return false;
            }
        } else {
            // Use plain equality for other serializable types
            if (!identifier.equals(other.identifier)) {
                return false;
            }
        }

        return javaType.equals(other.javaType);
    }",Important so caching operates properly.,1,190
3567,"public T get() {
		return get(PlatformDependent.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);
	}",Convert this  Mono to a  Flux,1,29
3568,"private GrantedAuthority getGrantedAuthority(String attribute) {
        if (isConvertAttributeToLowerCase()) {
            attribute = attribute.toLowerCase(Locale.getDefault());
        } else if (isConvertAttributeToUpperCase()) {
            attribute = attribute.toUpperCase(Locale.getDefault());
        }
        if (isAddPrefixIfAlreadyExisting() || !attribute.startsWith(getAttributePrefix())) {
            return new GrantedAuthorityImpl(getAttributePrefix() + attribute);
        } else {
            return new GrantedAuthorityImpl(attribute);
        }
    }","Map the given role one-on-one to a Spring Security GrantedAuthority, optionally doing case conversion and/or adding a prefix.",1,141
3569,"public static synchronized List<MediaCodecDecoderInfo> getDecoderInfos(String mimeType,
      boolean secure) throws DecoderQueryException {
    CodecKey key = new CodecKey(mimeType, secure);
    List<MediaCodecDecoderInfo> decoderInfos = decoderInfosCache.get(key);
    if (decoderInfos != null) {
      return decoderInfos;
    }
    MediaCodecListCompat mediaCodecList = Util.SDK_INT >= 21
        ? new MediaCodecListCompatV21(secure) : new MediaCodecListCompatV16();
    decoderInfos = getDecoderInfosInternal(key, mediaCodecList);
    if (secure && decoderInfos.isEmpty() && 21 <= Util.SDK_INT && Util.SDK_INT <= 23) {
      // Some devices don't list secure decoders on API level 21 [Internal: b/18678462]. Try the
      // legacy path. We also try this path on API levels 22 and 23 as a defensive measure.
      mediaCodecList = new MediaCodecListCompatV16();
      decoderInfos = getDecoderInfosInternal(key, mediaCodecList);
      if (!decoderInfos.isEmpty()) {
        Log.w(TAG, ""MediaCodecList API didn't list secure decoder for: "" + mimeType
            + "". Assuming: "" + decoderInfos.get(0).name);
      }
    }
    decoderInfos = Collections.unmodifiableList(decoderInfos);
    decoderInfosCache.put(key, decoderInfos);
    return decoderInfos;
  }","Returns all  MediaCodecDecoderInfos for the given mime type, in the order given by  MediaCodecList.",1,302
3570,"public PactFormulaList getFormulas() {
        return formulas;
    }",Returns the formula list of all found and replaced formulas.,1,19
3571,"Result evaluate(TestExecutionContext context) {
		// @formatter:off
		return context.getExtensions(Condition.class)
				.map(condition -> evaluate(context, condition))
				.filter(Result::isDisabled)
				.findFirst()
				.orElse(ENABLED);
		// @formatter:on
	}",Evaluate all  Condition Conditions registered for the supplied  TestExecutionContext.,1,74
3572,"public Function jsGet_onload() {
        if (onload_ == null) {
            // NB: for IE, the onload of window is the one of the body element but not for Mozilla.
            final HtmlPage page = (HtmlPage) webWindow_.getEnclosedPage();
            final List listTagNames = Arrays.asList(new String[] {""body"", ""frameset""});
            final List listElements = page.getDocumentElement().getHtmlElementsByTagNames(listTagNames);
            if (!listElements.isEmpty()) {
                return ((HtmlElement) listElements.get(0)).getEventHandler(""onload"");
            }
            else {
                return null;
            }
        }
        else {
            return onload_;
        }
    }",Return the onload event handler function.,1,175
3573,"public FileAnalyzerFactory isMagic(byte[] contents, InputStream in)
        throws IOException {

        if (!in.markSupported()) return null;
        in.mark(MARK_READ_LIMIT);

        // read encoding, and skip past any BOM
        int bomLength = 0;
        String encoding = IOUtils.findBOMEncoding(contents);
        if (encoding == null) {
            encoding = ""UTF-8"";
        } else {
            bomLength = IOUtils.skipForBOM(contents);
            if (in.skip(bomLength) != bomLength) {
                in.reset();
                return null;
            }
        }

        // affirm that a LF exists in a first block
        boolean foundLF = hasLineFeed(in, encoding);
        in.reset();
        if (!foundLF) return null;
        if (bomLength > 0) in.skip(bomLength);

        // read line-by-line for a first few lines
        BufferedReader rdr = new BufferedReader(new InputStreamReader(
            in, encoding));
        boolean foundContent = false;
        int numFirstChars = 0;
        int numLines = 0;
        String line;
        while ((line = rdr.readLine()) != null) {
            for (int i = 0; i < lineStarters.length; ++i) {
                if (line.startsWith(lineStarters[i])) {
                    in.reset();
                    return factory;
                }
            }
            if (++numLines >= LINE_LIMIT) {
                in.reset();
                return null;
            }

            // If not yet `foundContent', then only a limited allowance is
            // given until a sentinel '.' or '\'' must be seen after nothing
            // else but whitespace.
            if (!foundContent) {
                for (int i = 0; i < line.length() && numFirstChars <
                    FIRST_LOOK_WIDTH; ++i, ++numFirstChars) {
                    char c = line.charAt(i);
                    if (c == '.' || c == '\'') {
                        foundContent = true;
                        break;
                    } else if (!Character.isWhitespace(c)) {
                        in.reset();
                        return null;
                    }
                }
                if (!foundContent && numFirstChars >= FIRST_LOOK_WIDTH) {
                    in.reset();
                    return null;
                }
            }
        }

        in.reset();
        return null;
    }","Try to match the file contents by looking for  lineStarters in the first 100 lines while also affirming that the document starts with ""."" or ""'"" after a limited amount of whitespace.",1,629
3574,"public static org.openldap.fortress.ReviewMgr createInstance()
        throws SecurityException
    {
        return createInstance( GlobalIds.HOME );
    }",Create and return a reference to  org.openldap.fortress.ReviewMgr object using HOME context.,1,40
3576,"public static Drawable getDrawableFromUrl(String imageUrl, int readTimeOutMillis) {
        return getDrawableFromUrl(imageUrl, readTimeOutMillis, null);
    }",get drawable by imageUrl,1,38
3577,"public static EntityManager createSharedEntityManager(EntityManagerFactory emf) {
		return createSharedEntityManager(emf, null, true);
	}","Create a transactional EntityManager proxy for the given EntityManagerFactory, automatically joining ongoing transactions.",1,33
3578,"public boolean removeAll (LongArray array) {
		int size = this.size;
		int startSize = size;
		long[] items = this.items;
		for (int i = 0, n = array.size; i < n; i++) {
			long item = array.get(i);
			for (int ii = 0, nn = size; ii < nn; ii++) {
				if (item == items[ii]) {
					removeIndex(ii);
					size--;
					break;
				}
			}
		}
		return size != startSize;
	}",Removes from this array all of elements contained in the specified array.,1,192
3579,"public Parameters withPreferredAudioLanguage(String preferredAudioLanguage) {
      preferredAudioLanguage = Util.normalizeLanguageCode(preferredAudioLanguage);
      if (TextUtils.equals(preferredAudioLanguage, this.preferredAudioLanguage)) {
        return this;
      }
      return new Parameters(preferredAudioLanguage, preferredTextLanguage,
          allowMixedMimeAdaptiveness, allowNonSeamlessAdaptiveness, maxVideoWidth, maxVideoHeight,
          maxVideoBitrate, exceedVideoConstraintsIfNecessary, exceedRendererCapabilitiesIfNecessary,
          viewportWidth, viewportHeight, viewportOrientationMayChange);
    }",Returns an instance with the provided preferred language for audio and forced text tracks.,1,104
3580,"@Override
	public String getDefault() {
		return null;
	}",Returns the default value of @odf.attribute chart:error-category.,1,22
3581,"protected ResizePolicy getResizePolicy(
			IContentPart<? extends Node> part) {
		return part.getAdapter(ResizePolicy.class);
	}",Returns the  ResizePolicy that is installed on the given  IContentPart.,1,38
3582,"public static boolean equals(Set self, Set other) {
        if (self == null) {
            return other == null;
        }
        if (other == null) {
            return false;
        }
        if (self.size() != other.size()) {
            return false;
        }
        final Iterator it1 = self.iterator();
        Collection otherItems = new HashSet(other);
        while (it1.hasNext()) {
            final Object o1 = it1.next();
            final Iterator it2 = otherItems.iterator();
            Object foundItem = null;
            while (it2.hasNext() && foundItem == null) {
                final Object o2 = it2.next();
                if (coercedEquals(o1, o2)) {
                    foundItem = o2;
                }
            }
            if (foundItem == null) return false;
            otherItems.remove(foundItem);
        }
        return otherItems.size() == 0;
    }",Compare the contents of two Sets for equality using Groovy's coercion rules.,1,303
3583,"private boolean isEqual(State state1, State state2) {
        return state1.getAlertMode().equals(state2.getAlertMode()) && state1.isOn() == state2.isOn()
                && state1.getBrightness() == state2.getBrightness()
                && state1.getColorTemperature() == state2.getColorTemperature() && state1.getHue() == state2.getHue()
                && state1.getSaturation() == state2.getSaturation() && state1.isReachable() == state2.isReachable()
                && Objects.equals(state1.getColorMode(), state2.getColorMode())
                && Objects.equals(state1.getEffect(), state2.getEffect());
    }",Compare to states for equality.,1,195
3584,"public boolean containsCategory(String category) {
		// do _not_ consult the activeBugCategorySet: if not hidden return true.
		return !hiddenBugCategorySet.contains(category);
	}",Returns false if the given category is hidden in the project filter settings.,1,31
3585,"public Instant getCreated() {
        return created;
    }",Get the Instant that this Token was Created,1,19
3586,"public static us.jts.fortress.ReviewMgr createInstance(String contextId)
        throws SecurityException
    {
        VUtil.assertNotNull(contextId, GlobalErrIds.CONTEXT_NULL, CLS_NM + "".createInstance"");
        if (!VUtil.isNotNullOrEmpty(reviewClassName))
        {
            if(GlobalIds.IS_REST)
            {
                reviewClassName = ReviewMgrRestImpl.class.getName();
            }
            else
            {
                reviewClassName = ReviewMgrImpl.class.getName();
            }
        }

        ReviewMgr reviewMgr = (us.jts.fortress.ReviewMgr) ClassUtil.createInstance(reviewClassName);
        reviewMgr.setContextId(contextId);
        return reviewMgr;
    }",Create and return a reference to  us.jts.fortress.ReviewMgr object.,1,164
3587,"public static Vector<Message> parse(String rpcResult) throws AuthorizationFailedException, InvalidDataReceivedException {
		MessagesParser parser = new MessagesParser();
		try {
			Xml.parse(rpcResult, parser);
			return parser.getMessages();
		}
		catch (SAXException e) {
			if (Logging.DEBUG) {
				SAXParseException details = (SAXParseException)e;
				Log.d(TAG, ""Malformed XML: sytemId="" + details.getSystemId() + 
						"", publicId="" + details.getPublicId() + 
						"", lineNumber="" + details.getLineNumber() + 
						"", columnNumber="" + details.getColumnNumber()
					);
				BufferedReader br = new BufferedReader(new StringReader(rpcResult));
				String line;
				int lineNum = 0;
				try {
					int errLine = details.getLineNumber();
					while ((line = br.readLine()) != null) {
						++lineNum;
						if ( (lineNum >= (errLine - 5)) && (lineNum <= (errLine + 5))) {
							Log.d(""Malformed XML"", ""line "" + lineNum + "": "" + line);
						}
					}
				}
				catch (IOException ioe) {
				}
				Log.d(TAG, ""Decoded "" + parser.getMessages().size() + "" messages"");
			}
			throw new InvalidDataReceivedException(""Malformed XML while parsing <msgs>"", e);
		}
	}",Parse the RPC result (msgs) and generate corresponding vector,1,412
3588,"public String getUrl() {
		return determineUrl();
	}",Determine the url to use based on this configuration and the environment.,1,21
3589,"public static MetaInfo of(String name){
        return MetaInfoBuilder.of(name).build();
    }","Returns a new instance current this class, adding only a general information property.",1,32
3590,"public static Coin getMakerFee(BsqWalletService bsqWalletService, Preferences preferences, Coin amount, boolean marketPriceAvailable, double marketPriceMargin) {
        final boolean isCurrencyForMakerFeeBtc = isCurrencyForMakerFeeBtc(preferences, bsqWalletService, amount, marketPriceAvailable, marketPriceMargin);
        return getMakerFee(isCurrencyForMakerFeeBtc,
                amount,
                marketPriceAvailable,
                marketPriceMargin);
    }","Returns the makerFee as Coin, this can be priced in BTC or BSQ.",1,86
3591,"@SafeVarargs
	public static Rule rule(String name, RulePart... alternatives) {
		return new Rule(name, alternatives);
	}","Shortcut for  new Rule(name, alternatives).",1,43
3592,"private String collect() {
        final StringBuilder result = new StringBuilder();

        // Include the default SharedPreferences
        final Map<String, SharedPreferences> sharedPrefs = new TreeMap<String, SharedPreferences>();
        sharedPrefs.put(""default"", PreferenceManager.getDefaultSharedPreferences(context));

        // Add in any additional SharedPreferences
        for (final String sharedPrefId : config.additionalSharedPreferences()) {
            sharedPrefs.put(sharedPrefId, context.getSharedPreferences(sharedPrefId, Context.MODE_PRIVATE));
        }

        // Iterate over all included preference files and add the preferences from each.
        for (Map.Entry<String, SharedPreferences> entry : sharedPrefs.entrySet()) {
            final String sharedPrefId = entry.getKey();
            final SharedPreferences prefs = entry.getValue();

            final Map<String, ?> prefEntries = prefs.getAll();

            // Show that we have no preferences saved for that preference file.
            if (prefEntries.isEmpty()) {
                result.append(sharedPrefId).append('=').append(""empty\n"");
                continue;
            }

            // Add all non-filtered preferences from that preference file.
            for (final Map.Entry<String, ?> prefEntry : prefEntries.entrySet()) {
                if (filteredKey(prefEntry.getKey())) {
                    if (ACRA.DEV_LOGGING)
                        ACRA.log.d(LOG_TAG, ""Filtered out sharedPreference="" + sharedPrefId + ""  key="" + prefEntry.getKey() + "" due to filtering rule"");
                } else {
                    final Object prefValue = prefEntry.getValue();
                    result.append(sharedPrefId).append('.').append(prefEntry.getKey()).append('=');
                    result.append(prefValue == null ? ""null"" : prefValue.toString());
                    result.append('\n');
                }
            }
            result.append('\n');
        }

        return result.toString();
    }",Collects all key/value pairs in SharedPreferences and writes them in a result String.,1,478
3593,"public SuggestedWords getSuggestions(View view, WordComposer wordComposer,
            boolean includeTypedWordIfValid, CharSequence prevWordForBigram) {
        return getSuggestedWordBuilder(view, wordComposer, includeTypedWordIfValid,
                prevWordForBigram).build();
    }",Returns a object which represents suggested words that match the list of character codes passed in.,1,55
3594,"@Override
    public String lookup(final LogEvent event, final String key) {
        // getenv throws NullPointerException if <code>name</code> is <code>null</code>
        return key != null ? System.getenv(key) : null;
    }",Looks up the value of the given environment variable.,1,55
3595,"public static Locale getLocale() {
		LocaleContext localeContext = getLocaleContext();
		if (localeContext != null) {
			Locale locale = localeContext.getLocale();
			if (locale != null) {
				return locale;
			}
		}
		return (defaultLocale != null ? defaultLocale : Locale.getDefault());
	}","Return the Locale associated with the current thread, if any, or the system default Locale otherwise.",1,106
3596,"public static Logger getLogger(Class clazz){
        return LOGGER_FACTORY.getLogger(clazz);
    }",Returns a Logger instance associated with the specified class.,1,28
3597,"protected DrawerFigure getCategoryFigure() {
	return (DrawerFigure)getFigure();
}",Convenience method to get the DrawerFigure for the model category.,1,23
3598,"public long getCount(DBObject query, DBObject fields, long limit, long skip, ReadPreference readPreference) {
        if (limit > Integer.MAX_VALUE) {
            throw new IllegalArgumentException(""limit is too large: "" + limit);
        }

        if (skip > Integer.MAX_VALUE) {
            throw new IllegalArgumentException(""skip is too large: "" + skip);
        }
        MongoStream<DBObject> stream = collection;
        if (query != null) {
            stream = stream.filter(DBObjects.toQueryFilterDocument(query));
        }
        // TODO: investigate case of int to long for skip
        return stream.limit((int) limit).skip((int) skip).readPreference(readPreference.toNew()).count();
    }",Returns the number of documents in the collection that match the specified query,1,195
3599,"default boolean contains(E element) {
		return indexOf(element) != -1;
	}",Tests if this List contains a given value as an element in O(n).,1,31
3600,"public List<String> checkHeaders(List<String> requestHeaders) {
		if (requestHeaders == null) {
			return null;
		}
		if (requestHeaders.isEmpty()) {
			return Collections.emptyList();
		}
		if (ObjectUtils.isEmpty(this.allowedHeaders)) {
			return null;
		}

		boolean allowAnyHeader = this.allowedHeaders.contains(ALL);
		List<String> result = new ArrayList<String>();
		for (String requestHeader : requestHeaders) {
			if (StringUtils.hasText(requestHeader)) {
				requestHeader = requestHeader.trim();
				for (String allowedHeader : this.allowedHeaders) {
					if (allowAnyHeader || requestHeader.equalsIgnoreCase(allowedHeader)) {
						result.add(requestHeader);
						break;
					}
				}
			}
		}
		return (result.isEmpty() ? null : result);
	}",Check the supplied request headers (or the headers listed in the  Access-Control-Request-Headers of a pre-flight request) against the configured allowed headers.,1,256
3601,"public PluginResult execute(String action, JSONArray args, String callbackId) {
        PluginResult.Status status = PluginResult.Status.INVALID_ACTION;
        String result = ""Unsupported Operation: "" + action;

        if (action.equals(""start"")) {
            if (this.batteryCallbackId != null) {
                return new PluginResult(PluginResult.Status.ERROR, ""Battery listener already running."");
            }
            this.batteryCallbackId = callbackId;

            // We need to listen to power events to update battery status
            IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction(Intent.ACTION_BATTERY_CHANGED);
            if (this.receiver == null) {
                this.receiver = new BroadcastReceiver() {
                    @Override
                    public void onReceive(Context context, Intent intent) {
                        updateBatteryInfo(intent);
                    }
                };
                cordova.getActivity().registerReceiver(this.receiver, intentFilter);
            }

            // Don't return any result now, since status results will be sent when events come in from broadcast receiver
            PluginResult pluginResult = new PluginResult(PluginResult.Status.NO_RESULT);
            pluginResult.setKeepCallback(true);
            return pluginResult;
        }

        else if (action.equals(""stop"")) {
            removeBatteryListener();
            this.sendUpdate(new JSONObject(), false); // release status callback in JS side
            this.batteryCallbackId = null;
            return new PluginResult(PluginResult.Status.OK);
        }

        return new PluginResult(status, result);
    }",Executes the request and returns PluginResult.,1,368
3602,"public static UdpChannel parse(final String uriStr)
    {
        try
        {
            final URI uri = new URI(uriStr);
            final String userInfo = uri.getUserInfo();
            final int uriPort = uri.getPort();

            if (!""udp"".equals(uri.getScheme()))
            {
                return malformedUri(uriStr);
            }

            final Context context = new Context()
                .uriStr(uriStr);

            final InetAddress hostAddress = InetAddress.getByName(uri.getHost());

            if (hostAddress.isMulticastAddress())
            {
                final byte[] addressAsBytes = hostAddress.getAddress();
                if (BitUtil.isEven(addressAsBytes[LAST_MULTICAST_DIGIT]))
                {
                    throw new IllegalArgumentException(""Multicast data address must be odd"");
                }

                addressAsBytes[LAST_MULTICAST_DIGIT]++;
                final InetSocketAddress controlAddress = new InetSocketAddress(getByAddress(addressAsBytes), uriPort);
                final InetSocketAddress dataAddress = new InetSocketAddress(hostAddress, uriPort);

                final InetSocketAddress localAddress = determineLocalAddressFromUserInfo(userInfo);

                NetworkInterface localInterface = NetworkInterface.getByInetAddress(localAddress.getAddress());

                if (null == localInterface)
                {
                    if (null == DEFAULT_MULTICAST_INTERFACE)
                    {
                        throw new IllegalArgumentException(""Interface not specified and default not set"");
                    }

                    localInterface = DEFAULT_MULTICAST_INTERFACE;
                }

                context.localControlAddress(localAddress)
                       .remoteControlAddress(controlAddress)
                       .localDataAddress(localAddress)
                       .remoteDataAddress(dataAddress)
                       .localInterface(localInterface)
                       .canonicalRepresentation(generateCanonicalRepresentation(localAddress, dataAddress));
            }
            else
            {
                if (uriPort == -1)
                {
                    return malformedUri(uriStr);
                }

                final InetSocketAddress remoteAddress = new InetSocketAddress(hostAddress, uriPort);
                final InetSocketAddress localAddress = determineLocalAddressFromUserInfo(userInfo);

                context.remoteControlAddress(remoteAddress)
                       .remoteDataAddress(remoteAddress)
                       .localControlAddress(localAddress)
                       .localDataAddress(localAddress)
                       .canonicalRepresentation(generateCanonicalRepresentation(localAddress, remoteAddress));
            }

            context.consistentHash(BitUtil.generateConsistentHash(context.canonicalRepresentation.getBytes()));

            return new UdpChannel(context);
        }
        catch (final Exception ex)
        {
            throw new InvalidChannelException(ex);
        }
    }",Parse URI and create channel,1,607
3603,"public static Timer newTimer(MetricName metricName,
                                       TimeUnit durationUnit,
                                       TimeUnit rateUnit) {
        return DEFAULT_REGISTRY.newTimer(metricName, durationUnit, rateUnit);
    }",Creates a new  com.yammer.metrics.core.Timer and registers it under the given metric name.,1,47
3604,"static Stream<BigInteger> gen(BigInteger from) {
        return Stream.of(new Iterator<BigInteger>() {
            BigInteger i = from;

            @Override
            public boolean hasNext() {
                return true;
            }

            @Override
            public BigInteger next() {
                final BigInteger value = i;
                i = i.add(BigInteger.ONE);
                return value;
            }
        });
    }",Returns an (theoretically) infinitely long Stream of BigInteger values starting from  from.,1,127
3605,"protected BendConnectionPolicy determineBendPolicy() {
		// retrieve the default bend policy from the target part
		return targetPart.getAdapter(BendConnectionPolicy.class);
	}",Returns the  BendConnectionPolicy that is installed on the  #getTargetPart().,1,29
3606,"public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {
        if (array == null) {
            return -1;
        }
        if (startIndex < 0) {
            return -1;
        } else if (startIndex >= array.length) {
            startIndex = array.length - 1;
        }
        if (objectToFind == null) {
            for (int i = startIndex; i >= 0; i--) {
                if (array[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = startIndex; i >= 0; i--) {
                if (objectToFind.equals(array[i])) {
                    return i;
                }
            }
        }
        return -1;
    }",Find the last index of the given object in the array starting at the given index. This method returns -1 if null array input. A negative startIndex will return -1.,1,260
3607,"private Result sqlPrepare(String sql, int type) {

        CompiledStatement cs    = null;
        int               csid  = compiledStatementManager.getStatementID(sql);
        Result            rsmd;
        Result            pmd;

        // ...check valid...
        if (csid > 0 && compiledStatementManager.isValid(csid, iId)) {
            cs   = compiledStatementManager.getStatement(csid);
            rsmd = cs.describeResultSet();
            pmd  = cs.describeParameters();

            return Result.newPrepareResult(csid, rsmd, pmd);
        }

        // ...compile or (re)validate
        try {
            cs = sqlCompileStatement(sql, type);
        } catch (Throwable t) {
            return new Result(t, sql);
        }
        
// boucherb@users        
// TODO:  It is still unclear to me as to whether, in the case of revalidation
//        v.s. first compilation, the newly created CompiledStatement
//        object should replace the old one in the CompiledStatementManager
//        repository.  If, for instance, a table column has been dropped and
//        then a column with the same name is added with different data type,
//        constraints, etc., the existing CompiledStatement object is not 
//        equivalent in its effect and perhaps runs the risk of corrupting
//        the database.  For instance, a CompiledStatement contains
//        fixed mappings from positions in a column value expression array
//        to column positions in the target table.  Thus, An alteration to a 
//        target table may leave an existing CompiledStatement's SQL
//        character sequence valid, but not its execution plan.
//        OTOH, simply replacing the old execution plan with a new one
//        may also be undesirable, as the intended and actual effects
//        may become divergent. Once again, for example, if a column name
//        comes to mean a different column, then by blindly replacing the
//        old CompiledStatement with the new, then inserting, updating
//        or predicating happens upon an unintended column.
//        The only DDL operations that raise such dangers are sequences
//        involving dropping a columns and then adding an incompatible one
//        of the same name at the same position or alterations that
//        change the positions of columns.  All other alterations to
//        database objects should, in theory, allow the original
//        CompiledStatement to operate correctly.        

        if (csid <= 0) {          
            csid = compiledStatementManager.registerStatement(cs);
        }

        compiledStatementManager.setValidated(csid, iId,
                                              dDatabase.getDDLSCN());        
        
        rsmd   = cs.describeResultSet();
        pmd    = cs.describeParameters();

        return Result.newPrepareResult(csid, rsmd, pmd);
    }",Retrieves a MULTI Result describing three aspects of the,1,350
3608,"private static ImportedColumn parseHeaderForImportColumn(final String headerValue) throws GbImportExportInvalidColumnException {

		if(StringUtils.isBlank(headerValue)) {
			throw new GbImportExportInvalidColumnException(""Invalid column header: "" + headerValue);
		}

		log.debug(""headerValue: "" + headerValue);

		final ImportedColumn column = new ImportedColumn();

		// assignment with points header
		final Matcher m1 = ASSIGNMENT_WITH_POINTS_PATTERN.matcher(headerValue);
		if (m1.matches()) {

			// extract title and score
			final Matcher titleMatcher = STANDARD_HEADER_PATTERN.matcher(headerValue);
			final Matcher pointsMatcher = POINTS_PATTERN.matcher(headerValue);

			if (titleMatcher.find()) {
				column.setColumnTitle(trim(titleMatcher.group()));
			}
			if (pointsMatcher.find()) {
				column.setPoints(pointsMatcher.group());
			}

			column.setType(ImportedColumn.Type.GB_ITEM_WITH_POINTS);

			return column;
		}

		final Matcher m2 = ASSIGNMENT_COMMENT_PATTERN.matcher(headerValue);
		if (m2.matches()) {

			// extract title
			final Matcher titleMatcher = STANDARD_HEADER_PATTERN.matcher(headerValue);

			if (titleMatcher.find()) {
				column.setColumnTitle(trim(titleMatcher.group()));
			}
			column.setType(ImportedColumn.Type.COMMENTS);

			return column;
		}

		final Matcher m3 = STANDARD_HEADER_PATTERN.matcher(headerValue);
		if (m3.matches()) {

			column.setColumnTitle(headerValue);
			column.setType(ImportedColumn.Type.GB_ITEM_WITHOUT_POINTS);

			return column;
		}

		final Matcher m4 = IGNORE_PATTERN.matcher(headerValue);
		if (m4.matches()) {
			log.info(""Found header: "" + headerValue + "" but ignoring it as it is prefixed with a #."");
			column.setType(ImportedColumn.Type.IGNORE);
			return column;
		}

		// if we got here, couldn't parse the column header, throw an error
		throw new GbImportExportInvalidColumnException(""Invalid column header: "" + headerValue);

	}",Helper to parse the header row into an  ImportedColumn,1,517
3609,"public static Flux<Long> interval(Duration period, Scheduler timer) {
		return onAssembly(new FluxInterval(period.toMillis(), period.toMillis(), TimeUnit.MILLISECONDS, timer));
	}","Create a  Flux that emits long values starting with 0 and incrementing at specified time intervals, on the specified  Scheduler.",1,59
3610,"public static int createByteFile(TachyonFS tfs, String fileName, WriteType op, int len)
      throws IOException {
    return createByteFile(tfs, new TachyonURI(fileName), op, len);
  }",Creates a simple file with len bytes.,1,61
3611,"public MongoClient createMongoClient(MongoClientOptions options) {
		Integer embeddedPort = getEmbeddedPort();
		if (embeddedPort != null) {
			return createEmbeddedMongoClient(options, embeddedPort);
		}
		return createNetworkMongoClient(options);
	}",Creates a  MongoClient using the given  options.,1,66
3612,"public static String leftPad(String str, int size, char padChar) {
        int pads = size - str.length();
        if (pads <= 0) {
            return str; // returns original string when possible
        }
        if (pads > PAD_LIMIT) {
            return leftPad(str, size, ' ');
        }
        return padding(pads, padChar).concat(str);
    }",Left pad a String with a specified character. Pad to a size of size.,1,119
3613,"public static HornetQConnectionFactory createConnectionFactory(final TransportConfiguration connectorConfig)
   {
      return new HornetQConnectionFactory(connectorConfig);
   }",Creates a HornetQConnectionFactory to connect to a single live server.,1,32
3614,"public MemberRequest remove(MemberRequest memberRequest)
		throws SystemException {
		return super.remove(memberRequest);
	}",Removes the member request from the database.,1,32
3615,"public final LiveIntervalElement getFirstLiveIntervalElement() {
    if (scratchObject != null) {
      return (LiveIntervalElement) scratchObject;
    } else {
      return null;
    }
  }",Returns NULL or an LiveIntervalElement (GCMaps/RegAlloc).,1,55
3616,"public double max(DoubleComparator comparator) {
            return reduce(doubleMaxReducer(comparator),
                          -Double.MAX_VALUE);
        }","Returns the maximum element, or -Double.MAX_VALUE if empty",1,35
3617,"private boolean match(Authorization a, Authorization b){
        return
                a.getURL().equals(b.getURL())&&
                a.getDomain().equals(b.getDomain())&&
                a.getRealm().equals(b.getRealm())&&
                a.getMechanism().equals(b.getMechanism());
    }",Check if two authorization objects are equal ignoring username/password,1,94
3618,"@Override
	public String getDefault() {
		OdfElement parentElement = (OdfElement)getOwnerElement();
		String defaultValue = null;
		if (parentElement != null) {
			defaultValue = DEFAULT_VALUE;			
		}
		return defaultValue;
	}",Returns the default value of @odf.attribute number:decimal-places dependent of its element name,1,73
3619,"public boolean hasNext() {
		if (list == null)
			return false;
		
		while (offset < list.length && !(list[offset] instanceof EditPolicy))
			offset++;
		return offset < list.length;
	}",Returns true if there is a next edit policy.,1,79
3620,"public static String getRelativePath(File file) {
        try {
            return CvsVersioningSystem.getInstance().getAdminHandler().getRepositoryForDirectory(file.getParent(), """").substring(1);
        } catch (IOException e) {
            return """";
        }
    }",Computes path of this file to repository root.,1,78
3621,"private String findExactMatch(String viewId, String actionRef, String outcome) {
        String returnViewId = null;

        Assert.assert_it(null != caseListMap);

        List caseList = (List)caseListMap.get(viewId);

        if (caseList == null) {
            return null;
        }

        // We've found an exact match for the viewId.  Now we need to evaluate
        // actionref/outcome in the following order:
        // 1) elements specifying both from-action-ref and from-outcome
        // 2) elements specifying only from-outcome
        // 3) elements specifying only from-action-ref
        // 4) elements where both from-action-ref and from-outcome are null


        returnViewId = determineViewFromActionRefOutcome(caseList, actionRef, outcome);

        return returnViewId;
    }",This method finds the List of cases for the current view identifier.,1,139
3622,"public Cell[] call() throws IOException {
            return server.get(location.getRegionInfo().getRegionName(), row, 
                column, timestamp, numVersions);
          }",Get the specified number of versions of the specified row and column with the specified timestamp.,1,52
3623,"public int copyFromLocal(String argv[]) throws IOException {
    if (argv.length != 3) {
      System.out.println(""Usage: tfs copyFromLocal <src> <remoteDst>"");
      return -1;
    }

    String srcPath = argv[1];
    String dstPath = argv[2];
    String dstFile = Utils.getFilePath(dstPath);
    File src = new File(srcPath);
    if (!src.exists()) {
      System.out.println(""Local path "" + srcPath + "" does not exist."");
      return -1;
    }
    TachyonFS tachyonClient = TachyonFS.get(Utils.getTachyonMasterAddress(dstPath));
    int ret = copyPath(src, tachyonClient, dstPath);
    if (ret == 0) {
      System.out.println(""Copied "" + src.getPath() + "" to "" + dstPath);
    }
    return ret;
  }",Copies a file or directory specified by argv from the local filesystem to the filesystem.,1,258
3624,"public NodeClassIterable inputs() {
        return getNodeClass().getInputIterable(this);
    }",Returns an  NodeClassIterable iterable which can be used to traverse all non-null input edges of this node.,1,26
3625,"public boolean hasSamples(int track) {
    return !pesPayloadReaders.valueAt(track).sampleQueue.isEmpty();
  }","Whether samples are available for reading from  #getSample(int, SampleHolder) for the specified track.",1,34
3626,"@SuppressWarnings(""unchecked"")
    public Object clone() {
        return new Implication(name, (ArrayList<Term>) cloneList(components), (ArrayList<Variable>) cloneList(openVariables), complexity);
    }",Clone an object,1,61
3627,"private static MatchEngineDescriptor getBestDescriptor(String extension) {
		final List<MatchEngineDescriptor> engines = MatchEngineRegistry.INSTANCE.getDescriptors(extension);
		MatchEngineDescriptor engine = null;
		if (engines.size() == 1) {
			engine = engines.iterator().next();
		} else if (engines.size() > 1) {
			engine = matchEngineSelector.selectMatchEngine(engines);
		}

		return engine;
	}",Returns the best  MatchEngineDescriptor for a given file extension.,1,128
3628,"public static TempBlockMeta createTempBlock(long userId, long blockId, long bytes, StorageDir dir)
      throws Exception {
    // prepare temp block
    TempBlockMeta tempBlockMeta = new TempBlockMeta(userId, blockId, bytes, dir);
    dir.addTempBlockMeta(tempBlockMeta);

    // write data
    FileUtils.createFile(tempBlockMeta.getPath());
    BlockWriter writer = new LocalFileBlockWriter(tempBlockMeta);
    writer.append(BufferUtils.getIncreasingByteBuffer(Ints.checkedCast(bytes)));
    writer.close();
    return tempBlockMeta;
  }",Make a temp block of a given size in StorageDir.,1,139
3629,"public static <T extends CharSequence> T notBlank(T chars, String message, Object... values) {
        if (chars == null) {
            throw new NullPointerException(String.format(message, values));
        }
        if (StringUtils.isBlank(chars)) {
            throw new IllegalArgumentException(String.format(message, values));
        }
        return chars;
    }","Validate that the specified argument character sequence is neither null, a length of zero (no characters), empty nor whitespace; otherwise throwing an exception with the specified message.",1,117
3630,"private LEdge leaveEdge() {

        for (LEdge edge : treeEdges) {
            if (cutvalue[edge.id] < 0) {
                return edge;
            }
        }
        return null;
    }",Helper method for the network simplex layerer.,1,65
3631,"protected static DynamicValue<Annotation> of(Serializable target) {
                return new ForSerializedValue(new TypeDescription.ForLoadedType(target.getClass()), SerializedConstant.of(target));
            }",Creates a dynamic value for binding the serializable value.,1,51
3632,"public String getDeclarationAsString() {
        return getDeclarationAsString(true, true);
    }",The declaration returned has this schema: [accessSpecifier] [static] [abstract] [final] [native] [synchronized] returnType methodName ([paramlist]) [throws exceptionsList],1,25
3633,"private DMatrix3x3 internal( Matrix matrix ){
        if( matrix instanceof Matrix3 ){
            return ((Matrix3)matrix).mat;
        }
        else {
            DMatrix3x3 a = new DMatrix3x3(
                    matrix.getElement(0,0), matrix.getElement(0,1), matrix.getElement(0,2),
                    matrix.getElement(1,0), matrix.getElement(1,1), matrix.getElement(1,2),
                    matrix.getElement(2,0), matrix.getElement(2,1), matrix.getElement(2,2));
            return a;
        }
    }",Cast (or convert) Matrix to internal DMatrixRMaj representation required for CommonOps_DDF3.,1,166
3634,"public static ClusterConnection getConnectionForEnvironment(CoprocessorEnvironment env)
      throws IOException {
    // this bit is a little hacky - just trying to get it going for the moment
    if (env instanceof RegionCoprocessorEnvironment) {
      RegionCoprocessorEnvironment e = (RegionCoprocessorEnvironment) env;
      RegionServerServices services = e.getRegionServerServices();
      if (services instanceof HRegionServer) {
        return new CoprocessorHConnection((HRegionServer) services);
      }
    }
    return (ClusterConnection) ConnectionFactory.createConnection(env.getConfiguration());
  }",Create an  HConnection based on the environment in which we are running the coprocessor.,1,120
3635,"public Option getOption(String opt) {
    opt = stripLeadingHyphens(opt);
    for (Option option : cli.getOptions()) {
      if (opt.equalsIgnoreCase(option.getShortName()) || opt.equalsIgnoreCase(option.getLongName())) {
        return option;
      }
    }
    return null;
  }",Retrieve the  Option matching the long or short name specified.,1,96
3636,"public int removeByField(IndexDefinition<T> indexDefinition, Object value) {
    FieldIndex<T> index = mIndices.get(indexDefinition);

    if (index == null) {
      return 0;
    }

    Set<T> toRemove = index.getByField(value);
    if (toRemove == null) {
      return 0;
    }
    int removed = 0;
    for (T o : toRemove) {
      if (remove(o)) {
        removed++;
      }
    }
    return removed;
  }",Removes the object with the specified unique index field value.,1,163
3637,"public static String buildProxiedEntitiesChainString(final NiFiUser user) {
        // calculate the dn chain
        List<String> proxyChain = NiFiUserUtils.buildProxiedEntitiesChain(user);
        if (proxyChain.isEmpty()) {
            return ANONYMOUS_CHAIN;
        }
        proxyChain = proxyChain.stream().map(ProxiedEntitiesUtils::formatProxyDn).collect(Collectors.toList());
        return StringUtils.join(proxyChain, """");
    }",Builds the proxy chain for the specified user.,1,107
3638,"public static SWTContainerView getFormToolkit(WidgetEditPart host) {
		EditPart parent = host;
		while ((parent = parent.getParent()) != null)
			if (parent instanceof ContainerEditPart
					&& ((ContainerEditPart) parent).getWidgetView() instanceof SWTContainerView)
				return (SWTContainerView) ((ContainerEditPart) parent)
						.getWidgetView();
		return null;
	}",Looks up into containment hierarchy and returns the container which owns (or will own) a  Form widget if exists.,1,109
3639,"public final boolean login( HttpServletRequest request ) throws WikiSecurityException
    {
        HttpSession httpSession = request.getSession();
        WikiSession session = SessionMonitor.getInstance(m_engine).find( httpSession );
        AuthenticationManager authenticationMgr = m_engine.getAuthenticationManager();
        AuthorizationManager authorizationMgr = m_engine.getAuthorizationManager();
        CallbackHandler handler = null;
        Map<String,String> options = EMPTY_MAP;

        // If user not authenticated, check if container logged them in, or if
        // there's an authentication cookie
        if ( !session.isAuthenticated() )
        {
            // Create a callback handler
            try
            {
                handler = new WebContainerCallbackHandler( m_engine, request, authorizationMgr.getAuthorizer() );
            }
            catch ( WikiSecurityException e )
            {
                e.printStackTrace();
                throw new WikiSecurityException( e.getMessage() );
             }
            if ( handler == null )
            {
                throw new WikiSecurityException(""Callback handler returned null for some reason... this is very unusual."");
            }

            // Execute the container login module, then (if that fails) the cookie auth module
            Set<Principal> principals = authenticationMgr.doJAASLogin( WebContainerLoginModule.class, handler, options );
            if ( principals.size() == 0 && authenticationMgr.allowsCookieAuthentication() )
            {
                principals = authenticationMgr.doJAASLogin( CookieAuthenticationLoginModule.class, handler, options );
            }
            
            // If the container logged the user in successfully, tell the WikiSession (and add all of the Principals)
            if ( principals.size() > 0 )
            {
                fireEvent( WikiSecurityEvent.LOGIN_AUTHENTICATED, getLoginPrincipal( principals ), session );
                for ( Principal principal : principals )
                {
                    fireEvent( WikiSecurityEvent.PRINCIPAL_ADD, principal, session );
                }
            }
        }

        // If user still not authenticated, check if assertion cookie was supplied
        if ( !session.isAuthenticated() && authenticationMgr.allowsCookieAssertions() )
        {
            // Execute the cookie assertion login module
            Set<Principal> principals = authenticationMgr.doJAASLogin( CookieAssertionLoginModule.class, handler, options );
            if ( principals.size() > 0 )
            {
                fireEvent( WikiSecurityEvent.LOGIN_ASSERTED, getLoginPrincipal( principals ), session);
            }
        }

        // If user still anonymous, use the remote address
        if (session.isAnonymous() )
        {
            Set<Principal> principals = authenticationMgr.doJAASLogin( AnonymousLoginModule.class, handler, options );
            if ( principals.size() > 0 )
            {
                fireEvent( WikiSecurityEvent.LOGIN_ANONYMOUS, getLoginPrincipal( principals ), session );
                return true;
            }
        }
        
        // If by some unusual turn of events the Anonymous login module doesn't work, login failed!
        return false;
    }",Logs in the user by attempting to populate a WikiSession Subject from a web servlet request by examining the request for the presence of container credentials and user cookies.,1,649
3640,"public FactoryBean<Scheduler> scheduler() {
        final SchedulerFactoryBean factory = new SchedulerFactoryBean();
        factory.setWaitForJobsToCompleteOnShutdown(this.waitForJobsToCompleteOnShutdown);
        factory.setJobFactory(this.casSpringBeanJobFactory);

        final Properties properties = new Properties();
        properties.put(""org.quartz.scheduler.interruptJobsOnShutdown"", this.interruptJobs);
        properties.put(""org.quartz.scheduler.interruptJobsOnShutdownWithWait"", this.interruptJobs);
        properties.put(StdSchedulerFactory.PROP_SCHED_INTERRUPT_JOBS_ON_SHUTDOWN, this.interruptJobs);
        properties.put(StdSchedulerFactory.PROP_SCHED_INTERRUPT_JOBS_ON_SHUTDOWN_WITH_WAIT, this.interruptJobs);
        factory.setQuartzProperties(properties);
        return factory;
    }",Scheduler factory bean.,1,150
3641,"public int getCacheSize() {
        return (int) Math.max(Integer.MAX_VALUE,cacheSize);
    }",Returns the size of the cache contents in bytes limited to integer size.,1,32
3642,"private QualifiedBean<Q, T> insertQualifiedBean( final Binding<T> binding )
    {
        if ( exposed || beans.isEmpty() )
        {
            // take defensive copy to avoid disturbing iterators
            beans = new ArrayList<QualifiedBean<Q, T>>( beans );
            exposed = false;
        }
        final QualifiedBean<Q, T> bean = new QualifiedBean<Q, T>( binding );
        if ( DEFAULT_QUALIFIER.equals( bean.getKey() ) )
        {
            // defaults always go at the front
            beans.add( defaultIndex++, bean );
        }
        else
        {
            beans.add( bean );
        }
        return bean;
    }",Inserts a qualified bean for the given binding into this bean sequence.,1,191
3643,"public PeriodType withSecondsRemoved() {
        if (!seconds().isSupported()) {
            return this;
        }
        return MaskedType.mask(this, 1 << 6);
    }",Returns a version of this PeriodType instance that does not support seconds.,1,57
3644,"public static double get(ClassMetricKey key, ASTClassOrInterfaceDeclaration node, MetricVersion version) {
        if (!key.getCalculator().supports(node)) {
            return Double.NaN;
        }

        MetricVersion safeVersion = (version == null) ? Version.STANDARD : version;

        return TOP_LEVEL_PACKAGE.compute(key, node, false, safeVersion);
    }","Computes a metric identified by its code on a class AST node, possibly selecting a variant with the",1,107
3645,"public static ESModelMutatorConfiguration getModelMutatorConfiguration(
		Project project, ESMutateUtil util) {
		final ESModelMutatorConfiguration mmc = new ESModelMutatorConfiguration(
			util.getEPackages(), project, 1L);
		mmc.seteStructuralFeaturesToIgnore(util
			.getEStructuralFeaturesToIgnore());
		mmc.seteClassesToIgnore(util.getEClassesToIgnore());
		mmc.setEditingDomain(((ESWorkspaceProviderImpl) ESWorkspaceProvider.INSTANCE)
			.getEditingDomain());
		mmc.setMinObjectsCount(util.getMinObjectsCount());
		return mmc;
	}",Constructs a new  ESModelMutatorConfiguration based on the given  ESMutateUtil and the given project.,1,124
3646,"public boolean sendMessageToEndPoint(final String url, final String message) {
        return sendMessageToEndPoint(new HttpMessage(url, message));
    }",Uses an instance of  HttpMessage by default as the executed task to send the message to the endpoint.,1,42
3647,"public static JMenu makeMenu(String category, String actionCommand) {
        return makeMenu(
                menuMap.get(category),
                actionCommand,
                JMeterUtils.getResString(category));
    }",Create a menu from a menu category.,1,52
3648,"public Object getMatch() {
		return match;
	}",Returns this ModelCompareInput's match.,1,19
3649,"public static FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale) {
        return cache.getDateTimeInstance(null, style, timeZone, locale);
    }","Gets a time formatter instance using the specified style, time zone and locale.",1,48
3650,"protected OnExceptionDefinition getExceptionPolicy(Exchange exchange, Throwable exception) {
        if (exceptionPolicy == null) {
            throw new IllegalStateException(""The exception policy has not been set"");
        }

        return exceptionPolicy.getExceptionPolicy(exceptionPolicies, exchange, exception);
    }",Attempts to find the best suited  OnExceptionDefinition to be used for handling the given thrown exception.,1,69
3651,"public Flux<RouteDefinition> refresh() {
		this.cache.clear();
		return this.routeDefinitions;
	}",Clears the cache of routeDefinisions,1,34
3652,"public long timeToNextPoll(long now) {
        if (!autoCommitEnabled)
            return timeToNextHeartbeat(now);

        return Math.min(nextAutoCommitTimer.remainingMs(), timeToNextHeartbeat(now));
    }",Return the time to the next needed invocation of  #poll(Timer).,1,55
3653,"public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;

      Configuration that = (Configuration) o;
      return tag.equals(that.tag) && type.equals(that.type) && properties.equals(that.properties)
        && propertyAttributes.equals(that.propertyAttributes);
    }",Get property attributes.,1,131
3654,"private GraphPath planJourney(RoutingRequest options, boolean optimize) {
        // Calculate route and convert to path
        ShortestPathTree spt = aStar.getShortestPathTree(options);
        GraphPath path = spt.getPath(options.rctx.target, optimize);
        
        // Return list of states and edges in the journey
        return path;
    }",Plan journey and return list of states and edges,1,72
3655,"public static List<TestBlobEntry> findByUuid(String uuid, int start, int end) {
		return getPersistence().findByUuid(uuid, start, end);
	}",Returns a range of all the test blob entries where uuid = &#63;.,1,50
3656,"public static String getTimeString(final OffsetTime self) {
        return self.format(DateTimeFormatter.ISO_OFFSET_TIME);
    }",Formats this time with the  java.time.format.DateTimeFormatter#ISO_OFFSET_TIME formatter.,1,33
3657,"public Response getHostComponents(@Context HttpHeaders headers, @Context UriInfo ui) {
    return handleRequest(headers, null, ui, Request.Type.GET,
        createResourceDefinition(null, m_clusterName, m_hostName));
  }",Handles GET /clusters/clusterID/hosts/hostID/host_components/,1,60
3658,"protected RuntimeException translateException(Throwable t) {
        if (t instanceof InvocationTargetException) {
            t = ((InvocationTargetException) t).getTargetException();
        } else if (t instanceof UndeclaredThrowableException) {
            t = ((UndeclaredThrowableException) t).getUndeclaredThrowable();
        }

        if (t instanceof PersistenceException) {
            if (t.getCause() instanceof SQLException) {
                return getExceptionTranslator().translate(""SqlSession operation"", null, (SQLException) t.getCause());
            }
        } else if (t instanceof DataAccessException) {
            return (DataAccessException) t;
        }

        return new MyBatisSystemException(""SqlSession operation"", t);
    }",By default translates MyBatis exceptions into Spring DataAccessExceptions.,1,195
3659,"public List<String> getArgs() {
        return args;
    }",Returns a List of all argument values specified for this,1,22
3660,"public Optional<Duration> timeLeftOrThrow() {
        return timeout.map(timeout -> {
            Duration passed = timePassed();
            Duration left = timeout.minus(passed);
            if (left.toMillis() <= 0) {
                throw new UncheckedTimeoutException(""Time since start "" + passed + "" exceeds timeout "" + this.timeout);
            }

            return left;
        });
    }","Returns the time until deadline, if there is one.",1,119
3661,"public static FormPipelineConfig createConfig(Map objectModel, Parameters parameters) {
        // create and set the jxpathContext...
        Object flowContext = FlowHelper.getContextObject(objectModel);
        WebContinuation wk = FlowHelper.getWebContinuation(objectModel);
        JXPathContext jxpc = JXPathContext.newContext(flowContext);
        Variables vars = jxpc.getVariables();
        vars.declareVariable(""continuation"", wk);
        Request request = ObjectModelHelper.getRequest(objectModel);
        vars.declareVariable(""request"", request);
        Session session = request.getSession(false);
        vars.declareVariable(""session"", session);
        vars.declareVariable(""parameters"", parameters);
        
        Locale localeParameter = null;
        String localeStr = parameters.getParameter(""locale"", null);
        if (localeStr != null) {
            localeParameter = I18nUtils.parseLocale(localeStr);
        }

        String attributeName = parameters.getParameter(""attribute-name"", null);
        String actionExpression = parameters.getParameter(""form-action"", null);
        String formMethod = parameters.getParameter(""form-method"", ""POST"");
        //TODO (20031223 mpo)think about adding form-encoding for the Generator.
        // Note generator will also need some text to go on the submit-button? 
        // Alternative to adding more here is to apply xinclude ?

        return new FormPipelineConfig(jxpc, request, localeParameter, 
                attributeName, actionExpression, formMethod);
    }",Creates and initializes a FormsPipelineConfig object based on the passed arguments of the setup() of the specific Pipeline-component.,1,334
3662,"public static MethodDelegation to(Object delegate, String fieldName) {
        return to(delegate, fieldName, MethodGraph.Compiler.DEFAULT);
    }",Creates an implementation where only instance methods of the given object are considered as binding targets.,1,42
3663,"public MigrationInfos info() {
        return execute(new Command<MigrationInfos>() {
            public MigrationInfos execute(Connection connectionMetaDataTable, Connection connectionUserObjects, DbSupport dbSupport) {
                MetaDataTable metaDataTable = createMetaDataTable(connectionMetaDataTable, dbSupport);
                DbInfoAggregator dbInfoAggregator = new DbInfoAggregator(createMigrationResolver(), metaDataTable, target);
                return dbInfoAggregator.aggregateMigrationInfo();
            }
        });
    }","Retrieves the complete information about all the migrations including applied, pending and current migrations with details and status.",1,110
3664,"public ClientResponse testDelete(String url) throws Exception {
        return testDelete(url, null);
    }",Performs a DELETE using the specified url.,1,32
3665,"public static <T> T findResult(Collection<?> self, Closure<T> closure) {
        for (Object value : self) {
            T result = closure.call(value);
            if (result != null) {
                return result;
            }
        }
        return null;
    }","Iterates through the collection calling the given closure for each item but stopping once the first non-null result is found and returning that result.&nbsp;If all results are null, null is returned.",1,95
3666,"public Subscription subscribe() {
        return protectivelyWrapAndSubscribe(new Observer<T>() {

            @Override
            public void onCompleted() {
                // do nothing
            }

            @Override
            public void onError(Throwable e) {
                handleError(e);
                throw new OnErrorNotImplementedException(e);
            }

            @Override
            public void onNext(T args) {
                // do nothing
            }

        });
    }",Subscribe and ignore all events.,1,119
3667,"public static Integer[] toObject(final int[] array) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_INTEGER_OBJECT_ARRAY;
        }
        final Integer[] result = new Integer[array.length];
        for (int i = 0; i < array.length; i++) {
            result[i] = new Integer(array[i]);
        }
        return result;
    }",Converts an array of primitive ints to objects. This method returns null if null array input.,1,151
3668,"public Fraction divideBy(Fraction fraction) {
        if (fraction == null) {
            throw new IllegalArgumentException(""The fraction must not be null"");
        }
        if (fraction.numerator == 0) {
            throw new ArithmeticException(""The fraction to divide by must not be zero"");
        }
        return multiplyBy(fraction.invert());
    }",Divide the value of this fraction by another.,1,91
3669,"public static Frame transform3D(Frame input, final int height, final int width, final int depth, final boolean inverse) {
      initCheck(input, height, width, depth);
      return new MRTask() {
        @Override
        public void map(Chunk[] cs, NewChunk[] ncs) {
          double[][][] a = new double[height][width][depth];

          // each row is a 3D sample
          for (int row = 0; row < cs[0]._len; ++row) {
            for (int i = 0; i < height; ++i)
              for (int j = 0; j < width; ++j)
                for (int k = 0; k < depth; ++k)
                  a[i][j][k] = cs[i*(width*depth) + j*depth + k].atd(row);

            // compute 3D DCT
            if (!inverse)
              new DoubleDCT_3D(height, width, depth).forward(a, true);
            else
              new DoubleDCT_3D(height, width, depth).inverse(a, true);

            // write result to NewChunk
            for (int i = 0; i < height; ++i)
              for (int j = 0; j < width; ++j)
                for (int k = 0; k < depth; ++k)
                  ncs[i*(width*depth) + j*depth + k].addNum(a[i][j][k]);
          }
        }
      }.doAll(height*width*depth, input).outputFrame();
    }","Compute the 3D discrete cosine transform for each row in the given Frame, and return a new Frame",1,481
3670,"private String getAliasedAttributeName(AliasFor aliasFor, Method attribute) {
			String attributeName = aliasFor.attribute();
			String value = aliasFor.value();
			boolean attributeDeclared = StringUtils.hasText(attributeName);
			boolean valueDeclared = StringUtils.hasText(value);

			// Ensure user did not declare both 'value' and 'attribute' in @AliasFor
			if (attributeDeclared && valueDeclared) {
				throw new AnnotationConfigurationException(String.format(
						""In @AliasFor declared on attribute [%s] in annotation [%s], attribute 'attribute' and its "" +
						""alias 'value' are present with values of [%s] and [%s], but only one is permitted."",
						attribute.getName(), attribute.getDeclaringClass().getName(), attributeName, value));
			}

			attributeName = (attributeDeclared ? attributeName : value);
			return (StringUtils.hasText(attributeName) ? attributeName.trim() : attribute.getName());
		}","Get the name of the aliased attribute configured via the supplied  AliasFor @AliasFor annotation on the supplied  attribute, or the original attribute if no aliased one specified (indicating that the reference goes to a same-named attribute on a meta-annotation).",1,200
3671,"public boolean stop() {
        return nextAction == EventDetector.STOP;
    }",Check if the propagation should be stopped at the end of the current step.,1,26
3672,"protected List<IContentPart<Node, ? extends Node>> getTargetParts() {
		return targetParts;
	}",Returns the target parts of this policy.,1,32
3673,"public boolean isShowing() {

		if (mToastView != null) {

			return mToastView.isShown();

		}

		else {

			return false;

		}

	}",Returns true if the SuperActivityToast is showing.,1,61
3674,"public byte[] getData()  {
        return getData(true);
    }",Create a data package to send over the wire representing this member.,1,24
3675,"public static Wallet adaptAccountInfo(CryptsyAccountInfoReturn cryptsyAccountInfoReturn) {

    CryptsyAccountInfo cryptsyAccountInfo = cryptsyAccountInfoReturn.getReturnValue();

    //List<Wallet> wallets = new ArrayList<Wallet>();
    Map<String, BigDecimal> available = cryptsyAccountInfo.getAvailableFunds();
    Map<String, BigDecimal> hold = cryptsyAccountInfo.getHoldFunds();

    Map<String, Balance> walltes = new HashMap<>();

    for (String lcCurrency : available.keySet()) {
      BigDecimal balance = available.get(lcCurrency);
      BigDecimal avail = available.get(lcCurrency);

      walltes.put(lcCurrency, new Balance(lcCurrency, balance, avail, BigDecimal.ZERO));
    }

    if( hold != null ) {
      for (String lcCurrency : hold.keySet()) {
        BigDecimal frocen = hold.get(lcCurrency);

        if (walltes.containsKey(lcCurrency)) {
          //initialice new wallet. wallet have no setter
          Balance newBalance = new Balance(lcCurrency, walltes.get(lcCurrency).getTotal().add(frocen), walltes.get(lcCurrency).getAvailable(), frocen);
          //Remove old wallet
          walltes.remove(lcCurrency);
          //Add new wallet
          walltes.put(lcCurrency, newBalance);
        }else {
          walltes.put(lcCurrency, new Balance(lcCurrency, frocen, BigDecimal.ZERO, frocen));
        }
      }
    }



    return new Wallet(null, new ArrayList<>(walltes.values()));

  }",Adapts CryptsyAccountInfoReturn DTO to XChange standard Wallet DTO,1,396
3676,"public T executeForResult(final Connection connection) throws Exception {
        return execute(connection).get();
    }",Execute the request with an existing connection and wait for the result.,1,35
3677,"public static ValueIterator getName1_0Iterator(){
        return new DummyValueIterator();
    }",@icu Returns an empty iterator.,1,24
3678,"@RequiresSession
  public List<SettingEntity> findAll() {
    return daoUtils.selectAll(entityManagerProvider.get(), SettingEntity.class);
  }",Find all settings.,1,39
3679,"private static ShapeBuilder createShape(Random r, Point nearPoint, Rectangle within, ShapeType st, boolean validate) throws
            InvalidShapeException {

        if (st == null) {
            st = ShapeType.randomType(r);
        }

        if (within == null) {
            within = xRandomRectangle(r, nearPoint);
        }

        // NOTE: multipolygon not yet supported. Overlapping polygons are invalid so randomization
        // requires an approach to avoid overlaps. This could be approached by creating polygons
        // inside non overlapping bounding rectangles
        switch (st) {
            case POINT:
                Point p = xRandomPointIn(r, within);
                PointBuilder pb = new PointBuilder().coordinate(new Coordinate(p.getX(), p.getY(), Double.NaN));
                return pb;
            case MULTIPOINT:
            case LINESTRING:
                // for random testing having a maximum number of 10 points for a line string is more than sufficient
                // if this number gets out of hand, the number of self intersections for a linestring can become
                // (n^2-n)/2 and computing the relation intersection matrix will become NP-Hard
                int numPoints = RandomInts.randomIntBetween(r, 3, 10);
                PointCollection pcb = (st == ShapeType.MULTIPOINT) ? new MultiPointBuilder() : new LineStringBuilder();
                for (int i=0; i<numPoints; ++i) {
                    p = xRandomPointIn(r, within);
                    pcb.point(p.getX(), p.getY());
                }
                return pcb;
            case MULTILINESTRING:
                MultiLineStringBuilder mlsb = new MultiLineStringBuilder();
                for (int i=0; i<RandomInts.randomIntBetween(r, 1, 10); ++i) {
                    mlsb.linestring((BaseLineStringBuilder) createShape(r, nearPoint, within, ShapeType.LINESTRING, false));
                }
                return mlsb;
            case POLYGON:
                numPoints = RandomInts.randomIntBetween(r, 5, 25);
                Coordinate[] coordinates = new Coordinate[numPoints];
                for (int i=0; i<numPoints; ++i) {
                    p = (Point) createShape(r, nearPoint, within, ShapeType.POINT, false).build();
                    coordinates[i] = new Coordinate(p.getX(), p.getY());
                }
                // random point order or random linestrings can lead to invalid self-crossing polygons,
                // compute the convex hull for a set of points to ensure polygon does not self cross
                Geometry shell = new ConvexHull(coordinates, ctx.getGeometryFactory()).getConvexHull();
                Coordinate[] shellCoords = shell.getCoordinates();
                // if points are in a line the convex hull will be 2 points which will also lead to an invalid polygon
                // when all else fails, use the bounding box as the polygon
                if (shellCoords.length < 3) {
                    shellCoords = new Coordinate[4];
                    shellCoords[0] = new Coordinate(within.getMinX(), within.getMinY());
                    shellCoords[1] = new Coordinate(within.getMinX(), within.getMaxY());
                    shellCoords[2] = new Coordinate(within.getMaxX(), within.getMaxY());
                    shellCoords[3] = new Coordinate(within.getMaxX(), within.getMinY());
                }
                PolygonBuilder pgb = new PolygonBuilder().points(shellCoords).close();
                if (validate) {
                    // This test framework builds semi-random geometry (in the sense that points are not truly random due to spatial
                    // auto-correlation) As a result of the semi-random nature of the geometry, one can not predict the orientation
                    // intent for ambiguous polygons. Therefore, an invalid oriented dateline crossing polygon could be built.
                    // The validate flag will check for these possibilities and bail if an incorrect geometry is created
                    try {
                        pgb.build();
                    } catch (InvalidShapeException e) {
                        // jts bug rarely results in an invalid shape, if it does happen we try again instead of returning null
                        return createShape(r, nearPoint, within, st, validate);
                    }
                }
                return pgb;
            default:
                throw new ElasticsearchException(""Unable to create shape of type ["" + st + ""]"");
        }
    }","Creates a random shape useful for randomized testing, NOTE: exercise caution when using this to build random GeometryCollections as creating a large random number of random shapes can result in massive resource consumption see:  org.elasticsearch.search.geo.GeoShapeIntegrationTests#testShapeFilterWithRandomGeoCollection",1,886
3680,"public static Boolean getInvisible(Node node, Boolean returnDefaultIfMissing) {
		if (node.getAttributes().containsKey(INVISIBLE__NE)) {
			return (Boolean) node.getAttributes().get(INVISIBLE__NE);
		}
		return returnDefaultIfMissing ? INVISIBLE__NE__DEFAULT : null;
	}",Returns the value of the  #INVISIBLE__NE attribute of the given  Node.,1,77
3681,"public boolean isMonitorDurationEnd() {
        long startTime =
                PreferenceManager.getDefaultSharedPreferences(BlockCanaryContext.get().provideContext())
                        .getLong(""BlockCanary_StartTime"", 0);
        return startTime != 0 && System.currentTimeMillis() - startTime >
                BlockCanaryContext.get().provideMonitorDuration() * 3600 * 1000;
    }","Is monitor duration end, compute from recordStartTime end provideMonitorDuration.",1,94
3682,"protected FtpFileAttributes getFile(String filePath)
    {
        return getFile(filePath, false);
    }",Obtains a  FtpFileAttributes for the given  filePath by using the  FTPClient#mlistFile(String) FTP command,1,29
3683,"public KaleoNode remove(long kaleoNodeId)
		throws NoSuchNodeException, SystemException {
		return remove(Long.valueOf(kaleoNodeId));
	}",Removes the kaleo node with the primary key from the database.,1,38
3684,"public Element executeRequest(HttpType type, String urlSuffix, String xmlParams)
            throws ConnectException, Exception {
        if (Log.isDebugEnabled()) {
            Log.debug(""Outgoing REST call ["" + type + ""] to "" + urlSuffix + "": "" + xmlParams);
        }

        String wsUrl = getConnectionURI() + WEBSERVICES_PATH + urlSuffix;

        String secret = getSharedSecret();

        HttpClient client = new HttpClient();
        HttpMethod method;

        // Configures the authentication
        client.getParams().setAuthenticationPreemptive(true);
        Credentials credentials = new UsernamePasswordCredentials(OPENFIRE_USERNAME, secret);
        AuthScope scope = new AuthScope(host, port, AuthScope.ANY_REALM);
        client.getState().setCredentials(scope, credentials);

        // Creates the method
        switch (type) {
            case GET:
                method = new GetMethod(wsUrl);
                break;
            case POST:
                PostMethod pm = new PostMethod(wsUrl);
                StringRequestEntity requestEntity = new StringRequestEntity(xmlParams);
                pm.setRequestEntity(requestEntity);
                method = pm;
                break;
            case PUT:
                PutMethod pm1 = new PutMethod(wsUrl);
                StringRequestEntity requestEntity1 = new StringRequestEntity(xmlParams);
                pm1.setRequestEntity(requestEntity1);
                method = pm1;
                break;
            case DELETE:
                method = new DeleteMethod(wsUrl);
                break;
            default:
                throw new IllegalArgumentException();
        }

        method.setRequestHeader(""Accept"", ""text/xml"");
        method.setDoAuthentication(true);

        try {
            // Executes the request
            client.executeMethod(method);

            // Parses the result
            String body = method.getResponseBodyAsString();
            if (Log.isDebugEnabled()) {
                Log.debug(""Outgoing REST call results: "" + body);
            }

            // Checks the http status
            if (method.getStatusCode() != 200) {
                throw new ConnectException(""Error connecting to Clearspace, http status code: "" + method.getStatusCode());
            }

            Element response = localParser.get().parseDocument(body).getRootElement();

            // Check for exceptions
            checkFault(response);

            // Since there is no exception, returns the response
            return response;
        } catch (DocumentException e) {
            throw new ConnectException(""Error parsing the response of Clearspace."", e);
        } catch (HttpException e) {
            throw new ConnectException(""Error peforming http request to Clearspace"", e);
        } catch (IOException e) {
            throw new ConnectException(""Error peforming http request to Clearspace."", e);
        } finally {
            method.releaseConnection();
        }
    }",Makes a rest request of any type at the specified urlSuffix.,1,693
3685,"public CountersReader countersReader()
    {
        if (conductor.isClosed())
        {
            throw new IllegalStateException(""Client is closed"");
        }

        return conductor.countersReader();
    }",Get the  CountersReader for the Aeron media driver counters.,1,55
3686,"public boolean matches(Object... args) {

		if ((args == null) || (args.length <= 0)) {
			return false;
		}
		if (!(args[0] instanceof IRidget)) {
			return false;
		}

		IRidget ridget = (IRidget) args[0];
		String ridgetId = ridget.getID();
		if (args.length == 1) {
			return StringUtils.equals(ridgetId, getId());
		} else {
			if (args[1] instanceof INavigationNode) {
				String nodeId = NavigationNodeUtility.getLongNodeId((INavigationNode) args[1]);
				String longRidgetId = nodeId + ""/"" + ridgetId; //$NON-NLS-1$
				StringMatcher matcher = new StringMatcher(getId());
				return matcher.match(longRidgetId);
			}
		}

		return false;

	}",This method compares the ID of this matcher and the given ID of a ridget or the combined ID of navigation nod and ridget.,1,260
3687,"public I18nMessage valueIsBlankLiteral() {
    return createMessage(bundlePath, 13);
  }",Generates a  I18nMessage for a value that was expected to not be a  BlankLiteral but was,1,25
3688,"public static boolean validateSubscription(Subscription current, Subscription next) {
        if (next == null) {
            RxJavaPlugins.onError(new NullPointerException(""next is null""));
            return false;
        }
        if (current != null) {
            next.cancel();
            reportSubscriptionSet();
            return false;
        }
        return true;
    }","Verifies that current is null, next is not null, otherwise signals errors to the RxJavaPlugins and returns false",1,105
3690,"public static String getExtension(final String filename) {
        String suffix = """";
        String shortFilename = filename;

        int lastDirSeparator = filename.lastIndexOf(File.separatorChar);
        if(lastDirSeparator > 0){
            shortFilename = filename.substring(lastDirSeparator + 1);
        }

        int index = shortFilename.lastIndexOf('.');

        if (index > 0 && index < shortFilename.length() - 1) {
            suffix = shortFilename.substring(index + 1);
        }

        return suffix;
    }",Gets the extension of a filename.,1,164
3691,"public String getEncoding()
    {
        String encoding = getJMFEncoding();

        if (encoding != null)
        {
            int encodingLength = encoding.length();

            if (encodingLength > 3)
            {
                int rtpPos = encodingLength - 4;

                if (encoding.substring(rtpPos).equalsIgnoreCase(""/rtp""))
                    encoding = encoding.substring(0, rtpPos);
            }
        }
        return encoding;
    }",Implements MediaFormat#getEncoding() and returns the encoding of the JMF Format that we are encapsulating here but it is the RFC-known encoding and not the internal JMF encoding.,1,133
3692,"public WindowedDataStream<OUT> window(WindowingHelper policyHelper) {
		return new WindowedDataStream<OUT>(this, policyHelper);
	}","Create a  WindowedDataStream that can be used to apply transformation like  WindowedDataStream#reduceWindow,  WindowedDataStream#mapWindow or aggregations on preset chunks(windows) of the data stream.",1,36
3693,"public KaleoTransition remove(KaleoTransition kaleoTransition)
		throws SystemException {
		return super.remove(kaleoTransition);
	}",Removes the kaleo transition from the database.,1,32
3694,"public KaleoNotification remove(long kaleoNotificationId)
		throws NoSuchNotificationException, SystemException {
		return remove(Long.valueOf(kaleoNotificationId));
	}",Removes the kaleo notification with the primary key from the database.,1,38
3695,"public <V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit) {
        long triggerTime = System.nanoTime() + unit.toNanos(delay);
        ScheduledFutureTask<V> t = new ScheduledFutureTask<V>(callable, triggerTime);
        delayedExecute(t);
        return t;
    }",Creates and executes a ScheduledFuture that becomes enabled after the given delay.,1,96
3696,"public boolean isEncapsulating() {
        return quoteChar != null;
    }",Returns whether an quoteChar has been defined.,1,24
3697,"public static MethodDelegation to(Object delegate, String fieldName, MethodLookupEngine methodLookupEngine) {
        return new MethodDelegation(
                new InstrumentationDelegate.ForStaticFieldInstance(nonNull(delegate), isValidIdentifier(fieldName)),
                defaultParameterBinders(),
                defaultDefaultsProvider(),
                defaultAmbiguityResolver(),
                defaultAssigner(),
                methodLookupEngine.getReachableMethods(new TypeDescription.ForLoadedType(delegate.getClass()))
                        .filter(not(isStatic().or(isPrivate()).or(isConstructor())))
        );
    }","Identical to  net.bytebuddy.instrumentation.MethodDelegation#to(Object, java.lang.String) but uses an explicit  net.bytebuddy.instrumentation.method.MethodLookupEngine.",1,129
3698,"@SuppressWarnings(""unchecked"")
    public DataConverter getDataConverter(final Object schemaForWriter) {
        final Converter converter = getConverterForWriter();
        return new DataConverter() {

            @Override
            public Object convert(Object sourceRecord) throws DataConversionException {
                return converter.convertRecord(schemaForWriter, sourceRecord, workUnit);
            }
        };
    }",Get the  com.linkedin.uif.writer.converter.DataConverter used to convert source data records into,1,97
3699,"private static String getToolTip(Object obj) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
		Object tooltipText = SWTUtils.invokeMethod(obj, ""getToolTipText""); //$NON-NLS-1$
		if (tooltipText instanceof String)
			return ((String) tooltipText).replaceAll(Text.DELIMITER, ""\n""); //$NON-NLS-1$
		return """";
	}",Gets the tooltip text of the object using the getToolTipText method.,1,95
3700,"public RawLog newPublication(final String channel, final int sessionId, final int streamId, final long correlationId)
    {
        return newInstance(publicationsDir, channel, sessionId, streamId, correlationId, publicationTermBufferLength);
    }",Create new  RawLog in the publications directory for the supplied triplet.,1,64
3701,"private Graph getRequestLogGraph() {
        return tcManager.getGraph(REQUEST_LOG_GRAPH_NAME);
    }",This returns the existing Graph for the log .,1,24
3702,"protected RDFFactory createRDFTermFactory() {
		return new SimpleRDFTermFactory();
	}",Create a new  RDFFactory for a parse session.,1,23
3703,"public static synchronized List<MediaCodecInfo> getDecoderInfos(String mimeType,
      boolean secure) throws DecoderQueryException {
    CodecKey key = new CodecKey(mimeType, secure);
    List<MediaCodecInfo> decoderInfos = decoderInfosCache.get(key);
    if (decoderInfos != null) {
      return decoderInfos;
    }
    MediaCodecListCompat mediaCodecList = Util.SDK_INT >= 21
        ? new MediaCodecListCompatV21(secure) : new MediaCodecListCompatV16();
    decoderInfos = getDecoderInfosInternal(key, mediaCodecList);
    if (secure && decoderInfos.isEmpty() && 21 <= Util.SDK_INT && Util.SDK_INT <= 23) {
      // Some devices don't list secure decoders on API level 21 [Internal: b/18678462]. Try the
      // legacy path. We also try this path on API levels 22 and 23 as a defensive measure.
      mediaCodecList = new MediaCodecListCompatV16();
      decoderInfos = getDecoderInfosInternal(key, mediaCodecList);
      if (!decoderInfos.isEmpty()) {
        Log.w(TAG, ""MediaCodecList API didn't list secure decoder for: "" + mimeType
            + "". Assuming: "" + decoderInfos.get(0).name);
      }
    }
    decoderInfos = Collections.unmodifiableList(decoderInfos);
    decoderInfosCache.put(key, decoderInfos);
    return decoderInfos;
  }","Returns all  MediaCodecInfos for the given mime type, in the order given by  MediaCodecList.",1,302
3704,"public final IntConstantOperand asIntConstant() {
    return (IntConstantOperand) this;
  }",Cast to an  IntConstantOperand.,1,25
3705,"private boolean generateEventHandler(String handlerName,
                                         String[] paramTypes,
                                         String[] exceptTypes,
                                         String bodyText)
    {
        if (!initialized || !canGenerate)
            return false;

        JavaEditor.InteriorSection sec = getEventHandlerSection(handlerName);
        if (sec != null && bodyText == null)
            return false;

        IndentEngine engine = IndentEngine.find(formEditorSupport.getDocument());
        StringWriter buffer = new StringWriter();
        Writer codeWriter = engine.createWriter(
                        formEditorSupport.getDocument(),
                        initComponentsSection.getPositionAfter().getOffset(),
                        buffer);

        synchronized(GEN_LOCK) {
            try {
                if (sec == null)
                    sec = formEditorSupport.createInteriorSectionAfter(
                        initComponentsSection, getEventSectionName(handlerName));
                int i1, i2;

                codeWriter.write(getEventHandlerHeader(handlerName, paramTypes, exceptTypes));
                codeWriter.flush();
                i1 = buffer.getBuffer().length();
                if (bodyText == null)
                    bodyText = getDefaultEventBody();
                codeWriter.write(bodyText);
                codeWriter.flush();
                i2 = buffer.getBuffer().length();
                codeWriter.write(getEventHandlerFooter());
                codeWriter.flush();

                sec.setHeader(buffer.getBuffer().substring(0,i1));
                sec.setBody(buffer.getBuffer().substring(i1,i2));
                sec.setBottom(buffer.getBuffer().substring(i2));

                codeWriter.close();
            } 
            catch (javax.swing.text.BadLocationException e) {
                return false;
            }
            catch (java.io.IOException ioe) {
                return false;
            }
            clearUndo();
        }
        return true;
    }",Generates the specified event handler.,1,484
3706,"private static IResource drop(IResource sourceResource,
            TmfExperimentElement targetExperiment,
            int operation) {

        IResource traceResource = sourceResource;

        TmfProjectElement projectElement = TmfProjectRegistry.getProject(sourceResource.getProject());
        for (TmfTraceElement trace : targetExperiment.getTraces()) {
            if (trace.getName().equals(sourceResource.getName()) && targetExperiment.getProject().equals(projectElement)) {
                return null;
            }
        }
        if (!targetExperiment.getProject().equals(projectElement)) {
            String targetName = sourceResource.getName();
            for (TmfTraceElement trace : targetExperiment.getProject().getTracesFolder().getTraces()) {
                if (trace.getName().equals(targetName)) {
                    targetName = promptRename(trace);
                    if (targetName == null) {
                        return null;
                    }
                    break;
                }
            }
            try {
                if (operation == DND.DROP_COPY) {
                    IPath destination = targetExperiment.getProject().getTracesFolder().getResource().getFullPath().addTrailingSeparator().append(targetName);
                    sourceResource.copy(destination, false, null);
                    cleanupBookmarks(destination);
                } else {
                    createLink(targetExperiment.getProject().getTracesFolder().getResource(), sourceResource, targetName);
                }
                // use the copied resource for the experiment
                if (sourceResource.getType() == IResource.FILE) {
                    traceResource = targetExperiment.getProject().getTracesFolder().getResource().getFile(targetName);
                } else if (sourceResource.getType() == IResource.FOLDER) {
                    traceResource = targetExperiment.getProject().getTracesFolder().getResource().getFolder(targetName);
                }
            } catch (CoreException e) {
                displayException(e);
                return null;
            }
        }
        if (traceResource != null && traceResource.exists()) {
            createLink(targetExperiment.getResource(), traceResource, traceResource.getName());
            return traceResource;
        }
        return null;
    }",Drop a trace by copying/linking a resource in a target experiment,1,554
3707,"static String canonicalize(String db_object)
    {
        // Oracle expects upper-case table names, schemas, etc.
        if (isOracle)
        {
            return (db_object == null) ? null : db_object.toUpperCase();
        }

        // default database postgres wants lower-case table names
        return (db_object == null) ? null : db_object.toLowerCase();
    }",Return the canonical name for a database object.,1,87
3708,"public Parameters withMaxVideoSize(int maxVideoWidth, int maxVideoHeight) {
      if (maxVideoWidth == this.maxVideoWidth && maxVideoHeight == this.maxVideoHeight) {
        return this;
      }
      return new Parameters(preferredAudioLanguage, preferredTextLanguage,
          allowMixedMimeAdaptiveness, allowNonSeamlessAdaptiveness, maxVideoWidth, maxVideoHeight,
          maxVideoBitrate, exceedVideoConstraintsIfNecessary, exceedRendererCapabilitiesIfNecessary,
          viewportWidth, viewportHeight, viewportOrientationMayChange);
    }",Returns an instance with the provided max video size.,1,105
3709,"public static CharSequence escapeForXML(final CharSequence input) {
        if (input == null) {
            return null;
        }
        final int len = input.length();
        final StringBuilder out = new StringBuilder((int)(len*1.3));
        CharSequence toAppend;
        char ch;
        int last = 0;
        int i = 0;
        while (i < len) {
            toAppend = null;
            ch = input.charAt(i);
            switch(ch) {
            case '<':
                toAppend = LT_ENCODE;
                break;
            case '>':
                toAppend = GT_ENCODE;
                break;
            case '&':
                toAppend = AMP_ENCODE;
                break;
            case '""':
                toAppend = QUOTE_ENCODE;
                break;
            case '\'':
                toAppend = APOS_ENCODE;
                break;
            default:
                break;
            }
            if (toAppend != null) {
                if (i > last) {
                    out.append(input, last, i);
                }
                out.append(toAppend);
                last = ++i;
            } else {
                i++;
            }
        }
        if (last == 0) {
            return input;
        }
        if (i > last) {
            out.append(input, last, i);
        }
        return out;
    }",Escapes all necessary characters in the CharSequence so that it can be used in an XML doc.,1,401
3710,"@SuppressWarnings(""unchecked"")
  public List<BaseEvent> collectEventsWithoutExceptions() {
    return (List<BaseEvent>) CollectionUtils.selectRejected(this.events, failedEventsPredicate);
  }",The exact opposite to  #collectEventsWithExceptions() Returns all the  BaseEvents which messages have a null  ExceptionPayload or a null  ExceptionPayload#getException().,1,47
3711,"public Connector getConnector() {
        Service service = getService();
        if (service.findConnectors().length > 0) {
            return service.findConnectors()[0];
        }
        return null;
    }",Get the default http connector that is used by the embedded,1,66
3712,"public SyncUser get(String key) {
        if (key.equals(UserStore.CURRENT_USER_KEY) && cachedCurrentUser != null) {
            return cachedCurrentUser;
        }

        String userData = sp.getString(key, """");
        if (userData.equals("""")) {
            return null;
        }

        try {
            String userSerialisedAndDecrypted = cipherClient.decrypt(userData);
            SyncUser user = SyncUser.fromJson(userSerialisedAndDecrypted);
            if (UserStore.CURRENT_USER_KEY.equals(key)) {
                cachedCurrentUser = user;
            }
            return user;
        } catch (KeyStoreException e) {
            e.printStackTrace();
            return null;
        }
    }",Retrieves the  SyncUser by decrypting first the serialised Json.,1,194
3713,"public static String getUnescapedName(ASTNode tableOrColumnNode) {
    return getUnescapedName(tableOrColumnNode, null);
  }",Get dequoted name from a table/column node.,1,30
3714,"public static MongoDatabase getDatabase(String dbName, MongoDbFactory factory) {
		return doGetMongoDatabase(dbName, factory, SessionSynchronization.ON_ACTUAL_TRANSACTION);
	}",Obtain the  MongoDatabase database with given name form the given  MongoDbFactory factory using  SessionSynchronization#ON_ACTUAL_TRANSACTION native session synchronization.,1,40
3715,"protected Application configure() {
        throw new UnsupportedOperationException(
                ""The configure method must be implemented by the extending class"");
    }",Return an JAX-RS application that defines how the application in the test container is configured.,1,28
3716,"public int getEndlessCurrentPage() {
        if (mEndlessPageSize > 0) {
            return (int) Math.ceil((double) getMainItemCount() / mEndlessPageSize);
        }
        return 0;
    }","Provides the current endless page if the page size limit is set, if not set the returned value is always 0.",1,60
3717,"public boolean haltComparison(Difference afterDifference) {
        return haltComparison;
    }",ComparisonController implementation.,1,22
3718,"public Closure trampoline() {
        return new TrampolineClosure(this);
    }",Builds a trampolined variant of the current closure.,1,24
3719,"public ProducerTemplate getCamelTemplate() {
        if (camelTemplate == null) {
            camelTemplate = findOrCreateCamelTemplate();
        }
        return camelTemplate;
    }",Returns a  ProducerTemplate from the Spring  ApplicationContext instances or lazily creates a new one dynamically,1,46
3720,"public Document getMappedExample(Example<?> example) {

		Assert.notNull(example, ""Example must not be null!"");

		return getMappedExample(example, mappingContext.getPersistentEntity(example.getProbeType()));
	}",Returns the given  Example as  Document holding matching values extracted from  Example#getProbe().,1,56
3721,"public Object caseAccessibilityValue( AccessibilityValue object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Accessibility Value'.,1,25
3722,"static Definition getDefinition(Node n, boolean isExtern) {
    Node parent = n.getParent();
    if (parent == null) {
      return null;
    }

    if (NodeUtil.isVarDeclaration(n) && (isExtern || n.hasChildren())) {
      return new VarDefinition(n, isExtern);
    } else if (parent.isFunction() && parent.getFirstChild() == n) {
      if (!NodeUtil.isFunctionExpression(parent)) {
        return new NamedFunctionDefinition(parent, isExtern);
      } else if (!n.getString().isEmpty()) {
        return new FunctionExpressionDefinition(parent, isExtern);
      }
    } else if (parent.isClass() && parent.getFirstChild() == n) {
      if (!NodeUtil.isClassExpression(parent)) {
        return new NamedClassDefinition(parent, isExtern);
      } else if (!n.isEmpty()) {
        return new ClassExpressionDefinition(parent, isExtern);
      }
    } else if (n.isMemberFunctionDef() && parent.isClassMembers()) {
      return new MemberFunctionDefinition(n, isExtern);
    } else if (parent.isAssign() && parent.getFirstChild() == n) {
      return new AssignmentDefinition(parent, isExtern);
    } else if (NodeUtil.isObjectLitKey(n)) {
      return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(), isExtern);
    } else if (NodeUtil.getEnclosingType(n, Token.PARAM_LIST) != null && n.isName()) {
      Node paramList = NodeUtil.getEnclosingType(n, Token.PARAM_LIST);
      Node function = paramList.getParent();
      return new FunctionArgumentDefinition(function, n, isExtern);
    } else if (parent.getToken() == Token.COLON && parent.getFirstChild() == n && isExtern) {
      Node grandparent = parent.getParent();
      checkState(grandparent.getToken() == Token.LB);
      checkState(grandparent.getParent().getToken() == Token.LC);
      return new RecordTypePropertyDefinition(n);
    } else if (isExtern && n.isGetProp() && parent.isExprResult() && n.isQualifiedName()) {
      return new ExternalNameOnlyDefinition(n);
    }
    return null;
  }",This logic must match  #isDefinitionNode(Node n).,1,680
3723,"public RequestMappingInfo getMatchingRequestMapping(HttpServletRequest request) {
		RequestMethodsRequestCondition matchingMethod = methodsCondition.getMatchingCondition(request);
		ParamsRequestCondition matchingParams = paramsCondition.getMatchingCondition(request);
		HeadersRequestCondition matchingHeaders = headersCondition.getMatchingCondition(request);
		ConsumesRequestCondition matchingConsumes = consumesCondition.getMatchingCondition(request);
		ProducesRequestCondition matchingProduces = producesCondition.getMatchingCondition(request);

		if (matchingMethod == null || matchingParams == null || matchingHeaders == null ||
				matchingConsumes == null || matchingProduces == null)  {
			return null;
		}
		
		PatternsRequestCondition matchingPatterns = patternsCondition.getMatchingCondition(request);
		if (matchingPatterns != null) {
			return new RequestMappingInfo(matchingPatterns, matchingMethod,
					matchingParams, matchingHeaders, matchingConsumes,
					matchingProduces);
		}

		return null;
	}",Returns a new  RequestMappingInfo with conditions relevant to the current request.,1,225
3724,"public KaleoDefinition remove(long kaleoDefinitionId)
		throws NoSuchDefinitionException, SystemException {
		return remove(Long.valueOf(kaleoDefinitionId));
	}",Removes the kaleo definition with the primary key from the database.,1,38
3725,"VM_TypeReference annotationType() {
    return VM_TypeReference.findOrCreate(classLoader, type);
  }","Return the VM_TypeReference of the declared annotation, ie an interface and not the class object of this instance",1,25
3726,"public boolean matches(String uri) {
		if (uri == null) {
			return false;
		}
		Matcher matcher = this.matchPattern.matcher(uri);
		return matcher.matches();
	}",Indicate whether the given URI matches this template.,1,66
3727,"public static ConsumesRequestCondition parseConsumes(String[] consumes, String[] headers) {

		List<ConsumesRequestCondition.ConsumeRequestCondition> allConditions = parseContentTypeHeaders(headers);

		// ignore the default consumes() value if any content-type headers have been set
		boolean headersHasContentType = !allConditions.isEmpty();
		boolean consumesHasDefaultValue = consumes.length == 1 && consumes[0].equals(""*/*"");
		if (!headersHasContentType || !consumesHasDefaultValue) {
			for (String consume : consumes) {
				allConditions.add(new ConsumesRequestCondition.ConsumeRequestCondition(consume));
			}
		}
		return new ConsumesRequestCondition(allConditions);
	}","Parses the given consumes and  Content-Type headers, and returns them as a single request condition.",1,161
3728,"private File getRooHome() {
		return shell.getHome();
	}",Returns the home directory of the Roo installation obtained from the current  Shell implementation.,1,23
3729,"public int findExplicitAnchorBackward(int connectionIndex) {
		return findExplicitAnchor(connectionIndex, -1);
	}","Returns an explicit anchor index for the first explicit anchor that can be found when iterating the connection anchors backwards, starting at the given connection index.",1,29
3730,"public static FloatSize parseRelativeSize(SharedState state) {
        if (null == state) {
            return null;
        }

        boolean hasAttribute = false;
        String w = """";
        String h = """";
        Map<String, Object> stateMap = state.getState();
        if (stateMap.containsKey(""width"")) {
            hasAttribute = true;
            w = String.valueOf(stateMap.get(""width""));
        }
        if (stateMap.containsKey(""height"")) {
            hasAttribute = true;
            h = String.valueOf(stateMap.get(""height""));
        }

        if (!hasAttribute) {
            return null;
        }

        float relativeWidth = Util.parseRelativeSize(w);
        float relativeHeight = Util.parseRelativeSize(h);

        FloatSize relativeSize = new FloatSize(relativeWidth, relativeHeight);
        return relativeSize;

    }",Parses shared state and fetches the relative size of the component.,1,265
3731,"public final Pointer origin() {
        return reference.toOrigin();
    }","The current ""origin"" of the object in VM memory.",1,25
3732,"public Image loadImage(AssetManager assetManager, BlenderInputStream inputStream, int startPosition, boolean flipY) {
        Texture tex = loadTexture(assetManager, inputStream, startPosition, flipY);
        
        if (tex == null) {
            return null;
        } else {
            return tex.getImage();
        }
    }",This method loads a image which is packed into the blender file.,1,95
3733,"public SVNRevision remove(long svnRevisionId)
		throws NoSuchSVNRevisionException, SystemException {
		return remove(Long.valueOf(svnRevisionId));
	}",Removes the s v n revision with the primary key from the database.,1,38
3734,"public PhysicsDimension getDimension(BaseUnit<?> unit) {
        if (unit.equals(SI.KILOGRAM)) return PhysicsDimension.MASS;
        if (unit.equals(SI.SECOND)) return PhysicsDimension.TIME;
        if (unit.equals(SI.AMPERE)) return PhysicsDimension.ELECTRIC_CURRENT;
        if (unit.equals(SI.KELVIN)) return PhysicsDimension.TEMPERATURE;
        if (unit.equals(SI.MOLE)) return PhysicsDimension.AMOUNT_OF_SUBSTANCE;
        if (unit.equals(SI.CANDELA)) return PhysicsDimension.LUMINOUS_INTENSITY;
        return PhysicsDimension.NONE;
    }",Returns the dimension for the specified base unit.,1,153
3735,"public boolean getReadResponseAsBoolean() {
        return getPropertyAsBoolean(STORE_RESPONSE);
    }",return whether the sampler should store the response,1,22
3736,"@SuppressWarnings(""unchecked"")
    default Option<T> min() {
        if (isEmpty() || !(head() instanceof Comparable)) {
            return None.instance();
        } else {
            return minBy((o1, o2) -> ((Comparable<T>) o1).compareTo(o2));
        }
    }",Calculates the minimum of this elements according to their natural order.,1,102
3737,"private File getKdeShareApplnkFolder(int userType)
    {

        if(userType == Shortcut.ALL_USERS)
        {
           return new File(File.separator + ""usr"" + File.separator + ""share"" + File.separator
                 + ""applications"");
        }
        else
        {
           return new File(System.getProperty(""user.home"") + File.separator + "".local""
                 + File.separator + ""share"" + File.separator + ""applications"");
        }

    }",Gets the XDG path to place the menu shortcuts,1,146
3738,"public Iterator getNonMatchingMimeHeaders(String[] names) {
        return mimeHeaders.getNonMatchingHeaders(names);
    }",Retrieves all MimeHeader objects whose name does not match a name in the given array.,1,29
3739,"public Subscription subscribe() {
        return protectivelyWrapAndSubscribe(new Observer<T>() {

            @Override
            public void onCompleted() {
                // do nothing
            }

            @Override
            public void onError(Throwable e) {
                handleError(e);
                throw new OnErrorNotImplementedException(e);
            }

            @Override
            public void onNext(T args) {
                // do nothing
            }

        });
    }",Subscribe and ignore all events.,1,119
3740,"public static FluidStack tryFluidTransfer(IFluidHandler fluidDestination, IFluidHandler fluidSource, int maxAmount, boolean doTransfer)
    {
        FluidStack drainable = fluidSource.drain(maxAmount, false);
        if (drainable != null && drainable.amount > 0)
        {
            return tryFluidTransfer_Internal(fluidDestination, fluidSource, drainable, doTransfer);
        }
        return null;
    }",Fill a destination fluid handler from a source fluid handler with a max amount.,1,105
3741,"public boolean shouldSkip(HttpResponse response) {
        return !httpCompressionLogic.shouldCompress(response);
    }",Determines if encoding should occur based on the response.,1,28
3742,"public ContextViewer getViewer() {
        return viewer;
    }",Returns the context viewer represented by this view part.,1,19
3743,"public static Kernel makeCopy(Kernel kernel) throws Exception {
    if (kernel instanceof Copyable) {
      return (Kernel) ((Copyable) kernel).copy();
    }
    return (Kernel) new SerializedObject(kernel).getObject();
  }",Creates a shallow copy of the kernel (if it implements Copyable) otherwise a deep copy using serialization.,1,77
3744,"public final IFormSubmittingComponent findSubmittingButton()
	{
		IFormSubmittingComponent submittingComponent = (IFormSubmittingComponent)getPage()
				.visitChildren(IFormSubmittingComponent.class, new IVisitor()
				{
					public Object component(final Component component)
					{
						// Get submitting component
						final IFormSubmittingComponent submittingComponent = (IFormSubmittingComponent)component;

						// Check for component-name or component-name.x request string
						if (submittingComponent.getForm() != null &&
								submittingComponent.getForm().getRootForm() == Form.this &&
								(getRequest().getParameter(submittingComponent.getInputName()) != null || getRequest()
										.getParameter(submittingComponent.getInputName() + "".x"") != null))
						{
							if (!component.isVisible())
							{
								throw new WicketRuntimeException(""Submit Button "" +
										submittingComponent.getInputName() + "" (path="" +
										component.getPageRelativePath() + "") is not visible"");
							}
							return submittingComponent;
						}
						return CONTINUE_TRAVERSAL;
					}
				});

		return submittingComponent;
	}",Gets the IFormSubmittingComponent which submitted this form.,1,271
3745,"public GeometryNode<ICurve> getCurveNode() {
		return curveNode;
	}",Returns the  GeometryNode which displays the curve geometry.,1,22
3746,"public <F> ConnectedIterativeDataStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {
		return withFeedbackType(TypeExtractor.getForClass(feedbackTypeClass));
	}","Changes the feedback type of the iteration and allows the user to apply co-transformations on the input and feedback stream, as in a  ConnectedStreams.",1,43
3747,"public static boolean authenticateDomain(final String localDomain, final String remoteDomain) {
        final Logger log = LoggerFactory.getLogger( Log.getName() + ""[Authenticate local domain: '"" + localDomain + ""' to remote domain: '"" + remoteDomain + ""']"" );

        log.debug( ""Start domain authentication ..."" );
        if (remoteDomain == null || remoteDomain.length() == 0 || remoteDomain.trim().indexOf(' ') > -1) {
            // Do nothing if the target domain is empty, null or contains whitespaces
            log.warn( ""Unable to authenticate: remote domain is invalid."" );
            return false;
        }
        try {
            // Check if the remote domain is in the blacklist
            if (!RemoteServerManager.canAccess(remoteDomain)) {
                log.info( ""Unable to authenticate: Remote domain is not accessible according to our configuration (typical causes: server federation is disabled, or domain is blacklisted)."" );
                return false;
            }

            log.debug( ""Searching for pre-existing outgoing sessions to the remote domain (if one exists, it will be re-used) ..."" );
            OutgoingServerSession session;
            SessionManager sessionManager = SessionManager.getInstance();
            if (sessionManager == null) {
                // Server is shutting down while we are trying to create a new s2s connection
                log.warn( ""Unable to authenticate: a SessionManager instance is not available. This should not occur unless Openfire is starting up or shutting down."" );
                return false;
            }
            session = sessionManager.getOutgoingServerSession(remoteDomain);

            if (session == null)
            {
                log.debug( ""There are no pre-existing outgoing sessions to the remote domain itself. Searching for pre-existing outgoing sessions to super- or subdomains of the remote domain (if one exists, it might be re-usable) ..."" );

                for ( IncomingServerSession incomingSession : sessionManager.getIncomingServerSessions( remoteDomain ) )
                {
                    // These are the remote domains that are allowed to send data to the local domain - expected to be sub- or superdomains of remoteDomain
                    for ( String otherRemoteDomain : incomingSession.getValidatedDomains() )
                    {
                        // See if there's an outgoing session to any of the (other) domains hosted by the remote domain.
                        session = sessionManager.getOutgoingServerSession( otherRemoteDomain );
                        if (session != null)
                        {
                            log.debug( ""An outgoing session to a different domain ('{}') hosted on the remote domain was found."", otherRemoteDomain );

                            // As this sub/superdomain is different from the original remote domain, we need to check if it supports dialback.
                            if ( session.isUsingServerDialback() )
                            {
                                log.debug( ""Dialback was used for '{}'. This session can be re-used."", otherRemoteDomain );
                                break;
                            }
                            else
                            {
                                log.debug( ""Dialback was not used for '{}'. This session cannot be re-used."", otherRemoteDomain );
                                session = null;
                            }
                        }
                    }
                }

                if (session == null) {
                    log.debug( ""There are no pre-existing session to other domains hosted on the remote domain."" );
                }
            }

            if ( session != null )
            {
                log.debug( ""A pre-existing session can be re-used. The session was established using server dialback so it is possible to do piggybacking to authenticate more domains."" );
                if ( session.getAuthenticatedDomains().contains( localDomain ) && session.getHostnames().contains( remoteDomain ) )
                {
                    // Do nothing since the domain has already been authenticated.
                    log.debug( ""Authentication successful (domain was already authenticated in the pre-existing session)."" );
                    return true;
                }

                // A session already exists so authenticate the domain using that session.
                if ( session.authenticateSubdomain( localDomain, remoteDomain ) )
                {
                    log.debug( ""Authentication successful (domain authentication was added using a pre-existing session)."" );
                    return true;
                }
                else
                {
                    log.warn( ""Unable to authenticate: Unable to add authentication to pre-exising session."" );
                    return false;
                }
            }
            else
            {
                log.debug( ""Unable to re-use an existing session. Creating a new session ..."" );
                int port = RemoteServerManager.getPortForServer(remoteDomain);
                session = createOutgoingSession(localDomain, remoteDomain, port);
                if (session != null) {
                    log.debug( ""Created a new session."" );

                    // Add the validated domain as an authenticated domain
                    session.addAuthenticatedDomain(localDomain);
                    // Add the new domain to the list of names that the server may have
                    session.addHostname(remoteDomain);
                    // Notify the SessionManager that a new session has been created
                    sessionManager.outgoingServerSessionCreated((LocalOutgoingServerSession) session);
                    log.debug( ""Authentication successful."" );
                    return true;
                } else {
                    log.warn( ""Unable to authenticate: Fail to create new session."" );
                    return false;
                }
            }
        }
        catch (Exception e)
        {
            log.error( ""An exception occurred while authenticating remote domain!"", e );
            return false;
        }
    }",Authenticates the local domain to the remote domain.,1,925
3748,"public static <T extends CharSequence> T validIndex(T chars, int index, String message, Object... values) {
        Validate.notNull(chars);
        if (index < 0 || index >= chars.length()) {
            throw new IndexOutOfBoundsException(String.format(message, values));
        }
        return chars;
    }","Validates that the index is within the bounds of the argument character sequence; otherwise throwing an exception with the specified message. Validate.validIndex(myStr, 2, ""The string index is invalid: ""); If the character sequence is null, then the message of the exception is &quot;The validated object is null&quot;.",1,108
3749,"private  Expression color(String context, Object obj, Color fallback) {
        if (obj == null) {
            return fallback == null ? null : ff.literal(fallback);
        } else if (obj instanceof String) {
            String str = (String) obj;
            return color( str );
        } else if (obj instanceof Number) {
            throw new MBFormatException(context + "" color from Number not supported"");
        } else if (obj instanceof Boolean) {
            throw new MBFormatException(context + ""  color from Boolean not supported"");
        } else if (obj instanceof JSONObject) {
            MBFunction function = new MBFunction( (JSONObject) obj );
            return function.color();
        } else if (obj instanceof JSONArray) {
            throw new MBFormatException(context + "" color from JSONArray not supported"");
        } else {
            throw new IllegalArgumentException(""json contents invalid, "" + context
                    + "" limited to String or JSONObject but was "" + obj.getClass().getSimpleName());
        }
    }",Parse obj into a color expression (literal or function).,1,302
3750,"public static RuleRef ref(Supplier<Rule> ruleSupplier) {
		return new RuleRef(ruleSupplier);
	}",Shortcut for  new RuleRef(ruleSupplier).,1,32
3751,"public Iterable<String> getExpressionFactoryIds() {
		return new ArrayIterator<String>(getExpressionFactoryIdsImp());
	}","Returns the unique identifiers of the  ExpressionFactory handled by this BNF rule, which includes those from the children as well.",1,32
3752,"protected BendConnectionPolicy getBendPolicy() {
		return bendPolicy;
	}",Returns the  BendConnectionPolicy to use for manipulating the  #getTargetPart().,1,19
3753,"public Document outputSettings(OutputSettings outputSettings) {
        Validate.notNull(outputSettings);
        this.outputSettings = outputSettings;
        return this;
    }",Set the document's output settings.,1,41
3754,"public boolean isServerDefault() {
        return equals(ACKNOWLEDGED);
    }",Gets whether this write concern indicates that the server's default write concern will be used.,1,22
3755,"public Date getCommitTime() {
		return getDate(""commit.time"");
	}",Return the timestamp of the commit or  null.,1,24
3756,"public static ClassFileVersion forCurrentJavaVersion() {
        String versionString = System.getProperty(JAVA_VERSION_PROPERTY);
        int[] versionIndex = {-1, 0, 0};
        for (int i = 1; i < 3; i++) {
            versionIndex[i] = versionString.indexOf('.', versionIndex[i - 1] + 1);
            if (versionIndex[i] == -1) {
                throw new IllegalStateException(""This JVM's version string does not seem to be valid: "" + versionString);
            }
        }
        return ClassFileVersion.forKnownJavaVersion(Integer.parseInt(versionString.substring(versionIndex[1] + 1, versionIndex[2])));
    }",Finds the highest class file version that is compatible to the current JVM version by parsing the java.version property which is provided by  java.lang.System#getProperty(String).,1,183
3757,"public ObservableList<Edge> getEdges() {
		return edgesProperty.getReadOnlyProperty();
	}",Returns the edgesProperty of this  Graph.,1,26
3758,"public Matrix4 set (Matrix4 matrix) {
		return this.set(matrix.val);
	}",Sets the matrix to the given matrix.,1,30
3759,"public CountersManager countersManager()
        {
            return countersManager;
        }",The  CountersManager used for shared resource between the embedded media driver and the archive.,1,20
3760,"public static StringBuilder quoteIdentifier(StringBuilder builder, String s) {
        if (s == null) {
            return builder.append(""\""\"""");
        }
        if (ParserUtil.isSimpleIdentifier(s)) {
            return builder.append(s);
        }
        return StringUtils.quoteIdentifier(builder, s);
    }",Add double quotes around an identifier if required and appends it to the specified string builder.,1,96
3761,"private Single<Integer> checkImageGeoLocation(Place place, String filePath) {
        Timber.d(""Checking for image geolocation %s"", filePath);
        if (place == null || StringUtils.isNullOrWhiteSpace(place.getWikiDataEntityId())) {
            return Single.just(ImageUtils.IMAGE_OK);
        }
        return Single.fromCallable(() -> filePath)
                .map(fileUtilsWrapper::getGeolocationOfFile)
                .flatMap(geoLocation -> {
                    if (StringUtils.isNullOrWhiteSpace(geoLocation)) {
                        return Single.just(ImageUtils.IMAGE_OK);
                    }
                    return imageUtilsWrapper.checkImageGeolocationIsDifferent(geoLocation, place.getLocation());
                });
    }",Checks for image geolocation returns IMAGE_OK if the place is null or if the file doesn't contain a geolocation,1,172
3762,"private static JavaMethodInspector make(Inspection inspection, MaxCompiledCode compiledCode, MethodCodeKind codeKind) throws MaxVMBusyException {
        JavaMethodInspector javaMethodInspector = null;

        // Is there already an inspection open that is bound to this compilation?
        MethodInspector methodInspector = machineCodeToMethodInspector.get(compiledCode);
        if (methodInspector == null) {
            // No existing inspector is bound to this compilation; see if there is an inspector for this method that is
            // unbound
            inspection.vm().acquireLegacyVMAccess();
            try {
                TeleClassMethodActor teleClassMethodActor = compiledCode.getTeleClassMethodActor();
                if (teleClassMethodActor != null) {
                    methodInspector = teleClassMethodActorToMethodInspector.get(teleClassMethodActor);
                }
                final MethodViewManager methodViewManager = (MethodViewManager) ViewKind.METHODS.viewManager();
                final MethodInspectorContainer container = methodViewManager.activateView();
                if (methodInspector == null) {
                    // No existing inspector exists for this method; create new one bound to this compilation
                    javaMethodInspector = new JavaMethodInspector(inspection, container, compiledCode, codeKind);
                } else {
                    // An inspector exists for the method, but not bound to any compilation; bind it to this compilation
                    // TODO (mlvdv) Temp patch; just create a new one in this case too.
                    javaMethodInspector = new JavaMethodInspector(inspection, container, compiledCode, codeKind);
                }
                if (javaMethodInspector != null) {
                    container.add(javaMethodInspector);
                    machineCodeToMethodInspector.put(compiledCode, javaMethodInspector);
                }
            } finally {
                inspection.vm().releaseLegacyVMAccess();
            }
        } else {
            // An existing inspector is bound to this method & compilation; ensure that it has the requested code view
            javaMethodInspector = (JavaMethodInspector) methodInspector;
            javaMethodInspector.viewCodeKind(codeKind);
        }
        return javaMethodInspector;
    }","Gets the  MethodInspector associated with a specific compilation of a Java method in the VM, creating a new one if necessary, and makes the requested code visible.",1,357
3763,"public String getName( )
    {
    return this.name.getString( );
    }",Returns the name of this Global Variable.,1,28
3764,"public FsStatus getFsStatus(final Path f) throws IOException {
    if (f == null) {
      return defaultFS.getFsStatus();
    }
    final Path absF = fixRelativePart(f);
    return new FSLinkResolver<FsStatus>() {
      public FsStatus next(final AbstractFileSystem fs, final Path p) 
        throws IOException, UnresolvedLinkException {
        return fs.getFsStatus(p);
      }
    }.resolve(this, absF);
  }",Returns a status object describing the use and capacity of the filesystem denoted by the Path argument p.,1,136
3765,"public static String stringToJCRSearchExp(String str) {
        // Escape ' and \ everywhere, preceding them with \ except when \
        // appears
        // in one of the combinations \"" or \-
        return stringToQueryLiteral(str.replaceAll(""\\\\(?![-\""])"", ""\\\\\\\\"")
                .replaceAll(""'"", ""\\\\'"").replaceAll(""\"""", ""\\\\\""""));
    }","Convert a string to a JCR search expression literal, suitable for use in jcr:contains() (inside XPath) or contains (SQL2).",1,85
3766,"// TODO: Rename to getOnTypePolicies()
	protected Set<? extends IFXOnTypePolicy> getKeyPolicies(
			IVisualPart<Node, ? extends Node> targetPart) {
		return new HashSet<>(targetPart
				.<IFXOnTypePolicy> getAdapters(ON_TYPE_POLICY_KEY).values());
	}",Returns a  Set containing all  IFXOnTypePolicys that are installed on the given target  IVisualPart.,1,66
3767,"public static ImageLoaderConfiguration getDefaultImageLoaderConfiguration(Context context, boolean isWriteLog) {
        ImageLoaderConfiguration.Builder builder = getDefaultImageLoaderConfigurationBuilder(context);
        if (isWriteLog) {
            builder.writeDebugLogs();
        }
        ImageLoaderConfiguration config = builder.build();
        return config;
    }",Get default ImageLoaderConfiguration and you can choose the ImageLoader will write log or not.,1,78
3768,"private void resetRootElement() {
            if (tableMode) {
                if (orientationMode == ORIENTATION_HORIZONTAL) {
                    setElement(DOM.createTD());
                } else {
                    Element tr = DOM.createTR();
                    DOM.appendChild(tr, DOM.createTD());
                    setElement(tr);
                }
            } else {
                setElement(DOM.createDiv());
                // Apply 'hasLayout' for IE (needed to get accurate dimension
                // calculations)
                if (BrowserInfo.get().isIE()) {
                    DOM.setStyleAttribute(getElement(), ""zoom"", ""1"");
                }
            }
        }","Create tr, td or div - depending on the orientation of the layout and set it as root.",1,162
3769,"public boolean offer(E e, long timeout, TimeUnit unit) {
        xfer(e, true, ASYNC, 0);
        return true;
    }",Inserts the specified element at the tail of this queue.,1,48
3770,"int getOffsetHeight() {
        final int height = intValue(super.jsxGet_height());
        final int borderTop = intValue(jsxGet_borderTopWidth());
        final int borderBottom = intValue(jsxGet_borderBottomWidth());
        final int paddingTop = intValue(jsxGet_paddingTop());
        final int paddingBottom = intValue(jsxGet_paddingBottom());
        return height + borderTop + borderBottom + paddingTop + paddingBottom;
    }",Returns the element's offset height (height including padding and border).,1,120
3771,"public ClusterInformation getClusterDefinition(@PathParam(""clusterName"") String clusterName) throws WebApplicationException {
        try {
            return Clusters.getInstance().getClusterInformation(clusterName);
        }catch (WebApplicationException we) {
            throw we;
        }catch (Exception e) {
            throw new WebApplicationException((new ExceptionResponse(e)).get());
        }       
    }",Get the information of specified Hadoop cluster.,1,103
3772,"private static LdapResultCodec transformLdapResult( LdapResultImpl internalLdapResult )
    {
        LdapResultCodec codecLdapResult = new LdapResultCodec();

        // Internal : ResultCodeEnum resultCode -> Codec : int resultCode
        codecLdapResult.setResultCode( internalLdapResult.getResultCode() );

        // Internal : String errorMessage -> Codec : LdapString errorMessage
        String errorMessage = internalLdapResult.getErrorMessage();
        
        codecLdapResult.setErrorMessage( StringTools.isEmpty( errorMessage ) ? """" : errorMessage );

        // Internal : String matchedDn -> Codec : LdapDN matchedDN
        codecLdapResult.setMatchedDN( internalLdapResult.getMatchedDn() );

        // Internal : Referral referral -> Codec : ArrayList referrals
        ReferralImpl internalReferrals = ( ReferralImpl ) internalLdapResult.getReferral();

        if ( internalReferrals != null )
        {
            codecLdapResult.initReferrals();

            for ( String referral:internalReferrals.getLdapUrls() )
            {
                try
                {
                    LdapURL ldapUrl = new LdapURL( referral.getBytes() );
                    codecLdapResult.addReferral( ldapUrl );
                }
                catch ( LdapURLEncodingException lude )
                {
                    LOG.warn( ""The referral "" + referral + "" is invalid : "" + lude.getMessage() );
                    codecLdapResult.addReferral( LdapURL.EMPTY_URL );
                }
            }
        }

        return codecLdapResult;
    }",Transform a Ldapresult part of a Internal Response to a Codec LdapResult,1,306
3773,"public T block() {
		BlockingMonoSubscriber<T> subscriber = new BlockingMonoSubscriber<>();
		onLastAssembly(this).subscribe(Operators.toCoreSubscriber(subscriber));
		return subscriber.blockingGet();
	}",Transform this  Mono into a target type.,1,59
3774,"public static String getRandom(char[] sourceChar, int length) {
        if (sourceChar == null || sourceChar.length == 0 || length < 0) {
            return null;
        }

        StringBuilder str = new StringBuilder(length);
        Random random = new Random();
        for (int i = 0; i < length; i++) {
            str.append(sourceChar[random.nextInt(sourceChar.length)]);
        }
        return str.toString();
    }","get a fixed-length random string, its a mixture of chars in sourceChar",1,158
3775,"public List<Complex> nthRoot(int n) throws IllegalArgumentException {

        if (n <= 0) {
            throw MathRuntimeException.createIllegalArgumentException(""cannot compute nth root for null or negative n: {0}"",
                    new Object[] { n });
        }
        
        List<Complex> result = new ArrayList<Complex>();
        
        if (isNaN()) {
            result.add(Complex.NaN);
            return result;
        }
        
        if (isInfinite()) {
            result.add(Complex.INF);
            return result;
        }

        // nth root of abs -- faster / more accurate to use a solver here?
        final double nthRootOfAbs = Math.pow(abs(), 1.0 / n);

        // Compute nth roots of complex number with k = 0, 1, ... n-1
        final double nthPhi = getArgument()/n;
        final double slice = 2 * Math.PI / n;
        double innerPart = nthPhi;
        for (int k = 0; k < n ; k++) {
            // inner part
            final double realPart      = nthRootOfAbs *  Math.cos(innerPart);
            final double imaginaryPart = nthRootOfAbs *  Math.sin(innerPart);
            result.add(createComplex(realPart, imaginaryPart));
            innerPart += slice;
        }

        return result;
    }",Computes the n-th roots of this complex number.,1,345
3776,"public static UriComponentsBuilder fromMethod(UriComponentsBuilder builder, Method method, Object... args) {
		if (builder != null) {
			builder = (UriComponentsBuilder) builder.clone();
		}
		else {
			builder = ServletUriComponentsBuilder.fromCurrentServletMapping();
		}
		String typePath = getTypeRequestMapping(method.getDeclaringClass());
		String methodPath = getMethodRequestMapping(method);
		String path = pathMatcher.combine(typePath, methodPath);
		builder.path(path);
		UriComponents uriComponents = applyContributors(builder, method, args);
		return UriComponentsBuilder.newInstance().uriComponents(uriComponents);
	}","An alternative to  #fromMethod(java.lang.reflect.Method, Object...) that accepts a  UriComponentsBuilder representing the base URL.",1,175
3777,"public static Boolean getInvisible(Edge edge, Boolean returnDefaultIfMissing) {
		if (edge.getAttributes().containsKey(INVISIBLE__NE)) {
			return (Boolean) edge.getAttributes().get(INVISIBLE__NE);
		}
		return returnDefaultIfMissing ? INVISIBLE__NE__DEFAULT : null;
	}",Returns the value of the  #INVISIBLE__NE attribute of the given  Edge.,1,77
3778,"public static Bitmap getBitmapFromUrl(String imageUrl, int readTimeOut) {
        return getBitmapFromUrl(imageUrl, readTimeOut, null);
    }",get Bitmap by imageUrl,1,38
3779,"public String getOriginalReference() {
      return originalReference;
   }","This is a special method and should not normally be used, use  #toString() or  #getReference()",1,19
3780,"public Message remove(long messageId)
		throws NoSuchMessageException, SystemException {
		return remove(Long.valueOf(messageId));
	}",Removes the message with the primary key from the database.,1,38
3781,"public DN getClonedName()
    {
        return ( DN ) name.clone();
    }",Gets a cloned copy of the normalized distinguished name of this principal as a  DN.,1,30
3782,"public DataStream<OUT> partitionBy(int... fields) {

		return setConnectionType(new FieldsPartitioner<OUT>(new FieldsKeySelector<OUT>(
				getOutputType(), fields)));
	}",Sets the partitioning of the  DataStream so that the output tuples are partitioned by the hashcodes of the selected fields.,1,55
3783,"private static boolean isSameVariables(DetailAST ast1, DetailAST ast2) {
        final DetailAST classOrMethodOfAst1 =
            findFirstUpperNamedBlock(ast1);
        final DetailAST classOrMethodOfAst2 =
            findFirstUpperNamedBlock(ast2);
        return classOrMethodOfAst1 == classOrMethodOfAst2;
    }",Check if both the Variables are same.,1,66
3784,"public static String getExtension(final CharSequence name, final String defaultValue) {
		if(name==null || name.toString().trim().isEmpty()) throw new IllegalArgumentException(""The passed name was null or empty"", new Throwable());
		String file = name.toString().trim();
		if(file.lastIndexOf(""."")==-1) {
			return defaultValue;
		}
		return file.substring(file.lastIndexOf(""."")+1);		
	}",Returns the extension of the passed name,1,139
3785,"public static boolean removeThreadOverride(String propertyName)
    {
        Map localProps = (Map)threadProperties.get();
        if (localProps != null)
        {
            String p = (String)localProps.remove(propertyName);
            if (p != null)
            {
                if (localProps.isEmpty())
                {
                    threadProperties.remove();
                }

                return ""true"".equalsIgnoreCase(p);
            }
        }

        return false;
    }",Remove any value for the specified override property for the current thread only.,1,136
3786,"public int copyRecursiveTo(final String fileMask, final String excludes, final FilePath target) throws IOException, InterruptedException {
        if(this.channel==target.channel) {
            // local to local copy.
            return act(new FileCallable<Integer>() {
                private static final long serialVersionUID = 1L;
                public Integer invoke(File base, VirtualChannel channel) throws IOException {
                    if(!base.exists())  return 0;
                    assert target.channel==null;

                    try {
                        class CopyImpl extends Copy {
                            private int copySize;

                            public CopyImpl() {
                                setProject(new org.apache.tools.ant.Project());
                            }

                            @Override
                            protected void doFileOperations() {
                                copySize = super.fileCopyMap.size();
                                super.doFileOperations();
                            }

                            public int getNumCopied() {
                                return copySize;
                            }
                        }

                        CopyImpl copyTask = new CopyImpl();
                        copyTask.setTodir(new File(target.remote));
                        copyTask.addFileset(Util.createFileSet(base,fileMask,excludes));
                        copyTask.setOverwrite(true);
                        copyTask.setIncludeEmptyDirs(false);

                        copyTask.execute();
                        return copyTask.getNumCopied();
                    } catch (BuildException e) {
                        throw new IOException2(""Failed to copy ""+base+""/""+fileMask+"" to ""+target,e);
                    }
                }
            });
        } else
        if(this.channel==null) {
            // local -> remote copy
            final Pipe pipe = Pipe.createLocalToRemote();

            Future<Void> future = target.actAsync(new FileCallable<Void>() {
                private static final long serialVersionUID = 1L;
                public Void invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        readFromTar(remote+'/'+fileMask, f,TarCompression.GZIP.extract(pipe.getIn()));
                        return null;
                    } finally {
                        pipe.getIn().close();
                    }
                }
            });
            int r = writeToTar(new File(remote),fileMask,excludes,TarCompression.GZIP.compress(pipe.getOut()));
            try {
                future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
            return r;
        } else {
            // remote -> local copy
            final Pipe pipe = Pipe.createRemoteToLocal();

            Future<Integer> future = actAsync(new FileCallable<Integer>() {
                private static final long serialVersionUID = 1L;
                public Integer invoke(File f, VirtualChannel channel) throws IOException {
                    try {
                        return writeToTar(f,fileMask,excludes,TarCompression.GZIP.compress(pipe.getOut()));
                    } finally {
                        pipe.getOut().close();
                    }
                }
            });
            try {
                readFromTar(remote+'/'+fileMask,new File(target.remote),TarCompression.GZIP.extract(pipe.getIn()));
            } catch (IOException e) {// BuildException or IOException
                try {
                    future.get(3,TimeUnit.SECONDS);
                    throw e;    // the remote side completed successfully, so the error must be local
                } catch (ExecutionException x) {
                    // report both errors
                    throw new IOException2(Functions.printThrowable(e),x);
                } catch (TimeoutException _) {
                    // remote is hanging
                    throw e;
                }
            }
            try {
                return future.get();
            } catch (ExecutionException e) {
                throw new IOException2(e);
            }
        }
    }",Copies the files that match the given file mask to the specified target node.,1,985
3787,"@Override
	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {
		RequestMappingInfo info = null;
		RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class);
		if (methodAnnotation != null) {
			RequestCondition<?> methodCondition = getCustomMethodCondition(method);
			info = createRequestMappingInfo(methodAnnotation, methodCondition);
			RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class);
			if (typeAnnotation != null) {
				RequestCondition<?> typeCondition = getCustomTypeCondition(handlerType);
				info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info);
			}
		}
		return info;
	}",Uses method and type-level @ RequestMapping annotations to create the RequestMappingInfo.,1,182
3788,"protected IViewer getContentViewer() {
		return domain.getAdapter(
				AdapterKey.get(IViewer.class, IDomain.CONTENT_VIEWER_ROLE));
	}",Returns the  IViewer of the  Domain which was previously injected into this editor.,1,38
3789,"public int copyFromLocal(String[] argv) throws IOException {
    String srcPath = argv[1];
    TachyonURI dstPath = new TachyonURI(argv[2]);
    File src = new File(srcPath);
    if (!src.exists()) {
      System.out.println(""Local path "" + srcPath + "" does not exist."");
      return -1;
    }
    int ret = copyPath(src, mTfs, dstPath);
    if (ret == 0) {
      System.out.println(""Copied "" + srcPath + "" to "" + dstPath);
    }
    return ret;
  }",Copies a file or directory specified by argv from the local filesystem to the filesystem.,1,184
3790,"public CompletableFuture<Boolean> getTerminationFuture() {
		return rpcServer.getTerminationFuture();
	}",Return a future which is completed with true when the rpc endpoint has been terminated.,1,26
3791,"public static IOException getRemoteException(ServiceException se) {
    Throwable e = se.getCause();
    return ((e instanceof RemoteException) ? (IOException) e : 
      new IOException(se));
  }",Return the RemoteException wrapped in ServiceException as cause.,1,65
3792,"public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass) {
		@SuppressWarnings(""unchecked"")
		PP pathParameter = (PP) pathParameters.get(parameterClass);
		Preconditions.checkState(pathParameter != null, ""No parameter could be found for the given class."");
		return pathParameter.getValue();
	}",Returns the value of the  MessagePathParameter for the given class.,1,89
3793,"public List<String> getLocalAddresses() {
        return Collections.unmodifiableList(new ArrayList<String>(this.localAddresses));
    }",Returns an unmodifiable list of the local network addresses that will be used for streamhost candidates of outgoing SOCKS5 Bytestream requests.,1,37
3794,"public Set<ChatManagerListener> getChatListeners() {
        return Collections.unmodifiableSet(chatManagerListeners);
    }",Returns an unmodifiable set of all chat listeners currently registered with this manager.,1,27
3795,"protected String resolvePath(String path) {
		return getEnvironment().resolveRequiredPlaceholders(path);
	}","Resolve the given path, replacing placeholders with corresponding environment property values if necessary.",1,29
3796,"protected NodePart getNestingPart() {
		org.eclipse.gef4.graph.Node nestingNode = getHost().getContent().getNestingNode();
		IContentPart<Node, ? extends Node> nestingNodePart = getHost().getRoot().getViewer().getContentPartMap()
				.get(nestingNode);
		return (NodePart) nestingNodePart;
	}",Returns the  NodePart that contains the nested graph to which the  #getGraphLayoutContext() corresponds.,1,92
3797,"public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata) {
		// Do not consider an interface or an annotation...
		if (metadata.isInterface()) {
			return false;
		}
		for (String indicator : candidateIndicators) {
			if (metadata.isAnnotated(indicator)) {
				return true;
			}
		}
		return metadata.hasAnnotatedMethods(Bean.class.getName());
	}",Check the given metadata for a lite configuration class candidate (e.g.,1,101
3798,"public FunctionDescr function( PackageDescrBuilder pkg ) throws RecognitionException {
        FunctionDescrBuilder function = null;
        try {
            function = helper.start( pkg,
                                     FunctionDescrBuilder.class,
                                     null );

            // 'function'
            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.FUNCTION,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            if ( input.LA( 1 ) != DRLLexer.ID || input.LA( 2 ) != DRLLexer.LEFT_PAREN ) {
                // type
                String type = type();
                if ( state.failed ) return null;
                if ( state.backtracking == 0 ) function.returnType( type );
            }

            // name
            Token id = match( input,
                              DRLLexer.ID,
                              null,
                              null,
                              DroolsEditorType.IDENTIFIER );
            if ( state.failed ) return null;
            if ( state.backtracking == 0 ) {
                function.name( id.getText() );
                helper.setParaphrasesValue( DroolsParaphraseTypes.FUNCTION,
                                            ""\"""" + id.getText() + ""\"""" );
            }

            // arguments
            parameters( function,
                        true );
            if ( state.failed ) return null;

            // body
            String body = chunk( DRLLexer.LEFT_CURLY,
                                 DRLLexer.RIGHT_CURLY,
                                 -1 );
            if ( state.failed ) return null;
            if ( state.backtracking == 0 ) function.body( body );

        } catch ( RecognitionException re ) {
            reportError( re );
        } finally {
            helper.end( FunctionDescrBuilder.class,
                        function );
        }
        return (function != null) ? function.getDescr() : null;
    }",function := FUNCTION type? ID parameters(typed) chunk__,1,526
3799,"public static Bson out(final String collectionName) {
        return out(collectionName, new AggregateOutStageOptions());
    }",Creates a $out pipeline stage using the specified collection name,1,36
3800,"private String readString(ExtractorInput input, int byteLength)
      throws IOException, InterruptedException {
    if (byteLength == 0) {
      return """";
    }
    byte[] stringBytes = new byte[byteLength];
    input.readFully(stringBytes, 0, byteLength);
    // Remove zero padding.
    int trimmedLength = byteLength;
    while (trimmedLength > 0 && stringBytes[trimmedLength - 1] == 0) {
      trimmedLength--;
    }
    return new String(stringBytes, 0, trimmedLength);
  }",Reads a string of length  byteLength from the  ExtractorInput.,1,154
3801,"public Context time() {
        return new Context(this, clock);
    }","Returns a timing  Context, which measures an elapsed time in nanoseconds.",1,27
3802,"public List<Object> getLoggingInfo()
    {
        ArrayList<Object> retval = new ArrayList<Object>(logging.size());
        for (Object aLogging : logging)
        {
            try
            {
                retval.add(((RegistryLogItem) aLogging).clone());
            }
            catch (CloneNotSupportedException e)
            { // Should never be...
                e.printStackTrace();
            }
        }
        return (retval);
    }",Returns a copy of the colected logging informations.,1,122
3803,"public MD5MD5CRC32FileChecksum getFileChecksum(String src, long length)
      throws IOException {
    checkOpen();
    Preconditions.checkArgument(length >= 0);
    return getFileChecksum(src, length, clientName, namenode,
        socketFactory, dfsClientConf.socketTimeout, getDataEncryptionKey(),
        dfsClientConf.connectToDnViaHostname);
  }",Get the checksum of the whole file of a range of the file.,1,84
3804,"public static boolean removeThreadOverride(String propertyName)
    {
        Map localProps = (Map)threadProperties.get();
        if (localProps != null)
        {
            String p = (String)localProps.remove(propertyName);
            if (p != null)
            {
                if (localProps.isEmpty())
                {
                    threadProperties.remove();
                }

                return ""true"".equalsIgnoreCase(p);
            }
        }

        return false;
    }",Remove any value for the specified override property for the current thread only.,1,136
3805,"public InetSocketAddress getKvStateServerAddress(int keyGroupIndex) {
		if (keyGroupIndex < 0 || keyGroupIndex >= numKeyGroups) {
			throw new IndexOutOfBoundsException(""Key group index"");
		}

		return kvStateAddresses[keyGroupIndex];
	}",Returns the registered server address for the key group index or null if none is registered yet.,1,65
3806,"private boolean tryRecoveringExpiredZKSession() throws InterruptedException,
      IOException, KeeperException, ExecutionException {

    this.zooKeeper = new ZooKeeperWatcher(conf, MASTER + "":""
      + this.serverName.getPort(), this, true);

    Callable<Boolean> callable = new Callable<Boolean> () {
      public Boolean call() throws InterruptedException,
          IOException, KeeperException {
        MonitoredTask status =
          TaskMonitor.get().createStatus(""Recovering expired ZK session"");
        try {
          if (!becomeActiveMaster(status)) {
            return Boolean.FALSE;
          }
          initializeZKBasedSystemTrackers();
          // Update in-memory structures to reflect our earlier Root/Meta assignment.
          assignRootAndMeta(status);
          // process RIT if any
          // TODO: Why does this not call AssignmentManager.joinCluster?  Otherwise
          // we are not processing dead servers if any.
          assignmentManager.processDeadServersAndRegionsInTransition();
          return Boolean.TRUE;
        } finally {
          status.cleanup();
        }
      }
    };

    long timeout =
      conf.getLong(""hbase.master.zksession.recover.timeout"", 300000);
    java.util.concurrent.ExecutorService executor =
      Executors.newSingleThreadExecutor();
    Future<Boolean> result = executor.submit(callable);
    executor.shutdown();
    if (executor.awaitTermination(timeout, TimeUnit.MILLISECONDS)
        && result.isDone()) {
      Boolean recovered = result.get();
      if (recovered != null) {
        return recovered.booleanValue();
      }
    }
    executor.shutdownNow();
    return false;
  }",We do the following in a different thread.,1,387
3807,"public static JsArrayBoolean createArray(boolean... array) {
		JsArrayBoolean jsArray = JavaScriptObject.createArray().cast();
		for (int i = 0; i < array.length; i++) {
			jsArray.set(i, array[i]);
		}
		return jsArray;
	}",Converts a java boolean array into a javascript array (JsArray).,1,92
3808,"public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {

		if (exchange.getRequest().getMethod() != HttpMethod.POST) {
			return chain.filter(exchange);
		}

		return exchange.getFormData()
				.map(formData -> {
					String method = formData.getFirst(this.methodParamName);
					return StringUtils.hasLength(method) ? mapExchange(exchange, method) : exchange;
				})
				.then((exchange1) -> chain.filter(exchange1));
	}",Transform an HTTP POST into another method based on  methodParamName,1,150
3809,"public String consumeDoubleAttribute(String name)
      throws UnableToCompleteException {
    String value = consumeRawAttribute(name);
    return attributeParsers.getDoubleParser().parse(value, logger);
  }","Consumes the given attribute as a double expression: a literal, or a field reference.",1,52
3810,"public static ExecutorService newThreadPool(final String pattern, final String name, int corePoolSize, int maxPoolSize) {
        return ExecutorServiceHelper.newThreadPool(pattern, name, corePoolSize, maxPoolSize, 60, TimeUnit.SECONDS, -1, true);
    }",Creates a new custom thread pool using 60 seconds as keep alive and with an unbounded queue.,1,72
3811,"public JCRPermission savePermission(final String name, final String group) throws RepositoryException {
        return savePermission(new JCRPermission(name, group));
    }",Creates or updates the specified  JCRPermission.,1,46
3812,"public List<Occupant> getParticipants() throws NoResponseException, XMPPErrorException, NotConnectedException {
        return getOccupants(MUCRole.participant);
    }",Returns a list of Occupant with the room participants.,1,37
3813,"protected MediaType lookupMediaType(String extension) {
		return this.mediaTypes.get(extension.toLowerCase(Locale.ENGLISH));
	}",Use this method for a reverse lookup from extension to MediaType.,1,36
3814,"@SuppressWarnings(""unchecked"")
    public List<String> getAllInterWikiLinks()
    {
        List<String> links = new ArrayList<String>();

        for( Enumeration e = m_properties.propertyNames(); e.hasMoreElements(); )
        {
            String prop = (String) e.nextElement();

            if( prop.startsWith( PROP_INTERWIKIREF ) )
            {
                links.add( prop.substring( prop.lastIndexOf(""."")+1 ) );
            }
        }

        return links;
    }",Returns an unordered list of all supported InterWiki links.,1,152
3815,"public static String getPlanAsJSON(Plan plan) {
		List<DataSinkNode> sinks = Optimizer.createPreOptimizedPlan(plan);
		return new PlanJSONDumpGenerator().getPactPlanAsJSON(sinks);
	}",Creates a JSON representation of the given dataflow plan.,1,51
3816,"public static TemporalAmount rightShift(final Temporal self, Temporal other) {
        if (!self.getClass().equals(other.getClass())) {
            throw new GroovyRuntimeException(""Temporal arguments must be of the same type."");
        }
        switch ((ChronoUnit) defaultUnitFor(self)) {
            case YEARS:
                return DefaultGroovyStaticMethods.between(null, (Year) self, (Year) other);
            case MONTHS:
                return DefaultGroovyStaticMethods.between(null, (YearMonth) self, (YearMonth) other);
            case DAYS:
                return ChronoPeriod.between((ChronoLocalDate) self, (ChronoLocalDate) other);
            default:
                return Duration.between(self, other);
        }
    }",Returns a  java.time.Duration or  java.time.Period between this (inclusive) and the  other  java.time.temporal.Temporal (exclusive).,1,191
3817,"public Control add(Control control, int width) {
        if (control == null) {
            throw new IllegalArgumentException(""Control parameter cannot be null"");
        }
        if (width < 1) {
            throw new IllegalArgumentException(""Invalid field width: "" + width);
        }

        add(control);

        if (control.getName() != null) {
            getFieldWidths().put(control.getName(), new Integer(width));
        }
        return control;
    }",Add the control to the form and specify the control's width in columns.,1,143
3818,"public static int lastIndexOf(CharSequence seq, CharSequence searchSeq, int startPos) {
        if (seq == null || searchSeq == null) {
            return INDEX_NOT_FOUND;
        }
        return StringUtils.lastIndexOfSequence(seq, searchSeq, startPos);
    }","Finds the first index within a CharSequence, handling  null.",1,78
3819,"private static JavaMethodView make(Inspection inspection, MaxCompiledCode compiledCode, MethodCodeKind codeKind) throws MaxVMBusyException {
        JavaMethodView javaMethodView = null;

        // Is there already a view open that is bound to this compilation?
        MethodView methodView = machineCodeToMethodView.get(compiledCode);
        if (methodView == null) {
            // No existing view is bound to this compilation; see if there is a view for this method that is
            // unbound
            inspection.vm().acquireLegacyVMAccess();
            try {
                TeleClassMethodActor teleClassMethodActor = compiledCode.getTeleClassMethodActor();
                if (teleClassMethodActor != null) {
                    methodView = teleClassMethodActorToMethodView.get(teleClassMethodActor);
                }
                final MethodViewManager methodViewManager = (MethodViewManager) ViewKind.METHODS.viewManager();
                final MethodViewContainer container = methodViewManager.activateView();
                if (methodView == null) {
                    // No existing view exists for this method; create new one bound to this compilation
                    javaMethodView = new JavaMethodView(inspection, container, compiledCode, codeKind);
                } else {
                    // A view exists for the method, but not bound to any compilation; bind it to this compilation
                    // TODO (mlvdv) Temp patch; just create a new one in this case too.
                    javaMethodView = new JavaMethodView(inspection, container, compiledCode, codeKind);
                }
                if (javaMethodView != null) {
                    container.add(javaMethodView);
                    machineCodeToMethodView.put(compiledCode, javaMethodView);
                }
            } finally {
                inspection.vm().releaseLegacyVMAccess();
            }
        } else {
            // An existing view is bound to this method & compilation; ensure that it has the requested code view
            javaMethodView = (JavaMethodView) methodView;
            javaMethodView.viewCodeKind(codeKind);
        }
        return javaMethodView;
    }","Gets the  MethodView associated with a specific compilation of a Java method in the VM, creating a new one if necessary, and makes the requested code visible.",1,357
3820,"public final StackLocationOperand asStackLocation() {
    return (StackLocationOperand) this;
  }",Cast to an  StackLocationOperand.,1,25
3821,"protected boolean isExcluded(TraversableSource source) {
        return (this.excludeRE == null) ? false : this.excludeRE.match(source.getName());
    }",Determines if a given source shall be excluded from viewing.,1,50
3822,"public static Object asType(String self, Class c) {
        if (c == List.class) {
            return toList(self);
        } else if (c == BigDecimal.class) {
            return toBigDecimal(self);
        } else if (c == BigInteger.class) {
            return toBigInteger(self);
        } else if (c == Character.class) {
            return toCharacter(self);
        } else if (c == Double.class) {
            return toDouble(self);
        } else if (c == Float.class) {
            return toFloat(self);
        } else if (c == File.class) {
            return new File(self);
        } else if (DefaultTypeTransformation.isEnumSubclass(c)) {
            return InvokerHelper.invokeMethod(c, ""valueOf"", new Object[]{ self });
        }
        return asType((Object) self, c);
    }","Provides a method to perform custom 'dynamic' type conversion to the given class using the as operator. Example: '123' as Double By default, the following types are supported:  List BigDecimal BigInteger Character Character Double Float File Subclasses of Enum (Java 5 and above)",1,289
3823,"protected boolean exclude(String name, Object value) {
        if (Constants.excludedAttributeNames.contains(name)) {
            return true;
        }
        // Last check so use a short-cut
        return !getManager().willAttributeDistribute(name, value);
    }","Should the given session attribute be excluded? This implementation checks:   Constants#excludedAttributeNames  Manager#willAttributeDistribute(String, Object)",1,66
3824,"private boolean drainOutputBuffer(long positionUs, long elapsedRealtimeUs)
      throws ExoPlaybackException, VpxDecoderException {
    if (outputBuffer == null) {
      outputBuffer = decoder.dequeueOutputBuffer();
      if (outputBuffer == null) {
        return false;
      }
      decoderCounters.skippedOutputBufferCount += outputBuffer.skippedOutputBufferCount;
      buffersInCodecCount -= outputBuffer.skippedOutputBufferCount;
    }

    if (outputBuffer.isEndOfStream()) {
      if (decoderReinitializationState == REINITIALIZATION_STATE_WAIT_END_OF_STREAM) {
        // We're waiting to re-initialize the decoder, and have now processed all final buffers.
        releaseDecoder();
        maybeInitDecoder();
      } else {
        outputBuffer.release();
        outputBuffer = null;
        outputStreamEnded = true;
      }
      return false;
    }

    boolean processedOutputBuffer = processOutputBuffer(positionUs, elapsedRealtimeUs);
    if (processedOutputBuffer) {
      onProcessedOutputBuffer(outputBuffer.timeUs);
      outputBuffer = null;
    }
    return processedOutputBuffer;
  }","Attempts to dequeue an output buffer from the decoder and, if successful, passes it to  #processOutputBuffer(long, long).",1,243
3825,"public ListMessageSender getListSend() {
        return listSend;
    }",Returns List message sender object.,1,19
3827,"public synchronized ClientDependencyInfo getClientDependencyInfo(int depId) throws IOException {
    while (!mIsClosed) {
      connect();

      try {
        return mClient.user_getClientDependencyInfo(depId);
      } catch (DependencyDoesNotExistException e) {
        throw new IOException(e);
      } catch (TException e) {
        LOG.error(e.getMessage(), e);
        mConnected = false;
      }
    }
    return null;
  }",Gets the client dependency info from master server.,1,128
3828,"public boolean isConfigurationXmlAvailable()
  {
    try
    {
    	// get the xml filename
    	String configXml = getConfigurationXml();
    	if( configXml == null )
    	{
    		return false;
    	}
    	
    	// not null, try to open it for reading
    	java.io.FileInputStream fis = new java.io.FileInputStream( configXml );
    }
    catch( java.io.FileNotFoundException fnfe )
    {
    	// file not found
    	return false;
    }
    catch (OsidConfigurationException ignore) { }

    // filename is not null and the file is readable
    return true;
  }",Is the configuration XML file provided and readable,1,145
3829,"protected BasePreferences findPreferences(String id)
	{
		if (id == null) {
			return null;
		}

		// Try the cache
		BasePreferences prefs = (BasePreferences) m_cache.get(id);

		// Failing that, try the storage
		if (prefs == null) {
			prefs = (BasePreferences) m_storage.get(id);
		}

		if (prefs != null) {
			m_cache.put(id, prefs);
		}
		
		return prefs;
	}",Find the preferences object in cache or storage.,1,139
3830,"public default UnaryOperator<Function<Object[], GraphTraversal<Vertex, Vertex>>> getGraphVStrategy(final Strategy.Context<StrategyWrappedGraph> ctx) {
        return UnaryOperator.identity();
    }",Construct a  java.util.function.Function that enhances the features of  com.tinkerpop.gremlin.structure.Graph#V.,1,52
3831,"public PackageManager getPackageManager() {
        if (packageManager == null) {
            packageManager = new MockPackageManager() {
                public PackageInfo packageInfo;
                public ArrayList<PackageInfo> packageList;

                @Override
                public PackageInfo getPackageInfo(String packageName, int flags) throws NameNotFoundException {
                    ensurePackageInfo();
                    return packageInfo;
                }

                @Override
                public List<PackageInfo> getInstalledPackages(int flags) {
                    ensurePackageInfo();
                    if (packageList == null) {
                        packageList = new ArrayList<PackageInfo>();
                        packageList.add(packageInfo);
                    }
                    return packageList;
                }

                private void ensurePackageInfo() {
                    if (packageInfo == null) {
                        packageInfo = new PackageInfo();
                        packageInfo.packageName = packageName;
                        packageInfo.versionName = ""1.0"";
                    }
                }

            };
        }
        return packageManager;
    }",Implements Android's  MockPackageManager with an anonymous inner class.,1,258
3832,"public Socks5AddressType addressType() {
        return addressType;
    }",Returns the  Socks5AddressType of this  Socks5CmdRequest,1,19
3833,"private ConferenceChatPanel createChat( ChatRoomWrapper chatRoomWrapper)
    {
        return createChat(chatRoomWrapper, null);
    }",Creates a ChatPanel for the given ChatRoom and saves it in the list of created ChatPanels.,1,30
3834,"private State getStateFromConfig(Config config, String location, String device) {
		Location loc = config.getConfig().get(location);
		if (location != null) {
			Device dev = loc.getDevices().get(device);
			
			if (dev != null) {
				OnOffType state = OnOffType.valueOf(dev.getState().toUpperCase());
				
				if (dev.getDimlevel() != null && dev.getDimlevel() > 0) {
					if (state.equals(OnOffType.ON))
						return new PercentType(getPercentageFromDimLevel(dev.getDimlevel().toString()));
					else
						return new PercentType(0);
				} 
				
				return state;	
			}
		}
		return null;
	}",Gets the state for  device in  location from the pilight config,1,225
3835,"public static DataServerMessage createBlockRequestMessage(long storageDirId, long blockId) {
    return createBlockRequestMessage(storageDirId, blockId, 0, -1);
  }","Create a block request message specified by the block's id, and the message is ready to be sent.",1,42
3836,"public DrawableTypeRequest<URL> load(URL url) {
        return loadGeneric(url);
    }",Use the  com.bumptech.glide.load.model.ModelLoaderFactory currently registered for  URL to load the image represented by the given  URL.,1,28
3837,"public NavigableSet<K> keySet() {
        KeySet ks = keySet;
        return (ks != null) ? ks : (keySet = new KeySet(this));
    }",Returns a  NavigableSet view of the keys contained in this map.,1,58
3838,"public static String chomp(String str) {
        if (str.length() == 0) {
            return str;
        }

        if (str.length() == 1) {
            if (""\r"".equals(str) || ""\n"".equals(str)) {
                return """";
            }
            else {
                return str;
            }
        }

        int lastIdx = str.length() - 1;
        char last = str.charAt(lastIdx);

        if (last == '\n') {
            if (str.charAt(lastIdx - 1) == '\r') {
                lastIdx--;
            }
        } else if (last == '\r') {

        } else {
            lastIdx++;
        }
        return str.substring(0, lastIdx);
    }","Remove one newline from end of a String if it's there, otherwise leave it alone.",1,251
3839,"protected BendConnectionPolicy determineBendPolicy() {
		return getHost().getAdapter(BendConnectionPolicy.class);
	}",Returns the  BendConnectionPolicy of the host.,1,28
3840,"public SOAPFault addFault() throws OMException {
        throw new UnsupportedOperationException(); //TODO implement this
    }",Creates a new SOAPFault object and adds it to this SOAPBody object.,1,29
3841,"public Object caseBubbleSeries( BubbleSeries object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Bubble Series'.,1,25
3842,"public String getDisplayLanguage(ULocale displayLocale) {
	return getDisplayLanguage(localeID, displayLocale);
    }",Return this locale's language localized for display in the provided locale.,1,28
3843,"public ExpressionUrlAuthorizationConfigurer<HttpSecurity> authorizeUrls() throws Exception {
        return getOrApply(new ExpressionUrlAuthorizationConfigurer<HttpSecurity>());
    }",Allows restricting access based upon the  HttpServletRequest using Example Configurations,1,36
3844,"public IndexShardRoutingTable shardRoutingTable(String index, int shardId) {
        IndexRoutingTable indexRouting = index(index);
        if (indexRouting == null) {
            throw new IndexNotFoundException(index);
        }
        IndexShardRoutingTable shard = indexRouting.shard(shardId);
        if (shard == null) {
            throw new ShardNotFoundException(new ShardId(index, shardId));
        }
        return shard;
    }",All shards for the provided index and shard id,1,119
3845,"static DecodedJWT decode(String token) throws JWTDecodeException {
        return new JWTDecoder(token);
    }",Decode a given Token into a DecodedJWT instance.,1,31
3846,"public CallPeerSipImpl findCallPeer(Dialog dialog)
    {
        if(dialog == null)
        {
            logger.debug(""Cannot find a peer with a null dialog. ""
                         +""Returning null"");
            return null;
        }

        if(logger.isTraceEnabled())
        {
            logger.trace(""Looking for peer with dialog: "" + dialog
                         + "" among "" + this.activeCalls.size() + "" calls"");
        }

        for (Iterator<CallSipImpl> activeCalls = getActiveCalls();
                 activeCalls.hasNext();)
        {
            CallSipImpl call = activeCalls.next();
            CallPeerSipImpl callPeer
                = call.findCallPeer(dialog);
            if(callPeer != null)
            {
                logger.trace(""Returning peer "" + callPeer);
                return callPeer;
            }
        }

        return null;
    }",Returns the call peer whose associated jain sip dialog matches dialog.,1,221
3847,"public static int hashCode(boolean bool) {
    return bool ? 1231 : 1237;
  }",Returns the same value as  Boolean#hashCode().,1,32
3849,"public Object invoke(Exchange exchange, Object o) {

        CxfEndpoint endpoint = (CxfEndpoint) cxfConsumer.getEndpoint();

        Object params = null;


        if (o instanceof List) {
            params = CastUtils.cast((List<?>)o);
        } else if (o != null) {
            params = new MessageContentsList(o);
        }


        CxfExchange cxfExchange = endpoint.createExchange(exchange.getInMessage());

        BindingOperationInfo bop = exchange.get(BindingOperationInfo.class);
        MethodDispatcher md = (MethodDispatcher)
            exchange.get(Service.class).get(MethodDispatcher.class.getName());
        Method m = md.getMethod(bop);


        if (bop.getOperationInfo().isOneWay()) {
            cxfExchange.setPattern(ExchangePattern.InOnly);
        } else {
            cxfExchange.setPattern(ExchangePattern.InOut);
        }
        cxfExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, m.getName());
        cxfExchange.getIn().setBody(params);
        try {
            cxfConsumer.getProcessor().process(cxfExchange);
        } catch (Exception ex) {
            // catch the exception and send back to cxf client
            throw new Fault(ex);
        }

        Object result = null;
        if (cxfExchange.isFailed()) {
            Exception ex= (Exception)cxfExchange.getFault().getBody();
            throw new Fault(ex);
        } else {
            result = cxfExchange.getOut().getBody();
        }

        return result;
    }",This method is called when the incoming pojo or WebServiceProvider invocation is called from the service invocation interceptor.,1,428
3850,"public static String getStartTimeString(final Date startDate) {
        return convertDateToStartTimeString(startDate);
    }",Creates a formatted string for the start time based on the specified date.,1,29
3851,"default Option<T> maxBy(Comparator<? super T> comparator) {
        Objects.requireNonNull(comparator, ""comparator is null"");
        if (isEmpty()) {
            return None.instance();
        } else {
            final T value = reduce((t1, t2) -> comparator.compare(t1, t2) >= 0 ? t1 : t2);
            return new Some<>(value);
        }
    }",Calculates the maximum of this elements using a specific comparator.,1,130
3852,"public Deferred<Object> shutdown() {
    final ArrayList<Deferred<Object>> deferreds = 
      new ArrayList<Deferred<Object>>();
    
    final class HClientShutdown implements Callback<Object, ArrayList<Object>> {
      public Object call(final ArrayList<Object> args) {
        return client.shutdown();
      }
      public String toString() {
        return ""shutdown HBase client"";
      }
    }
    
    final class ShutdownErrback implements Callback<Object, Exception> {
      public Object call(final Exception e) {
        final Logger LOG = LoggerFactory.getLogger(ShutdownErrback.class);
        if (e instanceof DeferredGroupException) {
          final DeferredGroupException ge = (DeferredGroupException) e;
          for (final Object r : ge.results()) {
            if (r instanceof Exception) {
              LOG.error(""Failed to shutdown the TSD"", (Exception) r);
            }
          }
        } else {
          LOG.error(""Failed to shutdown the TSD"", e);
        }
        return client.shutdown();
      }
      public String toString() {
        return ""shutdown HBase client after error"";
      }
    }
    
    final class CompactCB implements Callback<Object, ArrayList<Object>> {
      public Object call(ArrayList<Object> compactions) throws Exception {
        return null;
      }
    }
    
    if (config.enable_compactions()) {
      deferreds.add(compactionq.flush().addCallback(new CompactCB()));
    }
    if (search != null) {
      deferreds.add(search.shutdown());
    }
    if (rt_publisher != null) {
      deferreds.add(rt_publisher.shutdown());
    }
    
    // wait for plugins to shutdown before we close the client
    return deferreds.size() > 0
      ? Deferred.group(deferreds).addCallbacks(new HClientShutdown(),
                                               new ShutdownErrback())
      : client.shutdown();
  }",Gracefully shuts down this TSD instance.,1,544
3853,"public JIRAChangeGroup remove(long jiraChangeGroupId)
		throws NoSuchJIRAChangeGroupException, SystemException {
		return remove(Long.valueOf(jiraChangeGroupId));
	}",Removes the j i r a change group with the primary key from the database.,1,38
3854,"public RegisterValue asValue() {
        return asValue(Kind.Illegal);
    }",Gets this register as a plain RegisterValue value with no particular kind.,1,24
3855,"@Override
    @SuppressWarnings(""unchecked"")
    public Object clone() {
        return new EquivalenceAfter(name, (ArrayList<Term>) cloneList(components), (ArrayList<Variable>) cloneList(openVariables), complexity);
    }",Clone an object,1,64
3856,"PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency)
            throws SQLException {
        if (pStmtPool == null) {
            return connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
        }
        try {
            return pStmtPool.borrowObject(createKey(sql, resultSetType, resultSetConcurrency));
        } catch (final RuntimeException e) {
            throw e;
        } catch (final Exception e) {
            throw new SQLException(""Borrow prepareStatement from pool failed"", e);
        }
    }",Creates or obtains a  PreparedStatement from my pool.,1,149
3857,"private int getInMemoryPercentage(Inode<?> inode) {
    if (!inode.isFile()) {
      return 0;
    }
    InodeFile inodeFile = (InodeFile) inode;

    long length = inodeFile.getLength();
    if (length == 0) {
      return 100;
    }

    long inAlluxioLength = 0;
    for (BlockInfo info : mBlockMaster.getBlockInfoList(inodeFile.getBlockIds())) {
      if (isInTopStorageTier(info)) {
        inAlluxioLength += info.getLength();
      }
    }
    return (int) (inAlluxioLength * 100 / length);
  }",Gets the in-Alluxio percentage of an Inode.,1,180
3858,"public EpochClock epochClock()
        {
            return epochClock;
        }",Get the  java.time.Clock used by the client for the epoch time in milliseconds.,1,20
3859,"public static CoreEvent createErrorEvent(CoreEvent currentEvent, Component obj,
                                           MessagingException me, ErrorTypeLocator locator) {
    Throwable cause = me.getCause() != null ? me.getCause() : me;
    List<ErrorMapping> errorMappings = getErrorMappings(obj);
    if (!errorMappings.isEmpty() || isMessagingExceptionCause(me, cause)) {
      Error newError = getErrorFromFailingProcessor(currentEvent, obj, cause, locator);
      CoreEvent newEvent = CoreEvent.builder(me.getEvent()).error(newError).build();
      me.setProcessedEvent(newEvent);
      return newEvent;
    } else {
      return currentEvent;
    }
  }",Create new  CoreEvent with  org.mule.runtime.api.message.Error instance set.,1,187
3860,"public HasComponentsConnector getParent() {
        return parent;
    }",Returns the  HasComponentsConnector for which this event occurred.,1,19
3861,"public String getString()
    {
        return Strings.utf8ToString( upValue );
    }",Get the user provided value as a String.,1,27
3862,"public EditorOperator getEditor() {
        ModeImpl mode = (ModeImpl)WindowManagerImpl.getInstance().findMode(""editor""); //NOI18N
        return new EditorOperator(mode.getSelectedTopComponent().getName());
    }",Returns EditorOperator instance of currently selected document.,1,58
3863,"public static RPCErrorResponse decode(ByteBuf in) {
    return new RPCErrorResponse(Status.fromShort(Preconditions.checkNotNull(in).readShort()));
  }",Decodes the input  ByteBuf into a  RPCErrorResponse object and returns it.,1,43
3864,"public String getSQLKeywords() throws SQLException {

        if (Trace.TRACE) {
            Trace.trace();
        }

        return ""BEFORE,BIGINT,BINARY,CACHED,DATETIME,""
               + ""LIMIT,LONGVARBINARY,LONGVARCHAR,OBJECT,OTHER,SAVEPOINT,""
               + ""TEMP,TEXT,TRIGGER,TINYINT,VARBINARY,VARCHAR_IGNORECASE"";
    }",Retrieves a comma-separated list of all of this database's SQL keywords that are NOT also SQL92 keywords.,1,63
3865,"protected List<? extends Diff> filteredDiffs(Iterable<? extends Diff> unfilteredDiffs,
			Predicate<? super EObject> predicate, IDifferenceGroupProvider groupProvider) {
		return Lists.newArrayList(filter(unfilteredDiffs, visibleInMergeViewer(predicate, groupProvider)));
	}",Returns a list of those of the given diffs that are displayed in a group as provided by the given group provider and satisfy the given predicate.,1,71
3866,"public Highlight getIndexByTouchPoint(float x, float y) {

        // create an array of the touch-point
        float[] pts = new float[2];
        pts[0] = x;
        pts[1] = y;

        Matrix tmp = new Matrix();

        // invert all matrixes to convert back to the original value
        mMatrixOffset.invert(tmp);
        tmp.mapPoints(pts);

        mMatrixTouch.invert(tmp);
        tmp.mapPoints(pts);

        mMatrixValueToPx.invert(tmp);
        tmp.mapPoints(pts);

        double xTouchVal = pts[0];
        double yTouchVal = pts[1];
        double base = Math.floor(xTouchVal);

        Log.i(LOG_TAG, ""touchindex x: "" + xTouchVal + "", touchindex y: "" + yTouchVal);

        // touch out of chart
        if (this instanceof LineChart
                && (xTouchVal < 0 || xTouchVal > getValueCount() - 1))
            return null;
        if (this instanceof BarChart && (xTouchVal < 0 || xTouchVal > getValueCount()))
            return null;

        int xIndex = (int) base;
        int yIndex = 0; // index of the DataSet inside the ChartData object

        if (this instanceof LineChart) {

            // check if we are more than half of a x-value or not
            if (xTouchVal - base > 0.5) {
                xIndex = (int) base + 1;
            }
        }

        ArrayList<Float> valsAtIndex = getYValsAtIndex(xIndex);

        yIndex = getClosestDataSetIndex(valsAtIndex, (float) yTouchVal);

        return new Highlight(xIndex, yIndex);
    }",returns the Highlight object (x index and DataSet index) of the selected value at the given touch point,1,432
3867,"private JavaScriptBackgroundJob createJavaScriptBackgroundJob(final Object codeToExec,
            final int timeout, final boolean loopForever, final String label) {

        final WebWindow ww = window_.get();
        if (ww == null) {
            // The window has been garbage collected! Can't start anything, obviously.
            return null;
        }

        final Window thisWindow = (Window) ww.getScriptObject();

        if (codeToExec == null) {
            throw Context.reportRuntimeError(""Function not provided"");
        }
        else if (codeToExec instanceof String) {
            final String scriptString = (String) codeToExec;
            return new JavaScriptBackgroundJob(thisWindow, timeout, scriptString, loopForever, label);
        }
        else if (codeToExec instanceof Function) {
            final Function scriptFunction = (Function) codeToExec;
            return new JavaScriptBackgroundJob(thisWindow, timeout, scriptFunction, loopForever, label);
        }
        else {
            throw Context.reportRuntimeError(""Unknown type for function"");
        }
    }",Makes the job object for setTimeout and setInterval.,1,270
3868,"public static Object getDefaultValue(Class<? extends Annotation> annotationType, String attributeName) {
		if (annotationType == null || !StringUtils.hasText(attributeName)) {
			return null;
		}
		try {
			return annotationType.getDeclaredMethod(attributeName).getDefaultValue();
		}
		catch (Throwable ex) {
			handleIntrospectionFailure(annotationType, ex);
			return null;
		}
	}","Retrieve the default value of a named attribute, given the  Class annotation type.",1,117
3869,"private LatLng getCoordinates(Node parentNode) throws IOException {
        NodeList childNodes = parentNode.getChildNodes();
        double latitudeText = Double.parseDouble(childNodes.item(1).getTextContent());
        double longitudeText = Double.parseDouble(childNodes.item(2).getTextContent());
        return new LatLng(latitudeText, longitudeText, 0);
    }",Extracts the coordinates from the template.,1,99
3870,"public double min(DoubleComparator comparator) {
            return reduce(doubleMinReducer(comparator),
                          Double.MAX_VALUE);
        }","Returns the minimum element, or Double.MAX_VALUE if empty",1,34
3871,"public String getSQL() {
        if (partitionBy == null && orderBy == null && frame == null) {
            return ""OVER ()"";
        }
        StringBuilder builder = new StringBuilder().append(""OVER ("");
        if (partitionBy != null) {
            builder.append(""PARTITION BY "");
            for (int i = 0; i < partitionBy.size(); i++) {
                if (i > 0) {
                    builder.append("", "");
                }
                builder.append(StringUtils.unEnclose(partitionBy.get(i).getSQL()));
            }
        }
        appendOrderBy(builder, orderBy);
        if (frame != null) {
            if (builder.charAt(builder.length() - 1) != '(') {
                builder.append(' ');
            }
            builder.append(frame.getSQL());
        }
        return builder.append(')').toString();
    }",Returns SQL representation.,1,285
3872,"private FilterContext preProcessRequest(FilterContext fc) throws IOException {
        for (RequestFilter asyncFilter : config.getRequestFilters()) {
            try {
                fc = asyncFilter.filter(fc);
                if (fc == null) {
                    throw new NullPointerException(""FilterContext is null"");
                }
            } catch (FilterException e) {
                IOException ex = new IOException();
                ex.initCause(e);
                throw ex;
            }
        }

        Request request = fc.getRequest();
        if (ResumableAsyncHandler.class.isAssignableFrom(fc.getAsyncHandler().getClass())) {
            request = ResumableAsyncHandler.class.cast(fc.getAsyncHandler()).adjustRequestRange(request);
        }

        if (request.getRangeHeaderValue() != 0) {
            RequestBuilder builder = new RequestBuilder(request);
            builder.setHeader(""Range"", ""bytes="" + request.getRangeHeaderValue() + ""-"");
            request = builder.build();
        }
        fc = new FilterContext.FilterContextBuilder(fc).request(request).build();        
        return fc;
    }",Configure and execute the associated  RequestFilter.,1,311
3873,"public static int lastIndexOf(CharSequence seq, int searchChar, int startPos) {
        if (isEmpty(seq)) {
            return INDEX_NOT_FOUND;
        }
        return StringUtils.lastIndexOfSequence(seq, searchChar, startPos);
    }","Finds the last index within a CharSequence from a start position, handling  null.",1,66
3874,"protected IViewer getViewer() {
		return getAdaptable();
	}",Returns the  IViewer for which this  AbstractViewerAction is bound.,1,21
3875,"@Deprecated
	public int getDegreeOfParallelism() {
		return getParallelism();
	}",Gets the parallelism for this contract instance.,1,24
3876,"private SimpleFeatureCollection createDatastore(CoordinateReferenceSystem crs, Point p) throws Exception{
        
        SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();
        builder.setName(FEATURE_TYPE_NAME);
        builder.setCRS(crs);
        builder.add(""geom"", Point.class );
        
        SimpleFeatureType ft = builder.buildFeatureType();
        
        SimpleFeatureBuilder b = new SimpleFeatureBuilder(ft);
        b.add( p );
        
        ListFeatureCollection features = new ListFeatureCollection(ft);
        features.add( b.buildFeature(null));
        
        return features;
    }",create a feature collection with 1 feature in it.,1,159
3877,"public List<Option> getOptions() {
        synchronized (options) {
            return Collections.unmodifiableList(new ArrayList<Option>(options));
        }
    }",Returns a List of the available options that the user has in order to answer the question.,1,47
3878,"public static HttpServer createHttpServer(final URI uri, final ApplicationHandler appHandler) throws ProcessingException {
        return createHttpServer(uri, new JdkHttpHandlerContainer(appHandler));
    }",Creates and starts the  HttpServer JDK HttpServer with the,1,48
3879,"public static Map<String, SavedAttachment> findExistingAttachments(
            Map<String, ? extends Attachment> attachments) {
        Map<String, SavedAttachment> existingAttachments = new HashMap<String, SavedAttachment>();
        for (Map.Entry<String, ? extends Attachment> a : attachments.entrySet()) {
            if (a instanceof SavedAttachment) {
                existingAttachments.put(a.getKey(), (SavedAttachment)a.getValue());
            }
        }
        return existingAttachments;
    }",Return a map of the existing attachments in the map passed in.,1,141
3880,"public static Method[] getMethodsWithAnnotation(final Class<?> cls, final Class<? extends Annotation> annotationCls) {
        return getMethodsWithAnnotation(cls, annotationCls, false, false);
    }",Gets all class level public methods of the given class that are annotated with the given annotation.,1,57
3881,"public SequenceIntervalCollection getActiveIntervalCollection() {
		try {
			return SequenceIntervalCollection.decode(activeIntervalCollection);
		} catch (InvalidSequenceIntervalException e) {
			return new SequenceIntervalCollection();
		}
	}",Get the collection of SequenceIntervals indicating when this,1,55
3882,"public SaslServer createSaslServer(String mechanism, String protocol, String serverName, Map<String, ?> props, CallbackHandler cbh) throws SaslException {
        if (mechanism.equals(myMechs[PLAIN]) && PolicyUtils.checkPolicy(mechPolicies[PLAIN], props)) {
            if (cbh == null) {
                throw new SaslException(""CallbackHandler with support for Password, Name, and AuthorizeCallback required"");
            }
            return new SaslServerPlainImpl(protocol, serverName, props, cbh);
        }
        else if (mechanism.equals(myMechs[CLEARSPACE]) && PolicyUtils.checkPolicy(mechPolicies[CLEARSPACE], props)) {
            if (cbh == null) {
                throw new SaslException(""CallbackHandler with support for AuthorizeCallback required"");
            }
            return new ClearspaceSaslServer();
        }
        return null;
    }",Creates a SaslServer implementing a supported mechanism using the parameters supplied.,1,216
3883,"public double getUniqueKeywordValue(String keyword) {
         if (uniqueKeywordValues == null) {
             // compute unique values the slow but exact way, the logic to do this from the rules is more complex than 
             // this simple process
             final Double NONE = NO_UNIQUE_VALUE;
             uniqueKeywordValues = new HashMap<String, Double>();
             int limit = getRepeatLimit();
             for (int i = 0; i < limit * 2; ++i) {
                 for (int j = 0; j < 2; ++j) {
                     double value = i + 0.5 * j;
                     String key = select(value);
                     if (uniqueKeywordValues.containsKey(key)) {
                         uniqueKeywordValues.put(key, NONE);
                     } else {
                         uniqueKeywordValues.put(key, value);
                     }
                 }
             }
         }
         return uniqueKeywordValues.containsKey(keyword) ? uniqueKeywordValues.get(keyword) : NO_UNIQUE_VALUE;
     }","Returns the unique value that this keyword matches, or  #NO_UNIQUE_VALUE if the keyword matches multiple values or is not defined for this PluralRules.",1,248
3884,"public String replaceProperties(String value)
        throws BuildException {
        PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
        return ph.replaceProperties(null, value, null);
    }",Replaces $ style constructions in the given value with the string value of the corresponding data types.,1,53
3885,"static Set<String> getParents(String roleName, String contextId)
    {
        return HierUtil.getParents(roleName, getGraph(contextId));
    }",Traverse one level of the  com.jts.fortress.rbac.AdminRole graph and return all of the parents (direct ascendants) of a given parent  com.jts.fortress.rbac.AdminRole#name.,1,42
3886,"public static Histogram newHistogram(Class<?> klass, String name) {
        return DEFAULT_REGISTRY.newHistogram(klass, name);
    }",Creates a new non-biased  com.yammer.metrics.core.Histogram and registers it under the given class and name.,1,40
3887,"public boolean isNewerThan(String firstVersion, String secondVersion) {
            try {
                return new VersionNumber(firstVersion).compareTo(new VersionNumber(secondVersion)) < 0;
            } catch (IllegalArgumentException e) {
                // couldn't parse as the version number.
                return false;
            }
        }",Compares two versions - returns true if the first version is newer than the second.,1,76
3888,"public int moveIndex(int index) {
        checkModCount();
        if (index >= 0) {
            Object tokenOrEmbeddingContainer = tokenList.tokenOrEmbeddingContainer(index);
            if (tokenOrEmbeddingContainer != null) { // enough tokens
                resetTokenIndex(index);
            } else // Token at the requested index does not exist - leave orig. index
                resetTokenIndex(tokenCount());
        } else // index < 0
            resetTokenIndex(0);
        return index - tokenIndex;
    }",Position token sequence between index-1 and index tokens.,1,114
3889,"public static int size(String text) {
        return text.length();
    }",Provide the standard Groovy size() method for String.,1,28
3890,"protected BendConnectionOperation getBendOperation() {
		return (BendConnectionOperation) ((AbstractCompositeOperation) super.getOperation())
				.getOperations().get(0);
	}",Returns an  BendConnectionOperation that is extracted from the operation created by  #createOperation().,1,44
3891,"public Object caseAxisOrigin( AxisOrigin object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Axis Origin'.,1,25
3892,"public String[] getResourcePath() {
        return Arrays.copyOf(resourcePath, resourcePath.length);
    }","Gets a copy of the full resource path of this identifier, including extended elements.",1,31
3893,"public Optional<RDF> getRdfTermFactory() {
		return rdfTermFactory;
	}","Get the set  RDF, if any.",1,22
3894,"private static boolean codecNeedsAdaptationWorkaround(String name) {
    return Util.SDK_INT < 24
        && (""OMX.Nvidia.h264.decode"".equals(name) || ""OMX.Nvidia.h264.decode.secure"".equals(name))
        && (Util.DEVICE.equals(""flounder"") || Util.DEVICE.equals(""flounder_lte"")
            || Util.DEVICE.equals(""grouper"") || Util.DEVICE.equals(""tilapia""));
  }",Returns whether the decoder is known to get stuck during some adaptations where the resolution does not change.,1,117
3895,"List<FrameInstance> getStack() {
            return event.getStack();
        }","Provides access to the execution stack, not counting the node/frame where halted.",1,24
3896,"public static boolean isSimpleValueType(Class<?> clazz) {
		return (ClassUtils.isPrimitiveOrWrapper(clazz) ||
				Enum.class.isAssignableFrom(clazz) ||
				CharSequence.class.isAssignableFrom(clazz) ||
				Number.class.isAssignableFrom(clazz) ||
				Date.class.isAssignableFrom(clazz) ||
				Temporal.class.isAssignableFrom(clazz) ||
				URI.class == clazz || URL.class == clazz ||
				Locale.class == clazz || Class.class == clazz);
	}","Check if the given type represents a ""simple"" value type: a primitive, an enum, a String or other CharSequence, a Number, a Date, a Temporal, a URI, a URL, a Locale or a Class.",1,149
3897,"public int getVersion()
    {
        String versionString = conferenceInfo.getAttribute(VERSION_ATTR_NAME);
        if (versionString == null)
            return -1;
        int version = -1;
        try
        {
            version = Integer.parseInt(versionString);
        }
        catch (NumberFormatException e)
        {
            if (logger.isInfoEnabled())
                logger.info(""Failed to parse version string: "" + versionString);
        }

        return version;
    }","Returns the value of the version attribute of the conference-info element, or -1 if there is no version attribute or if it's value couldn't be parsed as an integer.",1,129
3898,"public int getActiveSessionCount(String username) {
        if (username == null || !userManager.isRegisteredUser(username)) {
            return 0;
        }
        int sessionCount = 0;
        for (Session session: sessions.get(username).getSessions()) {
            if (session.getStatus() != Session.STATUS_CLOSED) {
                sessionCount++;
            }
        }
        return sessionCount;    
    }",Returns the number of sessions for a user that are available.,1,122
3899,"public Socks4CmdStatus cmdStatus() {
        return cmdStatus;
    }",Returns the  Socks4CmdStatus of this  Socks4Response,1,19
3900,"public JustifyStyle getJustification()
    {
        return justification;
    }",Retrieve the current justification style.,1,20
3901,"public List<AlertCurrentEntity> findAll(AlertCurrentRequest request) {
    EntityManager entityManager = entityManagerProvider.get();

    // convert the Ambari predicate into a JPA predicate
    CurrentPredicateVisitor visitor = new CurrentPredicateVisitor();
    PredicateHelper.visit(request.Predicate, visitor);

    CriteriaQuery<AlertCurrentEntity> query = visitor.getCriteriaQuery();
    javax.persistence.criteria.Predicate jpaPredicate = visitor.getJpaPredicate();

    if (null != jpaPredicate) {
      query.where(jpaPredicate);
    }

    // sorting
    JpaSortBuilder<AlertCurrentEntity> sortBuilder = new JpaSortBuilder<AlertCurrentEntity>();
    List<Order> sortOrders = sortBuilder.buildSortOrders(request.Sort, visitor);
    query.orderBy(sortOrders);

    // pagination
    TypedQuery<AlertCurrentEntity> typedQuery = entityManager.createQuery(query);
    if( null != request.Pagination ){
      typedQuery.setFirstResult(request.Pagination.getOffset());
      typedQuery.setMaxResults(request.Pagination.getPageSize());
    }

    typedQuery = setQueryRefreshHint(typedQuery);

    return daoUtils.selectList(typedQuery);
  }",Finds all  AlertCurrentEntity that match the provided  AlertCurrentRequest.,1,281
3902,"public static Process execute(final List commands) throws IOException {
        return execute(stringify(commands));
    }",Executes the command specified by the given list.,1,36
3903,"public static Striped<Semaphore> semaphore(int stripes, final int permits) {
    return new CompactStriped<Semaphore>(stripes, new Supplier<Semaphore>() {
      @Override public Semaphore get() {
        return new PaddedSemaphore(permits);
      }
    });
  }","Creates a  Striped with eagerly initialized, strongly referenced semaphores, with the specified number of permits.",1,84
3904,"public EntryPointDeclarationDescr entryPointDeclaration( DeclareDescrBuilder ddb ) throws RecognitionException {
        EntryPointDeclarationDescrBuilder declare = null;
        try {
            declare = helper.start( ddb,
                                    EntryPointDeclarationDescrBuilder.class,
                                    null );

            String ep = """";

            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.ENTRY,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            match( input,
                   DRLLexer.MINUS,
                   null,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.POINT,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            ep = stringId();
            if ( state.failed ) return null;
            if( state.backtracking == 0 ) {
                declare.entryPointId( ep );
            }

            while ( input.LA( 1 ) == DRLLexer.AT ) {
                // annotation*
                annotation( declare );
                if ( state.failed ) return null;
            }

            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.END,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

        } catch ( RecognitionException re ) {
            reportError( re );
        } finally {
            helper.end( EntryPointDeclarationDescrBuilder.class,
                        declare );
        }
        return (declare != null) ? declare.getDescr() : null;
    }",entryPointDeclaration := ENTRY-POINT stringId annotation END,1,456
3905,"public Fraction invert() {
        if (numerator == 0) {
            throw new ArithmeticException(""Unable to invert zero."");
        }
        if (numerator==Integer.MIN_VALUE) {
            throw new ArithmeticException(""overflow: can't negate numerator"");
        }
        if (numerator<0) {
            return new Fraction(-denominator, -numerator);
        } else {
            return new Fraction(denominator, numerator);
        }
    }",Gets a fraction that is the inverse (1/fraction) of this one. The returned fraction is not reduced.,1,124
3906,"public List getAdditionalElementMappings() {
        return additionalElementMappings;
    }",Returns the List of user-added ElementMapping class names,1,19
3907,"public static InternalEvent createErrorEvent(InternalEvent currentEvent, Object annotatedObject,
                                               MessagingException messagingException,
                                               ErrorTypeLocator errorTypeLocator) {
    // TODO: MULE-10970/MULE-10971 - Change signature to AnnotatedObject once every processor and source is one
    Throwable causeException = messagingException.getCause() != null ? messagingException.getCause() : messagingException;

    boolean hasErrorMappings = false;
    if (AnnotatedObject.class.isAssignableFrom(annotatedObject.getClass())) {
      final Object errorMappingAnnotation = ((AnnotatedObject) annotatedObject).getAnnotation(ANNOTATION_ERROR_MAPPINGS);
      hasErrorMappings = errorMappingAnnotation != null && !((List<ErrorMapping>) errorMappingAnnotation).isEmpty();
    }

    if (hasErrorMappings || !messagingException.getEvent().getError()
        .filter(error -> errorCauseMatchesException(causeException, error)
            || messagingException.causedExactlyBy(error.getCause().getClass()))
        .isPresent()) {
      Error newError = getErrorFromFailingProcessor(annotatedObject, causeException, errorTypeLocator);
      InternalEvent event = InternalEvent.builder(messagingException.getEvent()).error(newError).build();
      messagingException.setProcessedEvent(event);
      return event;
    } else {
      return currentEvent;
    }
  }",Create new  InternalEvent with  org.mule.runtime.api.message.Error instance set.,1,303
3908,"public static MethodDelegation instanceField(Class<?> type, String fieldName, MethodLookupEngine methodLookupEngine) {
        return new MethodDelegation(
                new InstrumentationDelegate.ForInstanceField(new TypeDescription.ForLoadedType(nonNull(type)), isValidIdentifier(fieldName)),
                defaultParameterBinders(),
                defaultDefaultsProvider(),
                defaultAmbiguityResolver(),
                defaultAssigner(),
                methodLookupEngine.getReachableMethods(new TypeDescription.ForLoadedType(type))
                        .filter(not(isStatic().or(isPrivate()).or(isConstructor())))
        );
    }","Identical to  net.bytebuddy.instrumentation.MethodDelegation#instanceField(Class, String) but uses an explicit  net.bytebuddy.instrumentation.method.MethodLookupEngine.",1,135
3909,"private boolean testIfAllows() {
        PropertyHelper propertyHelper = PropertyHelper.getPropertyHelper(getProject());
        Object o = propertyHelper.parseProperties(ifCondition);
        if (!propertyHelper.testIfCondition(o)) {
            return false;
        }
        if (if_ != null && !if_.eval()) {
            return false;
        }
        return true;
    }","Tests whether or not the ""if"" conditions (via String AND Condition) allows the execution of this target.",1,108
3910,"public boolean processSocket(SocketWrapper<Socket> socket, SocketStatus status) {
        try {
            if (status == SocketStatus.OPEN || status == SocketStatus.TIMEOUT) {
                if (waitingRequests.remove(socket)) {
                    SocketProcessor proc = new SocketProcessor(socket,status);
                    ClassLoader loader = Thread.currentThread().getContextClassLoader();
                    try {
                        //threads should not be created by the webapp classloader
                        if (Globals.IS_SECURITY_ENABLED) {
                            PrivilegedAction<Void> pa = new PrivilegedSetTccl(
                                    getClass().getClassLoader());
                            AccessController.doPrivileged(pa);
                        } else {
                            Thread.currentThread().setContextClassLoader(
                                    getClass().getClassLoader());
                        }
                        getExecutor().execute(proc);
                    }finally {
                        if (Globals.IS_SECURITY_ENABLED) {
                            PrivilegedAction<Void> pa = new PrivilegedSetTccl(loader);
                            AccessController.doPrivileged(pa);
                        } else {
                            Thread.currentThread().setContextClassLoader(loader);
                        }
                    }
                }
            }
        } catch (Throwable t) {
            // This means we got an OOM or similar creating a thread, or that
            // the pool and its queue are full
            log.error(sm.getString(""endpoint.process.fail""), t);
            return false;
        }
        return true;
    }",Process an existing async connection.,1,331
3911,"public K find( K key )
    {
        if ( key == null )
        {
            return null;
        }
        
        switch ( size )
        {
            case 0 :
                return null;
                
            case 1 :
                if ( comparator.compare( array[0], key ) == 0 )
                {
                    return array[0];
                }
                else
                {
                    return null;
                }
                
            case 2 :
                if ( comparator.compare( array[0], key ) == 0 )
                {
                    return array[0];
                }
                else if ( comparator.compare( array[1], key ) == 0 )
                {
                    return array[1];
                }
                else
                {
                    return  null;
                }
                
            default :
                // Split the array in two parts, the left part an the right part
                int current = size >> 1;
                int start = 0;
                int end = size - 1;
                
                while ( end - start + 1 > 2 )
                {
                    int res = comparator.compare( array[current], key ) ;
                    
                    if ( res == 0 )
                    {
                        return array[current];
                    }
                    else if ( res < 0 )
                    {
                        start = current;
                        current = (current + end + 1) >> 1;
                    }
                    else
                    {
                        end = current;
                        current = (current + start + 1) >> 1 ;
                    }
                }
                
                switch ( end - start + 1 )
                {
                    case 1 :
                        if ( comparator.compare(  array[start], key ) == 0 )
                        {
                            return array[start];
                        }
                        else
                        {
                            return null;
                        }
                        
                    case 2 :
                        if ( comparator.compare( array[start], key ) == 0 )
                        {
                            return array[start];
                        }
                        else if ( comparator.compare( array[end], key ) == 0 )
                        {
                            return array[end];
                        }
                        else
                        {
                            return  null;
                        }
                }
        }
        
        return null;
    }",Find an element in the array.,1,684
3912,"public synchronized List<T> getListeners() {
        return new ArrayList<T>(listeners);
    }",Returns a list of listeners.,1,32
3913,"public Record<R> newInstance() {
        seal();
        return new SimpleRecord<R>(this);
    }",Creates an new record instance of this type.,1,36
3914,"public Object caseDial( Dial object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Dial'.,1,25
3915,"public static <E extends Enum<E>> E asEnum(ModelNode value, Class<E> targetClass) {
        return Enum.valueOf(targetClass, value.asString());
    }",Returns the value of the node as an Enum value.,1,55
3916,"public static List<String> getJoinedRooms(XMPPConnection connection, String user)
                    throws NoResponseException, XMPPErrorException, NotConnectedException {
        ArrayList<String> answer = new ArrayList<String>();
        // Send the disco packet to the user
        DiscoverItems result = ServiceDiscoveryManager.getInstanceFor(connection).discoverItems(
                        user, discoNode);
        // Collect the entityID for each returned item
        for (DiscoverItems.Item item : result.getItems()) {
            answer.add(item.getEntityID());
        }
        return answer;
    }",Returns a List of the rooms where the requested user has joined.,1,131
3917,"protected XMPPTCPConnection getConnection(int index) {
        if (index > getMaxConnections()) {
            throw new IllegalArgumentException(""Index out of bounds"");
        }
        return connections[index];
    }",Returns the XMPPTCPConnection located at the requested position.,1,56
3918,"public static File getCacheFile(File cacheDir, int id, long position, long timestamp) {
    return new File(cacheDir, id + ""."" + position + ""."" + timestamp + SUFFIX);
  }","Returns a new  File instance from  cacheDir,  id,  position,  timestamp.",1,71
3919,"public Entry remove(long entryId)
		throws NoSuchEntryException, SystemException {
		return remove(Long.valueOf(entryId));
	}",Removes the entry with the primary key from the database.,1,38
3920,"public static ValueDecimal get(BigInteger bigInteger) {
        if (bigInteger.signum() == 0) {
            return (ValueDecimal) ZERO;
        } else if (BigInteger.ONE.equals(bigInteger)) {
            return (ValueDecimal) ONE;
        }
        return (ValueDecimal) Value.cache(new ValueDecimal(new BigDecimal(bigInteger)));
    }",Get or create big decimal value for the given big integer.,1,104
3921,"protected String resolveOneLink(LocalPath path) throws IOException {
    try {
      return readSymbolicLink(path);
    } catch (NotASymlinkException e) {
      // Not a symbolic link.  Check it exists.

      // (A simple call to lstat would replace all of this.)
      if (!exists(path, false)) {
        throw new FileNotFoundException(path + "" (No such file or directory)"");
      }

      // TODO(bazel-team): (2009) ideally, throw ENOTDIR if dir is not a dir, but that
      // would require twice as many stats, or a much more convoluted
      // implementation (like glibc's canonicalize.c).

      return null; //  exists.
    }
  }",Helper method of  #resolveSymbolicLinks(LocalPath).,1,112
3922,"public static Type getType(String name, Type... subTypes)
        {
            name = name.toUpperCase();
            Type t = byName.get(name);
            if (t == null)
            {
                t = new Type(name, subTypes);
            }
            return t;
        }","Retrieves a Type instance by name, if one does not exist already it creates one.",1,94
3923,"public UI getRoot() {
        return UI.getCurrent();
    }","Gets the UI for which this page is being rendered, if available.",1,23
3924,"public String getContent() {
        return content;
    }",Return the JsScript content.,1,19
3925,"public static <T extends CharSequence> T notEmpty(T chars, String message, Object... values) {
        if (chars == null) {
            throw new NullPointerException(String.format(message, values));
        }
        if (chars.length() == 0) {
            throw new IllegalArgumentException(String.format(message, values));
        }
        return chars;
    }",Validate that the specified argument character sequence is neither null nor a length of zero (no characters); otherwise throwing an exception with the specified message.,1,121
3926,"public int getLastCol() {
        return field_3_last_col;
    }","get the logical col number for the last cell this row (0 based index), plus one",1,19
3927,"protected Collection<Parameter> getParams() {
		return(parameters.values());
	}",Get a Collection of all of the parameters in the order in which they were defined.,1,27
3928,"@Override
	protected IModel<T> getListItemModel(final IModel<List<T>> model, final int index)
	{
		return new CompoundPropertyModel<T>(super.getListItemModel(model, index));
	}",Wraps a ListItemModel in a CompoundPropertyModel.,1,60
3929,"public static BigDecimal createBigDecimal(String str) {
        if (str == null) {
            return null;
        }
        BigDecimal bd = new BigDecimal(str);
        return bd;
    }",Convert a String to a BigDecimal. Returns null if the string is null.,1,62
3930,"public String withdrawFunds(Currency currency, BigDecimal amount, String address, String tag) throws IOException {
    //determine withdrawal type
    String type = BitfinexUtils.convertToBitfinexWithdrawalType(currency.toString());
    //Bitfinex withdeawal can be from different type of wallets    *
    // we have to use one of these for now: Exchange -
    //to be able to withdraw instantly after trading for example
    //The wallet to withdraw from, can be âtradingâ, âexchangeâ, or âdepositâ.
    String walletSelected = ""exchange"";
    //We have to convert XChange currencies to Bitfinex currencies: can be âbitcoinâ, âlitecoinâ or âetherâ or âtetherâ or âwireâ.
    return withdraw(type, walletSelected, amount, address, tag);
  }",Used for XRP withdrawals,1,105
3931,"public static Reference ref(Supplier<Rule> ruleSupplier) {
		return new Reference(ruleSupplier);
	}",Shortcut for  new Reference(ruleSupplier).,1,32
3932,"protected A getArguments() {
		return getCommand().getArguments(getContext().getVariableContext());
	}",Returns the command arguments for the current variable context.,1,32
3933,"public StudentAttributes getStudentForRegistrationKey(String registrationKey) {
        Assumption.assertNotNull(Const.StatusCodes.DBLEVEL_NULL_INPUT, registrationKey);
   
        try {
            // CourseStudent
            String originalKey = StringHelper.decrypt(registrationKey.trim());
            CourseStudent courseStudent = getCourseStudentEntityForRegistrationKey(originalKey);
            if (courseStudent != null) {
                return new StudentAttributes(courseStudent);
            }
        } catch (Exception e) {
            // even if the student does not exist, it's not supposed to throw an exception
            log.severe(""Exception thrown trying to retrieve CourseStudent \n""
                       + TeammatesException.toStringWithStackTrace(e));
            // fall back on Student
            // TODO change this to an Assumption.fail once all Students are migrated to CourseStudents
        }
        
        try {
            // Student
            String decryptedKey = StringHelper.decrypt(registrationKey.trim());
            Student student = getPm().getObjectById(Student.class,
                                                    KeyFactory.stringToKey(decryptedKey));
            return new StudentAttributes(student);
        } catch (Exception e) {
            // There is no such student
            return null;
        }
        
    }",Works only for encrypted keys.,1,245
3934,"public static Observable<String> decode(final Observable<byte[]> src, final CharsetDecoder charsetDecoder) {
        return src.lift(new Operator<String, byte[]>() {
            @Override
            public Subscriber<? super byte[]> call(final Subscriber<? super String> o) {
                return new Subscriber<byte[]>(o) {
                    private ByteBuffer leftOver = null;

                    @Override
                    public void onCompleted() {
                        if (process(null, leftOver, true))
                            o.onCompleted();
                    }

                    @Override
                    public void onError(Throwable e) {
                        if (process(null, leftOver, true))
                            o.onError(e);
                    }

                    @Override
                    public void onNext(byte[] bytes) {
                        process(bytes, leftOver, false);
                    }

                    public boolean process(byte[] next, ByteBuffer last, boolean endOfInput) {
                        if (o.isUnsubscribed())
                            return false;

                        ByteBuffer bb;
                        if (last != null) {
                            if (next != null) {
                                // merge leftover in front of the next bytes
                                bb = ByteBuffer.allocate(last.remaining() + next.length);
                                bb.put(last);
                                bb.put(next);
                                bb.flip();
                            }
                            else { // next == null
                                bb = last;
                            }
                        }
                        else { // last == null
                            if (next != null) {
                                bb = ByteBuffer.wrap(next);
                            }
                            else { // next == null
                                return true;
                            }
                        }

                        CharBuffer cb = CharBuffer.allocate((int) (bb.limit() * charsetDecoder.averageCharsPerByte()));
                        CoderResult cr = charsetDecoder.decode(bb, cb, endOfInput);
                        cb.flip();

                        if (cr.isError()) {
                            try {
                                cr.throwException();
                            }
                            catch (CharacterCodingException e) {
                                o.onError(e);
                                return false;
                            }
                        }

                        if (bb.remaining() > 0) {
                            leftOver = bb;
                        }
                        else {
                            leftOver = null;
                        }

                        String string = cb.toString();
                        if (!string.isEmpty())
                            o.onNext(string);

                        return true;
                    }
                };
            }
        });
    }",Decodes a stream the multibyte chunks into a stream of strings that works on infinite streams and where it handles when a multibyte character spans two chunks.,1,685
3935,"public final MethodOperand asMethod() {
    return (MethodOperand) this;
  }",Cast to an  MethodOperand.,1,25
3936,"public int collapseAll() {
		return collapseAll(mMinCollapsibleLevel);
	}",Collapses all expandable items with the minimum level of  #mMinCollapsibleLevel.,1,22
3937,"public static DataType valueOf(final int code) {
        return (code >= 0 && code < VALUES.length) ? VALUES[code] : UNKNOWN;
    }","Returns the enumeration value for the given NetCDF code, or  #UNKNOWN if the given code is unknown.",1,55
3938,"public static Collection flatten(Collection self, Closure flattenUsing) {
        return flatten(self, createSimilarCollection(self), flattenUsing);
    }",Flatten a collection.,1,41
3939,"public Iterator get(String text, int start) {
        LongestMatchHandler handler = new LongestMatchHandler();
        find(text, start, handler);
        return handler.getMatches();
    }",Gets an iterator of the objects associated with the longest prefix matching string key starting at the specified position.,1,58
3940,"public ClusterServersConfig useClusterServers() {
        return useClusterServers(new ClusterServersConfig());
    }",Init cluster servers configuration,1,26
3941,"public boolean addFrame(Bitmap im) {
        return addFrame(im, 0, 0);
    }",Adds next GIF frame.,1,31
3942,"private static Pair<Format, Long> parseCsdBuffer(CsdBuffer csdBuffer) {
    byte[] csdData = Arrays.copyOf(csdBuffer.data, csdBuffer.length);

    int firstByte = csdData[4] & 0xFF;
    int secondByte = csdData[5] & 0xFF;
    int thirdByte = csdData[6] & 0xFF;
    int width = (firstByte << 4) | (secondByte >> 4);
    int height = (secondByte & 0x0F) << 8 | thirdByte;

    float pixelWidthHeightRatio = 1f;
    int aspectRatioCode = (csdData[7] & 0xF0) >> 4;
    switch(aspectRatioCode) {
      case 2:
        pixelWidthHeightRatio = (4 * height) / (float) (3 * width);
        break;
      case 3:
        pixelWidthHeightRatio = (16 * height) / (float) (9 * width);
        break;
      case 4:
        pixelWidthHeightRatio = (121 * height) / (float) (100 * width);
        break;
      default:
        // Do nothing.
        break;
    }

    Format format = Format.createVideoSampleFormat(null, MimeTypes.VIDEO_MPEG2, Format.NO_VALUE,
        Format.NO_VALUE, width, height, Format.NO_VALUE, Collections.singletonList(csdData),
        Format.NO_VALUE, pixelWidthHeightRatio);

    long frameDurationUs = 0;
    int frameRateCodeMinusOne = (csdData[7] & 0x0F) - 1;
    if (0 <= frameRateCodeMinusOne && frameRateCodeMinusOne < FRAME_RATE_VALUES.length) {
      double frameRate = FRAME_RATE_VALUES[frameRateCodeMinusOne];
      int sequenceExtensionPosition = csdBuffer.sequenceExtensionPosition;
      int frameRateExtensionN = (csdData[sequenceExtensionPosition + 9] & 0x60) >> 5;
      int frameRateExtensionD = (csdData[sequenceExtensionPosition + 9] & 0x1F);
      if (frameRateExtensionN != frameRateExtensionD) {
        frameRate *= (frameRateExtensionN + 1d) / (frameRateExtensionD + 1);
      }
      frameDurationUs = (long) (C.MICROS_PER_SECOND / frameRate);
    }

    return Pair.create(format, frameDurationUs);
  }",Parses the  Format and frame duration from a csd buffer.,1,599
3943,"public URI toUri(boolean absolute) {
        try {
            if (absolute || path.isAbsolute()) {
                final Path absolutePath = path.isAbsolute() ? path : toAbsolutePathImpl()[0];
                return absolutePath.toUri();
            } else {
                String strPath = ""/"".equals(path.getFileSystem().getSeparator()) ? path.toString() : path.toString().replace(path.getFileSystem().getSeparator(), ""/"");
                return new URI(null, null, strPath, null);
            }
        } catch (SecurityException se) {
            throw se;
        } catch (Throwable t) {
            throw wrapHostException(t);
        }
    }",Returns possibly relative  URI representation of this  TruffleFile.,1,211
3944,"public static int unsignedCompare(long left, long right) {
        /*
         * This method assumes that the arithmetic overflow on signed
         * integer wrap on a circular domain (modulo arithmetic in
         * two-complement), which is the defined behavior in Java.
         *
         * This idea is to rotate the domain by the length of the negative
         * space, and then use the signed operator.
         */
        final long a = left + Long.MIN_VALUE;
        final long b = right + Long.MIN_VALUE;
        if (a < b) {
            return -1;
        } else if (a > b) {
            return 1;
        }
        return 0;
    }",Performs an unsigned long comparison on two unsigned long numbers.,1,114
3945,"public RawLogBuffers termBuffers()
    {
        return rawLogBuffers;
    }",Get the  uk.co.real_logic.aeron.driver.buffer.RawLogBuffers the back this connection.,1,20
3946,"public static String getLp(Edge edge) {
		return (String) edge.attributesProperty().get(LP__GE);
	}",Returns the value of the  #LP__GE property of the given  Edge.,1,37
3947,"public Collection<Object> list() {
        return data.keySet();
    }",Gets a Collection of all keys in the current HashTree node.,1,26
3948,"public Closure trampoline(final Object... args) {
        return new TrampolineClosure(this.curry(args));
    }",Builds a trampolined variant of the current closure.,1,37
3949,"public static Matrix<Float64> valueOf(double[][] values) {
        return Float64Matrix.valueOf(values);
    }",Returns a dense matrix from a 2-dimensional array of double values (convenience method).,1,36
3950,"protected String resolvePath(String path) {
		return this.ignoreUnresolvablePlaceholders ?
				environment.resolvePlaceholders(path) :
				environment.resolveRequiredPlaceholders(path);
	}","Resolve the given path, replacing placeholders with corresponding property values from the environment if necessary.",1,44
3951,"public boolean isEllipticCurve() {
        return familyName.equals(""ECDSA"");
    }","Returns  true if the enum instance represents an Elliptic Curve ECDSA signature algorithm,  false otherwise.",1,26
3952,"public List<ShardRouting> assignedShards() {
        return this.assignedShards;
    }",Returns a  List of assigned shards,1,24
3953,"public static XBinaryValue toValue(byte[] list) {
		return vf.createBinaryValue(list);
	}",Returns the content of the given byte array as an  XBinaryValue,1,31
3954,"public Color getColor()  {
        try { 
            return ColorUtil.parseColorString(ncName);
        } catch (PropertyException e) {
            //TODO: This should probably print an error message?
            return null;
        }
    }","If a system color, return the corresponding value.",1,55
3955,"public static <T> Collection<T> nonNullElements(Collection<T> c) {
    if (c == null) return null;
    Collection<T> nonNullElements = new ArrayList<T>();
    for (T o : c) if (o != null) nonNullElements.add(o);
    return unmodifiableCollection(c);
  }",Returns a new unmodifiable collection containing the non-null elements of the given collection.,1,106
3956,"private UIFileInfo getUiFileInfo(FileSystem fileSystem, TachyonURI filePath)
      throws BlockDoesNotExistException, FileDoesNotExistException, InvalidPathException,
      IOException, TachyonException {
    URIStatus status;
    try {
      status = fileSystem.getStatus(filePath);
    } catch (TachyonException e) {
      throw new FileDoesNotExistException(filePath.toString());
    }
    UIFileInfo uiFileInfo = new UIFileInfo(status.getInfo());
    boolean blockExistOnWorker = false;
    for (long blockId : status.getBlockIds()) {
      if (mBlockWorker.hasBlockMeta(blockId)) {
        blockExistOnWorker = true;
        BlockMeta blockMeta = mBlockWorker.getVolatileBlockMeta(blockId);
        long blockSize = blockMeta.getBlockSize();
        // The block last access time is not available. Use -1 for now.
        // It's not necessary to show location information here since
        // we are viewing at the context of this worker.
        uiFileInfo.addBlock(blockMeta.getBlockLocation().tierAlias(), blockId, blockSize, -1);
      }
    }
    if (!blockExistOnWorker) {
      throw new FileDoesNotExistException(filePath.toString());
    }
    return uiFileInfo;
  }","Gets the  UIFileInfo object that represents the file id, or the file path if file id is -1.",1,269
3957,"public static RequestSender given(RequestSpecification requestSpecification) {
        return new TestSpecificationImpl(requestSpecification, createTestSpecification().getResponseSpecification());
    }",When you're only interested in supplying a predefined request specification without a response specification then you can use this method.,1,38
3958,"public DateTimeFieldType getLowerLimit() {
        return iLowerLimit;
    }",Gets the field type that represents the lower limit of comparison.,1,19
3959,"public ApplicationContextAssert<C> hasSingleBean(Class<?> type) {
		return hasSingleBean(type, Scope.INCLUDE_ANCESTORS);
	}",Verifies that the application context (or ancestors) contains a single bean with the given type.,1,36
3960,"@Override
	public String getDefault() {
		return null;
	}",Returns the default value of @odf.attribute draw:path-stretchpoint-x.,1,22
3961,"public boolean delete(String path, boolean recursive) throws TachyonException {
    LOG.info(""delete("" + path + "")"");
    synchronized (mRoot) {
      Inode inode = null;
      try {
        inode = getInode(path);
      } catch (InvalidPathException e) {
        return false;
      }
      if (inode == null) {
        return true;
      }
      return delete(inode.getId(), recursive);
    }
  }",Delete a file based on the file's path.,1,145
3962,"public ObjectReader withFormatDetection(DataFormatReaders readers)
    {
        return new ObjectReader(this, _config, _valueType, _rootDeserializer, _valueToUpdate,
                _schema, _injectableValues, readers);
    }","Fluent factory method for constructing a reader that will try to auto-detect underlying data format, using specified  DataFormatReaders.",1,50
3963,"public DirContext getContext(String baseDN) throws NamingException {
        boolean debug = Log.isDebugEnabled();
        if (debug) {
            Log.debug(""Creating a DirContext in LdapManager.getContext()..."");
        }

         // Set up the environment for creating the initial context
        Hashtable env = new Hashtable();
        env.put(Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);
        env.put(Context.PROVIDER_URL, getProviderURL(baseDN));
        if (sslEnabled) {
            env.put(""java.naming.ldap.factory.socket"",
                    ""com.jivesoftware.util.ssl.DummySSLSocketFactory"");
            env.put(Context.SECURITY_PROTOCOL, ""ssl"");
        }

        // Use simple authentication to connect as the admin.
        env.put(Context.SECURITY_AUTHENTICATION, ""simple"");
        if (adminDN != null) {
            env.put(Context.SECURITY_PRINCIPAL, adminDN);
        }
        if (adminPassword != null) {
            env.put(Context.SECURITY_CREDENTIALS, adminPassword);
        }
        if (ldapDebugEnabled) {
            env.put(""com.sun.jndi.ldap.trace.ber"", System.err);
        }
        if (connectionPoolEnabled) {
            env.put(""com.sun.jndi.ldap.connect.pool"", ""true"");
        }

        if (debug) {
            Log.debug(""Created hashtable with context values, attempting to create context..."");
        }
        // Create new initial context
        DirContext context = new InitialDirContext(env);
        if (debug) {
            Log.debug(""... context created successfully, returning."");
        }
        return context;
    }",Returns a DirContext for the LDAP server that can be used to perform lookups and searches using the specified base DN.,1,360
3964,"public Response test(@PathParam(""clazz"") String clazz) throws Exception {
        return Response
            .status(injectionManager.getInstance(Class.forName(clazz)) != null ? 200 : 600)
            .build();
    }",This method will test given class by checking if it is available in  InjectionManager that has been injected from the Jersey context.,1,69
3965,"private static boolean equals(WildcardType w, Type t) {
        if (t instanceof WildcardType) {
            final WildcardType other = (WildcardType) t;
            return equals(w.getLowerBounds(), other.getLowerBounds())
                && equals(TypeUtils.getImplicitUpperBounds(w), TypeUtils.getImplicitUpperBounds(other));
        }
        return true;
    }",Learn whether  t equals  w.,1,103
3966,"public synchronized RVMField resolve() {
    if (resolvedMember != null) return resolvedMember;

    // Hasn't been resolved yet. Do it now triggering class loading if necessary.
    return resolveInternal((RVMClass) type.resolve());
  }",Find the RVMField that this field reference refers to using the search order specified in JVM spec 5.4.3.2.,1,53
3967,"public List getSubplots() {
    	if (this.subplots != null) {
            return Collections.unmodifiableList(this.subplots);
    	}
    	else {
    		return Collections.EMPTY_LIST;
    	}
    }",Returns the list of subplots.,1,61
3968,"public String[] getConfiguredContentTypes(ISourceViewer sourceViewer) {
		return new String[] { IDocument.DEFAULT_CONTENT_TYPE };
	}",Set default content type.,1,36
3969,"public ListenableFuture<?> forceFlush(ReplayPosition flushIfDirtyBefore)
    {
        // we synchronize on the data tracker to ensure we don't race against other calls to switchMemtable(),
        // unnecessarily queueing memtables that are about to be made clean
        synchronized (data)
        {
            // during index build, 2ary index memtables can be dirty even if parent is not.  if so,
            // we want to flush the 2ary index ones too.
            boolean clean = true;
            for (ColumnFamilyStore cfs : concatWithIndexes())
                clean &= cfs.data.getView().getCurrentMemtable().isCleanAfter(flushIfDirtyBefore);

            if (clean)
            {
                // We could have a memtable for this column family that is being
                // flushed. Make sure the future returned wait for that so callers can
                // assume that any data inserted prior to the call are fully flushed
                // when the future returns (see #5241).
                ListenableFutureTask<?> task = ListenableFutureTask.create(new Runnable()
                {
                    public void run()
                    {
                        logger.debug(""forceFlush requested but everything is clean in {}"", name);
                    }
                }, null);
                postFlushExecutor.execute(task);
                return task;
            }

            return switchMemtable();
        }
    }",Flush if there is unflushed data that was written to the CommitLog before @param flushIfDirtyBefore (inclusive).,1,204
3970,"public List<ShardRouting> shards() {
        return this.shards;
    }",Returns a  List of shards,1,24
3971,"public static int indexOf(float[] array, float valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        for (int i = startIndex; i < array.length; i++) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex is treated as zero.,1,141
3972,"public static List checkVersion( String fileName )
	{
		List rtnList = new ArrayList( );
		InputStream inputStream = null;

		try
		{
			inputStream = new BufferedInputStream( new FileInputStream(
					fileName ) );
			rtnList.addAll( checkVersion( inputStream ) );
		}
		catch ( FileNotFoundException e1 )
		{
			rtnList
					.add( new VersionInfo( null,
							VersionInfo.INVALID_DESIGN_FILE ) );
		}
		catch ( DesignFileException e1 )
		{
			rtnList
					.add( new VersionInfo( null,
							VersionInfo.INVALID_DESIGN_FILE ) );
		}
		finally
		{
			try
			{
				if ( inputStream != null )
					inputStream.close( );
			}
			catch ( IOException e )
			{
			}
		}

		return rtnList;
	}",Checks whether the opening design file holds a version number before the some specific features is supported.,1,246
3973,"static Page remove(Page p, Object key) {
        // TODO avoid separate lookup
        if (p.find(key) == null) {
            return p;
        }
        p = p.copyOnWrite();
        Page top = p;
        Page parent = null;
        int parentIndex = 0;
        while (true) {
            if (parent != null) {
                parent.children[parentIndex] = p.id;
            }
            int index = p.findKey(key);
            if (p.isLeaf()) {
                if (index >= 0) {
                    p.remove(index);
                } else {
                    // not found?
                    throw new RuntimeException(""Not found: "" + key);
                }
                if (p.size() == 0) {
                    if (parent != null) {
                        parent.remove(parentIndex);
                        // TODO recursive, or on the way down
                    }
                }
                break;
            }
            if (index < 0) {
                index = -index - 1;
            }
            parent = p;
            parentIndex = index;
            p = p.map.readPage(p.children[index]);
            p = p.copyOnWrite();
        }
        return top;
    }",Remove a key-value pair.,1,359
3974,"private IFile getFile(String fileString) {
		/*
		 * Note at this point, fileString is already guaranteed to be pointing
		 * to an existing file in the workspace, so we can just call getFile.
		 */
		return ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(fileString));
	}",Returns an IFile from the given uri.,1,43
3975,"public Object writeProperty(Object bean, String name, Object value) {
		return propertyFilter.writeProperty(bean, name, value);
	}","Calls the  PropertyFilter#writeProperty(Object, String, Object) method on the registered property filters.",1,43
3976,"public static INDArray randn(INDArray target) {
        return getExecutioner().exec(new GaussianDistribution(target), Nd4j.getRandom());
    }",Fill the given ndarray with random numbers drawn from a normal distribution,1,43
3977,"public static Object methodInvoke(final Object target, final String methodName, final Object... args) {
        Method method;
        if (null != args) {
            Class<?>[] parameterTypes = new Class[args.length];
            for (int i = 0; i < args.length; i++) {
                Array.set(parameterTypes, i, args[i].getClass());
            }
            method = getMethod(target, methodName, parameterTypes);
        } else {
            method = getMethod(target, methodName);
        }
        Preconditions.checkNotNull(method);
        method.setAccessible(true);
        try {
            return method.invoke(target, args);
        } catch (InvocationTargetException ex) {
            throw ex.getTargetException();
        }
    }",Invoke target method.,1,237
3978,"public static <A> Predicate<? super A> defined() {
    @SuppressWarnings(""unchecked"")
    final Predicate<A> result = (Predicate<A>) DEFINED;
    return result;
  }",Predicate for filtering defined options only.,1,62
3979,"public Instant getExpires() {
        return expires;
    }",Get the Instant that this Token expires,1,19
3980,"public Map<Integer, List<RecordBatch>> drain(Cluster cluster, Set<Node> nodes, int maxSize, long nowMs) {
        if (nodes.isEmpty())
            return Collections.emptyMap();

        Map<Integer, List<RecordBatch>> batches = new HashMap<Integer, List<RecordBatch>>();
        for (Node node : nodes) {
            int size = 0;
            List<PartitionInfo> parts = cluster.partitionsForNode(node.id());
            List<RecordBatch> ready = new ArrayList<RecordBatch>();
            /* to make starvation less likely this loop doesn't start at 0 */
            int start = drainIndex = drainIndex % parts.size();
            do {
                PartitionInfo part = parts.get(drainIndex);
                Deque<RecordBatch> deque = dequeFor(new TopicPartition(part.topic(), part.partition()));
                if (deque != null) {
                    synchronized (deque) {
                        RecordBatch first = deque.peekFirst();
                        if (first != null) {
                            if (size + first.records.sizeInBytes() > maxSize && !ready.isEmpty()) {
                                // there is a rare case that a single batch size is larger than the request size due
                                // to compression; in this case we will still eventually send this batch in a single
                                // request
                                break;
                            } else {
                                RecordBatch batch = deque.pollFirst();
                                batch.records.close();
                                size += batch.records.sizeInBytes();
                                ready.add(batch);
                                batch.drainedMs = nowMs;
                            }
                        }
                    }
                }
                this.drainIndex = (this.drainIndex + 1) % parts.size();
            } while (start != drainIndex);
            batches.put(node.id(), ready);
        }
        return batches;
    }",Drain all the data for the given nodes and collate them into a list of batches that will fit within the specified size on a per-node basis.,1,481
3981,"public int computeLength()
    {

        // The entry
        compareRequestLength = 1 + TLV.getNbBytes( LdapDN.getNbBytes( entry ) ) + LdapDN.getNbBytes( entry );

        // The attribute value assertion
        int attributeDescLength = StringTools.getBytesUtf8( attributeDesc ).length;
        avaLength = 1 + TLV.getNbBytes( attributeDescLength ) + attributeDescLength;

        if ( assertionValue instanceof String )
        {
            int assertionValueLength = StringTools.getBytesUtf8( ( String ) assertionValue ).length;
            avaLength += 1 + TLV.getNbBytes( assertionValueLength ) + assertionValueLength;
        }
        else
        {
            avaLength += 1 + TLV.getNbBytes( ( ( byte[] ) assertionValue ).length )
                + ( ( byte[] ) assertionValue ).length;
        }

        compareRequestLength += 1 + TLV.getNbBytes( avaLength ) + avaLength;

        return 1 + TLV.getNbBytes( compareRequestLength ) + compareRequestLength;
    }",Compute the CompareRequest length,1,279
3982,"public static <T> T notNull(T object, String message, Object... values) {
        if (object == null) {
            throw new NullPointerException(String.format(message, values));
        }
        return object;
    }",Validate that the specified argument is not null; otherwise throwing an exception with the specified message.,1,77
3983,"public String getCursorName() throws SQLException {
        return getResultSet().getCursorName();
    }",Retrieves the name of the SQL cursor used by this getResultSet() object.,1,29
3984,"public static UtilityMap<String, Object> asMap(JSONObject object) {
        log.debug(""Returning {} using {}"", JSONObjectMap.class.getName(), object);
        return new JSONObjectMap(object);
    }",Provides a  UtilityMap-based view on a  JSONObject.,1,58
3985,"public ModelObject getType(QName key) {
        return types.get(key);
    }",Returns the referenceable introspected type for corresponding to the QName key,1,27
3986,"public List<GWTJahiaPublicationInfo> getPublicationInfo(List<String> uuids, boolean allSubTree,
                                                            boolean checkForUnpublication)
            throws GWTJahiaServiceException {
        final JCRSessionWrapper session = retrieveCurrentSession();
        return publication.getFullPublicationInfos(uuids,
                Collections.singleton(retrieveCurrentSession().getLocale().toString()),
                session, allSubTree, checkForUnpublication);
    }",Get the publication status information for multiple nodes by their identifier.,1,92
3987,"@SuppressWarnings(""unchecked"")
    public Map<String, Definition> read(Object source) throws DefinitionsFactoryException {
        return Collections.EMPTY_MAP;
    }",Reads  org.apache.tiles.definition.Definition objects from a source.,1,42
3988,"public static Locale getLocale(final Context context, final LanguageCode language, final Country country) {
        String code = null;
        if (language != null) {
            code = language.getLanguage();
        }
        if (country != null) {
            final CodeListProxy proxy = country.proxy;
            final String c = CharSequences.trimWhitespaces(proxy != null ? proxy.identifier() : country.toString());
            if (c != null && !c.isEmpty()) {
                if (code == null) {
                    code = """";
                }
                int i = code.indexOf('_');
                if (i < 0) {
                    code = code + '_' + c;
                } else {
                    final int length = code.length();
                    if (++i == code.length() || code.charAt(i) == '_') {
                        code = new StringBuilder().append(code, 0, i).append(c).append(code, i, length).toString();
                    } else if (!c.equals(CharSequences.token(code, i))) {
                        Context.warningOccured(context, null, null, ""unmarshal"", Errors.class,
                                Errors.Keys.IncompatiblePropertyValue_1, ""country"");
                    }
                }
            }
        }
        return Context.converter(context).toLocale(context, code);
    }","Returns the locale for the given language and country (which may be null), or  null if none.",1,430
3989,"protected MediaCodecDecoderInfo getDecoderInfo(MediaCodecSelector mediaCodecSelector,
      Format format, boolean requiresSecureDecoder) throws DecoderQueryException {
    return mediaCodecSelector.getDecoderInfo(format.sampleMimeType, requiresSecureDecoder);
  }",Returns a  MediaCodecDecoderInfo for a given format.,1,47
3990,"protected ExceptionPolicy getExceptionPolicy(Exchange exchange, Throwable exception) {
        if (exceptionPolicy == null) {
            throw new IllegalStateException(""The exception policy has not been set"");
        }

        return exceptionPolicy.getExceptionPolicy(exceptionPolicies, exchange, exception);
    }",Attempts to find the best suited  ExceptionPolicy to be used for handling the given thrown exception.,1,69
3991,"String getCreateParams() {

        String names;

        switch (type) {

            case Types.CHAR :
            case Types.VARCHAR :
                names = ""LENGTH"";
                break;

            case Types.DECIMAL :
            case Types.NUMERIC :
                names = ""PRECISION,SCALE"";
                break;

            default :
                names = null;
                break;
        }

        return names;
    }","Retrieves a character sequence representing a CSV list, in",1,122
3992,"public SentinelServersConfig useSentinelServers() {
        return useSentinelServers(new SentinelServersConfig());
    }",Init sentinel servers configuration.,1,26
3993,"private static JavaMethodView make(Inspection inspection, TeleClassMethodActor teleClassMethodActor, MethodCodeKind codeKind) throws MaxVMBusyException {
        JavaMethodView javaMethodView = null;
        // If there are compilations, then inspect in association with the most recent
        final MaxCompiledCode compiledCode = inspection.vm().codeCache().latestCompilation(teleClassMethodActor);
        if (compiledCode != null) {
            return make(inspection, compiledCode, codeKind);
        }
        final MethodView methodView = teleClassMethodActorToMethodView.get(teleClassMethodActor);
        if (methodView == null) {
            final MethodViewManager methodViewManager = (MethodViewManager) ViewKind.METHODS.viewManager();
            final MethodViewContainer container = methodViewManager.activateView();
            inspection.vm().acquireLegacyVMAccess();
            try {
                javaMethodView = new JavaMethodView(inspection, container, teleClassMethodActor, codeKind);
                container.add(javaMethodView);
                teleClassMethodActorToMethodView.put(teleClassMethodActor, javaMethodView);
            } finally {
                inspection.vm().releaseLegacyVMAccess();
            }

        } else {
            javaMethodView = (JavaMethodView) methodView;
        }
        return javaMethodView;
    }","Display a view for a Java method, showing the kind of code requested if available.",1,282
3994,"public final Collection<ComponentHolder> getComponentHoldersByPid(String pid)
    {
        Set<ComponentHolder> componentHoldersUsingPid = new HashSet<ComponentHolder>();
        synchronized (m_componentHoldersByPid)
        {
            Set<ComponentHolder> set = m_componentHoldersByPid.get(pid);
            // only return the entry if non-null and not a reservation
            if (set != null)
            {
                componentHoldersUsingPid.addAll(set);
            }
        }
        return componentHoldersUsingPid;
    }",Returns the set of ComponentHolder instances whose configuration pids are matching the given pid.,1,109
3995,"public RowMetaInterface getStepFields(StepMeta[] stepMeta) throws KettleStepException
    {
        RowMetaInterface fields = new RowMeta();

        for (int i = 0; i < stepMeta.length; i++)
        {
            RowMetaInterface flds = getStepFields(stepMeta[i]);
            if (flds != null) fields.mergeRowMeta(flds);
        }
        return fields;
    }",Gets the fields for each of the specified steps and merges them into a single set,1,113
3996,"@SafeVarargs
	public static Map<Class<? extends Annotation>, Set<Method>> getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation>...annotationTypes) {
		Map<Class<? extends Annotation>, Set<Method>> methodMap = new HashMap<Class<? extends Annotation>, Set<Method>>();
		for(Class<? extends Annotation> annType: annotationTypes) {
			methodMap.put(annType, new HashSet<Method>());
		}
				
		for(Method m: clazz.getMethods()) {
			for(Class<? extends Annotation> annType: annotationTypes) {
				if(m.getAnnotation(annType)!=null) {
					methodMap.get(annType).add(m);
				}
			}
		}
		for(Method m: clazz.getDeclaredMethods()) {
			for(Class<? extends Annotation> annType: annotationTypes) {
				if(m.getAnnotation(annType)!=null) {
					methodMap.get(annType).add(m);
				}
			}
		}
		return methodMap;
	}","Returns a map of sets of methods in the passed class that are annotated with the passed annotation types, keyed by the annotation type",1,302
3997,"public static VUserHandle readFromParcel(Parcel in) {
        int h = in.readInt();
        return h != USER_NULL ? new VUserHandle(h) : null;
    }","Read a VUserHandle from a Parcel that was previously written with  #writeToParcel(VUserHandle, Parcel), returning either a null or new object as appropriate.",1,56
3998,"public String getString()
    {
        return Strings.fromByteArray(string);
    }","Decode the encoded string and return it, 8 bit encoding assumed.",1,25
3999,"public InputStream retrieveJSON(String methType, URL url, List<NameValuePair> params)
            throws IOException {

        CloseableHttpClient client = HttpClients.createDefault();

        // Instantiates the method based on the methType parameter
        HttpRequestBase meth;
        if (methType.equals(""GET"")) {
            meth = new HttpGet();
        } else {
            meth = new HttpPost();
        }

        URI uri;
        try {
            uri = new URIBuilder(url.toString()).setParameters(params).build();
        } catch (URISyntaxException ex) {
            throw new IOException(ex.getMessage());
        }
        meth.setURI(uri);

        // Adds authorization if login/password is set
        if (this.user != null && this.password != null) {
            meth.addHeader(
                    ""Authentication"", (new UsernamePasswordCredentials(user, password)).toString());
        }

        CloseableHttpResponse response;

        // Re-tries the request if necessary
        while (true) {

            // Executes the request (a POST, since the URL may get too long)
            response = client.execute(meth);

            // If HTTP error, throws an exception
            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                throw new IOException(
                        ""HTTP Status: ""
                                + response.getStatusLine().getStatusCode()
                                + "" for URL: ""
                                + uri
                                + "" response: ""
                                + response.toString());
            }

            // Retrieve the wait period is returned by the server
            int wait = 0;
            Header header = meth.getFirstHeader(""Retry-After"");
            if (header != null) {
                wait = Integer.valueOf(header.getValue());
            }

            // Exits if no retry is necessary
            if (wait == 0) {
                break;
            }

            try {
                Thread.sleep(wait * 1000);
            } catch (InterruptedException e) {
                LOGGER.log(Level.SEVERE, ""InterruptedException: "" + e.getMessage());
                throw new IOException(e);
            }
        }

        // Extracts and returns the response
        return response.getEntity().getContent();
    }","Helper method returning a JSON String out of a resource belonging to a ArcGIS ReST API instance (via a GET).If present, it sends authorisation.",1,557
4000,"protected boolean containsProperties(BeanResolutionContext resolutionContext, BeanContext context, String subProperty) {
        boolean isSubProperty = StringUtils.isNotEmpty(subProperty);
        if (!isSubProperty && !requiredComponents.isEmpty()) {
            // if the bean requires dependency injection we disable this optimization
            return true;
        }
        if (isConfigurationProperties && context instanceof ApplicationContext) {
            ApplicationContext appCtx = (ApplicationContext) context;
            Class<?> beanType = getBeanType();
            ConfigurationProperties annotation = beanType.getAnnotation(ConfigurationProperties.class);
            while (annotation != null) {
                if (ArrayUtils.isNotEmpty(annotation.cliPrefix())) {
                    // little bit of a hack this, would be nice if we had a better way to acknowledge CLI properties
                    return true;
                }

                String prefix = resolvePrefix(resolutionContext, context, beanType, beanType);

                if (isSubProperty) {
                    prefix += '.' + subProperty;
                }
                if (appCtx.containsProperties(prefix)) {
                    return true;
                }
                beanType = beanType.getSuperclass();
                if (beanType == null) {
                    break;
                } else {
                    annotation = beanType.getAnnotation(ConfigurationProperties.class);
                }
            }
        }
        return false;
    }",If this bean is a  ConfigurationProperties bean return whether any properties for it are configured within the context,1,320
4001,"public List<ActorRef> availableWorks(String workerRole) throws NoAvailableWorkerException {
        List<ActorRef> refs = roleToActor.get(workerRole);
        if(refs == null || refs.size() == 0){
            throw new NoAvailableWorkerException(""role="" + workerRole + "", no available worker."");
        }
        List<ActorRef> availableList = new ArrayList<>(refs.size());
        availableList.addAll(refs);
        return Collections.unmodifiableList(availableList);
    }","Get a copy all available  ActorRef list, by the given worker role.",1,137
4002,"private Filter[] obtainAllDefinedFilters(ConfigAttributeDefinition configAttributeDefinition) {
        List list = new Vector();
        Iterator attributes = configAttributeDefinition.getConfigAttributes();

        while (attributes.hasNext()) {
            ConfigAttribute attr = (ConfigAttribute) attributes.next();
            String filterName = attr.getAttribute();

            if (filterName == null) {
                throw new IllegalArgumentException(""Configuration attribute: '"" + attr
                    + ""' returned null to the getAttribute() method, which is invalid when used with FilterChainProxy"");
            }

            if (!filterName.equals(TOKEN_NONE)) {
                list.add(this.applicationContext.getBean(filterName, Filter.class));
            }
        }

        return (Filter[]) list.toArray(new Filter[list.size()]);
    }",Obtains all of the Filter instances registered against the specified ConfigAttributeDefinition.,1,204
4003,"public Fraction multiplyBy(Fraction fraction) {
        if (fraction == null) {
            throw new IllegalArgumentException(""The fraction must not be null"");
        }
        if (numerator == 0 || fraction.numerator == 0) {
            return ZERO;
        }
        double numeratorValue = (double) numerator * fraction.numerator;
        double denominatorValue = (double) denominator * fraction.denominator;
        if (Math.abs(numeratorValue) > Integer.MAX_VALUE || 
            Math.abs(denominatorValue) > Integer.MAX_VALUE) {
                throw new ArithmeticException(""Integer overflow"");
        }
        return getReducedFraction((int) numeratorValue, (int) denominatorValue);
    }","Multiplies the value of this fraction by another, returning the result in reduced form.",1,195
4004,"public static byte[] bigIntegerToBytes(BigInteger b) {
        if (b == null)
            return null;

        byte[] data = b.toByteArray();

        if (data.length != 1 && data[0] == 0) {
            byte[] tmp = new byte[data.length - 1];
            System.arraycopy(data, 1, tmp, 0, tmp.length);
            data = tmp;
        }
        return data;
    }",emitting sign indication byte,1,148
4005,"static public List<TCell> cellFromHBase(Cell in) {
    List<TCell> list = new ArrayList<TCell>(1);
    if (in != null) {
      list.add(new TCell(in.getValue(), in.getTimestamp()));
    }
    return list;
  }","This utility method creates a list of Thrift TCell ""struct"" based on an Hbase Cell object.",1,90
4006,"public ResourcePolicy[] getBitstreamPolicies(@PathParam(""bitstream_id"") Integer bitstreamId, @Context HttpHeaders headers)
    {

        log.info(""Reading bitstream(id="" + bitstreamId + "") policies."");
        org.dspace.core.Context context = null;
        List<ResourcePolicy> policies = new ArrayList<ResourcePolicy>();

        try
        {
            context = createContext(getUser(headers));
            org.dspace.content.Bitstream dspaceBitstream = findBitstream(context, bitstreamId, org.dspace.core.Constants.READ);

            Bundle[] bundles = dspaceBitstream.getBundles();
            for (Bundle bundle : bundles)
            {
                List<org.dspace.authorize.ResourcePolicy> bitstreamsPolicies = bundle.getBitstreamPolicies();
                for (org.dspace.authorize.ResourcePolicy policy : bitstreamsPolicies)
                {
                    if (policy.getResourceID() == bitstreamId)
                    {
                        policies.add(new ResourcePolicy(policy));
                    }
                }
            }
            context.complete();
            log.trace(""Policies for bitsream(id="" + bitstreamId + "") was successfully read."");

        }
        catch (SQLException e)
        {
            processException(""Someting went wrong while reading policies of bitstream(id="" + bitstreamId
                    + ""), SQLException! Message: "" + e, context);
        }
        catch (ContextException e)
        {
            processException(""Someting went wrong while reading policies of bitstream(id="" + bitstreamId
                    + ""), ContextException. Message: "" + e.getMessage(), context);
        }
        finally
        {
            processFinally(context);
        }

        return policies.toArray(new ResourcePolicy[0]);
    }","Return all bitstream resource policies from all bundles, in which bitstream is.",1,419
4007,"public static boolean isPartitioned(String templateOrIndex) {
        int idx1 = templateOrIndex.indexOf('.');
        if (idx1 == -1) {
            return false;
        }
        int idx2 = templateOrIndex.indexOf(PARTITIONED_TABLE_PART, idx1);
        if (idx2 == -1) {
            return false;
        }
        int diff = idx2 - idx1;
        return ((diff == 0 && idx1 == 0) || diff == 1) && idx2 + PARTITIONED_TABLE_PART.length() < templateOrIndex.length();
    }",Checks whether the index/template name belongs to a partitioned table.,1,169
4008,"public static String center(String str, int size, String padStr) {
        if (str == null) {
            return null;
        }
        if (padStr == null || padStr.length() == 0) {
            throw new IllegalArgumentException(""Pad String must not be null or empty"");
        }
        if (size < 0) {
            size = 0;
        }
        int sz = str.length();
        int p = size - sz;
        if (p < 1) {
            return str;
        }
        str = leftPad(str, sz + p / 2, padStr);
        str = rightPad(str, size, padStr);
        return str;
    }","Center a String in a larger String of size size. Uses a supplied String as the value to pad the String with. If the size is less than the string length, the string is returned.",1,217
4009,"public Attachment remove(long attachmentId)
		throws NoSuchAttachmentException, SystemException {
		return remove(Long.valueOf(attachmentId));
	}",Removes the attachment with the primary key from the database.,1,38
4010,"public static String defaultString(Object obj, String defaultString) {
        return (obj == null) ? defaultString : obj.toString();
    }","Return either the passed in Object, or if it is null, then a passed in default String.",1,48
4011,"public long getDelta() {
        return delta;
    }","This gives the time elapsed, in ms, since the last time this event was sent to the given  EntityRef.",1,19
4012,"public RowResult call() throws IOException {
            long lockId = -1L;
            if(rl != null) {
              lockId = rl.getLockId();
            }
            return server.getRow(location.getRegionInfo().getRegionName(), row, 
                columns, ts, lockId);
          }",Get selected columns for the specified row at a specified timestamp using existing row lock.,1,89
4013,"@Override
    @XmlElement(name = ""characterSet"")
    public Collection<Charset> getCharacterSets() {
        return characterSets = nonNullCollection(characterSets, Charset.class);
    }",Returns the character coding standard used for the dataset.,1,49
4014,"public double getWidth() {
		if (!mIsSpreadsheet) {
			String sWidth = mTableElement.getProperty(OdfTableProperties.Width);
			if (sWidth == null) {
				int colCount = getColumnCount();
				double tableWidth = 0;
				for (int i = 0; i < colCount; i++) {
					Column col = getColumnByIndex(i);
					tableWidth += col.getWidth();
				}
				return tableWidth;
			} else{
				return PositiveLength.parseDouble(sWidth, Unit.MILLIMETER);
			}
		} else {
			throw new UnsupportedOperationException();
		}
	}",Get the width of the table (in Millimeter).,1,183
4016,"private File verifyHome(String homeGuess, String jiveConfigName) throws FileNotFoundException {
        File openfireHome = new File(homeGuess);
        File configFile = new File(openfireHome, jiveConfigName);
        if (!configFile.exists()) {
            throw new FileNotFoundException();
        }
        else {
            try {
                return new File(openfireHome.getCanonicalPath());
            }
            catch (Exception ex) {
                throw new FileNotFoundException();
            }
        }
    }",Verifies that the given home guess is a real Openfire home directory.,1,140
4017,"private static InternalMessage transformBindResponse( LdapMessageCodec codecMessage, int messageId )
    {
        BindResponseImpl internalMessage = new BindResponseImpl( messageId );
        BindResponseCodec bindResponse = codecMessage.getBindResponse();

        // Codec : byte[] serverSaslcreds -> Internal : byte[] serverSaslCreds
        internalMessage.setServerSaslCreds( bindResponse.getServerSaslCreds() );
        //transformControlsCodecToInternal( codecMessage, internalMessage );
        transformLdapResultCodecToInternal( bindResponse.getLdapResult(), internalMessage.getLdapResult() );
        
        return internalMessage;
    }",Transform a BindResponse message from a CodecMessage to a,1,107
4018,"public Class parseClass(GroovyCodeSource codeSource, boolean shouldCacheSource) throws CompilationFailedException {
        synchronized (classCache) {
            Class answer = (Class) sourceCache.get(codeSource.getName());
            if (answer!=null) return answer;
            
            // Was neither already loaded nor compiling, so compile and add to
            // cache.
            try {
                CompilationUnit unit = createCompilationUnit(config, codeSource.getCodeSource());
                SourceUnit su = null;
                if (codeSource.getFile()==null) {
                    su = unit.addSource(codeSource.getName(), codeSource.getInputStream());
                } else {
                    su = unit.addSource(codeSource.getFile());
                }
                
                ClassCollector collector = createCollector(unit,su);
                unit.setClassgenCallback(collector);
                int goalPhase = Phases.CLASS_GENERATION;
                if (config != null && config.getTargetDirectory()!=null) goalPhase = Phases.OUTPUT;
                unit.compile(goalPhase);
                
                answer = collector.generatedClass;
                for (Iterator iter = collector.getLoadedClasses().iterator(); iter.hasNext();) {
                    Class clazz = (Class) iter.next();
                    setClassCacheEntry(clazz);
                }
                if (shouldCacheSource) sourceCache.put(codeSource.getName(), answer);
            } finally {
                try {
                    codeSource.getInputStream().close();
                } catch (IOException e) {
                    throw new GroovyRuntimeException(""unable to close stream"",e);
                }
            }
            return answer;
        }
    }",Parses the given code source into a Java class.,1,422
4019,"public long discardUpstreamSamples(int discardFromIndex) {
    int discardCount = getWriteIndex() - discardFromIndex;
    Assertions.checkArgument(0 <= discardCount && discardCount <= (length - readPosition));
    length -= discardCount;
    largestQueuedTimestampUs = Math.max(largestDiscardedTimestampUs, getLargestTimestamp(length));
    if (length == 0) {
      return 0;
    } else {
      int relativeLastWriteIndex = (relativeStartIndex + length - 1) % capacity;
      return offsets[relativeLastWriteIndex] + sizes[relativeLastWriteIndex];
    }
  }",Discards samples from the write side of the queue.,1,160
4020,"public LabelPattern getKeyPattern() {
        JabRefPreferences.keyPattern = new LabelPattern();
        Preferences pre = Preferences.userNodeForPackage(LabelPattern.class);
        try {
            String[] keys = pre.keys();
            if (keys.length > 0) {
                for (String key : keys) {
                    JabRefPreferences.keyPattern.addLabelPattern(key, pre.get(key, null));
                }
            }
        } catch (BackingStoreException ex) {
            LOGGER.info(""BackingStoreException in JabRefPreferences.getKeyPattern"", ex);
        }
        return JabRefPreferences.keyPattern;
    }",Fetches key patterns from preferences Not cached,1,161
4021,"public UnsafeBuffer buffer()
    {
        return buffer;
    }",The  uk.co.real_logic.aeron.common.concurrent.UnsafeBuffer containing the header.,1,20
4022,"public String getGroupStringShort() {
        if (gcResourceList.size() > 1) {
            StringBuilder sb = new StringBuilder();
            for (String resourceName : gcResourceList) {
                resourceName = shortenGroupStringForSeries(resourceName);
                // test for ""/"" and ""\\"" because in Windows you have a ""/"" in a http url
                // but ""\\"" in file strings
                int lastIndexOfPathSeparator = resourceName.lastIndexOf(""/"");
                if (lastIndexOfPathSeparator < 0) {
                    lastIndexOfPathSeparator = resourceName.lastIndexOf(""\\"");
                }
                sb.append(resourceName.substring(lastIndexOfPathSeparator + 1)).append("";"");
            }
            return sb.toString();
        }
        else {
            String resourceName = gcResourceList.get(0);
            return shortenGroupStringForSeries(resourceName);
        }
    }",Get short version of resource names.,1,197
4023,"public static Executor whileExecutor(Predicate predicate, Executor executor) {
        if (predicate == null) {
            throw new IllegalArgumentException(""The predicate must not be null"");
        }
        if (executor == null) {
            throw new IllegalArgumentException(""The executor must not be null"");
        }
        return new WhileExecutor(predicate, executor, false);
    }",Creates a Executor that will call the executor repeatedly until the predicate returns false.,1,100
4024,"public Cell get(final byte [] row, final byte [] column)
  throws IOException {
    return connection.getRegionServerWithRetries(
        new ServerCallable<Cell>(connection, tableName, row) {
          public Cell call() throws IOException {
            return server.get(location.getRegionInfo().getRegionName(), row,
                column);
          }
        }
    );
  }",Get a single value for the specified row and column,1,114
4025,"public static Double getArrowSizeParsed(Edge edge) {
		return parseDouble(getArrowSize(edge));
	}",Returns the (parsed) value of the  #ARROWSIZE__E property of the given  Edge.,1,30
4026,"public static long getMaxUnsignedValueOnBytes(final int width) {
    if (width < 0 || width > 8) {
      throw new IllegalArgumentException(""Width must be from 1 to 8 bytes: "" 
          + width);
    }
    if (width < 8) {
      return ((long) 1 << width * Byte.SIZE) - 1;
    } else {
      return Long.MAX_VALUE;
    }
  }",Simple helper to calculate the max value for any width of long from 0 to 8 bytes.,1,122
4027,"public String getResponseDataAsString() {
        try {
            return new String(responseData,getDataEncodingWithDefault());
        } catch (UnsupportedEncodingException e) {
            log.warn(""Using platform default as ""+getDataEncodingWithDefault()+"" caused ""+e);
            return new String(responseData);
        }
    }",Gets the responseData of the SampleResult object as a String,1,81
4028,"public LeafEntry<K, V> find( BTreeValue<K> key ) throws IOException
	{
		LeafEntry<K, V> entry = firstEntry;
		while ( entry != null )
		{
			int result = btree.compare( entry.getKey( ), key );
			if ( result == 0 )
			{
				return entry;
			}
			if ( result > 0 )
			{
				return null;
			}
			entry = entry.getNext( );
		}
		return null;
	}",return the first entry which key is great than or equal to the given key.,1,163
4029,"public String networkInterface()
    {
        return networkInterface;
    }",Get the address of the local interface in the form host:[port]/[subnet mask] for routing traffic.,1,20
4030,"public Article remove(Article article) throws SystemException {
		return super.remove(article);
	}",Removes the article from the database.,1,31
4031,"public String getNamespace()
    {
        String namespaceBuf = namespace.get(matcher());
        if (namespaceBuf != null)
        {
            namespaceBuf = namespaceBuf.toLowerCase();
        }
        
        return namespaceBuf;
    }",Get the namespace part (eg 'html' in 'html:form') converted to all lower case characters.,1,69
4032,"public String getPath(Uri uri) {
        String[] projection = { MediaStore.Images.Media.DATA };
        Cursor cursor = managedQuery(uri, projection, null, null, null);
        if (cursor != null) {
            int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
            cursor.moveToFirst();
            return cursor.getString(column_index);
        }
        final boolean isKitKatOrLater = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;

        // DocumentProvider
        if (isKitKatOrLater && DocumentsContract.isDocumentUri(getApplicationContext(), uri)) {
            // ExternalStorageProvider
            if (UriUtils.isExternalStorageDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                final String type = split[0];

                if (""primary"".equalsIgnoreCase(type)) {
                    return Environment.getExternalStorageDirectory() + ""/"" + split[1];
                }
            }
            // DownloadsProvider
            else if (UriUtils.isDownloadsDocument(uri)) {

                final String id = DocumentsContract.getDocumentId(uri);
                final Uri contentUri = ContentUris.withAppendedId(Uri.parse(""content://downloads/public_downloads""),
                        Long.valueOf(id));

                return UriUtils.getDataColumn(getApplicationContext(), contentUri, null, null);
            }
            // MediaProvider
            else if (UriUtils.isMediaDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                final String type = split[0];

                Uri contentUri = null;
                if (""image"".equals(type)) {
                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                } else if (""video"".equals(type)) {
                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                } else if (""audio"".equals(type)) {
                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                }

                final String selection = ""_id=?"";
                final String[] selectionArgs = new String[] { split[1] };

                return UriUtils.getDataColumn(getApplicationContext(), contentUri, selection, selectionArgs);
            }
            // Documents providers returned as content://...
            else if (UriUtils.isContentDocument(uri)) {
                return uri.toString();
            }
        }
        // MediaStore (and general)
        else if (""content"".equalsIgnoreCase(uri.getScheme())) {

            // Return the remote address
            if (UriUtils.isGooglePhotosUri(uri))
                return uri.getLastPathSegment();

            return UriUtils.getDataColumn(getApplicationContext(), uri, null, null);
        }
        // File
        else if (""file"".equalsIgnoreCase(uri.getScheme())) {
            return uri.getPath();
        }
        return null;
    }",Translates a content URI of an content to a physical path on the disk,1,795
4033,"public List<Item> getItems() {
        synchronized (items) {
            return Collections.unmodifiableList(new ArrayList<Item>(items));
        }
    }","Returns a List of item childs that holds information about roles, affiliation, jids and nicks.",1,47
4034,"public Object caseSeries( Series object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Series'.,1,25
4035,"@Override
    public boolean equals(final Object other, final ComparisonMode mode) {
        if (other == this) {
            return true;
        }
        if (super.equals(other, mode)) {
            final ConventionalUnit<?> that = (ConventionalUnit<?>) other;
            return Utilities.deepEquals(target,   that.target,   mode) &&
                   Utilities.deepEquals(toTarget, that.toTarget, mode);
        }
        return false;
    }","Compares this unit with the given object for equality, optionally ignoring metadata and rounding errors.",1,137
4036,"public boolean isSubtype(String type) {
        Parameters.notNull(""type"", type); // NOI18N

        TypeMirror typeMirror = getCompilationController().getTreeUtilities().parseType(type, getTypeElement());
        if (typeMirror != null) {
            return getCompilationController().getTypes().isSubtype(getTypeElement().asType(), typeMirror);
        }
        return false;
    }",Returns true if  #getTypeElement is a subtype of the given type.,1,108
4037,"private FilterContext preProcessRequest(FilterContext fc) throws IOException {

        if (config.isResumableDownloadEnabled()) {
            fc = new FilterContext.FilterContextBuilder(fc).asyncHandler(new ResumableAsyncHandler(fc.getAsyncHandler())).build();
            return fc;
        }

        for (RequestFilter asyncFilter : config.getRequestFilters()) {
            try {
                fc = asyncFilter.filter(fc);
                if (fc == null) {
                    throw new NullPointerException(""FilterContext is null"");
                }
            } catch (FilterException e) {
                IOException ex = new IOException();
                ex.initCause(e);
                throw ex;
            }
        }

        Request request = fc.getRequest();
        if (ResumableAsyncHandler.class.isAssignableFrom(fc.getAsyncHandler().getClass())) {
            request = ResumableAsyncHandler.class.cast(fc.getAsyncHandler()).adjustRequestRange(request);
        } 

        return fc;
    }",Configure and execute the  Request and  RequestFilter,1,266
4038,"public Object caseChart( Chart object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Chart'.,1,25
4039,"public static <T extends CharSequence> T notBlank(T chars) {
        return notBlank(chars, DEFAULT_NOT_BLANK_EXCEPTION_MESSAGE);
    }","Validate that the specified argument character sequence is neither null, a length of zero (no characters), empty nor whitespace; otherwise throwing an exception.",1,38
4040,"public KaleoTransition remove(long kaleoTransitionId)
		throws NoSuchTransitionException, SystemException {
		return remove(Long.valueOf(kaleoTransitionId));
	}",Removes the kaleo transition with the primary key from the database.,1,38
4041,"public List<User> transform(Collection<UserEntity> userEntityCollection) {
    List<User> userList = new ArrayList<User>(20);
    User user;
    for (UserEntity userEntity : userEntityCollection) {
      user = transform(userEntity);
      if (user != null) {
        userList.add(user);
      }
    }

    return userList;
  }",Transform a List of  UserEntity into a Collection of  User.,1,111
4042,"protected Object eval(org.opengis.filter.expression.Expression expression, Object object) {
		if( expression == null ) return null;
		Object value = expression.evaluate( object );
	
		if (value instanceof Collection) {
		    //unpack all elements
		    List<Object> list = new ArrayList<Object>();
		    for (Object member : (Collection<Object>) value) {
		        list.add(unpack(member));
		    }
		    return list;
		}
		            
                return unpack(value);
	}",Helper method for subclasses to reduce null checks and automatically unpack values from attributes and collections,1,159
4043,"public String expand(Object bean) {
        return expand(BeanMap.of(bean));
    }",Expand the string with the given bean.,1,30
4044,"public static List localeLookupList(Locale locale, Locale defaultLocale) {
        List list = new ArrayList(4);
        if (locale != null) {
            list.add(locale);
            if (locale.getVariant().length() > 0) {
                list.add(new Locale(locale.getLanguage(), locale.getCountry()));
            }
            if (locale.getCountry().length() > 0) {
                list.add(new Locale(locale.getLanguage(), """"));
            }
            if (list.contains(defaultLocale) == false) {
                list.add(defaultLocale);
            }
        }
        return Collections.unmodifiableList(list);
    }","Obtains the list of locales to search through when performing a locale search.  localeLookupList(Locale(""fr"", ""CA"", ""xxx""), Locale(""en"")) = [Locale(""fr"",""CA"",""xxx""), Locale(""fr"",""CA""), Locale(""fr""), Locale(""en""]  The result list begins with the most specific locale, then the next more general and so on, finishing with the default locale.",1,201
4045,"public static String encodePath(String value, boolean ignorePathParams)
   {
      ArrayList<String> params = new ArrayList<String>();
      boolean foundParam = false;
      if (ignorePathParams)
      {
         StringBuffer newPath = new StringBuffer();
         if (savePathParams(value, newPath, params))
         {
            foundParam = true;
            value = newPath.toString();
         }

      }
      String[] segments = value.split(""/"");
      StringBuilder buffer = new StringBuilder();
      boolean first = true;
      for (String segment : segments)
      {
         if (first)
         {
            first = false;
         }
         else
         {
            buffer.append(""/"");
         }
         segment = encodeSegment(segment, ignorePathParams);
         buffer.append(segment);
      }
      String result = buffer.toString();
      if (value.endsWith(""/"")) result += ""/"";

      if (ignorePathParams && foundParam)
      {
         result = pathParamReplacement(result, params);
      }

      return result;
   }","Keep encoded values ""%..."", matrix parameters, and '/' characters intact.",1,328
4046,"static PropertySource of(Object... values) {
        int len = values.length;
        if(len % 2 != 0) throw new IllegalArgumentException(""Number of arguments should be an even number representing the keys and values"");

        Map<String,Object> answer = new LinkedHashMap<>(len / 2);
        int i = 0;
        while (i < values.length - 1) {
            Object key = values[i++];
            if(key != null)
                answer.put(key.toString(), values[i++]);
        }
        return new MapPropertySource(PropertySourceLoader.DEFAULT_NAME, answer);
    }",Create a  PropertySource named  PropertySourceLoader#DEFAULT_NAME for the given array of keys and values,1,180
4047,"public static Deferred<TSMeta> getTSMeta(final TSDB tsdb, final String tsuid) {
    return getFromStorage(tsdb, UniqueId.stringToUid(tsuid))
      .addCallbackDeferring(new LoadUIDs(tsdb, tsuid));
  }",Attempts to fetch the timeseries meta data and associated UIDMeta objects from storage.,1,62
4048,"public int getTriangleCount(int lod){
        if (lodLevels != null){
            if (lod < 0)
                throw new IllegalArgumentException(""LOD level cannot be < 0"");

            if (lod >= lodLevels.length)
                throw new IllegalArgumentException(""LOD level ""+lod+"" does not exist!"");

            return computeNumElements(lodLevels[lod].getData().capacity());
        }else if (lod == 0){
            return elementCount;
        }else{
            throw new IllegalArgumentException(""There are no LOD levels on the mesh!"");
        }
    }",Returns the triangle count for the given LOD level.,1,150
4049,"public Deferred<ArrayList<Object>> flush() {
    final int size = size();
    if (size > 0) {
      LOG.info(""Flushing all old outstanding rows out of "" + size + "" rows"");
    }
    final long now = System.currentTimeMillis();
    return flush(now / 1000 - Const.MAX_TIMESPAN - 1, Integer.MAX_VALUE);
  }",Forces a flush of the all old entries in the compaction queue.,1,114
4050,"public static CharSequence parseContent(XmlPullParser parser)
                    throws XmlPullParserException, IOException {
        assert(parser.getEventType() == XmlPullParser.START_TAG);
        if (parser.isEmptyElementTag()) {
            return """";
        }
        // Advance the parser, since we want to parse the content of the current element
        parser.next();
        return parseContentDepth(parser, parser.getDepth(), false);
    }",Returns the content of a element.,1,97
4051,"public TextBounds draw (SpriteBatch spriteBatch, CharSequence str, float x, float y, int start, int end) {
		final Texture texture = sprite.getTexture();
		y += yOffset;
		float startX = x;
		Glyph lastGlyph = null;
		while (start < end) {
			lastGlyph = getGlyph(str.charAt(start++));
			if (lastGlyph != null) {
				spriteBatch.draw(texture, x + lastGlyph.xoffset, y + lastGlyph.yoffset, lastGlyph.width, lastGlyph.height,
					lastGlyph.u, lastGlyph.v, lastGlyph.u2, lastGlyph.v2, color);
				x += lastGlyph.xadvance;
				break;
			}
		}
		while (start < end) {
			char ch = str.charAt(start++);
			Glyph g = getGlyph(ch);
			if (g == null) continue;
			x += lastGlyph.getKerning(ch);
			lastGlyph = g;
			spriteBatch.draw(texture, x + lastGlyph.xoffset, y + lastGlyph.yoffset, lastGlyph.width, lastGlyph.height, lastGlyph.u,
				lastGlyph.v, lastGlyph.u2, lastGlyph.v2, color);
			x += g.xadvance;
		}
		textBounds.width = (int)(x - startX);
		textBounds.height = capHeight;
		return textBounds;
	}",Draws a substring at the specified position.,1,404
4052,"public NodeIterable<Node> successors() {
        assert !this.isDeleted();
        return nodeClass.getSuccessorIterable(this);
    }",Returns an  NodeIterable iterable which can be used to traverse all non-null successor edges of this node.,1,38
4053,"public Reflector call(String name) throws ReflectException {
        return call(name, new Object[0]);
    }",Call current  Reflector#obj method,1,37
4054,"public ClassLoader getParentClassLoader() {
        return parentClassLoader;
    }",Get the parent ClassLoader.,1,19
4055,"public boolean hasEntity(A attributes) {
        return getEntityQueryKeys(attributes).first().now() != null;
    }",NOTE: This method must be overriden for all subclasses such that it will return the key query for the,1,38
4056,"public static ZooKeeper connect(Configuration conf, Watcher watcher)
  throws IOException {
    Properties properties = ZKConfig.makeZKProps(conf);
    String ensemble = ZKConfig.getZKQuorumServersString(properties);
    return connect(conf, ensemble, watcher);
  }","Creates a new connection to ZooKeeper, pulling settings and ensemble config from the specified configuration object using methods from  ZKConfig.",1,73
4057,"public boolean isAncestorOf(ConfigurationPropertyName name) {
		Assert.notNull(name, ""Name must not be null"");
		if (this.getNumberOfElements() >= name.getNumberOfElements()) {
			return false;
		}
		for (int i = 0; i < this.elements.length; i++) {
			if (!elementEquals(this.elements[i], name.elements[i])) {
				return false;
			}
		}
		return true;
	}",Returns  true if this element is an ancestor (immediate or nested parent) of the specified name.,1,136
4058,"long getUserId() throws IOException {
    return mWorkerClient.getUserId();
  }",Returns the userId of the worker client.,1,25
4059,"public static String resolveDefines(Specfile specfile, String stringToResolve) {
        String workingString = stringToResolve;
        SpecfileDefine define;
        try {
            Pattern variablePattern = Pattern.compile(""%\\{(\\S+?)\\}""); //$NON-NLS-1$
            Matcher variableMatcher = variablePattern.matcher(stringToResolve);
            Set<String> variablesFound = new HashSet<>();
            while (variableMatcher.find()) {
                String variable = variableMatcher.group(1);
                if (variablesFound.contains(variable)) {
                    continue;
                }
                define = specfile.getDefine(variable);
                if (define != null && !stringToResolve.equals(define.getUnresolvedStringValue())) {
                    workingString = workingString.replaceAll(""\\%\\{""+variable+""\\}"", define.getStringValue()); //$NON-NLS-1$ //$NON-NLS-2$
                }
            }
            return workingString;
        } catch (Exception e) {
            return stringToResolve;
        }
    }",Resolve defines for a given string.,1,262
4060,"public static Counter newCounter(Class<?> klass,
                                           String name,
                                           String scope) {
        return DEFAULT_REGISTRY.newCounter(klass, name, scope);
    }",Creates a new  com.yammer.metrics.core.Counter and registers it under the given class and name.,1,50
4061,"public Block getDefiningBlock(final Symbol symbol) {
        if (symbol.isTemp()) {
            return null;
        }
        final String name = symbol.getName();
        for (final Iterator<Block> it = getBlocks(); it.hasNext();) {
            final Block next = it.next();
            if (next.getExistingSymbol(name) == symbol) {
                return next;
            }
        }
        throw new AssertionError(""Couldn't find symbol "" + name + "" in the context"");
    }",Get the block in which a symbol is defined,1,156
4062,"private static CommandLineArgument findCommandLineOption(String arg) {
        for (CommandLineArgument commandLineArgument : CommandLineArgument.values()) {
            if (commandLineArgument.match(arg)) {
                return commandLineArgument;
            }
        }
        return null;
    }",Find the command-line arg corresponding to the parameter  arg.,1,69
4063,"public TimeZone getTimeZone()
    {
        return timezone;
    }",Returns the configured  TimeZone.,1,20
4064,"public Object extractFact(Tuple tuple) throws ExtractionException
    {
        try
        {
            Declaration[] params = getRequiredTupleMembers();

            Object[] paramValues = new Object[ params.length + 2];

            paramValues[0] = new KnowledgeHelper( tuple );
            paramValues[1] = tuple.getWorkingMemory().getApplicationDataMap();
            for ( int i = 0 ; i < params.length ; i++ ) {
                paramValues[i + 2] = tuple.get( params[i] );
            }

            return evaluate(paramValues, tuple);
        }
        catch (Exception e)
        {
            throw new ExtractionException( e );
        }
    }",Determine if the supplied Tuple is allowed by this condition.,1,209
4065,"protected final Future<Boolean> isConnected() {
        final Future<Boolean> messagingCheck = Optional.ofNullable(messaging)
                .map(client -> client.isConnected()).orElse(Future.succeededFuture(Boolean.FALSE));
        final Future<Boolean> registrationCheck = Optional.ofNullable(registration)
                .map(client -> client.isConnected()).orElse(Future.succeededFuture(Boolean.FALSE));
        return CompositeFuture.all(messagingCheck, registrationCheck).compose(ok -> {
            return Future.succeededFuture(messagingCheck.result() && registrationCheck.result());
        });
    }",Checks if this adapter is connected to Hono Messaging and the Device Registration service.,1,165
4066,"public static ConfigurableBeanFactory createRootApplicationContext(AvalonEnvironment  env)
    throws Exception {
        final ApplicationContext parent = (ApplicationContext)env.servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
        CocoonBeanFactory factory = new CocoonBeanFactory(parent);
        factory.registerSingleton(Context.class.getName(), env.context);
        factory.registerSingleton(Logger.class.getName(), env.logger);
        factory.registerSingleton(Core.class.getName(), env.core);
        factory.registerSingleton(Settings.class.getName(), env.settings);
        return factory;
    }",Create the root bean factory.,1,148
4067,"public Collection<ODocument> getEntriesBetween(final Object iRangeFrom, final Object iRangeTo, final boolean iInclusive) {
		return getEntriesBetween(iRangeFrom, iRangeTo, iInclusive, -1);
	}",Returns a set of records with key between the range passed as parameter.,1,54
4068,"public static String getPointsList(List<SubmissionData> subs, final boolean normalized){
		String result = """";
		Collections.sort(subs, new Comparator<SubmissionData>(){
			@Override
			public int compare(SubmissionData s1, SubmissionData s2){
				if(normalized)
					return Integer.valueOf(s2.normalized).compareTo(s1.normalized);
				else
					return Integer.valueOf(s2.points).compareTo(s1.points);
			}
		});
		for(SubmissionData sub: subs){
			if(sub.reviewee.equals(sub.reviewer)) continue;
			if(result!="""") result+="", "";
			result+=colorizePoints(sub.normalized);
		}
		return result;
	}",Prints the list of normalized points from the given list of submission data.,1,203
4069,"public ObjectName getObjectName(CamelContext context, PerformanceCounter mbean) throws MalformedObjectNameException {
		StringBuffer buffer = new StringBuffer();
		buffer.append(domainName + "":"");
		buffer.append(KEY_CONTEXT + ""="" + getContextId(context) + "","");
		buffer.append(KEY_CLASS + ""="" + CLASS_ROUTES + "","");
		buffer.append(KEY_ROUTE + ""="" + ""Route.Counter"" + "","");     // TODO: figure out the route id
		buffer.append(KEY_NAME + ""="" + ""Stats"");
		return new ObjectName(buffer.toString());
	}",Implements the naming strategy for a @see PerformanceCounter.,1,172
4070,"public Throwable getAfterFailure()
    {
        return after;
    }",Gets the Throwable thrown if at all within the after InterceptorPipeline.,1,20
4071,"public static long copy(ReadableByteChannel from, WritableByteChannel to) throws IOException {
    checkNotNull(from);
    checkNotNull(to);
    if (from instanceof FileChannel) {
      FileChannel sourceChannel = (FileChannel) from;
      long oldPosition = sourceChannel.position();
      long position = oldPosition;
      long copied;
      do {
        copied = sourceChannel.transferTo(position, ZERO_COPY_CHUNK_SIZE, to);
        position += copied;
        sourceChannel.position(position);
      } while (copied > 0 || position < sourceChannel.size());
      return position - oldPosition;
    }

    ByteBuffer buf = ByteBuffer.allocate(BUF_SIZE);
    long total = 0;
    while (from.read(buf) != -1) {
      buf.flip();
      while (buf.hasRemaining()) {
        total += to.write(buf);
      }
      buf.clear();
    }
    return total;
  }",Copies all bytes from the readable channel to the writable channel.,1,281
4072,"public static Icon get(String name) {
		if (icons == null) {
			loadIcons();
		}

		return icons.get(name.toLowerCase(Locale.ENGLISH));
	}",Returns the icon for name.,1,60
4073,"public ProbeInstrument attach(Probe probe, AdvancedInstrumentResultListener listener, AdvancedInstrumentRootFactory rootFactory, Class<?> requiredResultType, String instrumentInfo) {
        final ProbeInstrument instrument = new ProbeInstrument.AdvancedInstrument(listener, rootFactory, requiredResultType, instrumentInfo);
        probe.attach(instrument);
        return instrument;
    }","Attaches a  AdvancedInstrumentResultListener listener to a  Probe, creating a binding called an  ProbeInstrument.",1,82
4074,"public OutStream getOutStream(WriteType writeType) throws IOException {
    if (isComplete()) {
      throw new IOException(""Overriding after completion not supported."");
    }

    if (writeType == null) {
      throw new IOException(""WriteType can not be null."");
    }

    return new FileOutStream(this, writeType, mUFSConf, mTachyonConf);
  }","Return the  OutStream of this file, use the specified write type.",1,99
4075,"public static int indexOf(double[] array, double valueToFind, int startIndex) {
        if (ArrayUtils.isEmpty(array)) {
            return INDEX_NOT_FOUND;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        for (int i = startIndex; i < array.length; i++) {
            if (valueToFind == array[i]) {
                return i;
            }
        }
        return INDEX_NOT_FOUND;
    }",Finds the index of the given value in the array starting at the given index. This method returns  #INDEX_NOT_FOUND (-1) for a null input array. A negative startIndex is treated as zero.,1,141
4076,"public GooglePaymentRequest uiRequired(boolean uiRequired) {
        mUiRequired = uiRequired;
        return this;
    }","When this is set to false,  GooglePayment#requestPayment(BraintreeFragment, GooglePaymentRequest) will attempt to skip the UI and directly return the data from the buyer's previous selection.",1,30
4077,"public Routed<ServiceConfig> findServiceConfig(RoutingContext routingCtx) {
        return router.find(requireNonNull(routingCtx, ""routingCtx""));
    }",Finds the  Service whose  Router matches the  RoutingContext.,1,38
4078,"public static String getDateString(final ZonedDateTime self) {
        return self.format(DateTimeFormatter.ISO_LOCAL_DATE) + self.format(ZONE_SHORT_FORMATTER);
    }","Formats this date/time with the  java.time.format.DateTimeFormatter#ISO_LOCAL_DATE formatter and appends the zone's short name, e.g.",1,42
4079,"public GenericTypeList getTypeVariables() {
            return new GenericTypeList.Explicit(typeVariables);
        }",Returns the type variables of the the represented method.,1,26
4080,"public static ComparisonOperatorFactory valueOf(AggregationExpression expression) {
			return new ComparisonOperatorFactory(expression);
		}",Take the value resulting from the given @literal expression.,1,29
4081,"public String getTopazCLILocation(Launcher launcher)
	{
		SCMGlobalConfiguration globalConfig = SCMGlobalConfiguration.get();
		String topazCLILocation = globalConfig.getTopazCLILocation(launcher);

		return topazCLILocation;
	}",Gets the value of the 'Topaz CLI Location' based on node,1,53
4082,"public boolean isInRVMspace(int instructionAddress) {
    int vmEnd = owner.mem.read(vmEndAddress); 
    int largeStart = owner.mem.read(largeStartAddress);
    int largeEnd = largeStart + owner.mem.read(largeSizeAddress);
    if (instructionAddress>=bootStart & instructionAddress<=vmEnd) {
      return true;
    } else if (instructionAddress>=largeStart && instructionAddress<=largeEnd) {
      return true;
    } else {
      return false;
    }
  }",Check if an instruction address is in the address space for the RVM,1,143
4083,"public Permission applyDirectoryUMask(Configuration conf) {
    mMode = mMode.applyUMask(Mode.getUMask(conf));
    return this;
  }",Applies the default umask for newly created directories to the mode bits.,1,40
4084,"public JanusGraph open() {
            ModifiableConfiguration mc = new ModifiableConfiguration(GraphDatabaseConfiguration.ROOT_NS,
                    writeConfiguration.copy(), BasicConfiguration.Restriction.NONE);
            return JanusGraphFactory.open(mc);
        }",Opens a JanusGraph graph with the previously configured options.,1,56
4085,"public int deflate(byte[] b, int off, int len) {
        return deflate(b, off, len, NO_FLUSH);
    }",Compresses the input data and fills specified buffer with compressed data.,1,46
4086,"public Account remove(long accountId)
		throws NoSuchAccountException, SystemException {
		return remove(Long.valueOf(accountId));
	}",Removes the account with the primary key from the database.,1,38
4087,"public PeriodType withDaysRemoved() {
        if (!days().isSupported()) {
            return this;
        }
        return MaskedType.mask(this, 1 << 3);
    }",Returns a version of this PeriodType instance that does not support days.,1,57
4088,"public Mono<T> untilOther(Publisher<?> anyPublisher) {
		Objects.requireNonNull(anyPublisher, ""anyPublisher required"");
		if (this instanceof MonoUntilOther) {
			return ((MonoUntilOther<T>) this).copyWithNewTrigger(anyPublisher);
		}
		return onAssembly(new MonoUntilOther<>(false, this, anyPublisher));
	}",Transform this  Mono in order to generate a target  Mono.,1,94
4089,"static int toMatrixData(ReadableArray value, float[] sRawMatrix, float mScale) {
        int fromSize = value.size();
        if (fromSize != inputMatrixDataSize) {
            return fromSize;
        }

        sRawMatrix[0] = (float) value.getDouble(0);
        sRawMatrix[1] = (float) value.getDouble(2);
        sRawMatrix[2] = (float) value.getDouble(4) * mScale;
        sRawMatrix[3] = (float) value.getDouble(1);
        sRawMatrix[4] = (float) value.getDouble(3);
        sRawMatrix[5] = (float) value.getDouble(5) * mScale;

        return inputMatrixDataSize;
    }","Converts given  ReadableArray to a matrix data array,  float[6].",1,201
4090,"private Node tryFoldAssignment(Node subtree) {
    checkState(subtree.isAssign());
    Node left = subtree.getFirstChild();
    Node right = subtree.getLastChild();
    if (left.isName()
        && right.isName()
        && left.getString().equals(right.getString())) {
      // Only names
      subtree.replaceWith(right.detach());
      compiler.reportChangeToEnclosingScope(right);
      return right;
    } else if (left.isDestructuringPattern() && !left.hasChildren()) {
      // `[] = <expr>` becomes `<expr>`
      // Note that this does potentially change behavior. If `<expr>` is not iterable and this
      // code originally threw, it will no longer throw.
      subtree.replaceWith(right.detach());
      compiler.reportChangeToEnclosingScope(right);
      return right;
    }
    return subtree;
  }",Try removing identity assignments and empty destructuring pattern assignments,1,201
4091,"protected Path computeFilename() {
    return computeFilename(this.filenum);
  }",This is a convenience method that computes a new filename with a given using the current HLog file-number,1,24
4092,"private final int scan(WorkQueue w, int r) {
        WorkQueue[] ws; int m;
        long c = ctl;                            // for consistency check
        if ((ws = workQueues) != null && (m = ws.length - 1) >= 0 && w != null) {
            for (int j = m + m + 1, ec = w.eventCount;;) {
                WorkQueue q; int b, e; ForkJoinTask<?>[] a; ForkJoinTask<?> t;
                if ((q = ws[(r - j) & m]) != null &&
                        (b = q.base) - q.top < 0 && (a = q.array) != null) {
                    long i = (((a.length - 1) & b) << ASHIFT) + ABASE;
                    if ((t = ((ForkJoinTask<?>)
                            U.getObjectVolatile(a, i))) != null) {
                        if (ec < 0)
                            helpRelease(c, ws, w, q, b);
                        else if (q.base == b &&
                                U.compareAndSwapObject(a, i, t, null)) {
                            U.putOrderedInt(q, QBASE, b + 1);
                            if ((b + 1) - q.top < 0)
                                signalWork(ws, q);
                            w.runTask(t);
                        }
                    }
                    break;
                }
                else if (--j < 0) {
                    if ((ec | (e = (int)c)) < 0) // inactive or terminating
                        return awaitWork(w, c, ec);
                    else if (ctl == c) {         // try to inactivate and enqueue
                        long nc = (long)ec | ((c - AC_UNIT) & (AC_MASK|TC_MASK));
                        w.nextWait = e;
                        w.eventCount = ec | INT_SIGN;
                        if (!U.compareAndSwapLong(this, CTL, c, nc))
                            w.eventCount = ec;   // back out
                    }
                    break;
                }
            }
        }
        return 0;
    }","Scans for and, if found, runs one task, else possibly inactivates the worker.",1,647
4093,"public Feed remove(Feed feed) throws SystemException {
		return super.remove(feed);
	}",Removes the feed from the database.,1,31
4094,"public Cell[] raw() {
    return cells;
  }",Return the array of Cells backing this Result instance.,1,21
4095,"public List<Highlight> getSelectionDetailsAtIndex(int xIndex) {

        List<Highlight> vals = new ArrayList<Highlight>();

        for (int i = 0; i < mData.getDataSetCount(); i++) {

            IDataSet<?> dataSet = mData.getDataSetByIndex(i);

            // extract all y-values from all DataSets at the given x-index
            final float yVal = dataSet.getYValueForXValue(xIndex);
            if (Float.isNaN(yVal))
                continue;

            vals.add(new Highlight(0f, yVal, 0f, 0f, i, dataSet.getAxisDependency()));
        }

        return vals;
    }",Returns an array of Highlight objects for the given x-index.,1,172
4096,"public static String getHostNameOfIP(String ipPort) {
    if (null == ipPort || !ipPortPattern.matcher(ipPort).matches()) {
      return null;
    }
    
    try {
      int colonIdx = ipPort.indexOf(':');
      String ip = (-1 == colonIdx) ? ipPort
          : ipPort.substring(0, ipPort.indexOf(':'));
      return InetAddress.getByName(ip).getHostName();
    } catch (UnknownHostException e) {
      return null;
    }
  }",Attempt to obtain the host name of the given string which contains an IP address and an optional port.,1,155
4097,"private static InternalMessage transformDelRequest( LdapMessageCodec codecMessage, int messageId )
    {
        DeleteRequestImpl internalMessage = new DeleteRequestImpl( messageId );
        DelRequestCodec delRequest = codecMessage.getDelRequest();

        // Codec : LdapDN entry -> Internal : LdapDN
        internalMessage.setName( delRequest.getEntry() );

        return internalMessage;
    }",Transform a DelRequest message from a CodecMessage to a InternalMessage,1,83
4098,"public static boolean wildcardMatch(String patterns, String str) {
    	for (String pattern: splitAndTrim(patterns)) {
    		if (pattern.startsWith(""+""))
    			pattern = pattern.substring(1);
    		if (pattern.startsWith(""-"")) {
    			pattern = pattern.substring(1);
    			if (SelectorUtils.match(pattern, str))
    				return false;
    		} else {
    			if (SelectorUtils.match(pattern, str))
    				return true;
    		}
    	}
    	return false;
    }",Tests whether or not a string matches against specified patterns.,1,157
4099,"public Menu getRootMenu() {
        return getRootMenu(Menu.class, new RoleAccessController(), true);
    }","Return cached root menu item defined in the WEB-INF/menu.xml or classpath menu.xml, creating menu items using the Menu class and the JEE",1,34
4100,"public static PrivateKeyInfo createPrivateKeyInfo(AsymmetricKeyParameter privateKey, ASN1Set attributes) throws IOException
    {
        if (privateKey instanceof RSAKeyParameters)
        {
            RSAPrivateCrtKeyParameters priv = (RSAPrivateCrtKeyParameters)privateKey;

            return new PrivateKeyInfo(new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption, DERNull.INSTANCE),
                new RSAPrivateKey(priv.getModulus(), priv.getPublicExponent(), priv.getExponent(), priv.getP(), priv.getQ(), priv.getDP(), priv.getDQ(), priv.getQInv()),
            attributes);
        }
        else if (privateKey instanceof DSAPrivateKeyParameters)
        {
            DSAPrivateKeyParameters priv = (DSAPrivateKeyParameters)privateKey;
            DSAParameters params = priv.getParameters();

            return new PrivateKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.id_dsa,
                new DSAParameter(params.getP(), params.getQ(), params.getG())), new ASN1Integer(priv.getX()),
                attributes);
        }
        else if (privateKey instanceof ECPrivateKeyParameters)
        {
            ECPrivateKeyParameters priv = (ECPrivateKeyParameters)privateKey;
            ECDomainParameters domainParams = priv.getParameters();
            ASN1Encodable params;
            int orderBitLength;

            if (domainParams == null)
            {
                params = new X962Parameters(DERNull.INSTANCE);      // Implicitly CA
                orderBitLength = priv.getD().bitLength();   // TODO: this is as good as currently available, must be a better way...
            }
            else if (domainParams instanceof ECNamedDomainParameters)
            {
                params = new X962Parameters(((ECNamedDomainParameters)domainParams).getName());
                orderBitLength = domainParams.getN().bitLength();
            }
            else
            {
                X9ECParameters ecP = new X9ECParameters(
                    domainParams.getCurve(),
                    domainParams.getG(),
                    domainParams.getN(),
                    domainParams.getH(),
                    domainParams.getSeed());

                params = new X962Parameters(ecP);
                orderBitLength = domainParams.getN().bitLength();
            }

            return new PrivateKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.id_ecPublicKey, params),
                new ECPrivateKey(orderBitLength, priv.getD(), params),
                attributes);
        }
        else if (privateKey instanceof X448PrivateKeyParameters)
        {
            X448PrivateKeyParameters key = (X448PrivateKeyParameters)privateKey;

            return new PrivateKeyInfo(new AlgorithmIdentifier(EdECObjectIdentifiers.id_X448),
                new DEROctetString(key.getEncoded()), attributes, key.generatePublicKey().getEncoded());
        }
        else if (privateKey instanceof X25519PrivateKeyParameters)
        {
            X25519PrivateKeyParameters key = (X25519PrivateKeyParameters)privateKey;

            return new PrivateKeyInfo(new AlgorithmIdentifier(EdECObjectIdentifiers.id_X25519),
                new DEROctetString(key.getEncoded()), attributes, key.generatePublicKey().getEncoded());
        }
        else if (privateKey instanceof Ed448PrivateKeyParameters)
        {
            Ed448PrivateKeyParameters key = (Ed448PrivateKeyParameters)privateKey;

            return new PrivateKeyInfo(new AlgorithmIdentifier(EdECObjectIdentifiers.id_Ed448),
                new DEROctetString(key.getEncoded()), attributes, key.generatePublicKey().getEncoded());
        }
        else if (privateKey instanceof Ed25519PrivateKeyParameters)
        {
            Ed25519PrivateKeyParameters key = (Ed25519PrivateKeyParameters)privateKey;

            return new PrivateKeyInfo(new AlgorithmIdentifier(EdECObjectIdentifiers.id_Ed25519),
                new DEROctetString(key.getEncoded()), attributes, key.generatePublicKey().getEncoded());
        }
        else
        {
            throw new IOException(""key parameters not recognised."");
        }
    }",Create a PrivateKeyInfo representation of a private key with attributes.,1,896
4101,"public EditorTableView<TItem> getTableDeck() {
        return this.tblDeck;
    }",Gets the EditorTableView holding the cards in the current deck.,1,24
4102,"private List<Value> createKeyListFromDynamicKey(SynapseXPath xpath) {
        // create static key using given string key name
        Value xsdKey = new Value(xpath);
        return Collections.singletonList(xsdKey);
    }",Create a Value list which consists with one dynamic element,1,48
4103,"public static boolean isAlwaysWhitelisted(String url) {
    return alwaysValidHttpHosts.matcher(url).matches();
  }","This method returns true if the host is always admissible, regardless of the blacklist.",1,33
4104,"public List<Integer> makeExplicit(int startConnectionIndex,
			int endConnectionIndex) {
		// find the anchor handle before the start index
		List<ImplicitGroup> implicitGroups = new ArrayList<>();
		boolean isStartExplicit = isExplicit(startConnectionIndex);
		implicitGroups.add(new ImplicitGroup(
				findExplicitAnchorBackward(startConnectionIndex)));
		// find implicit groups within the given index range
		for (int i = startConnectionIndex; i <= endConnectionIndex; i++) {
			if (isExplicit(i)) {
				// start a new group
				int explicitAnchorHandle = findExplicitAnchorBackward(i);
				implicitGroups.add(new ImplicitGroup(explicitAnchorHandle));
			} else {
				// add point to current group
				Point pointInLocal = getConnection().getPoint(i);
				Point pointInScene = FX2Geometry.toPoint(getConnection()
						.localToScene(Geometry2FX.toFXPoint(pointInLocal)));
				implicitGroups.get(implicitGroups.size() - 1).points
						.add(pointInScene);
			}
		}
		// remove first group if empty
		if (implicitGroups.get(0).points.isEmpty()) {
			implicitGroups.remove(0);
		}
		// create explicit anchors one by one
		List<Integer> handles = new ArrayList<>();
		for (ImplicitGroup ig : implicitGroups) {
			int prec = ig.precedingExplicitIndex;
			if (!handles.isEmpty() || isStartExplicit) {
				handles.add(prec);
			}
			for (Point p : ig.points) {
				prec = createAfter(prec, p);
				handles.add(prec);
			}
		}
		return handles;
	}",Makes the connection anchors within the given range of connection indices explicit and returns their explicit indices.,1,407
4105,"public static ModuleIdentifier asModuleIdentifier(ModelNode value) {
        return ModuleIdentifier.fromString(value.asString());
    }",Returns the value of the node as a module identifier.,1,33
4106,"public Set<OIdentifiable> getEdgesBetweenVertexes(final OIdentifiable iVertex1, final OIdentifiable iVertex2) {
    return getEdgesBetweenVertexes(iVertex1, iVertex2, null, null);
  }",Returns all the edges between the vertexes iVertex1 and iVertex2.,1,46
4107,"public JoinWindows grace(final Duration afterWindowEnd) throws IllegalArgumentException {
        ApiUtils.validateMillisecondDuration(afterWindowEnd, ""afterWindowEnd"");
        if (afterWindowEnd.toMillis() < 0) {
            throw new IllegalArgumentException(""Grace period must not be negative."");
        }
        return new JoinWindows(beforeMs, afterMs, afterWindowEnd, maintainDurationMs, segments);
    }",Reject late events that arrive more than  afterWindowEnd after the end of its window.,1,92
4108,"public Object caseCallBackValue( CallBackValue object )
	{
		return null;
	}",Returns the result of interpretting the object as an instance of 'Call Back Value'.,1,25
4109,"public static String defaultString(Object obj) {
        return defaultString(obj, """");
    }","Return either the passed in Object, or if it is null, then an empty String.",1,31
4110,"public static Observable<String> decode(final Observable<byte[]> src, final CharsetDecoder charsetDecoder) {
        return Observable.create(new OnSubscribeFunc<String>() {
            @Override
            public Subscription onSubscribe(final Observer<? super String> observer) {
                return src.subscribe(new Observer<byte[]>() {
                    private ByteBuffer leftOver = null;

                    @Override
                    public void onCompleted() {
                        if (process(null, leftOver, true))
                            observer.onCompleted();
                    }

                    @Override
                    public void onError(Throwable e) {
                        if (process(null, leftOver, true))
                            observer.onError(e);
                    }

                    @Override
                    public void onNext(byte[] bytes) {
                        process(bytes, leftOver, false);
                    }

                    public boolean process(byte[] next, ByteBuffer last, boolean endOfInput) {
                        ByteBuffer bb;
                        if (last != null) {
                            if (next != null) {
                                // merge leftover in front of the next bytes
                                bb = ByteBuffer.allocate(last.remaining() + next.length);
                                bb.put(last);
                                bb.put(next);
                                bb.flip();
                            }
                            else { // next == null
                                bb = last;
                            }
                        }
                        else { // last == null
                            if (next != null) {
                                bb = ByteBuffer.wrap(next);
                            }
                            else { // next == null
                                return true;
                            }
                        }

                        CharBuffer cb = CharBuffer.allocate((int) (bb.limit() * charsetDecoder.averageCharsPerByte()));
                        CoderResult cr = charsetDecoder.decode(bb, cb, endOfInput);
                        cb.flip();

                        if (cr.isError()) {
                            try {
                                cr.throwException();
                            }
                            catch (CharacterCodingException e) {
                                observer.onError(e);
                                return false;
                            }
                        }

                        if (bb.remaining() > 0) {
                            leftOver = bb;
                        }
                        else {
                            leftOver = null;
                        }

                        String string = cb.toString();
                        if (!string.isEmpty())
                            observer.onNext(string);

                        return true;
                    }
                });
            }
        });
    }",Decodes a stream the multibyte chunks into a stream of strings that works on infinite streams and where handles when a multibyte character spans two chunks.,1,657
4111,"public static boolean isExtensionsAvailable() {
        final Jenkins jenkins = Jenkins.getInstance();
        return jenkins != null && jenkins.getInitLevel().compareTo(InitMilestone.EXTENSIONS_AUGMENTED) >= 0
                && !jenkins.isTerminating();
    }","During Jenkins start-up, before  InitMilestone#PLUGINS_STARTED the extensions lists will be empty and they are not guaranteed to be fully populated until after  InitMilestone#EXTENSIONS_AUGMENTED, similarly, during termination after  Jenkins#isTerminating() is set, it is no longer safe to access the extensions lists.",1,74
4112,"public Field remove(String name)
    {
        name = name.trim();
        return fields.remove(name.toLowerCase());
    }",Removes the  Field with the given name,1,44
4113,"public Duration getSessionTimeout() {
		return this.sessionTimeout;
	}",Return the session timeout or  null.,1,21
4114,"public long timeSinceLastUse() {
	if (!checkedIn)
		return 0;
	return (new Date().getTime() - checkinTime) / 1000;
}",Returns the number of seconds since this ImageInfo was last used.,1,50
4115,"public boolean isSample() {
			return ""$example"".equalsIgnoreCase(key);
		}",Returns whether the current keyword indicates a  Example object.,1,26
4116,"public static String getContent( URL url, Settings settings )
        throws IOException
    {
        return getContent( url, settings, DEFAULT_ENCODING );
    }",Get the input stream using UTF-8 as character encoding from a URL.,1,48
4117,"private long touch(File file) {
        long origional = file.lastModified();
        if (origional == 0l) {
            try {
                Files.createFile(file.toPath());
            } catch (IOException e) {
                throw new IllegalStateException(e);
            }
            return file.lastModified();
        }
        long after = origional;
        do {
            file.setLastModified(System.currentTimeMillis());
        } while (origional == (after = file.lastModified()));
        return after;
    }","Changes the  File#lastModified() file.lastModified() timestamp, making sure the result differs from its current timestamp; may delay long enough to match file system resolution.",1,162
4118,"protected UserDetails createUserDetails(LdapUserDetails ldapUser) {

        LdapUserDetailsImpl.Essence user = new LdapUserDetailsImpl.Essence(ldapUser);

        user.setAuthorities(authoritiesPopulator.getGrantedAuthorities(ldapUser));

        return user.createUserDetails();
    }",Creates the final UserDetails object that will be returned by the provider once the user has been authenticated.,1,62
4119,"public PeriodType withYearsRemoved() {
        if (!years().isSupported()) {
            return this;
        }
        return MaskedType.mask(this, 1 << 0);
    }",Returns a version of this PeriodType instance that does not support years.,1,57
4120,"public final IFormSubmittingComponent getDefaultButton()
	{
		if (isRootForm())
		{
			return defaultSubmittingComponent;
		}
		else
		{
			return getRootForm().getDefaultButton();
		}
	}",Gets the default IFormSubmittingComponent.,1,58
4121,"public int getPriorityValue() {
        return this.priorityValue;
    }",Getter for the priorityValue value.,1,21
4122,"public static String getFileExtension(String filePath) {
        if (!BasicUtils.judgeNotNull(filePath)) {
            return """";
        }

        int extenPosi = filePath.lastIndexOf(""."");
        int filePosi = filePath.lastIndexOf(File.separator);
        if (extenPosi == -1) {
            return """";
        }
        return (filePosi >= extenPosi) ? """" : filePath.substring(extenPosi + 1);
    }",Get extension of the file,1,134
4123,"public static ShortBuffer memSlice(ShortBuffer buffer, int offset, int capacity) {
		int position = buffer.position();
		int limit = buffer.limit();

		try {
			buffer.position(position + offset);
			buffer.limit(position + offset + capacity);

			return buffer.slice();
		} finally {
			buffer.position(position);
			buffer.limit(limit);
		}
	}",Returns a slice of the specified buffer between  (buffer.position() + offset) and  (buffer.position() + offset + capacity).,1,131
4124,"public Iterable<FileAlterationObserver> getObservers() {
        return observers;
    }",Returns the set of  FileAlterationObserver registered with this monitor.,1,22
4125,"SAXTransformerFactory newProcessorInstance() throws TransformerConfigurationException
  {

    TransformerFactory tfactory = null;

    try
    {
      Class factoryClass = Class.forName(m_processorName);

      tfactory = (TransformerFactory) factoryClass.newInstance();
    }
    catch (java.lang.IllegalAccessException iae)
    {
      throw new TransformerConfigurationException(
        ""Transformation TransformerFactory can not be accessed!"", iae);
    }
    catch (java.lang.InstantiationException ie)
    {
      throw new TransformerConfigurationException(
        ""Not able to create Transformation TransformerFactory!"", ie);
    }
    catch (java.lang.ClassNotFoundException cnfe)
    {
      throw new TransformerConfigurationException(
        ""Transformation TransformerFactory not found!"", cnfe);
    }

    return (SAXTransformerFactory)tfactory;
  }",Obtain a new instance of a Stysheet TransformerFactory object as specified by m_processorName.,1,190
4126,"@Deprecated
    protected static Map<Class<?>, LocaleConverter> lookup(final Locale locale) {
        return LocaleConvertUtilsBean.getInstance().lookup(locale);
    }",Look up and return any registered map instance for the specified locale. For more details see LocaleConvertUtilsBean,1,47
4127,"public static boolean isExtensionsAvailable() {
        final Jenkins jenkins = Jenkins.getInstanceOrNull();
        return jenkins != null && jenkins.getInitLevel().compareTo(InitMilestone.EXTENSIONS_AUGMENTED) >= 0
                && !jenkins.isTerminating();
    }","During Jenkins start-up, before  InitMilestone#PLUGINS_STARTED the extensions lists will be empty and they are not guaranteed to be fully populated until after  InitMilestone#EXTENSIONS_AUGMENTED, similarly, during termination after  Jenkins#isTerminating() is set, it is no longer safe to access the extensions lists.",1,74
4128,"public static Method[] getDeclaredMethods(Class<?> clazz) {
		return getDeclaredMethods(clazz, true);
	}",Variant of  Class#getDeclaredMethods() that uses a local cache in order to avoid the JVM's SecurityManager check and new Method instances.,1,35
4129,"protected ColocatedConnectionDelegateFactory getImplementation(Reference reference)
      throws Exception
   {
      throw new NotYetImplementedException();
   }",Get the implementation from the reference.,1,32
4130,"public BTreeMapMaker createTreeMap(String name){
        return new BTreeMapMaker(name);
    }",Returns new builder for TreeMap with given name,1,26
4131,"protected boolean isDefaultValue(double value) {
        return Math.abs(value) < epsilon;
    }",Determine if this value is within epsilon of zero.,1,31
4132,"protected WebElement vaadinElement(String vaadinLocator) {
        return driver.findElement(vaadinLocator(vaadinLocator));
    }",Finds an element based on the part of a TB2 style locator following the :: (e.g.,1,30
4133,"public static SetParams toSetCommandNxXxArgument(SetOption option, SetParams params) {

		SetParams paramsToUse = params == null ? SetParams.setParams() : params;

		switch (option) {
			case SET_IF_PRESENT:
				return paramsToUse.xx();
			case SET_IF_ABSENT:
				return paramsToUse.nx();
			default:
				return paramsToUse;
		}
	}",Converts a given  SetOption to the according  SET command argument.   SetOption#SET_IF_PRESENT  XX  SetOption#SET_IF_ABSENT  NX  SetOption#UPSERT  byte[0],1,106
4134,"public static EObject load(IFile file, ResourceSet resourceSet) throws IOException {
		return load(URI.createFileURI(file.getLocation().toOSString()), resourceSet);
	}",Loads a model from an  org.eclipse.core.resources.IFile IFile in a given  ResourceSet.,1,52
4135,"public List<ShardRouting> getActiveShards() {
        return activeShards();
    }",Returns a  List of active shards,1,24
4136,"public BidiNodeContext createRootNodeContext(final CachedClassLookupMap<BidiNodeConfig> rootNodeLookup,
			final AbstractBidiNodeConfig nodeMapping, final Object source)
	{
		BidiNodeContext result = null;

		// configured nodeLookup for distance 1
		// final CachedClassLookupMap<NodeMapping> add = this.graphConfigImpl.getAllNodeMappings(1);
		final CachedClassLookupMap<BidiNodeConfig> add = this.graphConfigImpl.getAllNodeConfigs(1);

		// child nodes lookup is a merged result of current used node lookup and configured node lookup for next processing distance
		final CachedClassLookupMap<BidiNodeConfig> childNodesLookup = this.buildChildNodeLookup(rootNodeLookup, add);

		this.setRuntimeNodeMappings(0, rootNodeLookup);
		this.setRuntimeNodeMappings(1, childNodesLookup);

		if (log.isDebugEnabled())
		{
			log.debug(""Added distance based runtime node lookup: "" + 0 + "":"" + rootNodeLookup.hashCode());
			log.debug(""Added distance based runtime node lookup: "" + 1 + "":"" + childNodesLookup.hashCode());
		}


		// create result context
		result = new NodeContextImpl(this, null, nodeMapping, childNodesLookup, 0, 0, source);

		this.graphConfig.getContextListener().nodeContextCreated(result);

		return result;
	}",Creates an initial  BidiNodeContext (root node context),1,263
4137,"public static String getMimeType(Context mContext, Uri uri) {
        ContentResolver cR = mContext.getContentResolver();
        String mimeType = cR.getType(uri);
        if (mimeType == null) {
            mimeType = getMimeType(uri.toString());
        }
        return mimeType;
    }",Retrieves uri mime-type using ContentResolver,1,90
4138,"public final IDiagramEditorUI getEditor() {
		return getContextButtonPad().getEditor();
	}",Returns the  IDiagramEditorUI for which the context button is displayed.,1,27
4139,"public static JavaContainerBuilder from(TarImage tarImage) {
    return new JavaContainerBuilder(Jib.from(tarImage));
  }",Starts building the container from a tarball.,1,34
4140,"public ActionState createActionState(final Flow flow, final String name, final Action action) {
        return createActionState(flow, name, new Action[]{action});
    }",Create action state action state.,1,54
4141,"@Override
    public String toString() {
        return FeatureFormat.sharedFormat(this);
    }",Formats this feature in a tabular format.,1,27
4142,"public SOAPBody getBody() throws OMException {
        Iterator bodyIterator = this.getChildrenWithName(new QName(OMConstants.BODY_NAMESPACE_URI, OMConstants.BODY_LOCAL_NAME));
        SOAPBody soapBody = null;
        if (bodyIterator.hasNext()) {
            soapBody = (SOAPBody) bodyIterator.next();
        }

        return soapBody;
    }",Returns the SOAPBody object associated with this SOAPEnvelope object.,1,93
4143,"public static String substring(String str, int start) {
        if (str == null) {
            return null;
        }

        // handle negatives, which means last n characters
        if (start < 0) {
            start = str.length() + start; // remember start is negative
        }

        if (start < 0) {
            start = 0;
        }
        if (start > str.length()) {
            return EMPTY;
        }

        return str.substring(start);
    }",Gets a substring from the specified String avoiding exceptions. A negative start position can be used to start  n characters from the end of the String. A  null String will return  null.,1,147
4144,"private static Number toNumber(String s) {
		final Integer i = toInt(s);
		if (i != null) {
			return i;
		} else {
			final Double d = toDouble(s);
			return (d != null) ? d : toBigDecimal(s);
		}
	}",Converts a String to a Number according to these rules:  s is Integer -&gt; toInt(s) s is Double -&gt; toDouble(s) s is BigDecimal -&gt; toBigDecimal(s) otherwise null,1,102
4145,"protected int init(String[] args) throws IOException {
    // no args should print the help message
    if (0 == args.length) {
      printCredShellUsage();
      ToolRunner.printGenericCommandUsage(System.err);
      return 1;
    }

    for (int i = 0; i < args.length; i++) { // parse command line
      if (args[i].equals(""create"")) {
        String alias = args[++i];
        command = new CreateCommand(alias);
        if (alias.equals(""-help"")) {
          printCredShellUsage();
          return 0;
        }
      } else if (args[i].equals(""delete"")) {
        String alias = args[++i];
        command = new DeleteCommand(alias);
        if (alias.equals(""-help"")) {
          printCredShellUsage();
          return 0;
        }
      } else if (args[i].equals(""list"")) {
        command = new ListCommand();
      } else if (args[i].equals(""-provider"")) {
        userSuppliedProvider = true;
        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, 
            args[++i]);
      } else if (args[i].equals(""-i"") || (args[i].equals(""-interactive""))) {
        interactive = true;
      } else if (args[i].equals(""-v"") || (args[i].equals(""-value""))) {
        value = args[++i];
      } else if (args[i].equals(""-help"")) {
        printCredShellUsage();
        return 0;
      } else {
        printCredShellUsage();
        ToolRunner.printGenericCommandUsage(System.err);
        return 1;
      }
    }
    return 0;
  }",Parse the command line arguments and initialize the data  % hadoop credential create alias [-provider providerPath] % hadoop credential list [-provider providerPath] % hadoop credential delete alias [-provider providerPath] [-i],1,526
4146,"public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {
		return new ConnectedStreams<T, R>(environment, this, dataStream);
	}",Creates a new  ConnectedStreams by connecting  DataStream outputs of (possible) different types with each other.,1,52
4147,"public RealmResults<E> findAllAsync(String subscriptionName, long timeToLive, TimeUnit timeUnit, boolean update) {
        realm.checkIfValid();
        realm.checkIfPartialRealm();
        if (osList != null) {
            throw new IllegalStateException(""Cannot create subscriptions for queries based on a 'RealmList'"");
        }
        if (Util.isEmptyString(subscriptionName)) {
            throw new IllegalArgumentException(""Non-empty 'subscriptionName' required."");
        }
        if (timeToLive < 0) {
            throw new IllegalArgumentException(""Negative values for 'timeToLive' are not allowed: "" + timeToLive);
        }
        //noinspection ConstantConditions
        if (timeUnit == null) {
            throw new IllegalArgumentException(""Non-null 'timeUnit' required."");
        }
        realm.sharedRealm.capabilities.checkCanDeliverNotification(ASYNC_QUERY_WRONG_THREAD_MESSAGE);
        long timeToLiveMs = timeUnit.toMillis(timeToLive);
        SubscriptionAction action = (update) ? SubscriptionAction.update(subscriptionName, timeToLiveMs) : SubscriptionAction.create(subscriptionName, timeToLiveMs);
        return createRealmResults(query, queryDescriptors, false, action);
    }",Finds all objects that fulfil the query condition(s).,1,258
4148,"public Highlight getHighlightByTouchPoint(float x, float y) {

        if (mDataNotSet) {
            Log.e(LOG_TAG, ""Can't select by touch. No data set."");
            return null;
        }

        // create an array of the touch-point
        float[] pts = new float[2];
        pts[0] = x;
        pts[1] = y;

        Matrix tmp = new Matrix();

        // invert all matrixes to convert back to the original value
        mMatrixOffset.invert(tmp);
        tmp.mapPoints(pts);

        mMatrixTouch.invert(tmp);
        tmp.mapPoints(pts);

        mMatrixValueToPx.invert(tmp);
        tmp.mapPoints(pts);

        double xTouchVal = pts[0];
        double yTouchVal = pts[1];
        double base = Math.floor(xTouchVal);

        double touchOffset = mDeltaX * 0.025;
        // Log.i(LOG_TAG, ""touchindex x: "" + xTouchVal + "", touchindex y: "" +
        // yTouchVal + "", offset: ""
        // + touchOffset);
        // Toast.makeText(getContext(), ""touchindex x: "" + xTouchVal +
        // "", touchindex y: "" + yTouchVal + "", offset: "" + touchOffset,
        // Toast.LENGTH_SHORT).show();

        // touch out of chart
        if (xTouchVal < -touchOffset || xTouchVal > mDeltaX + touchOffset)
            return null;
        
        if(this instanceof CandleStickChart) base -= 0.5;

        if (base < 0)
            base = 0;
        if (base >= mDeltaX)
            base = mDeltaX - 1;

        int xIndex = (int) base;

        int dataSetIndex = 0; // index of the DataSet inside the ChartData
                              // object

        // check if we are more than half of a x-value or not
        if (xTouchVal - base > 0.5) {
            xIndex = (int) base + 1;
        }

        ArrayList<SelInfo> valsAtIndex = getYValsAtIndex(xIndex);

        dataSetIndex = getClosestDataSetIndex(valsAtIndex, (float) yTouchVal);

        if (dataSetIndex == -1)
            return null;

        // Toast.makeText(getContext(), ""xindex: "" + xIndex + "", dataSetIndex: ""
        // + dataSetIndex,
        // Toast.LENGTH_SHORT).show();

        return new Highlight(xIndex, dataSetIndex);
    }","Returns the Highlight object (contains x-index and DataSet index) of the selected value at the given touch point inside the Line-, Scatter-, or",1,498
4149,"public RuleDescr query( PackageDescrBuilder pkg ) throws RecognitionException {
        QueryDescrBuilder query = null;
        try {
            query = helper.start( pkg,
                                  QueryDescrBuilder.class,
                                  null );

            // 'query'
            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.QUERY,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

            if ( helper.validateIdentifierKey( DroolsSoftKeywords.WHEN ) ||
                    helper.validateIdentifierKey( DroolsSoftKeywords.THEN ) ||
                    helper.validateIdentifierKey( DroolsSoftKeywords.END ) ) {
                failMissingTokenException();
                return null; // in case it is backtracking
            }

            String name = stringId();
            if ( state.backtracking == 0 ) query.name( name );
            if ( state.failed ) return null;

            if ( state.backtracking == 0 && input.LA( 1 ) != DRLLexer.EOF ) {
                helper.emit( Location.LOCATION_RULE_HEADER );
            }

            if ( speculateParameters( true ) ) {
                // parameters
                parameters( query,
                            true );
                if ( state.failed ) return null;
            } else if ( speculateParameters( false ) ) {
                // parameters
                parameters( query,
                            false );
                if ( state.failed ) return null;
            }

            while ( input.LA( 1 ) == DRLLexer.AT ) {
                // annotation*
                annotation( query );
                if ( state.failed ) return null;
            }

            if ( state.backtracking == 0 && input.LA( 1 ) != DRLLexer.EOF ) {
                helper.emit( Location.LOCATION_LHS_BEGIN_OF_CONDITION );
            }
            lhsExpression( query != null ? query.lhs() : null );

            match( input,
                   DRLLexer.ID,
                   DroolsSoftKeywords.END,
                   null,
                   DroolsEditorType.KEYWORD );
            if ( state.failed ) return null;

        } catch ( RecognitionException re ) {
            reportError( re );
        } finally {
            helper.end( QueryDescrBuilder.class,
                        query );
        }
        return (query != null) ? query.getDescr() : null;
    }",query := QUERY stringId parameters? annotation lhsExpression END,1,656
4150,"private int parseNextToken(boolean startofrules) throws ParseException
    {

        if (m_inRange_) {
            // We are not done processing a range.  Continue it.
            return processNextCodePointInRange();
        } else if (m_isStarred_) {
            // We are not done processing a starred token.  Continue it.
            return processNextTokenInTheStarredList();
        }

        // Get the next token.
        int nextOffset = parseNextTokenInternal(startofrules);

        // If the next token is starred and/or in range, we need to handle it here.
        if (m_inRange_) {
            // A new range has started.
            // Check whether it is a chain of ranges with more than one hyphen.
            if (m_lastRangeCp_ > 0 && m_lastRangeCp_ == m_previousCp_) {
                throw new ParseException(""Chained range syntax"", m_current_);
            }
            
            // The current token is the first character of the second code point of the range.
            // Process just that, and then proceed with the star.
            m_lastRangeCp_ = m_source_.codePointAt(this.m_parsedToken_.m_charsOffset_);
            if (m_lastRangeCp_ <= m_previousCp_) {
                throw new ParseException(""Invalid range"", m_current_);
            }

            // Set current range code point to process the range loop
            m_currentRangeCp_ = m_previousCp_ + 1;

            // Set current starred char index to continue processing the starred
            // expression after the range is done.
            m_currentStarredCharIndex_ = m_parsedToken_.m_charsOffset_
                + Character.charCount(m_lastRangeCp_);
            m_lastStarredCharIndex_ = m_parsedToken_.m_charsOffset_ + m_parsedToken_.m_charsLen_ - 1;

            return processNextCodePointInRange();
        } else if (m_isStarred_) {
            // We define two indices m_currentStarredCharIndex_ and m_lastStarredCharIndex_ so that
            // [m_currentStarredCharIndex_ .. m_lastStarredCharIndex_], both inclusive, need to be
            // separated into several tokens and returned.
            m_currentStarredCharIndex_ = m_parsedToken_.m_charsOffset_;
            m_lastStarredCharIndex_ =  m_parsedToken_.m_charsOffset_ + m_parsedToken_.m_charsLen_ - 1;

            return processNextTokenInTheStarredList();
        }
        return nextOffset;
    }",Parses the next token.,1,347
4151,"private String replaceExtension(
            final Artifact artifact,
            final String newExtension,
            final String qualifier)
    {
        String path = this.localRepository.pathOf(artifact);
        File artifactFile = new File(this.localRepository.getBasedir(), path);
        if (!artifactFile.exists())
        {
            this.getLog().error(""Bootstrap artifact does not exist: "" + path);
            return null;
        }
        final String version = artifact.getVersion() != null ? artifact.getVersion().trim() : """";
        int versionIndex = path.lastIndexOf(artifact.getVersion());
        final String extension = path.substring(
                versionIndex + version.length() + 1,
                path.length());
        int extensionIndex = path.lastIndexOf(extension);
        if (StringUtils.isNotBlank(qualifier))
        {
            path = path.substring(0, extensionIndex-1) + qualifier + '.' + extension;
            File qualifiedFile = new File(this.localRepository.getBasedir(), path);
            if (!qualifiedFile.exists())
            {
                this.getLog().warn(""Bootstrap qualified artifact does not exist: "" + path);
                return null;
            }
        }
        if (!newExtension.equals(extension))
        {
            path = path.substring(0, extensionIndex) + newExtension;
        }
        return path;
    }",Retrieves the repository artifact file name with extension removed and qualifier added.,1,392
4152,"public static CharSequence get(CharSequence self, Collection indices) {
        StringBuffer answer = new StringBuffer();
        for (Iterator iter = indices.iterator(); iter.hasNext();) {
            Object value = iter.next();
            if (value instanceof Range) {
                answer.append(get(self, (Range) value));
            }
            else if (value instanceof Collection) {
                answer.append(get(self, (Collection) value));
            }
            else {
                int idx = InvokerHelper.asInt(value);
                answer.append(get(self, idx));
            }
        }
        return answer.toString();
    }",Allows a List to be used as the indices to be used on a CharSequence,1,201
4153,"public static <T, U extends T, V extends T> T findResult(Map<?, ?> self, U defaultResult, Closure<V> closure) {
        T result = findResult(self, closure);
        if (result == null) return defaultResult;
        return result;
    }","Returns the first non-null closure result found by passing each map entry to the closure, otherwise the defaultResult is returned.",1,94
4154,"@Override
    @SuppressWarnings(""unchecked"")
    public Object clone() {
        return new ConjunctionSequence(name, (ArrayList<Term>) cloneList(components), (ArrayList<Variable>) cloneList(openVariables), complexity);
    }",Clone an object,1,64
4155,"protected String encodeTicketId(final String ticketId)  {
        if (this.cipherExecutor == null) {
            logger.trace(""Ticket encryption is not enabled. Falling back to default behavior"");
            return ticketId;
        }
        if (StringUtils.isBlank(ticketId)) {
            return ticketId;
        }

        return CompressionUtils.sha512Hex(ticketId);
    }",Encode ticket id into a SHA-512.,1,89
4156,"public Firmware getLatestFirmware(ThingTypeUID thingTypeUID) {
        return getLatestFirmware(thingTypeUID, localeProvider.getLocale());
    }",Returns the latest firmware for the given thing type UID using the locale provided by the  LocaleProvider.,1,32
4157,"public Timer newTimer(Class<?> klass,
                                String name) {
        return newTimer(klass, name, null, TimeUnit.MILLISECONDS, TimeUnit.SECONDS);
    }","Creates a new  Timer and registers it under the given class and name, measuring elapsed time in milliseconds and invocations per second.",1,50
4158,"public String getHtmlImports() {
        String path = context.getRequest().getContextPath();

        return StringUtils.replace(HTML_IMPORTS, ""$"", path);
    }",Return the HTML head import statements for the CSS stylesheet (click/control.css) and JavaScript (click/control.js) files.,1,51
4159,"public Javadoc getJavadoc() {
		return this.optionalDocComment;
	}",Returns the doc comment node.,1,21
4160,"public TrackSelectionParameters build() {
      return new TrackSelectionParameters(
          // Audio
          preferredAudioLanguage,
          // Text
          preferredTextLanguage,
          preferredRoleFlags,
          selectUndeterminedTextLanguage,
          disabledTextTrackSelectionFlags);
    }",Sets a bitmask of selection flags that are disabled for text track selections.,1,48
4161,"public Collection<SecurityConfig> getAttributes(Method method) {
        ArrayList<SecurityConfig> attributes = new ArrayList<SecurityConfig>();

        if (AnnotationUtils.getAnnotation(method, DenyAll.class) != null) {
            attributes.add(Jsr250SecurityConfig.DENY_ALL_ATTRIBUTE);

            return attributes;
        }

        if (AnnotationUtils.getAnnotation(method, PermitAll.class) != null) {
            attributes.add(Jsr250SecurityConfig.PERMIT_ALL_ATTRIBUTE);

            return attributes;
        }

        RolesAllowed rolesAllowed = AnnotationUtils.getAnnotation(method, RolesAllowed.class);
        
        if (rolesAllowed != null) {
            for (String role : rolesAllowed.value()) {
                attributes.add(new Jsr250SecurityConfig(role));
            }

            return attributes;
        }

        // Now check the class-level attributes:
        if (method.getDeclaringClass().getAnnotation(DenyAll.class) != null) {
            attributes.add(Jsr250SecurityConfig.DENY_ALL_ATTRIBUTE);

            return attributes;
        }

        if (method.getDeclaringClass().getAnnotation(PermitAll.class) != null) {
            attributes.add(Jsr250SecurityConfig.PERMIT_ALL_ATTRIBUTE);

            return attributes;
        }

        rolesAllowed = method.getDeclaringClass().getAnnotation(RolesAllowed.class);

        if (rolesAllowed != null) {
            for (String role : rolesAllowed.value()) {
                attributes.add(new Jsr250SecurityConfig(role));
            }
        }

        return attributes;
    }","Get the attributes for a given target method, acording to JSR-250 precedence rules.",1,392
4162,"private String findAvailableInstructorGoogleIdForCourse(String courseId){
        
        if(tempCourseIdToInstructorGoogleIdMap.get(courseId) != null){
            return tempCourseIdToInstructorGoogleIdMap.get(courseId);
        }
        
        String googleId = """";
        
        List<InstructorAttributes> instructorList = logic.getInstructorsForCourse(courseId);
        
        if(instructorList == null || instructorList.isEmpty()){
            return googleId;
        }
        
        for(InstructorAttributes instructor : instructorList){
          
            if(instructor.googleId != null){
               googleId = instructor.googleId;
               break;
            }            
        }
        
        tempCourseIdToInstructorGoogleIdMap.put(courseId, googleId);
        
        return googleId; 
    }",This method loops through all instructors for the given course until a verified (Corresponding Account Exists) and registered Instructor is found.,1,188
4163,"@Deprecated
    public String getInitialDescription() {
        LOG.warn(""Flyway.getInitialDescription() has been deprecated. Use getInitDescription() instead. Will be removed in Flyway 3.0."");
        return initDescription;
    }",Retrieves the description to tag an existing schema with when executing init.,1,33
4164,"@Override
    public Collection<Locale> getLanguages() {
        return (language != null) ? Collections.singleton(language) : Collections.emptySet();
    }",Returns  #language in a singleton set or an empty set.,1,49
4165,"public Iterable<StatusListener> getListeners() {
        return listeners;
    }",Returns a thread safe Iterable for the StatusListener.,1,22
4166,"RealmAsyncTask getDefaultPermissions(PermissionsCallback callback) {
        checkIfValid();
        checkCallbackNotNull(callback);
        return null;
        // return addTask(new GetDefaultPermissionsAsyncTask(this, callback));
    }",NOTE: Moved out of the public API until we know for sure how this is going to work.,1,36
4167,"static public MojoModel load(MojoReader mojoReader) throws IOException {
        Map<String, Object> info = parseModelInfo(mojoReader);
        String[] columns = (String[]) info.get(""[columns]"");
        String[][] domains = parseModelDomains(mojoReader, columns.length, info.get(""[domains]""));
        String algo = (String) info.get(""algorithm"");
        if (algo == null)
            throw new IOException(""Model file does not contain information about the model's algorithm."");

        // Create and return a subclass instance
        switch (algo) {
            case ""Distributed Random Forest"":
                return new DrfModel(mojoReader, info, columns, domains);
            case ""Gradient Boosting Method"":
                return new GbmModel(mojoReader, info, columns, domains);
            default:
                throw new IOException(""Unsupported algorithm "" + algo + "" for raw models."");
        }
    }",Advanced way of constructing Mojo models by supplying a custom mojoReader.,1,243
4168,"public final FloatConstantOperand asFloatConstant() {
    return (FloatConstantOperand) this;
  }",Cast to an  FloatConstantOperand.,1,25
4169,"public Project reload() {
    return resourceManager.get(projectId());
  }",Fetches the project's latest information.,1,26
4170,"public static ProtocolVersion getVersion(final HttpParams params) { 
        if (params == null) {
            throw new IllegalArgumentException(""HTTP parameters may not be null"");
        }
        Object param = params.getParameter(PROTOCOL_VERSION);
        if (param == null) {
            return HttpVersion.HTTP_1_1;
        }
        return (ProtocolVersion)param;
    }",Returns  ProtocolVersion protocol version to be used per default.,1,100
4171,"public Asset remove(Asset asset) throws SystemException {
		return super.remove(asset);
	}",Removes the asset from the database.,1,31
4172,"public Set<String> getLoadedDataNames() {
        return Collections.unmodifiableSet(loaded);
    }",Get an unmodifiable view of the set of data file names that have been loaded.,1,27
4173,"public Iterable<DrawFillImageElement> getFillImages() {
        if (mFillImages != null) {
            return mFillImages.values();
        } else {
            return new ArrayList<DrawFillImageElement>();
        }
    }",Returns an iterator for all DrawFillImageElement elements.,1,63
4174,"protected String formatLabel(double value, boolean isValueX) {
		int i = isValueX ? 1 : 0;
		if (numberformatter[i] == null) {
			numberformatter[i] = NumberFormat.getNumberInstance();
			double highestvalue = isValueX ? getMaxX(false) : getMaxY();
			double lowestvalue = isValueX ? getMinX(false) : getMinY();
			if (highestvalue - lowestvalue < 0.1) {
				numberformatter[i].setMaximumFractionDigits(6);
			} else if (highestvalue - lowestvalue < 1) {
				numberformatter[i].setMaximumFractionDigits(4);
			} else if (highestvalue - lowestvalue < 20) {
				numberformatter[i].setMaximumFractionDigits(3);
			} else if (highestvalue - lowestvalue < 100) {
				numberformatter[i].setMaximumFractionDigits(1);
			} else {
				numberformatter[i].setMaximumFractionDigits(0);
			}
		}
		return numberformatter[i].format(value);
	}",formats the label can be overwritten,1,284
4175,"public static String formatISO(long millis) {
        return format(millis, ""H:mm:ss.SSS"");
    }",Get the time gap as a string. The format used is ISO8601-like: H:m:s.S.,1,32
4176,"public String toString() {
        if (iToString == null) {
            Class cls = Enum.getEnumClass(getClass());
            String shortName = ClassUtils.getShortClassName(cls);
            iToString = shortName + ""["" + getName() + ""="" + getValue() + ""]"";
        }
        return iToString;
    }",Human readable description of this Enum item.,1,106
4177,"public static CompletableFuture<AsyncConnection> createAsyncConnection(Configuration conf) {
    User user;
    try {
      user = UserProvider.instantiate(conf).getCurrent();
    } catch (IOException e) {
      CompletableFuture<AsyncConnection> future = new CompletableFuture<>();
      future.completeExceptionally(e);
      return future;
    }
    return createAsyncConnection(conf, user);
  }","Call  #createAsyncConnection(Configuration, User) using the given  conf and a",1,111
4178,"public List<WorkflowInstance> listRuns(String workflowId, Map<String, String> conditions) {

		try {
			return pq.getWFInstanceID(workflowId);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}",allowable conditions to be determined and documented here.,1,80
4179,"static Gen<Character> choose(char min, char max) {
        if (min == max) {
            return ignored -> min;
        } else {
            return random -> (char) (int) Gen.choose((int) min, (int) max).apply(random);
        }
    }","Chooses a char between min and max, bounds inclusive and chars distributed according to the underlying random number generator. Note: min and max are internally swapped if min &gt; max.",1,99
4180,"public TripPattern getPattern() {
        if (boarding)
            return ((PatternStopVertex) tov).getTripPattern();
        else
            return ((PatternStopVertex) fromv).getTripPattern();
    }",Find the TripPattern this edge is boarding or alighting from.,1,55
4181,"public int getParallelism() {
		return this.parallelism;
	}",Returns the parallelism of this operator.,1,21
4182,"@Override
    @SuppressWarnings(""unchecked"")
    public Object clone() {
        return new EquivalenceWhen(name, (ArrayList<Term>) cloneList(components), (ArrayList<Variable>) cloneList(openVariables), complexity);
    }",Clone an object,1,64
4183,"public Future<Long> mine(final Block block) {
        return executor.submit(new Callable<Long>() {
            @Override
            public Long call() throws Exception {
                long nonce = getEthashAlgo().mine(getFullSize(), getFullDataset(),
                        sha3(block.getHeader().getEncodedWithoutNonce()),
                        ByteUtil.byteArrayToLong(block.getHeader().getDifficulty()));
                Pair<byte[], byte[]> pair = hashimotoLight(block.getHeader(), nonce);
                block.setNonce(longToBytes(nonce));
                block.setMixHash(pair.getLeft());
                return nonce;
            }
        });
    }",Mines the nonce for the specified Block with difficulty BlockHeader.getDifficulty(),1,182
4184,"public KLayouterInfo getLayouterInfoForLayouterName(
			String layouterProviderName) {
		for (KLayouterInfo layouterInfo : LayoutProviders.getInstance()
				.getEnabledLayouterInfos()) {
			if (layouterInfo.getLayouterName().equals(layouterProviderName)) {
				return layouterInfo;
			}
		}
		return KimlLayoutGraphFactory.eINSTANCE.createKLayouterInfo();
	}",Returns the  KLayouterInfo for the given layout provider.,1,85
4185,"public Domain getDomain() {
		return domain;
	}",Returns the  Domain that was previously injected.,1,19
4186,"public static CacheWrite withSelectorAndMetadata(
      Blob layerBlob, DescriptorDigest selector, Blob metadataBlob) {
    return new DefaultCacheWrite(layerBlob, selector, metadataBlob);
  }","Constructs a  CacheWrite with a layer  Blob, an additional selector digest, and a metadata  Blob.",1,47
4187,"public ObjectReference getForwardedReference(ObjectReference object) 
  throws InlinePragma {
    if (object.isNull()) return object;
    if (SS.hi && Space.isInSpace(SS.SS0, object)) {
      return SS.copySpace0.traceObject(this, object);
    } else if (!SS.hi && Space.isInSpace(SS.SS1, object)) {
      return SS.copySpace1.traceObject(this, object);
    }
    return object;
  }","If the referenced object has moved, return the new location.",1,136
4188,"public synchronized PropertyStore build() {
		
		// Reused the last one if we haven't change this builder.
		if (propertyStore == null)
			propertyStore = new PropertyStore(groups);
		
		PropertyStore ps = CACHE.get(propertyStore.hashCode());
		if (ps == null)
			CACHE.put(propertyStore.hashCode(), propertyStore);
		else if (! ps.equals(propertyStore)) 
			throw new RuntimeException(""Property store mismatch!  This shouldn't happen."");
		else
			propertyStore = ps;
		
		return propertyStore;
	}",Creates a new  PropertyStore based on the values in this builder.,1,143
4189,"public SampleResult sample()
    {
        try
        {
            SampleResult res= sample(getUrl(), getMethod(), false, 0);
            res.setSampleLabel(getName());
            return res;
        }
        catch (MalformedURLException e)
        {
            return errorResult(e, getName(), 0);
        }
    }","Perform a sample, and return the results",1,97
4190,"private String stripPrefixIfPresent(String key) {
    if (key.startsWith(mBucketPrefix)) {
      return key.substring(mBucketPrefix.length());
    }
    if (key.startsWith(PATH_SEPARATOR)) {
      return key.substring(PATH_SEPARATOR.length());
    }
    LOG.warn(""Attempted to strip key with invalid prefix: "" + key);
    return key;
  }",Strips the s3 bucket prefix or the preceding path separator from the key if it is present.,1,101
4191,"public ObjectArrayAssert onProperty(String propertyName) {
    isNotNull();
    if (actual.length == 0) return new ObjectArrayAssert(new Object[0]);
    return new ObjectArrayAssert(propertyValues(propertyName, list(actual)).toArray());
  }",Creates a new instance of  ObjectArrayAssert whose target array contains the values of the given property name from the elements of this  ObjectArrayAssert's array.,1,75
4192,"private int findDuplicateFromLine(
        final int aI, final int aJ, final int aILine)
    {
        // Using something more advanced like Boyer-Moore might be a
        // good idea...

        final long checkSum = mLineBlockChecksums[aI][aILine];

        final int iBlockCount = mLineBlockChecksums[aI].length;
        final int jBlockCount = mLineBlockChecksums[aJ].length;

        for (int jBlock = 0; jBlock < jBlockCount; jBlock++) {

            if (aI == aJ && aILine >= jBlock) {
                continue;
            }

            if (mLineBlockChecksums[aJ][jBlock] != checkSum) {
                continue;
            }

            int duplicateLines = verifiyDuplicateLines(aI, aJ, aILine, jBlock);
            if (duplicateLines >= mMin) {
                reportDuplicate(duplicateLines, aILine, mFiles[aJ], jBlock);

                // skip to end of equivalent section
                return aILine + duplicateLines;
            }
        }
        return aILine;
    }",Find and report a duplicate of the code starting from line aILine in file aI in the file aJ.,1,265
4193,"public Duration getDuration() {
        long durMillis = getDurationMillis();
        if (durMillis == 0) {
            return Duration.ZERO;
        } else {
            return new Duration(durMillis);
        }
    }",Gets a Duration holding the millisecond duration of this time interval.,1,68
4194,"protected IllegalPathException cannotReadDirectoryException(Path path) {
    return new IllegalPathException(format(""Cannot read path '%s' since it's a directory"", path));
  }","Returns an  IllegalPathException explaining that a  FileSystem#read(FileConnectorConfig, Message, String, boolean) operation was attempted on a  path pointing to a directory",1,35
4195,"public String getImplClass() {
        return implClass;
    }",Returns the java class name for the POJO this is describing.,1,19
4196,"public static Function<InternalEvent, InternalEvent> updateEventForStreaming(final StreamingManager streamingManager) {
    return event -> {
      TypedValue payload = event.getMessage().getPayload();
      if (payload.getValue() instanceof CursorProvider) {
        Message message = Message.builder(event.getMessage())
            .payload(updateTypedValueForStreaming(payload, event, streamingManager))
            .build();
        return InternalEvent.builder(event).message(message).build();
      }
      return event;
    };
  }",Provides a function that updates the payload value of an  InternalEvent by replacing it with a  CursorProvider.,1,145
4197,"public int getMessageCount() throws RpcClientFailedException {
		try {
			sendRequest(""<get_message_count/>\n"");
			return MessageCountParser.getSeqno(receiveReply());
		}
		catch (IOException e) {
			throw new ConnectionFailedException(""Connection failed in getMessageCount()"", e);
		}
	}",Performs   RPC towards BOINC client,1,79
4198,"public default <V> UnaryOperator<BiFunction<String, V, Property<V>>> getElementSetProperty(final Strategy.Context<? extends StrategyWrappedElement> ctx) {
        return UnaryOperator.identity();
    }","Construct a  java.util.function.BiFunction that enhances the features of  com.tinkerpop.gremlin.structure.Element#setProperty(String, Object).",1,58
4199,"public static QueryTemplate queryTemplate(Criterion criterion, TagData tagData) {
            return new QueryTemplate().join(Join.inner(Metadata.TABLE,
                    Task.ID.eq(Metadata.TASK))).where(tagEqIgnoreCase(tagData.getValue(TagData.NAME), criterion));
        }",Return SQL selector query for getting tasks with a given tagData,1,76
4200,"public static SpinLock allocateSpinLock() {
		long address = allocateAlignedMemory(UnsafeAdapter.LONG_SIZE);
		putLong(address, NO_LOCK);
		return new MemSpinLock(address);
	}",Allocates an initialized and initially unlocked memory based spin lock,1,51
4201,"public Proxy setHost( String host )
    {
        return new Proxy( type, host, port, auth );
    }",Sets the host of the proxy.,1,41
4202,"public String buildUnsafe() {
    return new StringBuilder(host) //
        .append(""/"") //
        .append(PREFIX_UNSAFE) //
        .append(""/"") //
        .append(assembleConfig()) //
        .append(target) //
        .toString();
  }",Build an unsafe version of the URL.,1,83
4203,"public boolean loadProjectPreferences(ProjectPreferences pp) {
		IEclipsePreferences pref = getPreferences();
		
		if (pref == null)return false;
		int version = pref.getInt(PrefConstants.frameworkVersion, 0);
		if (version == 0)return false;

		pp.setOverride(pref.getBoolean(PrefConstants.override, ProjectPreferences.DefaultOverride));
		pp.setSuspend(pref.getBoolean(PrefConstants.suspend, ProjectPreferences.DefaultSuspend));
		
		Validator[] vals = ValManager.getDefault().getValidators2(_project);
		loadPreferences(vals, pref);
		pp.setValidators(vals);
		return true;
	}",Update the project preferences from the preference store.,1,173
4204,"public String toString() {
        return (""WSUsernameTokenPrincipalImpl:  "" + name);
    }",Return a string representation of this WSUsernameTokenPrincipalImpl.,1,27
4205,"public boolean matches( Method method, Class targetClass) {
        return ( (method.getAnnotation( Implies.class ) != null ) ||
                 (method.getAnnotation( HasRole.class ) != null ) );
    }","Returns true if the method has a JSecurity HasRole or Implies annotation, false otherwise.",1,72
4206,"public Set entrySet() {
		return Collections.unmodifiableSet( entityToCopyMap.entrySet() );
	}",Returns an unmodifiable set view of the entity-to-copy mappings contained in this EventCache.,1,30
4207,"@NotNull
  @Override
  public ExitCode build(CompileContext context,
                        ModuleChunk chunk,
                        DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder,
                        OutputConsumer outputConsumer) throws ProjectBuildException {
    JpsAndroidGradleModuleExtension extension = AndroidGradleJps.getFirstExtension(chunk);
    if (extension == null) {
      if (LOG.isDebugEnabled()) {
        String format = ""Project '%1$s' does not have the '%2$s' facet. Nothing done."";
        LOG.info(String.format(format, getProjectName(context), AndroidGradleFacet.NAME));
      }
      return ExitCode.NOTHING_DONE;
    }

    String[] buildTasks = getBuildTasks(context, chunk);
    if (buildTasks.length == 0) {
      String format = ""No build tasks found for project '%1$s'. Nothing done."";
      LOG.info(String.format(format, getProjectName(context)));
      return ExitCode.NOTHING_DONE;
    }

    String msg = ""Gradle build using tasks: "" + Arrays.toString(buildTasks);
    context.processMessage(new ProgressMessage(msg));
    LOG.info(msg);

    ensureTempDirExists();

    BuilderExecutionSettings executionSettings;
    try {
      executionSettings = new BuilderExecutionSettings();
    } catch (RuntimeException e) {
      throw new ProjectBuildException(e);
    }

    LOG.info(""Using execution settings: "" + executionSettings);

    String androidHome = null;
    if (!isAndroidHomeKnown(executionSettings)) {
      androidHome = getAndroidHomeFromModuleSdk(context, chunk);
    }

    String format = ""About to build project '%1$s' located at %2$s"";
    LOG.info(String.format(format, getProjectName(context), executionSettings.getProjectDir().getAbsolutePath()));

    return doBuild(context, buildTasks, executionSettings, androidHome);
  }",Builds a project using Gradle.,1,444
4208,"public static AspectWerkzDefinition loadDefinitionAsResource() {
        InputStream stream = getDefinitionInputStream();
        if (stream == null) throw new RuntimeException(""either you have to specify an XML definition file using the -Daspectwerkz.definition.file=... option or you have to have the XML definition file <aspectwerkz.xml> somewhere on the classpath"");
        return AspectWerkzDefinition.loadDefinitionAsStream(stream);
    }",Loads a definition from disk.,1,62
4209,"public Flash toggleFlash() {
        Flash flash = mCameraController.getFlash();
        switch (flash) {
            case OFF:
                setFlash(Flash.ON);
                break;

            case ON:
                setFlash(Flash.AUTO);
                break;

            case AUTO:
            case TORCH:
                setFlash(Flash.OFF);
                break;
        }

        return mCameraController.getFlash();
    }","Toggles the flash mode between  Flash#OFF,  Flash#ON and  Flash#AUTO, in this order.",1,115
4210,"protected <T extends Dom> T copy(T parent) {
        return (T) new Dom(this, parent);
    }",Returns a copy of itself providing the parent for the new copy.,1,42
4211,"protected boolean persistLong(long value) {
        if (!shouldPersist()) {
            return false;
        }

        if (value == getPersistedLong(~value)) {
            // It's already there, so the same as persisting
            return true;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            dataStore.putLong(mKey, value);
        } else {
            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putLong(mKey, value);
            tryCommit(editor);
        }
        return true;
    }",Attempts to persist a  Long if this Preference is persistent.,1,158
4212,"protected Optional<String> getCustomExpression(String customExpressionId) {
		Optional<String> optionalCustomExpression = this.getDescription().getCustomExpressions().stream().filter(eefCustomExpression -> {
			return customExpressionId != null && customExpressionId.equals(eefCustomExpression.getIdentifier());
		}).map(EEFCustomExpression::getCustomExpression).findFirst();

		return optionalCustomExpression;
	}",Get the custom expression with the given id.,1,101
4213,"public int importMessages() {
        Logger.log(CLASS_TAG,
                ""importMessages(): import messages from messages app"");
        if (Util.isKitKat()) {
            return importMessageKitKat();
        }
        Uri uriSms = Uri.parse(SMS_CONTENT_INBOX);
        uriSms = uriSms.buildUpon().appendQueryParameter(""LIMIT"", ""10"").build();
        String[] projection = {
                ""_id"", ""address"", ""date"", ""body""
        };

        Cursor c = context.getContentResolver().query(uriSms, projection, null,
                null, ""date DESC"");

        if (c != null && c.getCount() > 0) {
            try {
                if (c.moveToFirst()) {
                    List<Message> messages = new ArrayList<>();
                    do {
                        Message message = new Message();

                        final long messageDate = c.getLong(c
                                .getColumnIndex(""date""));
                        message.setDate(new Date(messageDate));

                        message.setPhoneNumber(c.getString(c
                                .getColumnIndex(""address"")));
                        message.setBody(c.getString(c.getColumnIndex(""body"")));
                        message.setUuid(getUuid());
                        messages.add(message);
                    } while (c.moveToNext());
                    saveMessage(messages);
                }
            } finally {
                if (c != null) {
                    c.close();
                }
            }
            return 0;

        } else {
            return 1;
        }

    }",TODO:// refactor so this method return boolean  Import messages from the messages app's table and puts them in SMSSync's outbox table.,1,438
4214,"public static LOProject chainOfProjects(LogicalPlan plan) {

        LOProject topProject = null;

        if (plan == null) {
            return null;
        }

        List<LogicalOperator> leaves = plan.getLeaves();

        if (leaves == null) {
            return null;
        }

        if (leaves.size() > 1) {
            return null;
        }

        LogicalOperator node = leaves.get(0);

        while (true) {
            if (node == null) {
                //a node cannot be null
                return null;
            }

            if (node instanceof LOProject) {
                topProject = (LOProject) node;
            } else if (node instanceof LOCast) {
                // continue
            } else {
                // not a projection or a cast return null
                return null;
            }

            List<LogicalOperator> predecessors = plan.getPredecessors(node);

            if (predecessors == null) {
                // we have reached the root
                return topProject;
            }

            if (predecessors.size() > 1) {
                // a project or cast cannot have multiple inputs
                return null;
            }

            node = predecessors.get(0);
        }
    }",A utility method to check if a plan contains a chain of projection operators with or without casts,1,332
4215,"public static Object createNullObject( ProxyFactory proxyFactory, Class... proxyClasses )
    {
        return proxyFactory.createInvocationHandlerProxy( new NullInvocationHandler(), proxyClasses );
    }","Creates a ""null object"" which implements the proxyClasses.",1,49
4216,"private SortedSet<RegisteredListener> getEventListeners(Event.Type type) {
        SortedSet<RegisteredListener> eventListeners = listeners.get(type);

        if (eventListeners != null) {
            return eventListeners;
        }

        eventListeners = new TreeSet<RegisteredListener>(comparer);
        listeners.put(type, eventListeners);
        return eventListeners;
    }",Returns a SortedSet of RegisteredListener for the specified event type creating a new queue if needed,1,98
4217,"public List<Greeting> getVoicemailList(boolean forceUpdate) throws IOException {
		return getSettings(forceUpdate).getVoicemailGreetingsList();
	}",Returns the Greeting list - Lazy,1,36
4218,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_REVERB;
    }",The ID3v2 frame identifier,1,22
4219,"public String toString()
    {
        return getBriefDescription();
    }",Return brief description of FrameBody,1,22
4220,"public synchronized static IFile createFile(String pathString) {
		if (File.separatorChar != '\\') {
			pathString = pathString.replace('\\', '/');
		}
		return new ExternalFileWrapper(pathString);
	}",Creates and returns an  ExternalFileWrapper for a file that has the given pathString.,1,66
4221,"public Object getProperty(String key)
    {
        if (overrideProperties.containsKey(key)) {
            return overrideProperties.getProperty(key);
        }
        Configuration firstMatchingConfiguration = null;
        for (Configuration config : configList)
        {
            if (config.containsKey(key))
            {
                firstMatchingConfiguration = config;
                break;
            }
        }

        if (firstMatchingConfiguration != null)
        {
            return firstMatchingConfiguration.getProperty(key);
        }
        else
        {
            return null;
        }
    }",Read property from underlying composite.,1,149
4222,"protected String createURLFromWARFile() throws Exception
    {
        if (servletContext == null)
        {
            // this may happen if we are running in a test container, in IDE development, etc
            return null;
        }
        
        URL url = servletContext.getResource(""/WEB-INF/beans.xml"");

        if (url != null)
        {
            addWebBeansXmlLocation(url.toExternalForm());
            URL resourceUrl = WarUrlFinder.findWebInfClassesPath(this.servletContext);

            if (resourceUrl == null)
            {
                return null;
            }

            //set resource to beans.xml mapping
            AnnotationDB annotationDB = getAnnotationDB();

            if(annotationDB instanceof BeansXmlAnnotationDB)
            {
                ((BeansXmlAnnotationDB)annotationDB).setResourceBeansXml(resourceUrl.toExternalForm(), url.toExternalForm());
            }
            return resourceUrl.toExternalForm();
        }

        return null;
    }",Returns the web application class path if it contains a beans.xml marker file.,1,211
4223,"public IndexableField[] createFields(SchemaField field, Object value, float boost) {
    IndexableField f = createField( field, value, boost);
    return f==null ? new IndexableField[]{} : new IndexableField[]{f};
  }","Given a  org.apache.solr.schema.SchemaField, create one or more  org.apache.lucene.index.IndexableField instances",1,78
4224,"@Processor
    @InvalidateConnectionOn(exception = NotAuthenticatedException.class)
    public ForeCast readForecast(String objectId) {
        return (ForeCast) read(ServiceSourceCollection.Forecasts, objectId);
    }",Fetches the forecast identified by the object id in the collection.,1,49
4225,"public boolean matches(Method method, Class targetClass) {
        Method m = method;

        if ( isAuthzAnnotationPresent(m) ) {
            return true;
        }

        //The 'method' parameter could be from an interface that doesn't have the annotation.
        //Check to see if the implementation has it.
        if ( targetClass != null) {
            try {
                m = targetClass.getMethod(m.getName(), m.getParameterTypes());
                return isAuthzAnnotationPresent(m) || isAuthzAnnotationPresent(targetClass);
            } catch (NoSuchMethodException ignored) {
                //default return value is false.  If we can't find the method, then obviously
                //there is no annotation, so just use the default return value.
            }
        }

        return false;
    }","Returns true if the method or the class has any Shiro annotations, false otherwise.",1,155
4226,"public String buildMeta() {
    return new StringBuilder(host) //
        .append(""/"") //
        .append(PREFIX_META) //
        .append(""/"") //
        .append(assembleConfig()) //
        .append(target) //
        .toString();
  }",Build a URL for fetching Thumbor metadata.,1,83
4227,"public static <T> Set<T> getAddedInTarget(Set<T> current, Set<T> target) {
        if(current == null || target == null) {
            return new HashSet<T>();
        }
        return getDiff(target, current);
    }","Returns a set of objects that were added to the target list getAddedInTarget(current, null) - nothing was added, returns null.",1,87
4228,"public IElementType getElementType(Object o) {

		if (o instanceof EClass) {
			return getElementType((EClass) o);
			
		} else if (o instanceof EObject) {
			return getElementType((EObject) o);

		} else if (o instanceof IElementType) {
			return (IElementType) o;
		}

		return null;
	}",Convenience method to get an element type for o.,1,113
4229,"public static String makePath(String parent, String... children)
    {
        StringBuilder path = new StringBuilder();

        // Add parent piece, with no trailing slash.
        if ( (parent != null) && (parent.length() > 0) )
        {
            if ( !parent.startsWith(PATH_SEPARATOR) )
            {
                path.append(PATH_SEPARATOR);
            }
            if ( parent.endsWith(PATH_SEPARATOR) )
            {
                path.append(parent.substring(0, parent.length() - 1));
            }
            else
            {
                path.append(parent);
            }
        }

        if (children == null || children.length == 0)
        {
            // Special case, empty parent and child
            if ( path.length() == 0 )
            {
                return PATH_SEPARATOR;
            }
            return path.toString();
        }

        for (String child : children)
        {
            if ( (child == null) || (child.length() == 0) || (child.equals(PATH_SEPARATOR)) )
            {
                // Special case, empty parent and child
                if ( path.length() == 0 )
                {
                    path.append(PATH_SEPARATOR);
                }

                continue;
            }

            // Now add the separator between parent and child.
            path.append(PATH_SEPARATOR);

            if ( child.startsWith(PATH_SEPARATOR) )
            {
                child = child.substring(1);
            }

            if ( child.endsWith(PATH_SEPARATOR) )
            {
                child = child.substring(0, child.length() - 1);
            }

            // Finally, add the child.
            path.append(child);
        }

        return path.toString();
    }","Given a parent path and a list of children nodes, create a combined full path",1,476
4230,"protected Path incPath(Path source, Path toAdd) {
        if (null == source) {
            source = new Path(project); 
        }
        if (null != toAdd) {
            source.append(toAdd);
        }
        return source;
    }",Add path elements to source path and return result.,1,84
4231,"public static IVirtualComponent[] getWebComponents(IProject project){
		
		//get all components in the project
		Vector v = new Vector();
		try {
			IFlexibleProject flex = ComponentCore.createFlexibleProject(project);
			IVirtualComponent[] components = flex.getComponents();
			for (int i=0;i<components.length;i++){
				if (isWebComponent(project, components[i].getName())){
					v.add(components[i]);
				}
			}			

		}
		catch (Exception e){
			//handle exception
		}
		
		return (IVirtualComponent[])v.toArray(new IVirtualComponent[0]);
	}",Returns Web components in a project,1,179
4232,"public String addChunk(String index, InputStream is, int chunkCount, int chunkIndex, String fileName,
            String mimeType, long fileSize) throws IOException {
        BatchManager bm = Framework.getService(BatchManager.class);
        Blob blob = Blobs.createBlob(is);

        String fileEntryKey = key + ""_"" + index;
        BatchFileEntry fileEntry = getFileEntry(index);
        if (fileEntry == null) {
            fileEntry = new BatchFileEntry(fileEntryKey, chunkCount, fileName, mimeType, fileSize);
            bm.getTransientStore().putParameters(fileEntryKey, fileEntry.getParams());
            bm.getTransientStore().putParameter(key, index, fileEntryKey);
        }
        fileEntry.addChunk(chunkIndex, blob);

        return fileEntryKey;
    }",Adds a chunk with the given  chunkIndex to the batch file with the given  index.,1,217
4233,"public static Sentry getInstance() {
		if(instance==null) {
			synchronized(lock) {
				if(instance==null) {
					instance = new Sentry();
				}
			}
		}
		return instance;
	}",Returns the Sentry instance,1,72
4234,"public static URL[] findResources(Class cls, String name, int maxLength) throws IOException {
        while (name.contains(""//"")) {
            name = name.replace(""//"", ""/"");
        }

        // Under JPMS, Class.getResource() and ClassLoader.getResources() do not return the same URLs
        URL url = cls.getResource(name);
        if (url != null && maxLength == 1) {
            return new URL[] {url};
        }

        String path = """";
        if (!name.startsWith(""/"")) {
            String s = cls.getName().replace('.', '/');
            int n = s.lastIndexOf('/');
            if (n >= 0) {
                path = s.substring(0, n + 1);
            }
        } else {
            name = name.substring(1);
        }
        Enumeration<URL> urls = cls.getClassLoader().getResources(path + name);
        ArrayList<URL> array = new ArrayList<URL>();
        if (url != null) {
            array.add(url);
        }
        while (url == null && !urls.hasMoreElements() && path.length() > 0) {
            int n = path.lastIndexOf('/', path.length() - 2);
            if (n >= 0) {
                path = path.substring(0, n + 1);
            } else {
                path = """";
            }
            urls = cls.getClassLoader().getResources(path + name);
        }
        while (urls.hasMoreElements() && array.size() < maxLength) {
            url = urls.nextElement();
            if (!array.contains(url)) {
                array.add(url);
            }
        }
        return array.toArray(new URL[array.size()]);
    }",Finds by name resources using the  Class and its  ClassLoader.,1,559
4235,"public ManagedOutputStream getOutputStream(String managedFile) throws IOException {
		if (useReliableFiles) {
			ReliableFileOutputStream out = new ReliableFileOutputStream(new File(getBase(), managedFile));
			return new ManagedOutputStream(out, this, managedFile, null);
		}
		File tmpFile = createTempFile(managedFile);
		return new ManagedOutputStream(new FileOutputStream(tmpFile), this, managedFile, tmpFile);
	}",Returns a ManagedOutputStream for a managed file.,1,115
4236,"public ChannelN getChannel(int channelNumber) {
        ChannelN result = _channelMap.get(channelNumber);
        if(result == null) throw new UnknownChannelException(channelNumber);
        return result;
    }",Public API - Looks up an existing channel associated with this connection.,1,58
4237,"private Map<String, Ref> getAllRefs() throws IOException {
		Map<String, Ref> ret = repo.getRefDatabase().getRefs(ALL);
		for (Ref ref : repo.getRefDatabase().getAdditionalRefs())
			ret.put(ref.getName(), ref);
		return ret;
	}",Returns a map of all refs and additional refs (e.g.,1,91
4238,"public static PathFunction newFunction(String name) throws InvalidPathException {
        Class functionClazz = FUNCTIONS.get(name);
        if(functionClazz == null){
            throw new InvalidPathException(""Function with name: "" + name + "" does not exists."");
        } else {
            try {
                return (PathFunction)functionClazz.newInstance();
            } catch (Exception e) {
                throw new InvalidPathException(""Function of name: "" + name + "" cannot be created"", e);
            }
        }
    }",Returns the function by name or throws InvalidPathException if function not found.,1,142
4239,"public static Collection<URL> forWebInfLib(final ServletContext servletContext) {
        final Collection<URL> urls = new ArrayList<URL>();
        for (Object urlString : servletContext.getResourcePaths(""/WEB-INF/lib"")) {
            try {
                urls.add(servletContext.getResource((String) urlString));
            } catch (MalformedURLException e) { /*fuck off*/ }
        }
        return distinctUrls(urls);
    }",Returns a distinct collection of URLs based on the  WEB-INF/lib folder.,1,119
4240,"public Uri getUriToPlay() {
        final Intent received = getIntent();
        final Bundle data = received.getExtras();

        // we must receive the URI value or we can't do anything
        final String uriText = data.getString(Keys.URI);

        return Uri.parse(uriText);
    }",Determine the uri that we should play from the Intent.,1,78
4241,"public static Stubber doReturn(Object toBeReturned, Object... toBeReturnedNext) {
        return MOCKITO_CORE.stubber().doReturn(toBeReturned, toBeReturnedNext);
    }",Same as  #doReturn(Object) but sets consecutive values to be returned.,1,44
4242,"public Map<String, Long> getROGlobalMaxVersion(List<String> storeNames) {
        Map<String, Long> storeToMaxVersion = Maps.newHashMapWithExpectedSize(storeNames.size());
        for(String storeName: storeNames) {
            storeToMaxVersion.put(storeName, 0L);
        }

        for(Node node: currentCluster.getNodes()) {
            Map<String, Long> currentNodeVersions = getROMaxVersion(node.getId(), storeNames);
            for(String storeName: currentNodeVersions.keySet()) {
                Long maxVersion = storeToMaxVersion.get(storeName);
                if(maxVersion != null && maxVersion < currentNodeVersions.get(storeName)) {
                    storeToMaxVersion.put(storeName, currentNodeVersions.get(storeName));
                }
            }
        }
        return storeToMaxVersion;
    }","This is a wrapper around  voldemort.client.protocol.admin.AdminClient#getROMaxVersion(int, List) where-in we find the max versions on each machine and then return the max of all of them",1,214
4243,"public Entity getEntered() {
        return entered;
    }",Get the entity that entered the vehicle.,1,19
4244,"public boolean isUnspecified() {
        return labels.isEmpty() && variables.isEmpty();
    }",Returns  true if the environment does not specify any labels nor environment variables.,1,32
4245,"public static PowerMockitoStubber doReturn(Object toBeReturned) {
        return POWERMOCKITO_CORE.doReturn(toBeReturned);
    }",Use doReturn() in those rare occasions when you cannot use  PowerMockito#when(Object).,1,29
4246,"public double[] getAverageAndVariance() {
    int numberOfEntries = isFull ? buffer.length : index;
    if (numberOfEntries == 0) {
      return new double[]{0, 0};
    }

    double sum = 0;
    double sumSquares = 0;
    for (int i = 0; i < numberOfEntries; i++) {
      sum += buffer[i];
      sumSquares += Math.pow(buffer[i], 2);
    }

    double average = sum / numberOfEntries;
    return new double[]{average,
      sumSquares / numberOfEntries  - Math.pow(average, 2)};
  }",Gets the average and standard deviation of the buffer.,1,199
4247,"public static Predicate<String> startsWith(String startsWith) {
        return new StartsWithFilter(startsWith);
    }",Returns a predicate that will accept any String that starts with the specified,1,32
4248,"public File lookup(String managedFile, boolean add) throws IOException {
		if (!open)
			throw new IOException(EclipseAdaptorMsg.fileManager_notOpen);
		Entry entry = (Entry) table.get(managedFile);
		if (entry == null) {
			if (add) {
				add(managedFile);
				entry = (Entry) table.get(managedFile);
			} else {
				return null;
			}
		}
		return new File(getAbsolutePath(managedFile + '.' + entry.getReadId()));
	}",Returns the actual file location to use when reading the given managed file.,1,157
4249,"static public IEclipseContext create() {
		return new EclipseContext(null, null);
	}",Creates and returns a new empty context.,1,29
4250,"@SuppressWarnings(""unchecked"")
  public static <T> TypeLiteral<Iterable<? extends T>> iterable(final Class<T> clazz) {
    return (TypeLiteral<Iterable<? extends T>>) TypeLiteral.get(new ParameterizedType() {

      public Type[] getActualTypeArguments() {
        return new Type[] {clazz};
      }

      public Type getRawType() {
        return Iterable.class;
      }

      public Type getOwnerType() {
        return null;
      }
    });
  }",Create a type-literal representing an iterable sequence of the given type.,1,154
4251,"public static String sanitize(URL url) {
        try {
            URI orig = url.toURI();
            return new URI(orig.getScheme(), orig.getUserInfo() != null ? ""…"" : null, orig.getHost(), orig.getPort(), orig.getPath(), orig.getQuery() != null ? ""…"" : null, orig.getFragment()).toString();
        } catch (URISyntaxException x) {
            assert false : x;
            return url.toString();
        }
    }",Mask out query string or user info details in a URL.,1,164
4252,"public boolean matches(Method method, Class targetClass) {
        return ((method.getAnnotation(RequiresPermissions.class) != null) ||
                (method.getAnnotation(RequiresRoles.class) != null) ||
                (method.getAnnotation(RequiresUser.class) != null) ||
                (method.getAnnotation(RequiresGuest.class) != null ) ||
                (method.getAnnotation(RequiresAuthentication.class) != null ));
    }","Returns true if the method has any JSecurity annotations, false otherwise.",1,125
4253,"public static DataMap processProjections(DataMap dataMap, Map<String, List<String>> result)
  {
    //We send this through the pipeline and migrate from the dataMap into the result
    for (final String parameterName : RestConstants.PROJECTION_PARAMETERS)
    {
      if (dataMap.containsKey(parameterName))
      {
        dataMap = processIndividualProjection(dataMap, result, parameterName);
      }
    }

    //If there were no projection parameters, we simply return the unmodified dataMap
    return dataMap;
  }","Encode any of the projection fields query parameters, if they exist, and place them into result.",1,104
4254,"@Override
	public Class<? extends OutputFormat> getUserCodeClass()
	{
		return this.clazz;
	}",Gets the class describing the output format.,1,32
4255,"protected double correlation(SparseVector iv, SparseVector jv) {
		return correlation(iv, jv, cf.getString(""similarity""));
	}","Compute the correlation between two vectors using method specified by configuration key ""similarity""",1,43
4256,"public InfinispanBucketManagerFactory get(org.infinispan.configuration.cache.Configuration config)throws NullPointerException {
        requireNonNull(config, ""config is required"");

        return new InfinispanBucketManagerFactory(new DefaultCacheManager(config));
    }",Creates a  InfinispanBucketManagerFactory from infinispan config,1,56
4257,"private String checkSkipBuildInString(Map<Pattern, String> patterns, String string ) {
        // check for skip build phrase in the passed string
        if (!patterns.isEmpty() && StringUtils.isNotBlank(string)) {
            for(Map.Entry<Pattern, String> e: patterns.entrySet()){
                if(e.getKey().matcher(string).matches()){
                    return e.getValue();
                }
            }
        }
        return null;
    }",Checks for skip pattern in the passed string,1,124
4258,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_INITIAL_KEY ;
    }",The ID3v2 frame identifier,1,23
4259,"@Processor
    @InvalidateConnectionOn(exception = NotAuthenticatedException.class)
    public Address readAddress(String objectId) {
        return (Address) read(ServiceSourceCollection.Addresses, objectId);
    }",Fetches the address identified by the object id in the collection.,1,49
4260,"public Set<UUID> nodeIds(){
        return ids;
    }",Gets set of node IDs this predicate is based on.,1,21
4261,"public static ActivityObject buildActor(Post post) {
        ActivityObject actor = new ActivityObject();

        try {
            actor.setId(formatId(
                    Optional.fromNullable(
                            post.getFrom().getId())
                            .or(Optional.of(post.getFrom().getId()))
                            .orNull()
            ));

            actor.setDisplayName(post.getFrom().getName());
            actor.setAdditionalProperty(""handle"", post.getFrom().getName());
        } catch (Exception e) {
            LOGGER.error(""Exception trying to build actor for Post: {}, {}"", post, e);
        }

        return actor;
    }",Builds an  org.apache.streams.pojo.json.ActivityObject object from the  Post,1,175
4262,"public static boolean isDefaultMethod(int flags) {
		return (flags & AccDefaultMethod) != 0;
	}",Returns whether the given integer has the AccDefaultMethod bit set.,1,35
4263,"public Map<String, List<ModuleBean>> getModules()
    {
        Map<String, List<ModuleBean>> modules = new HashMap<>();
        for (Map.Entry<String, Supplier<List<ModuleBean>>> moduleListEntry : this.modules.entrySet())
        {
            modules.put(moduleListEntry.getKey(), moduleListEntry.getValue().get());
        }
        return modules;
    }","Returns the map of modules, indexed by key.",1,117
4264,"@SuppressWarnings(""unchecked"")
	protected AbstractTaskCategory getCategory() {
		int index = categoryChooser.getSelectionIndex();
		if (addToCategory.getSelection() && index != -1) {
			if (index == 0) {
				return TasksUiPlugin.getTaskListManager().getTaskList().getAutomaticCategory();
			}
			return ((List<AbstractTaskCategory>) categoryChooser.getData()).get(index - 1);
		}
		return null;
	}",Returns the  AbstractTaskContainer category the new task belongs to,1,131
4265,"public ConnectionResult connect(Transaction transaction, ConnectMode mode) {
        if (!transaction.getHash().equals(outpoint.getHash()))
            return ConnectionResult.NO_SUCH_TX;
        checkElementIndex((int) outpoint.getIndex(), transaction.getOutputs().size(), ""Corrupt transaction"");
        TransactionOutput out = transaction.getOutput((int) outpoint.getIndex());
        if (!out.isAvailableForSpending()) {
            if (mode == ConnectMode.DISCONNECT_ON_CONFLICT) {
                out.markAsUnspent();
            } else if (mode == ConnectMode.ABORT_ON_CONFLICT) {
                outpoint.fromTx = checkNotNull(out.parentTransaction);
                return TransactionInput.ConnectionResult.ALREADY_SPENT;
            }
        }
        connect(out);
        return TransactionInput.ConnectionResult.SUCCESS;
    }",Connects this input to the relevant output of the referenced transaction.,1,210
4266,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_EQUALISATION2;
    }",The ID3v2 frame identifier,1,22
4267,"public IQueryResult<IInstallableUnit> listInstalledElements(boolean rootsOnly, IProgressMonitor monitor) {
		IProfileRegistry registry = (IProfileRegistry) getAgent().getService(IProfileRegistry.SERVICE_NAME);
		IProfile profile = registry.getProfile(IProfileRegistry.SELF);
		if (profile == null)
			return new CollectionResult<IInstallableUnit>(null);
		if (rootsOnly)
			return profile.query(new UserVisibleRootQuery(), monitor);
		return profile.query(QueryUtil.ALL_UNITS, monitor);
	}",Returns the  IInstallableUnits that are installed in the running instance of Eclipse.,1,131
4268,"public static String getPlatform() {
        return System.getProperty(""org.bytedeco.javacpp.platform"", platform);
    }","Returns either the value of the ""org.bytedeco.javacpp.platform"" system property, or  #platform when the former is not set.",1,31
4269,"public static Collection<URL> forClassLoader() {
        return forClassLoader(classLoaders());
    }",Returns a distinct collection of URLs based on URLs derived from class loaders.,1,29
4270,"private Command createCommandFromString(Item item, String commandAsString) throws BindingConfigParseException {
		
		if (CHANGED_COMMAND_KEY.equals(commandAsString)) {
			return CHANGED_COMMAND_KEY;
		}
		else if (WILDCARD_COMMAND_KEY.equals(commandAsString)) {
			return WILDCARD_COMMAND_KEY;
		} else {
			Command command = TypeParser.parseCommand(
				item.getAcceptedCommandTypes(), commandAsString);
			
			if (command == null) {
				throw new BindingConfigParseException(""couldn't create Command from '"" + commandAsString + ""' "");
			}
			
			return command;
		}
	}","Creates a  Command out of the given commandAsString taking the special Commands ""CHANGED"" and """" into account and incorporating the  TypeParser.",1,156
4271,"public static ReadableBuffer ignoreClose(ReadableBuffer buffer) {
    return new ForwardingReadableBuffer(buffer) {
      @Override
      public void close() {
        // Ignore.
      }
    };
  }",Decorates the given  ReadableBuffer to ignore calls to  ReadableBuffer#close.,1,54
4272,"protected CacheObject saveValueForIndexUnlocked() throws IgniteCheckedException {
        assert Thread.holdsLock(this);

        if (cctx.queries() == null)
            return null;

        CacheObject val = rawGetOrUnmarshalUnlocked(false);

        if (val == null) {
            GridCacheSwapEntry swapEntry = cctx.swap().read(key, true, true);

            if (swapEntry == null)
                return null;

            return swapEntry.value();
        }

        return val;
    }",This method will return current value only if clearIndex(V) will require previous value.,1,145
4273,"public static IgniteCheckedException cast(Throwable t) {
        assert t != null;

        while (true) {
            if (t instanceof Error)
                throw (Error)t;

            if (t instanceof GridClosureException) {
                t = ((GridClosureException)t).unwrap();

                continue;
            }

            if (t instanceof IgniteCheckedException)
                return (IgniteCheckedException)t;

            if (!(t instanceof IgniteException) || t.getCause() == null)
                return new IgniteCheckedException(t);

            assert t.getCause() != null; // ...and it is IgniteException.

            t = t.getCause();
        }
    }",Casts this throwable as  IgniteCheckedException.,1,193
4274,"public String getHelp() {
        return (getHelp(DEFAULT_SCREENWIDTH, DEFAULT_PARAM_HELP_SEPARATOR));
    }","A shortcut method for calling getHelp(80, ""\n"").",1,27
4275,"@Override
  public final boolean dealWithCharacters(Reader reader)
    throws IOException, ManifoldCFException
  {
    while (true)
    {
      int amt = reader.read(charBuffer);
      if (amt == -1)
        return false;
      for (int i = 0; i < amt; i++)
      {
        if (dealWithCharacter(charBuffer[i]))
          return true;
      }
    }
  }",Receive a stream of characters.,1,127
4276,"public RedeemData getConnectedRedeemData(KeyBag keyBag) throws ScriptException {
        TransactionOutput connectedOutput = getConnectedOutput();
        checkNotNull(connectedOutput, ""Input is not connected so cannot retrieve key"");
        Script connectedScript = connectedOutput.getScriptPubKey();
        if (ScriptPattern.isPayToPubKeyHash(connectedScript)) {
            byte[] addressBytes = ScriptPattern.extractHashFromPayToPubKeyHash(connectedScript);
            return RedeemData.of(keyBag.findKeyFromPubKeyHash(addressBytes, Script.ScriptType.P2PKH), connectedScript);
        } else if (ScriptPattern.isPayToWitnessPubKeyHash(connectedScript)) {
            byte[] addressBytes = ScriptPattern.extractHashFromPayToWitnessHash(connectedScript);
            return RedeemData.of(keyBag.findKeyFromPubKeyHash(addressBytes, Script.ScriptType.P2WPKH), connectedScript);
        } else if (ScriptPattern.isPayToPubKey(connectedScript)) {
            byte[] pubkeyBytes = ScriptPattern.extractKeyFromPayToPubKey(connectedScript);
            return RedeemData.of(keyBag.findKeyFromPubKey(pubkeyBytes), connectedScript);
        } else if (ScriptPattern.isPayToScriptHash(connectedScript)) {
            byte[] scriptHash = ScriptPattern.extractHashFromPayToScriptHash(connectedScript);
            return keyBag.findRedeemDataFromScriptHash(scriptHash);
        } else {
            throw new ScriptException(ScriptError.SCRIPT_ERR_UNKNOWN_ERROR, ""Could not understand form of connected output script: "" + connectedScript);
        }
    }","Returns the RedeemData identified in the connected output, for either P2PKH, P2WPKH, P2PK or P2SH scripts.",1,308
4278,"public Completion await(long timeout, TimeUnit unit) throws InterruptedException {
        if (sync.tryAcquireSharedNanos(0, unit.toNanos(timeout)))
            return new Completion();
        else
            return null;
    }",Returns  Completion object immediately if the latch is open.,1,64
4279,"static Schema<byte[]> AUTO_PRODUCE_BYTES(Schema<?> schema) {
        return DefaultImplementation.newAutoProduceSchema(schema);
    }",Create a schema instance that accepts a serialized payload and validates it against the schema specified.,1,35
4280,"public Map<String, BuildConfiguration> getBuildConfigurations()
    {
        return this.buildConfigurations;
    }",Gets the project's build configurations indexed by name.,1,28
4281,"public static ExecutionContext getContainerRequest() {
		return (ExecutionContext)requestThreadLocal.get();
	}",Get the  ExecutionContext instance bound to the current thread.,1,28
4282,"public Map invertMap() {
		return Collections.unmodifiableMap( copyToEntityMap );
	}",Returns an unmodifiable map view of the copy-entity mappings,1,26
4283,"public List<UserEntity> transformUserEntityCollection(String userListJsonResponse)
      throws JsonSyntaxException {

    List<UserEntity> userEntityCollection;
    try {
      Type listOfUserEntityType = new TypeToken<List<UserEntity>>() {}.getType();
      userEntityCollection = this.gson.fromJson(userListJsonResponse, listOfUserEntityType);

      return userEntityCollection;
    } catch (JsonSyntaxException jsonException) {
      throw jsonException;
    }
  }",Transform from valid json string to List of  UserEntity.,1,113
4284,"private static ActivityObject buildActor(com.google.api.services.plus.model.Activity.Actor gPlusActor) {
        ActivityObject actor = new ActivityObject();

        actor.setDisplayName(gPlusActor.getDisplayName());
        actor.setId(formatId(String.valueOf(gPlusActor.getId())));
        actor.setUrl(gPlusActor.getUrl());

        Image image = new Image();
        com.google.api.services.plus.model.Activity.Actor.Image googlePlusImage = gPlusActor.getImage();

        if(googlePlusImage != null) {
            image.setUrl(googlePlusImage.getUrl());
        }
        actor.setImage(image);

        return actor;
    }","Given a  com.google.api.services.plus.model.Activity.Actor object, return a fully fleshed out  org.apache.streams.pojo.json.ActivityObject actor",1,185
4285,"public String getIdentifier()
    {
        return ID3v22Frames.FRAME_ID_V2_ATTACHED_PICTURE;
    }",The ID3v2 frame identifier,1,22
4286,"public String getIdentifier()
    {
        return  ID3v24Frames.FRAME_ID_ENCRYPTION;
    }",The ID3v2 frame identifier,1,22
4287,"public MaskedArgumentListBuilder getBriefHistoryArguments(Calendar fromTimestamp, Calendar toTimestamp) {
        return getHistoryArguments(fromTimestamp, toTimestamp, ""brief"");
    }","Returns arguments for the ""history /format:brief"" command",1,38
4288,"public ChannelSelector<T> getChannelSelector() {

		return this.channelSelector;
	}",Returns the output gate's channel selector.,1,25
4289,"@Nullable
  public SdkManager.LayoutlibVersion getLayoutlibVersion() {
    if (mLayoutlibVersion.getFirst() != LAYOUTLIB_API_NOT_SPECIFIED || mLayoutlibVersion.getSecond() != LAYOUTLIB_REV_NOT_SPECIFIED) {
      return new SdkManager.LayoutlibVersion(mLayoutlibVersion.getFirst(), mLayoutlibVersion.getSecond());
    }
    return null;
  }",Gets the  com.android.sdklib.SdkManager.LayoutlibVersion from  this.,1,83
4290,"public static Collection<URL> forManifest(final URL url) {
        final Collection<URL> result = new ArrayList<URL>();
        result.add(url);
        try {
            final String part = cleanPath(url);
            File jarFile = new File(part);
            JarFile myJar = new JarFile(part);
            URL validUrl = tryToGetValidUrl(jarFile.getPath(), new File(part).getParent(), part);
            if (validUrl != null) { result.add(validUrl); }
            final Manifest manifest = myJar.getManifest();
            if (manifest != null) {
                final String classPath = manifest.getMainAttributes().getValue(new Attributes.Name(""Class-Path""));
                if (classPath != null) {
                    for (String jar : classPath.split("" "")) {
                        validUrl = tryToGetValidUrl(jarFile.getPath(), new File(part).getParent(), jar);
                        if (validUrl != null) { result.add(validUrl); }
                    }
                }
            }
        } catch (IOException e) {
            // don't do anything, we're going on the assumption it is a jar, which could be wrong
        }
        return distinctUrls(result);
    }",Returns a distinct collection of URLs from a single URL based on the Manifest information.,1,347
4291,"public VaultStatus getStatus() {

        WebTarget target = baseTarget.path(""/v1/sys/seal-status"");
        Response response = null;
        try {
            response = target.request()
                    .accept(""application/json"")
                    .header(""X-Vault-Token"", this.vaultToken)
                    .get();
            if (response.getStatus() != 200) {
                ErrorResponse error = response.readEntity(ErrorResponse.class);
                throw new VaultException(response.getStatus(), error.getErrors());
            }
            return response.readEntity(VaultStatus.class);
        } finally {
            if (response != null) {
                response.close();
            }
        }
    }",Get status from Vault,1,195
4292,"public static InjectionResolver<?> getInjectionResolver(
            ServiceLocatorImpl locator, Injectee injectee) throws IllegalStateException {
        return getInjectionResolver(locator, injectee.getParent(), injectee.getPosition());

    }",Returns an injection resolver for the injectee,1,56
4293,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_RECOMMENDED_BUFFER_SIZE;
    }",The ID3v2 frame identifier,1,22
4294,"public String getIdentifier()
    {
        return  ID3v24Frames.FRAME_ID_ORIG_LYRICIST ;
    }",The ID3v2 frame identifier,1,23
4295,"public String getAnnotations() {
    return (m_annotations != null ? m_annotations : m_defaultAnnotations).toString();
  }",Returns the annotation type for the suite.,1,38
4296,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_POPULARIMETER;
    }",The ID3v2 frame identifier,1,22
4297,"private static String createAssetUid(final Resources resources, int id, int style) {
        return resources.getResourcePackageName(id) + ""-"" + id + ""-"" + style;
    }",Creates a unique id for a given AssetManager and asset id,1,61
4298,"public static URL[] findLibrary(Class cls, ClassProperties properties, String libnameversion, boolean pathsFirst) {
        String[] s = libnameversion.split(""@"");
        String libname = s[0];
        String version = s.length > 1 ? s[s.length-1] : """";

        // If we do not already have the native library file ...
        String filename = loadedLibraries.get(libnameversion);
        if (filename != null) {
            try {
                return new URL[] { new File(filename).toURI().toURL() };
            } catch (IOException ex) {
                return new URL[] { };
            }
        }

        String subdir = properties.getProperty(""platform"") + '/';
        String prefix = properties.getProperty(""platform.library.prefix"", """") + libname;
        String suffix = properties.getProperty(""platform.library.suffix"", """");
        String[] styles = {
            prefix + suffix + version, // Linux style
            prefix + version + suffix, // Mac OS X style
            prefix + suffix            // without version
        };

        String[] suffixes = properties.get(""platform.library.suffix"").toArray(new String[0]);
        if (suffixes.length > 1) {
            styles = new String[3 * suffixes.length];
            for (int i = 0; i < suffixes.length; i++) {
                styles[3 * i    ] = prefix + suffixes[i] + version; // Linux style
                styles[3 * i + 1] = prefix + version + suffixes[i]; // Mac OS X style
                styles[3 * i + 2] = prefix + suffixes[i];           // without version
            }
        }

        List<String> paths = new ArrayList<String>();
        paths.addAll(properties.get(""platform.preloadpath""));
        paths.addAll(properties.get(""platform.linkpath""));
        String libpath = System.getProperty(""java.library.path"", """");
        if (libpath.length() > 0) {
            paths.addAll(Arrays.asList(libpath.split(File.pathSeparator)));
        }
        ArrayList<URL> urls = new ArrayList<URL>(styles.length * (1 + paths.size()));
        for (int i = 0; cls != null && i < styles.length; i++) {
            // ... then find it from in our resources ...
            URL u = cls.getResource(subdir + styles[i]);
            if (u != null) {
                urls.add(u);
            }
        }
        // ... and in case of bad resources search the paths last, or first on user request.
        int k = pathsFirst ? 0 : urls.size();
        for (int i = 0; paths.size() > 0 && i < styles.length; i++) {
            for (String path : paths) {
                File file = new File(path, styles[i]);
                if (file.exists()) {
                    try {
                        urls.add(k++, file.toURI().toURL());
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                }
            }
        }
        return urls.toArray(new URL[urls.size()]);
    }",Finds from where the library may be extracted and loaded among the  Class resources.,1,951
4299,"public double sum() {
            return reduce(Ops.doubleAdder(), 0);
        }",Returns the sum of elements,1,29
4300,"static double fromRelative(SVGLength length, double relative, double offset, double scale, double fontSize) {
        /*
            TODO list

            unit  relative to
            em    font size of the element
            ex    x-height of the elementâs font
            ch    width of the ""0"" (ZERO, U+0030) glyph in the elementâs font
            rem   font size of the root element
            vw    1% of viewportâs width
            vh    1% of viewportâs height
            vmin  1% of viewportâs smaller dimension
            vmax  1% of viewportâs larger dimension

            relative-size [ larger | smaller ]
            absolute-size: [ xx-small | x-small | small | medium | large | x-large | xx-large ]

            https://www.w3.org/TR/css3-values/#relative-lengths
            https://www.w3.org/TR/css3-values/#absolute-lengths
            https://drafts.csswg.org/css-cascade-4/#computed-value
            https://drafts.csswg.org/css-fonts-3/#propdef-font-size
            https://drafts.csswg.org/css2/fonts.html#propdef-font-size
        */
        SVGLengthUnitType unitType = length.unit;
        double value = length.value;
        double unit = 1;
        switch (unitType) {
            case SVG_LENGTHTYPE_NUMBER:
            case SVG_LENGTHTYPE_PX:
                break;

            case SVG_LENGTHTYPE_PERCENTAGE:
                return value / 100 * relative + offset;

            case SVG_LENGTHTYPE_EMS:
                unit = fontSize;
                break;
            case SVG_LENGTHTYPE_EXS:
                unit = fontSize / 2;
                break;

            case SVG_LENGTHTYPE_CM:
                unit = 35.43307;
                break;
            case SVG_LENGTHTYPE_MM:
                unit = 3.543307;
                break;
            case SVG_LENGTHTYPE_IN:
                unit = 90;
                break;
            case SVG_LENGTHTYPE_PT:
                unit = 1.25;
                break;
            case SVG_LENGTHTYPE_PC:
                unit = 15;
                break;

            default:
            case SVG_LENGTHTYPE_UNKNOWN:
                return value * scale + offset;
        }
        return value * unit * scale + offset;
    }",Converts SVGLength into px / user units in the current user coordinate system,1,300
4301,"protected boolean persistBoolean(boolean value) {
        if (shouldPersist()) {
            if (value == getPersistedBoolean(!value)) {
                // It's already there, so the same as persisting
                return true;
            }

            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putBoolean(mKey, value);
            tryCommit(editor);
            return true;
        }
        return false;
    }",Attempts to persist a boolean to the  android.content.SharedPreferences.,1,108
4302,"public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder) {
        String weighting = hintsMap.getWeighting().toLowerCase();

        if (encoder.supports(GenericWeighting.class)) {
            DataFlagEncoder dataEncoder = (DataFlagEncoder) encoder;
            return new GenericWeighting(dataEncoder, dataEncoder.readStringMap(hintsMap));
        } else if (""shortest"".equalsIgnoreCase(weighting)) {
            return new ShortestWeighting(encoder);
        } else if (""fastest"".equalsIgnoreCase(weighting) || weighting.isEmpty()) {
            if (encoder.supports(PriorityWeighting.class))
                return new PriorityWeighting(encoder, hintsMap);
            else
                return new FastestWeighting(encoder, hintsMap);
        } else if (""curvature"".equalsIgnoreCase(weighting)) {
            if (encoder.supports(CurvatureWeighting.class))
                return new CurvatureWeighting(encoder, hintsMap);

        } else if (""short_fastest"".equalsIgnoreCase(weighting)) {
            return new ShortFastestWeighting(encoder, hintsMap);
        }

        throw new IllegalArgumentException(""weighting "" + weighting + "" not supported"");
    }",Based on the hintsMap and the specified encoder a Weighting instance can be created.,1,304
4303,"public static GenericMetadataSupport from(Type type) {
        Checks.checkNotNull(type, ""type"");
        if (type instanceof Class) {
            return new FromClassGenericMetadataSupport((Class<?>) type);
        }
        if (type instanceof ParameterizedType) {
            return new FromParameterizedTypeGenericMetadataSupport((ParameterizedType) type);
        }

        throw new MockitoException(""Type meta-data for this Type ("" + type.getClass().getCanonicalName() + "") is not supported : "" + type);
    }",Create an new GenericMetadataSupport from a  Type.,1,133
4304,"public GenericMetadataSupport resolveGenericReturnType(Method method) {
        Type genericReturnType = method.getGenericReturnType();
        // logger.log(""Method '"" + method.toGenericString() + ""' has return type : "" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + "" : "" + genericReturnType);

        if (genericReturnType instanceof Class) {
            return new NotGenericReturnTypeSupport(genericReturnType);
        }
        if (genericReturnType instanceof ParameterizedType) {
            return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());
        }
        if (genericReturnType instanceof TypeVariable) {
            return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);
        }

        throw new MockitoException(""Ouch, it shouldn't happen, type '"" + genericReturnType.getClass().getCanonicalName() + ""' on method : '"" + method.toGenericString() + ""' is not supported : "" + genericReturnType);
    }",Resolve current method generic return type to a  GenericMetadataSupport.,1,197
4305,"public String buildSafe() {
    if (key == null) {
      throw new IllegalStateException(""Cannot build safe URL without a key."");
    }

    // Assemble config and an MD5 of the target image.
    StringBuilder config = assembleConfig().append(md5(target));
    final byte[] encrypted = aes128Encrypt(config, normalizeString(key, 16));

    // URL-safe Base64 encode.
    final String encoded = Utilities.base64Encode(encrypted);

    return new StringBuilder(host).append(""/"").append(encoded).append(""/"").append(target).toString();
  }",Build a safe version of the URL.,1,154
4306,"protected ServletRequest wrapServletRequest(HttpServletRequest orig) {
        return new ShiroHttpServletRequest(orig, getServletContext(), isHttpSessions());
    }","Wraps the original HttpServletRequest in a  ShiroHttpServletRequest, which is required for supporting",1,37
4307,"public static WSSecurityEngineResult fetchActionResult(List resultList, int action) {

        for (int i = 0; i < resultList.size(); i++) {
            //
            // Check the result of every action whether it matches the given action
            //
            WSSecurityEngineResult result = 
                (WSSecurityEngineResult) resultList.get(i);
            int resultAction = 
                ((java.lang.Integer)result.get(WSSecurityEngineResult.TAG_ACTION)).intValue();
            if (resultAction == action) {
                return result;
            }
        }

        return null;
    }",Fetch the result of a given action from a given result list,1,150
4308,"public Element getValue() {
        return element;
    }",Returns the wrapped Element.,1,19
4309,"@Override
  public String toString()
  {
    final int NUM_BYTES = 4;
    StringBuilder sb = new StringBuilder();
    sb.append(""ByteString(length="");
    sb.append(length());
    if (_bytes.length > 0)
    {
      sb.append("",bytes="");
      for (int i = 0; i < Math.min(_bytes.length, NUM_BYTES); i++)
      {
        sb.append(String.format(""%02x"", (int) _bytes[i] & 0xff));
      }
      if (_bytes.length > NUM_BYTES * 2)
      {
        sb.append(""..."");
      }
      for (int i = Math.max(NUM_BYTES, _bytes.length - NUM_BYTES); i < _bytes.length; i++)
      {
        sb.append(String.format(""%02x"", (int)_bytes[i] & 0xff));
      }
    }
    sb.append("")"");
    return sb.toString();
  }",Return a summary of the contents of this  ByteString.,1,297
4310,"private static String systemOrEnv(String name, String dflt) {
        String res = System.getProperty(name);

        if (res == null)
            res = System.getenv(name);

        return res != null ? res : dflt;
    }",Get system property or environment variable with the given name.,1,84
4311,"public String toUpperCase() {
        return toUpperCase(Locale.getDefault());
    }","Converts the characters in this string to uppercase, using the default",1,26
4312,"LoadManagerReport nextBroker() throws PulsarServerException {
        List<LoadManagerReport> availableBrokers = localZkCache.getAvailableBrokers();

        if (availableBrokers.isEmpty()) {
            throw new PulsarServerException(""No active broker is available"");
        } else {
            int brokersCount = availableBrokers.size();
            int nextIdx = signSafeMod(counter.getAndIncrement(), brokersCount);
            return availableBrokers.get(nextIdx);
        }
    }",Find next broker  LoadManagerReport in round-robin fashion.,1,114
4313,"public static <E> Predicates.EqualsPredicate<E> equal(E object) {
        return new Predicates.EqualsPredicate<E>(object);
    }",Returns a Predicate that accepts all elements that are  Object#equals equal to the specified object.,1,43
4314,"public CallbackRequest handle(HttpServletRequest req) throws LineBotCallbackException, IOException {
        // validate signature
        final String signature = req.getHeader(""X-Line-Signature"");
        final byte[] json = ByteStreams.toByteArray(req.getInputStream());
        try {
            return parser.handle(signature, json);
        } catch (WebhookParseException e) {
            throw new LineBotCallbackException(e.getMessage());
        }
    }",Parses a request.,1,118
4315,"protected CrawlURI defaultURI() throws Exception {
        UURI uuri = UURIFactory.getInstance(""http://www.archive.org/start/"");
        return new CrawlURI(uuri, null, null, LinkContext.NAVLINK_MISC);
    }",Returns a CrawlURI for testing purposes.,1,56
4316,"public String getIdentifier()
    {
        return ID3v22Frames.FRAME_ID_V2_ENCRYPTED_FRAME;
    }",The ID3v2 frame identifier,1,22
4317,"public BufferedImage createTimeIntervalImage(double start, double end, int width, int height, Color fill, Color border, Color background) {
        if (start > end) {
            throw new IllegalArgumentException(""start should be less or equal than end"");
        }
        return createTimeIntervalImage(new double[]{start}, new double[]{end}, width, height, fill, border, background);
    }",Creates a time interval graphic representation with the indicated fill and border colors (or null to use default colors).,1,116
4318,"public static CrossReferenceAdapter getCrossReferenceAdapter(ResourceSet resourceSet) {
		if ( resourceSet == null ) {
			return null;
		}
		
		CrossReferenceAdapter result = getExistingCrossReferenceAdapter(
			resourceSet);
		
		if (result == null) {
			result = new CrossReferenceAdapter();
			resourceSet.eAdapters().add(result);
		}
		
		return result;
	}","Obtains the cross-reference adapter for the specified resource set, if necessary creating it and attaching it.",1,112
4319,"public String getClassName() {
        switch (sort) {
        case VOID:
            return ""void"";
        case BOOLEAN:
            return ""boolean"";
        case CHAR:
            return ""char"";
        case BYTE:
            return ""byte"";
        case SHORT:
            return ""short"";
        case INT:
            return ""int"";
        case FLOAT:
            return ""float"";
        case LONG:
            return ""long"";
        case DOUBLE:
            return ""double"";
        case ARRAY:
            StringBuilder sb = new StringBuilder(getElementType().getClassName());
            for (int i = getDimensions(); i > 0; --i) {
                sb.append(""[]"");
            }
            return sb.toString();
        case OBJECT:
            return new String(buf, off, len).replace('/', '.');
        default:
            return null;
        }
    }",Returns the binary name of the class corresponding to this type.,1,272
4320,"public final InputInitializerContext getContext() {
    return this.initializerContext;
  }",Return ahe  org.apache.tez.runtime.api.InputInitializerContext for this specific instance of the Initializer.,1,23
4321,"public String getPreviousColumn()
    {
        return _previousColumnName;
    }",Returns the name of the column after which the new column should be added.,1,20
4322,"protected static Map<String, Object> initAliases(InputStream in) {
		Map<String, Object> aliases = new HashMap<String, Object>(37);
		try {
			BufferedReader br;
			try {
				br = new BufferedReader(new InputStreamReader(in, ""UTF8"")); //$NON-NLS-1$
			} catch (UnsupportedEncodingException e) {
				br = new BufferedReader(new InputStreamReader(in));
			}
			while (true) {
				String line = br.readLine();
				if (line == null) /* EOF */{
					break; /* done */
				}
				Tokenizer tokenizer = new Tokenizer(line);
				String master = tokenizer.getString(""# \t""); //$NON-NLS-1$
				if (master != null) {
					aliases.put(master.toLowerCase(), master);
					parseloop: while (true) {
						String alias = tokenizer.getString(""# \t""); //$NON-NLS-1$
						if (alias == null) {
							break parseloop;
						}
						String lowerCaseAlias = alias.toLowerCase();
						Object storedMaster = aliases.get(lowerCaseAlias);
						if (storedMaster == null) {
							aliases.put(lowerCaseAlias, master);
						} else if (storedMaster instanceof String) {
							List<String> newMaster = new ArrayList<String>();
							newMaster.add((String) storedMaster);
							newMaster.add(master);
							aliases.put(lowerCaseAlias, newMaster);
						} else {
							@SuppressWarnings(""unchecked"")
							List<String> newMaster = ((List<String>) storedMaster);
							newMaster.add(master);
						}
					}
				}
			}
		} catch (IOException e) {
			if (Debug.DEBUG_GENERAL) {
				Debug.printStackTrace(e);
			}
		}
		return aliases;
	}",Read alias data and populate a Map.,1,524
4323,"@SuppressWarnings(""unchecked"")
	public static IOReadableWritable createCopy(IOReadableWritable original) {

		final ByteArrayOutputStream baos = new ByteArrayOutputStream();
		final DataOutputStream dos = new DataOutputStream(baos);

		try {
			original.write(dos);
		} catch (IOException ioe) {
			fail(ioe.getMessage());
		}

		final String className = original.getClass().getName();
		if (className == null) {
			fail(""Class name is null"");
		}

		Class<? extends IOReadableWritable> clazz = null;

		try {
			clazz = (Class<? extends IOReadableWritable>) Class.forName(className);
		} catch (ClassNotFoundException e) {
			fail(e.getMessage());
		}

		if (clazz == null) {
			fail(""Cannot find class with name "" + className);
		}

		IOReadableWritable copy = null;
		try {
			copy = clazz.newInstance();
		} catch (InstantiationException e) {
			fail(e.getMessage());
		} catch (IllegalAccessException e) {
			fail(e.getMessage());
		}

		if (copy == null) {
			fail(""Copy of object of type "" + className + "" is null"");
		}

		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
		final DataInputStream dis = new DataInputStream(bais);

		try {
			copy.read(dis);
		} catch (IOException e) {
			fail(e.getMessage());
		}

		return copy;
	}",Creates a copy of the given  IOReadableWritable object by an in-memory serialization and subsequent deserialization.,1,459
4324,"private ConfigurationDTO buildConfigurationModel()
			throws AnnotationRequired {

		if (!finder.isAnnotationPresent(Configure.class)) {
			return null;
		}

		ConfigurationDTO configuration = new ConfigurationDTO();
		configuration.setConfigurationClass(finder.getAnnotatedValue(
				Configure.class, Class.class, ""using"").getName());
		configuration.setKeywords(finder.getAnnotatedValue(Configure.class,
				Class.class, ""keywords"").getName());
		configuration.setFailureStrategy(finder.getAnnotatedValue(
				Configure.class, Class.class, ""failureStrategy"").getName());
		configuration.setPendingStepStrategy(finder.getAnnotatedValue(
				Configure.class, Class.class, ""pendingStepStrategy"").getName());
		configuration.setParanamer(finder.getAnnotatedValue(Configure.class,
				Class.class, ""paranamer"").getName());
		configuration.setStoryControls(finder.getAnnotatedValue(
				Configure.class, Class.class, ""storyControls"").getName());
		configuration.setStepCollector(finder.getAnnotatedValue(
				Configure.class, Class.class, ""stepCollector"").getName());
		configuration.setStepdocReporter(finder.getAnnotatedValue(
				Configure.class, Class.class, ""stepdocReporter"").getName());
		configuration.setStepFinder(finder.getAnnotatedValue(Configure.class,
				Class.class, ""stepFinder"").getName());
		configuration.setStepMonitor(finder.getAnnotatedValue(Configure.class,
				Class.class, ""stepMonitor"").getName());
		configuration.setStepPatternParser(finder.getAnnotatedValue(
				Configure.class, Class.class, ""stepPatternParser"").getName());
		configuration.setStoryLoader(finder.getAnnotatedValue(Configure.class,
				Class.class, ""storyLoader"").getName());
		configuration.setStoryParser(finder.getAnnotatedValue(Configure.class,
				Class.class, ""storyParser"").getName());
		configuration.setStoryPathResolver(finder.getAnnotatedValue(
				Configure.class, Class.class, ""storyPathResolver"").getName());
		configuration
				.setStoryReporterBuilder(finder.getAnnotatedValue(
						Configure.class, Class.class, ""storyReporterBuilder"")
						.getName());
		configuration.setViewGenerator(finder.getAnnotatedValue(
				Configure.class, Class.class, ""viewGenerator"").getName());
		configuration.setParameterConverters(parameterConverters());
		configuration.setParameterControls(finder.getAnnotatedValue(
				Configure.class, Class.class, ""parameterControls"").getName());
		configuration.setPathCalculator(finder.getAnnotatedValue(
				Configure.class, Class.class, ""pathCalculator"").getName());
		return configuration;
	}",Builds a ConfigurationDTO instance based on annotation  Configure found in the annotated object instance,1,651
4325,"public static FileManagerSettings fromId(String id) {
        FileManagerSettings[] values = values();
        int cc = values.length;
        for (int i = 0; i < cc; i++) {
            if (values[i].mId == id) {
                return values[i];
            }
        }
        return null;
    }",Method that returns an instance of  FileManagerSettings from its.,1,111
4326,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_RELATIVE_VOLUME_ADJUSTMENT2;
    }",The ID3v2 frame identifier,1,22
4327,"private Application triggerAllowParallel(JobType jobType, Application application, boolean first, String cause, Lock lock) {
        if (jobType == null) { // previous was last job
            return application;
        }

        // Note: We could make a more fine-grained and more correct determination about whether to block 
        //       by instead basing the decision on what is currently deployed in the zone. However,
        //       this leads to some additional corner cases, and the possibility of blocking an application
        //       fix to a version upgrade, so not doing it now
        if (jobType.isProduction() && application.deployingBlocked(clock.instant())) {
            return application;
        }
        
        if (application.deploymentJobs().isRunning(jobType, jobTimeoutLimit())) {
            return application;
        }

        // TODO: Remove when we can determine why this occurs
        if (jobType != JobType.component && ! application.deploying().isPresent()) {
            log.warning(String.format(""Want to trigger %s for %s with reason %s, but this application is not "" +
                                              ""currently deploying a change"",
                                      jobType, application, cause));
            return application;
        }

        if  ( ! deploysTo(application, jobType)) {
            return application;
        }

        // Note that this allows a new change to catch up and prevent an older one from continuing
        if ( ! application.deploymentJobs().isDeployableTo(jobType.environment(), application.deploying())) {
            log.warning(String.format(""Want to trigger %s for %s with reason %s, but change is untested"", jobType,
                                      application, cause));
            return application;
        }

        // Ignore applications that are not associated with a project
        if ( ! application.deploymentJobs().projectId().isPresent()) {
            return application;
        }

        log.info(String.format(""Triggering %s for %s, %s: %s"", jobType, application,
                               application.deploying().map(d -> ""deploying "" + d).orElse(""restarted deployment""),
                               cause));
        buildSystem.addJob(application.id(), jobType, first);

        return application.withJobTriggering(jobType, application.deploying(), clock.instant(), controller);
    }",Trigger a job for an application,1,463
4328,"private ServiceReference[] getInitialReferences(boolean trackAllServices,
			String className, String filterString)
			throws InvalidSyntaxException {
		if (trackAllServices) {
			return context.getAllServiceReferences(className, filterString);
		}
		else {
			return context.getServiceReferences(className, filterString);
		}
	}",Returns the list of initial ServiceReferences that will be tracked by this ServiceTracker.,1,82
4329,"private String getType(String propertyName, String explicitTargetEntity, ElementKind expectedElementKind) {
		for ( Element elem : element.getEnclosedElements() ) {
			if ( !expectedElementKind.equals( elem.getKind() ) ) {
				continue;
			}

			TypeMirror mirror;
			String name = elem.getSimpleName().toString();
			if ( ElementKind.METHOD.equals( elem.getKind() ) ) {
				name = StringUtil.getPropertyName( name );
				mirror = ( ( ExecutableElement ) elem ).getReturnType();
			}
			else {
				mirror = elem.asType();
			}

			if ( name == null || !name.equals( propertyName ) ) {
				continue;
			}

			if ( explicitTargetEntity != null ) {
				// TODO should there be a check of the target entity class and if it is loadable?
				return explicitTargetEntity;
			}

			switch ( mirror.getKind() ) {
				case INT: {
					return ""java.lang.Integer"";
				}
				case LONG: {
					return ""java.lang.Long"";
				}
				case BOOLEAN: {
					return ""java.lang.Boolean"";
				}
				case BYTE: {
					return ""java.lang.Byte"";
				}
				case SHORT: {
					return ""java.lang.Short"";
				}
				case CHAR: {
					return ""java.lang.Char"";
				}
				case FLOAT: {
					return ""java.lang.Float"";
				}
				case DOUBLE: {
					return ""java.lang.Double"";
				}
				case DECLARED: {
					return mirror.toString();
				}
				case TYPEVAR: {
					return mirror.toString();
				}
			}
		}

		context.logMessage(
				Diagnostic.Kind.WARNING,
				""Unable to determine type for property "" + propertyName + "" of class "" + getQualifiedName()
						+ "" using assess type "" + accessTypeInfo.getDefaultAccessType()
		);
		return null;
	}",Returns the entity type for a property.,1,529
4330,"public boolean canOnlyBeNull(LocalVariableBinding local) {
	return isDefinitelyNull(local) || isProtectedNull(local);
}","Check whether a given local variable is known to be null, either because it is definitely null, or because is has been tested against null.",1,32
4331,"@SuppressWarnings(""unchecked"")
	public static <T> T createCopy(final T original) {

		final Kryo kryo = new Kryo();
		final byte[] buf = new byte[8192];
		final Output output = new Output(buf);
		kryo.writeObject(output, original);
		output.flush();
		final Input input = new Input(buf);
		return (T) kryo.readObject(input, original.getClass());
	}",Creates a copy of the given object by an in-memory serialization and subsequent deserialization.,1,144
4332,"public static Cluster cloneCluster(Cluster cluster) {
        // Could add a better .clone() implementation that clones the derived
        // data structures. The constructor invoked by this clone implementation
        // can be slow for large numbers of partitions. Probably faster to copy
        // all the maps and stuff.
        return new Cluster(cluster.getName(),
                           new ArrayList<Node>(cluster.getNodes()),
                           new ArrayList<Zone>(cluster.getZones()));
        /*-
         * Historic ""clone"" code being kept in case this, for some reason, was the ""right"" way to be doing this.
        ClusterMapper mapper = new ClusterMapper();
        return mapper.readCluster(new StringReader(mapper.writeCluster(cluster)));
         */
    }","Clones the cluster by constructing a new one with same name, partition layout, and nodes.",1,80
4333,"public static String randMatrixName() {
    return randString(Constants.RANDOM, 5);
  }",Generate a random matrix name.,1,29
4334,"public Set<String> getChildren(final String path) throws KeeperException, InterruptedException {
        try {
            return getChildrenAsync(path, this).join();
        } catch (CompletionException e) {
            if (e.getCause() instanceof KeeperException) {
                throw (KeeperException)e.getCause();
            } else {
                throw e;
            }
        }
    }",Simple ZooKeeperChildrenCache use this method to invalidate cache entry on watch event w/o automatic re-loading,1,111
4335,"protected boolean persistFloat(float value) {
        if (!shouldPersist()) {
            return false;
        }

        if (value == getPersistedFloat(Float.NaN)) {
            // It's already there, so the same as persisting
            return true;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            dataStore.putFloat(mKey, value);
        } else {
            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putFloat(mKey, value);
            tryCommit(editor);
        }
        return true;
    }",Attempts to persist a  Float if this Preference is persistent.,1,159
4336,"public static H2TimeSeries deserialize(byte[] arr) throws IOException, ClassNotFoundException {
		ByteArrayInputStream bais = new ByteArrayInputStream(arr);
		ObjectInputStream ois = new ObjectInputStream(bais);
		return (H2TimeSeries) ois.readObject();
	}",Deserializes a H2TimeSeries from a byte array,1,71
4337,"public static final String print(final long address[]) {
		if(address==null || address.length==0) throw new IllegalArgumentException(""Address array was null or zero length"");
		final byte dim = getDimension(address[0]);
		StringBuilder b = new StringBuilder(String.format(""AllocationPointer >> [size: %s, capacity: %s, byteSize: %s]"", getSize(address[0]), getCapacity(address[0]), getEndOffset(address[0])));
		if(dim>1) {
			b.append(String.format(""\n\tAllocation Sizes >> [size: %s, capacity: %s, byteSize: %s]"", getSize(address[1]), getCapacity(address[1]), getEndOffset(address[1])));
			if(dim>2) b.append(String.format(""\n\tAllocation Alignment Overheads >> [size: %s, capacity: %s, byteSize: %s]"", getSize(address[2]), getCapacity(address[2]), getEndOffset(address[2])));
		}
		return b.toString();
	}",Prints the summary state of an AllocationPointer,1,244
4338,"protected Expression buildForBuiltInFunction(ParserRuleContext ctx, String functionName, ArrayList<ParameterExpression> paramExpressions) {
		// In global namespace, so it can be a builtin function
		// Double verification: verify passed function name is a (non-parameterized) built-in function.
		try {
			if (functions.contains(functionName)) {
				// It is a user function definition (which takes precedence if name same as built-in)
				return null;
			}
			
			Expression lsf = handleLanguageSpecificFunction(ctx, functionName, paramExpressions);
			if (lsf != null) {
				setFileLineColumn(lsf, ctx);
				return lsf;
			}

			BuiltinFunctionExpression bife = BuiltinFunctionExpression.getBuiltinFunctionExpression(ctx, functionName, paramExpressions, currentFile);
			if (bife != null) {
				// It is a builtin function
				return bife;
			}

			ParameterizedBuiltinFunctionExpression pbife = ParameterizedBuiltinFunctionExpression
					.getParamBuiltinFunctionExpression(ctx, functionName, paramExpressions, currentFile);
			if (pbife != null){
				// It is a parameterized builtin function
				return pbife;
			}

			// built-in read, rand ...
			DataExpression dbife = DataExpression.getDataExpression(ctx, functionName, paramExpressions, currentFile, errorListener);
			if (dbife != null){
				return dbife;
			}
		} 
		catch(Exception e) {
			notifyErrorListeners(""unable to process builtin function expression "" + functionName  + "":"" + e.getMessage(), ctx.start);
		}
		return null;
	}",Creates a builtin function expression.,1,331
4339,"private <K extends Key, V extends Value> DataSourceContract<K, V> createInput(
			Class<? extends InputFormat<K, V>> inputFormat, String resource) {
		final DataSourceContract<K, V> read = new DataSourceContract<K, V>(inputFormat, getResourcePath(resource),
			""Input"");
		return read;
	}",Creates an  DataSourceContract contract for the specified resource file in the temporary folder for arbitrary key/value pairs coming from the given input contract.,1,104
4340,"public RowsSupportFragment getRowsSupportFragment() {
        return mRowsSupportFragment;
    }",Get currently bound RowsSupportFragment or null if BrowseSupportFragment has not been created yet.,1,19
4341,"public static boolean isObject(String type) {
        char c = type.charAt(0);

        return c == 'L' || c == '[';
    }",Determines if the type can be represented by an  Object.,1,55
4342,"public List<ContentHandlerConfigMap> getMappings(String selector) {
        return targetMapTable.get(selector.toLowerCase());
    }",Get the  ContentHandlerConfigMap list for the supplied selector string.,1,34
4343,"@SuppressWarnings(""unchecked"")
    public Iterator<Integer> iterator() {
        if (ranges == null) {
            return Collections.emptyIterator(); // no values
        }

        IteratorChain chain = new IteratorChain();
        for (IntRange range : ranges) {
            chain.addIterator(range.iterator());
        }
        return chain;
    }",Gets an iterator over all values.,1,105
4344,"public boolean isActive() {
        // The sync needs to be enabled.
        if (!getPreferences().isSyncEnabled()) return false;

        // network is online.
        NetworkUtilities networkUtilities = new NetworkUtilities(getContext());
        if (!networkUtilities.isOnline()) return false;

        // wifi preferences
        if (getPreferences().shouldSyncOnlyOnWifi()) {
            if (!networkUtilities.isOnWiFi()) return false;
        }

        // check if a provider is selected? Default is Dropbox, so no need.

        return true;
    }","Indicates whether synchronization can be performed, meaning all of the criteria must be true: sync enabled, respect wi-fi sync setting, provider is selected, network is online.",1,123
4345,"public static Object emptyOptional() {
        // no need for double-checked locking
        if (emptyOptional != null) {
            return emptyOptional;
        }

        return emptyOptional = invokeNullaryFactoryMethod(""java.util.Optional"", ""empty"");
    }",Creates an empty Optional using reflection to stay backwards-compatible with older JDKs.,1,62
4346,"public static Iterator<KGraphElement> getConnectedElements(final KEdge kedge,
            final boolean addPorts) {

        final SelectionIterator sourceSideIt = new DefaultSelectionIterator(kedge, addPorts, false);
        final SelectionIterator targetSideIt = new DefaultSelectionIterator(kedge, addPorts, true);

        return getConnectedElements(kedge, sourceSideIt, targetSideIt);
    }",Determines the  KGraphElement KGraphElements that are (transitively) connected to  kedge across hierarchy boundaries via common ports.,1,94
4347,"protected Account getAccount(Object principal) {

        if ( principal == null ) {
            return null;
        }

        Account account = null;

        if (log.isDebugEnabled()) {
            log.debug(""Retrieving Account for principal ["" + principal + ""]"");
        }

        boolean cacheEnabled = isAccountCacheEnabled();
        Cache accountCache = null;
        if (cacheEnabled) {
            accountCache = getAccountCache();
            if (accountCache != null) {
                if (log.isTraceEnabled()) {
                    log.trace(""Attempting to retrieve the Account from cache."");
                }
                account = (Account) accountCache.get(principal);
                if (log.isTraceEnabled()) {
                    if (account == null) {
                        log.trace(""No Account found in cache for principal ["" + principal + ""]"");
                    } else {
                        log.trace(""Account found in cache for principal ["" + principal + ""]"");
                    }
                }
            }
        }


        if (account == null) {
            // Call template method if tbe Account was not found in a cache
            account = doGetAccount(principal);
            // If the account is not null and the cache has been created, then cache the account.
            if (account != null && accountCache != null) {
                if (log.isTraceEnabled()) {
                    log.trace(""Caching Account ["" + principal + ""]."");
                }
                accountCache.put(principal, account);
            }
        }

        return account;
    }",Retrieves Account information for the given account principal.,1,398
4348,"public Collection<Object> getIQProviders() {
        return Collections.unmodifiableCollection(iqProviders.values());
    }",Returns an unmodifiable collection of all IQProvider instances.,1,31
4349,"public PanelExpansion getPanelExpansion() {
        for (UIComponent kid : getChildren())
            if (kid instanceof PanelExpansion) return (PanelExpansion) kid;
        return null;
    }","If a PanelExpansion component is a child of this table, return it.",1,54
4350,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_RELEASE_TIME;
    }",The ID3v2 frame identifier,1,22
4351,"protected AuthenticationEvent createSuccessEvent( AuthenticationToken token, Account account ) {
        AuthenticationEventFactory factory = getAuthenticationEventFactory();
        return factory.createSuccessEvent( token, account );
    }","Creates an AuthenticationEvent in the event of a successful authentication attempt, based on the given authentication token and Account that was created as a result of the successful attempt.",1,51
4352,"public static Repository getRepository(Uri uri) {
        List<String> segments = uri.getPathSegments();
        if (segments == null)
            return null;
        if (segments.size() < 2)
            return null;

        String repoOwner = segments.get(0);
        if (!RepositoryUtils.isValidOwner(repoOwner))
            return null;

        String repoName = segments.get(1);
        if (!RepositoryUtils.isValidRepo(repoName))
            return null;

        return InfoUtils.createRepoFromData(repoOwner, repoName);
    }",Attempt to parse a  Repository from the given  Uri,1,159
4353,"public Collection<String> getPropertyKeys(Object obj) {
        if (isArray(obj)) {
          throw new UnsupportedOperationException();
        } else {
            return ((Map) obj).keySet();
        }
    }",Returns the keys from the given object,1,67
4354,"public ProjectPreferences loadProjectPreferences(IProject project, Map<String, Validator> baseValidators) 
		throws BackingStoreException {
		
		IEclipsePreferences pref = getPreferences();

		if (pref == null)return null;
		int version = pref.getInt(PrefConstants.frameworkVersion, 0);
		if (version == 0){
			// This means that we have a project that is before WTP 3.0
			return migrateFromBeforeWTP30(project, baseValidators);
		}
		
		if (version != ValPrefManagerGlobal.frameworkVersion)ValPrefManagerGlobal.migrate(version, pref);

		if (!pref.nodeExists(PrefConstants.vals)){
			return new ProjectPreferences(project, pref.getBoolean(PrefConstants.override, ProjectPreferences.DefaultOverride),
				pref.getBoolean(PrefConstants.suspend, ProjectPreferences.DefaultSuspend), new Validator[0]);
		}
		
		Preferences vp = pref.node(PrefConstants.vals);
		List<Validator> list = new LinkedList<Validator>();
		for (String id : vp.childrenNames()){
			Validator base = baseValidators.get(id);
			Validator v = ValPrefManagerGlobal.loadValidator(id, vp, base);
			if (v != null){
				V2 v2 = v.asV2Validator();
				if (v2 != null)v2.setLevel(Validator.Level.Project);
				list.add(v);
			}
		}
		Validator[] vals = new Validator[list.size()];
		list.toArray(vals);
		return new ProjectPreferences(project, pref.getBoolean(PrefConstants.override, ProjectPreferences.DefaultOverride),
			pref.getBoolean(PrefConstants.suspend, ProjectPreferences.DefaultSuspend), vals);
	}",Answer the project preferences from the preference store.,1,444
4355,"private Application triggerAllowParallel(JobType jobType, Application application, boolean first, String cause, Lock lock) {
        if (jobType == null) { // previous was last job
            return application;
        }

        // Note: We could make a more fine-grained and more correct determination about whether to block 
        //       by instead basing the decision on what is currently deployed in the zone. However,
        //       this leads to some additional corner cases, and the possibility of blocking an application
        //       fix to a version upgrade, so not doing it now
        if (jobType.isProduction() && application.deployingBlocked(clock.instant())) {
            return application;
        }
        
        if (application.deploymentJobs().isRunning(jobType, jobTimeoutLimit())) {
            return application;
        }

        // TODO: Remove when we can determine why this occurs
        if (jobType != JobType.component && ! application.deploying().isPresent()) {
            log.warning(String.format(""Want to trigger %s for %s with reason %s, but this application is not "" +
                                              ""currently deploying a change"",
                                      jobType, application, cause));
            return application;
        }

        if  ( ! deploysTo(application, jobType)) {
            return application;
        }

        // Note that this allows a new change to catch up and prevent an older one from continuing
        if ( ! application.deploymentJobs().isDeployableTo(jobType.environment(), application.deploying())) {
            log.warning(String.format(""Want to trigger %s for %s with reason %s, but change is untested"", jobType,
                                      application, cause));
            return application;
        }

        // Ignore applications that are not associated with a project
        if ( ! application.deploymentJobs().projectId().isPresent()) {
            return application;
        }

        log.info(String.format(""Triggering %s for %s, %s: %s"", jobType, application,
                               application.deploying().map(d -> ""deploying "" + d).orElse(""restarted deployment""),
                               cause));
        buildSystem.addJob(application.id(), jobType, first);

        return application.withJobTriggering(jobType, application.deploying(), clock.instant(), controller);
    }",Trigger a job for an application,1,463
4356,"public String getIdentifier()
    {
        return  ID3v24Frames. FRAME_ID_MUSICIAN_CREDITS;
    }",The ID3v2 frame identifier,1,23
4357,"private Instance removeInstanceFrom(Iterator<Instance> iterator, String instanceId) {
        while (iterator.hasNext()) {
            Instance activeInstance = iterator.next();
            if (activeInstance == null) {
                iterator.remove();
                continue;
            }
            if (instanceId.equals(activeInstance.getInstanceId())) {
                iterator.remove();
                return activeInstance;
            }
        }

        return null;
    }",Removes the  org.apache.stratos.messaging.domain.instance.Instance object mapping to the specified instance id from the specified InstanceContext collection,1,125
4358,"public Frame score(Frame frame) {
    if (!get_params().autoencoder) {
      return super.score(frame);
    } else {
      // Reconstruction
      // Adapt the Frame layout - returns adapted frame and frame containing only
      // newly created vectors
      Frame[] adaptFrms = adapt(frame,false,false/*no response*/);
      // Adapted frame containing all columns - mix of original vectors from fr
      // and newly created vectors serving as adaptors
      Frame adaptFrm = adaptFrms[0];
      // Contains only newly created vectors. The frame eases deletion of these vectors.
      Frame onlyAdaptFrm = adaptFrms[1];

      final int len = model_info().data_info().fullN();
      String prefix = ""reconstr_"";
      assert(model_info().data_info()._responses == 0);
      String[] coefnames = model_info().data_info().coefNames();
      assert(len == coefnames.length);
      for( int c=0; c<len; c++ )
        adaptFrm.add(prefix+coefnames[c],adaptFrm.anyVec().makeZero());
      new MRTask2() {
        @Override public void map( Chunk chks[] ) {
          double tmp [] = new double[_names.length];
          float preds[] = new float [len];
          final Neurons[] neurons = DeepLearningTask.makeNeuronsForTesting(model_info);
          for( int row=0; row<chks[0]._len; row++ ) {
            float p[] = score_autoencoder(chks, row, tmp, preds, neurons);
            for( int c=0; c<preds.length; c++ )
              chks[_names.length+c].set0(row,p[c]);
          }
        }
      }.doAll(adaptFrm);

      // Return just the output columns
      int x=_names.length, y=adaptFrm.numCols();
      onlyAdaptFrm.delete();
      return adaptFrm.extractFrame(x, y);
    }
  }",This is an overridden version of Model.score().,1,499
4359,"public static CompletionStage<Void> asyncEnsureContainers(AsyncCuratorFramework client, ZPath path)
    {
        return asyncEnsureContainers(client, path, null);
    }",Asynchronously call  org.apache.curator.framework.CuratorFramework#createContainers(String) using the  java.util.concurrent.ForkJoinPool#commonPool().,1,42
4360,"public TargetLanguage language() {
    return language;
  }",Returns the language.,1,19
4361,"public boolean isAlive() {
    if (pid == -1) {
      return false;
    } else {
      return isAlive(pid.toString());
    }
  }",Is the root-process alive?,1,57
4362,"protected String[] getPrincipalsAndCredentials( String authorizationHeader, ServletRequest request ) {
        if ( authorizationHeader == null ) {
            return null;
        }
        String[] authTokens = authorizationHeader.split("" "");
        if ( authTokens == null || authTokens.length < 2 ) {
            return null;
        }
        return getPrincipalsAndCredentials(authTokens[0], authTokens[1]);
    }",Returns the username obtained from the  #getAuthzHeader(javax.servlet.ServletRequest) authorizationHeader.,1,123
4363,"public PHPexeItem getDefaultItem() {
		return PHPDebugPlugin.getWorkspaceDefaultExe();
	}",Returns the default workspace PHPexeItem.,1,23
4364,"public Session createSession(SessionContext initData) {
        if (initData != null) {
            String host = initData.getHost();
            if (host != null) {
                return new SimpleSession(host);
            }
        }
        return new SimpleSession();
    }",Creates a new  SimpleSession SimpleSession instance retaining the context's  SessionContext#getHost() host if one can be found.,1,85
4365,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_AUDIO_SEEK_POINT_INDEX;
    }",The ID3v2 frame identifier,1,22
4366,"@Nullable
    default OpcUaBinaryDataTypeCodec<?> getBinaryCodec(String namespaceUri, String description) {
        DataTypeCodec codec = getCodec(namespaceUri, description);

        if (codec instanceof OpcUaBinaryDataTypeCodec) {
            return (OpcUaBinaryDataTypeCodec) codec;
        } else {
            return null;
        }
    }",Get the  OpcUaBinaryDataTypeCodec identified by  description from the dictionary identified by  namespaceUri.,1,83
4367,"public RestLiResponse build()
    {
      if (_record instanceof IdResponse)
      {
        final IdResponse<?> idResponse = (IdResponse<?>) _record;
        final Object key = idResponse.getId();
        if (key != null)
        {
          final ProtocolVersion protocolVersion = ProtocolVersionUtil.extractProtocolVersion(_headers);
          _headers.put(HeaderUtil.getIdHeaderName(protocolVersion), URIParamUtils.encodeKeyForHeader(key, protocolVersion));
        }
      }

      return new RestLiResponse(_status, _record, _headers, _cookies);
    }",Construct a  RestLiResponse based on the builder configuration.,1,150
4368,"public SamlAssertionWrapper getTransformedToken() {
        return transformedToken;
    }",Get an SamlAssertionWrapper instance which corresponds to a Transformed Token.,1,19
4369,"public List<String> getPortraits(){
		return this.portraits;
	}",Get a list of portrait image ids.,1,23
4370,"public Long nextExecutionTime() {
			Date nextExec = cex.getNextValidTimeAfter(new Date());
			if(nextExec==null) return null;
			return nextExec.getTime();
		}",Returns the next valid execution time in ms.UTC after now,1,56
4371,"protected SharedObjectDescription[] getReplicaDescriptions(ID[] receivers) {
		SharedObjectDescription[] descriptions = null;
		if (receivers == null || receivers.length == 1) {
			descriptions = new SharedObjectDescription[1];
			descriptions[0] = getReplicaDescription((receivers==null)?null:receivers[0]);
		} else {
			descriptions = new SharedObjectDescription[receivers.length];
			for(int i=0; i < receivers.length; i++) {
				descriptions[i] = getReplicaDescription(receivers[i]);
			}
		}
		return descriptions;
	}",This method is called by an event processor to determine the SharedObjectDescriptions associated with the given receivers.,1,174
4372,"public Dependency setScope( String scope )
    {
        if ( this.scope.equals( scope ) || ( scope == null && this.scope.length() <= 0 ) )
        {
            return this;
        }
        return new Dependency( artifact, scope, optional, exclusions );
    }","Sets the scope of the dependency, e.g.",1,101
4373,"public static <T> Set<T> getDeletedInTarget(final Set<T> current, final Set<T> target) {
        if(current == null || target == null) {
            return new HashSet<T>();
        }
        return getDiff(current, target);
    }","Returns a set of objects that were deleted in the target set getDeletedInTarget(current, null) - everything was deleted, returns current.",1,91
4374,"public static Authentication create(String authPluginClassName, Map<String, String> authParams)
            throws UnsupportedAuthenticationException {
        try {
            return DefaultImplementation.createAuthentication(authPluginClassName, authParams);
        } catch (Throwable t) {
            throw new UnsupportedAuthenticationException(t);
        }
    }",Create an instance of the Authentication-Plugin.,1,80
4375,"public static final ATMethod downMethod(ATObject natObject, String jSelector, ATSymbol origName) throws InterpreterException {
		return new NativeMethod(JavaInterfaceAdaptor.getMethod(natObject.getClass(), natObject, jSelector), origName);
	}",Constructs an AmbientTalk ATMethod from a Java method.,1,63
4376,"public static Element findElementById(Node startNode, String value,
            String namespace) {
        Element foundElement = null;

        /*
         * Replace the formely recursive implementation with a depth-first-loop
         * lookup
         */
        if (startNode == null) {
            return null;
        }
        Node startParent = startNode.getParentNode();
        Node processedNode = null;

        while (startNode != null) {
            // start node processing at this point
            if (startNode.getNodeType() == Node.ELEMENT_NODE) {
                Element se = (Element) startNode;
                if (se.hasAttributeNS(namespace, ""Id"")
                        && value.equals(se.getAttributeNS(namespace, ""Id""))) {
                    if (foundElement == null) {
                        foundElement = se; // Continue searching to find
                        // duplicates
                    } else {
                        log
                                .warn(""Multiple elements with the same 'Id' attribute value!"");
                        return null;
                    }
                }
            }

            processedNode = startNode;
            startNode = startNode.getFirstChild();

            // no child, this node is done.
            if (startNode == null) {
                // close node processing, get sibling
                startNode = processedNode.getNextSibling();
            }
            // no more siblings, get parent, all children
            // of parent are processed.
            while (startNode == null) {
                processedNode = processedNode.getParentNode();
                if (processedNode == startParent) {
                    return foundElement;
                }
                // close parent node processing (processed node now)
                startNode = processedNode.getNextSibling();
            }
        }
        return foundElement;
    }",Returns the single element that containes an Id with value uri and namespace.,1,383
4377,"public int position(){
		if(this.player != null){
			return this.player.position();
		}
		
		return -1;
	}",Get playback position of current track.,1,50
4378,"protected boolean persistString(String value) {
        if (!shouldPersist()) {
            return false;
        }

        // Shouldn't store null
        if (TextUtils.equals(value, getPersistedString(null))) {
            // It's already there, so the same as persisting
            return true;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            dataStore.putString(mKey, value);
        } else {
            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putString(mKey, value);
            tryCommit(editor);
        }
        return true;
    }",Attempts to persist a  String if this Preference is persistent.,1,163
4379,"public static EdmPrimitiveTypeKind valueOfFQN(final FullQualifiedName fqn) {
    return valueOfFQN(fqn.toString());
  }","Gets EdmPrimitiveTypeKind from a full-qualified type name, for the given OData protocol version.",1,33
4380,"public RowsFragment getRowsFragment() {
        if (mMainFragment instanceof RowsFragment) {
            return (RowsFragment) mMainFragment;
        }

        return null;
    }",Get RowsFragment if it's bound to BrowseFragment or null if either BrowseFragment has not been created yet or a different fragment is bound to it.,1,46
4381,"public static DefinitionsFactory createDefinitionsFactory(
        DefinitionsFactoryConfig factoryConfig)
        throws DefinitionsFactoryException {
        return tilesUtilImpl.createDefinitionsFactory(factoryConfig);
    }",Create Definition impl from specified configuration object.,1,36
4382,"public RowsSupportFragment getRowsSupportFragment() {
        return (RowsSupportFragment)mMainFragment;
    }",Get currently bound RowsSupportFragment or null if BrowseSupportFragment has not been created yet.,1,22
4383,"public List<Group> getGroupSettingsList(boolean forceUpdate) throws IOException {
		return getSettings(forceUpdate).getGroupSettingsList();
	}",Returns the Group list - Lazy,1,36
4384,"public boolean isOverBudget() {
        // check whether session budget exceeded
        // or totalExpenditure exceeds totalBudget
        return (sessionBudget > 0 && (totalExpenditure - expenditureAtLastActivation) > sessionBudget)
            || (this.totalBudget >= 0 && this.totalExpenditure >= this.totalBudget);
    }",Check whether queue has temporarily (session) or permanently (total) exceeded its budgets.,1,75
4385,"@Deprecated
    protected boolean validate(String name) {
        return true;
    }",Unused.,1,25
4386,"protected Configuration doConfigure(InputStream stream, String resourceName) throws HibernateException {
		try {
			List errors = new ArrayList();
			Document document = xmlHelper.createSAXReader( resourceName, errors, entityResolver )
					.read( new InputSource( stream ) );
			if ( errors.size() != 0 ) {
				throw new MappingException( ""invalid configuration"", (Throwable) errors.get( 0 ) );
			}
			doConfigure( document );
		}
		catch (DocumentException e) {
			throw new HibernateException( ""Could not parse configuration: "" + resourceName, e );
		}
		finally {
			try {
				stream.close();
			}
			catch (IOException ioe) {
				log.warn( ""could not close input stream for: "" + resourceName, ioe );
			}
		}
		return this;
	}",Configure this configuration's state from the contents of the given input stream.,1,247
4387,"public String getDatabaseStorageDirectory() {
        //get external storage
        File externalStorage;
        externalStorage = Environment.getExternalStorageDirectory();

        if (externalStorage == null || !externalStorage.exists() || !externalStorage.isDirectory() || !externalStorage.canWrite()) {
            return getContext().getFilesDir().getAbsolutePath();
        }

        File defaultFolder = new File(externalStorage + File.separator + getContext().getPackageName());
        if (!defaultFolder.exists()) {
            defaultFolder = new File(externalStorage + ""/MoneyManagerEx"");
            if (!defaultFolder.exists()) {
                //make a directory
                if (!defaultFolder.mkdirs()) {
                    return getContext().getFilesDir().getAbsolutePath();
                }
            }
        }
//        return defaultFolder;

        String databasePath;

        if (defaultFolder.getAbsoluteFile().exists()) {
            databasePath = defaultFolder.toString();
        } else {
            String internalFolder;
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1) {
                internalFolder = getContext().getApplicationInfo().dataDir;
            } else {
                internalFolder = ""/data/data/"" + getContext().getApplicationContext().getPackageName();
            }
            // add databases
            internalFolder += ""/databases""; // ""/data.mmb"";
            databasePath = internalFolder;
        }

        return databasePath;
    }",Gets the directory on external storage where the database is (to be) stored.,1,385
4388,"protected AbstractShiroFilter createInstance() throws Exception {

        log.debug(""Creating Shiro Filter instance."");

        SecurityManager securityManager = getSecurityManager();
        if (securityManager == null) {
            String msg = ""SecurityManager property must be set."";
            throw new BeanInitializationException(msg);
        }

        FilterChainManager manager = createFilterChainManager();

        //Expose the constructed FilterChainManager by first wrapping it in a
        // FilterChainResolver implementation. The ShiroFilter implementations
        // do not know about FilterChainManagers - only resolvers:
        PathMatchingFilterChainResolver chainResolver = new PathMatchingFilterChainResolver();
        chainResolver.setFilterChainManager(manager);

        //Now create a ShiroFilter and apply the acquired SecurityManager and built
        //FilterChainResolver.  It doesn't matter that the ShiroFilter instance is an INI filter
        //here - we're just using it because it is a concrete ShiroFilter instance that accepts
        //injection of the SecurityManager and FilterChainResolver:
        IniShiroFilter shiroFilter = new IniShiroFilter();
        shiroFilter.setSecurityManager(securityManager);
        shiroFilter.setFilterChainResolver(chainResolver);

        return shiroFilter;
    }",This implementation:  Ensures the required  #setSecurityManager(org.apache.shiro.mgt.SecurityManager) securityManager property has been set  #createFilterChainManager() Creates a  FilterChainManager instance that reflects the configured  #setFilters(java.util.Map) filters and  #setFilterChainDefinitionMap(java.util.Map) filter chain definitions Wraps the FilterChainManager with a suitable  org.apache.shiro.web.filter.mgt.FilterChainResolver FilterChainResolver since the Shiro Filter implementations do not know of  FilterChainManagers Sets both the  SecurityManager and  FilterChainResolver instances on a new Shiro Filter instance and returns that filter instance.,1,180
4389,"protected boolean isLoginAttempt(String authzHeader) {
        String authzScheme = getAuthzScheme().toLowerCase();
        return authzHeader.toLowerCase().startsWith(authzScheme);
    }","Default implementation that returns true if the specified authzHeader starts with the same (case-insensitive) characters specified by the  #getAuthzScheme() authzScheme, false otherwise.",1,47
4390,"static DocumentEntity of(String name) throws NullPointerException {
        return new DefaultDocumentEntity(name);
    }",Creates a  DocumentEntity instance,1,31
4391,"public static Map<String, String> getAllGetterMethods(PsiClass psiClass, String currentMethodName) {
        Map<String, String> methodNames = new HashMap<String, String>();
        PsiMethod[] psiMethods = null;
        String prefix = """";
        //flat field
        if (!currentMethodName.contains(""."")) {
            psiMethods = psiClass.getAllMethods();
        } else {
            prefix = currentMethodName.substring(0, currentMethodName.lastIndexOf('.'));
            String getterMethod = ""get"" + StringUtil.capitalize(prefix);
            PsiClass psiFieldClass = findGetterMethodReturnType(psiClass, getterMethod);
            if (psiFieldClass != null) {
                psiMethods = psiFieldClass.getAllMethods();
                prefix = prefix + ""."";
            }
        }
        if (psiMethods != null && psiMethods.length > 0) {
            for (PsiMethod psiMethod : psiMethods) {
                String methodName = psiMethod.getName();
                if (methodName.startsWith(""get"") && psiMethod.getParameterList().getParametersCount() == 0) {
                    String name = prefix + StringUtil.decapitalize(methodName.replaceFirst(""get"", """"));
                    String type = psiMethod.getReturnType().getPresentableText();
                    methodNames.put(name, type);
                }
                if (methodName.startsWith(""is"") && psiMethod.getParameterList().getParametersCount() == 0) {
                    String name = prefix + StringUtil.decapitalize(methodName.replaceFirst(""is"", """"));
                    String type = psiMethod.getReturnType().getPresentableText();
                    methodNames.put(name, type);
                }
            }
        }
        methodNames.remove(""class"");    //getClass is controled by JVM
        return methodNames;
    }",get all get method in psi class with return type,1,494
4392,"public boolean mkdirs() {
        return mkdirs(false);
    }","Creates the directory named by this file, creating missing parent directories if necessary.",1,22
4393,"public int getItemHeight()
    {
        checkWidget();
        return itemHeight;
    }",Returns the default height of the items in this Grid.,1,26
4394,"private boolean allOfSameKind(IFolder[] folders) {
		int libraryFolderCount = 0;

		// count the library folders in the array
		for (IResource folder : folders) {
			if (LibraryFolderManager.getInstance().isInLibraryFolder(folder)) {
				libraryFolderCount++;
			}
		}

		// If the number of library folders is 0, then all folders are source
		// folders. If the number of library folders equals the number of given
		// folders, then all folders are library folders. In any other case,
		// there is a mixture of library folders and source folders.
		return libraryFolderCount == 0 || libraryFolderCount == folders.length;
	}",Returns whether the given folders are either all library folders or all source folders.,1,113
4395,"protected static int parseDuration( String str )
    {
        int minutes = 0;
        if (str == null)
            return 0;

        try
        {
            // for now ignore this special duration notation
            // because P1M != PT1M but there are wrong edits in OSM! e.g. http://www.openstreetmap.org/way/24791405
            // http://wiki.openstreetmap.org/wiki/Key:duration
            if (str.startsWith(""P""))
                return minutes;

            int index = str.indexOf("":"");
            if (index > 0)
            {
                String hourStr = str.substring(0, index);
                String minStr = str.substring(index + 1);
                index = minStr.indexOf("":"");
                if (index > 0)
                {
                    // string contains seconds too: we ignore them
                    minStr = minStr.substring(0, index);
                }

                minutes += Integer.parseInt(hourStr) * 60;
                minutes += Integer.parseInt(minStr);
                return minutes;
            } else
            {
                return Integer.parseInt(str);
            }
        } catch (Exception ex)
        {
            logger.warn(""Cannot parse "" + str + "" using 0 minutes"");
        }
        return minutes;
    }","This method parses a string ala 'hh:mm', format for hours and minutes 'mm', 'hh:mm' or 'hh:mm:ss'",1,310
4396,"@SuppressWarnings(""unchecked"")
	public static IOReadableWritable createCopy(IOReadableWritable original) {

		final ByteArrayOutputStream baos = new ByteArrayOutputStream();
		final DataOutputStream dos = new DataOutputStream(baos);

		try {
			original.write(dos);
		} catch (IOException ioe) {
			fail(ioe.getMessage());
		}

		final String className = original.getClass().getName();
		if (className == null) {
			fail(""Class name is null"");
		}

		Class<? extends IOReadableWritable> clazz = null;

		try {
			clazz = (Class<? extends IOReadableWritable>) Class.forName(className);
		} catch (ClassNotFoundException e) {
			fail(e.getMessage());
		}

		if (clazz == null) {
			fail(""Cannot find class with name "" + className);
		}

		IOReadableWritable copy = null;
		try {
			copy = clazz.newInstance();
		} catch (InstantiationException e) {
			fail(e.getMessage());
		} catch (IllegalAccessException e) {
			fail(e.getMessage());
		}

		if (copy == null) {
			fail(""Copy of object of type "" + className + "" is null"");
		}

		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
		final DataInputStream dis = new DataInputStream(bais);

		try {
			copy.read(dis);
		} catch (IOException e) {
			fail(e.getMessage());
		}

		return copy;
	}",Creates a copy of the given  IOReadableWritable object by an in-memory serialization and subsequent deserialization.,1,459
4397,"@Override
  public final boolean dealWithBytes(InputStream inputStream)
    throws IOException, ManifoldCFException
  {
    while (true)
    {
      int amt = inputStream.read(byteBuffer);
      if (amt == -1)
        return false;
      for (int i = 0; i < amt; i++)
      {
        if (dealWithByte(byteBuffer[i]))
          return true;
      }
    }
  }",Read a byte stream and process bytes.,1,127
4398,"public AuthenticationEvent createSuccessEvent(AuthenticationToken token, AuthenticationInfo info) {
        return new SuccessfulAuthenticationEvent(token, info);
    }",Uses the principal found in the AuthenticationInfo parameter (not the authentication token) to construct a  org.jsecurity.authc.event.SuccessfulAuthenticationEvent,1,35
4399,"public List<T> getValues(Interval<T> interval) {
		List<T> result = new ArrayList<T>();
		for (Interval<T> i : intervalTree.search(interval))
			result.add(i.getValue());
		return result;
	}",Returns a list of values whose time intervals overlap with a given time interval.,1,82
4400,"public static List fetchAllActionResults(
        List resultList,
        int action, 
        List actionResultList
    ) {
        for (int i = 0; i < resultList.size(); i++) {
            //
            // Check the result of every action whether it matches the given action
            //
            WSSecurityEngineResult result = 
                (WSSecurityEngineResult) resultList.get(i);
            int resultAction = 
                ((java.lang.Integer)result.get(WSSecurityEngineResult.TAG_ACTION)).intValue();
            if (resultAction == action) {
                actionResultList.add(result);
            }
        }
        return actionResultList;
    }",Fetch the result of a given action from a given result list.,1,163
4401,"@Processor
    @InvalidateConnectionOn(exception = NotAuthenticatedException.class)
    public Note readNote(String objectId) {
        return (Note) read(ServiceSourceCollection.Notes, objectId);
    }",Fetches the note identified by the object id in the collection.,1,49
4402,"private boolean isExtendedContentDescriptionMandatory(Tag tag)
    {
        /*
         * last changes store all values in extended content description. Even those which are normally
         * stored in the content description chunk.
         * The content description chunk is still provided for legacy applications. 
         */
        return !tag.isEmpty();
    }",This method decides if an extended property chunk is needed in order to store selected values of tag.,1,31
4403,"public static boolean validateTruststoreSetIfRequired(ModelNode attributes) {
        if (isSet(attributes, DISABLE_TRUST_MANAGER)) {
            return true;
        }

        if (isSet(attributes, SSL_REQUIRED) && attributes.get(SSL_REQUIRED.getName()).asString().equals(""none"")) {
            return true;
        }

        return isSet(attributes, TRUSTSTORE) && isSet(attributes, TRUSTSTORE_PASSWORD);
    }",truststore and truststore-password must be set if ssl-required is not none and disable-trust-manager is false.,1,116
4404,"public RawComparator getOutputKeyComparator() {
    Class theClass = getClass(""mapred.output.key.comparator.class"", null,
    		RawComparator.class);
    if (theClass != null)
      return (RawComparator)ReflectionUtils.newInstance(theClass, this);
    return WritableComparator.get(getMapOutputKeyClass());
  }",Get the  RawComparator comparator used to compare keys.,1,79
4405,"public IFile file(URI uri) {
    IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
    IPath path = pathOf(uri);
    return (path != null) ? root.getFile(path) : null;
  }",Returns a handle to a workspace file identified by the given URI.,1,73
4406,"private List<ByteArray> readKey(String requestURI) {
        List<ByteArray> keyList = null;
        String[] parts = requestURI.split(""/"");
        if(parts.length > 2) {
            String base64KeyList = parts[2];
            keyList = new ArrayList<ByteArray>();

            if(!base64KeyList.contains("","")) {
                String rawKey = base64KeyList.trim();
                keyList.add(new ByteArray(Base64.decodeBase64(rawKey.getBytes())));
            } else {
                String[] base64KeyArray = base64KeyList.split("","");
                for(String base64Key: base64KeyArray) {
                    String rawKey = base64Key.trim();
                    keyList.add(new ByteArray(Base64.decodeBase64(rawKey.getBytes())));
                }
            }
        }
        return keyList;
    }",Method to read a key (or keys) present in the HTTP request URI.,1,238
4407,"protected LdapSecurityInfo queryForLdapDirectoryInfo(String username, LdapContext ctx) throws NamingException {

        LdapSecurityInfo info = new LdapSecurityInfo();


        SearchControls searchCtls = new SearchControls();
        searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);

        String searchFilter = ""(&(objectClass=*)(userPrincipalName="" + username + ""))"";

        // Perform context search
        NamingEnumeration answer = ctx.search(searchBase, searchFilter, searchCtls);

        while (answer.hasMoreElements()) {
            SearchResult sr = (SearchResult) answer.next();

            log.debug(""Retrieving group names for user ["" + sr.getName() + ""]"");

            Attributes attrs = sr.getAttributes();

            if (attrs != null) {
                NamingEnumeration ae = attrs.getAll();
                while( ae.hasMore() ) {
                    Attribute attr = (Attribute) ae.next();
                    processAttribute(info, attr);
                }
            }
        }

        return info;
    }",Builds an  LdapSecurityInfo object by querying the active directory LDAP context for the specified username. This method can be overridden by subclasses to query the LDAP server in a more complex way.,1,275
4408,"@Override
    public List<TModel> queryList() {
        checkSelect(""query"");
        return super.queryList();
    }",Queries for all of the results this statement returns from a DB cursor in the form of the  TModel,1,38
4409,"public static Node buildNode(String content) {
        return buildNode(null, content);
    }",Construct a node structure for the given content.,1,30
4410,"public OutputStream getOutputStream() throws StreamException {
        if (outputStream != null) {
            closeStartTag();
            flushBuffer();
            return outputStream;
        } else {
            return null;
        }
    }",Get the output stream events are serialized to.,1,65
4411,"public static DocumentContext parse(Object json) {
        return new JsonReader().parse(json);
    }",Parses the given JSON input using the default  Configuration and returns a  DocumentContext for path evaluation,1,33
4412,"public Predicate<? super E> getLeftPredicate() {
            return left;
        }",Returns the left side Predicate.,1,26
4413,"public boolean cannotBeNull(VariableBinding binding) {
	return isDefinitelyNonNull(binding) || isProtectedNonNull(binding);
}","Check whether a given field or local variable is known to be non null, either because it is definitely non null, or because is has been tested against non null.",1,32
4414,"public static boolean hasEntry(File file, String searchedEntryName)
            throws IOException {
        List<String> elements = getEntryNames(file);
        return elements.contains(searchedEntryName);
    }",Checks if a zip file contains a specified searchedEntryName,1,55
4415,"protected RemoteSharedObjectDescription getReplicaDescription(ID receiver) {
		return new RemoteSharedObjectDescription(getID(), getClass().getName(),
	    		getConfig().getProperties());
	}",Get a RemoteSharedObjectDescription for a replica to be created on a given receiver.,1,48
4416,"public ModelClass loadFromCursor(Cursor cursor) {
        ModelClass model = newInstance();
        loadFromCursor(cursor, model);
        return model;
    }",Creates a new  ModelClass and Loads the cursor into a the object.,1,44
4417,"public static Multimap<String, String> parse(final String input) {
        checkNotNull(input);
        Multimap<String, String> result = LinkedHashMultimap.create();
        String[] fields = input.split(FIELD_SEPARATOR);
        for (String field : fields) {
            String key, value;
            int i = field.indexOf(VALUE_SEPARATOR);
            if (i == -1) {
                key = field;
                value = null;
            }
            else {
                key = field.substring(0, i);
                value = field.substring(i + 1, field.length());
            }
            result.put(key, value);
        }
        return result;
    }",Parses a query-string into a multimap.,1,212
4418,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_COPYRIGHTINFO;
    }",The ID3v2 frame identifier,1,22
4419,"public String getIdentifier()
    {
        return  ID3v24Frames.FRAME_ID_URL_FILE_WEB;
    }",The ID3v2 frame identifier,1,22
4420,"public static Map<String, String> getAllSetterMethods(PsiClass psiClass, String currentMethodName) {
        Map<String, String> methodNames = new HashMap<String, String>();
        PsiMethod[] psiMethods = null;
        String prefix = """";
        //flat field
        if (!currentMethodName.contains(""."")) {
            psiMethods = psiClass.getAllMethods();
        } else {
            prefix = currentMethodName.substring(0, currentMethodName.lastIndexOf('.'));
            String getterMethod = ""get"" + StringUtil.capitalize(prefix);
            PsiClass psiFieldClass = findGetterMethodReturnType(psiClass, getterMethod);
            if (psiFieldClass != null) {
                psiMethods = psiFieldClass.getAllMethods();
                prefix = prefix + ""."";
            }
        }
        if (psiMethods != null && psiMethods.length > 0) {
            for (PsiMethod psiMethod : psiMethods) {
                String methodName = psiMethod.getName();
                if (methodName.startsWith(""set"") && psiMethod.getParameterList().getParametersCount() == 1) {
                    String name = prefix + StringUtil.decapitalize(methodName.replaceFirst(""set"", """"));
                    String type = psiMethod.getParameterList().getParameters()[0].getType().getPresentableText();
                    methodNames.put(name, type);
                }
            }
        }
        return methodNames;
    }",get all set method for psiClass with type added,1,395
4421,"public List<MessageObserver> getMessageObservers() {
		if (messageObservers == null) {
			return Collections.emptyList();
		} else {
			return Collections.unmodifiableList(messageObservers);
		}
	}",Returns the observers registered for this message.,1,61
4422,"protected String getITimeString(ITime timeMin, ITime timeMax,
            ITime timeMedian, int sigDigits) {
        // Make time string
        if (timeMin != null && timeMax != null) {

            // Round min and max to a few significant digits for readability
            BigDecimal timeMinDec = new BigDecimal(timeMin.toString())
                    .round(new MathContext(sigDigits));
            BigDecimal timeMaxDec = new BigDecimal(timeMax.toString())
                    .round(new MathContext(sigDigits));

            // Remove trailing zeros and periods from min and max
            String timeMinStr = removeTrailingZeros(timeMinDec.toString());
            String timeMaxStr = removeTrailingZeros(timeMaxDec.toString());

            // Round and format median if provided
            String timeMedStr = """";
            if (timeMedian != null) {
                BigDecimal timeMedDec = new BigDecimal(timeMedian.toString())
                        .round(new MathContext(sigDigits));

                timeMedStr = removeTrailingZeros(timeMedDec.toString()) + "","";
            }

            // String is range (possibly including median) if min != max time or
            // else just the single time if they are equal
            if (!timeMinStr.equals(timeMaxStr)) {
                return ""["" + timeMinStr + "","" + timeMedStr + timeMaxStr + ""]"";
            }
            {
                return timeMinStr;
            }
        }
        {
            return """";
        }
    }","Create the time delta string for an edge given the min, max, and (optionally) median ITimes within it, rounding to the specified number of significant digits.",1,333
4423,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_AUDIO_ENCRYPTION;
    }",The ID3v2 frame identifier,1,22
4424,"public X509Certificate[] buildChain(X509Certificate end_user_auth_cert) {
		
		X509Certificate[] user_cert_chain = null;
		
        try {
        	
        	// No truststore : no way!
            if (truststore == null) {
                log.warn(""Keycloak Truststore is null, but it is required !"");
                log.warn(""  see https://www.keycloak.org/docs/latest/server_installation/index.html#_truststore"");
                return null;
            }

            // Create the selector that specifies the starting certificate
            X509CertSelector selector = new X509CertSelector();
            selector.setCertificate(end_user_auth_cert);

            // Create the trust anchors (set of root CA certificates)
            Set<TrustAnchor> trustAnchors = new HashSet<TrustAnchor>();
            for (X509Certificate trustedRootCert : trustedRootCerts) {
                trustAnchors.add(new TrustAnchor(trustedRootCert, null));
            }
            // Configure the PKIX certificate builder algorithm parameters
            PKIXBuilderParameters pkixParams = new PKIXBuilderParameters( trustAnchors, selector);
            
            // Disable CRL checks, as it's possibly done after depending on Keycloak settings
            pkixParams.setRevocationEnabled(false);
            pkixParams.setExplicitPolicyRequired(false);
            pkixParams.setAnyPolicyInhibited(false);
            pkixParams.setPolicyQualifiersRejected(false);
            pkixParams.setMaxPathLength(certificateChainLength);
            
            // Adding the list of intermediate certificates + end user certificate
            intermediateCerts.add(end_user_auth_cert);
            CollectionCertStoreParameters intermediateCA_userCert = new CollectionCertStoreParameters(intermediateCerts);
            CertStore intermediateCertStore = CertStore.getInstance(""Collection"", intermediateCA_userCert, ""BC"");
            pkixParams.addCertStore(intermediateCertStore);

            // Build and verify the certification chain (revocation status excluded)
            CertPathBuilder certPathBuilder = CertPathBuilder.getInstance(""PKIX"",""BC"");
            CertPath certPath = certPathBuilder.build(pkixParams).getCertPath();
            log.debug(""Certification path building OK, and contains "" + certPath.getCertificates().size() + "" X509 Certificates"");
            
            user_cert_chain = convertCertPathtoX509CertArray( certPath );
            
        } catch (NoSuchAlgorithmException e) {
        	log.error(e.getLocalizedMessage(),e);
        } catch (CertPathBuilderException e) {
            if ( log.isEnabled(Level.TRACE) )
            	log.debug(e.getLocalizedMessage(),e);
            else
            	log.warn(e.getLocalizedMessage());
        } catch (InvalidAlgorithmParameterException e) {
        	log.error(e.getLocalizedMessage(),e);
        } catch (NoSuchProviderException e) {
        	log.error(e.getLocalizedMessage(),e);
		} finally {
	        //Remove end user certificate
	        intermediateCerts.remove(end_user_auth_cert);
		}
        
        return user_cert_chain;
	}","As NGINX cannot actually send the CA Chain in http header(s), we are rebuilding here the end user certificate chain with Keycloak truststore.",1,574
4425,"protected boolean isActive() {
		return fIsActive && getViewer() != null;
	}",Returns whether this view is in the active page of the active perspective and has been fully created.,1,31
4426,"public static Predicate<String> contains(CharSequence contains) {
        return new ContainsPredicate(contains);
    }",Creates a Predicate that will accept any String that contains the specified,1,32
4427,"public static Iterator<KEdge> getConnectedEdges(final Iterable<KEdge> kedges) {
        return Iterators.concat(
                Iterators.transform(kedges.iterator(), new Function<KEdge, Iterator<KEdge>>() {

            public Iterator<KEdge> apply(final KEdge kedge) {
                return getConnectedEdges(kedge);
            }
        }));
    }",Determines the  KEdge KEdges that are (transitively) connected to the given  kedges across hierarchy boundaries via common ports.,1,101
4428,"public static synchronized String[] findDNS() {
        String[] resArray = null;
        for (DNSServerLookupMechanism mechanism : LOOKUP_MECHANISMS) {
            resArray = mechanism.getDnsServerAddresses();
            if (resArray == null) {
                continue;
            }

            List<String> res = new ArrayList<>(Arrays.asList(resArray));

            Iterator<String> it = res.iterator();
            while (it.hasNext()) {
                String potentialDnsServer = it.next();

                if (blacklistedDnsServers.contains(potentialDnsServer)) {
                    LOGGER.fine(""The DNS server lookup mechanism '"" + mechanism.getName()
                    + ""' returned a blacklisted result: '"" + potentialDnsServer + ""'"");
                    it.remove();
                }
            }

            if (!res.isEmpty()) {
                break;
            }
        }

        return resArray;
    }",Retrieve a list of currently configured DNS servers.,1,247
4429,"public Observable<View> view() {
        return views;
    }",Returns an  rx.Observable that emits the current attached view or null.,1,22
4430,"protected AuthorizingAccount queryForLdapAccount( Object principal, LdapContextFactory ldapContextFactory) throws NamingException {

        String username = null;

        if ( !(principal instanceof String ) ) {
            String msg = ""This implementation expects the principal argument to be a String."";
            throw new IllegalArgumentException( msg );
        }

        username = (String)principal;

        // Perform context search
        LdapContext ldapContext = ldapContextFactory.getSystemLdapContext();

        List<String> roleNames;

        try {

            roleNames = getRoleNamesForUser(username, ldapContext);

        } finally {

            LdapUtils.closeContext( ldapContext );
        }

        return new SimpleAuthorizingAccount( roleNames, null );
    }",Builds an  org.jsecurity.authz.AuthorizingAccount object by querying the active directory LDAP context for the groups that a user is a member of.,1,186
4431,"public int toggleFlash() {
        int flash = mCameraController.getFlash();
        switch (flash) {
            case FLASH_OFF:
                setFlash(FLASH_ON);
                break;

            case FLASH_ON:
                setFlash(FLASH_AUTO);
                break;

            case FLASH_AUTO:
            case FLASH_TORCH:
                setFlash(FLASH_OFF);
                break;
        }

        return mCameraController.getFlash();
    }","Toggles the flash mode between  CameraConstants#FLASH_OFF,  CameraConstants#FLASH_ON,  CameraConstants#FLASH_AUTO and  CameraConstants#FOCUS_FIXED, in this order.",1,109
4432,"public static final int getIcon(Context context, FileSystemObject fso) {
        //Ensure that mime types are loaded
        if (sMimeTypes == null) {
            loadMimeTypes(context);
        }

        //Check if the argument is a folder
        if (fso instanceof Directory || FileHelper.isSymlinkRefDirectory(fso)) {
            return R.drawable.ic_fso_folder;
        }

        //Get the extension and delivery
        String ext = FileHelper.getExtension(fso);
        if (ext != null) {
            MimeTypeInfo mimeTypeInfo = sMimeTypes.get(ext);
            if (mimeTypeInfo != null) {
                //Search the identifier in the cache
                int drawableId = 0;
                if (sCachedIndentifiers.containsKey(ext)) {
                    drawableId = sCachedIndentifiers.get(ext).intValue();
                } else {
                    drawableId = ResourcesHelper.getIdentifier(
                          context.getResources(), ""drawable"", //$NON-NLS-1$
                          mimeTypeInfo.mDrawable);
                    sCachedIndentifiers.put(ext, Integer.valueOf(drawableId));
                }
                return drawableId;
            }
        }

        // Check if the fso is executable
        if (fso.getPermissions().getUser().isExecute()) {
            return R.drawable.ic_fso_type_executable;
        }
        return R.drawable.ic_fso_default;
    }",Method that returns the associated mime/type icon resource identifier of the  FileSystemObject.,1,317
4433,"public static ElkGraphAdapter adapt(final ElkNode graph) {
        return new ElkGraphAdapter(graph);
    }",Creates the necessary adapters for the ElkGraph rooted at the given node.,1,31
4434,"public boolean trySetValue(byte[] newValue) throws Exception
    {
        Preconditions.checkState(state.get() == State.STARTED, ""not started"");

        try
        {
            client.setData().withVersion(stat.getVersion()).forPath(path, newValue);
            stat.setVersion(stat.getVersion() + 1);
            value = Arrays.copyOf(newValue, newValue.length);
            return true;
        }
        catch ( KeeperException.BadVersionException ignore )
        {
            // ignore
        }

        readValue();
        return false;
    }",Changes the shared value only if its value has not changed since this client last read it.,1,159
4435,"public final InputContext getContext() {
    return inputContext;
  }",Return ahe  org.apache.tez.runtime.api.InputContext for this specific instance of the LogicalInput,1,21
4436,"public static String getSymbolValue(Object o) {
        if (o instanceof Describable) {
            return getSymbolValue(((Describable) o).getDescriptor().getClass());
        } else {
            return getSymbolValue(o.getClass());
        }
    }","Get the  Symbol value for the class of the given object, generally a  Descriptor, if the annotation is present.",1,77
4437,"private byte[] encryptFragment(byte[] plaintextFragment) throws GeneralSecurityException {
		
		if (session == null) {
			return plaintextFragment;
		}

		byte[] encryptedFragment = plaintextFragment;

		CipherSuite cipherSuite = session.getWriteState().getCipherSuite();
		LOGGER.log(Level.FINER, ""Encrypting record fragment using current write state\n{0}"", session.getWriteState());
		
		switch (cipherSuite.getCipherType()) {
		case NULL:
			// do nothing
			break;
			
		case AEAD:
			encryptedFragment = encryptAEAD(plaintextFragment);
			break;
			
		case BLOCK:
			encryptedFragment = encryptBlockCipher(plaintextFragment);
			break;
			
		case STREAM:
			// Currently, Scandium does not support any stream ciphers
			// RC4 is explicitly ruled out from being used in DTLS
			// see http://tools.ietf.org/html/rfc6347#section-4.1.2.2
			break;

		default:
			break;
		}

		return encryptedFragment;
	}",Encrypts a TLSPlaintext.fragment according to the current DTLS connection state.,1,219
4438,"public ContentHandlerFactory getContentDeliveryUnitCreator(String type) throws UnsupportedContentHandlerTypeException {
        if(type == null) {
            throw new IllegalArgumentException(""null 'resourceExtension' arg in method call."");
        }
        
        for(int i = 0; i < configLists.size(); i++) {
            SmooksResourceConfigurationList list = configLists.get(i);
            
            for(int ii = 0; ii < list.size(); ii++) {
                SmooksResourceConfiguration config = list.get(ii);
                String selector = config.getSelector();
                
                if(""cdu-creator"".equals(selector) && type.equalsIgnoreCase(config.getStringParameter(ContentHandlerFactory.PARAM_RESTYPE))) {
                    return (ContentHandlerFactory) getObject(config);
                }
            }
        }
        
        throw new UnsupportedContentHandlerTypeException(type);
    }",Get the  org.milyn.delivery.ContentHandlerFactory for a resource based on the supplied resource type.,1,226
4439,"private Integer nextHandle() {
        return Integer.valueOf(this.currentHandle++);
    }",Return the next Integer handle to be used to indicate cyclic references being saved to the stream.,1,28
4440,"static DocumentEntity of(String name, List<Document> documents) throws NullPointerException {
        DefaultDocumentEntity entity = new DefaultDocumentEntity(name);
        entity.addAll(documents);
        return entity;
    }",Creates a  DocumentEntity instance,1,58
4441,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_COMPOSER ;
    }",The ID3v2 frame identifier,1,23
4442,"protected RemoteSharedObjectDescription[] getReplicaDescriptions(ID[] receivers) {
		RemoteSharedObjectDescription [] descriptions = null;
		if (receivers == null || receivers.length == 1) {
			descriptions = new RemoteSharedObjectDescription[1];
			descriptions[0] = getReplicaDescription((receivers==null)?null:receivers[0]);
		} else {
			descriptions = new RemoteSharedObjectDescription[receivers.length];
			for(int i=0; i < receivers.length; i++) {
				descriptions[i] = getReplicaDescription(receivers[i]);
			}
		}
		return descriptions;
	}",This method is called by an event processor to determine the RemoteSharedObjectDescriptions associated with the given receivers.,1,175
4443,"public Tag getTag()
    {
        return tag;
    }","Returns the tag contained in this AudioFile, the Tag contains any useful meta-data, like artist, album, title, etc.",1,20
4444,"protected int retrieveEndOfElementTypeNamePosition(int start, int end) {
		this.scanner.resetTo(start, end);
		try {
			int token;
			while ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {
				switch(token) {
					case TerminalTokens.TokenNameIdentifier:
					case TerminalTokens.TokenNamebyte:
					case TerminalTokens.TokenNamechar:
					case TerminalTokens.TokenNamedouble:
					case TerminalTokens.TokenNamefloat:
					case TerminalTokens.TokenNameint:
					case TerminalTokens.TokenNamelong:
					case TerminalTokens.TokenNameshort:
					case TerminalTokens.TokenNameboolean:
						return this.scanner.currentPosition - 1;
				}
			}
		} catch(InvalidInputException e) {
			// ignore
		}
		return -1;
	}",This method is used to retrieve the position just before the left bracket.,1,199
4445,"@Override
	public long lock(long address) {
		long id = Thread.currentThread().getId();
		if(UnsafeAdapter.getLong(address)!=id) {
			while(!UnsafeAdapter.compareAndSwapLong(null, address, UNLOCKED, id)) {
				Thread.yield();
			}
		}
		return UnsafeAdapter.getLong(address + UnsafeAdapter.LONG_SIZE);
	}",Locks the passed address reference.,1,107
4446,"public static String getName(final String path) {
        if (TextUtils.isEmpty(path))
            return path;

        int lastSlash = path.lastIndexOf('/');
        if (lastSlash != -1 && lastSlash + 1 < path.length())
            return path.substring(lastSlash + 1);
        else
            return path;
    }",Get file name for path,1,108
4447,"static final Timestamp calendarToSqlDate(Calendar c) {
        return c == null ? null : new Timestamp(c.getTimeInMillis());
    }",Converts the given calendar to a SQL Timestamp.,1,46
4448,"public String getIdentifier()
    {
        return  ID3v24Frames.FRAME_ID_MOOD;
    }",The ID3v2 frame identifier,1,22
4449,"public boolean  trySetCount(VersionedValue<Integer> newCount) throws Exception
    {
        VersionedValue<byte[]> copy = new VersionedValue<byte[]>(newCount.getVersion(), toBytes(newCount.getValue()));
        return sharedValue.trySetValue(copy);
    }",Changes the shared count only if its value has not changed since the version specified by newCount.,1,74
4450,"@Deprecated
    public int getTreeNodesCacheSize() {
        return 0;
    }","As of 1.1.0, is deprecated and has no effect.",1,22
4451,"public Closeable attachAsCloseable() {
      final Context previous = attach();
      return new Closeable() {
        @Override
        public void close() throws IOException {
          detachAndCancel(previous, null);
        }
      };
    }",Attach this context to the thread and return a  AutoCloseable that can be used with try-with-resource statements to properly attach the previously bound context when  AutoCloseable#close() is called.,1,73
4452,"public Object proceed() throws Throwable {
        return m_controller.proceed(this);
    }",Walks through the pointcuts and invokes all its advices.,1,28
4453,"public static HystrixCommandMetrics getInstance(HystrixCommandKey key) {
        return metrics.get(key.name());
    }",Get the  HystrixCommandMetrics instance for a given  HystrixCommandKey or null if one does not exist.,1,33
4454,"public FileInputSplit[] getFileInputSplits() {

		final InputSplit[] inputSplits = getEnvironment().getInputSplits();

		final FileInputSplit[] fileInputSplits = new FileInputSplit[inputSplits.length];

		for (int i = 0; i < fileInputSplits.length; i++) {
			fileInputSplits[i] = (FileInputSplit) inputSplits[i];
		}

		return fileInputSplits;
	}",Returns an array of @FileInputSplits which have been assigned to this task.,1,116
4455,"public Collection<RosterEntry> getUnfiledEntries() {
        return Collections.unmodifiableList(unfiledEntries);
    }",Returns an unmodifiable collection for the unfiled roster entries.,1,27
4456,"public ArrayNode set(int index, JsonNode value)
    {
        if (value == null) { // let's not store 'raw' nulls but nodes
            value = nullNode();
        }
        if (index < 0 || index >= _children.size()) {
            throw new IndexOutOfBoundsException(""Illegal index ""+ index +"", array size ""+size());
        }
        _children.set(index, value);
        return this;
    }","Method that will set specified element, replacing old value.",1,124
4457,"public ATObject prim_sendTo(ATMessage self, ATObject receiver, ATObject sender) throws InterpreterException {
        return sender.meta_send(receiver, self.asAsyncMessage());
    }","To evaluate an asynchronous message send, the asynchronous message object is asked to be sent by the sender object.",1,48
4458,"public static final String getProperty(String s)
  {
    String rval = System.getProperty(s);
    if (rval == null)
      rval = localProperties.getProperty(s);
    return rval;
  }","Read a property, either from the system properties, or from the local property file image.",1,67
4459,"public File[] build() throws IOException, InterruptedException {
        if (classScanner.getClasses().isEmpty()) {
            return null;
        }

        LinkedList<File> outputFiles = new LinkedList<File>();
        Map<String, LinkedList<Class>> map = new LinkedHashMap<String, LinkedList<Class>>();
        for (Class c : classScanner.getClasses()) {
            if (Loader.getEnclosingClass(c) != c) {
                continue;
            }
            Loader.ClassProperties p = Loader.loadProperties(c, properties, false);
            String libraryName = outputName != null ? outputName : p.getProperty(""loader.library"", """");
            if (libraryName.length() == 0) {
                continue;
            }
            LinkedList<Class> classList = map.get(libraryName);
            if (classList == null) {
                map.put(libraryName, classList = new LinkedList<Class>());
            }
            classList.add(c);
        }
        for (String libraryName : map.keySet()) {
            LinkedList<Class> classList = map.get(libraryName);
            Class[] classArray = classList.toArray(new Class[classList.size()]);
            File f = generateAndCompile(classArray, libraryName);
            if (f != null) {
                outputFiles.add(f);
                if (copylibs) {
                    // Do not copy library files from inherit properties ...
                    Loader.ClassProperties p = Loader.loadProperties(classArray, properties, false);
                    LinkedList<String> preloads = new LinkedList<String>();
                    preloads.addAll(p.get(""loader.preload""));
                    preloads.addAll(p.get(""compiler.link""));
                    // ... but we should use all the inherited paths!
                    p = Loader.loadProperties(classArray, properties, true);

                    File directory = f.getParentFile();
                    for (String s : preloads) {
                        URL[] urls = Loader.findLibrary(null, p, s);
                        File fi;
                        try {
                            fi = new File(urls[0].toURI());
                        } catch (Exception e) {
                            continue;
                        }
                        File fo = new File(directory, fi.getName());
                        if (fi.exists() && !outputFiles.contains(fo)) {
                            System.out.println(""Copying library file: "" + fi);
                            FileInputStream fis = new FileInputStream(fi);
                            FileOutputStream fos = new FileOutputStream(fo);
                            byte[] buffer = new byte[1024];
                            int length;
                            while ((length = fis.read(buffer)) != -1) {
                                fos.write(buffer, 0, length);
                            }
                            fos.close();
                            fis.close();
                            outputFiles.add(fo);
                        }
                    }
                }
            }
        }

        File[] files = outputFiles.toArray(new File[outputFiles.size()]);
        if (jarPrefix != null && files.length > 0) {
            File jarFile = new File(jarPrefix + ""-"" + properties.get(""platform.name"") + "".jar"");
            File d = jarFile.getParentFile();
            if (d != null && !d.exists()) {
                d.mkdir();
            }
            createJar(jarFile, outputDirectory == null ? classScanner.getClassLoader().getPaths() : null, files);
        }
        return files;
    }",Starts the build process and returns an array of  File produced.,1,995
4460,"public AnnotationElement.Annotation[] getAnnotations() {
        return getAnnotationReader().getAnnotationElements();
    }",Returns the annotations.,1,29
4461,"public String[] getPrimaryKeyColumns()
    {
        return _primaryKeyColumns;
    }",Returns the primary key column names making up the new primary key.,1,22
4462,"public static boolean isNativeZlibLoaded(Configuration conf) {
    return nativeZlibLoaded && conf.getBoolean(""hadoop.native.lib"", true); 
  }",Check if native-zlib code is loaded & initialized correctly and can be loaded for this job.,1,40
4463,"private static InputJobInfo getJobInfo(JobContext jobContext) throws Exception {
    String jobString = jobContext.getConfiguration().get(HCatConstants.HCAT_KEY_JOB_INFO);
    if( jobString == null ) {
      throw new Exception(""job information not found in JobContext. HCatInputFormat.setInput() not called?"");
    }

    return (InputJobInfo) HCatUtil.deserialize(jobString);
  }",Gets the InputJobInfo object by reading the Configuration and deserializing the string.,1,90
4464,"@Nullable private Ignite findGridForNodeId(final UUID nodeId) {
        return F.find(G.allGrids(), null, new P1<Ignite>() {
            @Override public boolean apply(Ignite e) {
                return nodeId.equals(e.cluster().localNode().id());
            }
        });
    }","Finds the  org.gridgain.grid.Ignite, which has a local node with given ID.",1,95
4465,"public Word get(int index)
	{
		return words.get(index);
	}",Get a specific word,1,28
4466,"private static List<NodeDepth> initialiseAndOrderNodes(
            final Document doc) {

        NodeIterator ni = ((DocumentTraversal) doc).createNodeIterator(
                doc.getDocumentElement(), NodeFilter.SHOW_ALL, null, false);

        List<NodeDepth> depthSorted = new ArrayList<NodeDepth>();
             
        Node n;
        while ((n = ni.nextNode()) != null) {
            depthSorted.add(new NodeDepth(n));
        }
        
        ni.detach();
        Collections.sort(depthSorted, new NodeDepthComparator());
        
        return depthSorted;
    }",Returns a list of Nodes sorted according to their depths.,1,168
4467,"public ECKey getConnectedKey(KeyBag keyBag) throws ScriptException {
        TransactionOutput connectedOutput = getConnectedOutput();
        checkNotNull(connectedOutput, ""Input is not connected so cannot retrieve key"");
        Script connectedScript = connectedOutput.getScriptPubKey();
        if (ScriptPattern.isPayToPubKeyHash(connectedScript)) {
            byte[] addressBytes = ScriptPattern.extractHashFromPayToPubKeyHash(connectedScript);
            return keyBag.findKeyFromPubKeyHash(addressBytes, Script.ScriptType.P2PKH);
        } else if (ScriptPattern.isPayToWitnessPubKeyHash(connectedScript)) {
            byte[] addressBytes = ScriptPattern.extractHashFromPayToWitnessHash(connectedScript);
            return keyBag.findKeyFromPubKeyHash(addressBytes, Script.ScriptType.P2WPKH);
        } else if (ScriptPattern.isPayToPubKey(connectedScript)) {
            byte[] pubkeyBytes = ScriptPattern.extractKeyFromPayToPubKey(connectedScript);
            return keyBag.findKeyFromPubKey(pubkeyBytes);
        } else {
            throw new ScriptException(ScriptError.SCRIPT_ERR_UNKNOWN_ERROR, ""Could not understand form of connected output script: "" + connectedScript);
        }
    }","Returns the ECKey identified in the connected output, for either P2PKH, P2WPKH or P2PK scripts.",1,238
4468,"protected Hash hashProvidedCredentials(Object credentials, Object salt, int hashIterations) {
        String hashAlgorithmName = assertHashAlgorithmName();
        return new SimpleHash(hashAlgorithmName, credentials, salt, hashIterations);
    }","Hashes the provided credentials a total of  hashIterations times, using the given salt.",1,58
4469,"private static URI[] getURLs(String spec) {
		String[] urlSpecs = getArrayFromString(spec, "",""); //$NON-NLS-1$
		ArrayList result = new ArrayList(urlSpecs.length);
		for (int i = 0; i < urlSpecs.length; i++) {
			try {
				result.add(new URI(urlSpecs[i]));
			} catch (URISyntaxException e) {
				LogHelper.log(new Status(IStatus.ERROR, InstallerActivator.PI_INSTALLER, ""Invalid URL in install description: "" + urlSpecs[i], e)); //$NON-NLS-1$
			}
		}
		if (result.isEmpty())
			return null;
		return (URI[]) result.toArray(new URI[result.size()]);
	}",Returns an array of URIs from the given comma-separated list of URLs.,1,210
4470,"public String toString() {
		return (lopen ? ""("" : ""["") + low + "", "" + high + "", "" + value + (ropen ? "")"" : ""]"");
	}","Returns a string representation of this interval in one of the formats:    [low, high, value]   (low, high, value]   [low, high, value)   (low, high, value)",1,75
4471,"private final HandshakeMessage reassembleFragments(
			int messageSeq,
			SortedSet<FragmentedHandshakeMessage> fragments,
			int totalLength,
			HandshakeType type,
			DTLSSession session) throws HandshakeException {

		HandshakeMessage message = null;

		byte[] reassembly = new byte[] {};
		int offset = 0;
		for (FragmentedHandshakeMessage fragmentedHandshakeMessage : fragments) {
			
			int fragmentOffset = fragmentedHandshakeMessage.getFragmentOffset();
			int fragmentLength = fragmentedHandshakeMessage.getFragmentLength();
			
			if (fragmentOffset == offset) { // eliminate duplicates
				// case: no overlap
				reassembly = ByteArrayUtils.concatenate(reassembly, fragmentedHandshakeMessage.fragmentToByteArray());
				offset = reassembly.length;
			} else if (fragmentOffset < offset && (fragmentOffset + fragmentLength) > offset) {
				// case: overlap fragment
				
				// determine the offset where the fragment adds new information for the reassembly
				int newOffset = offset - fragmentOffset;
				int newLength = fragmentLength - newOffset;
				byte[] newBytes = new byte[newLength];
				// take only the new bytes and add them
				System.arraycopy(fragmentedHandshakeMessage.fragmentToByteArray(), newOffset, newBytes, 0, newLength);	
				reassembly = ByteArrayUtils.concatenate(reassembly, newBytes);
				
				offset = reassembly.length;
			}
		}
		
		if (reassembly.length == totalLength) {
			// the reassembled fragment has the expected length
			FragmentedHandshakeMessage wholeMessage =
					new FragmentedHandshakeMessage(type, totalLength, messageSeq, 0, reassembly, getPeerAddress());
			reassembly = wholeMessage.toByteArray();
			
			KeyExchangeAlgorithm keyExchangeAlgorithm = KeyExchangeAlgorithm.NULL;
			boolean receiveRawPublicKey = false;
			if (session != null) {
				keyExchangeAlgorithm = session.getKeyExchange();
				receiveRawPublicKey = session.receiveRawPublicKey();
			}
			message = HandshakeMessage.fromByteArray(reassembly, keyExchangeAlgorithm, receiveRawPublicKey, getPeerAddress());
		}
		
		return message;
	}",Reassembles handshake message fragments into the original message.,1,502
4472,"public static <E> Predicates.XorPredicate<E> xor(Predicate<E> left, Predicate<E> right) {
        return new Predicates.XorPredicate<E>(left, right);
    }",This method returns a Predicate that performs xor on two other predicates.,1,57
4473,"@Nullable
  public BufferedImage renderDrawable(ResourceValue drawableResourceValue) {
    if (drawableResourceValue == null) {
      return null;
    }

    HardwareConfig hardwareConfig = myHardwareConfigHelper.getConfig();

    Module module = myRenderService.getModule();
    final DrawableParams params =
      new DrawableParams(drawableResourceValue, module, hardwareConfig, getResourceResolver(), myLayoutlibCallback,
                         myMinSdkVersion.getApiLevel(), myTargetSdkVersion.getApiLevel(), myLogger);
    params.setForceNoDecor();
    params.setAssetRepository(myAssetRepository);

    try {
      Result result = RenderService.runRenderAction(new Callable<Result>() {
        @Override
        public Result call() throws Exception {
          return myLayoutLib.renderDrawable(params);
        }
      });

      if (result != null && result.isSuccess()) {
        Object data = result.getData();
        if (data instanceof BufferedImage) {
          return (BufferedImage)data;
        }
      }
    }
    catch (final Exception e) {
      // ignore
    }

    return null;
  }",Renders the given resource value (which should refer to a drawable) and returns it as an image,1,299
4474,"@SuppressWarnings(""unchecked"")
	protected AbstractTaskListElement getCategory() {
		int index = categoryChooser.getSelectionIndex();
		if (addToCategory.getSelection() && index != -1) {
			if (index == 0) {
				return TasksUiPlugin.getTaskListManager().getTaskList().getUncategorizedCategory();
			}
			return ((List<AbstractTaskListElement>) categoryChooser.getData()).get(index - 1);
		}
		return null;
	}",Returns the  AbstractTaskListElement category the new task belongs to,1,131
4475,"public static Iterator<ElkEdge> getConnectedEdges(final ElkEdge edge) {
        // Default behavior should be to not select the ports
        return Iterators.filter(getConnectedElements(edge, false), ElkEdge.class);
    }",Determines the edges that are (transitively) connected to the given edge across hierarchy boundaries via common ports.,1,48
4476,"public static Stubber doThrow(Class<? extends Throwable> toBeThrown) {
        return MOCKITO_CORE.stubber().doThrow(toBeThrown);
    }",Use doThrow() when you want to stub the void method with an exception.,1,40
4477,"public static Filter filter(Collection<Predicate> predicates) {
        return new AndFilter(predicates);
    }",Create a new Filter based on given list of criteria.,1,32
4478,"protected boolean isGateEditPart( Object object ) {
		return object instanceof BorderItemEditPart && ((BorderItemEditPart)object).getMainFigure() instanceof BorderItemFigure;
	}",Return true if the supplied object is a  BorderItemEditPart; otherwise false.,1,46
4479,"public Predicate<? super E> getRightPredicate() {
            return right;
        }",Returns the right side Predicate.,1,26
4480,"public String addFile(String index, InputStream is, String name, String mime) throws IOException {
        String mimeType = mime;
        if (mimeType == null) {
            mimeType = ""application/octet-stream"";
        }
        Blob blob = Blobs.createBlob(is, mime);
        blob.setFilename(name);

        String fileEntryKey = key + ""_"" + index;
        BatchManager bm = Framework.getService(BatchManager.class);
        bm.getTransientStore().putBlobs(fileEntryKey, Collections.singletonList(blob));
        bm.getTransientStore().putParameter(fileEntryKey, CHUNKED_PARAM_NAME, String.valueOf(false));
        bm.getTransientStore().putParameter(key, index, fileEntryKey);

        return fileEntryKey;
    }",Adds a file with the given  index to the batch.,1,208
4481,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_POSITION_SYNC;
    }",The ID3v2 frame identifier,1,22
4482,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_FILE_OWNER;
    }",The ID3v2 frame identifier,1,22
4483,"@Override public GridNearTxPrepareResponse apply(IgniteInternalFuture<GridNearTxPrepareResponse> f) {
                try {
                    return f.get();
                }
                catch (Exception e) {
                    locTx.setRollbackOnly(); // Just in case.

                    if (!X.hasCause(e, IgniteTxOptimisticCheckedException.class) &&
                        !X.hasCause(e, IgniteFutureCancelledException.class))
                        U.error(log, ""Failed to prepare DHT transaction: "" + locTx, e);

                    return new GridNearTxPrepareResponse(
                        req.version(),
                        req.futureId(),
                        req.miniId(),
                        req.version(),
                        req.version(),
                        null,
                        e,
                        null,
                        req.deployInfo() != null);
                }
            }",Prepares local colocated tx.,1,195
4484,"public int length(){
		if(this.oggPlayer != null){
			return this.oggPlayer.length();
		}
		
		return -1;
	}",Get length of current track in milliseconds.,1,50
4485,"public RowsFragment getRowsFragment() {
        return (RowsFragment)mMainFragment;
    }",Get currently bound RowsFragment or null if BrowseFragment has not been created yet.,1,22
4486,"@Nullable
  public BufferedImage renderDrawable(ResourceValue drawableResourceValue) {
    if (drawableResourceValue == null) {
      return null;
    }

    HardwareConfig hardwareConfig = myHardwareConfigHelper.getConfig();

    Module module = myRenderService.getModule();
    final DrawableParams params =
      new DrawableParams(drawableResourceValue, module, hardwareConfig, getResourceResolver(), myLayoutlibCallback,
                         myMinSdkVersion.getApiLevel(), myTargetSdkVersion.getApiLevel(), myLogger);
    params.setForceNoDecor();
    params.setAssetRepository(myAssetRepository);

    try {
      Result result = RenderService.runRenderAction(new Callable<Result>() {
        @Override
        public Result call() throws Exception {
          return myLayoutLib.renderDrawable(params);
        }
      });

      if (result != null && result.isSuccess()) {
        Object data = result.getData();
        if (data instanceof BufferedImage) {
          return (BufferedImage)data;
        }
      }
    }
    catch (final Exception e) {
      // ignore
    }

    return null;
  }",Renders the given resource value (which should refer to a drawable) and returns it as an image,1,299
4487,"public Session createSession(String host) {
        return new SimpleSession(host);
    }",This default implementation merely returns new  SimpleSession#SimpleSession(String) SimpleSession(host);,1,27
4488,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_SIGNATURE;
    }",The ID3v2 frame identifier,1,22
4489,"private List<SapphireActionHandler> getExecutableMenuEntries() {
		// has ContextButtonMenuEntries -> create popup
		List<SapphireActionHandler> activeHandlers = getSapphireAction().getActiveHandlers();
		List<SapphireActionHandler> menuEntries = new ArrayList<SapphireActionHandler>();
		for (SapphireActionHandler handler : activeHandlers) {
			if (handler.isEnabled()) {
				menuEntries.add(handler);
			}
		}
		return menuEntries;
	}","Returns all action handlers, which are executable.",1,107
4490,"private DTLSSession getSessionByIdentifier(byte[] sessionId) {
		if (sessionId == null || sessionId.length == 0) {
			return null;
		}
		
		for (DTLSSession session:dtlsSessions.values()) {
			SessionId sessionIdentifier = session.getSessionIdentifier();
			if (sessionIdentifier != null) {
				if (Arrays.equals(sessionId, sessionIdentifier.getSessionId())) {
					return session;
				}
			}
		}
		
		return null;
	}",Finds a cached session by its identifier.,1,144
4491,"public boolean isInRange(double low, double high) {
		if (low > high)
			throw new IllegalArgumentException(
						""The left endpoint of the interval must be less than "" +
						""the right endpoint."");

		return intervalTree.overlapsWith(new Interval<T>(low, high));
	}","Indicates if [ low,  high] interval overlaps with any interval of this instance.",1,77
4492,"public boolean isEntity() {
    return getValueType() == ValueType.ENTITY || getValueType() == ValueType.COLLECTION_ENTITY;
  }",Checks whether this parameter value is of the value type ENTITY or COLLECTION_ENTITY.,1,42
4493,"@SuppressWarnings(""unchecked"")
	public static <T extends IOReadableWritable> T createCopy(final T original) throws IOException {

		final ByteArrayOutputStream baos = new ByteArrayOutputStream();
		final DataOutputStream dos = new DataOutputStream(baos);

		original.write(dos);

		final String className = original.getClass().getName();
		if (className == null) {
			fail(""Class name is null"");
		}

		Class<T> clazz = null;

		try {
			clazz = (Class<T>) Class.forName(className);
		} catch (ClassNotFoundException e) {
			fail(e.getMessage());
		}

		if (clazz == null) {
			fail(""Cannot find class with name "" + className);
		}

		T copy = null;
		try {
			copy = clazz.newInstance();
		} catch (InstantiationException e) {
			fail(e.getMessage());
		} catch (IllegalAccessException e) {
			fail(e.getMessage());
		}

		if (copy == null) {
			fail(""Copy of object of type "" + className + "" is null"");
		}

		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
		final DataInputStream dis = new DataInputStream(bais);

		copy.read(dis);

		return copy;
	}",Creates a copy of the given  IOReadableWritable object by an in-memory serialization and subsequent deserialization.,1,401
4494,"public ProxyHostEx toProxyHost(final String hostToProxy) {
        final ProxyHostEx proxyHost;
        if (this.hostName != null) {
            final boolean shouldProxy = shouldProxy(hostToProxy, noProxyHostPatterns);
            if (shouldProxy) {
                proxyHost = new ProxyHostEx(hostName, port, proxyUser, proxySecret);
            } else {
                proxyHost = null;
            }
        }
        else {
            proxyHost = null;
        }
        return proxyHost;
    }",Initialize a  ProxyHostEx from this  WebProxySettings for the provided hostToProxy.,1,134
4495,"protected ReplicaSharedObjectDescription getReplicaDescription(ID receiver) {
		return new ReplicaSharedObjectDescription(getID(), getClass().getName(),
	    		getConfig().getProperties());
	}",Get a ReplicaSharedObjectDescription for a replica to be created on a given receiver.,1,48
4496,"public boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception {
        //mapped value is ignored - not needed for most (if not all) authc Filters.
        return isAccessAllowed(request, response, mappedValue) || onAccessDenied(request, response, mappedValue);
    }","Returns true if  #isAccessAllowed(ServletRequest,ServletResponse,Object) isAccessAllowed(Request,Response,Object), otherwise returns the result of  #onAccessDenied(ServletRequest,ServletResponse,Object) onAccessDenied(Request,Response,Object).",1,62
4497,"private Collection<Permission> getPermissions(AuthorizationInfo info) {
        Set<Permission> permissions = new HashSet<Permission>();

        if (info != null) {
            if (info.getObjectPermissions() != null) {
                permissions.addAll(info.getObjectPermissions());
            }

            if (info.getStringPermissions() != null) {
                for (String strPermission : info.getStringPermissions()) {
                    Permission permission = getPermissionResolver().resolvePermission(strPermission);
                    permissions.add(permission);
                }
            }
        }

        if (permissions.isEmpty()) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(permissions);
        }
    }",Retrieves the AuthorizationInfo for the given principals from the underlying data store.,1,204
4498,"public int predict(T x) {
        List<Neighbor<T,T>> neighbors = new ArrayList<>();
        nns.range(x, radius, neighbors);
        
        if (neighbors.size() < minPts) {
            return OUTLIER;
        }
        
        int[] count = new int[k + 1];
        for (Neighbor<T,T> neighbor : neighbors) {
            int yi = y[neighbor.index];
            if (yi == OUTLIER) yi = k;
            count[yi]++;
        }
        
        int y = MathEx.whichMax(count);
        return y == k ? OUTLIER : y;
    }",Classifies a new observation.,1,208
4499,"protected boolean persistString(String value) {
        if (!shouldPersist()) {
            return false;
        }

        // Shouldn't store null
        if (value == getPersistedString(null)) {
            // It's already there, so the same as persisting
            return true;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            dataStore.putString(mKey, value);
        } else {
            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putString(mKey, value);
            tryCommit(editor);
        }
        return true;
    }",Attempts to persist a  String if this Preference is persistent.,1,160
4500,"public static VerificationAfterDelay after(Duration delay) {
        return new After(delay, VerificationModeFactory.times(1));
    }","Verification will be triggered after given amount of time, allowing testing of async code.",1,37
4501,"public Frame score(Frame frame) {
    if (!get_params().autoencoder) {
      return super.score(frame);
    } else {
      // Reconstruction
      Frame fr = new Frame(frame);
      final int len = model_info().data_info().fullN();
      String prefix = ""reconstr_"";
      assert(model_info().data_info()._responses == 0);
      String[] coefnames = model_info().data_info().coefNames();
      assert(len == coefnames.length);
      for( int c=0; c<len; c++ )
        fr.add(prefix+coefnames[c],fr.anyVec().makeZero());
      new MRTask2() {
        @Override public void map( Chunk chks[] ) {
          double tmp [] = new double[_names.length];
          float preds[] = new float [len];
          final Neurons[] neurons = DeepLearningTask.makeNeuronsForTesting(model_info);
          for( int row=0; row<chks[0]._len; row++ ) {
            float p[] = score_autoencoder(chks, row, tmp, preds, neurons);
            for( int c=0; c<preds.length; c++ )
              chks[_names.length+c].set0(row,p[c]);
          }
        }
      }.doAll(fr);

      // Return just the output columns
      int x=_names.length, y=fr.numCols();
      return fr.extractFrame(x, y);
    }
  }",This is called from Model.score().,1,444
4502,"public static Filter filter(Predicate criteria) {
        return new SingleFilter(criteria);
    }",Creates a new Filter based on given criteria,1,29
4503,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_FILE_TYPE;
    }",The ID3v2 frame identifier,1,22
4504,"public String getNextColumn()
    {
        return _nextColumnName;
    }",Returns the name of the column before which the new column should be added.,1,20
4505,"public static Set<String> getRemoteUserAgents() {
    if (unitTestShell == null) {
      return null;
    }
    return unitTestShell.runStyle.getUserAgents();
  }",Get the set of remote user agents to compile.,1,53
4506,"public ModelClass getModelObject(int index) {
        return getJsonModel(index).toModel();
    }",Returns the  ModelClass representation of the object.,1,29
4507,"public static SenderFactory getInstance() {
		if(instance==null) {
			synchronized(lock) {
				if(instance==null) {
					instance = new SenderFactory();
				}
			}
		}
		return instance;
	}",Acquires the SenderFactory singleton instance,1,72
4508,"public List<AbstractBundle> getBundleBySymbolicName(String symbolicName, Version version) {
		synchronized (bundles) {
			return bundles.getBundles(symbolicName, version);
		}
	}",Retrieve the bundles that has the given symbolic name and version.,1,50
4509,"public SupportedLanguage language() {
    return language;
  }",Returns the supported language.,1,19
4510,"private Group getGroup(int position) {
        int previous = 0;
        int size;
        for (Group group : groups) {
            size = group.getItemCount();
            if (position - previous < size) return group;
            previous += group.getItemCount();
        }
        throw new IndexOutOfBoundsException(""Requested position "" + position + ""in group adapter "" +
                ""but there are only "" + previous + "" items"");
    }","Get group, given a raw position in the list.",1,135
4511,"public Proxy setType( String type )
    {
        return new Proxy( type, host, port, auth );
    }",Sets the type of the proxy.,1,41
4512,"public IBuildServer getServer() {
		if (eContainerFeatureID() != BuildPackage.BUILD_PLAN__SERVER)
			return null;
		return (IBuildServer) eContainer();
	}",Returns the value of the 'Server' container reference.,1,47
4513,"private BucketedValue getValueFromTimeBucketReader(Slice key, long timeBucket)
    {
      FileAccess.FileReader fileReader = readers.get(timeBucket);
      if (fileReader != null) {
        return readValue(fileReader, key, timeBucket);
      }
      //file reader is not loaded and is null
      try {
        if (loadFileReader(timeBucket)) {
          return readValue(readers.get(timeBucket), key, timeBucket);
        }
        return null;
      } catch (IOException e) {
        throw new RuntimeException(""while loading "" + bucketId + "", "" + timeBucket, e);
      }
    }",Returns the value for the key from a time-bucket reader,1,166
4514,"public static String removeFormattingCharacters(final String toBeEscaped) {
        StringBuffer escapedBuffer = new StringBuffer();
        for (int i = 0; i < toBeEscaped.length(); i++) {
            if ((toBeEscaped.charAt(i) != '\n') && (toBeEscaped.charAt(i) != '\r') && (toBeEscaped.charAt(i) != '\t')) {
                escapedBuffer.append(toBeEscaped.charAt(i));
            }
        }
        return escapedBuffer.toString();
    }","Removes newline, carriage return and tab characters from a string.",1,150
4515,"@SuppressWarnings(""unchecked"")
	public static <T extends IOReadableWritable> T createCopy(final T original) throws IOException {

		final ByteArrayOutputStream baos = new ByteArrayOutputStream();
		final DataOutputStream dos = new DataOutputStream(baos);

		original.write(dos);

		final String className = original.getClass().getName();
		if (className == null) {
			fail(""Class name is null"");
		}

		Class<T> clazz = null;

		try {
			clazz = (Class<T>) Class.forName(className);
		} catch (ClassNotFoundException e) {
			fail(e.getMessage());
		}

		if (clazz == null) {
			fail(""Cannot find class with name "" + className);
		}

		T copy = null;
		try {
			copy = clazz.newInstance();
		} catch (InstantiationException e) {
			fail(e.getMessage());
		} catch (IllegalAccessException e) {
			fail(e.getMessage());
		}

		if (copy == null) {
			fail(""Copy of object of type "" + className + "" is null"");
		}

		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
		final DataInputStream dis = new DataInputStream(bais);

		copy.read(dis);

		return copy;
	}",Creates a copy of the given  IOReadableWritable object by an in-memory serialization and subsequent deserialization.,1,401
4516,"public static int size(String name) {
        if (name.isEmpty()) return 1; // TODO
        return name.length() + 2;
    }",Retrieve the rough binary length of a string (1 byte for the root domain or (length + 2) bytes).,1,50
4517,"public static Collection<URL> forManifest() {
        return forManifest(forClassLoader());
    }",Returns a distinct collection of URLs based on URLs derived from class loaders expanded with Manifest information.,1,29
4518,"public static Collection<URL> forJavaClassPath() {
        Collection<URL> urls = new ArrayList<URL>();
        String javaClassPath = System.getProperty(""java.class.path"");
        if (javaClassPath != null) {
            for (String path : javaClassPath.split(File.pathSeparator)) {
                try {
                    urls.add(new File(path).toURI().toURL());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return distinctUrls(urls);
    }",Returns a distinct collection of URLs based on the  java.class.path system property.,1,157
4519,"public Collection<Object> getExtensionProviders() {
        return Collections.unmodifiableCollection(extensionProviders.values());
    }",Returns an unmodifiable collection of all PacketExtensionProvider instances.,1,31
4520,"private static String parseExpression(String text, int startPos, int len, OdbcEscapeType type, Pattern pattern) {
        String val = parseExpression(text, startPos, len);

        if (!pattern.matcher(val).matches())
            throw new IgniteException(""Invalid "" + type + "" escape sequence: "" + substring(text, startPos, len));

        return val;
    }",Parse expression and validate against ODBC specification with regex pattern.,1,118
4521,"public Properties getInputStorageDriverProperties() {
    return hcatProperties;
  }",Gets the value of hcatProperties.,1,19
4522,"public IProject project(Resource resource) {
    return file(resource.getURI()).getProject();
  }",Returns the project that contains the given resource.,1,33
4523,"public static final String dump(final long address[]) {
		if(address==null || address.length==0) throw new IllegalArgumentException(""Address array was null or zero length"");
		final byte dim = getDimension(address[0]);		
		StringBuilder b = new StringBuilder(print(address));
//		b.append(""\n\tAddresses: ["");
//		final int size = getSize(address);
//		if(size>0) {
//			for(int i = 0; i < size; i++) {
//				b.append(getAddress(address, i)).append("", "");
//			}			
//			b.deleteCharAt(b.length()-1);
//			b.deleteCharAt(b.length()-1);
//		}
//		return b.append(""]"").toString();
		return b.toString();
	}",Prints the detailed state of an AllocationPointer,1,122
4524,"public AspectContainer[] getAspectContainers() {
        initialize();
        return m_aspectContainers;
    }",Returns an array with all the aspect containers.,1,27
4525,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_ALBUM  ;
    }",The ID3v2 frame identifier,1,23
4526,"public RowExpansion getRowExpansion() {
        for (UIComponent kid : getChildren())
            if (kid instanceof RowExpansion) return (RowExpansion) kid;
        return null;
    }","If a RowExpansion component is a child of this table, return it.",1,54
4527,"public static boolean isMountAllowed(MountPoint mp) {
        return !RESTRICTED_FS_TYPE.contains(mp.getType());
    }",Method that returns if a filesystem is allowed to be mounted/unmounted (rw/ro).,1,34
4528,"public IProject project(URI resourceUri) {
    return file(resourceUri).getProject();
  }",Returns the project that contains the resource at the given URI.,1,29
4529,"private Task<Void> deregisterWithServer() {
        final Map<String, Object> request = getDeregisterPushDeviceRequest();
        return getStitchClient().executePipeline(new PipelineStage(
                Actions.DEREGISTER_PUSH, request))
                .continueWith(new Continuation<List<Object>, Void>() {
                    @Override
                    public Void then(@NonNull Task<List<Object>> task) throws Exception {
                        if (!task.isSuccessful()) {
                            throw task.getException();
                        }

                        removeInfoFromConfigs(_info);
                        return null;
                    }
                });
    }",Deregister the device associated with the registration token from Stitch.,1,159
4530,"public ActionRequestBuilder explain(String sql) throws SqlParseException {
		SQLQueryExpr sqlExpr = toSqlExpr(sql);

		Select select = new SqlParser().parseSelect(sqlExpr);
		Query query = QueryFactory.create(client, select);
		return query.explain();
	}",Prepare action And transform sql into ES ActionRequest,1,81
4531,"public Int2IntMap.Entry[] getEntriesSortedByValue(int k) {
		Int2IntMap.Entry[] entries = getEntriesSortedByValue();

		if (entries == null)
			return null;

		if (entries.length < k)
			return entries;

		return Arrays.copyOfRange(entries, 0, k);
	}",Returns top k entries sorted by descending value.,1,93
4532,"public static Map<String, String> scan(String sourceDir)
  {
    final String sourceDirWithSeparator = sourceDir.endsWith(File.separator) ? sourceDir : sourceDir + File.separator;
    final File dir = new File(sourceDirWithSeparator);
    if (!dir.exists() || !dir.isDirectory())
    {
      return Collections.emptyMap();
    }

    // suppress the warning because of inconsistent FileUtils interface
    @SuppressWarnings(""unchecked"")
    final Collection<File> files = (Collection<File>) FileUtils.listFiles(dir, null, true);
    final Map<String, String> classFileNames = new HashMap<String, String>();
    final int prefixLength = sourceDirWithSeparator.length();
    for (File f : files)
    {
      assert(f.exists() && f.isFile());

      final int extensionIndex = f.getName().lastIndexOf('.');
      final String filePath = f.getPath();
      if (extensionIndex < 0 || !filePath.startsWith(sourceDirWithSeparator))
      {
        continue;
      }

      final int reverseExtensionIndex = f.getName().length() - extensionIndex;
      classFileNames.put(filePath.substring(prefixLength, filePath.length() - reverseExtensionIndex).replace(File.separator, "".""),
                         filePath);
    }

    return classFileNames;
  }",Construct map from fully qualified class name to filename whose sources are found under a given source directory.,1,384
4533,"public InputPort<Object> getConsole(String name, String nodeName, DAG dag)
  {
    // hack to output to HTTP based on actual environment
    String serverAddr = System.getenv(""MALHAR_AJAXSERVER_ADDRESS"");
    if (serverAddr != null) {
      HttpOutputOperator<Object> oper = dag.addOperator(name, new HttpOutputOperator<Object>());
      oper.setResourceURL(URI.create(""http://"" + serverAddr + ""/channel/"" + nodeName));
      return oper.input;
    }

    ConsoleOutputOperator oper = dag.addOperator(name, ConsoleOutputOperator.class);
    return oper.input;
  }",Get console for output.,1,162
4534,"public static <E> Predicates.AllPredicate<E> all(Predicate<E>... predicates) {
        return new Predicates.AllPredicate<E>(predicates);
    }",Returns a Predicate that only accepts an element if all the predicates accept the element.,1,49
4535,"public boolean isInvalid(Object value) {
		return getEnvironment().getOCLStandardLibrary().getInvalid() == value;
	}",Queries whether a value is the special invalid token.,1,37
4536,"public ResourceCollection<Customer> all(int pageNumber) {
        String queryString = new QueryString().append(""page"", pageNumber).toString();
        NodeWrapper response = http.get(""/customers?"" + queryString);
        return new ResourceCollection<Customer>(new CustomerPager(this), response, Customer.class);
    }",Finds all Customers and returns a  ResourceCollection for paging through them starting at the given page.,1,95
4537,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_PLAY_COUNTER;
    }",The ID3v2 frame identifier,1,22
4538,"public static Collection<Refreshable> buildRefreshed(Collection<Refreshable> currentAlreadyRefreshed) {
    return currentAlreadyRefreshed == null ? new HashSet<Refreshable>(3) : currentAlreadyRefreshed;
  }",Creates a new and empty  Collection if the method parameter is null.,1,51
4539,"protected CacheObject saveValueForIndexUnlocked() throws IgniteCheckedException {
        assert Thread.holdsLock(this);

        if (!cctx.cache().isMongoDataCache() && !cctx.cache().isMongoMetaCache())
            return null;

        return rawGetOrUnmarshalUnlocked(false);
    }",This method will return current value only if clearIndex(V) will require previous value (this is the case for Mongo caches).,1,75
4540,"protected Object getCredentials(AuthenticationToken token) {
        Object credentials = token.getCredentials();
        Object salt = isHashSalted() ? getSalt( token ) : null;
        return hashProvidedCredentials(credentials, salt, getHashIterations() );
    }","As this is a HashedCredentialMatcher, this method overrides the parent method by returning a hashed value of the submitted token's credentials.",1,73
4541,"private RedisClient getRedisClient(RedisConnectionConfig connectionConfig) {
        if (connectionConfig.getRedisSentinels().size() == 0) {
            RecordLog.info(""[RedisDataSource] Creating stand-alone mode Redis client"");
            return getRedisStandaloneClient(connectionConfig);
        } else {
            RecordLog.info(""[RedisDataSource] Creating Redis Sentinel mode Redis client"");
            return getRedisSentinelClient(connectionConfig);
        }
    }",Build Redis client fromm  RedisConnectionConfig.,1,88
4542,"public static final long getEndOffset(final long address) {
		return getEndAddress(address) - getAddressOfDim(address);
	}",Returns the total byte size of the referenced AllocationPointer,1,38
4543,"public static IJavaLineBreakpoint lineBreakpointExists(String typeName, int lineNumber) throws CoreException {
		String modelId= getPluginIdentifier();
		String markerType= JavaLineBreakpoint.getMarkerType();
		IBreakpointManager manager= DebugPlugin.getDefault().getBreakpointManager();
		IBreakpoint[] breakpoints= manager.getBreakpoints(modelId);
		for (int i = 0; i < breakpoints.length; i++) {
			if (!(breakpoints[i] instanceof IJavaLineBreakpoint)) {
				continue;
			}
			IJavaLineBreakpoint breakpoint = (IJavaLineBreakpoint) breakpoints[i];
			if (breakpoint.getMarker().getType().equals(markerType)) {
				if (breakpoint.getTypeName().equals(typeName)) {
					if (breakpoint.getLineNumber() == lineNumber) {
						return breakpoint;
					}
				}
			}
		}
		return null;
	}",Returns a Java line breakpoint that is already registered with the breakpoint manager for a type with the given name at the given line number.,1,238
4544,"public Collection values() {
		return Collections.unmodifiableCollection( entityToCopyMap.values() );
	}",Returns an unmodifiable set view of the entity copies contained in this EventCache.,1,30
4545,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_LINKED_INFO;
    }",The ID3v2 frame identifier,1,22
4546,"public Iterable<Rule> getRules(TriggerTypes triggerType, Item item, Command command) {
		return internalGetRules(triggerType, item, command, null);
	}","Returns all rules for which the trigger condition is true for the given type, item and command.",1,47
4547,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_GENRE ;
    }",The ID3v2 frame identifier,1,23
4548,"public static String getOriginForRestCalls(String browserRequestURL) {
        return UriUtils.getOrigin(browserRequestURL);
    }",Find origin for REST request calls from web UI application to REST application (assuming the REST application is deployed on same host like current UI application),1,29
4549,"public static Intent createIntent(IssueFilter filter) {
        return new Builder(""repo.issues.VIEW"").repo(filter.getRepository()).add(EXTRA_ISSUE_FILTER, filter).toIntent();
    }",Create intent to browse the filtered issues,1,52
4550,"@Override
    protected <T extends Dom> T copy(T parent) {
        return (T) new ConfigBean(this, parent);
    }",Returns a copy of itself providing the parent for the new copy.,1,45
4551,"private StopWatchParser newStopWatchParser() {
        try {
            return (StopWatchParser) Class.forName(stopWatchParserClassName).newInstance();
        } catch (Exception e) {
            throw new RuntimeException(""Could not create StopWatchParser: "" + e.getMessage(), e);
        }
    }",Helper method instantiates a new StopWatchParser based on the StopWatchParserClassName option.,1,77
4552,"public static String executeUrl(String httpMethod, String url, int timeout) {
		
		String proxyHost = System.getProperty(""http.proxyHost"");
		String proxyPort = System.getProperty(""http.proxyPort"");
		String proxyUser = System.getProperty(""http.proxyUser"");
		String proxyPassword = System.getProperty(""http.proxyPassword"");
		
		return executeUrl(httpMethod, url, timeout, proxyHost, proxyPort, proxyUser, proxyPassword);
	}",Executes the given url with the given httpMethod.,1,127
4553,"public boolean isInRange(double low, double high) {
		if (low > high)
			throw new IllegalArgumentException(
						""The left endpoint of the interval must be less than "" +
						""the right endpoint."");

		return getLow() >= low && getHigh() <= high;
	}","Indicates if this instance is included in a [ low,  high] time interval.",1,80
4554,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_COMMERCIAL_FRAME;               
    }",The ID3v2 frame identifier,1,23
4555,"public static boolean isNotBlank(String str) {
        return null != str && !"""".equals(str.trim());
    }",Determine whether a string is not blank,1,45
4556,"public Set keySet() {
		return Collections.unmodifiableSet( entityToCopyMap.keySet() );
	}",Returns an unmodifiable set view of the entities contained in this EventCache,1,30
4557,"public static String compact(String s) {
        return s.replace(""org.gridgain.grid."", ""o.g.g."").
            replace(""org.gridgain.visor."", ""o.g.v."").
            replace(""org.gridgain.scalar."", ""o.g.s."").
            replace(""org.gridgain."", ""o.g."");
    }","Replaces all occurrences of  org.gridgain. with  o.g.,  org.gridgain.grid. with  o.g.g.,  org.gridgain.visor. with  o.g.v. and  org.gridgain.scalar. with  o.g.s..",1,78
4558,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_ATTACHED_PICTURE;
    }",The ID3v2 frame identifier,1,22
4559,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_GROUP_ID_REG ;
    }",The ID3v2 frame identifier,1,23
4560,"@Processor
    @InvalidateConnectionOn(exception = NotAuthenticatedException.class)
    public Offer readOffer(String objectId) {
        return (Offer) read(ServiceSourceCollection.Offers, objectId);
    }",Fetches the offer identified by the object id in the collection.,1,49
4561,"public static String compact(String s) {
        return s.replace(""org.apache.ignite.internal.visor."", ""o.a.i.i.v."").
            replace(""org.apache.ignite.internal."", ""o.a.i.i."").
            replace(""org.apache.ignite.scalar."", ""o.a.i.s."").
            replace(""org.apache.ignite."", ""o.a.i."");
    }","Replaces all occurrences of  org.apache.ignite. with  o.a.i.,  org.apache.ignite.internal. with  o.a.i.i.,  org.apache.ignite.internal.visor. with  o.a.i.i.v. and  org.apache.ignite.scalar. with  o.a.i.s..",1,78
4562,"public static synchronized String[] findDNS() {
        String[] resArray = null;
        for (DNSServerLookupMechanism mechanism : LOOKUP_MECHANISMS) {
            resArray = mechanism.getDnsServerAddresses();
            if (resArray == null) {
                continue;
            }

            List<String> res = new ArrayList<>(Arrays.asList(resArray));

            Iterator<String> it = res.iterator();
            while (it.hasNext()) {
                String potentialDnsServer = it.next();

                if (blacklistedDnsServers.contains(potentialDnsServer)) {
                    LOGGER.fine(""The DNS server lookup mechanism '"" + mechanism.getName()
                    + ""' returned a blacklisted result: '"" + potentialDnsServer + ""'"");
                    it.remove();
                }
            }

            if (!res.isEmpty()) {
                resArray = res.toArray(new String[res.size()]);
                break;
            }
        }

        return resArray;
    }",Retrieve a list of currently configured DNS servers.,1,269
4563,"public String createGPX()
    {
        return createGPX(""GraphHopper"", 0, ""GMT"");
    }",Creates the standard GPX string out of the points.,1,33
4564,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_LYRICIST;
    }",The ID3v2 frame identifier,1,22
4565,"public byte getMatch() {
	return match;
}",Returns a byte code indicating the type of match this pre-requisite requires.,1,18
4566,"@Nullable
    default OpcUaXmlDataTypeCodec<?> getXmlCodec(String namespaceUri, String description) {
        DataTypeCodec codec = getCodec(namespaceUri, description);

        if (codec instanceof OpcUaXmlDataTypeCodec) {
            return (OpcUaXmlDataTypeCodec<?>) codec;
        } else {
            return null;
        }
    }",Get the  OpcUaXmlDataTypeCodec identified by  description from the dictionary identified by  namespaceUri.,1,86
4567,"protected boolean executeLogin(ServletRequest request, ServletResponse response) {
        if (log.isDebugEnabled()) {
            log.debug(""Attempting to authenticate Subject based on Http BASIC Authentication request..."");
        }

        String authorizationHeader = getAuthzHeader(request);
        if (authorizationHeader == null || authorizationHeader.length() == 0 ) {
            return false;
        }

        if (log.isDebugEnabled()) {
            log.debug(""Attempting to execute login with headers ["" + authorizationHeader + ""]"");
        }

        String[] prinCred = getPrincipalsAndCredentials(authorizationHeader, request);
        if ( prinCred == null || prinCred.length < 2 ) {
            return false;
        }

        String username = prinCred[0];
        String password = prinCred[1];

        if (log.isDebugEnabled()) {
            log.debug(""Processing login request for username ["" + username + ""]"");
        }

        AuthenticationToken token = createToken(username, password, request );
        if ( token != null ) {
            return executeLogin(token, request, response );
        }

        //always default to false.  If we've made it to this point in the code, that
        //means the authentication attempt either never occured, or wasn't successful:
        return false;
    }",Executes a login attempt with the provided credentials in the http header and returns true if the login attempt is successful and false otherwise.,1,327
4568,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_ORIGINAL_RELEASE_TIME;
    }",The ID3v2 frame identifier,1,22
4569,"public InputStream getInputStream(String managedFile) throws IOException {
		return getInputStream(managedFile, ReliableFile.OPEN_BEST_AVAILABLE);
	}",Returns a managed InputStream for a managed file.,1,34
4570,"public static DefinitionsFactory getDefinitionsFactory() {
        return tilesUtilImpl.getDefinitionsFactory();
    }",Get definition impl from appropriate servlet context.,1,25
4571,"private HandlerList getEventListeners(Class<? extends Event> type) {
        try {
            Method method = getRegistrationClass(type).getDeclaredMethod(""getHandlerList"");
            method.setAccessible(true);
            return (HandlerList)method.invoke(null);
        } catch (Exception e) {
            throw new IllegalPluginAccessException(e.toString());
        }
    }",Returns the specified event type's HandlerList,1,102
4572,"protected Serializable getSessionId(SubjectContext subjectContext) {
        return subjectContext.getSessionId();
    }","Utility method to retrieve the session id from the given subject context which will be used to resolve to a  Session, or  null if there is no session id available.",1,26
4573,"protected boolean persistInt(int value) {
        if (!shouldPersist()) {
            return false;
        }

        if (value == getPersistedInt(~value)) {
            // It's already there, so the same as persisting
            return true;
        }

        PreferenceDataStore dataStore = getPreferenceDataStore();
        if (dataStore != null) {
            dataStore.putInt(mKey, value);
        } else {
            SharedPreferences.Editor editor = mPreferenceManager.getEditor();
            editor.putInt(mKey, value);
            tryCommit(editor);
        }
        return true;
    }",Attempts to persist an  Integer if this Preference is persistent.,1,158
4574,"public static SecurityManager getSecurityManager() throws IllegalStateException {
        SecurityManager securityManager = ThreadContext.getSecurityManager();
        if (securityManager == null) {
            securityManager = SecurityUtils.securityManager;
        }
        if (securityManager == null) {
            String msg = ""No SecurityManager accessible to the calling code, either bound to the "" +
                    ThreadContext.class.getName() + "" or as a vm static singleton.  This is an invalid application "" +
                    ""configuration."";
            throw new IllegalStateException(msg);
        }
        return securityManager;
    }",Returns the SecurityManager accessible to the calling code.,1,130
4575,"@Override
    public TModel get(int row) {
        return internalCursorList.getItem(row);
    }",Returns the item from the backing  FlowCursorList.,1,30
4576,"public Collection<AbstractCacheServiceConfiguration<K, V>> getAllConfigurations() {
        return (Collection) new ArrayList<AbstractCacheServiceConfiguration>(list);
    }",Returns a collection of all service configuration objects.,1,40
4577,"CallServiceWrapper getCallService(CallServiceDescriptor descriptor) {
        // Create the new call-service wrapper and update {@link #mCallServices}.
        registerCallService(descriptor);

        return mCallServices.get(descriptor.getServiceComponent());
    }",Creates the requested call service or pulls the previously-created entry from memory.,1,40
4578,"protected LdapSecurityInfo performAuthentication(String username, char[] password) throws NamingException {

        if( searchBase == null ) {
            throw new IllegalStateException( ""A search base must be specified."" );
        }
        if( url == null ) {
            throw new IllegalStateException( ""An LDAP URL must be specified of the form ldap://<hostname>:<port>"" );
        }


        if( principalSuffix != null ) {
            username = username + principalSuffix;
        }

        Hashtable<String, String> env = initializeLdapContext(username, password);

        if (log.isDebugEnabled()) {
            log.debug( ""Initializing LDAP context using URL ["" + url + ""] for user ["" + username + ""]."" );
        }

        LdapContext ctx = null;
        try {
            ctx = new InitialLdapContext(env, null);

            return queryForLdapDirectoryInfo(username, ctx);


        } catch (javax.naming.AuthenticationException e) {
            throw new IncorrectCredentialException( ""User could not be authenticated with LDAP server."", e );

        } finally {
            // Always close the LDAP context
            LdapUtils.closeContext(ctx);
        }
    }","Performs the actual authentication of the user by connecting to the LDAP server, querying it for user information, and returning an  LdapSecurityInfo instance containing the results.",1,304
4579,"protected List<Versioned<byte[]>> proxyGet(ByteArray key) throws VoldemortException {
        if(metadata.getRebalancingProxyDest() != null) {
            return adminClient.redirectGet(metadata.getRebalancingProxyDest().getId(),
                                           getName(),
                                           key);
        }

        throw new VoldemortException(""DonorNode not set for proxyGet() "");
    }",performs back-door proxy get to  MetadataStore#getDonorNode(),1,91
4580,"public static Factory enhance(Class cls, MethodInterceptor ih) {
        return (Factory)enhanceHelper(cls.isInterface() ? null : cls,
                                      cls.isInterface() ? new Class[]{ cls } : null,
                                      ih, cls.getClassLoader(), null, null );
    }",Overrides non-abstract methods and implements all abstract methods.,1,90
4581,"public static Optional<Set<IJobKey>> from(Query.Builder query) {
    if (Query.isJobScoped(query)) {
      TaskQuery taskQuery = query.get();
      ImmutableSet.Builder<IJobKey> builder = ImmutableSet.builder();

      if (taskQuery.isSetJobName()) {
        builder.add(from(
            taskQuery.getOwner().getRole(),
            taskQuery.getEnvironment(),
            taskQuery.getJobName()));
      }

      if (taskQuery.isSetJobKeys()) {
        builder.addAll(IJobKey.setFromBuilders(taskQuery.getJobKeys()));
      }
      return Optional.of(assertValid(builder.build()));
    } else {
      return Optional.absent();
    }
  }",Attempt to extract job keys from the given query if it is job scoped.,1,201
4582,"private Node getNodeIfPresent(int proxyNodeId) {
        try {
            return metadata.getCluster().getNodeById(proxyNodeId);
        } catch(Exception e) {
            throw new VoldemortException(""Failed to get proxyNode "" + proxyNodeId
                                         + "" from current cluster "" + metadata.getCluster()
                                         + "" at node "" + metadata.getNodeId(), e);
        }
    }","Get the  voldemort.store.socket.SocketStore to redirect to for the proxy node, creating one if needed.",1,101
4583,"public int toggleFacing() {
        int facing = mCameraController.getFacing();
        switch (facing) {
            case FACING_BACK:
                setFacing(FACING_FRONT);
                break;

            case FACING_FRONT:
                setFacing(FACING_BACK);
                break;
        }

        return mCameraController.getFacing();
    }",Toggles the facing value between  CameraConstants#FACING_BACK and  CameraConstants#FACING_FRONT.,1,85
4584,"public static Set<String> getPropertyNames(Class<? extends EntityBase> entityClass) {
        return getProperties(entityClass).keySet();
    }",Returns the names of the properties of a given entity class.,1,41
4585,"public IntegralDataTypeHolder getHiValue() {
			return upperLimit;
		}",Getter for property 'upperLimit'.,1,19
4586,"public static LifecycleOwner get() {
        return sInstance;
    }",The LifecycleOwner for the whole application process.,1,21
4587,"public static long getDirectorySize(Path path, FileSystem fs) throws IOException {
    ContentSummary cs = fs.getContentSummary(path);
    return cs.getLength();
  }","Calculates the total size of all the contents of a directory, including the contents of all of its subdirectories.",1,52
4588,"@NotNull
  @Override
  public ExitCode build(CompileContext context,
                        ModuleChunk chunk,
                        DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder,
                        OutputConsumer outputConsumer) throws ProjectBuildException {
    JpsAndroidGradleModuleExtension extension = AndroidGradleJps.getFirstExtension(chunk);
    if (extension == null) {
      String format = ""Project '%1$s' does not have the '%2$s' facet. Nothing done."";
      LOG.info(String.format(format, getProjectName(context), AndroidGradleFacet.NAME));
      return ExitCode.NOTHING_DONE;
    }

    String[] buildTasks = getBuildTasks(context, chunk);
    if (buildTasks.length == 0) {
      String format = ""No build tasks found for project '%1$s'. Nothing done."";
      LOG.info(String.format(format, getProjectName(context)));
      return ExitCode.NOTHING_DONE;
    }

    String msg = ""Gradle build using tasks: "" + Arrays.toString(buildTasks);
    context.processMessage(new ProgressMessage(msg));
    LOG.info(msg);

    ensureTempDirExists();

    BuilderExecutionSettings executionSettings;
    try {
      executionSettings = new BuilderExecutionSettings();
    } catch (RuntimeException e) {
      throw new ProjectBuildException(e);
    }

    LOG.info(""Using execution settings: "" + executionSettings);

    String androidHome = null;
    if (!isAndroidHomeKnown(executionSettings)) {
      androidHome = getAndroidHomeFromModuleSdk(context, chunk);
    }

    String format = ""About to build project '%1$s' located at %2$s"";
    LOG.info(String.format(format, getProjectName(context), executionSettings.getProjectDir().getAbsolutePath()));

    return doBuild(context, buildTasks, executionSettings, androidHome);
  }",Builds a project using Gradle.,1,428
4589,"public boolean renameTo(File newPath) {
        if (path.isEmpty() || newPath.path.isEmpty()) {
            return false;
        }
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkWrite(path);
            security.checkWrite(newPath.path);
        }
        return renameToImpl(pathBytes, newPath.pathBytes);
    }",Renames this file to  newPath.,1,114
4590,"protected List<String> getJavaOptsProperty(Function<String, String> mapper) {
        return configurationGenerator.getJavaOpts(mapper);
    }","Gets the Java options defined in Nuxeo configuration files, e.g.",1,36
4591,"@Nullable public static IgniteUuid readGridUuid(DataInput in) throws IOException {
        // If UUID is not null.
        if (!in.readBoolean()) {
            long most = in.readLong();
            long least = in.readLong();

            UUID globalId = GridUuidCache.onGridUuidRead(new UUID(most, least));

            long locId = in.readLong();

            return new IgniteUuid(globalId, locId);
        }

        return null;
    }",Reads  org.gridgain.grid.IgniteUuid from input stream.,1,133
4592,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_ENCODING_TIME;
    }",The ID3v2 frame identifier,1,22
4593,"public boolean cannotBeDefinitelyNullOrNonNull(VariableBinding binding) {
	return isPotentiallyUnknown(binding) ||
		isPotentiallyNonNull(binding) && isPotentiallyNull(binding);
}",Check whether a given field or local variable is known to be unable to gain a definite non null or definite null status by the use of an enclosing flow info.,1,41
4594,"public AnnotationProcessor getProcessorFor(Set<AnnotationTypeDeclaration> atds, AnnotationProcessorEnvironment env) {
        return new JdbcControlAnnotationProcessor(env);
    }",Returns an JdbcControlAnnotationProcessor,1,35
4595,"public static long getDirectBufferAddress(Buffer buf) {
		if (!(buf instanceof DirectBuffer)) {
			return 0;
		}
		return ((DirectBuffer) buf).getEffectiveAddress().toLong();
	}",Gets the start address of a direct buffer.,1,63
4596,"public Expression getExpression() {
        return m_expression;
    }",Returns the expression.,1,19
4597,"@NotNull
  public static List<AbstractProperty<?>> getAll(Object object) {
    ArrayList<AbstractProperty<?>> properties = new ArrayList<AbstractProperty<?>>();
    for (Field field : object.getClass().getDeclaredFields()) {
      if (AbstractProperty.class.isAssignableFrom(field.getType())) {
        try {
          // We change the access level of this field to avoid getting an IllegalAccessException
          boolean isFieldPrivate = !field.isAccessible();
          field.setAccessible(true);
          properties.add((AbstractProperty)field.get(object));
          if (isFieldPrivate) {
            field.setAccessible(false);
          }
        }
        catch (IllegalAccessException ignored) {
        }
      }
    }
    return properties;
  }",Uses reflection to get all  AbstractProperty instances in an Object instance.,1,195
4598,"protected String urlEncode(String input, String encodingScheme) throws UnsupportedEncodingException {
        return URLEncoder.encode(input, encodingScheme);
    }","URL-encode the given input String with the given encoding scheme, using  URLEncoder#encode(String, String) URLEncoder.encode(input, enc).",1,39
4599,"public RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {
        String sessionId = System.getProperty(SESSION_ID_SYSTEM_PROPERTY_NAME);
        if( sessionId == null ) {
            throw new IllegalStateException( ""System property ["" + SESSION_ID_SYSTEM_PROPERTY_NAME + ""] is not set.  "" +
                    ""This property must be set to the JSecurity session ID for remote calls to function."" );
        }
        RemoteInvocation ri = new RemoteInvocation(methodInvocation);
        ri.addAttribute( SESSION_ID_KEY, sessionId );

        return ri;
    }",Creates a  RemoteInvocation with the current session ID as an  RemoteInvocation#getAttribute(String) attribute.,1,117
4600,"public Class<? extends ActionBean> getActionBeanType(String path) {
        return this.formBeans.get(getUrlBindingFromPath(path));
    }",Fetches the Class representing the type of ActionBean that would respond were a request made with the path specified.,1,39
4601,"public Proxy setPort( int port )
    {
        return new Proxy( type, host, port, auth );
    }",Sets the port number for the proxy.,1,41
4602,"public static boolean recursiveClassEquals(Throwable throwableToInspect, Class... throwableClassesToLookFor) {
        for (Class clazz: throwableClassesToLookFor) {
            Class classToInspect = throwableToInspect.getClass();
            while (classToInspect != null) {
                if (classToInspect.equals(clazz)) {
                    return true;
                }
                classToInspect = classToInspect.getSuperclass();
            }
        }
        Throwable cause = throwableToInspect.getCause();
        return cause != null && recursiveClassEquals(cause, throwableClassesToLookFor);
    }","Inspects a given  Throwable as well as its nested causes, in order to look for a specific set of exception classes.",1,145
4603,"public Presence getPresence(String user) {
        String key = getPresenceMapKey(StringUtils.parseBareAddress(user));
        Map<String, Presence> userPresences = presenceMap.get(key);
        if (userPresences == null) {
            Presence presence = new Presence(Presence.Type.unavailable);
            presence.setFrom(user);
            return presence;
        }
        else {
            // Find the resource with the highest priority
            // Might be changed to use the resource with the highest availability instead.
            Presence presence = null;

            for (String resource : userPresences.keySet()) {
                Presence p = userPresences.get(resource);
                if (!p.isAvailable()) {
                    continue;
                }
                // Chose presence with highest priority first.
                if (presence == null || p.getPriority() > presence.getPriority()) {
                    presence = p;
                }
                // If equal priority, choose ""most available"" by the mode value.
                else if (p.getPriority() == presence.getPriority()) {
                    Presence.Mode pMode = p.getMode();
                    // Default to presence mode of available.
                    if (pMode == null) {
                        pMode = Presence.Mode.available;
                    }
                    Presence.Mode presenceMode = presence.getMode();
                    // Default to presence mode of available.
                    if (presenceMode == null) {
                        presenceMode = Presence.Mode.available;
                    }
                    if (pMode.compareTo(presenceMode) < 0) {
                        presence = p;
                    }
                }
            }
            if (presence == null) {
                presence = new Presence(Presence.Type.unavailable);
                presence.setFrom(user);
                return presence;
            }
            else {
                return presence;
            }
        }
    }",Returns the presence info for a particular user.,1,452
4604,"public boolean filterByNodesConstantSet(OptimizerNode node, int input) {
		
		// check, whether the local order is preserved
		if (ordering != null) {
			ArrayList<Integer> involvedIndexes = ordering.getInvolvedIndexes();
			for (int i = 0; i < involvedIndexes.size(); i++) {
				if (node.isFieldKept(input, involvedIndexes.get(i)) == false) {
					ordering = ordering.createNewOrderingUpToIndex(i);
					break;
				}
			}
		}
		
		// check, whether the local key grouping is preserved
		if (this.groupedFields != null) {
			for (Integer index : this.groupedFields) {
				if (node.isFieldKept(input, index) == false) {
					this.groupedFields = null;
					this.grouped = false;
					break;
				}
			}	
		}
		else {
			this.grouped = false;
		}
		
		return !isTrivial();
	}",Filters these properties by what can be preserved through the given output contract.,1,264
4605,"public Select where(String selection, String... args) {
        this.selection = selection;
        this.selectionArgs = args;
        return this;
    }","When using this method, make sure to pass Select.selectionArgs to the .query or other action methods.",1,50
4606,"public static Account getAccount(final Context context) {
        final Account[] accounts = AccountManager.get(context)
                .getAccountsByType(GITHUB_ACCOUNT_TYPE);
        return accounts.length > 0 ? accounts[0] : null;
    }",Get configured account,1,69
4607,"@Nonnull
  public static DeviceBandwidthSampler getInstance() {
    return DeviceBandwidthSamplerHolder.instance;
  }",Retrieval method for the DeviceBandwidthSampler singleton.,1,26
4608,"public CouchbaseBucketManagerFactory getManagerFactory(CouchbaseEnvironment environment) throws NullPointerException {
        Objects.requireNonNull(environment, ""environment is required"");
        CouchbaseCluster couchbaseCluster = CouchbaseCluster.create(environment, nodes);
        return new DefaultCouchbaseBucketManagerFactory(couchbaseCluster, user, password);
    }",Creates a  DefaultCouchbaseBucketManagerFactory from  CouchbaseEnvironment,1,69
4609,"public int getBlockCount() {
		return blockCount;
	}",Gets the number of blocks that have been added to the buffer.,1,19
4610,"public void run(Collection<GridHadoopTask> tasks) {
        for (final GridHadoopTask task : tasks)
            ctx.kernalContext().closure().callLocalSafe(new GridPlainCallable<GridFuture<?>>() {
                @Override public GridFuture<?> call() throws Exception {
                    GridHadoopTaskInfo info = task.info();

                    try (GridHadoopTaskOutput out = createOutput(info);
                         GridHadoopTaskInput in = createInput(info)) {
                        GridHadoopTaskContext ctx = null;

                        task.run(ctx);

                        return out.finish();
                    }
                }
            }, false);
    }",Runs tasks.,1,172
4611,"public boolean addJobDirectory(File dir) {
	    if(dir==null) {
	        return false; 
	    }
        File[] candidateConfigs = dir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.endsWith("".cxml"");
            }});
        if(candidateConfigs.length == 0) {
            // no CXML file found!
            return false; 
        }
        if(jobConfigs.containsKey(dir.getName())) {
            // same-name job already exists
            return false; 
        }
        for (File cxml : candidateConfigs) {
            try {
                CrawlJob cj = new CrawlJob(cxml);            
                if(!cj.getJobDir().getParentFile().equals(getJobsDir())) {
                    writeJobPathFile(cj);
                }
                jobConfigs.put(cj.getShortName(),cj);
                LOGGER.log(Level.INFO,""added crawl job: "" + cj.getShortName());
                return true;
            } catch (IOException iae) {
                LOGGER.log(Level.SEVERE,""unable to add job directory""+dir,iae);
            } catch (IllegalArgumentException iae) {
                LOGGER.log(Level.SEVERE,""bad cxml: ""+cxml,iae);
            }
        }
        // path rejected for some reason
        return false; 
    }",Adds a job directory to the Engine known jobConfigs if not extant.,1,348
4612,"public DenseVector mult(DenseVector vec) {
		assert this.numColumns == vec.size;

		DenseVector result = new DenseVector(this.numRows);
		for (int i = 0; i < this.numRows; i++)
			result.set(i, row(i, false).inner(vec));

		return result;
	}",Do  matrix x vector between current matrix and a given vector,1,106
4613,"public BytesRef get(int ord, BytesRef ref) {
    assert bytesStart != null : ""bytesStart is null - not initialized"";
    assert ord < bytesStart.length: ""ord exceeeds byteStart len: "" + bytesStart.length;
    return pool.setBytesRef(ref, bytesStart[ord]);
  }",Populates and returns a  BytesRef with the bytes for the given ord.,1,78
4614,"public int simplify(PointList points) {
        int deleted = simplify(points, 0, points.size() - 1);
        // compress list: move points into EMPTY slots
        int freeIndex = -1;
        for (int currentIndex = 0; currentIndex < points.size(); currentIndex++) {
            if (Double.isNaN(points.latitude(currentIndex))) {
                if (freeIndex < 0)
                    freeIndex = currentIndex;
                continue;
            }

            if (freeIndex < 0)
                continue;
            points.set(freeIndex, points.latitude(currentIndex), points.longitude(currentIndex));
            // find next free index
            int max = currentIndex;
            for (int searchIndex = freeIndex; searchIndex < max; searchIndex++) {
                if (Double.isNaN(points.latitude(searchIndex))) {
                    freeIndex = searchIndex;
                    break;
                }
            }
        }
        points.setSize(points.size() - deleted);
        return deleted;
    }",This method removes points which are close to the line (defined by maxDist).,1,277
4615,"public Request setURI(final URI uri) {

		if (uri == null) {
			throw new NullPointerException(""URI must not be null"");
		}

		final String host = uri.getHost() == null ? ""localhost"" : uri.getHost();

		try {

			InetAddress destAddress = InetAddress.getByName(host);
			setDestination(destAddress);

			return setOptions(new URI(uri.getScheme(), null, host, uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment()));

		} catch (UnknownHostException e) {
			throw new IllegalArgumentException(""cannot resolve host name: "" + host);
		} catch (URISyntaxException e) {
			// should not happen because we are creating the URI from an existing URI object
			LOGGER.log(Level.WARNING, ""cannot set URI on request"", e);
			throw new IllegalArgumentException(e);
		}
	}",Sets the destination address and port and options from a given URI.,1,247
4616,"public String getIdentifier()
    {
        return  ID3v24Frames.FRAME_ID_ORIG_FILENAME;
    }",The ID3v2 frame identifier,1,22
4617,"public boolean  trySetCount(int newCount) throws Exception
    {
        return sharedValue.trySetValue(toBytes(newCount));
    }",Changes the shared count only if its value has not changed since this client last read it.,1,35
4618,"protected ColumnDefinitionChange compareColumns(Table  sourceTable,
                                                    Column sourceColumn,
                                                    Table  targetTable,
                                                    Column targetColumn)
    {
        if (ColumnDefinitionChange.isChanged(getPlatformInfo(), sourceColumn, targetColumn))
        {
            Column  newColumnDef   = _cloneHelper.clone(sourceColumn, true);
            int     targetTypeCode = _platformInfo.getTargetJdbcType(targetColumn.getTypeCode());
            boolean sizeMatters    = _platformInfo.hasSize(targetTypeCode);
            boolean scaleMatters   = _platformInfo.hasPrecisionAndScale(targetTypeCode);

            newColumnDef.setTypeCode(targetColumn.getTypeCode());
            newColumnDef.setSize(sizeMatters || scaleMatters ? targetColumn.getSize() : null);
            newColumnDef.setAutoIncrement(targetColumn.isAutoIncrement());
            newColumnDef.setRequired(targetColumn.isRequired());
            newColumnDef.setDescription(targetColumn.getDescription());
            newColumnDef.setDefaultValue(targetColumn.getDefaultValue());
            return new ColumnDefinitionChange(sourceTable.getName(), sourceColumn.getName(), newColumnDef);
        }
        else
        {
            return null;
        }
    }",Compares the two columns and returns the change necessary to create the second column from the first one if they differe.,1,260
4619,"@NotNull
  @Override
  public ExitCode build(CompileContext context,
                        ModuleChunk chunk,
                        DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder,
                        OutputConsumer outputConsumer) {
    JpsAndroidGradleModuleExtension extension = AndroidGradleJps.getFirstExtension(chunk);
    if (extension == null) {
      return ExitCode.NOTHING_DONE;
    }
    return ExitCode.OK;
  }",It does nothing.,1,94
4620,"public Set<Part> split(ByteString secret) {
    checkNotNull(secret, ""Secret must not be null"");

    // generate part values
    final byte[][] values = new byte[n][secret.size()];
    for (int i = 0; i < secret.size(); i++) {
      // for each byte, generate a random polynomial, p
      final byte[] p = GF256.generate(random, k - 1, secret.getByte(i));
      for (int x = 1; x <= n; x++) {
        // each part's byte is p(partId)
        values[x - 1][i] = GF256.eval(p, (byte) x);
      }
    }

    // return as a set of objects
    final Set<Part> parts = new HashSet<>(n);
    for (int i = 0; i < values.length; i++) {
      parts.add(Part.of(i + 1, ByteString.of(values[i])));
    }
    return Collections.unmodifiableSet(parts);
  }","Splits the given secret into  n parts, of which any  k or more can be combined to recover the original secret.",1,296
4621,"public PlatformType getPlatform()
    {
        return this.platform;
    }",Gets the operating system you are building for.,1,22
4622,"public IWorkingSet getSelectedWorkingSet() {
		if (getSelectedScope() == WORKING_SET_SCOPE)
			return fWorkingSet;
		else
			return null;
	}",Returns the selected working set of this part.,1,42
4623,"public int getRegisteredResourceRequestCount(K key) {
        int rc = 0;
        if(!requestQueueMap.containsKey(key)) {
            return rc;
        }
        try {
            Queue<AsyncResourceRequest<V>> requestQueue = getRequestQueueForExistingKey(key);
            // FYI: .size() is not constant time in the next call. ;)
            rc = requestQueue.size();
        } catch(IllegalArgumentException iae) {
            logger.debug(""getRegisteredResourceRequestCount called on invalid key: "", iae);
        }
        return rc;
    }",Count the number of queued resource requests for a specific pool.,1,123
4624,"public Subject createSubject(SubjectContext subjectContext) {
        //create a copy so we don't modify the argument's backing map:
        SubjectContext context = copy(subjectContext);

        //ensure that the context has a SecurityManager instance, and if not, add one:
        context = ensureSecurityManager(context);

        //Resolve an associated Session (usually based on a referenced session ID), and place it in the context before
        //sending to the SubjectFactory.  The SubjectFactory should not need to know how to acquire sessions as the
        //process is often environment specific - better to shield the SF from these details:
        context = resolveSession(context);

        //Similarly, the SubjectFactory should not require any concept of RememberMe - translate that here first
        //if possible before handing off to the SubjectFactory:
        context = resolvePrincipals(context);

        Subject subject = doCreateSubject(context);

        //save this subject for future reference if necessary:
        //(this is needed here in case rememberMe principals were resolved and they need to be stored in the
        //session, so we don't constantly rehydrate the rememberMe PrincipalCollection on every operation).
        //Added in 1.2:
        save(subject);

        return subject;
    }","This implementation functions as follows:   Ensures the  SubjectContext is as populated as it can be, using heuristics to acquire data that may not have already been available to it (such as a referenced session or remembered principals). Calls  #doCreateSubject(org.apache.shiro.subject.SubjectContext) to actually perform the  Subject instance creation. calls  #save(org.apache.shiro.subject.Subject) save(subject) to ensure the constructed  Subject's state is accessible for future requests/invocations if necessary. returns the constructed  Subject instance.",1,127
4625,"private static String getPackage(String baseQualifiedName) {
        StringBuilder sb = new StringBuilder();
        StringTokenizer st = new StringTokenizer(baseQualifiedName, "".""); //$NON-NLS-1$
        while (st.hasMoreTokens()) {
            String s = st.nextToken();
            if (Character.isUpperCase(s.charAt(0))) {
                break;
            } else {
                if (sb.length() > 0) {
                    sb.append('.');
                }
                sb.append(s);
            }
        }
        
        if (baseQualifiedName.equals(sb.toString())) {
            // no upper case elements found in the name.  So,
            // do an alternative parse where we assume that the
            // last element is the class name
            int i = baseQualifiedName.lastIndexOf('.');
            
            if (i == -1) {
                // no package
                return """"; //$NON-NLS-1$
            } else {
                return baseQualifiedName.substring(0, i);
            }
        }

        return sb.toString();
    }",Returns the package name of a fully qualified type.,1,266
4626,"public static Callable<Object> callable(Runnable task) {
        if (task == null) {
            throw new NullPointerException();
        }
        return new RunnableAdapter<Object>(task, null);
    }","Returns a  Callable object that, when called, runs the given task and returns null.",1,65
4627,"protected boolean isSocketImpl(CtClass clazz) throws NotFoundException {
		if(Modifier.isAbstract(clazz.getModifiers())) return false;		
		CtClass parent = clazz.getSuperclass();
		while(parent!=null && !parent.getName().equals(objectCtClass.getName())) {
			if(parent.getName().equals(SOCK_NAME)) return true;
			parent = parent.getSuperclass();
		}
		return false;
	}","Determines if the passed class has  SocketImpl as a direct or indirect superclass, is not abstract and does not already implement  ISocketImpl",1,126
4628,"public boolean add(ObserveRelation relation) {
		if (relation == null)
			throw new NullPointerException();
		ObserveRelation previous = observeRelations.put(relation.getKey(), relation);
		if (null != previous) {
			previous.cancel();
			return true;
		}
		return false;
	}",Adds the specified observe relation.,1,97
4629,"public boolean renameTo(java.io.File dest) {
        if (path.length() == 0 || dest.path.length() == 0) {
            return false;
        }
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkWrite(path);
            security.checkWrite(dest.path);
        }
        return renameToImpl(pathBytes, dest.pathBytes);
    }",Renames this file to the name represented by the  dest file.,1,128
4630,"private String trimOutputSpeech(final String outputSpeech) {
        if (outputSpeech == null) {
            return """";
        }
        String trimmedOutputSpeech = outputSpeech.trim();
        if (trimmedOutputSpeech.startsWith(SPEAK_OPEN_TAG) && trimmedOutputSpeech.endsWith(SPEAK_CLOSE_TAG)) {
            return trimmedOutputSpeech.substring(SPEAK_OPEN_TAG.length(), trimmedOutputSpeech.length() - SPEAK_CLOSE_TAG.length())
                    .trim();
        }
        return trimmedOutputSpeech;
    }",Removes  opening and closing XML tags in speechOutput.,1,125
4631,"public String getProperty(String name) {
    // We assume that each Property object has unique non null name.  This code
    // will ignore Property
    // with null name and if there are two Property objects with the same name,
    // it will return the
    // first one it found.
    if (hasProperties()) {
      for (Property property : getProperties()) {
        if (property.hasName() && property.getName().equalsIgnoreCase(name)) {
          return property.getValue();
        }
      }
    }
    return null;
  }",Returns the value of the named property of this entry.,1,111
4632,"public static boolean eqNodes(Object n1, Object n2) {
        return n1 == n2 || !(n1 == null || n2 == null) && !(!(n1 instanceof ClusterNode) || !(n2 instanceof ClusterNode))
            && ((ClusterNode)n1).id().equals(((ClusterNode)n2).id());
    }",Compares two  org.gridgain.grid.ClusterNode instances for equality.,1,113
4633,"public PhoneNumber getExampleNumberForType(String regionCode, PhoneNumberType type) {
    // Check the region code is valid.
    if (!isValidRegionCode(regionCode)) {
      LOGGER.log(Level.WARNING, ""Invalid or unknown region code provided."");
      return null;
    }
    PhoneNumberDesc desc = getNumberDescByType(getMetadataForRegion(regionCode), type);
    try {
      if (desc.hasExampleNumber()) {
        return parse(desc.getExampleNumber(), regionCode);
      }
    } catch (NumberParseException e) {
      LOGGER.log(Level.SEVERE, e.toString());
    }
    return null;
  }",Gets a valid number for the specified region and number type.,1,158
4634,"public ECKey getConnectedKey(KeyBag keyBag) throws ScriptException {
        TransactionOutput connectedOutput = getConnectedOutput();
        checkNotNull(connectedOutput, ""Input is not connected so cannot retrieve key"");
        Script connectedScript = connectedOutput.getScriptPubKey();
        if (connectedScript.isSentToAddress()) {
            byte[] addressBytes = connectedScript.getPubKeyHash();
            return keyBag.findKeyFromPubHash(addressBytes);
        } else if (connectedScript.isSentToRawPubKey()) {
            byte[] pubkeyBytes = connectedScript.getPubKey();
            return keyBag.findKeyFromPubKey(pubkeyBytes);
        } else if (connectedScript.isPayToScriptHash()) {
            byte[] scriptHash = connectedScript.getPubKeyHash();
            RedeemData redeemData = keyBag.findRedeemDataFromScriptHash(scriptHash);
            if (redeemData == null)
                return null;
            return redeemData.getFullKey();
        } else {
            throw new ScriptException(""Could not understand form of connected output script: "" + connectedScript);
        }
    }","Returns the ECKey identified in the connected output, for either pay-to-address scripts, pay-to-key or P2SH scripts.",1,245
4635,"public IncidenceSet getIncidenceSet(HGHandle handle)
    {
    	return cache.getIncidenceCache().get(getPersistentHandle(handle));
    }","Return the IncidenceSet, that is the set ofall HGLinks pointing to, the atom referred by the passed in handle.",1,35
4636,"static public IEclipseContext create(String name) {
		IEclipseContext result = create();
		result.set(EclipseContext.DEBUG_STRING, name);
		return result;
	}",Creates and returns a new empty context.,1,50
4637,"private AffinityInfo affinityInfoFromNode(@Nullable String cacheName, long topVer, ClusterNode n)
        throws IgniteCheckedException {
        GridTuple3<GridAffinityMessage, GridAffinityMessage, GridAffinityAssignment> t = ctx.closure()
            .callAsyncNoFailover(BALANCE, affinityJob(cacheName, topVer), F.asList(n), true/*system pool*/).get();

        CacheAffinityFunction f = (CacheAffinityFunction)unmarshall(ctx, n.id(), t.get1());
        CacheAffinityKeyMapper m = (CacheAffinityKeyMapper)unmarshall(ctx, n.id(), t.get2());

        assert m != null;

        // Bring to initial state.
        f.reset();
        m.reset();

        return new AffinityInfo(f, m, t.get3(), ctx.cacheObjects().contextForCache(n, cacheName));
    }",Requests  CacheAffinityFunction and  CacheAffinityKeyMapper from remote node.,1,218
4638,"public static Collection<URL> forManifest(final Iterable<URL> urls) {
        Collection<URL> result = new ArrayList<URL>();
        // determine if any of the URLs are JARs, and get any dependencies
        for (URL url : urls) {
            result.addAll(forManifest(url));
        }
        return distinctUrls(result);
    }",Returns a distinct collection of URLs by expanding the specified URLs with Manifest information.,1,88
4639,"public static Repo getRepository(Uri uri) {
        List<String> segments = uri.getPathSegments();
        if (segments == null)
            return null;
        if (segments.size() < 2)
            return null;

        String repoOwner = segments.get(0);
        if (!RepositoryUtils.isValidOwner(repoOwner))
            return null;

        String repoName = segments.get(1);
        if (!RepositoryUtils.isValidRepo(repoName))
            return null;

        Repo repository = new Repo();
        User owner = new User();
        owner.login = repoOwner;
        repository.name = repoName;
        repository.owner = owner;
        return repository;
    }",Attempt to parse a  Repo from the given  Uri,1,209
4640,"public List<File> getFiles(){
		return this.files;
	}",Get a list of files of this track.,1,23
4641,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_MUSIC_CD_ID;
    }",The ID3v2 frame identifier,1,22
4642,"public static CompletionStage<Void> asyncEnsureContainers(AsyncCuratorFramework client, String path)
    {
        return ensure(client, path, ExistsOption.createParentsAsContainers);
    }",Asynchronously ensure that the parents of the given path are created as containers,1,44
4643,"public String getExecutable() throws IOException {
        File exe = getExeFile(getPlatform());
        if (exe.exists()) {
            return exe.getPath();
        }
        return null;
    }",Gets the executable path of NodeJS on the target system.,1,64
4644,"public int getFreeSpace(ByteBuffer buf) {
        if (getFreeItemSlots(buf) == 0)
            return 0;

        int freeSpace = getFreeSpace0(buf);

        if (freeSpace < 0) {
            assert freeSpace >= -(ITEM_SIZE + PAYLOAD_LEN_SIZE + LINK_SIZE): freeSpace;

            return 0;
        }

        return freeSpace;
    }",Public version (never return negative value).,1,107
4645,"public static String loadLibrary(URL[] urls, String libnameversion) {
        if (!loadLibraries) {
            return null;
        }

        // If we do not already have the native library file ...
        String filename = loadedLibraries.get(libnameversion);
        if (filename != null) {
            return filename;
        }

        File tempFile = null;
        UnsatisfiedLinkError loadError = null;
        try {
            for (URL url : urls) {
                File file;
                try {
                    // ... if the URL is not already a file ...
                    file = new File(url.toURI());
                } catch (Exception e) {
                    if (tempFile != null && tempFile.exists()) {
                        tempFile.deleteOnExit();
                    }
                    // ... then extract it from our resources ...
                    file = tempFile = extractResource(url, getTempDir(), null, null);
                }
                if (file != null && file.exists()) {
                    filename = file.getAbsolutePath();
                    try {
                        // ... and load it!
                        loadedLibraries.put(libnameversion, filename);
                        System.load(filename);
                        return filename;
                    } catch (UnsatisfiedLinkError e) {
                        loadError = e;
                        loadedLibraries.remove(libnameversion);
                    }
                }
            }
            // ... or as last resort, try to load it via the system.
            String libname = libnameversion.split(""@"")[0];
            loadedLibraries.put(libnameversion, libname);
            System.loadLibrary(libname);
            return libname;
        } catch (UnsatisfiedLinkError e) {
            loadedLibraries.remove(libnameversion);
            if (loadError != null) {
                e.initCause(loadError);
            }
            throw e;
        } catch (IOException ex) {
            loadedLibraries.remove(libnameversion);
            if (loadError != null) {
                ex.initCause(loadError);
            }
            Error e = new UnsatisfiedLinkError(ex.toString());
            e.initCause(ex);
            throw e;
        } finally {
            if (tempFile != null && tempFile.exists()) {
                tempFile.deleteOnExit();
            }
            // But under Windows, it won't get deleted!
        }
    }","Tries to load the library from the URLs in order, extracting resources as necessary.",1,579
4646,"public static ByteString generateNonce(SecurityPolicy securityPolicy) {
        return generateNonce(getNonceLength(securityPolicy));
    }",Generate a nonce for the given  SecurityPolicy.,1,30
4647,"private byte[] decryptFragment(byte[] ciphertextFragment) throws GeneralSecurityException {
		if (session == null) {
			return ciphertextFragment;
		}

		byte[] fragment = ciphertextFragment;

		CipherSuite cipherSuite = session.getReadState().getCipherSuite();
		LOGGER.log(Level.FINER, ""Decrypting record fragment using current read state\n{0}"", session.getReadState());
		
		switch (cipherSuite.getCipherType()) {
		case NULL:
			// do nothing
			break;
			
		case AEAD:
			fragment = decryptAEAD(ciphertextFragment);
			break;
			
		case BLOCK:
			fragment = decryptBlockCipher(ciphertextFragment);
			break;
			
		case STREAM:
			// Currently, Scandium does not support any stream ciphers
			// RC4 is explicitly ruled out from being used in DTLS
			// see http://tools.ietf.org/html/rfc6347#section-4.1.2.2
			break;

		default:
			break;
		}

		return fragment;
	}",Decrypts a TLSCiphertext.fragment according to the current DTLS connection state.,1,217
4648,"private boolean areActivitiesEnabled(final String itemID) {
        if (!WorkbenchActivityHelper.isFiltering())
            return true;

        IWorkbenchActivitySupport workbenchActivitySupport = PlatformUI
            .getWorkbench().getActivitySupport();

        // check if the provider has been matched to a disabled activity id
        IIdentifier id = workbenchActivitySupport.getActivityManager()
            .getIdentifier(
                WorkbenchActivityHelper
                    .createUnifiedId(getPluginContribution()));
        if (id != null && !id.isEnabled()) {
            return false;
        }

        // now check if the item has been matched to a disabled activity id
        id = workbenchActivitySupport.getActivityManager().getIdentifier(
            WorkbenchActivityHelper.createUnifiedId(new IPluginContribution() {

                public String getLocalId() {
                    return itemID;
                }

                public String getPluginId() {
                    return getPluginContribution().getPluginId();
                }
            }));
        if (id != null && !id.isEnabled()) {
            return false;
        }

        return true;
    }",Checks if there are activities that have been matched to the plug-in or id in which the item has been contributed and if at least one of those matching activities are enabled.,1,251
4649,"protected IDiagramWorkbenchPart getDiagramWorkbenchPart() {
		IDiagramWorkbenchPart diagramPart = null;
		IWorkbenchPart part = getWorkbenchPart();
		
		if (part instanceof IDiagramWorkbenchPart) {
			diagramPart = (IDiagramWorkbenchPart) part;
			
		} else {
			diagramPart = (IDiagramWorkbenchPart) part
					.getAdapter(IDiagramWorkbenchPart.class);
		}

		return diagramPart;
	}",A utility method to return the active part if it implements or adapts to the IDiagramWorkbenchPart interface,1,102
4650,"public int getCheckedInResourcesCount(K key) {
        int rc = 0;
        if(!resourcePoolMap.containsKey(key)) {
            return rc;
        }
        try {
            Pool<V> resourcePool = getResourcePoolForExistingKey(key);
            rc = resourcePool.queue.size();
        } catch(IllegalArgumentException iae) {
            logger.debug(""getCheckedInResourceCount called on invalid key: "", iae);
        }
        return rc;
    }",Count the number of checked in (idle) resources for a specific pool.,1,119
4651,"public static ScopeProvider from(View view) {
    if (view == null) {
      throw new NullPointerException(""view == null"");
    }
    return new ViewScopeProvider(view);
  }",Creates a  ScopeProvider for Android Views.,1,59
4652,"public boolean contains(String memberKey)
  {
    return _memberKeyToIndexMap.containsKey(memberKey);
  }",Returns whether the passed in member key maps to one of the members of the union.,1,28
4653,"public static Repository repoFrom(Intent intent) {
        String repoName = intent.getStringExtra(EXTRA_REPOSITORY_NAME);
        String repoOwner = intent.getStringExtra(EXTRA_REPOSITORY_OWNER);
        return InfoUtils.createRepoFromData(repoOwner, repoName);
    }",Resolve the  Repository referenced by the given intent,1,62
4654,"public AuthenticationInfo getResult() {
		return result;
	}","Returns the authentication information given by the user, or null if the user cancelled",1,19
4655,"public ArrayList<Word> getWords()
	{
		return words;
	}",Read the whole array of words,1,23
4656,"public String toLowerCase() {
        return toLowerCase(Locale.getDefault());
    }","Converts the characters in this string to lowercase, using the default",1,26
4657,"public IDefaultResponse getDefaultResponse() {
    return defaultResponse;
  }",Returns the default response strategy for the mock object.,1,19
4658,"public ProducerBarrier<T> createClaimer(final int bufferReserve, final EntryConsumer... entryConsumers)
    {
        return new RingBufferProducerBarrier<T>(this, bufferReserve, entryConsumers);
    }",Create a  ProducerBarrier on this RingBuffer that tracks dependent  EntryConsumers.,1,52
4659,"public Object getValue(Object object) {
        return propagation.getValue(object);
    }",Gets property's value.,1,27
4660,"public static boolean startsWithIgnoreCase(final String string, final String prefix) throws IllegalArgumentException, NullPointerException {
        Validate.notNull(string, ""Cannot check a null string for a match"");
        if (string.length() < prefix.length()) {
            return false;
        }
        return string.regionMatches(true, 0, prefix, 0, prefix.length());
    }",This method uses a region to check case-insensitive equality.,1,105
4661,"public boolean hasChildren() {
		return children().iterator().hasNext();
	}","Indicates whether this parent node has child nodes, including text nodes.",1,29
4662,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_BPM  ;
    }",The ID3v2 frame identifier,1,23
4663,"public static WorldDataHolder load(String worldName, File groupsFile, File usersFile) throws FileNotFoundException, IOException {
    	WorldDataHolder ph = new WorldDataHolder(worldName);
    	
    	GroupManager.setLoaded(false);
    	loadGroups(ph, groupsFile);
    	loadUsers(ph, usersFile);
    	GroupManager.setLoaded(true);
    	
    	return ph;
    }",Returns a NEW data holder containing data read from the files,1,98
4664,"public Node chooseRandom(String scope) {
    netlock.readLock().lock();
    try {
      if (scope.startsWith(""~"")) {
        return chooseRandom(NodeBase.ROOT, scope.substring(1));
      } else {
        return chooseRandom(scope, null);
      }
    } finally {
      netlock.readLock().unlock();
    }
  }","randomly choose one node from scope if scope starts with ~, choose one from the all nodes except for the ones in scope; otherwise, choose one from scope",1,112
4665,"@Nullable
  public BufferedImage renderDrawable(ResourceValue drawableResourceValue) {
    if (drawableResourceValue == null) {
      return null;
    }

    HardwareConfig hardwareConfig = myHardwareConfigHelper.getConfig();

    Module module = myRenderService.getModule();
    final DrawableParams params =
      new DrawableParams(drawableResourceValue, module, hardwareConfig, getResourceResolver(), myLayoutlibCallback,
                         myMinSdkVersion.getApiLevel(), myTargetSdkVersion.getApiLevel(), myLogger);
    params.setForceNoDecor();
    params.setAssetRepository(myAssetRepository);

    try {
      Result result = RenderService.runRenderAction(new Callable<Result>() {
        @Override
        public Result call() throws Exception {
          return myLayoutLib.renderDrawable(params);
        }
      });

      if (result != null && result.isSuccess()) {
        Object data = result.getData();
        if (data instanceof BufferedImage) {
          return (BufferedImage)data;
        }
      }
    }
    catch (final Exception e) {
      // ignore
    }

    return null;
  }",Renders the given resource value (which should refer to a drawable) and returns it as an image,1,299
4666,"protected boolean isConverged(int iter) {

		// print out debug info
		if (verbose) {
			Logs.debug(""{}{} iter {}: errs = {}, delta_errs = {}, loss = {}, delta_loss = {}, learn_rate = {}"",
					new Object[] { algoName, foldInfo, iter, (float) errs, (float) (last_errs - errs), (float) loss,
							(float) (Math.abs(last_loss) - Math.abs(loss)), (float) lRate });
		}

		if (Double.isNaN(loss)) {
			Logs.error(""Loss = NaN: current settings cannot train the recommender! Try other settings instead!"");
			System.exit(-1);
		}

		// check if converged
		boolean cond1 = (errs < 1e-5);
		boolean cond2 = (last_errs >= errs && last_errs - errs < 1e-5);
		boolean converged = cond1 || cond2;
		
		// if not converged, update learning rate
		if(!converged)
			updateLRate(iter);
		
		return converged;
	}","Post each iteration, we do things:  print debug information check if converged if not, adjust learning rate",1,252
4667,"public static double getCalories(Location start, Location stop, double grade, int weight,
      ActivityType activityType) {
    if (ActivityType.CYCLING == activityType) {
      return calculateCaloriesCycling(start, stop, grade, weight);
    } else {
      return calculateCaloriesFoot(start, stop, grade, weight);
    }
  }",Calculates the calories between two locations.,1,101
4668,"public ResourceCollection<Customer> all() {
        return all(1);
    }",Finds all Customers and returns a  ResourceCollection for paging through them starting at the first page.,1,25
4669,"public boolean isInDesignSurfaceRectangle(MouseEvent e) {
      assert myDesignSurface != null;
      return e.getX() > myDesignSurfaceOffset.x + myCenterOffset.x
             && e.getX() < myDesignSurfaceOffset.x + myCenterOffset.x + myDesignSurface.getWidth() * myScreenViewScale
             && e.getY() > myDesignSurfaceOffset.y + myCenterOffset.y
             && e.getY() < myDesignSurfaceOffset.y + myCenterOffset.y + myDesignSurface.getHeight() * myScreenViewScale;
    }",Check is the clicked happened in the miniature  NlDesignSurface representation,1,139
4670,"public Column[] getAutoIncrementColumn()
    {
        Collection autoIncrColumns = CollectionUtils.select(_columns, new Predicate() {
            public boolean evaluate(Object input) {
                return ((Column)input).isAutoIncrement();
            }
        });

        return (Column[])autoIncrColumns.toArray(new Column[autoIncrColumns.size()]);
    }",Returns the auto increment columns in this table.,1,101
4671,"protected String findMailAddressFor(String userName) {
        if (configuration.isValid()) {
            Matcher matcher = configuration.getUserNamePattern().matcher(userName);
            if (matcher.matches()) {
                int groupCount = matcher.groupCount();
                // This array is declared as an Object[] to ensure it's passed
                // correctly via varargs.
                Object[] parts = new String[groupCount + 1];
                for (int i = 0; i < groupCount; i++) {
                    parts[i] = matcher.group(i + 1);
                }
                return String.format(configuration.getEmailAddressPattern(), parts);
            }
        }
        return null;
    }",Transform a username into a email address using regular expressions and java.lang.String.format().,1,182
4672,"protected static List<CompilerMessage> parseModernStream(BufferedReader input) throws IOException {
        List<CompilerMessage> messages = new ArrayList<CompilerMessage>();
        String type = null;
        String file = null;
        int lineNr = -1;
        StringBuilder messageBuffer = new StringBuilder();
        for (String line = input.readLine(); line != null; line = input.readLine()) {
            Matcher matcher = LINE_PATTERN.matcher(line);
            if (matcher.matches()) {
                addMessageIfFound(messages, type, file, lineNr, messageBuffer.toString());
                /* String errorNr = */matcher.group(1);
                type = matcher.group(2);
                file = matcher.group(3);
                String lineNumberString = matcher.group(5);
                if (lineNumberString != null) {
                    lineNr = Integer.parseInt(lineNumberString);
                } else {
                    lineNr = -1;
                }
                messageBuffer = new StringBuilder();
            } else {
                // context line
                if (!SEPARATOR.equals(line) && line.trim().length() > 0) {
                    messageBuffer.append(EOL).append(line);
                }
            }
        }
        addMessageIfFound(messages, type, file, lineNr, messageBuffer.toString());
        return messages;
    }",Parse the output from the compiler into a list of CompilerMessage objects,1,382
4673,"public T    getQueue()
    {
        Preconditions.checkState(state.get() == State.STARTED, ""Not started"");

        List<String>    localPreferredQueues = Lists.newArrayList(preferredQueues);
        if ( localPreferredQueues.size() > 0 )
        {
            String      key = localPreferredQueues.get(random.nextInt(localPreferredQueues.size()));
            return queues.get(key);
        }

        List<String>    keys = Lists.newArrayList(queues.keySet());
        String          key = keys.get(random.nextInt(keys.size()));
        return queues.get(key);
    }",Return one of the managed queues - the selection method cannot be relied on.,1,174
4674,"public AnnotationElement.Annotation[] getAnnotations() {
        return getAnnotationReader().getAnnotationElements();
    }",Returns the annotations.,1,29
4675,"public static Set<String> getSymbolValue(Object o) {
        if (o instanceof Describable) {
            return getSymbolValue(((Describable) o).getDescriptor().getClass());
        } else {
            return getSymbolValue(o.getClass());
        }
    }","Get the  Symbol value(s) for the class of the given object, generally a  Descriptor, if the annotation is present.",1,80
4676,"public DefinitionsFactory getDefinitionsFactory() {

        return (DefinitionsFactory) applicationContext.getApplicationScope().get(DEFINITIONS_FACTORY);
    }",Get definition impl from appropriate servlet context.,1,33
4677,"@Processor
    @InvalidateConnectionOn(exception = NotAuthenticatedException.class)
    public Contact readContact(String objectId) {
        return (Contact) read(ServiceSourceCollection.Contacts, objectId);
    }",Fetches the contact identified by the object id in the collection.,1,49
4678,"public List<ContentHandlerConfigMap> getMappings(String[] selectors) {
        List<ContentHandlerConfigMap> combinedList = new ArrayList<ContentHandlerConfigMap>();

        for(String selector : selectors) {
            List<ContentHandlerConfigMap> selectorList = targetMapTable.get(selector.toLowerCase());
            if(selectorList != null) {
                combinedList.addAll(selectorList);
            }
        }

        return combinedList;
    }",Get the combined  ContentHandlerConfigMap list for the supplied list of selector strings.,1,113
4679,"public boolean matches( Method method, Class targetClass) {
        return ( (method.getAnnotation( PermissionsRequired.class ) != null ) ||
                 (method.getAnnotation( RolesRequired.class ) != null ) );
    }","Returns true if the method has a JSecurity RolesRequired or PermissionsRequired annotation, false otherwise.",1,72
4680,"public int getTotalResourceCount(K key) {
        int rc = 0;
        if(!resourcePoolMap.containsKey(key)) {
            return rc;
        }
        try {
            Pool<V> resourcePool = getResourcePoolForExistingKey(key);
            rc = resourcePool.size.get();
        } catch(IllegalArgumentException iae) {
            logger.debug(""getTotalResourceCount called on invalid key: "", iae);
        }
        return rc;
    }",Count the number of existing resources for a specific pool.,1,119
4681,"LoadManagerReport nextBroker() throws PulsarServerException {
        List<LoadManagerReport> availableBrokers = localZkCache.getAvailableBrokers();

        if (availableBrokers.isEmpty()) {
            throw new PulsarServerException(""No active broker is available"");
        } else {
            int brokersCount = availableBrokers.size();
            int nextIdx = signSafeMod(counter.getAndIncrement(), brokersCount);
            return availableBrokers.get(nextIdx);
        }
    }",Find next broker  LoadManagerReport in round-robin fashion.,1,114
4682,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_ENCODEDBY;
    }",The ID3v2 frame identifier,1,22
4683,"private Task<Void> registerWithServer(final String registrationToken) {
        final Map<String, Object> request = getRegisterPushDeviceRequest(registrationToken);
        return getStitchClient().executePipeline(new PipelineStage(
                Actions.REGISTER_PUSH, request))
                .continueWith(new Continuation<List<Object>, Void>() {
                    @Override
                    public Void then(@NonNull Task<List<Object>> task) throws Exception {
                        if (!task.isSuccessful()) {
                            throw task.getException();
                        }

                        addInfoToConfigs(_info);
                        return null;
                    }
                });
    }",Register the registration token with Stitch.,1,165
4684,"private File getCurrentVersion() {
        File latestSymLink = new File(storeDir, ""latest"");
        if(latestSymLink.exists() && Utils.isSymLink(latestSymLink)) {
            File canonicalLatestVersion = null;
            try {
                canonicalLatestVersion = latestSymLink.getCanonicalFile();
            } catch(IOException e) {}

            if(canonicalLatestVersion != null
               && ReadOnlyUtils.checkVersionDirName(canonicalLatestVersion))
                return canonicalLatestVersion;
        }
        File[] versionDirs = ReadOnlyUtils.getVersionDirs(storeDir);

        if(versionDirs == null || versionDirs.length == 0) {
            return null;
        } else {
            return ReadOnlyUtils.findKthVersionedDir(versionDirs,
                                                     versionDirs.length - 1,
                                                     versionDirs.length - 1)[0];
        }
    }",Retrieve the dir pointed to by 'latest' symbolic-link or the max version dir,1,220
4685,"private Lop getMaxPoolOutputLop() throws HopsException, LopsException {
		if(op == ConvOp.MAX_POOLING_BACKWARD || op == ConvOp.AVG_POOLING_BACKWARD) {
			ConvOp opType = (op == ConvOp.MAX_POOLING_BACKWARD) ? ConvOp.MAX_POOLING : ConvOp.AVG_POOLING;
			Hop inputImage = getInput().get(0);
			for(Hop tmpParent : inputImage.getParent()) {
				if(!(tmpParent instanceof ConvolutionOp))
					continue;
				ConvolutionOp parent = (ConvolutionOp) tmpParent;
				if(parent.getOp() == opType && isPoolingParametersEqualAndKnown(parent._cachedParams, _cachedParams)) {
					return parent.constructLops();
				}
			}
		}
		return null;
	}",Returns the output lop of max_pool/avg_pool operation with same parameters as this hop.,1,199
4686,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_PRIVATE;
    }",The ID3v2 frame identifier,1,22
4687,"public static RestLiArgumentBuilder getMethodAdapter(final ResourceMethod resourceMethod)
  {
    return _adapters.get(resourceMethod);
  }",Lookup  RestLiArgumentBuilder by  ResourceMethod.,1,32
4688,"public String getStoreUrl() {
        return ""http://store.steampowered.com/app/"" + this.appId;
    }",Returns the URL of this game's page in the Steam Store,1,27
4689,"public Future<Transaction> broadcastTransaction(final Transaction tx) {
        FutureTask<Transaction> future = new FutureTask<Transaction>(new Runnable() {
            public void run() {
                // This is run with the peer group already locked.
                for (Peer peer : peers) {
                    try {
                        peer.sendMessage(tx);
                    } catch (IOException e) {
                        log.warn(""Caught IOException whilst sending transaction: {}"", e.getMessage());
                    }
                }
            }
        }, tx);
        peerGroupThread.addTask(future);
        return future;
    }",Queues a transaction for asynchronous broadcast.,1,152
4690,"public Throwable getCause() {
        return cause;
    }",Returns the cause of this exception or null if the cause was specified when this exception was created.,1,19
4691,"public Collection<Exclusion> getExclusions()
    {
        return exclusions;
    }",Gets the new exclusions to apply to the dependency.,1,23
4692,"protected String calculateJavaModelExamplePackage() {
        JavaModelGeneratorConfiguration config = context.getJavaModelGeneratorConfiguration();
        String exampleTargetPackage = config.getProperty(PropertyRegistry.MODEL_GENERATOR_EXAMPLE_PACKAGE);
        if (!stringHasValue(exampleTargetPackage)) {
            return calculateJavaModelPackage();
        }
        
        StringBuilder sb = new StringBuilder();
        sb.append(exampleTargetPackage);
        sb.append(fullyQualifiedTable.getSubPackageForModel(isSubPackagesEnabled(config)));
        return sb.toString();
    }","if property exampleTargetPackage specified for example use the specified value, else use default value (targetPackage)",1,120
4693,"public ResourceCollection<Transaction> search(String query) {
        return search(query, 1);
    }",Finds all Transactions that match the query and returns a  ResourceCollection for paging through them starting at the first page.,1,31
4694,"public String getIdentifier()
    {
        return  ID3v24Frames.FRAME_ID_MEDIA_TYPE;
    }",The ID3v2 frame identifier,1,22
4695,"private synchronized boolean register(String label, Command command, boolean isAlias) {
        if (isAlias && knownCommands.containsKey(label)) {
            // Request is for an alias and it conflicts with a existing command or previous alias ignore it
            // Note: This will mean it gets removed from the commands list of active aliases
            return false;
        }

        boolean registered = true;

        // If the command exists but is an alias we overwrite it, otherwise we return
        Command conflict = knownCommands.get(label);
        if (conflict != null && conflict.getLabel().equals(label)) {
            return false;
        }

        if (!isAlias) {
            command.setLabel(label);
        }
        knownCommands.put(label, command);

        return registered;
    }",Registers a command with the given name is possible.,1,171
4696,"public EdgeManagerPluginContext getContext() {
    return this.context;
  }",Return ahe  org.apache.tez.dag.api.EdgeManagerPluginContext for this specific instance of the vertex manager.,1,21
4697,"public static Intent createIntent(List<Gist> gists, int position) {
        List<String> ids = new ArrayList<String>(gists.size());
        for (Gist gist : gists)
            ids.add(gist.getId());
        return new Builder(""gists.VIEW"").add(EXTRA_GIST_IDS, (Serializable) ids).add(EXTRA_POSITION, position)
                .toIntent();
    }",Create an intent to show gists with an initial selected Gist,1,116
4698,"public static Location getInstanceLocation() {
		return InternalPlatform.getDefault().getInstanceLocation();
	}",Returns the location of the platform's working directory (also known as the instance data area).,1,29
4699,"public ResourceCollection<Transaction> search(String query, int pageNumber) {
        String queryString = new QueryString().append(""q"", query).append(""page"", pageNumber).toString();
        NodeWrapper response = http.get(""/transactions/all/search?"" + queryString);
        return new ResourceCollection<Transaction>(new TransactionPager(this, query), response, Transaction.class);
    }",Finds all Transactions that match the query and returns a  ResourceCollection for paging through them starting with the given page.,1,113
4700,"public List<AbstractTeamRepositoryProvider> getProviders() {
		return provider;
	}",Returns the list of contributed  AbstractTeamRepositoryProvider.,1,22
4701,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_ORIGARTIST;
    }",The ID3v2 frame identifier,1,22
4702,"public Set<String> getPropertyNames() {
        return getProperties().keySet();
    }",Returns the names of the properties of this entity.,1,28
4703,"public String getIdentifier()
    {
        return ID3v24Frames.FRAME_ID_PLAYLIST_DELAY;
    }",The ID3v2 frame identifier,1,22
4704,"public final OutputContext getContext() {
    return outputContext;
  }",Return ahe  org.apache.tez.runtime.api.OutputContext for this specific instance of the LogicalOutput,1,21
4705,"public CallbackRequest handle(String signature, String payload)
            throws LineBotCallbackException, IOException {
        try {
            return parser.handle(signature, payload.getBytes(StandardCharsets.UTF_8));
        } catch (WebhookParseException e) {
            throw new LineBotCallbackException(e.getMessage());
        }
    }",Parses a request.,1,86
4706,"public String toString() {
		String filterString = getFilter();
		if (filterString == null) {
			filterString = """"; //$NON-NLS-1$
		}
		return listener.getClass().getName() + ""@"" + Integer.toHexString(System.identityHashCode(listener)) + filterString; //$NON-NLS-1$
	}",The string representation of this Filtered listener.,1,93
4707,"public static final InstanceType createDefaultInstanceType() {

		final HardwareDescription hardwareDescription = HardwareDescriptionFactory.extractFromSystem();

		int diskCapacityInGB = 0;
		final String tempDir = GlobalConfiguration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,
			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH);
		if (tempDir != null) {
			File f = new File(tempDir);
			diskCapacityInGB = (int) (f.getFreeSpace() / (1024L * 1024L * 1024L));
		}

		final int physicalMemory = (int) (hardwareDescription.getSizeOfPhysicalMemory() / (1024L * 1024L));

		return InstanceTypeFactory.construct(""default"", hardwareDescription.getNumberOfCPUCores(),
			hardwareDescription.getNumberOfCPUCores(), physicalMemory, diskCapacityInGB, 0);
	}",Creates a default instance type based on the hardware characteristics of the machine that calls this method.,1,205
4708,"public static SamlAssertionWrapper getAssertionFromKeyIdentifier(
        SecurityTokenReference secRef,
        Element strElement,
        RequestData request,
        WSDocInfo wsDocInfo
    ) throws WSSecurityException {
        String keyIdentifierValue = secRef.getKeyIdentifierValue();
        String type = secRef.getKeyIdentifierValueType();
        WSSecurityEngineResult result = wsDocInfo.getResult(keyIdentifierValue);

        SamlAssertionWrapper samlAssertion = null;
        Element token = null;
        if (result != null) {
            samlAssertion =
                (SamlAssertionWrapper)result.get(WSSecurityEngineResult.TAG_SAML_ASSERTION);
            return samlAssertion;
        } else {
            token = 
                secRef.findProcessedTokenElement(
                    strElement.getOwnerDocument(), wsDocInfo,
                    request.getCallbackHandler(),
                    keyIdentifierValue, type
                );
            if (token != null) {
                if (!""Assertion"".equals(token.getLocalName())) {
                    throw new WSSecurityException(
                        WSSecurityException.ErrorCode.FAILURE, ""invalidSAMLsecurity""
                    );
                }
                return new SamlAssertionWrapper(token);
            }
            token = 
                secRef.findUnprocessedTokenElement(
                    strElement.getOwnerDocument(), wsDocInfo,
                    request.getCallbackHandler(), keyIdentifierValue, type
                );
            
            if (token == null || !""Assertion"".equals(token.getLocalName())) {
                throw new WSSecurityException(
                    WSSecurityException.ErrorCode.FAILURE, ""invalidSAMLsecurity""
                );
            }
            Processor proc = request.getWssConfig().getProcessor(WSSecurityEngine.SAML_TOKEN);
            List<WSSecurityEngineResult> samlResult =
                proc.handleToken(token, request, wsDocInfo);
            return 
                (SamlAssertionWrapper)samlResult.get(0).get(
                    WSSecurityEngineResult.TAG_SAML_ASSERTION
                );
        }
    }",Get an SamlAssertionWrapper object from parsing a SecurityTokenReference that uses a KeyIdentifier that points to a SAML Assertion.,1,447
4709,"protected double ranking(int u, int j) {
		return predict(u, j, false);
	}",predict a ranking score for user u on item j: default case using the unbounded predicted rating values,1,36
4710,"public String getIdentifier()
    {
        return  ID3v24Frames.FRAME_ID_ORIG_TITLE;
    }",The ID3v2 frame identifier,1,22
4711,"public long getSecondaryStorageCost() {
		return diskCost;
	}",Gets the costs for disk.,1,19
4712,"public static String[] union(String[] a, String[] b) {
    assert a!=null && b!=null : ""Union expect non-null input!"";
    String[] r = new String[a.length+b.length];
    int ia = 0, ib = 0, i = 0;
    while (ia < a.length && ib < b.length) {
      int c = a[ia].compareTo(b[ib]);
      if ( c < 0) r[i++] = a[ia++];
      else if (c == 0) { r[i++] = a[ia++]; ib++; }
      else r[i++] = b[ib++];
    }
    if (ia < a.length) while (ia<a.length) r[i++] = a[ia++];
    if (ib < b.length) while (ib<b.length) r[i++] = b[ib++];
    return Arrays.copyOf(r, i);
  }",Union of given arrays.,1,332
4713,"public Facing toggleFacing() {
        Facing facing = mCameraController.getFacing();
        switch (facing) {
            case BACK:
                setFacing(Facing.FRONT);
                break;

            case FRONT:
                setFacing(Facing.BACK);
                break;
        }

        return mCameraController.getFacing();
    }",Toggles the facing value between  Facing#BACK and  Facing#FRONT.,1,89
4714,"public String getClassName() {
        switch (sort) {
        case VOID:
            return ""void"";
        case BOOLEAN:
            return ""boolean"";
        case CHAR:
            return ""char"";
        case BYTE:
            return ""byte"";
        case SHORT:
            return ""short"";
        case INT:
            return ""int"";
        case FLOAT:
            return ""float"";
        case LONG:
            return ""long"";
        case DOUBLE:
            return ""double"";
        case ARRAY:
            StringBuffer b = new StringBuffer(getElementType().getClassName());
            for (int i = getDimensions(); i > 0; --i) {
                b.append(""[]"");
            }
            return b.toString();
        case OBJECT:
            return new String(buf, off, len).replace('/', '.');
        default:
            return null;
        }
    }",Returns the binary name of the class corresponding to this type.,1,272
4715,"public Peer connectTo(InetSocketAddress address) {
        return connectTo(address, true);
    }",Connect to a peer by creating a channel to the destination address.,1,28
4716,"private static EmbeddedElasticsearchNode create(Settings settings) {
    // ensure PainlessPlugin is installed or otherwise scripted fields would not work
    Node node = new LocalNode(settings, Arrays.asList(Netty4Plugin.class, PainlessPlugin.class));
    return new EmbeddedElasticsearchNode(node);
  }",Creates an instance with existing settings,1,62
4717,"private byte[] marshalAggregatorValues(long superstep) {
    if (superstep == INPUT_SUPERSTEP) {
      return new byte[0];
    }

    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    DataOutputStream output = new DataOutputStream(outputStream);
    for (Entry<String, AggregatorWrapper<Writable>> entry :
        getAggregatorMap().entrySet()) {
      if (entry.getValue().isChanged()) {
        try {
          output.writeUTF(entry.getKey());
          entry.getValue().getCurrentAggregatedValue().write(output);
        } catch (IOException e) {
          throw new IllegalStateException(""Failed to marshall aggregator "" +
              ""with IOException "" + entry.getKey(), e);
        }
      }
    }

    if (LOG.isInfoEnabled()) {
      LOG.info(
          ""marshalAggregatorValues: Finished assembling aggregator values"");
    }
    return outputStream.toByteArray();
  }",Marshal the aggregator values of the worker to a byte array that will later be aggregated by master.,1,252
4718,"static MongoDatabasePolicy create() {
    final MongoClient client;
    if (MongoAssertions.useMongo()) {
      // use to real client (connects to mongo)
      client = new MongoClient();
    } else if (MongoAssertions.useFongo()) {
      // in-memory DB (fake Mongo)
      client = new Fongo(MongoDatabasePolicy.class.getSimpleName()).getMongo();
    } else {
      throw new UnsupportedOperationException(""I can only connect to Mongo or Fongo instances"");
    }

    return new MongoDatabasePolicy(client);
  }",Creates an instance based on current maven profile (as defined by  -Pit).,1,127
4719,"public File getSinkFile() {
		return queue.file();
	}",Returns the queue directory,1,23
4720,"public SubProjectData getProjectInfo(AbstractProject context) {

        SubProjectData subProjectData = new SubProjectData();

        iterateBuilds(context, projects, subProjectData);

        // We don't want to show a project twice
        subProjectData.getTriggered().removeAll(subProjectData.getDynamic());
        subProjectData.getTriggered().removeAll(subProjectData.getFixed());

        return subProjectData;
    }","Provides a SubProjectData object containing four set, each containing projects to be displayed on the project view under 'Subprojects' section.",1,90
4721,"public static Iterable<ProviderMetadata> boundedByIso3166Code(String iso3166Code,
            TypeToken<? extends Wrapper> contextWrappableAs) {
      return filter(all(), Predicates.and(ProviderPredicates.boundedByIso3166Code(iso3166Code), ProviderPredicates
               .contextWrappableAs(contextWrappableAs)));
   }",Returns the providers that are bound to the same location as the given ISO 3166 code and of the given contextWrappableAs.,1,68
4722,"public boolean isMirrored() {
		if (!fMirroringEnabled)
			return false;
		Object property = getProperty(MIRRORED);
		return property instanceof Boolean && (Boolean) property;
	}","Returns true if the compare viewer is mirrored, i.e.",1,59
4723,"public Lob build() {
            return new Lob(this);
        }",Build a Lob client,1,24
4724,"public static Viewable create(final boolean authEnabled, final String templateName, final SecurityContext sc) {
    return new ViewableWithPermissions(authEnabled, templateName, sc, true, null);
  }",Create the web page using the given template and  SecurityContext after authentication is done.,1,57
4725,"public Element writeSchema(Class javaType, Types types) throws Exception {
        // Let the caller generate WSDL if this is not a SimpleType
        if (!SimpleType.class.isAssignableFrom(javaType))
            return null;

        // ComplexType representation of SimpleType bean class
        Element complexType = types.createElement(""complexType"");
        types.writeSchemaElement(xmlType, complexType);
        complexType.setAttribute(""name"", xmlType.getLocalPart());

        // Produce simpleContent extending base type.
        Element simpleContent = types.createElement(""simpleContent"");
        complexType.appendChild(simpleContent);
        Element extension = types.createElement(""extension"");
        simpleContent.appendChild(extension);

        // Get the base type from the ""value"" element of the bean
        String base = ""string"";
        for (int i=0; i<propertyDescriptor.length; i++) {
            String propName = propertyDescriptor[i].getName();
            if (!propName.equals(""value"")) {
                if (typeDesc != null) {
                    FieldDesc field = typeDesc.getFieldByName(propName);
                    if (field != null) {
                        if (field.isElement()) {
                            // throw?
                        }
                        QName qname = field.getXmlName();
                        if (qname == null) {
                            // Use the default...
                            qname = new QName("""", propName);
                        }

                        //  write attribute element
                        Class fieldType = propertyDescriptor[i].getType();

                        // Attribute must be a simple type, enum or SimpleType
                        if (!types.isAcceptableAsAttribute(fieldType)) {
                            throw new AxisFault(Messages.getMessage(""AttrNotSimpleType00"",
                                    propName,
                                    fieldType.getName()));
                        }

                        // write attribute element
                        // TODO the attribute name needs to be preserved from the XML
                        Element elem = types.createAttributeElement(propName,
                                fieldType,
                                field.getXmlType(),
                                false,
                                extension.getOwnerDocument());
                        extension.appendChild(elem);
                    }
                }
                continue;
            }

            BeanPropertyDescriptor bpd = propertyDescriptor[i];
            Class type = bpd.getType();
            // Attribute must extend a simple type, enum or SimpleType
            if (!types.isAcceptableAsAttribute(type)) {
                throw new AxisFault(Messages.getMessage(""AttrNotSimpleType01"",
                        type.getName()));
            }
            base = types.writeType(type);
            extension.setAttribute(""base"", base);
        }

        // done
        return complexType;

    }","Return XML schema for the specified type, suitable for insertion into the &lt;types&gt; element of a WSDL document, or underneath an &lt;element&gt; or &lt;attribute&gt; declaration.",1,601
4726,"public boolean add(String tagId, String category) {
        return isCategoryValid(category) && mSelectedTopics.add(tagId);
    }",Add a tagId to the set of filters.,1,40
4727,"public static String[] getModulePrefixes(ServletContext context) {
        return (String[]) context.getAttribute(Globals.MODULE_PREFIXES_KEY);
    }",Return the list of module prefixes that are defined for this web application.,1,39
4728,"public boolean isConnectedAndHealthy() {
        Map<String, DiscoveryNode> nodeMap = nodes.get();
        if (nodeMap == null || nodeMap.isEmpty()) {
            return false;
        }
        if (!deflector.isUp()) {
            return false;
        }
        try {
            return getHealth() != ClusterHealthStatus.RED;
        } catch (ElasticsearchException e) {
            LOG.trace(""Couldn't determine Elasticsearch health properly"", e);
            return false;
        }
    }",Check if the Elasticsearch  Node is connected and that the cluster health status is not  ClusterHealthStatus#RED and that the  org.graylog2.indexer.Deflector#isUp() deflector is up.,1,144
4729,"private boolean isKeepLock(String serverName, String lockPath) {
        try {
            if (zkClient.checkExists().forPath(lockPath) != null) {
                byte[] data = zkClient.getData().forPath(lockPath);
                String lockServerName = new String(data, Charset.forName(""UTF-8""));
                return lockServerName.equalsIgnoreCase(serverName);
            }
        } catch (Exception e) {
            logger.error(""fail to get the serverName for the path: "" + lockPath, e);
        }
        return false;
    }","Returns true if, the job server is keeping the lock for the lockPath",1,149
4730,"public ResourceRepo removeResource(Resource resource) {
        if ((this.resourceRepos == null) || (resource == null)) {
            return null;
        }

        ResourceRepo doomed = null;

        for (ResourceRepo rc : this.resourceRepos) {
            if (resource.equals(rc.getResourceRepoPK().getResource())) {
                doomed = rc;
                break;
            }
        }

        if (doomed != null) {
            this.resourceRepos.remove(doomed);
        }

        return doomed;
    }","Unsubscribes the resource from this repo, if it exists.",1,160
4731,"public boolean isFlagSet(int flagsToCheck) {
        return (flags & flagsToCheck) != 0;
    }",Returns  true if any of the flags supplied in the argument are set.,1,33
4732,"public static IType createType(IASTDeclarator declarator) {
	    IASTDeclSpecifier declSpec = null;
		
		IASTNode node = declarator.getParent();
		while( node instanceof IASTDeclarator ){
			declarator = (IASTDeclarator) node;
			node = node.getParent();
		}
		
		if( node instanceof IASTParameterDeclaration )
			declSpec = ((IASTParameterDeclaration) node).getDeclSpecifier();
		else if( node instanceof IASTSimpleDeclaration )
			declSpec = ((IASTSimpleDeclaration)node).getDeclSpecifier();
		else if( node instanceof IASTFunctionDefinition )
			declSpec = ((IASTFunctionDefinition)node).getDeclSpecifier();
		else if( node instanceof IASTTypeId )
		    declSpec = ((IASTTypeId)node).getDeclSpecifier();
	
		boolean isParameter = ( node instanceof IASTParameterDeclaration || node.getParent() instanceof ICASTKnRFunctionDeclarator ); 
		
		IType type = null;
		
		//C99 6.7.5.3-12 The storage class specifier for a parameter declaration is ignored unless the declared parameter is one of the 
		//members of the parameter type list for a function definition.
		if( isParameter && node.getParent().getParent() instanceof IASTFunctionDefinition ){
		    type = createBaseType( declSpec );
		} else {
		    type = createType( declSpec );
		}
		
		type = createType( type, declarator );
		
		
        if( isParameter ) {
            //C99: 6.7.5.3-7 a declaration of a parameter as ""array of type"" shall be adjusted to ""qualified pointer to type"", where the
    		//type qualifiers (if any) are those specified within the [ and ] of the array type derivation
            if( type instanceof IArrayType ){
	            CArrayType at = (CArrayType) type;
	            type = new CQualifiedPointerType( at.getType(), at.getModifier() );
	        } else if( type instanceof IFunctionType ) {
	            //-8 A declaration of a parameter as ""function returning type"" shall be adjusted to ""pointer to function returning type""
	            type = new CPointerType( type );
	        }
        }
        
		return type;
	}",Create an IType for an IASTDeclarator.,1,466
4733,"protected final Vector getContents() {
        return _contents;
    }",Returns a Vector containing all the child nodes of this node.,1,21
4734,"public IterOutcome innerNext() {

    if (hasRemainderForLeftJoin) { // if set that means there is spill over from previous left batch and no
      // corresponding right rows and it is left join scenario
      allocateVectors();

      boolean hasMoreRows = !handleRemainingLeftRows();
      if (leftUpstream == EMIT || hasMoreRows) {
        logger.debug(""Sending current output batch with EMIT outcome since left is received with EMIT and is fully "" +
          ""consumed now in output batch"");
        hasRemainderForLeftJoin = hasMoreRows;
        finalizeOutputContainer();
        return (leftUpstream == EMIT) ? EMIT : OK;
      } else {
        // release memory for previous left batch
        leftJoinIndex = -1;
        VectorAccessibleUtilities.clear(left);
      }
    }

    // We don't do anything special on FIRST state. Process left batch first and then right batch if need be
    IterOutcome childOutcome = processLeftBatch();
    logger.debug(""Received left batch with outcome {}"", childOutcome);

    if (processLeftBatchInFuture && hasRemainderForLeftJoin) {
      finalizeOutputContainer();
      hasRemainderForLeftJoin = false;
      return OK;
    }

    // reset this state after calling processLeftBatch above.
    processLeftBatchInFuture = false;
    hasRemainderForLeftJoin = false;

    // If the left batch doesn't have any record in the incoming batch (with OK_NEW_SCHEMA/EMIT) or the state returned
    // from left side is terminal state then just return the IterOutcome and don't call next() on right branch
    if (isTerminalOutcome(childOutcome) || left.getRecordCount() == 0) {
      container.setRecordCount(0);
      return childOutcome;
    }

    // Left side has some records in the batch so let's process right batch
    childOutcome = processRightBatch();
    logger.debug(""Received right batch with outcome {}"", childOutcome);

    // reset the left & right outcomes to OK here and send the empty batch downstream. Non-Empty right batch with
    // OK_NEW_SCHEMA will be handled in subsequent next call
    if (childOutcome == OK_NEW_SCHEMA) {
      leftUpstream = (leftUpstream != EMIT) ? OK : leftUpstream;
      rightUpstream = OK;
      return childOutcome;
    }

    if (isTerminalOutcome(childOutcome)) {
      return childOutcome;
    }

    // If OK_NEW_SCHEMA is seen only on non empty left batch but not on right batch, then we should setup schema in
    // output container based on new left schema and old right schema. If schema change failed then return STOP
    // downstream
    if (leftUpstream == OK_NEW_SCHEMA) {
      handleSchemaChange();
    }

    // Setup the references of left, right and outgoing container in generated operator
    state = BatchState.NOT_FIRST;

    // Update the memory manager only if its a brand new incoming i.e. leftJoinIndex and rightJoinIndex is 0
    // Otherwise there will be a case where while filling last output batch, some records from previous left or
    // right batch are still left to be sent in output for which we will count this batch twice. The actual checks
    // are done in updateMemoryManager
    updateMemoryManager(LEFT_INDEX);

    // We have to call update on memory manager for empty batches (rightJoinIndex = -1) as well since other wise while
    // allocating memory for vectors below it can fail. Since in that case colSize will not have any info on right side
    // vectors and throws NPE. The actual checks are done in updateMemoryManager
    updateMemoryManager(RIGHT_INDEX);

    if (outputIndex > 0) {
      // this means batch is already allocated but because of new incoming the width and output row count might have
      // changed. So update the maxOutputRowCount with new value
      if (useMemoryManager) {
        setMaxOutputRowCount(batchMemoryManager.getCurrentOutgoingMaxRowCount());
      }
    }
    // if output is not allocated then maxRowCount will be set correctly below
    // allocate space for the outgoing batch
    allocateVectors();

    return produceOutputBatch();
  }",Gets the left and right incoming batch and produce the output batch.,1,555
4735,"private ZapTextArea getTxtSkipURL() {
        if (txtSkipURL == null) {
            txtSkipURL = new ZapTextArea();
            txtSkipURL.setFont(new java.awt.Font(""Default"", java.awt.Font.PLAIN, 11));
    	    if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {
    	    	txtSkipURL.setSize(new java.awt.Dimension(290,52));
    	    }
        }
        return txtSkipURL;
    }",This method initializes ZapTextArea,1,133
4736,"public static Boolean areColumnsUnique(RelNode rel, BitSet columns) {
    final BuiltInMetadata.ColumnUniqueness metadata =
        rel.metadata(BuiltInMetadata.ColumnUniqueness.class);
    return metadata.areColumnsUnique(columns, false);
  }","Returns the  BuiltInMetadata.ColumnUniqueness#areColumnsUnique(BitSet, boolean) statistic.",1,61
4737,"public static EBoolean endsWith(Expr<String> left, String right) {
        return operationFactory.createBoolean(Ops.ENDSWITH, left, exprFactory
                .createConstant(right));
    }",Expr : left.endsWith(right),1,52
4738,"public RowSetBuilder addSingleCol(Object value) {
    return addRow(new Object[] { value });
  }",The  #addRow(Object...) method uses Java variable-length arguments to pass a row of values.,1,35
4739,"public boolean shouldBuffer() {
        Window window = runningQuery.getQuery().getWindow();
        boolean noWindow =  window == null;
        // Only buffer if there is no window (including Raw) or if it's a record based window.
        return noWindow || !window.isTimeBased();
    }",Returns if this query should buffer before emitting the final results.,1,65
4740,"public MenuItem addItem(String text, boolean asHTML, Command cmd) {
    return addItem(new MenuItem(text, asHTML, cmd));
  }","Adds a menu item to the bar, that will fire the given command when it is selected.",1,46
4741,"private ColumnDescriptor getColumn(int columnIndex) {
		Tree tree = viewer.getTree();
		TreeColumn column = tree.getColumn(columnIndex);
		ColumnDescriptor descriptor = (ColumnDescriptor) column.getData();
		return descriptor;
	}",Get the specific column's ColumnDescriptor object.,1,69
4742,"protected CoreLabel fromProto(CoreNLPProtos.Token proto) {
    CoreLabel word = new CoreLabel();
    // Required fields
    word.setWord(proto.getWord());
    // Optional fields
    if (proto.hasPos()) { word.setTag(proto.getPos()); }
    if (proto.hasValue()) { word.setValue(proto.getValue()); }
    if (proto.hasCategory()) { word.setCategory(proto.getCategory()); }
    if (proto.hasBefore()) { word.setBefore(proto.getBefore()); }
    if (proto.hasAfter()) { word.setAfter(proto.getAfter()); }
    if (proto.hasOriginalText()) { word.setOriginalText(proto.getOriginalText()); }
    if (proto.hasNer()) { word.setNER(proto.getNer()); }
    if (proto.hasLemma()) { word.setLemma(proto.getLemma()); }
    if (proto.hasBeginChar()) { word.setBeginPosition(proto.getBeginChar()); }
    if (proto.hasEndChar()) { word.setEndPosition(proto.getEndChar()); }
    if (proto.hasSpeaker()) { word.set(SpeakerAnnotation.class, proto.getSpeaker()); }
    if (proto.hasUtterance()) { word.set(UtteranceAnnotation.class, proto.getUtterance()); }
    if (proto.hasBeginIndex()) { word.set(BeginIndexAnnotation.class, proto.getBeginIndex()); }
    if (proto.hasEndIndex()) { word.set(EndIndexAnnotation.class, proto.getEndIndex()); }
    if (proto.hasTokenBeginIndex()) { word.set(TokenBeginAnnotation.class, proto.getTokenBeginIndex()); }
    if (proto.hasTokenEndIndex()) { word.set(TokenEndAnnotation.class, proto.getTokenEndIndex()); }
    if (proto.hasNormalizedNER()) { word.set(NormalizedNamedEntityTagAnnotation.class, proto.getNormalizedNER()); }
    if (proto.hasTimexValue()) { word.set(TimexAnnotation.class, fromProto(proto.getTimexValue())); }
    if (proto.hasHasXmlContext() && proto.getHasXmlContext()) { word.set(XmlContextAnnotation.class, proto.getXmlContextList()); }
    if (proto.hasCorefClusterID()) { word.set(CorefClusterIdAnnotation.class, proto.getCorefClusterID()); }
    if (proto.hasAnswer()) { word.set(AnswerAnnotation.class, proto.getAnswer()); }
    // Non-default annotators
    if (proto.hasGender()) { word.set(GenderAnnotation.class, proto.getGender()); }
    if (proto.hasTrueCase()) { word.set(TrueCaseAnnotation.class, proto.getTrueCase()); }
    if (proto.hasTrueCaseText()) { word.set(TrueCaseTextAnnotation.class, proto.getTrueCaseText()); }
    // Return
    return word;
  }",Create a CoreLabel from its serialized counterpart.,1,793
4743,"public boolean isFlagSet(int flagsToCheck) {
        return isFlagSet(flags, flagsToCheck);
    }",Returns  true if any of the flags supplied in the argument are set.,1,28
4744,"public static Query parse(String queryString, BulletConfig config) {
        Query query = GSON.fromJson(queryString, Query.class);
        query.configure(config);
        return query;
    }",Parses a Query out of the query string.,1,58
4745,"public final DBCompareColExpr in(Collection<?> values)
    {
        if (values==null || values.isEmpty())
            return cmp(DBCmpType.EQUAL, null);
        // create expression
        return cmp(DBCmpType.IN, values);
    }","Creates and returns an expression for the SQL ""in"" operator.",1,72
4746,"public String getMatchedSentences() {
    StringBuilder sb = new StringBuilder();
    for (int i = 0, sz = list.getModel().getSize(); i < sz; i++) {
      String t = list.getModel().getElementAt(i).getLabel().getText();
      sb.append(t);
      sb.append(""\n"");
    }
    return sb.toString();
  }",Returns all currently displayed sentences in plain text form.,1,130
4747,"public static List handleHTML(HttpURLConnection httpCon) throws IOException {
        ContentHandler handler = new HTMLHandler();
        handler.parse(httpCon.getInputStream());

        if (handler.getRobotFollow()) {
            List links = handler.getLinks();
            return links;
        }

        return null;
    }",Returns a list of links for a HTTP connection,1,93
4748,"public StringBuffer getMatchedSentences() {
    StringBuffer sb = new StringBuffer();
    for(int i = 0; i < list.getModel().getSize(); i++) {
      String t = ((TreeFromFile) list.getModel().getElementAt(i)).getLabel().getText();
      sb.append(t);
      sb.append(""\n"");
    }
    return sb;
  }","Returns all currently displayed sentences in string buffer, plain text form",1,124
4749,"public static Schema getReferencedSchema(OpenAPI openAPI, Schema schema) {
        if (schema != null && StringUtils.isNotEmpty(schema.get$ref())) {
            String name = getSimpleRef(schema.get$ref());
            Schema referencedSchema = getSchema(openAPI, name);
            if(referencedSchema != null) {
                return referencedSchema;
            }
        }
        return schema;
    }","If a Schema contains a reference to an other Schema with '$ref', returns the referenced Schema if it is found or the actual Schema in the other cases.",1,115
4750,"public boolean updateComponent(Widget component, UIDL uidl,
			boolean manageCaption) {

		// Switch to correct implementation if neede
		if (!widgetFactory.isCorrectImplementation(component, uidl)) {
			Layout parent = getParentLayout(component);
			if (parent != null) {
				Widget w = widgetFactory.createWidget(uidl);
				registerPaintable(uidl.getId(), (Paintable) w);
				parent.replaceChildComponent(component, w);
				((Paintable) w).updateFromUIDL(uidl, this);
				return true;
			}
		}

		// Set captions
		// TODO Manage Error messages
		if (manageCaption) {
			Layout parent = getParentLayout(component);
			if (parent != null)
				parent.updateCaption(component, uidl);
		}

		// Visibility, Disabling and read-only status
		if (component instanceof FocusWidget)
			((FocusWidget) component).setEnabled(!uidl
					.getBooleanAttribute(""disabled""));
		boolean visible = !uidl.getBooleanAttribute(""invisible"");
		component.setVisible(visible);
		if (!visible)
			return true;

		return false;
	}",Update generic component features.,1,295
4751,"public Node getSecondNode() {
		return m_node2;
	} //",Return the VisualItem representing the second (target) node in the edge.,1,21
4752,"public static String encodeValue(Value value) {
		return NTriplesUtil.toNTriplesString(value);
	}",Encodes a value for use in a URL.,1,29
4753,"private HttpEventServlet newWebSocketHandler(AtmosphereConfig config) {
        try {
            return new JBossWebSocketHandler(config);
        } catch (Exception e) {
            logger.error(""Cannot instantiate JBossWebSocketHandler. Websocket events will not be handled."", e);
        }
        
        return null;
    }",Loads the  JBossWebSocketHandler u,1,70
4754,"File getBaseDir(final File file1, final File file2) {
        if (file1 == null || file2 == null) {
            return null;
        }
        final Iterator bases = getParents(file1).iterator();
        final Iterator fileParents = getParents(file2.getAbsoluteFile()).iterator();
        File result = null;
        while (bases.hasNext() && fileParents.hasNext()) {
            File next = (File) bases.next();
            if (next.equals(fileParents.next())) {
                result = next;
            } else {
                break;
            }
        }
        return result;
    }",Returns the common base directory between the passed file1 and file2.,1,197
4755,"public boolean contains(ReadableInterval interval) {
        if (interval == null) {
            return containsNow();
        }
        long otherStart = interval.getStartMillis();
        long otherEnd = interval.getEndMillis();
        long thisStart = getStartMillis();
        long thisEnd = getEndMillis();
        return (thisStart <= otherStart && otherStart < thisEnd && otherEnd <= thisEnd) ||
            (thisStart == otherStart && thisEnd == otherEnd);
    }",Does this time interval contain or equal the specified time interval.,1,148
4756,"private boolean installRemotePackages(
            @NonNull List<RemotePackage> requestPackages,
            @NonNull RepoManager repoManager,
            @NonNull Downloader downloader,
            @NonNull ProgressIndicator progress) {

        List<RemotePackage> remotePackages =
                InstallerUtil.computeRequiredPackages(
                        requestPackages, repoManager.getPackages(), progress);

        if (remotePackages == null) {
            return false;
        }

        for (RemotePackage p : remotePackages) {
            if (p.getLicense() != null && !p.getLicense().checkAccepted(
                    repoManager.getLocalPath(), mSdkHandler.getFileOp())) {
                progress.setText(
                        ""The license for package "" + p.getDisplayName() + "" was not accepted. ""
                                + ""Please install this package through Android Studio SDK ""
                                + ""Manager."");
                return false;
            }

            Installer installer = SdkInstallerUtil
                    .findBestInstallerFactory(p, mSdkHandler)
                    .createInstaller(p, repoManager, downloader, mSdkHandler.getFileOp());
            boolean result = installer.prepare(progress)
                    && installer.complete(progress);

            if (!result) {
                return false;
            }
        }

        return true;
    }",Installs a  RemotePackage and its dependent packages.,1,312
4757,"private String getConfigurationTable(Connection con) {
        try {
            if (StorageManager.getStorageImpl(con.getMetaData().getDatabaseProductName()).requiresConfigSchema()) {
                if (DatabaseConst.getConfigSchema().endsWith("".""))
                    return DatabaseConst.getConfigSchema() + TBL_GLOBAL_CONFIG;
                else
                    return DatabaseConst.getConfigSchema() + ""."" + TBL_GLOBAL_CONFIG;
            }
        } catch (SQLException e) {
            LOG.warn(e);
        }
        return TBL_GLOBAL_CONFIG;
    }",Get the global configuration table name including the correct schema,1,136
4758,"@Deprecated
  public long getNumBytesUploaded() {
    return totalBytesServerReceived;
  }",Gets the total number of bytes the server received so far or  0 for direct uploads when the content length is not known.,1,22
4759,"static public IStructuredTextExpert getStatefulExpert(StructuredTextTypeHandler handler, StructuredTextEnvironment environment) {
		if (environment == null)
			environment = StructuredTextEnvironment.DEFAULT;
		return new StructuredTextImpl(handler, environment, true);
	}",Obtains a IStructuredTextExpert instance for processing structured text with the specified type handler and the specified environment.,1,62
4760,"public FeatureService createFeatureService() {
        return createFeatureService(defaultEndpointUrl);
    }",Create and return a new feature service with the default endpoint URL.,1,22
4761,"public long findBestMatchCuboid(long cuboid) {
        return findBestMatchCuboid1(cuboid);
    }",Get the parent cuboid rely on the spanning tree.,1,25
4762,"@Override
    public String toString() {
        if (stringRep == null) {
            stringRep = toString(true);
        }
    	return stringRep;
    }","Get a string representation of this member, using the '#' separator for class members.",1,50
4763,"@GET
  public Set<CassandraInstance> findAll() {
    return service.findAll();
  }",Return the set of Cassandra instances.,1,29
4764,"public String getReplicationDirectory() {
        return this.replicationDirectory;
    }",Returns the path to the replication directory,1,21
4765,"public String getValue(String key) throws NotFoundException, NotLeaderException {
        if (cluster.getLocalRole() != Role.LEADER) {
            throw new NotLeaderException();
        }
        if (!entries.containsKey(key)) {
            throw new NotFoundException();
        }
        String value = entries.get(key);
        logger.info(String.format(""Get key %s: %s"", key, value));
        return value;
    }",Returns the value stored at the specified key.,1,127
4766,"public String getBackupDirectory() {
        return this.backupDirectory;
    }",Get the backup directory,1,21
4767,"static public Allocation createFromBitmap(RenderScript rs, Bitmap b,
                                              MipmapControl mips,
                                              int usage) {
        if (rs.isNative) {
            RenderScriptThunker rst = (RenderScriptThunker)rs;
            return AllocationThunker.createFromBitmap(rst, b, mips, usage);
        }
        rs.validate();

        // WAR undocumented color formats
        if (b.getConfig() == null) {
            if ((usage & USAGE_SHARED) != 0) {
                throw new RSIllegalArgumentException(""USAGE_SHARED cannot be used with a Bitmap that has a null config."");
            }
            Bitmap newBitmap = Bitmap.createBitmap(b.getWidth(), b.getHeight(), Bitmap.Config.ARGB_8888);
            Canvas c = new Canvas(newBitmap);
            c.drawBitmap(b, 0, 0, null);
            return createFromBitmap(rs, newBitmap, mips, usage);
        }

        Type t = typeFromBitmap(rs, b, mips);

        // enable optimized bitmap path only with no mipmap and script-only usage
        if (mips == MipmapControl.MIPMAP_NONE &&
            t.getElement().isCompatible(Element.RGBA_8888(rs)) &&
            usage == (USAGE_SHARED | USAGE_SCRIPT)) {
            int id = rs.nAllocationCreateBitmapBackedAllocation(t.getID(rs), mips.mID, b, usage);
            if (id == 0) {
                throw new RSRuntimeException(""Load failed."");
            }

            // keep a reference to the Bitmap around to prevent GC
            Allocation alloc = new Allocation(id, rs, t, usage);
            alloc.setBitmap(b);
            return alloc;
        }


        int id = rs.nAllocationCreateFromBitmap(t.getID(rs), mips.mID, b, usage);
        if (id == 0) {
            throw new RSRuntimeException(""Load failed."");
        }
        return new Allocation(id, rs, t, usage);
    }",Creates an Allocation from a  android.graphics.Bitmap.,1,502
4768,"public static Treepath getNextSibling( Treepath treepath ) {
    if( treepath.getHeight() < 2 ) {
      throw new IllegalArgumentException( ""Treepath must have minimum height of 2"" ) ;
    }
    final Tree treeToMove = treepath.getBottom() ;
    final Tree parent = treepath.getTreeAtHeight( 1 ) ;
    for( int i = 0 ; i < parent.getChildCount() - 1 ; i++ ) {
      final Tree child = parent.getChildAt( i ) ;
      if( child == treeToMove ) {
        return Treepath.create( treepath.getParent(), parent.getChildAt( i + 1 ) ) ;
      }
    }
    throw new IllegalArgumentException( ""No next sibling"" ) ;
  }",Returns the sibling on the left of the bottom of given  Treepath.,1,221
4769,"public byte[] evaluateChallenge(byte[] challenge) throws MessagingException {
        try {

            String result = ""\0""+username+""\0""+password;

            if(authzid != null && authzid.length() > 0) {
                result = authzid+result;
            }

            complete = true;
            return result.getBytes(""UTF-8"");

        } catch (UnsupportedEncodingException e) {
            // got an error, fail this
            throw new MessagingException(""Invalid encoding"");
        }
    }","Evaluate a PLAIN login challenge, returning the a result string that should satisfy the challenge.",1,147
4770,"public Element writeSchema(Class javaType, Types types) throws Exception {
        return null;
    }","Return XML schema for the specified type, suitable for insertion into the &lt;types&gt; element of a WSDL document, or underneath an &lt;element&gt; or &lt;attribute&gt; declaration.",1,31
4771,"public static RelDataTypeField lookupField(
        final RelDataType rowType,
        String columnName)
    {
        final RelDataTypeField [] fields = rowType.getFields();
        for (int i = 0; i < fields.length; i++) {
            RelDataTypeField field = fields[i];
            if (field.getName().equals(columnName)) {
                return field;
            }
        }
        return null;
    }","Looks up a field with a given name, returning null if not found.",1,126
4772,"public static String asJson(Object object) throws IOException {
        return JSON.writeValueAsString(object);
    }",Converts the given object into a canonical JSON string.,1,33
4773,"public ArrayList getImageSrcs() {
        return this.img_src;
    }",Get the list of src attributes for images,1,21
4774,"public RepoContentSource removeContentSource(ContentSource contentSource) {
        if ((this.repoContentSources == null) || (contentSource == null)) {
            return null;
        }

        RepoContentSource doomed = null;

        for (RepoContentSource ccs : this.repoContentSources) {
            if (contentSource.equals(ccs.getRepoContentSourcePK().getContentSource())) {
                doomed = ccs;
                break;
            }
        }

        if (doomed != null) {
            this.repoContentSources.remove(doomed);
        }

        return doomed;
    }","Removes the content source from this repo, if it exists.",1,160
4775,"public EAttribute getChange_State() {
		return (EAttribute) changeEClass.getEStructuralFeatures().get(5);
	}",Returns the meta object for the attribute ' org.eclipse.mylyn.reviews.core.model.IChange#getState State'.,1,32
4776,"public Collection<TableGrant> getTableGrants(TableIdentifier table)
	{
		Collection<TableGrant> result = new HashSet<TableGrant>();
		ResultSet rs = null;
		try
		{
			TableIdentifier tbl = table.createCopy();
			tbl.adjustCase(this.dbConnection);
			rs = this.metaData.getTablePrivileges(tbl.getCatalog(), tbl.getSchema(), tbl.getTableName());
			while (rs.next())
			{
				String from = rs.getString(4);
				String to = rs.getString(5);
				String what = rs.getString(6);
				boolean grantable = StringUtil.stringToBool(rs.getString(7));
				TableGrant grant = new TableGrant(to, what, grantable);
				result.add(grant);
			}
		}
		catch (Exception e)
		{
			LogMgr.logError(""DbMetadata.getTableGrants()"", ""Error when retrieving table privileges"",e);
		}
		finally
		{
			try { rs.close(); } catch (Throwable th) {}
		}
		return result;
	}",Return the GRANTs for the given table,1,302
4777,"public Subject login(AuthenticationToken token) throws AuthenticationException {
        Account account;
        try {
            account = authenticate(token);
            rememberMeSuccessfulLogin(token, account);
        } catch (AuthenticationException ae) {
            rememberMeFailedLogin(token, ae);
            throw ae; //propagate
        }
        Subject secCtx = createSubject(token, account);
        assertCreation(secCtx);
        bind(secCtx);
        return secCtx;
    }","First authenticates the AuthenticationToken argument, and if successful, constructs a Subject instance representing the authenticated account's identity.",1,122
4778,"private static URI makeFullQualifiedURI(String uriName) throws IOException {
    Path uriPath = new Path(uriName);
    if (isNormalized(uriName) && uriPath.isUriPathAbsolute()) {
      // add scheme and/or authority if either is missing
      if ((uriPath.toUri().getScheme() == null || uriPath.toUri().getAuthority() == null)) {
        URI defaultUri = FileSystem.getDefaultUri(CONF);
        uriPath = uriPath.makeQualified(defaultUri, uriPath);
      }
      return uriPath.toUri();
    } else { // relative URI path is unacceptable
      return null;
    }
  }","Make fully qualified URI if Scheme and/or Authority is missing, based on the default file system Scheme and Authority.",1,165
4779,"public RollCycle getRollCycle() {
		return queue.rollCycle();
	}",Returns the queue file roll cycle,1,23
4780,"protected DimensionValueLoadTask buildDruidDimensionsLoader(
            DruidWebService webService,
            PhysicalTableDictionary physicalTableDictionary,
            DimensionDictionary dimensionDictionary
    ) {
        DruidDimensionValueLoader druidDimensionRowProvider = new DruidDimensionValueLoader(
                physicalTableDictionary,
                dimensionDictionary,
                webService
        );
        return new DimensionValueLoadTask(Collections.singletonList(druidDimensionRowProvider));
    }",Build a DimensionValueLoadTask.,1,75
4781,"private NameValuePair[] prepareQueryString(String groupPath, String jobName, Properties options) {
        List<NameValuePair> queryString = new ArrayList<NameValuePair>();

        queryString.add(new NameValuePair(""groupPath"", groupPath));
        queryString.add(new NameValuePair(""jobName"", jobName));

        if (options != null) {
            for (Entry<Object, Object> option : options.entrySet()) {
                queryString.add(new NameValuePair(""extra.command.option."" + option.getKey(),
                                                  String.valueOf(option.getValue())));
            }
        }

        return queryString.toArray(new NameValuePair[queryString.size()]);
    }",prepare the  HttpClient's queryString containing the group/job and the options.,1,191
4782,"public String getTreeAuthoringPath() {
        return this.treeAuthoringPath;
    }",Returns the path to the authoring tree,1,21
4783,"final public ParseException generateParseException() {
        this.jj_expentries.removeAllElements();

        boolean[] la1tokens = new boolean[27];

        for (int i = 0; i < 27; i++) {
            la1tokens[i] = false;
        }

        if (this.jj_kind >= 0) {
            la1tokens[this.jj_kind] = true;
            this.jj_kind = -1;
        }

        for (int i = 0; i < 13; i++) {
            if (this.jj_la1[i] == this.jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((this.jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }

        for (int i = 0; i < 27; i++) {
            if (la1tokens[i]) {
                this.jj_expentry = new int[1];
                this.jj_expentry[0] = i;
                this.jj_expentries.addElement(this.jj_expentry);
            }
        }

        this.jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);

        int[][] exptokseq = new int[this.jj_expentries.size()][];

        for (int i = 0; i < this.jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) this.jj_expentries.elementAt(i);
        }

        return new ParseException(this.token, exptokseq, tokenImage);
    }",Generate a parse exception,1,483
4784,"public ArrayList getAllLinkHRefs() {
        return this.link_href_all;
    }",Get a list of all links,1,21
4785,"@Override
  protected Bitmap alloc(int size) {
    return Bitmap.createBitmap(
        1,
        (int) Math.ceil(size / (double) BitmapUtil.RGB_565_BYTES_PER_PIXEL),
        Bitmap.Config.RGB_565);
  }",Allocate a bitmap that has a backing memory allocacation of 'size' bytes.,1,63
4786,"private String getTag() {
            if (lineage.isEmpty()) {
                return name;
            } else {
                return lineage.get(0).getName();
            }
        }",All Paths are 'tagged' in swagger with the root entity name in the path.,1,57
4787,"public static final Element elementFromUse(ExpressionTree node) {
        return InternalUtils.symbol(node);
    }",Gets the element for the declaration corresponding to this use of an element.,1,31
4788,"public static Struct fromLogical(Schema schema, SpecialValueDecimal value) {
        return fromLogical(schema, value.getDecimalValue().orElse(null));
    }",Converts a value from its logical format to its encoded format - a struct containing the scale of the number and a binary representation of the number.,1,44
4790,"public static Iterable<ProviderMetadata> collocatedWith(ProviderMetadata providerMetadata,
            TypeToken<? extends Wrapper> contextWrappableAs) {
      return filter(all(), Predicates.and(ProviderPredicates.intersectingIso3166Code(providerMetadata),
               ProviderPredicates.contextWrappableAs(contextWrappableAs)));
   }",Returns the providers that have at least one common ISO 3166 code and are of the given contextWrappableAs.,1,67
4791,"public static UserSpinnerAdapter createUserSpinnerAdapter(UserManager userManager,
            Context context) {
        List<UserHandle> userProfiles = userManager.getUserProfiles();
        if (userProfiles.size() < 2) {
            return null;
        }

        UserHandle myUserHandle = new UserHandle(UserHandle.myUserId());
        // The first option should be the current profile
        userProfiles.remove(myUserHandle);
        userProfiles.add(0, myUserHandle);

        ArrayList<UserDetails> userDetails = new ArrayList<UserDetails>(userProfiles.size());
        final int count = userProfiles.size();
        for (int i = 0; i < count; i++) {
            userDetails.add(new UserDetails(userProfiles.get(i), userManager, context));
        }
        return new UserSpinnerAdapter(context, userDetails);
    }",Creates a  UserSpinnerAdapter if there is more than one profile on the device.,1,222
4792,"public TokenStream getDefaultTokenStream() {
    return tokenizationStream;
  }",Returns  TokenStream to tokenize a text.,1,19
4793,"public Set<TSentryRole> getTSentryRolesByGroupName(final Set<String> groupNames,
                                                     final boolean checkAllGroups) throws Exception {
    if (groupNames.isEmpty()) {
      return Collections.emptySet();
    }

    return tm.executeTransaction(
            new TransactionBlock<Set<TSentryRole>>() {
              @Override
              public Set<TSentryRole> execute(PersistenceManager pm) throws Exception {

                pm.setDetachAllOnCommit(false); // No need to detach objects

                // Pre-allocate large sets for role names and results.
                // roleNames is used to avoid adding the same role mutiple times into
                // result. The result is set, but comparisons between TSentryRole objects
                // is more expensive then String comparisons.
                Set<String> roleNames = new HashSet<>(1024);
                Set<TSentryRole> result = new HashSet<>(1024);

                for(String group: groupNames) {
                  if (group == null) {
                    // Special case - return all roles
                    List<MSentryRole> roles = getAllRoles(pm);
                    for (MSentryRole role: roles) {
                      result.add(convertToTSentryRole(role));
                    }
                    return result;
                  }

                  // Find group by name and all roles belonging to this group
                  String trimmedGroup = group.trim();
                  Query query = pm.newQuery(MSentryGroup.class);
                  query.setFilter(""this.groupName == :groupName"");
                  query.setUnique(true);
                  MSentryGroup mGroup = (MSentryGroup) query.execute(trimmedGroup);
                  if (mGroup != null) {
                    // For each unique role found, add a new TSentryRole version of the role to result.
                    for (MSentryRole role: mGroup.getRoles()) {
                      String roleName = role.getRoleName();
                      if (roleNames.add(roleName)) {
                        result.add(convertToTSentryRole(role));
                      }
                    }
                  } else if (!checkAllGroups) {
                      throw noSuchGroup(trimmedGroup);
                  }
                  query.closeAll();
                }
                return result;
              }
            });
  }",Return set of roles corresponding to the groups provided.,1,466
4794,"public static DrillFileSystem createFileSystem(String proxyUserName, Configuration fsConf) {
    return createFileSystem(createProxyUgi(proxyUserName), fsConf, null);
  }",Create DrillFileSystem for given proxyUserName and configuration.,1,41
4795,"public static Collection<Simon> getSimons(SimonFilter simonFilter) {
		return manager.getSimons(simonFilter);
	}",Returns collection containing all existing Simons accepted by specified  SimonFilter.,1,32
4796,"@CheckForNull
    public final SCMRevision fetch(@NonNull String thingName, @CheckForNull TaskListener listener)
            throws IOException, InterruptedException {
        return retrieve(thingName, defaultListener(listener));
    }",Looks up a specific thingName based on some SCM-specific set of permissible syntaxes.,1,53
4797,"public Action doCometSupport(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException {
        req.setAttribute(BROADCASTER_FACTORY, broadcasterFactory);
        req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
        req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
        req.setAttribute(ATMOSPHERE_CONFIG, config);

        Action a = null;
        try {
            if ((config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST) != null
                    || (isIECandidate(req) || req.getParameter(HeaderConfig.JSONP_CALLBACK_NAME) != null))
                    && req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {

                Map<String, String> headers = configureQueryStringAsRequest(req);
                String body = headers.remove(ATMOSPHERE_POST_BODY);
                if (body != null && body.isEmpty()) {
                    body = null;
                }

                req.headers(headers)
                   .method(body != null && req.getMethod().equalsIgnoreCase(""GET"") ? ""POST"" : req.getMethod());

                if (body != null) {
                   req.body(body);
                }

                a = asyncSupport.service(req, res);
            } else {
                return asyncSupport.service(req, res);
            }
        } catch (IllegalStateException ex) {
            if (ex.getMessage() != null && (ex.getMessage().startsWith(""Tomcat failed"") || ex.getMessage().startsWith(""JBoss failed"") )) {
                if (!isFilter) {
                    logger.warn(""Failed using comet support: {}, error: {} Is the Nio or Apr Connector enabled?"", asyncSupport.getClass().getName(),
                            ex.getMessage());
                    logger.warn(""Using BlockingIOCometSupport."");
                }
                logger.trace(ex.getMessage(), ex);

                asyncSupport = new BlockingIOCometSupport(config);
                doCometSupport(req, res);
            } else {
                logger.error(""AtmosphereServlet exception"", ex);
                throw ex;
            }
        } finally {
            if (req != null && a != null && a.type != Action.TYPE.SUSPEND) {
                req.destroy();
                res.destroy();
            }
        }
        return null;
    }",Invoke the proprietary  AsyncSupport,1,613
4798,"public ScopeContainer getModuleScope() {
        return moduleScope;
    }",Returns the ScopeContainer for the MODULE scope that will be associated with this deployment unit.,1,19
4799,"public static String[] splitPrincipalIntoParts(final String principal) {
    final String[] components = principal.split(""[/@]"");
    checkState(components.length < 4);
    checkState(components.length > 1);
    checkNotNull(components[0]);
    checkNotNull(components[1]);

    if (components.length == 2) {
      return new String[] { components[0], """", components[1] };
    } else {
      checkNotNull(components[2]);
      return components;
    }
  }",Expects principal of the format primary/instance@REALM or primary@REALM.,1,161
4800,"public static String getHostFromUrl(String url)
   {
      String authority = getAuthorityFromUrl(url);
      
      // no port
      int idx = authority.indexOf("":"");
      if (idx == -1)
         return authority;
      
      // port, return only the portion preceding the port
      return authority.substring(0, idx);
   }","Given a URL, attempt to return the host portion (not including the port).",1,92
4801,"protected static String cstString(DalvInsn insn) {
        CstInsn ci = (CstInsn) insn;
        Constant cst = ci.getConstant();

        return cst.toHuman();
    }",Helper method to return a constant string.,1,57
4802,"public boolean contains(ReadableInterval interval) {
        if (interval == null) {
            return containsNow();
        }
        long otherStart = interval.getStartMillis();
        long otherEnd = interval.getEndMillis();
        long thisStart = getStartMillis();
        long thisEnd = getEndMillis();
        return (thisStart <= otherStart && otherStart < thisEnd && otherEnd <= thisEnd);
    }",Does this time interval contain the specified time interval.,1,125
4803,"public Method getMethod() {
        return method;
    }",Gets the request method.,1,19
4804,"public Field withValidation(Validator... validators) {
        Validator actualValidator = validator;
        for (Validator validator : validators) {
            if (validator != null) actualValidator = validator.and(actualValidator);
        }
        return new Field(name(), displayName(), type(), width(), description(), importance(), dependents,
                defaultValueGenerator, actualValidator, recommender);
    }",Create and return a new Field instance that is a copy of this field but that in addition to  #validator() existing validation the supplied validation function(s) are also used.,1,122
4805,"public final int getEndColumn() {
        return this.bufcolumn[this.bufpos];
    }",Get the column position,1,28
4806,"public boolean isWordwrap() {
        return wordwrap;
    }",Tests if the text area is in word-wrap mode.,1,19
4807,"public static ApiResponse getReferencedApiResponse(OpenAPI openAPI, ApiResponse apiResponse) {
        if (apiResponse != null && StringUtils.isNotEmpty(apiResponse.get$ref())) {
            String name = getSimpleRef(apiResponse.get$ref());
            ApiResponse referencedApiResponse = getApiResponse(openAPI, name);
            if(referencedApiResponse != null) {
                return referencedApiResponse;
            }
        }
        return apiResponse;
    }","If a ApiResponse contains a reference to an other ApiResponse with '$ref', returns the referenced ApiResponse if it is found or the actual ApiResponse in the other cases.",1,115
4808,"public static InetAddress guessPrimaryNetworkAddress(boolean preferIPv4) throws SocketException {
        final Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();

        if (interfaces != null) {
            for (NetworkInterface interf : Collections.list(interfaces)) {
                if (!interf.isLoopback() && interf.isUp()) {
                    // Interface is not loopback and up. Try to get the first address.
                    for (InetAddress addr : Collections.list(interf.getInetAddresses())) {
                        if (preferIPv4 && addr instanceof Inet4Address) {
                            return addr;
                        }
                        if (!preferIPv4 && addr instanceof Inet6Address) {
                            return addr;
                        }
                    }
                }
            }
        }

        return InetAddress.getLoopbackAddress();
    }",Try to get the primary  InetAddress of the primary network interface with fallback to the local loopback address (usually  127.0.0.1 or  ::1.,1,204
4809,"public DurationConverter removeDurationConverter(DurationConverter converter)
            throws SecurityException {
        
        checkAlterDurationConverters();
        if (converter == null) {
            return null;
        }
        DurationConverter[] removed = new DurationConverter[1];
        iDurationConverters = iDurationConverters.remove(converter, removed);
        return removed[0];
    }",Removes a converter from the set of converters.,1,94
4810,"public String getRCMLDirectory() {
        return this.rcmlDirectory;
    }",Get the RCML directory,1,21
4811,"@Override
    public void createRecord(DBRecord rec, Connection conn)
    {
        throw new NotImplementedException(this, ""createRecord"");
    }","Returns an error, because it is not possible to add a record to a query.",1,41
4812,"public boolean isSelected(final ToolItem toolItem) {
		boolean selectionState = Display.syncExec(new ResultRunnable<Boolean>() {
			@Override
			public Boolean run() {
					return toolItem.getSelection(); 
			}
		});
		return selectionState;
	}",Finds out whether specified  ToolItem is selected or not.,1,79
4813,"public static DefaultMetaBroadcaster metaBroadcaster() {
        return metaBroadcaster;
    }",Return the  DefaultMetaBroadcaster,1,21
4814,"public String convert(Object object) {
    if (object == null) {
      return null;
    }

    try {
      JsonElement json = convertObject(object);
      return new GsonBuilder().serializeNulls().create().toJson(json);
    } catch (Exception e) {
      throw new WebDriverException(""Unable to convert: "" + object, e);
    }
  }","Convert an object that may or may not be a JsonElement into its JSON string representation, handling the case where it is neither in a graceful way.",1,117
4815,"public static MemberID parse(String memberID) {
        return parse(memberID, false, AppInfo.getSingleton().getClassPath());
    }","Parse a member ID, with or without classname, with or without descriptor.",1,41
4816,"public Charset getEncoding() {
		return _charset;
	}",Returns the encoding used to send and receive lines from the IRC server.,1,19
4817,"@NonNull
    protected List<Action> retrieveActions(@NonNull SCMHead head,
                                           @NonNull SCMHeadEvent event,
                                           @NonNull TaskListener listener)
            throws IOException, InterruptedException {
        return Collections.emptyList();
    }","SPI for  #fetchActions(SCMHead, SCMHeadEvent, TaskListener).",1,58
4818,"private boolean isAncestorOf(Object object1, Object object2) {
		if (object2 == null) return false;
		Object parent = getParent(object2);
		if (parent == object1) return true;
		return isAncestorOf(object1, parent);
   }",Judges if the object1 is an ancestor of the object2.,1,80
4819,"private boolean processResults(boolean returnKeys, boolean update) throws SQLException {
        if (!resultQueue.isEmpty()) {
            throw new IllegalStateException(
                    ""There should be no queued results."");
        }

        while (!tds.isEndOfResponse()) {
            if (!tds.getMoreResults()) {
                if (tds.isUpdateCount()) {
                    if (update && connection.isLastUpdateCount()) {
                        resultQueue.clear();
                    }
                    resultQueue.addLast(new Integer(tds.getUpdateCount()));
                }
            } else {
                if (returnKeys) {
                    // This had better be the generated key
                    // FIXME We could use SELECT @@IDENTITY AS jTDS_SOMETHING and check the column name to make sure
                    if (tds.getNextRow()) {
                        genKeyResultSet = new CachedResultSet(this,
                                tds.getColumns(),
                                tds.getRowData());
                    }
                } else {
                    // TODO Should we allow execution of multiple statements via executeUpdate?
                    if (update && resultQueue.isEmpty()) {
                        throw new SQLException(
                                Messages.get(""error.statement.nocount""), ""07000"");
                    }

                    resultQueue.add(new JtdsResultSet(
                            this,
                            ResultSet.TYPE_FORWARD_ONLY,
                            ResultSet.CONCUR_READ_ONLY,
                            tds.getColumns()));
                    break;
                }
            }
        }

        return !resultQueue.isEmpty();
    }",Queue up update counts into  #resultQueue until the end of the response is reached or a ResultSet is encountered.,1,334
4820,"public boolean matches( Method method, Class targetClass) {
        return ( (method.getAnnotation( RequiresPermissions.class ) != null ) ||
                 (method.getAnnotation( RequiresRoles.class ) != null ) );
    }","Returns true if the method has a JSecurity RequiresRoles or RequiresPermissions annotation, false otherwise.",1,72
4821,"protected IsolationLevel getTransactionIsolation() {
		return this.transactionIsolationLevel;
	}",Retrieve the currently specified  IsolationLevel level.,1,21
4822,"public static Set<String> getAllSupportedComponentTypes() {
        return SUPPORTED_COMPONENT_TYPES;
    }",Returns an array of all supported component types,1,24
4823,"public static Map<String, String> getProperties(Object object) throws Exception {
        if (object == null) {
            return Collections.emptyMap();
        }

        Map<String, String> props = new LinkedHashMap<String, String>();
        BeanInfo beanInfo = Introspector.getBeanInfo(object.getClass());
        Object[] NULL_ARG = {};
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        if (propertyDescriptors != null) {
            for (int i = 0; i < propertyDescriptors.length; i++) {
                PropertyDescriptor pd = propertyDescriptors[i];
                if (pd.getReadMethod() != null && !pd.getName().equals(""class"") && !pd.getName().equals(""properties"") && !pd.getName().equals(""reference"")) {
                    Object value = pd.getReadMethod().invoke(object, NULL_ARG);
                    if (value != null) {
                        if (value instanceof Boolean || value instanceof Number || value instanceof String || value instanceof URI || value instanceof URL) {
                            props.put(pd.getName(), ("""" + value));
                        } else if (value instanceof SSLContext) {
                            // ignore this one..
                        } else {
                            Map<String, String> inner = getProperties(value);
                            for (Map.Entry<String, String> entry : inner.entrySet()) {
                                props.put(pd.getName() + ""."" + entry.getKey(), entry.getValue());
                            }
                        }
                    }
                }
            }
        }
        return props;
    }",Get properties from an object using reflection.,1,494
4824,"public boolean matches( Method method, Class targetClass) {
        return ( (method.getAnnotation( PermissionRequired.class ) != null ) ||
                 (method.getAnnotation( RolesRequired.class ) != null ) );
    }","Returns true if the method has a JSecurity RolesRequired or PermissionRequired annotation, false otherwise.",1,72
4825,"public Iterator getPorts() throws ServiceException {
        if (wsdlService == null || wsdlService.getPorts() == null){
            // Return an empty iterator;
            return new Vector().iterator();
        }
        return wsdlService.getPorts().keySet().iterator();
    }",Returns an Iterator for the list of QNames of service endpoints grouped by this service,1,82
4826,"public Collection<Tree> getRelatedNodes(Tree t, Tree root) {
    if (root.value() == null) {
      root.setValue(""ROOT"");  // todo: cdm: it doesn't seem like this line should be here
    }
    Set<Tree> nodeList = new LinkedHashSet<Tree>();
    for (TregexPattern p : targetPatterns) {    // cdm: I deleted: && nodeList.isEmpty()
      TregexMatcher m = p.matcher(root);
      while (m.findAt(t)) {
        nodeList.add(m.getNode(""target""));
        if (DEBUG) {
          System.err.println(""found "" + this + ""("" + t + "", "" + m.getNode(""target"") + "") using pattern "" + p);
          for (String nodeName : m.getNodeNames()) {
            if (nodeName.equals(""target"")) 
              continue;
            System.err.println(""  node "" + nodeName + "": "" + m.getNode(nodeName));
          }
        }
      }
    }
    return nodeList;
  }","Given a Tree node t, attempts to return a list of nodes to which node t has this grammatical relation.",1,291
4827,"@Override
	public String toString() {
		return ""["" + name + "" "" + state + ""]"";
	}",Returns name and state of the Simon as a human readable string.,1,44
4828,"public long getContentDuration() {
        return mBundle.getLong(KEY_CONTENT_DURATION, -1);
    }",Gets the total duration of the content to be played as a long integer number of milliseconds.,1,28
4829,"public Observable<Integer> observeWifiSignalLevel(final Context context, final int numLevels) {
    final WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);

    final IntentFilter filter = new IntentFilter();
    filter.addAction(WifiManager.RSSI_CHANGED_ACTION);

    return Observable.create(new Observable.OnSubscribe<Integer>() {

      @Override public void call(final Subscriber<? super Integer> subscriber) {
        final BroadcastReceiver receiver = new BroadcastReceiver() {
          @Override public void onReceive(Context context, Intent intent) {
            final int rssi = wifiManager.getConnectionInfo().getRssi();
            final int level = WifiManager.calculateSignalLevel(rssi, numLevels);
            subscriber.onNext(level);
          }
        };

        context.registerReceiver(receiver, filter);

        subscriber.add(unsubscribeInUiThread(new Action0() {
          @Override public void call() {
            context.unregisterReceiver(receiver);
          }
        }));
      }
    }).defaultIfEmpty(0);
  }",Observes WiFi signal level.,1,293
4830,"protected ComponentTemplate getMetaData( final Object entry )
    {
        return (ComponentTemplate)entry;
    }",Return the ComponentTemplate for specified component entry.,1,30
4831,"public List<GmailMessage> getPriorityMessages(boolean unreadOnly){
        try {
            final List<GmailMessage> priorityMessages = new ArrayList<GmailMessage>();
            final Store store = openGmailStore();
            Folder folder = getFolder(ImapGmailLabel.IMPORTANT.getName(),store);
            folder.open(Folder.READ_ONLY); 
            for (final Message msg : folder.search(new FlagTerm(
                    new Flags(Flags.Flag.SEEN), !unreadOnly))) {
                priorityMessages.add(new JavaMailGmailMessage(msg));
            }
            
            return priorityMessages;
        } catch (final Exception e) {
            throw new GmailException(""Failed getting priority messages"", e);
        }
    }",Returns list of unread/read priority  GmailMessage objects based on the  unreadOnly value,1,193
4832,"public <T> int querySimpleList(Class<T> c, String sqlCmd, Connection conn, Collection<T> result)
    {   // Check status
        if (checkOpen()==false)
            return -1;
        // Start query
        ResultSet rs = null;
        try
        {   // Log performance
            long start = System.currentTimeMillis();
            if (log.isInfoEnabled())
                log.info(""executing: "" + sqlCmd);
            // Get the next Value
            rs = driver.executeQuery(sqlCmd, null, false, conn);
            if (rs == null)
            { // Error
                error(driver);
                return -1;
            }
            // Check Result
            int count=0;
            while (rs.next())
            {
                T item = ObjectUtils.convert(c, rs.getObject(1));
                result.add(item);
                count++;
            }
            // No Value
            if (log.isInfoEnabled())
                log.info(""querySimpleList retured ""+String.valueOf(count)+"" items. Query completed in "" + String.valueOf(System.currentTimeMillis() - start) + "" ms"");
            clearError();
            return count;
        } catch (ClassCastException e) 
        {   
            log.error(""querySingleValue cast exception: "", e);
            error(Errors.Exception, e);
            return -1;
        } catch (SQLException e) 
        {
            log.error(""querySimpleList exception: "", e);
            error(DBErrors.QueryFailed, e);
            return -1;
        } finally
        { // Cleanup
            closeResultSet(rs);
        }
    }",Adds the first column of a query result to a collection.,1,437
4833,"public TokenStream duplicate() {
    DuplicatedTokenStream duplicate = new DuplicatedTokenStream(inputStream);
    duplicatedStreams.add(duplicate);

    return duplicate;
  }",Returns a new TokenStream which provides the same output as the original TokenStream.,1,44
4834,"public InstantConverter removeInstantConverter(InstantConverter converter)
            throws SecurityException {
        
        checkAlterInstantConverters();
        if (converter == null) {
            return null;
        }
        InstantConverter[] removed = new InstantConverter[1];
        iInstantConverters = iInstantConverters.remove(converter, removed);
        return removed[0];
    }",Removes a converter from the set of converters.,1,94
4835,"public Object get(long timeout, String key) throws TimeoutException {
		SynchronizationObject<CachedData[]> sync=setupGet(key);
		waitForNotNull(timeout, sync);
		CachedData[] rvContainer=sync.get();
		assert rvContainer.length == 1;
		Object rv=null;
		if(rvContainer[0] != null) {
			rv=transcoder.decode(rvContainer[0]);
		}
		return rv;
	}",Get with a single key.,1,125
4836,"static boolean observe( @Nullable final Object object )
  {
    return !( object instanceof ComponentObservable ) || asComponentObservable( object ).observe();
  }",Invoke  #observe() on the supplied object if any.,1,52
4837,"public double getBalance(World world)
	{
		if (!Config.multiWorld)
			return getBalance(CurrencyHandler.getCurrency(Config.currencyDefault, true));
		return getBalance(CurrencyHandler.getCurrency(Config.currencyDefault, true),world);
	}",Get the default balance in the specific world,1,67
4838,"public SequenceService createSequenceService() {
        return createSequenceService(defaultEndpointUrl);
    }",Create and return a new sequence service with the default endpoint URL.,1,22
4839,"public Reader getReader() {
        debug(""\nContents: "" + this.contentsBuffer.toString());

        return new StringReader(this.contentsBuffer.toString());
    }",Obtain the reader,1,51
4840,"public Remote getPort(QName portName, Class proxyInterface)
                           throws ServiceException {
        // First, try to find a generated stub.  If that
        // returns null, then find a dynamic stub.
        Remote stub = getGeneratedStub(portName, proxyInterface);
        return stub != null ? stub : getPort(null, portName, proxyInterface);
    }","Return either an instance of a generated stub, if it can be found, or a dynamic proxy for the given proxy interface.",1,76
4841,"private boolean nonValueAnno(AnnotatedTypeMirror mirror) {
            return AnnotationUtils.areSameIgnoringValues(
                    getValueAnnotation(mirror), UNKNOWNVAL)
                    || AnnotationUtils
                            .areSameIgnoringValues(
                                    mirror.getAnnotationInHierarchy(ARRAYLEN),
                                    ARRAYLEN);
        }",To make these numerous calls to check if an annotation is UnknownVal or ArrayLen a little nicer looking,1,59
4842,"private static File findBinary(String... binaryNames) {
    final String[] paths = System.getenv(""PATH"").split(File.pathSeparator);
    for (String binaryName : binaryNames) {
      for (String path : paths) {
        File file = new File(path, binaryName);
        if (file.exists()) {
          return file;
        }
        if (Platform.getCurrent().is(Platform.WINDOWS)) {
          File exe = new File(path, binaryName + "".exe"");
          if (exe.exists()) {
            return exe;
          }
        }
      }
    }
    return null;
  }",Walk a PATH to locate binaries with a specified name.,1,200
4843,"public float getX() {
        if(left == null) {
            calculateLeft();
        }

        return left.floatValue();
    }",Get the x location of the left side of this shape.,1,46
4844,"public static <T> Stream<T> from( T object ) {
        return new Stream<T>( new RepeatingObjectIterator<T>( object ), null ) ;
    }","Construct a  Stream that for every element, returns  object.",1,57
4845,"public PhysicalPlan getPlan(SqlNode sqlNode) throws ValidationException, RelConversionException, IOException {

    SqlDropTable dropTableNode = ((SqlDropTable) sqlNode);
    SqlIdentifier tableIdentifier = dropTableNode.getTableIdentifier();

    SchemaPlus defaultSchema = config.getConverter().getDefaultSchema();
    AbstractSchema drillSchema = null;

    if (tableIdentifier != null) {
      drillSchema = SchemaUtilites.resolveToMutableDrillSchema(defaultSchema, dropTableNode.getSchema());
    }

    String tableName = dropTableNode.getName();
    if (drillSchema == null) {
      throw UserException.validationError()
          .message(""Invalid table_name [%s]"", tableName)
          .build(logger);
    }

    if (dropTableNode.checkTableExistence()) {
      final Table tableToDrop = SqlHandlerUtil.getTableFromSchema(drillSchema, tableName);
      if (tableToDrop == null || tableToDrop.getJdbcTableType() != Schema.TableType.TABLE) {
        return DirectPlan.createDirectPlan(context, true,
            String.format(""Table [%s] not found"", tableName));
      }
    }

    drillSchema.dropTable(tableName);

    return DirectPlan.createDirectPlan(context, true,
        String.format(""Table [%s] %s"", tableName, ""dropped""));
  }",Function resolves the schema and invokes the drop method (while IF EXISTS statement is used function invokes the drop method only if table exists).,1,329
4846,"public char get(WithAttributes withAttributes) {
        return withAttributes.getAttributes().get(this);
    }",Extracts the attribute map from the specified  WithAttributes and returns the value of this attribute from the map.,1,31
4847,"public static String launchProcess(final String command, final Map<String, String> environment, boolean backend) throws IOException {
        String[] cmds = command.split("" "");

        ArrayList<String> cmdList = new ArrayList<String>();
        for (String tok : cmds) {
            if (!StringUtils.isBlank(tok)) {
                cmdList.add(tok);
            }
        }

        return launchProcess(command, cmdList, environment, backend);
    }",Attention,1,146
4848,"public synchronized PaintContext createContext(ColorModel cm, Rectangle r,
                                                   Rectangle2D r2d,
                                                   AffineTransform xform,
                                                   RenderingHints hints) {
        return new ColorPaintContext(getRGB(), cm);
    }",Creates and returns a  PaintContext used to generate a solid color pattern.,1,57
4849,"private ServiceReference[] getInitialReferences(boolean trackAllServices,
			String className, String filterString)
			throws InvalidSyntaxException {
		if (trackAllServices) {
			return context.getAllServiceReferences(className, filterString);
		}
		return context.getServiceReferences(className, filterString);
	}",Returns the list of initial ServiceReferences that will be tracked by this ServiceTracker.,1,74
4850,"public EReference getComment_Replies() {
		return (EReference) commentEClass.getEStructuralFeatures().get(3);
	}",Returns the meta object for the reference list ' org.eclipse.mylyn.reviews.core.model.IComment#getReplies Replies'.,1,32
4851,"public Future<Map<String, Object>> asyncGetBulk(String... keys) {
		return asyncGetBulk(Arrays.asList(keys));
	}",Varargs wrapper for asynchronous bulk gets.,1,42
4852,"public <RX extends RxInvokerProvider> Client buildRx(String name, Class<RX> invokerType) {
        return build(name).register(invokerType);
    }",Builds the  Client instance with a custom reactive client provider.,1,46
4853,"public Set<Warning> getWarnings() {
        return Collections.unmodifiableSet(project.getWarnings(packageName));
    }",Returns all warnings for this package details view.,1,32
4854,"@SuppressWarnings(""unchecked"")
    protected Class[] getClassContext() {
        return VMStack.getClasses(-1, false);
    }",Returns an array containing one entry for each method in the current execution stack.,1,38
4855,"public static ImportMode getModeValue(String mode)
	{
		if (mode == null) return null;

		mode = mode.trim().toLowerCase();
		if (mode.indexOf(',') == -1)
		{
			// only one keyword supplied
			if (""insert"".equals(mode))
			{
        return ImportMode.insert;
			}
			else if (""update"".equals(mode))
			{
        return ImportMode.update;
			}
			else
			{
				return null;
			}
		}
		else
		{
			List l = StringUtil.stringToList(mode, "","");
			String first = (String)l.get(0);
			String second = (String)l.get(1);
			if (""insert"".equals(first) && ""update"".equals(second))
			{
        return ImportMode.insertUpdate;
			}
			else if (""update"".equals(first) && ""insert"".equals(second))
			{
        return ImportMode.updateInsert;
			}
			else
			{
				return null;
			}
		}

	}",Return the mode value based on keywords.,1,316
4856,"public Field getField(String name) throws NoSuchFieldException, SecurityException {
        checkPublicMemberAccess();

        Field[] fields = getClassCache().getAllPublicFields();
        Field field = findFieldByName(fields, name);

        /*
         * Make a copy of the private (to the package) object, so that
         * setAccessible() won't alter the private instance.
         */
        return REFLECT.clone(field);
    }",Returns a  Field object which represents the public field with the specified name.,1,79
4857,"public WebElement augment(RemoteWebElement element) {
    // TODO(simon): We should really add a ""SelfDescribing"" interface for this
    RemoteWebDriver parent = (RemoteWebDriver) element.getWrappedDriver();
    if (parent == null) {
      return element;
    }
    Map<String, AugmenterProvider> augmentors = elementAugmentors;

    CompoundHandler handler = determineAugmentation(parent, augmentors);
    RemoteWebElement remote = create(handler, element);

    remote.setId(element.getId());
    remote.setParent(parent);

    return remote;
  }",Enhance the interfaces implemented by this instance of WebElement iff that instance is a  org.openqa.selenium.remote.RemoteWebElement.,1,139
4858,"public List parsePage(String urlString) {
        String status = ""ok"";

        try {
            URL currentURL = new java.net.URL(urlString);
            HttpURLConnection httpCon = (HttpURLConnection) currentURL.openConnection();

            httpCon.setRequestProperty(""User-Agent"", ""Lenya Lucene Crawler"");

            httpCon.connect();

            if (httpCon.getResponseCode() == HttpURLConnection.HTTP_OK) {
                String contentType = httpCon.getContentType();

                if (contentType.indexOf(""text/html"") != -1) {
                    return handleHTML(httpCon);
                } else if (contentType.indexOf(""application/pdf"") != -1) {
                    handlePDF(httpCon);
                } else {
                    status = ""Not an excepted content type : "" + contentType;
                }
            } else {
                status = ""bad"";
            }

            httpCon.disconnect();
        } catch (java.net.MalformedURLException mue) {
            status = mue.toString();
        } catch (java.net.UnknownHostException uh) {
            status = uh.toString(); // Mark as a bad URL
        } catch (java.io.IOException ioe) {
            status = ioe.toString(); // Mark as a bad URL
        } catch (Exception e) {
            status = e.toString(); // Mark as a bad URL
        }

        //return status;
        return null;
    }",Parse a URL,1,381
4859,"public static String encrypt(String plain) {
        return getMD5(plain);
/*
        org.w3c.tools.crypt.Md5 md5 = new org.w3c.tools.crypt.Md5(plain);
        byte[] b = md5.processString();

        return md5.getStringDigest();
*/
    }",Encrypt plain text password,1,29
4860,"public Node getFirstNode() {
		return m_node1;
	} //",Return the VisualItem representing the first (source) node in the edge.,1,21
4861,"public ArrayList<ErrorMsg> getWarnings() {
        return _parser.getWarnings();
    }",Get a list of all compile warning messages,1,26
4862,"public Reader getReader() throws IOException {
        if (this.pipeIn == null) {
            this.pipeIn = new PipedReader();
            this.pipeOut = new PipedWriter(this.pipeIn);

            Thread thread = new ParserThread(this);
            thread.start(); // start parsing
        }

        return this.pipeIn;
    }",Get a reader,1,102
4863,"public List<LogicalInputSplit> getInputSplits(final HiveReadEntry hiveReadEntry) {
    final Stopwatch timeGetSplits = Stopwatch.createStarted();
    try {
      if (!isPartitionedTable) {
        return getTableInputSplits();
      }

      final List<LogicalInputSplit> splits = Lists.newArrayList();
      for (HivePartition p : hiveReadEntry.getPartitions()) {
        splits.addAll(getPartitionInputSplits(p));
      }
      return splits;
    } catch (final Exception e) {
      logger.error(""Failed to get InputSplits"", e);
      throw new DrillRuntimeException(""Failed to get InputSplits"", e);
    } finally {
      logger.debug(""Took {} Âµs to get InputSplits from {}.{}"", timeGetSplits.elapsed(TimeUnit.NANOSECONDS) / 1000,
          hiveReadEntry.getTable().getDbName(), hiveReadEntry.getTable().getTableName());
    }
  }",Return  LogicalInputSplits for given  HiveReadEntry.,1,226
4864,"public String toString() {
    try {
      return toString(-1);
    } catch (Exception e) {
      return null;
    }
  }",Make a JSON text of this JSONArray as a single line.,1,50
4865,"private File[] getDirectoryHistory() {
        File[] dirhist = Settings.instance().getDirectoryHistory();

        if (dirhist == null || dirhist.length == 0) return new File[] { new File(""."").getAbsoluteFile() };
        else return dirhist;
    }",Reads current directory history from Settings.,1,94
4866,"public ArrayList<View> getViews() {
		try {
			return viewFetcher.getViews(null, false);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}",Returns an  ArrayList of all the  View objects located in the focused window e.g.,1,65
4867,"public static int nextPowerOfTwo(final int value) {
        return 1 << (32 - Integer.numberOfLeadingZeros(value - 1));
    }",Fast method of finding the next power of 2 greater than or equal to the supplied value.,1,46
4868,"public static MatchFinder anyOf(final MatchFinder... finders) {
    return new MatchFinder() {
      @Override
      public boolean matches(UiElement element) {
        for (MatchFinder finder : finders) {
          if (finder.matches(element)) {
            return true;
          }
        }
        return false;
      }

      @Override
      public String toString() {
        return ""anyOf("" + Joiner.on("","").join(finders) + "")"";
      }
    };
  }",Evaluates given @finders in short-circuit fashion in the order they are passed.,1,153
4869,"public AlgorithmIdentifier getDigestAlgorithm()
    {
        if (holder.getObjectDigestInfo() != null)
        {
            return holder.getObjectDigestInfo().getDigestAlgorithm();
        }
        return null;
    }",Returns algorithm identifier for the digest used if ObjectDigestInfo is present.,1,56
4870,"public static String jenkinsJobName(String namespace, String buildConfigName, String defaultNamespace) {
    if (namespace == null || namespace.length() == 0 || namespace.equals(defaultNamespace)) {
      return buildConfigName;
    }
    return namespace + ""-"" + buildConfigName;
  }",Creates the Jenkins Job name for the given buildConfigName in a namespace and the default namespace for jenkins,1,91
4871,"public boolean shouldBuffer() {
        Window window = runningQuery.getQuery().getWindow();
        boolean noWindow = window == null;
        // If it's a RAW query without a window, it should be buffered if and only if it timed out. This means that the
        // query is not yet done. So this tells the driver to buffer the query to wait for more potential results.
        if (noWindow && isRaw()) {
            return runningQuery.isTimedOut();
        }
        // No window (and not raw) is a duration based query => do buffer. Otherwise, buffer if the window is time based.
        return noWindow || window.isTimeBased();
    }",Returns if this query should buffer before emitting results.,1,99
4872,"public static ModuleConfig getModuleConfig(PageContext pageContext) {
       ModuleConfig moduleConfig = (ModuleConfig)
           pageContext.getRequest().getAttribute(Globals.MODULE_KEY);
       if (moduleConfig == null) { // Backwards compatibility hack
           moduleConfig = (ModuleConfig)
               pageContext.getServletContext().getAttribute(Globals.MODULE_KEY);
       }
       return moduleConfig;
    }","Return the ModuleConfig object is it exists, null otherwise.",1,93
4873,"public byte toOrdinal() {
	      return this.opCode;
	    }",Returns the byte representing this operation code.,1,21
4874,"static int calcLevels(double start, int end, double multiple)
	{
		return (int) Math.ceil(calcMultipliedLevels(start, end, multiple));
	}","Calculate skill levels required for increasing combat level, meant for all combat skills besides prayer, ranged, and magic.",1,51
4875,"@Override
    public AsyncAppenderBase<IAccessEvent> build() {
        return new AsyncAppenderBase<IAccessEvent>() {
            @Override
            protected void preprocess(IAccessEvent event) {
                event.prepareForDeferredProcessing();
            }
        };
    }",Creates an  AsyncAppenderFactory of type  IAccessEvent that prepares events for deferred processing,1,65
4876,"public static EString substring(Expr<String> left, int right) {
        return operationFactory.createString(Ops.SUBSTR1ARG, left, exprFactory
                .createConstant(right));
    }",Expr : left.substring(right),1,52
4877,"public LockableMGraph getUnsecuredMGraph() {
		try {
			checkWrite();
			return wrapped;
		} catch (AccessControlException ex) {
			checkRead();
			return new WriteBlockedMGraph(wrapped);
		}
		
	}",Returns the wrapped LockableMGraph if the caller has all access rights.,1,65
4878,"public static YourKitContext startProfile(boolean enableStackTelemetry,
                                            boolean enableCPUProfilling,
                                            boolean enableAllocationRecording) {
    Controller controller;
    try {
      controller = new Controller();
      // CHECKSTYLE: stop IllegalCatch
    } catch (Exception e) {
      // CHECKSTYLE: resume IllegalCatch
      LOG.info(""Failed to set up YourKit controller"", e);
      return null;
    }

    try {
      if (enableStackTelemetry) {
        controller.enableStackTelemetry();
        LOG.info(""Enabled Yourkit stack telemetry"");
      }
      // CHECKSTYLE: stop IllegalCatch
    } catch (Exception e) {
      // CHECKSTYLE: resume IllegalCatch
      LOG.info(""Failed to enable YourKit stack telemetry"", e);
    }

    try {
      if (enableCPUProfilling) {
        controller.startCPUProfiling(ProfilingModes.CPU_SAMPLING,
          Controller.DEFAULT_FILTERS, Controller.DEFAULT_WALLTIME_SPEC);
        LOG.info(""Started YourKit CPU profiling"");
      }
      // CHECKSTYLE: stop IllegalCatch
    } catch (Exception e) {
      // CHECKSTYLE: resume IllegalCatch
      LOG.info(""Failed to start YourKit CPU profiling"", e);
    }

    try {
      if (enableAllocationRecording) {
        controller.startAllocationRecording(true, ALLOCATION_RECORDING_INTERVAL,
            false, -1, true, false);
        LOG.info(""Started YourKit allocation recording"");
      }
      // CHECKSTYLE: stop IllegalCatch
    } catch (Exception e) {
      // CHECKSTYLE: resume IllegalCatch
      LOG.info(""Failed to start YourKit allocation recording"", e);
    }

    return new YourKitContext(controller);
  }","Create a YourKit controller and do some or all of  Controller#enableExceptionTelemetry()  Controller#startCPUProfiling(long, String, String)  Controller#startAllocationRecording(boolean, int, boolean, int, boolean, boolean) based on boolean config options passed as method parameters",1,358
4879,"public <C extends EvictionCandidate<A, E>> Iterable<C> evaluate(Iterable<C> evictionCandidates) {
        C selectedEvictionCandidate = null;
        long now = Clock.currentTimeMillis();
        for (C currentEvictionCandidate : evictionCandidates) {
            if (selectedEvictionCandidate == null) {
                selectedEvictionCandidate = currentEvictionCandidate;
            } else {
                E evictable = currentEvictionCandidate.getEvictable();
                if (isExpired(now, evictable)) {
                    return returnEvictionCandidate(currentEvictionCandidate);
                }

                int comparisonResult = evictionPolicyComparator.compare(selectedEvictionCandidate, currentEvictionCandidate);
                if (comparisonResult == EvictionPolicyComparator.SECOND_ENTRY_HAS_HIGHER_PRIORITY_TO_BE_EVICTED) {
                    selectedEvictionCandidate = currentEvictionCandidate;
                }
            }
        }
        return returnEvictionCandidate(selectedEvictionCandidate);
    }",The evaluate method implements the  com.hazelcast.config.EvictionPolicy rule on the given input set of candidates.,1,206
4880,"@Transactional(readOnly = true)
	@Override
	public int getCount(final List<BatchInstanceStatus> batchInstStatusList, final List<BatchPriority> batchPriorities,
			final boolean isCurrUsrNotReq, final String currentUser, final Set<String> userRoles, EphesoftUser ephesoftUser) {
		return batchInstanceDao
				.getCount(batchInstStatusList, batchPriorities, isCurrUsrNotReq, userRoles, currentUser, ephesoftUser);
	}",An api to fetch count of the batch instances for a given status list and batch priority and isCurrUsrNotReq is used for adding the batch instance access by the current user.,1,102
4881,"public double getAssignmentValue(int[] assignment) {
        double d = super.getAssignmentValue(assignment);
        // if (d == null) d = Double.NEGATIVE_INFINITY;
        return Math.exp(d);
    }","Just a pass through to the NDArray version, plus a Math.exp to ensure that to the outside world the TableFactor doesn't look like it's in log-space",1,47
4882,"public static Treepath getPreviousSibling( Treepath treepath ) throws IllegalArgumentException {
    if( treepath.getHeight() < 2 ) {
      throw new IllegalArgumentException( ""Treepath must have minimum height of 2"" ) ;
    }
    final Tree treeToMove = treepath.getBottom() ;
    final Tree parent = treepath.getTreeAtHeight( 1 ) ;
    for( int i = parent.getChildCount() - 1 ; i > 0 ; i-- ) {
      final Tree child = parent.getChildAt( i ) ;
      if( child == treeToMove ) {
        return Treepath.create( treepath.getParent(), parent.getChildAt( i - 1 ) ) ;
      }
    }
    throw new IllegalArgumentException( ""No previous sibling"" ) ;
  }",Returns the sibling on the left of the bottom of given  Treepath.,1,225
4883,"public ComponentType introspect(Class<?> implClass) throws ConfigurationLoadException {
        ComponentType compType = factory.createComponentType();
        return introspect(implClass, compType);
    }",Visits the given implementation type and calls back to  org.apache.tuscany.core.extension.config.ImplementationProcessors registered with this introspector to build up a  ComponentType,1,49
4884,"public final Entity getEntity() {
        return entity;
    }",Returns the entity.,1,21
4885,"@Override
    public boolean isClosed() {
        return mode == Mode.PARTITION ? window.isClosedForPartition() : window.isClosed();
    }","Depending on the  Mode#ALL mode this is operating in, returns true if and only if the query window is closed and you should emit the result at this time.",1,45
4886,"public android.telecom.Connection.VideoProvider getVideoProvider() {
        return mVideoProvider;
    }",Returns the  android.telecom.Connection.VideoProvider for the connection.,1,25
4887,"public String getLivePath() {
        return this.livePath;
    }",Returns the live path,1,21
4888,"public TableEditor editOrCreateTable(TableId tableId) {
        Table table = forTable(tableId);
        return table == null ? Table.editor().tableId(tableId) : table.edit();
    }",Obtain an editor for the table with the given ID.,1,61
4889,"public static Object deserialize(InputStream inputStream) throws SerializationException {
		return deserialize( inputStream, Thread.currentThread().getContextClassLoader() );
    }",Deserializes an object from the specified stream using the Thread Context,1,44
4890,"public final TwitterTokenStream deserialize(final byte[] data,
                                       final CharSequence charSequence) throws IOException {
    return deserialize(data, 0, data.length, charSequence);
  }",Deserializes the previously serialized TwitterTokenStream using the provided AttributeSerializer(s).,1,54
4891,"public static byte[] readByteCode(ZipInputStream zip) throws IOException {
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        InputStream in = new BufferedInputStream( zip );
        int b;
        while ( ( b = in.read() ) != -1 ) {
            bout.write( b );
        }
        return bout.toByteArray();
    }",Read class definition a zip (jar) file entry.,1,114
4892,"public boolean contains(long millisInstant) {
        long thisStart = getStartMillis();
        long thisEnd = getEndMillis();
        return (millisInstant >= thisStart && millisInstant < thisEnd) ||
            (thisStart == millisInstant && thisEnd == millisInstant);
    }",Does this time interval contain or equal the specified millisecond instant.,1,85
4893,"public List getAnchorHRefs(boolean duplicate) {
        if (duplicate) {
            return this.htmlHandler.getAllAHRefs();
        }
        return this.htmlHandler.getAHRefs();
    }",Get Anchor Hrefs,1,52
4894,"public List<TableDesc> listTables() {
        return allTables;
    }","at first stage the only table in II is fact table, tables",1,22
4895,"private Languages.Language getLanguage(String languageStr) {
    for (Languages.Language l : Languages.Language.values()) {
      if (l.name().equalsIgnoreCase(languageStr))
        return l;
    }
    return null;
  }",Get the  edu.stanford.nlp.international.Languages.Language object corresponding to the given language string.,1,72
4896,"public List getLinkHRefs(boolean duplicate) {
        if (duplicate) {
            return this.htmlHandler.getAllLinkHRefs();
        }
        return this.htmlHandler.getLinkHRefs();
    }",Get Link hrefs,1,52
4898,"static boolean hasNoNulls(Statistics stat) {
    return stat.getNumNulls() <= 0;
  }",Checks that column chunk's statistics does not have nulls,1,31
4899,"public Definition emit(Class cls, String allowedMethods) throws Exception {
        this.cls = cls;
        this.allowedMethods = allowedMethods;

        /** @todo ravi: getting the serviceName from cls name or explicitly ask the user? */
        String name = cls.getName();
        name = name.substring(name.lastIndexOf('.') + 1);
        setServiceName(name);
        return emit();
    }",Generates a WSDL Definition for a given Class and a space seperated list of methods at design time,1,100
4900,"public String toBooleanGetter(String name) {
        return getterAndSetterCapitalize(name);
    }","Output the partial Getter name for boolean property, e.g.",1,25
4901,"public static long toNanoOfDay(Object value, boolean acceptLargeValues) {
        if (value instanceof Duration) {
            Duration duration = (Duration) value;
            if (!acceptLargeValues && (duration.isNegative() || duration.compareTo(ONE_DAY) > 0)) {
                throw new IllegalArgumentException(""Time values must be between 00:00:00 and 24:00:00 (inclusive): "" + duration);
            }

            return ((Duration) value).toNanos();
        }

        // TODO only needed for SQL Server/Oracle, where we don't produce Duration right away;
        // this should go eventually, as the conversion to LocalTime is superfluous
        LocalTime time = Conversions.toLocalTime(value);
        return time.toNanoOfDay();
    }",Get the number of nanoseconds past midnight of the given  Duration.,1,157
4902,"public Observable<Connectivity> observeNetworkConnectivity(final Context context) {
    final IntentFilter filter = new IntentFilter();
    filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);

    return Observable.create(new Observable.OnSubscribe<Connectivity>() {
      @Override public void call(final Subscriber<? super Connectivity> subscriber) {
        final BroadcastReceiver receiver = new BroadcastReceiver() {
          @Override public void onReceive(Context context, Intent intent) {
            subscriber.onNext(Connectivity.create(context));
          }
        };

        context.registerReceiver(receiver, filter);

        subscriber.add(unsubscribeInUiThread(new Action0() {
          @Override public void call() {
            context.unregisterReceiver(receiver);
          }
        }));
      }
    }).defaultIfEmpty(Connectivity.create());
  }",Observes network connectivity.,1,230
4903,"public Float getTopValue() {
            return topValue;
        }",Gets the 'top' attributes value in current units.,1,19
4904,"public Chat dccSendChatRequest(User sender, int timeout) throws IOException, SocketTimeoutException {
		return dccHandler.sendChatRequest(sender);
	}",Utility method to send a chat request to a user.,1,39
4905,"protected WebSocket doWebSocketConnect(final HttpServletRequest request, final String protocol) {
        logger.info(""WebSocket upgrade requested"");

        return new WebSocket() {
            private WebSocketProcessor webSocketProcessor;

            @Override
            public void onConnect(WebSocket.Outbound outbound) {
                webSocketProcessor = new WebSocketProcessor(AtmosphereServlet.this, new JettyWebSocketSupport(outbound));
                try {
                    webSocketProcessor.connect(new JettyRequestFix(request));
                } catch (IOException e) {
                    logger.warn(""failed to connect to web socket"", e);
                }
            }

            @Override
            public void onMessage(byte frame, String data) {
                webSocketProcessor.broadcast(frame, data);
            }

            @Override
            public void onMessage(byte frame, byte[] data, int offset, int length) {
                webSocketProcessor.broadcast(frame, new String(data, offset, length));
            }

            @Override
            public void onFragment(boolean more, byte opcode, byte[] data, int offset, int length) {
                webSocketProcessor.broadcast(opcode, new String(data, offset, length));
            }

            @Override
            public void onDisconnect() {
                webSocketProcessor.close();
            }
        };
    }",Jetty 7 and up WebSocket support.,1,346
4906,"public Throwable initCause(Throwable cause) {
		return super.initCause(cause);
	}",Initializes the cause of this exception to the specified value.,1,27
4907,"public static ActiveMQConnectionFactory createConnectionFactoryWithoutHA(final DiscoveryGroupConfiguration groupConfiguration, JMSFactoryType jmsFactoryType)
   {
      ActiveMQConnectionFactory factory = null;
      if (jmsFactoryType.equals(JMSFactoryType.CF))
      {
         factory = new ActiveMQJMSConnectionFactory(false, groupConfiguration);
      }
      else if (jmsFactoryType.equals(JMSFactoryType.QUEUE_CF))
      {
         factory = new ActiveMQQueueConnectionFactory(false, groupConfiguration);
      }
      else if (jmsFactoryType.equals(JMSFactoryType.TOPIC_CF))
      {
         factory = new ActiveMQTopicConnectionFactory(false, groupConfiguration);
      }
      else if (jmsFactoryType.equals(JMSFactoryType.XA_CF))
      {
         factory = new ActiveMQXAConnectionFactory(false, groupConfiguration);
      }
      else if (jmsFactoryType.equals(JMSFactoryType.QUEUE_XA_CF))
      {
         factory = new ActiveMQXAQueueConnectionFactory(false, groupConfiguration);
      }
      else if (jmsFactoryType.equals(JMSFactoryType.TOPIC_XA_CF))
      {
         factory = new ActiveMQXATopicConnectionFactory(false, groupConfiguration);
      }

      return factory;
   }","Create a ActiveMQConnectionFactory which creates session factories from a set of live servers, no HA backup information is propagated to the client",1,269
4908,"protected TreePath[] getPathBetweenRows(int index0, int index1) {
        TreeUI           tree = getUI();
        if (tree != null) {
            int rowCount = getRowCount();
            if (rowCount > 0 && !((index0 < 0 && index1 < 0) ||
                                  (index0 >= rowCount && index1 >= rowCount))){
                index0 = Math.min(rowCount - 1, Math.max(index0, 0));
                index1 = Math.min(rowCount - 1, Math.max(index1, 0));
                int minIndex = Math.min(index0, index1);
                int maxIndex = Math.max(index0, index1);
                TreePath[] selection = new TreePath[
                        maxIndex - minIndex + 1];
                for(int counter = minIndex; counter <= maxIndex; counter++) {
                    selection[counter - minIndex] =
                            tree.getPathForRow(this, counter);
                }
                return selection;
            }
        }
        return new TreePath[0];
    }",Returns the paths (inclusive) between the specified rows.,1,315
4909,"public static HashMap getXmlRpcWorkflowInstancePage(
      WorkflowInstancePage page) {
    HashMap pageHash = new HashMap();
    pageHash.put(""totalPages"", String.valueOf(page.getTotalPages()));
    pageHash.put(""pageNum"", String.valueOf(page.getPageNum()));
    pageHash.put(""pageSize"", String.valueOf(page.getPageSize()));
    pageHash.put(""pageWorkflows"",
        getXmlRpcWorkflowInstances(page.getPageWorkflows()));

    return pageHash;

  }",Gets a  HashMap representation of a  WorkflowInstancePage that is serializable over the XML-RPC wire.,1,133
4910,"public int pingAndWaitForReply(Message message, int numPings, long timeout) throws JMSException, InterruptedException
    {
        // Put a unique correlation id on the message before sending it.
        String messageCorrelationId = Long.toString(idGenerator.incrementAndGet());
        message.setJMSCorrelationID(messageCorrelationId);

        for (int i = 0; i < numPings; i++)
        {
            // Re-timestamp the message.
            message.setLongProperty(""timestamp"", System.currentTimeMillis());

            _producer.send(message);
        }

        // Commit the transaction if running in transactional mode. This must happen now, rather than at the end of
        // this method, as the message will not be sent until the transaction is committed.
        commitTx(getProducerSession());

        // Keep the messageId to correlate with the reply.
        //String messageId = message.getJMSMessageID();

        if (_verbose)
        {
            _logger.info(timestampFormatter.format(new Date()) + "": Pinged at with correlation id, "" + messageCorrelationId);
        }

        // Block the current thread until a reply to the message is received, or it times out.
        CountDownLatch trafficLight = new CountDownLatch(numPings);
        trafficLights.put(messageCorrelationId, trafficLight);

        // Note that this call expects a timeout in nanoseconds, millisecond timeout is multiplied up.
        trafficLight.await(timeout, TimeUnit.MILLISECONDS);

        // Work out how many replies were receieved.
        int numReplies = numPings - (int) trafficLight.getCount();

        if ((numReplies < numPings) && _verbose)
        {
            _logger.info(""Timed out before all replies received on id, "" + messageCorrelationId);
        }
        else if (_verbose)
        {
            _logger.info(""Got all replies on id, "" + messageCorrelationId);
        }

        return numReplies;
    }",Sends the specified number of ping message and then waits for all correlating replies.,1,345
4911,"public synchronized static String hashPassword(long accountId, String password) {
        try {
            return sha1Hash(getBytes(""FX-SALT"" + accountId + password));
        } catch (NoSuchAlgorithmException e) {
            throw new FxCreateException(""Failed to load the SHA1 algorithm."").asRuntimeException();
        }
    }",Compute the hash of the given flexive password.,1,85
4912,"private long insertData(ContentValues values, boolean callerIsSyncAdapter) {
        long id = 0;
        mValues.clear();
        mValues.putAll(values);

        Long rawContactId = mValues.getAsLong(Data.RAW_CONTACT_ID);
        if (rawContactId == null) {
            throw new IllegalArgumentException(Data.RAW_CONTACT_ID + "" is required"");
        }

        // Replace package with internal mapping
        final String packageName = mValues.getAsString(Data.RES_PACKAGE);
        if (packageName != null) {
            mValues.put(DataColumns.PACKAGE_ID, mDbHelper.get().getPackageId(packageName));
        }
        mValues.remove(Data.RES_PACKAGE);

        // Replace mimetype with internal mapping
        final String mimeType = mValues.getAsString(Data.MIMETYPE);
        if (TextUtils.isEmpty(mimeType)) {
            throw new IllegalArgumentException(Data.MIMETYPE + "" is required"");
        }

        mValues.put(DataColumns.MIMETYPE_ID, mDbHelper.get().getMimeTypeId(mimeType));
        mValues.remove(Data.MIMETYPE);

        DataRowHandler rowHandler = getDataRowHandler(mimeType);
        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
        id = rowHandler.insert(db, mTransactionContext.get(), rawContactId, mValues);
        mTransactionContext.get().markRawContactDirtyAndChanged(rawContactId, callerIsSyncAdapter);
        mTransactionContext.get().rawContactUpdated(rawContactId);
        return id;
    }",Inserts an item in the data table,1,365
4913,"public Hashtable getBuiltInTypes() {
        return (Hashtable)fBuiltInTypes.clone();
    }","get all built-in DVs, which are stored in a hashtable keyed by the name",1,26
4914,"public ArrayList getLinkHRefs() {
        return this.link_href;
    }",Get a list of links,1,21
4915,"@Override
    public Object clone()
    {
        try {
            DBTable clone = (DBTable) super.clone();
            // clone all columns
            Class<?> colClass = columns.get(0).getClass();
            Class<?> colBase = colClass.getSuperclass();
            clone.columns = new ArrayList<DBColumn>();
            Field[] fields = getClass().getFields();
            for (int i = 0; i < columns.size(); i++)
            {
                DBTableColumn srcCol = (DBTableColumn) columns.get(i);
                DBTableColumn newCol = new DBTableColumn(clone, srcCol);
                // Replace all references for oldCol to newCol
                for (int j = 0; j < fields.length; j++)
                { // Find a class of Type DBColumn or DBTableColumn
                    Class<?> type = fields[j].getType();
                    if (type == colClass || type == colBase)
                    {
                        try
                        {   // Check if the field points to the old Value
                            if (fields[j].get(clone) == srcCol)
                              fields[j].set(clone, newCol);
                        } catch (Exception e)  {
                            // IllegalAccessException or IllegalArgumentException
                            String fieldName = fields[j].getName();
                            log.error(""Cannot adjust declared table field: "" + fieldName + "". Reason is: "" + e.getMessage());
                            // throw CloneNotSupportedException
                            CloneNotSupportedException cnse = new CloneNotSupportedException(""Unable to replace field reference for field "" + fieldName);
                            cnse.initCause(e);
                            throw cnse;
                        }
                    }
                }
            }
            // set new alias
            clone.alias = ""t"" + String.valueOf(tableCount.incrementAndGet());
            // done
            log.info(""clone: Table "" + name + "" cloned! Alias old="" + alias + "" new="" + clone.alias);
            return clone;

        } catch (CloneNotSupportedException e) {
            // unable to clone table
            log.error(""Unable to clone table "" + getName());
            throw new RuntimeException(e);
        }
    }",Clones this table and assigns a new table alias.,1,544
4916,"private static CoreMap fromProto(CoreNLPProtos.Sentence proto) {
    CoreMap sentence = new ArrayCoreMap();
    // Required fields
    sentence.set(TokenBeginAnnotation.class, proto.getTokenOffsetBegin());
    sentence.set(TokenEndAnnotation.class, proto.getTokenOffsetEnd());
    // Optional fields
    if (proto.hasSentenceIndex()) { sentence.set(SentenceIndexAnnotation.class, proto.getSentenceIndex()); }
    if (proto.hasCharacterOffsetBegin()) { sentence.set(CharacterOffsetBeginAnnotation.class, proto.getCharacterOffsetBegin()); }
    if (proto.hasCharacterOffsetEnd()) { sentence.set(CharacterOffsetEndAnnotation.class, proto.getCharacterOffsetEnd()); }
    if (proto.hasParseTree()) { sentence.set(TreeAnnotation.class, fromProto(proto.getParseTree())); }
    // Non-default fields
    if (proto.hasHasRelationAnnotations() && proto.getHasRelationAnnotations()) {
      // set entities
      List<EntityMention> entities = new ArrayList<EntityMention>();
      for (CoreNLPProtos.Entity entity : proto.getEntityList()) { entities.add(fromProto(entity, sentence)); }
      sentence.set(EntityMentionsAnnotation.class, entities);
      // set relations
      List<RelationMention> relations = new ArrayList<RelationMention>();
      for (CoreNLPProtos.Relation relation : proto.getRelationList()) { relations.add(fromProto(relation, sentence)); }
      sentence.set(RelationMentionsAnnotation.class, relations);
    }
    // Return
    return sentence;
  }",Create a CoreMap representing a sentence from this protocol buffer.,1,392
4917,"InputStream openSourceFile(String path) throws IOException {

    if (path.startsWith(""gen/"")) {
      // generated file?
      String rest = path.substring(""gen/"".length());
      File fileInGenDir = new File(getGenDir(), rest);
      if (!fileInGenDir.isFile()) {
        return null;
      }
      return new BufferedInputStream(new FileInputStream(fileInGenDir));
    } else {
      // regular source file?
      URL resource = recompiler.getResourceLoader().getResource(path);
      if (resource == null) {
        return null;
      }
      return resource.openStream();
    }
  }","Finds a source file (or other resource) that's either in this module's source path, or is a generated file.",1,183
4918,"public byte get(WithAttributes withAttributes) {
        return withAttributes.getAttributes().get(this);
    }",Extracts the attribute map from the specified  WithAttributes and returns the value of this attribute from the map.,1,31
4919,"@Override
	public Object put(Object value) {
		return put(value, false);
	}",encode = false,1,31
4920,"public static Configuration from(Map<String, String> properties) {
        Map<String, String> props = new HashMap<>();
        if (properties != null) props.putAll(properties);
        return new Configuration() {
            @Override
            public String getString(String key) {
                return properties.get(key);
            }

            @Override
            public Set<String> keys() {
                return properties.keySet();
            }

            @Override
            public String toString() {
                return props.toString();
            }
        };
    }",Obtain a configuration instance by copying the supplied map of string keys and string values.,1,171
4921,"public int getRowStatus(int aRow)
		throws IndexOutOfBoundsException
	{
		RowData row = this.getRow(aRow);
		if (row.isNew())
		{
			return RowData.NEW;
		}
		else if (row.isModified())
		{
			return RowData.MODIFIED;
		}
		else
		{
			return RowData.NOT_MODIFIED;
		}
	}",Return the status value for the given row.,1,106
4922,"public boolean add(E o) {
        return super.add(o);
    }",Adds the specified element to this queue.,1,27
4923,"public File getGeneratedOutput()
        throws CurnException
    {
        return null;
    }","Get the File that represents the output produced by the handler, if applicable.",1,25
4924,"public ReporterData getSingleData(Xref idc) {
		List<ReporterData> dlist = data.get(idc);
		if(dlist != null && dlist.size() > 0) return dlist.get(0);
		return null;
	}",Get the first  ReporterData instance of the cached data for this gene-product.,1,74
4925,"public Set<String> getKeySet() throws CoreException {
		return DBProperty.getKeySet(db, index);
	}",Returns the Set of property names stored in this object,1,34
4926,"public Map<String, String> populateImplicitColumns(String filePath,
                                                     List<String> partitionValues,
                                                     boolean includeFileImplicitColumns) {
    Map<String, String> implicitValues = new LinkedHashMap<>();

    for (int i = 0; i < partitionValues.size(); i++) {
      if (isStarQuery || selectedPartitionColumns.contains(i)) {
        implicitValues.put(partitionDesignator + i, partitionValues.get(i));
      }
    }

    if (includeFileImplicitColumns) {
      Path path = Path.getPathWithoutSchemeAndAuthority(new Path(filePath));
      for (Map.Entry<String, ImplicitFileColumns> entry : selectedImplicitColumns.entrySet()) {
        implicitValues.put(entry.getKey(), entry.getValue().getValue(path));
      }
    }

    return implicitValues;
  }","Creates map with implicit columns where key is column name, value is columns actual value.",1,232
4927,"private StreamEvent findIfActualMax(AttributeDetails latestEvent) {
        int indexCurrentMax = valueStack.indexOf(currentMax);
        int postBound = valueStack.indexOf(latestEvent) - indexCurrentMax;
        // If latest event is at a distance greater than maxPostBound from max, max is not eligible to be sent as output
        if (postBound > maxPostBound) {
            currentMax.notEligibleForRealMax();
            return null;
        }
        // If maxPreBound is 0, no need to check preBoundChange. Send output with postBound value
        if (maxPreBound == 0) {
            StreamEvent outputEvent = eventStack.get(indexCurrentMax);
            complexEventPopulater.populateComplexEvent(outputEvent, new Object[] { ""max"", 0, postBound });
            currentMax.sentOutputAsRealMax();
            return outputEvent;
        }
        int preBound = 1;
        double dThreshold = currentMax.getValue() - currentMax.getValue() * preBoundChange / 100;
        while (preBound <= maxPreBound && indexCurrentMax - preBound >= 0) {
            if (valueStack.get(indexCurrentMax - preBound).getValue() <= dThreshold) {
                StreamEvent outputEvent = eventStack.get(indexCurrentMax);
                complexEventPopulater.populateComplexEvent(outputEvent, new Object[] { ""max"", preBound, postBound });
                currentMax.sentOutputAsRealMax();
                return outputEvent;
            }
            ++preBound;
        }
        // Completed iterating through maxPreBound older events. No events which satisfy preBoundChange condition found.
        // Therefore max is not eligible to be sent as output.
        currentMax.notEligibleForRealMax();
        return null;
    }","Method to find whether a value preBoundChange% less than or equal to max exists within maxPreBound length window, by looping through older events.",1,348
4928,"public static RequestBody getReferencedRequestBody(OpenAPI openAPI, RequestBody requestBody) {
        if (requestBody != null && StringUtils.isNotEmpty(requestBody.get$ref())) {
            String name = getSimpleRef(requestBody.get$ref());
            RequestBody referencedRequestBody = getRequestBody(openAPI, name);
            if(referencedRequestBody != null) {
                return referencedRequestBody;
            }
        }
        return requestBody;
    }","If a RequestBody contains a reference to an other RequestBody with '$ref', returns the referenced RequestBody if it is found or the actual RequestBody in the other cases.",1,115
4929,"private ZapTextField getTxtReverseProxyHttpsPort() {
		if (txtReverseProxyHttpsPort == null) {
			txtReverseProxyHttpsPort = new ZapTextField();
		}
		return txtReverseProxyHttpsPort;
	}",This method initializes ZapTextField,1,48
4930,"public ArrayList getAHRefs() {
        return this.a_href;
    }",Get a list of a href=,1,21
4931,"public EReference getTopic_Item() {
		return (EReference) topicEClass.getEStructuralFeatures().get(4);
	}",Returns the meta object for the container reference ' org.eclipse.mylyn.reviews.core.model.ITopic#getItem Item'.,1,32
4932,"public static double interp(int scale, double val, double dist[]) {
        switch ( scale ) {
        case Constants.LINEAR_SCALE:
            return linearInterp(val, dist[0], dist[dist.length-1]);
        case Constants.LOG_SCALE:
            return logInterp(val, dist[0], dist[dist.length-1]);
        case Constants.SQRT_SCALE:
            return sqrtInterp(val, dist[0], dist[dist.length-1]);
        case Constants.QUANTILE_SCALE:
            return quantile(val, dist);
        }
        throw new IllegalArgumentException(""Unrecognized scale value: ""+scale);
    }","Interpolates a value within a range using a specified scale, returning the fractional position of the value within that scale.",1,178
4933,"public MutableDirectBuffer buffer() {
        return mutableDirectBuffer;
    }",The  MutableDirectBuffer that encapsulates the internal buffer.,1,19
4934,"@Override
	public Refactoring getParent() {
		return this.parent;
	}",Gets the Refactoring supported by the controller.,1,24
4935,"public ImmutableGraph parse(InputStream serializedGraph,
            String formatIdentifier) throws UnsupportedFormatException {
        return parse(serializedGraph, formatIdentifier, null);
    }",Parses a serialized ImmutableGraph from an InputStream.,1,41
4936,"public IntervalConverter removeIntervalConverter(IntervalConverter converter)
            throws SecurityException {
        
        checkAlterIntervalConverters();
        if (converter == null) {
            return null;
        }
        IntervalConverter[] removed = new IntervalConverter[1];
        iIntervalConverters = iIntervalConverters.remove(converter, removed);
        return removed[0];
    }",Removes a converter from the set of converters.,1,94
4937,"public Maps getMaps() {
        //Crowdmap requires a new api signature every 2 minutes
        // so before a request is made, generate a new key
        setApiKey(METHOD_GET, SEGMENT_MAPS);
        return fromString(client.get(SEGMENT_MAPS), Maps.class);
    }",Get list of maps as anonymous user,1,48
4938,"public EvictionConfig getEvictionConfig() {
        return evictionConfig;
    }",Gets the  EvictionConfig instance for eviction configuration of the cache config.,1,19
4939,"public static MatchFinder allOf(final MatchFinder... finders) {
    return new MatchFinder() {
      @Override
      public boolean matches(UiElement element) {
        for (MatchFinder finder : finders) {
          if (!finder.matches(element)) {
            return false;
          }
        }
        return true;
      }

      @Override
      public String toString() {
        return ""allOf("" + Joiner.on("","").join(finders) + "")"";
      }
    };
  }",Evaluates given @finders in short-circuit fashion in the order they are passed.,1,154
4940,"@SuppressWarnings(""static-access"")
    public ObjectName getQueueObjectName(String virtualHostName, String queue)
    {
        // Get the name of the test manager
        AllObjects allObject = new AllObjects(_mbsc);
        allObject.querystring = ""org.apache.qpid:type=VirtualHost.Queue,VirtualHost="" + virtualHostName + "",name="" + queue + "",*"";

        Set<ObjectName> objectNames = allObject.returnObjects();

        _test.assertNotNull(""Null ObjectName Set returned"", objectNames);
        _test.assertEquals(""Incorrect number of queues with name '"" + allObject.querystring +
                           ""' returned"", 1, objectNames.size());

        // We have verified we have only one value in objectNames so return it
        ObjectName objectName = objectNames.iterator().next();
		_test.getLogger().info(""Loading: "" + objectName);
        return objectName;
    }",Retrive the ObjectName for the given Queue on a Virtualhost.,1,194
4941,"public List<CodegenSecurity> fromSecurity(Map<String, SecurityScheme> securitySchemeMap) {
        if (securitySchemeMap == null) {
            return Collections.emptyList();
        }

        List<CodegenSecurity> codegenSecurities = new ArrayList<CodegenSecurity>(securitySchemeMap.size());
        for (String key : securitySchemeMap.keySet()) {
            final SecurityScheme securityScheme = securitySchemeMap.get(key);

            CodegenSecurity cs = CodegenModelFactory.newInstance(CodegenModelType.SECURITY);
            cs.name = key;
            cs.type = securityScheme.getType().toString();
            cs.isCode = cs.isPassword = cs.isApplication = cs.isImplicit = false;

            if (SecurityScheme.Type.APIKEY.equals(securityScheme.getType())) {
                cs.isBasic = cs.isOAuth = false;
                cs.isApiKey = true;
                cs.keyParamName = securityScheme.getName();
                cs.isKeyInHeader = securityScheme.getIn() == SecurityScheme.In.HEADER;
                cs.isKeyInQuery = !cs.isKeyInHeader;
            } else if (SecurityScheme.Type.HTTP.equals(securityScheme.getType())) {
                cs.isKeyInHeader = cs.isKeyInQuery = cs.isApiKey = cs.isOAuth = false;
                cs.isBasic = true;
            } else if (SecurityScheme.Type.OAUTH2.equals(securityScheme.getType())) {
                cs.isKeyInHeader = cs.isKeyInQuery = cs.isApiKey = cs.isBasic = false;
                cs.isOAuth = true;
                final OAuthFlows flows = securityScheme.getFlows();
                if (securityScheme.getFlows() == null) {
                    throw new RuntimeException(""missing oauth flow in "" + cs.name);
                }
                if (flows.getPassword() != null) {
                    setOauth2Info(cs, flows.getPassword());
                    cs.isPassword = true;
                    cs.flow = ""password"";
                } else if (flows.getImplicit() != null) {
                    setOauth2Info(cs, flows.getImplicit());
                    cs.isImplicit = true;
                    cs.flow = ""implicit"";
                } else if (flows.getClientCredentials() != null) {
                    setOauth2Info(cs, flows.getClientCredentials());
                    cs.isApplication = true;
                    cs.flow = ""application"";
                } else if (flows.getAuthorizationCode() != null) {
                    setOauth2Info(cs, flows.getAuthorizationCode());
                    cs.isCode = true;
                    cs.flow = ""accessCode"";
                } else {
                    throw new RuntimeException(""Could not identify any oauth2 flow in "" + cs.name);
                }
            }

            codegenSecurities.add(cs);
        }

        // sort auth methods to maintain the same order
        Collections.sort(codegenSecurities, new Comparator<CodegenSecurity>() {
            @Override
            public int compare(CodegenSecurity one, CodegenSecurity another) {
                return ObjectUtils.compare(one.name, another.name);
            }
        });
        // set 'hasMore'
        Iterator<CodegenSecurity> it = codegenSecurities.iterator();
        while (it.hasNext()) {
            final CodegenSecurity security = it.next();
            security.hasMore = it.hasNext();
        }

        return codegenSecurities;
    }",Convert map of OAS SecurityScheme objects to a list of Codegen Security objects,1,888
4942,"static public IStructuredTextExpert getStatefulExpert(String type) {
		return getStatefulExpert(type, StructuredTextEnvironment.DEFAULT);
	}",Obtains a IStructuredTextExpert instance for processing structured text with the specified type handler.,1,32
4943,"public float get(WithAttributes withAttributes) {
        return withAttributes.getAttributes().get(this);
    }",Extracts the attribute map from the specified  WithAttributes and returns the value of this attribute from the map.,1,31
4944,"public static BinaryResourceFile fromInputStream(InputStream is) throws IOException {
    byte[] buf = ByteStreams.toByteArray(is);
    return new BinaryResourceFile(buf);
  }","Given an input stream, reads the stream until the end and returns a  BinaryResourceFile representing the contents of the stream.",1,50
4945,"Class[] getServiceClasses( final Class type, final List issues )
    {
        final ServiceDescriptorSet set =
            (ServiceDescriptorSet)type.getAnnotation( ServiceDescriptorSet.class );
        if( null != set )
        {
            final ServiceDescriptor[] descriptors = set.value();
            final Class[] services = new Class[descriptors.length];
            for( int i = 0; i < descriptors.length; i++ )
            {
                ServiceDescriptor descriptor = descriptors[i];
                services[i] = descriptor.type();
            }
            return services;
        }
        else
        {
            return new Class[0];
        }
    }",Retrieve an array of Classes for all the value that a Component offers.,1,199
4946,"public Dictionary getProperties() {
        return m_properties;
    }",Returns the properties.,1,19
4947,"public String getAuthoringPath() {
        return this.authoringPath;
    }",Returns the authoring path,1,21
4948,"public static Platform extractFromSysProperty(String osName, String osVersion) {
    osName = osName.toLowerCase();
    // os.name for android is linux
    if (""dalvik"".equalsIgnoreCase(System.getProperty(""java.vm.name""))) {
      return Platform.ANDROID;
    }
    // Windows 8 can't be detected by osName alone
    if (osVersion.equals(""6.2"") && osName.startsWith(""windows nt"")) {
        return WIN8;
    }
    Platform mostLikely = UNIX;
    String previousMatch = null;
    for (Platform os : Platform.values()) {
      for (String matcher : os.partOfOsName) {
        if ("""".equals(matcher)) {
          continue;
        }
        matcher = matcher.toLowerCase();
        if (os.isExactMatch(osName, matcher)) {
          return os;
        }
        if (os.isCurrentPlatform(osName, matcher) && isBetterMatch(previousMatch, matcher)) {
          previousMatch = matcher;
          mostLikely = os;
        }
      }
    }

    // Default to assuming we're on a UNIX variant (including LINUX)
    return mostLikely;
  }",Extracts platforms based on system properties in Java and uses a heuristic to determine the most likely operating system.,1,291
4949,"private String buildAddVideoSdpProposal() {
		if (logger.isActivated()) {
			logger.debug(""Build SDP proposal to add video stream in the session"");
		}

		try {
			// Build SDP part
			String ntpTime = SipUtils.constructNTPtime(System.currentTimeMillis());
			String ipAddress = getDialogPath().getSipStack().getLocalIpAddress();
		
			getAudioPlayer().getLocalRtpPort();
			String audioSdp = AudioSdpBuilder.buildSdpOffer(getAudioPlayer().getSupportedAudioCodecs(), getAudioPlayer().getLocalRtpPort());
			
			String videoSdp;
			videoSdp = VideoSdpBuilder.buildSdpOfferWithOrientation(
					getVideoPlayer().getSupportedVideoCodecs(),
					getVideoPlayer().getLocalRtpPort());
			
			return ""v=0"" + SipUtils.CRLF +
					""o=- "" + ntpTime + "" "" + ntpTime + "" "" + SdpUtils.formatAddressType(ipAddress) + SipUtils.CRLF +
					""s=-"" + SipUtils.CRLF +
					""c="" + SdpUtils.formatAddressType(ipAddress) + SipUtils.CRLF +
					""t=0 0"" + SipUtils.CRLF + audioSdp +
					""a=sendrcv""	+ SipUtils.CRLF + videoSdp +
					""a=sendrcv""	+ SipUtils.CRLF;
		} catch (RemoteException e) {
			if (logger.isActivated()) {
				logger.error(""Add video has failed"", e);
			}

			// Unexpected error
			handleError(new IPCallError(IPCallError.UNEXPECTED_EXCEPTION, e.getMessage()));
			return null;
		}
	}",Build SDP proposal to add video stream in the session,1,386
4950,"public int copyMatchingMessagesTo(ConnectionContext context, String selector, ActiveMQDestination dest)
            throws Exception {
        return copyMatchingMessagesTo(context, selector, dest, -1);
    }",Copies the messages matching the given selector,1,50
4951,"protected static Serializable deserializeTime(ByteArrayInputStream inputStream) throws IOException {
        // Times are stored as an integer as `HHMMSS`, so we need to split out the digits ...
        int value = inputStream.readInteger(3);
        int[] split = split(value, 100, 3);
        int hours = split[2];
        int minutes = split[1];
        int seconds = split[0];
        return Duration.ofHours(hours).plusMinutes(minutes).plusSeconds(seconds);
    }",Converts a MySQL  TIME value without fractional seconds to a  java.time.Duration.,1,121
4952,"private BigDecimal getCurrentCostPriceLL(MPPProductBOM bom, MCostElement element)
	{
		log.info(""ElementType: ""+ element.getCostElementType());
		BigDecimal costPriceLL = Env.ZERO;
		if(bom == null)
			return costPriceLL;

		for (MPPProductBOMLine bomline : bom.getLines())
		{
			MProduct component = MProduct.get(getCtx(), bomline.getM_Product_ID());			
			// get the rate for this resource     
			for (MCost cost : getCosts(component, element.getCostElementType()))
			{                 
					BigDecimal qtyPercentage = bomline.getQtyBatch().divide(Env.ONEHUNDRED, 8, BigDecimal.ROUND_UP);
					BigDecimal qtyBOM = bomline.getQtyBOM(); 
					BigDecimal scrapDec = bomline.getScrap().divide(Env.ONEHUNDRED, 4, BigDecimal.ROUND_UP);
					BigDecimal qtyTotal = Env.ZERO;
					if (bomline.isQtyPercentage())
					{
						qtyTotal =  qtyPercentage.divide(Env.ONE.subtract(scrapDec), 4, BigDecimal.ROUND_HALF_UP);
					}
					else
					{
						qtyTotal =  qtyBOM.divide(Env.ONE.subtract(scrapDec), 4, BigDecimal.ROUND_HALF_UP);
					}

					BigDecimal costPrice = cost.getCurrentCostPrice().add(cost.getCurrentCostPriceLL());
					costPriceLL = costPriceLL.add(costPrice.multiply(qtyTotal));
					log.info(""Cost Element:""+element.getName()
								+ "", Total Cost Element: "" +   costPriceLL
								+ "", QtyPercentage: "" + qtyPercentage
								+ "", QtyBOM: "" + qtyBOM);
			} // for each cost
		} // for each BOM line         
		return costPriceLL;     
	}",get the sum Current Cost Price Level Low for this Cost Element,1,421
4953,"public VisualItem findItem(Point p) {
        Point2D p2 = (m_itransform==null ? p : 
                        m_itransform.transform(p, m_tmpPoint));
		synchronized (m_registry) {
			Iterator items = m_registry.getItemsReversed();
			while (items.hasNext()) {
				VisualItem vi = (VisualItem) items.next();
				Renderer r = vi.getRenderer();
				if (r != null && r.locatePoint(p2, vi)) {
					return vi;
				}
			}
		}
		return null;
	} //",Returns the VisualItem located at the given point.,1,167
4954,"public static long nextPowerOfTwo(long value) {
        if (!isPowerOfTwo(value)) {
            value--;
            value |= value >> 1;
            value |= value >> 2;
            value |= value >> 4;
            value |= value >> 8;
            value |= value >> 16;
            value |= value >> 32;
            value++;
        }
        return value;
    }",Returns the next power of two that is larger than the specified long value.,1,136
4955,"public org.apache.poi.ss.usermodel.Workbook transformXLS(InputStream is, Map beanParams) throws ParsePropertyException, InvalidFormatException {
        org.apache.poi.ss.usermodel.Workbook hssfWorkbook = null;
        try {
            hssfWorkbook = WorkbookFactory.create(is);
            transformWorkbook(hssfWorkbook, beanParams);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return hssfWorkbook;
    }",Creates Workbook instance based on .xls template from a given InputStream and a number of beans,1,116
4956,"public short get(WithAttributes withAttributes) {
        return withAttributes.getAttributes().get(this);
    }",Extracts the attribute map from the specified  WithAttributes and returns the value of this attribute from the map.,1,31
4957,"public boolean isConnected(Integer channelId) {
		synchronized (wsProxies) {
			if (wsProxies.containsKey(channelId)) {
				return wsProxies.get(channelId).isConnected();
			}
		}
		return false;
	}",Returns true if given channel id is connected.,1,66
4958,"private String prepareQueryString(String groupPath, String jobName, Properties options) {
        List<NameValuePair> parameters = new ArrayList<NameValuePair>();

        parameters.add(new BasicNameValuePair(""groupPath"", groupPath));
        parameters.add(new BasicNameValuePair(""jobName"", jobName));

        if (options != null) {
            for (Entry<Object, Object> option : options.entrySet()) {
                parameters.add(new BasicNameValuePair(""extra.command.option."" + option.getKey(),
                                                      String.valueOf(option.getValue())));
            }
        }

        return URLEncodedUtils.format(parameters, HTTP.UTF_8);
    }",prepares an url-encoded HTTP queryString containing the group/job and the options.,1,185
4959,"public Type getPhysical() {
        return physical;
    }",Returns the physical type used by the runtime.,1,19
4960,"public Insets getBorderInsets(Component c)       { 
        return new Insets(0, 0, 0, 0);
    }","This default implementation returns a new Insets instance where the top, left, bottom, and right fields are set to 0.",1,37
4961,"public static boolean isVisibleInExplain(RelNode rel,
      SqlExplainLevel explainLevel) {
    final BuiltInMetadata.ExplainVisibility metadata =
        rel.metadata(BuiltInMetadata.ExplainVisibility.class);
    Boolean b = metadata.isVisibleInExplain(explainLevel);
    return b == null || b;
  }",Returns the  BuiltInMetadata.ExplainVisibility#isVisibleInExplain(SqlExplainLevel) statistic.,1,79
4962,"boolean findCellForSpan(int[] cellXY, int spanX, int spanY) {
            // return the span represented by the CellInfo only there is no view there
            //   (this.cell == null) and there is enough space

            if (this.cell == null && this.spanX >= spanX && this.spanY >= spanY) {
                if (cellXY != null) {
                    cellXY[0] = cellX;
                    cellXY[1] = cellY;
                }
                return true;
            }

            int startX = 0;
            if (intersectX >= 0) {
                startX = Math.max(startX, intersectX - (spanX - 1));
            }
            int endX = mCountX - (spanX - 1);
            if (intersectX >= 0) {
                endX = Math.min(endX, intersectX + (spanX - 1));
            }
            int startY = 0;
            if (intersectY >= 0) {
                startY = Math.max(startY, intersectY - (spanY - 1));
            }
            int endY = mCountY - (spanY - 1);
            if (intersectY >= 0) {
                endY = Math.min(endY, intersectY + (spanY - 1));
            }

            for (int x = startX; x < endX + 1; x++) {
                inner:
                for (int y = startY; y < endY; y++) {
                    for (int i = 0; i < spanX; i++) {
                        for (int j = 0; j < spanY; j++) {
                            if (mOccupied[x + i][y + j]) {
                                // small optimization: we can skip to below the row we just found
                                // an occupied cell
                                y += j;
                                continue inner;
                            }
                        }
                    }
                    if (cellXY != null) {
                        cellXY[0] = x;
                        cellXY[1] = y;
                    }
                    return true;
                }
            }
            return false;
        }",Finds the upper-left coordinate of the first rectangle in the grid that can hold a cell of the specified dimensions.,1,581
4963,"public final File getGeneratedOutput()
        throws CurnException
    {
        return hasGeneratedOutput() ? outputFile : null;
    }","Get the File that represents the output produced by the handler, if applicable.",1,37
4964,"private int updateRedundancy() {
    int desiredRedundancy = this.pRegion.getRedundantCopies();
    int numBucketHosts = getNumInitializedBuckets();
    if (isClosed()) {
      return numBucketHosts;
    }
    int actualRedundancy = numBucketHosts - 1;
    this.redundancy = actualRedundancy;
    if (this.redundancySatisfied && numBucketHosts > 0 && actualRedundancy < desiredRedundancy) {
      incLowRedundancyBucketCount(1);
      this.redundancySatisfied = false;
    } else if (!this.redundancySatisfied && numBucketHosts > 0
        && actualRedundancy >= desiredRedundancy) {
      incLowRedundancyBucketCount(-1);
      this.redundancySatisfied = true;
      this.redundancyEverSatisfied = true;
    }
    return numBucketHosts;
  }",Determine if there has been a change in redundancy and alter the lowRedundancyBucketCount stat as needed.,1,204
4965,"public String[] getTaskIds() {
        return (String[]) this.tasks.keySet().toArray(new String[this.tasks.size()]);
    }",Return all task ids,1,49
4966,"public static AnnotationMirror getAnnotationMirror(Element element, String fqcn) {
		assert element != null;
		assert fqcn != null;

		AnnotationMirror mirror = null;
		for ( AnnotationMirror am : element.getAnnotationMirrors() ) {
			if ( isAnnotationMirrorOfType( am, fqcn ) ) {
				mirror = am;
				break;
			}
		}
		return mirror;
	}",Checks whether the  Element hosts the annotation with the given fully qualified class name.,1,120
4967,"public User getOwner() {
        return owner;
    }",Gets the  User that owns the page,1,19
4968,"protected ArrayList evalXQExpression(XMLDataValue xmlContext,
        boolean returnResults, int [] resultXType) throws Exception
    {
        // Make sure we have a compiled query.
        if (SanityManager.DEBUG) {
            SanityManager.ASSERT(
                (query != null) && (query.getExpression() != null),
                ""Failed to locate compiled XML query expression."");
        }

        /* Create a DOM node from the xmlContext, since that's how
         * we feed the context to Xalan.  We do this by creating
         * a Document node using DocumentBuilder, which means that
         * the serialized form of the context node must be a string
         * value that is parse-able by DocumentBuilder--i.e. it must
         * constitute a valid XML document.  If that's true then
         * the context item's qualified type will be DOC_ANY.
         */
        if (xmlContext.getXType() != XML.XML_DOC_ANY)
        {
            throw StandardException.newException(
                SQLState.LANG_INVALID_XML_CONTEXT_ITEM,
                (returnResults ? ""XMLQUERY"" : ""XMLEXISTS""));
        } 

        Document docNode = null;
        docNode = dBuilder.parse(
            new InputSource(
                new StringReader(xmlContext.getString())));

        // Evaluate the expresion using Xalan.
        getXPathContext();
        xpContext.reset();
        XObject xOb = query.execute(xpContext, docNode, null);

        if (!returnResults)
        {
            // We don't want to return the actual results, we just
            // want to know if there was at least one item in the
            // result sequence.
            if ((xOb instanceof XNodeSet) &&
                (((XNodeSet)xOb).nodelist().getLength() > 0))
            { // If we have a sequence (XNodeSet) of length greater
              // than zero, then we know that at least one item
              // ""exists"" in the result so return a non-null list.
                return new ArrayList(0);
            }
            else if (!(xOb instanceof XNodeSet))
            // we have a single atomic value, which means the result is
            // non-empty.  So return a non-null list.
                return new ArrayList(0);
            else {
            // return null; caller will take this to mean we have an
            // an empty sequence.
                return null;
            }
        }

        // Else process the results.
        NodeList nodeList = null;
        int numItems = 0;
        if (!(xOb instanceof XNodeSet))
        // then we only have a single (probably atomic) item.
            numItems = 1;
        else {
            nodeList = xOb.nodelist();
            numItems = nodeList.getLength();
        }

        // Return a list of the items contained in the query results.
        ArrayList itemRefs = new ArrayList();
        if (nodeList == null)
        // result is a single, non-node value (ex. it's an atomic number);
        // in this case, just take the string value.
            itemRefs.add(xOb.str());
        else {
            for (int i = 0; i < numItems; i++)
                itemRefs.add(nodeList.item(i));
        }

        nodeList = null;

        // Indicate what kind of XML result value we have.  If
        // we have a sequence of exactly one Element or Document
        // then it is XMLPARSE-able and so we consider it to be
        // of type XML_DOC_ANY (which means we can store it in
        // a Derby XML column).
        if ((numItems == 1) && ((itemRefs.get(0) instanceof Document)
            || (itemRefs.get(0) instanceof Element)))
        {
            resultXType[0] = XML.XML_DOC_ANY;
        }
        else
            resultXType[0] = XML.XML_SEQUENCE;

        return itemRefs;
    }",Evaluate this object's compiled XML query expression against the received xmlContext.,1,668
4969,"public static SlantType getSlant(World world, Vector3 position)
	{
		TileEntity t = position.getTileEntity(world);

		if (t != null)
		{
			if (t instanceof TileEntityConveyorBelt)
			{
				TileEntityConveyorBelt tileEntity = (TileEntityConveyorBelt) t;
				Vector3 frontCheck = position.clone();
				frontCheck.modifyPositionFromSide(tileEntity.getDirection());
				Vector3 backCheck = position.clone();
				backCheck.modifyPositionFromSide(tileEntity.getDirection().getOpposite());

				if (Vector3.add(frontCheck, new Vector3(0, 1, 0)).getBlockID(world) == AssemblyLine.blockConveyorBelt.blockID && Vector3.add(backCheck, new Vector3(0, -1, 0)).getBlockID(world) == AssemblyLine.blockConveyorBelt.blockID)
				{
					return SlantType.UP;
				}
				else if (Vector3.add(frontCheck, new Vector3(0, -1, 0)).getBlockID(world) == AssemblyLine.blockConveyorBelt.blockID && Vector3.add(backCheck, new Vector3(0, 1, 0)).getBlockID(world) == AssemblyLine.blockConveyorBelt.blockID) { return SlantType.DOWN; }
			}
		}

		return null;
	}",Checks the front and the back position to find any conveyor blocks either higher or lower than this block to determine if it this conveyor block needs to slant.,1,340
4970,"public final ProviderDescriptor getDescriptor() {
        return mDescriptor;
    }",Gets the provider's descriptor.,1,21
4971,"public Float getRightValue() {
            return rightValue;
        }",Gets the 'right' attributes value in current units.,1,19
4972,"public List<Media> getMedia() {
        return this.media;
    }",Media items,1,24
4973,"public List<TestSuite> getSuite()
	{
		return this.testSuites;
	}",Retrieves a linked list with parsed Test Suites.,1,25
4974,"private boolean isShareable() {
        return getRequestScope().getDictionary().isShareable(obj.getClass());
    }",Checks if this persistent resource's underlying entity is shareable.,1,34
4975,"public int compareTo(IndexedWord w) {
    if (this.equals(IndexedWord.NO_WORD)) {
      if (w.equals(IndexedWord.NO_WORD)) {
        return 0;
      } else {
        return -1;
      }
    }
    if (w.equals(IndexedWord.NO_WORD)) {
      return 1;
    }

    // Override the default comparator if pseudo-positions are set.
    // This is needed for splicing trees together awkwardly in OpenIE.
    if (!Double.isNaN(w.pseudoPosition) || !Double.isNaN(this.pseudoPosition)) {
      double val = this.pseudoPosition() - w.pseudoPosition();
      if (val < 0) { return -1; }
      if (val > 0) { return 1; }
      else { return 0; }
    }

    // Otherwise, compare using the normal doc/sentence/token index hierarchy
    String docID = this.getString(CoreAnnotations.DocIDAnnotation.class);
    int docComp = docID.compareTo(w.getString(CoreAnnotations.DocIDAnnotation.class));
    if (docComp != 0) return docComp;

    int sentComp = Integer.compare(sentIndex(), w.sentIndex());
    if (sentComp != 0) return sentComp;

    int indexComp = Integer.compare(index(), w.index());
    if (indexComp != 0) return indexComp;

    return Integer.compare(copyCount(), w.copyCount());
  }","NOTE: For this compareTo, you must have a DocIDAnnotation,",1,383
4976,"static public ContentionManager getContentionManager() {
        return cm;
    }",Gets the contention manager,1,21
4977,"public boolean isEmergencyAlertMessage() {
        return mSmsCbMessage.isEmergencyMessage();
    }","Returns whether the broadcast is an emergency (PWS) message type, including test messages and AMBER alerts.",1,23
4978,"protected int getNewForOldInput(int oldOrdinal) {
    return getNewFieldForOldInput(oldOrdinal).i;
  }",Maps the ordinal of a field pre-flattening to the ordinal of the corresponding field post-flattening.,1,27
4979,"public static IPath toPath(URI uri) {
		Assert.isNotNull(uri);
		if (EFS.SCHEME_FILE.equals(uri.getScheme()))
			return new Path(uri.getSchemeSpecificPart());
		return null;
	}","Returns an  IPath representing this  URI in the local file system, or null if this URI does not represent a file in the local file system.",1,66
4980,"public Collection<OsmPrimitive> getSelected() {
        return Collections.unmodifiableSet(selectedPrimitives);
    }",Replies an unmodifiable collection of primitives currently selected in this dataset,1,27
4981,"public String[] createText(MilStd2525TacticalGraphic graphic)
    {
        String[] result;

        String functionId = graphic.getFunctionId();
        if (CircularFireSupportArea.FUNCTION_ID_TARGET.equals(functionId))
        {
            result = new String[] { graphic.getText() };
        }
        else
        {
            boolean useSeparateTimeLabel = this.isShowSeparateTimeLabel(functionId);
            String mainText = this.createMainText(graphic, functionId, !useSeparateTimeLabel);

            if (useSeparateTimeLabel)
            {
                String timeText = this.createTimeRangeText(graphic);
                result = new String[] { mainText, timeText };
            }
            else
            {
                result = new String[] { mainText };
            }
        }
        return result;
    }",Construct the text for labels in a Fire Support area graphic.,1,213
4982,"public Constructor[] getDeclaredConstructors() throws SecurityException {
        // BEGIN android-note
        // trying to get closer to the RI which returns a raw constructor array.
        // copied from newer version of harmony
        // END android-note
        checkDeclaredMemberAccess();
        return getDeclaredConstructors(this, false);
    }",Returns an array containing  Constructor objects for all constructors declared in the class represented by this  Class.,1,49
4983,"public int compareTo(ByteArrayWritable that) {
        return WritableComparator.compareBytes(this.data, this.offset, this.length, that.data, that.offset,
                that.length);
    }",Define the sort order of the BytesWritable.,1,55
4984,"public static boolean shouldDisplay(Context context) {
        WelcomeActivityContent fragment = getCurrentFragment(context);
        return fragment != null;
    }",Tracks whether to display this activity.,1,42
4985,"public Hashtable getBuiltInTypes() {
        Hashtable toReturn = (Hashtable)fBuiltInTypes.clone();
        Enumeration xml11Keys = fXML11BuiltInTypes.keys();
        while (xml11Keys.hasMoreElements()) {
            Object key = xml11Keys.nextElement();
            toReturn.put(key, fXML11BuiltInTypes.get(key));
        }
        return toReturn;
    }","get all built-in DVs, which are stored in a hashtable keyed by the name",1,97
4986,"public final int getEndLine() {
        return this.bufline[this.bufpos];
    }",Get the line number,1,28
4987,"public NonLiteral convertNonLiteral(Node node) {
        if (node == null) {
            throw new IllegalArgumentException(""null argument not allowed"");
        }
        if (node.isBlank()) {
            return convertJenaNode2TriaBlankNode(node);
        }
        if (node.isURI()) {
            return convertJenaUri2UriRef(node);
        }
        throw new RuntimeException(""cannot convert "" + node + "" to NonLiteral"");
    }",Converts a node to a BNode if it is a Blank Node otherwise to a UriRef.,1,119
4988,"public boolean isConnected() {
        final Health request = new Health.Builder()
                .local()
                .timeout(Ints.saturatedCast(requestTimeout.toSeconds()))
                .build();

        final JestResult result = JestUtils.execute(jestClient, request, () -> ""Couldn't check connection status of Elasticsearch"");
        final int numberOfDataNodes = Optional.of(result.getJsonObject())
            .map(json -> asInteger(json.get(""number_of_data_nodes"")))
            .orElse(0);
        return numberOfDataNodes > 0;
    }",Check if Elasticsearch is available and that there are data nodes in the cluster.,1,151
4989,"public CharSequence getQueryHint() {
        final CharSequence hint;
        if (mQueryHint != null) {
            hint = mQueryHint;
        } else if (IS_AT_LEAST_FROYO && mSearchable != null && mSearchable.getHintId() != 0) {
            hint = getContext().getText(mSearchable.getHintId());
        } else {
            hint = mDefaultQueryHint;
        }
        return hint;
    }",Returns the hint text that will be displayed in the query text field.,1,123
4990,"@NonNull
    protected List<Action> retrieveActions(@NonNull SCMSourceEvent event,
                                           @NonNull TaskListener listener)
            throws IOException, InterruptedException {
        return Collections.emptyList();
    }","SPI for  #fetchActions(SCMSourceEvent,TaskListener).",1,50
4991,"public static final TwitterTokenStream of(TwitterTokenStream... streams) {
    return new TokenStreamAggregator(streams);
  }",Creates a  TwitterTokenStream that aggregates the outputs of a given set of  TokenStreams.,1,34
4992,"public final Map<String, String> validateSubDocuments() {
        final OOXML ooxml = this.getFormatVersion().getXML();
        if (!ooxml.canValidate())
            return null;
        final Map<String, String> res = new HashMap<String, String>();
        for (final String s : subdocNames) {
            if (this.getEntries().contains(s)) {
                final String valid = ooxml.getValidator(this.getDocument(s)).isValid();
                if (valid != null)
                    res.put(s, valid);
            }
        }
        return res;
    }",Call  Validator#isValid() on each XML subdocuments.,1,184
4993,"public static List<CmdLineOptionValidator.Result> validate(
         CmdLineArgs cmdLineArgs) {
      Validate.notNull(cmdLineArgs);

      List<CmdLineOptionValidator.Result> results = Lists.newArrayList();
      for (CmdLineOptionInstance optionInst : cmdLineArgs
            .getSpecifiedOptions()) {
         results.addAll(CmdLineUtils.validate(optionInst));
      }
      return results;
   }",Runs validation on  CmdLineArgs and returns the validation results.,1,98
4994,"@Override
  public boolean equals(Object other) {
    if (this == other) {
      return true;
    }

    if (other instanceof PwPair) {
      PwPair otherPwPair = (PwPair) other;
      return getRank() == otherPwPair.getRank() &&
          mUrlDevice.equals(otherPwPair.mUrlDevice) &&
          mPwsResult.equals(otherPwPair.mPwsResult);
    }
    return false;
  }",Check if two PwPairs are equal.,1,122
4995,"public static String asString(final InputStream is, Charset charset) throws IOException {
        final BufferedReader reader = new BufferedReader(new InputStreamReader(is, charset));
        try {
            final String firstLine = reader.readLine();
            if (firstLine == null) {
                return """";
            }
            final StringBuilder builder = new StringBuilder(firstLine);
            for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                builder.append(EOL);
                builder.append(line);
            }
            return builder.toString();
        } finally {
            reader.close();
        }
    }",Reads the provided input stream as a string and then closes the stream.,1,203
4996,"public static GraphQLSchema transformSchema(GraphQLSchema schema, GraphQLTypeVisitor visitor) {
        return transformSchema(schema, TraversalType.ALL, visitor);
    }",Transforms a GraphQLSchema and returns a new GraphQLSchema object.,1,40
4997,"private StreamEvent findIfActualMin(AttributeDetails latestEvent) {
        int indexCurrentMin = valueStack.indexOf(currentMin);
        int postBound = valueStack.indexOf(latestEvent) - indexCurrentMin;
        // If latest event is at a distance greater than maxPostBound from min, min is not eligible to be sent as output
        if (postBound > maxPostBound) {
            currentMin.notEligibleForRealMin();
            return null;
        }
        // If maxPreBound is 0, no need to check preBoundChange. Send output with postBound value
        if (maxPreBound == 0) {
            StreamEvent outputEvent = eventStack.get(indexCurrentMin);
            complexEventPopulater.populateComplexEvent(outputEvent, new Object[] { ""min"", 0, postBound });
            currentMin.sentOutputAsRealMin();
            return outputEvent;
        }
        int preBound = 1;
        double dThreshold = currentMin.getValue() + currentMin.getValue() * preBoundChange / 100;
        while (preBound <= maxPreBound && indexCurrentMin - preBound >= 0) {
            if (valueStack.get(indexCurrentMin - preBound).getValue() >= dThreshold) {
                StreamEvent outputEvent = eventStack.get(indexCurrentMin);
                complexEventPopulater.populateComplexEvent(outputEvent, new Object[] { ""min"", preBound, postBound });
                currentMin.sentOutputAsRealMin();
                return outputEvent;
            }
            ++preBound;
        }
        // Completed iterating through maxPreBound older events. No events which satisfy preBoundChange condition found.
        // Therefore min is not eligible to be sent as output.
        currentMin.notEligibleForRealMin();
        return null;
    }","Method to find whether a value preBoundChange% greater than or equal to min exists within maxPreBound length window, by looping through older events.",1,348
4998,"public static ENumber<Integer> indexOf(Expr<String> left, String right) {
        return operationFactory.createNumber(Integer.class, Ops.INDEXOF, left,
                exprFactory.createConstant(right));
    }",Expr : left.indexOf(right),1,59
4999,"public static Result createGemFireErrorResult(String message) {
    return createErrorResult(ERRORCODE_GEODE_ERROR,
        ""Could not process command due to error. "" + message);
  }",Method for convenience to create error result for error in Geode while executing command.,1,37
5000,"public SortedMap<String, String> getOriginTabContentsAsStrings(final Origin selectedColumn) {
        openTab(Tab.ORIGIN);
        return mapTableCellsKeyValue(String.class, getVisibleTableRows(true, false),
                selectedColumn.column);
    }","Returns the first and the specified columns of the ""Origin""-tab as key => value pairs, skipping the header row.",1,59
5001,"public String getPublicationPath() {
        return this.publicationPath;
    }",Returns the publication path.,1,21
5002,"protected AuthenticationInfo doMultiRealmAuthentication(Collection<? extends Realm> realms, AuthenticationToken token) {

        ModularAuthenticationStrategy strategy = getModularAuthenticationStrategy();

        AuthenticationInfo aggregate = strategy.beforeAllAttempts(realms, token);

        if (log.isDebugEnabled()) {
            log.debug(""Iterating through ["" + realms.size() + ""] realms for PAM authentication"");
        }

        for (Realm realm : realms) {

            if (realm.supports(token)) {

                if (log.isDebugEnabled()) {
                    log.debug(""Attempting to authenticate token ["" + token + ""] "" +
                            ""using realm of type ["" + realm + ""]"");
                }

                AuthenticationInfo info = null;
                Throwable t = null;
                try {
                    info = realm.getAuthenticationInfo(token);
                } catch (Throwable throwable) {
                    t = throwable;
                    if (log.isTraceEnabled()) {
                        String msg = ""Realm ["" + realm + ""] threw an exception during a multi-realm authentication attempt:"";
                        log.trace(msg, t);
                    }
                }

                aggregate = strategy.afterAttempt(realm, token, info, aggregate, t);

            } else {
                if (log.isDebugEnabled()) {
                    log.debug(""Realm of type ["" + realm + ""] does not support token "" +
                            ""["" + token + ""].  Skipping realm."");
                }
            }
        }

        aggregate = strategy.afterAllAttempts(token, aggregate);

        return aggregate;
    }",Performs the multi-realm authentication attempt by calling back to a  ModularAuthenticationStrategy object as each realm is consulted for AuthenticationInfo for the specified token.,1,419
5003,"public ImmutableBitSet getGroupSet() {
    return groupSet;
  }",Returns a bit set of the grouping fields.,1,19
5004,"public double get(WithAttributes withAttributes) {
        return withAttributes.getAttributes().get(this);
    }",Extracts the attribute map from the specified  WithAttributes and returns the value of this attribute from the map.,1,31
5005,"static HintStrategyTable createHintStrategies(HintStrategyTable.Builder builder) {
      return builder
        .addHintStrategy(""no_hash_join"", HintStrategies.JOIN)
        .addHintStrategy(""time_zone"", HintStrategies.SET_VAR)
        .addHintStrategy(""REPARTITION"", HintStrategies.SET_VAR)
        .addHintStrategy(""index"", HintStrategies.TABLE_SCAN)
        .addHintStrategy(""properties"", HintStrategies.TABLE_SCAN)
        .addHintStrategy(
            ""resource"", HintStrategies.or(
            HintStrategies.PROJECT, HintStrategies.AGGREGATE, HintStrategies.CALC))
        .addHintStrategy(""AGG_STRATEGY"",
            HintStrategies.AGGREGATE,
            (hint, errorHandler) -> errorHandler.check(
                hint.listOptions.size() == 1
                    && (hint.listOptions.get(0).equalsIgnoreCase(""ONE_PHASE"")
                        || hint.listOptions.get(0).equalsIgnoreCase(""TWO_PHASE"")),
                ""Hint {} only allows single option, ""
                    + ""allowed options: [ONE_PHASE, TWO_PHASE]"",
                hint.hintName
            ))
        .addHintStrategy(""use_hash_join"",
          HintStrategies.and(HintStrategies.JOIN,
            HintStrategies.explicit((hint, rel) -> {
              if (!(rel instanceof LogicalJoin)) {
                return false;
              }
              LogicalJoin join = (LogicalJoin) rel;
              final List<String> tableNames = hint.listOptions;
              final List<String> inputTables = join.getInputs().stream()
                  .filter(input -> input instanceof TableScan)
                  .map(scan -> Util.last(scan.getTable().getQualifiedName()))
                  .collect(Collectors.toList());
              return equalsStringList(tableNames, inputTables);
            })))
        .build();
    }",Creates mock hint strategies with given builder.,1,428
5006,"public ScalewayCloud getCloud() {
        Jenkins instance = Jenkins.getInstance();
        if (instance != null) {
            return (ScalewayCloud) instance.getCloud(cloudName);
        }
        return null;
    }",Retrieve a handle to the associated  com.github.segator.jenkins.scaleway.ScalewayCloud,1,65
5007,"@Override
	public boolean equals(Object obj) {
		if (obj != null && obj.getClass().equals(this.getClass())) {
			NoteObject that = (NoteObject) obj;
			
			if (content == null && that.getContent() != null) return false;
			if (content != null && !content.equals(that.getContent())) return false;
		}
		return true;
	}",Tests if two notes are equal.,1,139
5008,"public boolean hasPath(final String path, final boolean consistent) {
    return hasPath(path, consistent, null);
  }","Returns true if path exists, false otherwise.",1,40
5009,"public BuildResult getPreviousResult() {
        ResultAction<? extends BuildResult> action = getPreviousAction();
        if (action != null) {
            return action.getResult();
        }
        throw new NoSuchElementException(""No previous result available"");
    }",Returns the previous build result.,1,72
5010,"public EReference getTopic_Comments() {
		return (EReference) topicEClass.getEStructuralFeatures().get(1);
	}",Returns the meta object for the containment reference list '  org.eclipse.mylyn.reviews.core.model.ITopic#getComments Comments'.,1,32
5011,"public static boolean isGZipFile(String file) {
    	String ext = getExtension(file);
        return ""gz"".equals(ext) || ""z"".equals(ext);
    }","Indicates if the given file ends with a file extension of "".gz"" or "".Z"", indicating a GZip file.",1,56
5012,"private boolean isSameText() {
		ArrayList<TextView> textViewList = soloView.getCurrentTextViews(null);
		int size = textViewList.size();
		int constant = 0;
		if (size > 2)
			constant = 2;
		else
			constant = size;
		
		if (checkTextView != null
				&& !checkTextView.getText().equals(
						textViewList.get(size - constant).getText())) {
			checkTextView = textViewList.get(size - constant);
			return false;
		} else if (checkTextView == null) {
			checkTextView = textViewList.get(size - constant);
			return false;
		}
		else
			return true;
	}",Determines if a previous text is the same as the current.,1,208
5013,"public static CollectionId parse(String replicaSetName, String str) {
        final int dotPosition = str.indexOf('.');
        if (dotPosition == -1 || (dotPosition + 1) == str.length() || dotPosition == 0) {
            return null;
        }
        return new CollectionId(replicaSetName, str.substring(0, dotPosition), str.substring(dotPosition + 1));
    }",Parse the supplied  . string.,1,128
5014,"public WebSocket doWebSocketConnect(final HttpServletRequest request, final String protocol) {
        logger.info(""WebSocket upgrade requested"");

        return new JettyWebSocketListener(request,this);
    }",Jetty 7.2 & 8.0.0-M1/M2and up WebSocket support.,1,50
5015,"static public IStructuredTextExpert getExpert(String type, StructuredTextEnvironment environment) {
		IStructuredTextExpert expert;
		if (environment == null)
			environment = StructuredTextEnvironment.DEFAULT;
		synchronized (sharedExperts) {
			Map experts = (Map) sharedExperts.get(type);
			if (experts == null) {
				experts = new HashMap(); // environment -> expert
				sharedExperts.put(type, experts);
			}
			expert = (IStructuredTextExpert) experts.get(environment);
			if (expert == null) {
				StructuredTextTypeHandler handler = StructuredTextTypeHandlerFactory.getHandler(type);
				if (handler == null)
					throw new IllegalArgumentException(""Invalid type argument""); //$NON-NLS-1$
				expert = new StructuredTextImpl(handler, environment, false);
				experts.put(type, expert);
			}
		}
		return expert;
	}",Obtains a IStructuredTextExpert instance for processing structured text with the specified type handler and the specified environment.,1,238
5016,"private static CoreMap fromProto(CoreNLPProtos.Sentence proto) {
    CoreMap sentence = new ArrayCoreMap();
    // Required fields
    sentence.set(TokenBeginAnnotation.class, proto.getTokenOffsetBegin());
    sentence.set(TokenEndAnnotation.class, proto.getTokenOffsetEnd());
    // Optional fields
    if (proto.hasSentenceIndex()) { sentence.set(SentenceIndexAnnotation.class, proto.getSentenceIndex()); }
    if (proto.hasCharacterOffsetBegin()) { sentence.set(CharacterOffsetBeginAnnotation.class, proto.getCharacterOffsetBegin()); }
    if (proto.hasCharacterOffsetEnd()) { sentence.set(CharacterOffsetEndAnnotation.class, proto.getCharacterOffsetEnd()); }
    if (proto.hasParseTree()) { sentence.set(TreeAnnotation.class, fromProto(proto.getParseTree())); }
    // Non-default fields
    if (proto.hasHasRelationAnnotations() && proto.getHasRelationAnnotations()) {
      // set entities
      List<EntityMention> entities = new ArrayList<EntityMention>();
      for (CoreNLPProtos.Entity entity : proto.getEntityList()) { entities.add(fromProto(entity, sentence)); }
      sentence.set(EntityMentionsAnnotation.class, entities);
      // set relations
      List<RelationMention> relations = new ArrayList<RelationMention>();
      for (CoreNLPProtos.Relation relation : proto.getRelationList()) { relations.add(fromProto(relation, sentence)); }
      sentence.set(RelationMentionsAnnotation.class, relations);
    }
    // Return
    return sentence;
  }",Create a CoreMap representing a sentence from this protocol buffer.,1,392
5017,"public static String addPropertiesToURI(URI uri, Map<String, String> properties) throws Exception {
        return addPropertiesToURI(uri.toString(), properties);
    }",Enumerate the properties of the target object and add them as additional entries to the query string of the given URI.,1,49
5018,"protected String getNewIdFor(EObject element_p) {
    return copyXmlIds()? null: EcoreUtil.generateUUID();
  }","Return a new unique intrinsic ID for the given element, if relevant.",1,34
5019,"public  SessionFactoryImpl getEntityManagerFactory() {
		return sessionFactory;
	}",Provides protected access to the underlying  SessionFactoryImpl.,1,19
5020,"private int waitForSocket(Launcher launcher, int port, int timeout) {
        try {
            LocalPortReceiveAdbPortTask task = new LocalPortReceiveAdbPortTask(port, timeout);
            return launcher.getChannel().call(task);
        } catch (InterruptedException ex) {
            // Ignore
        } catch (IOException e) {
            // Ignore
        }
        return -1;
    }","Waits for an emulator to say what socket its using, or times out.",1,106
5021,"public float getY() {
        if(top == null) {
            calculateTop();
        }

        return top.floatValue();
    }",Get the y position of the top of this shape.,1,46
5022,"public String toString() 
    {
        if ( connString == null )
        {
            String wrappedString;
            try
            {
                wrappedString = getRealConnection().toString();
            }
            catch ( SQLException e )
            {
                wrappedString = ""<none>"";
            }
            
            connString = this.getClass().getName() + ""@"" + this.hashCode() +
                "", Wrapped Connection = "" + wrappedString;
        }
        
        return connString;
    }",Get the string representation for this connection.,1,142
5023,"public boolean supports(AuthenticationToken token) {
        if ( log.isInfoEnabled() ) {
            log.info( ""Received null AuthenticationToken.  Returning false for supports(token) implementation (can't "" +
                ""process null tokens)."" );
        }
        return token != null && getAuthenticationTokenClass().isAssignableFrom(token.getClass());
    }",Convenience implementation that returns getAuthenticationTokenClass().isAssignableFrom( token.getClass() );.,1,81
5024,"protected MedicationMedicalRecordBodyType mapBody(final EHREXTRACT ehrExtract, final int compositionIndex) {
    
        final COMPOSITION composition = ehrExtract.getAllCompositions().get(compositionIndex);
        
        // parse this composition into values stored in a Map
        Map<String,String> ehr13606values = retrieveValues(composition, compositionIndex);
        
        // use the ehr values to build a medication medical history record body
        return buildBody(ehr13606values);
    }",Create a MedicationMedicalRecord using the information in the current ehr13606 composition.,1,88
5025,"public T caseCustomersType(CustomersType object)
  {
    return null;
  }",Returns the result of interpretting the object as an instance of 'Customers Type'.,1,23
5026,"public String toString() {
        long millis = getMillis();
        StringBuffer buf = new StringBuffer();
        buf.append(""PT"");
        FormatUtils.appendUnpaddedInteger(buf, millis / 1000);
        long part = Math.abs(millis % 1000);
        if (part > 0) {
            buf.append('.');
            FormatUtils.appendPaddedInteger(buf, part, 3);
        }
        buf.append('S');
        return buf.toString();
    }",Gets the value as a String in the ISO8601 duration format including only seconds and milliseconds.,1,144
5027,"private File getToolchainPath(Abi abi) {
        return getToolchainPath(toolchain, toolchainVersion, abi);
    }",Return the path containing the prebuilt toolchain.,1,31
5028,"public Set<ClassInfo> getInterfaces() {
        String[] names = classGen.getInterfaceNames();
        Set<ClassInfo> interfaces = new HashSet<ClassInfo>(names.length);
        for (String name : names) {
            ClassInfo cls = getAppInfo().getClassInfo(name);
            if (cls != null) {
                interfaces.add(cls);
            }
        }
        return interfaces;
    }",Get a set of all (loaded) interfaces this class directly implements.,1,122
5029,"public int getPosition() {
        return currentPosition;

    }","Returns the position where the handler is currently, or where it is heading right now.",1,20
5030,"public static ScannableTable generate(int width, int height, int seed) {
    return new MazeTable(width, height, seed, false);
  }",Table function that generates a maze.,1,48
5031,"private byte[] read(InputStream in, int length) throws IOException {
			byte[] buffer = new byte[length];
			
			int bytesRead = 0;
			do {
				bytesRead += in.read(buffer);
			} while (length != bytesRead);
			
			int freeSpace = currentFrame.capacity() - currentFrame.position();
			if (freeSpace < bytesRead) {
				currentFrame = reallocate(currentFrame, currentFrame.position() + bytesRead);
			}

			// add bytes to current frame and reset to be able to read again
			currentFrame.put(buffer);
			
			return buffer;
		}",Reads given length from the given stream.,1,173
5032,"public ArrayList filterContent(String key) {
			return this.of.filter(key);
		}",Updates the visible items by given key.,1,29
5033,"protected String readAnnouncement( File file )
        throws MojoExecutionException
    {
        InputStreamReader reader = null;
        FileInputStream inputStream = null;
        try
        {
            inputStream = new FileInputStream( file );

            if ( StringUtils.isEmpty( templateEncoding ) )
            {
                templateEncoding = ReaderFactory.FILE_ENCODING;
                getLog().warn( ""File encoding has not been set, using platform encoding '"" + templateEncoding
                                   + ""', i.e. build is platform dependent!"" );
            }

            reader = new InputStreamReader( inputStream, templateEncoding );
            return IOUtil.toString( reader );
        }
        catch ( FileNotFoundException fnfe )
        {
            throw new MojoExecutionException( ""File not found. "" + file );
        }
        catch ( UnsupportedEncodingException uee )
        {
            throw new MojoExecutionException( ""Unsupported encoding: '"" + templateEncoding + ""'"" );
        }
        catch ( IOException ioe )
        {
            throw new MojoExecutionException( ""Failed to read the announcement file."", ioe );
        }
        finally
        {
            IOUtil.close( inputStream );
            IOUtil.close( reader );
        }
    }",Read the content of the generated announcement file.,1,303
5034,"@NonNull
    protected List<Action> retrieveActions(@NonNull SCMRevision revision,
                                           @NonNull SCMHeadEvent event,
                                           @NonNull TaskListener listener)
            throws IOException, InterruptedException {
        return Collections.emptyList();
    }","SPI for  #fetchActions(SCMRevision, SCMHeadEvent, TaskListener).",1,58
5035,"protected String[] convert(Path<?> leftHandSide, Object rightHandSide) {
        String str = rightHandSide.toString();
        if (lowerCase){
            str = str.toLowerCase();
        }
        if (splitTerms) {            
            if (str.equals("""")) {
                return new String[] { str };
            } else {
                return StringUtils.split(str);
            }
        } else {
            return new String[] { str };
        }
    }",template method,1,151
5036,"public static GitlabRepositoryName create(final String url) {
        LOGGER.log(Level.FINE, ""Constructing from URL {0}"", url);
        for (Pattern p : URL_PATTERNS) {
            Matcher m = p.matcher(url.trim());
            if (m.matches()) {
                LOGGER.log(Level.FINE, ""URL matches {0}"", m);
                GitlabRepositoryName ret = new GitlabRepositoryName(m.group(1), m.group(2),
                        m.group(3));
                LOGGER.log(Level.FINE, ""Object is {0}"", ret);
                return ret;
            }
        }
        LOGGER.log(Level.WARNING, ""Could not match URL {0}"", url);
        return null;
    }",Create  GitlabRepositoryName from URL,1,198
5037,"public String toString() {
        return ""-P: "" + this.directory_prefix;
    }",Returns the directory prefix,1,27
5038,"public final FileChannel getChannel() {
        synchronized(this) {
            if(channel == null) {
                channel = FileChannelFactory.getFileChannel(this, fd.descriptor,
                        options);
            }
            return channel;
        }
    }",Gets this file's  FileChannel object.,1,70
5039,"public DocumentCollection getMetadataByName(String name, String[] docs)  
			throws RepositoryAccessException {
		
		String[] names = {name};
		return this.getDocCollection(names, docs);
		
		/*
		HashMap<String, String[]> vals = new HashMap<String, String[]>();
		
		HashSet<String> activeFields = new HashSet<String>();
		HashSet<String> lazyFields = new HashSet<String>();
		
		activeFields.add(LUCENE_DOCID_FIELD);
		lazyFields.add(name);
		
		SetBasedFieldSelector fsel = new SetBasedFieldSelector(activeFields, lazyFields);
		IndexReader lreader;
		
		try {
			lreader = this.getIndexReader();
			int last = lreader.maxDoc();
			Document d;
			String docID;
			for(int i = 0; i < last; ++i) {
				if(!lreader.isDeleted(i)) {
					d = lreader.document(i, fsel);
					docID = d.get(LUCENE_DOCID_FIELD);
					for(String did: docs)
						if(did.equals(docID)) vals.put(docID, d.getValues(name));
				}
				
			}
			lreader.close();
		} catch (java.io.IOException ioe) {
			throw new RepositoryAccessException(""IOException: "" + ioe.getMessage());
		}
		
		return vals;
		*/
	}",Returns a DocumentCollection of document IDs and metadata.,1,64
5040,"public List getImageSrcs(boolean duplicate) {
        if (duplicate) {
            return this.htmlHandler.getAllImageSrcs();
        }
        return this.htmlHandler.getImageSrcs();
    }",Get Image src attributes,1,52
5041,"@SuppressWarnings(""static-access"")
    public ObjectName getExchangeObjectName(String virtualHostName, String exchange)
    {
        // Get the name of the test manager
        AllObjects allObject = new AllObjects(_mbsc);
        allObject.querystring = ""org.apache.qpid:type=VirtualHost.Exchange,VirtualHost="" + virtualHostName + "",name="" + exchange + "",*"";

        Set<ObjectName> objectNames = allObject.returnObjects();

        _test.assertNotNull(""Null ObjectName Set returned"", objectNames);
        _test.assertEquals(""Incorrect number of exchange with name '"" + exchange + ""' returned"", 1, objectNames.size());

        // We have verified we have only one value in objectNames so return it
        ObjectName objectName = objectNames.iterator().next();
		_test.getLogger().info(""Loading: "" + objectName);
        return objectName;
    }",Retrive the ObjectName for the given Exchange on a VirtualHost.,1,191
5042,"public Object getPathComponent(int index) {
        int          pathLength = getPathCount();

        if(index < 0 || index >= pathLength)
            throw new IllegalArgumentException(""Index "" + index +
                                           "" is out of the specified range"");

        TreePath         path = this;

        for(int i = pathLength-1; i != index; i--) {
            path = path.getParentPath();
        }
        return path.getLastPathComponent();
    }",Returns the path element at the specified index.,1,139
5043,"public ProjectItem getChild(String text) {
		String[] childPath = new String[path.length + 1];
		System.arraycopy(path, 0, childPath, 0, path.length);
		childPath[childPath.length - 1] = text;
		return project.getProjectItem(childPath);
	}",Gets child of the project item.,1,90
5044,"protected EngineParameterMetaData getParameterMetaData() throws SQLException
	{
		if (stmtPmeta != null)
			return stmtPmeta;

		stmtPmeta = ((EnginePreparedStatement)ps).getEmbedParameterSetMetaData();
        
        return stmtPmeta;
	}",Retrieve the ParameterMetaData for the prepared statement.,1,62
5045,"public Object getProperty(String name) {
        if (name == null || !isPropertySupported(name))
            throw new IllegalArgumentException();
        return callProperties.get(name);
    } // getProperty",Returns the value associated with the named property,1,60
5046,"public boolean peek() {
    if (outputQueue.isEmpty()) {
      return false;
    } else {
      final int nextId = outputQueue.peek().id;
      return orderResults ? nextId == lastReturnedId + 1 : true;
    }
  }",Indicates whether a not a new result is available.,1,83
5047,"public ParameterList getBodyParams()
  {
    return bodyParams;
  }",Obtains a  ParameterList of the body parameters.,1,20
5048,"protected Control initControl(boolean ignoreProxyError) {
    	if (!Control.initSingletonWithoutView(getControlOverrides()) && ! ignoreProxyError) {
    		return null;
    	}
        return Control.getSingleton();
    }",Initialises the  Control singleton without view.,1,59
5049,"public  boolean tryLock() {
            return sync.tryReadLock();
        }",Acquires the read lock only if the write lock is not held by another thread at the time of invocation.,1,23
5050,"public double getContentPosition() {
        return mBundle.getDouble(KEY_CONTENT_POSITION, -1);
    }",Gets the content playback position as a floating point number of seconds from the beginning of the content.,1,28
5051,"public Vector getErrors() {
        return _parser.getErrors();
    }",Get a Vector containing all compile error messages,1,23
5052,"public Task<EncodedImage> get(CacheKey key, AtomicBoolean isCancelled) {
    final EncodedImage pinnedImage = mStagingArea.get(key);
    if (pinnedImage != null) {
      return foundPinnedImage(key, pinnedImage);
    }
    return getAsync(key, isCancelled);
  }",Performs key-value look up in disk cache.,1,82
5053,"public String getConnectedServer(AccessToken accessToken, String node) {

        AgentMgtDao agentMgtDao = new AgentMgtDao();
        return agentMgtDao.getConnectedServer(accessToken.getId(), node);

    }",Get server ip connected with the given node.,1,55
5054,"public final List<ModuleReference> getDependentModulesRecursively(final ModuleReference ref) throws Exception {
        return getDependentModulesRecursively(ref, new ArrayList<ModuleReference>());
    }",The list of installed modules depending on the passed one.,1,46
5055,"public <T extends Server> Server getServer(Class<T> clazz, String name) {
		for (Server server : getServers()){
			if (server.isValid() && server.getLabel().getName().equals(name)){
				return server.getAdapter(clazz);
			}
		}
		log.info(""Requested server '"" + name + ""' was not found on Servers view"");
		log.info(""Available servers are: "" + LoggingUtils.format(getServersNames()));
		throw new EclipseLayerException(""There is no server with name "" + name);
	}",Gets a server of specified type with a given name,1,155
5056,"public final Job<?, ?> getProject() {
        return job;
    }",Returns the job this action belongs to.,1,27
5057,"public static <T> T getObject(Heap heap, JsonValue name, Class<T> type) throws HeapException {
        if (name.isNull()) {
            return null;
        }
        return getRequiredObject(heap, name, type);
    }","Retrieves an object from a heap with the specified name and type, or  null if the name is  null.",1,76
5058,"protected final Enumeration elements() {
        return _contents.elements();
    }",Returns an Enumeration of all child nodes of this node.,1,25
5059,"public InetAddress getNumericalAddress() {
		return address;
	}",Returns the address of the sender,1,19
5060,"public RexNode makeZeroLiteral(RelDataType type) {
    return makeLiteral(zeroValue(type), type, false);
  }",Creates a literal of the default value for the given type.,1,34
5061,"public VariationService createVariationService() {
        return createVariationService(defaultEndpointUrl);
    }",Create and return a new variation service with the default endpoint URL.,1,22
5062,"@Restricted(DoNotUse.class)
    @Deprecated
    @NonNull
    public List<? extends Action> getAllActions() {
        return Collections.emptyList();
    }",Returns an empty list.,1,44
5063,"public final int getBeginLine() {
        return this.bufline[this.tokenBegin];
    }",Get the line begin,1,28
5064,"public TimeOfDay setCopy(String text) {
            return setCopy(text, null);
        }",Sets this field in a copy of the TimeOfDay to a parsed text value.,1,28
5065,"public static AnnotationMirror getAnnotationMirror(Element element, Class<? extends Annotation> clazz) {
		assert clazz != null;
		return getAnnotationMirror( element, clazz.getName() );
	}",Checks whether the  Element hosts an annotation of the specified class.,1,59
5066,"public Element getElementByPath(String path) {
        /*
         * Path is of type ""targetWidgetPath#componentPart"" or
         * ""targetWidgetPath"".
         */
        String parts[] = path.split(SUBPART_SEPARATOR, 2);
        String widgetPath = parts[0];
        Widget w = getWidgetFromPath(widgetPath);
        if (w == null) {
            return null;
        }

        if (parts.length == 1) {
            int pos = widgetPath.indexOf(""domChild"");
            if (pos == -1) {
                return w.getElement();
            }

            // Contains dom reference to a sub element of the widget
            String subPath = widgetPath.substring(pos);
            return getElementByDOMPath(w.getElement(), subPath);
        } else if (parts.length == 2) {
            if (w instanceof SubPartAware) {
                return ((SubPartAware) w).getSubPartElement(parts[1]);
            }
        }

        return null;
    }",Locates an element using a String locator (path) which identifies a DOM element.,1,251
5067,"private boolean searchForButton(String regex, int matches) {
		sleeper.sleep();
		inst.waitForIdleSync();
		Pattern p = Pattern.compile(regex);
		Matcher matcher;
		ArrayList<Button> buttonList = viewFetcher.getCurrentViews(Button.class);
		if(matches == 0)
			matches = 1;
		for(Button button : buttonList){
			matcher = p.matcher(button.getText().toString());
			if(matcher.find()){	
				countMatches++;
			}
			if (countMatches == matches) {
				countMatches = 0;
				return true;
			} 	
		}

		if (scroller.scroll(Scroller.Direction.DOWN))
		{
			return searchForButton(regex, matches);
		} else {
			if (countMatches > 0)
				Log.d(LOG_TAG, "" There are only "" + countMatches + "" matches of "" + regex);
			countMatches = 0;
			return false;
		}

	}",Searches for a button with the given regex string and returns true if the searched button is found a given number of times,1,283
5068,"public File getOpenEJBTomcatLoaderJar() {
        return findOpenEJBJar(""tomee-loader"");
    }",Returns the tomee-loader.jar file,1,24
5069,"@Processor
    @OAuthProtected
	@OAuthInvalidateAccessTokenOn(exception=OAuthTokenExpiredException.class)
    @Paged
    public PagingDelegate<CalendarList> getCalendarList(
    		final @Optional @Default(""false"") boolean showHidden,
    		final PagingConfiguration pagingConfiguration) throws IOException {
    	
    	return new TokenBasedPagingDelegate<CalendarList>() {
    		
    		@Override
    		public List<CalendarList> doGetPage() throws IOException {
				com.google.api.services.calendar.Calendar.CalendarList.List calendars = client.calendarList().list();
				com.google.api.services.calendar.model.CalendarList list = calendars.setMaxResults(pagingConfiguration.getFetchSize())
						.setPageToken(this.getPageToken())
						.setShowHidden(showHidden)
						.execute();
				
				setPageToken(list.getNextPageToken());
				return CalendarList.valueOf(list.getItems(), CalendarList.class);
    		}
		};
    }",Returns a paginated iterator with instances of  org.mule.module.google.calendar.model.CalendarList listing the calendars of the user that owns the OAuth access token.,1,229
5070,"@Processor
    @OAuthProtected
	@OAuthInvalidateAccessTokenOn(exception=OAuthTokenExpiredException.class)
	@Paged
	public PagingDelegate<File> listFiles(
			final @Optional @Default(""100"") int maxResults,
			final @Optional String query,
    		final PagingConfiguration pagingConfiguration) throws IOException {
		
		return new TokenBasedPagingDelegate<File>() {
    		
    		@Override
    		public List<File> doGetPage() throws IOException {
    			FileList response = client.files().list()
						.setMaxResults(maxResults)
						.setPageToken(this.getPageToken())
						.setQ(query)
						.execute();
    			
    			this.setPageToken(response.getNextPageToken());
	
    			return File.valueOf(response.getItems(), File.class);
    		}
		};
	}",Returns a paginated  Iterator with the user's  org.mule.module.google.drive.model.Files.,1,205
5071,"public static TimestampedEntry parseTimestampedEntry(InputStream in) {
    TimestampedEntry timestampedEntry = new TimestampedEntry();

    timestampedEntry.timestamp = readNumber(in, CTConstants.TIMESTAMP_LENGTH);

    int entryType = (int) readNumber(in, CTConstants.LOG_ENTRY_TYPE_LENGTH);
    timestampedEntry.entryType = Ct.LogEntryType.valueOf(entryType);

    Ct.SignedEntry.Builder signedEntryBuilder = Ct.SignedEntry.newBuilder();
    if (entryType == Ct.LogEntryType.X509_ENTRY_VALUE) {

      int length = (int) readNumber(in, 3);
      ByteString x509 = ByteString.copyFrom(readFixedLength(in, length));
      signedEntryBuilder.setX509(x509);

    } else if (entryType == Ct.LogEntryType.PRECERT_ENTRY_VALUE) {
      Ct.PreCert.Builder preCertBuilder = Ct.PreCert.newBuilder();

      byte[] arr = readFixedLength(in, 32);
      preCertBuilder.setIssuerKeyHash(ByteString.copyFrom(arr));

      // set tbs certificate
      arr = readFixedLength(in, 2);
      int length = (int) readNumber(in, 2);

      preCertBuilder.setTbsCertificate(ByteString.copyFrom(readFixedLength(in, length)));
      preCertBuilder.build();

      signedEntryBuilder.setPrecert(preCertBuilder);
    } else {
      throw new SerializationException(String.format(""Unknown entry type: %d"", entryType));
    }
    timestampedEntry.signedEntry = signedEntryBuilder.build();

    return timestampedEntry;
  }",Parses a  TimestampedEntry from binary encoding.,1,386
5072,"protected Function<?,?> getTypeFunction(Class<?> aType) {
        return (Function<?,?>) defaultFunctions.get(aType);
    }",Returns a transformer for the given primitive type.,1,44
5073,"public static ModuleConfig getModuleConfig(HttpServletRequest request,ServletContext context) {
        ModuleConfig moduleConfig = (ModuleConfig)
            request.getAttribute(Globals.MODULE_KEY);
        if (moduleConfig == null) {
            moduleConfig = (ModuleConfig)
                context.getAttribute(Globals.MODULE_KEY);
        }
       return moduleConfig;
    }","Return the ModuleConfig object is it exists, null otherwise.",1,87
5074,"synchronized public Value put(Transaction tx, Key key, Value value) throws IOException {

        Value oldValue = null;

        if (lastGetNodeCache != null) {

            if(lastGetEntryCache.getKey().equals(key)) {
                oldValue = lastGetEntryCache.setValue(value);
                lastGetEntryCache.setValue(value);
                lastGetNodeCache.storeUpdate(tx);
                return oldValue;
            }

            // This searches from the last location of a call to get for the element to replace
            // all the way to the end of the ListIndex.
            Iterator<Map.Entry<Key, Value>> iterator = lastGetNodeCache.iterator(tx);
            while (iterator.hasNext()) {
                Map.Entry<Key, Value> entry = iterator.next();
                if (entry.getKey().equals(key)) {
                    oldValue = entry.setValue(value);
                    ((ListIterator) iterator).getCurrent().storeUpdate(tx);
                    return oldValue;
                }
            }
        }

        // Not found because the cache wasn't set or its not at the end of the list so we
        // start from the beginning and go to the cached location or the end, then we do
        // an add if its not found.
        Iterator<Map.Entry<Key, Value>> iterator = iterator(tx);
        while (iterator.hasNext() && ((ListIterator) iterator).getCurrent() != lastGetNodeCache) {
            Map.Entry<Key, Value> entry = iterator.next();
            if (entry.getKey().equals(key)) {
                oldValue = entry.setValue(value);
                ((ListIterator) iterator).getCurrent().storeUpdate(tx);
                return oldValue;
            }
        }

        // Not found so add it last.
        return add(tx, key, value);
    }","Update the value of the item with the given key in the list if ot exists, otherwise it appends the value to the end of the list.",1,419
5075,"public boolean isSupported(DateTimeFieldType type) {
        if (type == null) {
            return false;
        }
        return isSupported(type.getDurationType());
    }",Checks if the field type specified is supported by this local date and chronology.,1,52
5076,"public boolean isRcsAssociated(final String phoneNumber) {
        boolean result = false;
        Cursor cur = ctx.getContentResolver().query(RichAddressBookData.CONTENT_URI, 
                new String[]{RichAddressBookData.KEY_CONTACT_NUMBER}, 
                RichAddressBookData.KEY_CONTACT_NUMBER + ""=?"", 
                new String[]{phoneNumber}, 
                null);
        if (cur!=null){
            if (cur.moveToFirst()) {
                result = true;
            }
            cur.close();
        }else{
            result = false;
        }
        return result;
    }",Utility to check if a phone number is associated to an entry in the rich address book provider,1,158
5077,"public boolean setTaskCompleted(List<FileDownloadTaskAtom> taskAtomList) {
        return FileDownloadServiceProxy.getImpl().setTaskCompleted(taskAtomList);
    }",Recommend used to telling the FileDownloader Engine that a bulk of tasks have already downloaded by other ways(not by the FileDownloader Engine).,1,34
5078,"public QName getPortTypeName() {
        return portTypeName == null ? new QName("""") : portTypeName;
    }",Returns the fully qualified name of the port type for this Call object (if there is one).,1,38
5079,"@Processor
    @OAuthProtected
	@OAuthInvalidateAccessTokenOn(exception=OAuthTokenExpiredException.class)
	@Paged
	public PagingDelegate<CommentReply> listCommentReplies(
			final String fileId,
			final String commentId, 
			final @Optional @Default(""false"") boolean includeDeleted,
			final @Optional @Default(""100"") int maxResults,
			final PagingConfiguration pagingConfiguration
			) throws IOException {
		
		return new TokenBasedPagingDelegate<CommentReply>() {
			
			@Override
			protected List<CommentReply> doGetPage() throws IOException {
				CommentReplyList response = client.replies().list(fileId, commentId)
						.setIncludeDeleted(includeDeleted)
						.setMaxResults(maxResults)
						.setPageToken(this.getPageToken())
						.execute();
				
				this.setPageToken(response.getNextPageToken());
				return CommentReply.valueOf(response.getItems(), CommentReply.class);
			}
		};
	}",Returns a paginated  Iterator with all the  org.mule.module.google.drive.model.CommentReply for a given comment @sample.xml ../../../doc/GoogleDriveConnector.xml.sample google-drive:list-comment-replies,1,233
5080,"public URL getRoot() {
		return rootUrl;
	}",Method getRoot.,1,19
5081,"protected PingResult parse(int exitValue, List<String> outLines,List<String> errLines) {
		PingResult info = new PingResult();
		Pattern roundTripTimePat = Pattern.compile(RTT_REG_EX);
		Pattern transmitReceivePat = Pattern.compile(TRANSMITTED_RECEIVED_REG_EX);
		Pattern noRouteToHostPat = Pattern.compile(NO_ROUTE_TO_HOST_REG_EX);
		Pattern unknownHostPat = Pattern.compile(UNKNOWN_HOST_REG_EX);

		info.setHost(getHost());

		// Parse the output based on exit value of ping
		switch (exitValue) {

		// Clean exit
		case 0:
			// Extract the RTT times
			for (String line : outLines) {
				Matcher matcher = roundTripTimePat.matcher(line);
				if (matcher.find()) {
					info.setRTTMin(Double.parseDouble(matcher.group(1)));
					info.setRTTAvg(Double.parseDouble(matcher.group(2)));
					info.setRTTMax(Double.parseDouble(matcher.group(3)));
					info.setRTTMDev(Double.parseDouble(matcher.group(4)));
				}
			}
			// Extract the transmit and received counts
			for (String line : outLines) {
				Matcher matcher = transmitReceivePat.matcher(line);
				if (matcher.find()) {
					info.setTransmitted(Integer.parseInt(matcher.group(1)));
					info.setReceived(Integer.parseInt(matcher.group(2)));
				}
			}
			
			// If no ICMP packages are returned then consider the test failed
			if (info.getReceived() == 0) {
				info.setStatus(ServiceStatus.FAIL);
			}
			else {
				info.setStatus(ServiceStatus.SUCCESS);
			}
			break;
		// Error case: 1) Unable to resolve host ; 2) Host unreachable
		case 1:
		case 2:
		case 68:
			for (String line : outLines) {
				Matcher matcher = transmitReceivePat.matcher(line);
				if (matcher.find()) {
					info.setTransmitted(Integer.parseInt(matcher.group(1)));
					info.setReceived(Integer.parseInt(matcher.group(2)));
				}
			}
			
			for (String line: errLines) {
				Matcher matcher = unknownHostPat.matcher(line);
				if (matcher.find()) {
					info.setMessage(matcher.group(1));
				}
			}
			
			info.setStatus(ServiceStatus.FAIL);
			break;
		default:
			assert false: ""Unknown exit code"";
		}

		return info;
	}",Parses the output of ping and populates a instance of  PingResult,1,632
5082,"public RepoPackageVersion removePackageVersion(PackageVersion packageVersion) {
        if ((this.repoPackageVersions == null) || (packageVersion == null)) {
            return null;
        }

        RepoPackageVersion doomed = null;

        for (RepoPackageVersion cpv : this.repoPackageVersions) {
            if (packageVersion.equals(cpv.getRepoPackageVersionPK().getPackageVersion())) {
                doomed = cpv;
                break;
            }
        }

        if (doomed != null) {
            this.repoPackageVersions.remove(doomed);
        }

        return doomed;
    }","Removes the package version from this repo, if it exists.",1,160
5083,"private boolean validate(RexNode first, RexNode second) {
    return first instanceof RexCall && second instanceof RexCall;
  }",Looks at the usage of variables in first and second conjunction to decide whether this kind of expression is currently supported for proving first implies second.,1,40
5084,"public static String getLastBaselineBuild(String date) {
	if (BUILDS == null) {
		queryAllVariations(""%""); //$NON-NLS-1$
	}
	if (date == null) return LAST_BASELINE_BUILD;
	String lastBaselineBuild = null;
	for (int i=0; i<BUILDS_LENGTH; i++) {
		String build = BUILDS[i];
		if (build.startsWith(AbstractResults.VERSION_REF)) {
			String buildDate = build.substring(build.indexOf('_')+1);
			if (buildDate.compareTo(date) < 0) {
				if (lastBaselineBuild == null || build.compareTo(lastBaselineBuild) > 0) {
					lastBaselineBuild = build;
				}
			}
		}
	}
	return lastBaselineBuild;
}",Return the ID of the last baseline build before the given date.,1,218
5085,"public MainWindowBase getSleakWindow() {
		//<DEBUG to find undisposed system resources>
		DeviceData data = new DeviceData();
		data.tracking = true;
		Display display = new Display(data);
		Sleak sleak = new Sleak();
		sleak.open();
		
		Shell shell = new Shell(display);
		window = new MainWindowBase(shell);
		return window;
		//</DEBUG>
	}","Initiates an instance of  MainWindowBase that is monitored by Sleak.java, to monitor what handles (to OS device context) are in use.",1,116
5086,"final public Map getGroups() {
        return this.groups;
    }",Get all Groups,1,23
5087,"public boolean equals(Object readableInterval) {
        if (this == readableInterval) {
            return true;
        }
        if (readableInterval instanceof ReadableInterval == false) {
            return false;
        }
        ReadableInterval other = (ReadableInterval) readableInterval;
        return (getStartMillis() == other.getStartMillis() &&
                getEndMillis() == other.getEndMillis() &&
                getChronology() == other.getChronology());
    }",Compares this object with the specified object for equality based on start and end millis plus the chronology.,1,133
5088,"public Map<String,InternalPortletPreference> getStoredPreferences(
			PortletWindow portletWindow,
			PortletRequest request)
	throws PortletContainerException {
        String key = getFormattedKey(portletWindow, request);
        Map<String,InternalPortletPreference> preferences = storage.get(key);
        if (preferences == null) {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""No portlet preferences found for: "" + key);
            }
            return Collections.emptyMap();
        } else {
        	if (LOG.isDebugEnabled()) {
        		LOG.debug(""Got "" + preferences.size() + "" stored preferences."");
        	}
        	return clonePreferences(preferences);
        }
    }",Returns the stored portlet preferences map.,1,185
5089,"File getBaseDir(final File file1, final File file2) {
        if (file1 == null || file2 == null) {
            return null;
        }
        final Iterator file1Parents = getParents(file1).iterator();
        final Iterator file2Parents = getParents(file2.getAbsoluteFile()).iterator();
        File result = null;
        while (file1Parents.hasNext() && file2Parents.hasNext()) {
            File next = (File) file1Parents.next();
            if (next.equals(file2Parents.next())) {
                result = next;
            } else {
                break;
            }
        }
        return result;
    }",Returns the common base directory between the passed file1 and file2.,1,197
5090,"public Float getBottomValue() {
            return bottomValue;
        }",Gets the 'bottom' attributes value using current units.,1,19
5091,"public ArrayList getAllAHRefs() {
        return this.a_href_all;
    }",Get a list of all a href=,1,21
5092,"public static String addPropertiesToURIFromBean(String uri, Object bean) throws Exception {
        Map<String, String> properties = PropertyUtil.getProperties(bean);
        return PropertyUtil.addPropertiesToURI(uri, properties);
    }",Enumerate the properties of the target object and add them as additional entries to the query string of the given string URI.,1,62
5093,"private String buildRemoveVideoSdpProposal() {
		if (logger.isActivated()) {
			logger.debug(""Build SDP proposal to remove video stream from the session"");
		}

		try {
			// Build SDP part
			String ntpTime = SipUtils.constructNTPtime(System.currentTimeMillis());
			String ipAddress = getDialogPath().getSipStack().getLocalIpAddress();

			getAudioPlayer().getLocalRtpPort();			
			String audioSdp = AudioSdpBuilder.buildSdpOffer(getAudioPlayer().getSupportedAudioCodecs(), getAudioPlayer().getLocalRtpPort());
			
			return ""v=0"" + SipUtils.CRLF +
					""o=- "" + ntpTime + "" "" + ntpTime + "" "" + SdpUtils.formatAddressType(ipAddress) + SipUtils.CRLF +
					""s=-"" + SipUtils.CRLF +
					""c="" + SdpUtils.formatAddressType(ipAddress) + SipUtils.CRLF +
					""t=0 0"" + SipUtils.CRLF + audioSdp +
					""a=sendrcv""	+ SipUtils.CRLF;
		} catch (RemoteException e) {
			if (logger.isActivated()) {
				logger.error(""Remove video has failed"", e);
			}

			// Unexpected error
			handleError(new IPCallError(IPCallError.UNEXPECTED_EXCEPTION, e.getMessage()));
			return null;
		}
	}",Build SDP proposal to remove video stream from the session,1,330
5094,"public List<RelDataType> collectOperandTypes()
    {
        return new AbstractList<RelDataType>() {
            public RelDataType get(int index) {
                return getOperandType(index);
            }
            public int size() {
                return getOperandCount();
            }
        };
    }",Collects the types of the bound operands into a list.,1,83
5095,"public String getName() {
        return this.fullName;
    }",Returns the full name (i.e.,1,21
5096,"protected String removeNonNameElementToCamelCase(final String name, final String nonNameElementPattern) {
        String result = StringUtils.join(Lists.transform(Lists.newArrayList(name.split(nonNameElementPattern)), new Function<String, String>() {
            @Nullable
            @Override
            public String apply(String input) {
                return StringUtils.capitalize(input);
            }
        }), """");
        if (result.length() > 0) {
            result = result.substring(0, 1).toLowerCase() + result.substring(1);
        }
        return result;
    }",Remove characters that is not good to be included in method name from the input and camelize it,1,166
5097,"public String getMergePolicy() {
        return mergePolicy;
    }",Gets the map merge policy  com.hazelcast.map.merge.MapMergePolicy,1,19
5098,"private JtdsConnection getConnection() throws SQLException {
        return (JtdsConnection) statement.getConnection();
    }",Returns the  JtdsConnection object referenced by the  #statement instance variable.,1,31
5099,"private static Gobbling gobble( Treepath< SyntacticTree > gobbleStart, int indentation ) {
    Preconditions.checkArgument( gobbleStart.getTreeAtEnd().isOneOf( _PLACEHOLDER_ ) ) ;
    Treepath< SyntacticTree > start = gobbleStart ;
    
    do {
      if( TreepathTools.hasNextSibling( start ) ) {
        final Treepath< SyntacticTree > next = TreepathTools.getNextSibling( start ) ;
        if( isRawItem( next ) ) {
          final Treepath< SyntacticTree > minusNext =
              TreepathTools.removeNextSibling( start ) ;
          return new Gobbling( minusNext, makeEmbeddedListItem( next ), indentation ) ;
        } else {
          final SyntacticTree nextTree = next.getTreeAtEnd() ;
          if( nextTree.isOneOf( WHITESPACE_, LINE_BREAK_ ) ) {
            start = TreepathTools.removeNextSibling( start ) ;
            if( nextTree.isOneOf( WHITESPACE_ ) ) {
              indentation = getWhitespaceLength( next ) ;
            }
            continue ;
          }
        }
      } 
      // If no next sibling at all, or no useful next sibling, then return.
      return new Gobbling( start ) ;      
    } while( true ) ;
  }",Gobbles one item node if possible.,1,323
5100,"private List<WorkerInfo> checkWorkers() {
        boolean failJob = true;
        int pollAttempt = 0;
        List<WorkerInfo> healthyWorkerInfoList = new ArrayList<WorkerInfo>();
        List<WorkerInfo> unhealthyWorkerInfoList = new ArrayList<WorkerInfo>();
        int totalResponses = -1;
        while (pollAttempt < maxPollAttempts) {
            getAllWorkerInfos(
                getSuperstep(), healthyWorkerInfoList, unhealthyWorkerInfoList);
            totalResponses = healthyWorkerInfoList.size() +
                unhealthyWorkerInfoList.size();
            if ((totalResponses * 100.0f / maxWorkers) >=
                    minPercentResponded) {
                failJob = false;
                break;
            }
            getContext().setStatus(getGraphMapper().getMapFunctions() + "" "" +
                                   ""checkWorkers: Only found "" +
                                   totalResponses +
                                   "" responses of "" + maxWorkers +
                                   "" needed to start superstep "" +
                                   getSuperstep());
            if (getWorkerHealthRegistrationChangedEvent().waitMsecs(
                    msecsPollPeriod)) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""checkWorkers: Got event that health "" +
                              ""registration changed, not using poll attempt"");
                }
                getWorkerHealthRegistrationChangedEvent().reset();
                continue;
            }
            if (LOG.isInfoEnabled()) {
                LOG.info(""checkWorkers: Only found "" + totalResponses +
                         "" responses of "" + maxWorkers +
                         "" needed to start superstep "" +
                         getSuperstep() + "".  Sleeping for "" +
                         msecsPollPeriod + "" msecs and used "" + pollAttempt +
                         "" of "" + maxPollAttempts + "" attempts."");
                // Find the missing workers if there are only a few
                if ((maxWorkers - totalResponses) <=
                        partitionLongTailMinPrint) {
                    Set<Integer> partitionSet = new TreeSet<Integer>();
                    for (WorkerInfo workerInfo : healthyWorkerInfoList) {
                        partitionSet.add(workerInfo.getPartitionId());
                    }
                    for (WorkerInfo workerInfo : unhealthyWorkerInfoList) {
                        partitionSet.add(workerInfo.getPartitionId());
                    }
                    for (int i = 1; i <= maxWorkers; ++i) {
                        if (partitionSet.contains(new Integer(i))) {
                            continue;
                        } else if (i == getTaskPartition()) {
                            continue;
                        } else {
                            LOG.info(""checkWorkers: No response from ""+
                                     ""partition "" + i + "" (could be master)"");
                        }
                    }
                }
            }
            ++pollAttempt;
        }
        if (failJob) {
            LOG.error(""checkWorkers: Did not receive enough processes in "" +
                      ""time (only "" + totalResponses + "" of "" +
                      minWorkers + "" required).  This occurs if you do not "" +
                      ""have enough map tasks available simultaneously on "" +
                      ""your Hadoop instance to fulfill the number of "" +
                      ""requested workers."");
            return null;
        }

        if (healthyWorkerInfoList.size() < minWorkers) {
            LOG.error(""checkWorkers: Only "" + healthyWorkerInfoList.size() +
                      "" available when "" + minWorkers + "" are required."");
            return null;
        }

        return healthyWorkerInfoList;
    }",Check all the  WorkerInfo objects to ensure that a minimum number of good workers exists out of the total that have reported.,1,782
5101,"public final int getColumn() {
        return this.bufcolumn[this.bufpos];
    }",Get the column position,1,28
5102,"private static Consumer<List> mongoChecker(final String... expected) {
    return actual -> {
      if (expected == null) {
        Assert.assertThat(""null mongo Query"", actual, CoreMatchers.nullValue());
        return;
      }

      if (expected.length == 0) {
        CalciteAssert.assertArrayEqual(""empty Mongo query"", expected,
            actual.toArray(new Object[0]));
        return;
      }

      final BsonDocument expectedBson = BsonDocument.parse(String.join("","", expected));
      final BsonDocument actualBson = BsonDocument.parse(((List<?>) actual.get(0))
          .stream()
          .map(Objects::toString)
          .collect(Collectors.joining(""\n"")));

      // compare Bson (not string) representation
      if (!expectedBson.equals(actualBson)) {
        final JsonWriterSettings settings = JsonWriterSettings.builder().indent(true).build();
        // used to pretty print Assertion error
        Assert.assertEquals(""expected and actual Mongo queries do not match"",
            expectedBson.toJson(settings),
            actualBson.toJson(settings));
        Assert.fail(""Should have failed previously because (expected != actual) is already known"");
      }
    };
  }",Returns a function that checks that a particular MongoDB query has been called.,1,314
5103,"protected Account doMultiRealmAuthentication( Collection<? extends Realm> realms, AuthenticationToken token ) {

        ModularAuthenticationStrategy strategy = getModularAuthenticationStrategy();

        strategy.beforeAllAttempts( realms, token );
        
        Account aggregatedInfo = createAggregatedAccount( token );

        if (log.isDebugEnabled()) {
            log.debug(""Iterating through ["" + realms.size() + ""] realms for PAM authentication"");
        }

        for( Realm realm : realms) {

            strategy.beforeAttempt( realm, token );

            if( realm.supports( token.getClass() ) ) {

                if (log.isDebugEnabled()) {
                    log.debug(""Attempting to authenticate token ["" + token + ""] "" +
                        ""using realm of type ["" + realm.getClass() + ""]"");
                }

                Account realmInfo = null;
                Throwable t = null;
                try {
                    realmInfo = realm.getAccount( token );
                } catch ( Throwable throwable ) {
                    t = throwable;
                    if ( log.isTraceEnabled() ) {
                        String msg = ""Realm ["" + realm + ""] threw an exception during a multi-realm authentication attempt:"";
                        log.trace( msg, t );
                    }
                }

                strategy.afterAttempt( realm, token, realmInfo, t );

                // If non-null account is returned, then the realm was able to authenticate the
                // user - so merge the account with any accumulated before:
                if( realmInfo != null ) {

                    if (log.isDebugEnabled()) {
                        log.debug(""Account successfully authenticated using realm of type ["" +
                            realm.getClass().getName() + ""]"");
                    }

                    // Merge the module-returned data with the aggregate data
                    merge( aggregatedInfo, realmInfo );

                }
            } else {
                if (log.isDebugEnabled()) {
                    log.debug(""Realm of type ["" + realm.getClass().getName() + ""] does not support token "" +
                            ""of type ["" + token.getClass().getName() + ""].  Skipping realm."" );
                }
            }
        }

        strategy.afterAllAttempts( token, aggregatedInfo );

        return aggregatedInfo;
    }",Performs the multi-realm authentication attempt by calling back to a  ModularAuthenticationStrategy object as each realm is consulted for Account for the specified token.,1,566
5104,"public Component[] getChildren() {
        ensureZOrder();
        Component[] c = new Component[children.size()];
        return (Component[])children.toArray(c);
    }",Returns an array of this Container's children.,1,58
5105,"public final boolean hasValidResults() {
        return getLastAction() != null;
    }",Returns whether this project has a valid result action attached.,1,28
5106,"protected String getExample(Schema schema) {
        if (schema.getExample() != null) {
            return schema.getExample().toString();
        } else if (ModelUtils.isDateTimeSchema(schema)) {
            return ""2000-01-23T04:56:07.000Z"";
        } else if (ModelUtils.isDateSchema(schema)) {
            return ""2000-01-23"";
        } else if (ModelUtils.isBooleanSchema(schema)) {
            return ""true"";
        } else if (ModelUtils.isNumberSchema(schema)) {
            if (ModelUtils.isFloatSchema(schema)) { // float
                return ""1.3579"";
            } else { // double
                return ""3.149"";
            }
        } else if (ModelUtils.isPasswordSchema(schema)) {
            return ""********"";
        } else if (ModelUtils.isUUIDSchema(schema)) {
            return ""046b6c7f-0b8a-43b9-b35d-6489e6daee91"";
            // do these last in case the specific types above are derived from these classes
        } else if (ModelUtils.isStringSchema(schema)) {
            return ""aeiou"";
        } else if (ModelUtils.isIntegerSchema(schema)) {
            if (ModelUtils.isLongSchema(schema)) { // long
                return ""123456789"";
            } else { //integer
                return ""123"";
            }
        } else {
            LOGGER.debug(""default example value not implemented for {}. Default to UNDEFINED_EXAMPLE_VALUE"", schema);
            return ""UNDEFINED_EXAMPLE_VALUE"";
        }
    }",Get the example string value for the given schema.,1,363
5107,"public static Set<ConfiguredClassHierarchy<EntityClass>> createEntityHierarchies(AnnotationBindingContext context) {
		ClassLoaderService classLoaderService = context.classLoaderService();
		Map<ClassInfo, List<ClassInfo>> processedClassInfos = new HashMap<ClassInfo, List<ClassInfo>>();

		for ( ClassInfo info : context.getIndex().getKnownClasses() ) {
			if ( !isEntityClass( info ) ) {
				continue;
			}

			if ( processedClassInfos.containsKey( info ) ) {
				continue;
			}

			List<ClassInfo> configuredClassList = new ArrayList<ClassInfo>();
			ClassInfo tmpClassInfo = info;
			Class<?> clazz = classLoaderService.classForName( tmpClassInfo.toString() );
			while ( clazz != null && !clazz.equals( Object.class ) ) {
				tmpClassInfo = context.getIndex().getClassByName( DotName.createSimple( clazz.getName() ) );
				clazz = clazz.getSuperclass();
				if ( tmpClassInfo == null ) {
					continue;
				}

				if ( existsHierarchyWithClassInfoAsLeaf( processedClassInfos, tmpClassInfo ) ) {
					List<ClassInfo> classInfoList = processedClassInfos.get( tmpClassInfo );
					for ( ClassInfo tmpInfo : configuredClassList ) {
						classInfoList.add( tmpInfo );
						processedClassInfos.put( tmpInfo, classInfoList );
					}
					break;
				}
				else {
					configuredClassList.add( 0, tmpClassInfo );
					processedClassInfos.put( tmpClassInfo, configuredClassList );
				}
			}
		}

		Set<ConfiguredClassHierarchy<EntityClass>> hierarchies = new HashSet<ConfiguredClassHierarchy<EntityClass>>();
		List<List<ClassInfo>> processedList = new ArrayList<List<ClassInfo>>();
		for ( List<ClassInfo> classInfoList : processedClassInfos.values() ) {
			if ( !processedList.contains( classInfoList ) ) {
				hierarchies.add( ConfiguredClassHierarchy.createEntityClassHierarchy( classInfoList, context ) );
				processedList.add( classInfoList );
			}
		}

		return hierarchies;
	}",Pre-processes the annotated entities from the index and put them into a structure which can bound to the Hibernate metamodel.,1,572
5108,"public static <T> Method findMethod(Class<?> implClass, Operation<T> operation) throws NoSuchMethodException {
        String name = operation.getName();
        Class<?>[] paramTypes = getPhysicalTypes(operation);
        return implClass.getMethod(name, paramTypes);
    }",Return the method on the implementation class that matches the operation.,1,83
5109,"public static ActiveMQConnectionFactory createConnectionFactoryWithoutHA(JMSFactoryType jmsFactoryType, final TransportConfiguration... transportConfigurations)
   {
      ActiveMQConnectionFactory factory = null;
      if (jmsFactoryType.equals(JMSFactoryType.CF))
      {
         factory = new ActiveMQJMSConnectionFactory(false, transportConfigurations);
      }
      else if (jmsFactoryType.equals(JMSFactoryType.QUEUE_CF))
      {
         factory = new ActiveMQQueueConnectionFactory(false, transportConfigurations);
      }
      else if (jmsFactoryType.equals(JMSFactoryType.TOPIC_CF))
      {
         factory = new ActiveMQTopicConnectionFactory(false, transportConfigurations);
      }
      else if (jmsFactoryType.equals(JMSFactoryType.XA_CF))
      {
         factory = new ActiveMQXAConnectionFactory(false, transportConfigurations);
      }
      else if (jmsFactoryType.equals(JMSFactoryType.QUEUE_XA_CF))
      {
         factory = new ActiveMQXAQueueConnectionFactory(false, transportConfigurations);
      }
      else if (jmsFactoryType.equals(JMSFactoryType.TOPIC_XA_CF))
      {
         factory = new ActiveMQXATopicConnectionFactory(false, transportConfigurations);
      }

      return factory;
   }",Create a ActiveMQConnectionFactory which creates session factories using a static list of transportConfigurations.,1,272
5110,"public static W3CWidget getWidget(String metadata, String shindig) throws Exception{
		JSONObject gadget = null;
		JSONObject response = new JSONObject(metadata);
		JSONArray gadgets = response.getJSONArray(""gadgets"");
		if (gadgets.length()==0) return null;
		gadget = gadgets.getJSONObject(0);
		return new GadgetAdapter(gadget, shindig);
	}",Marshall JSON metadata into a new W3CWidget instance,1,114
5111,"private Object createConversationID() {
        if (getConversationID() != null) {
            return getConversationID();
        } else {
            return UUID.randomUUID().toString();
        }
    }",Creates a new conversation id,1,61
5112,"public static String getId( final Widget widget ) {
    // TODO [rh] consider overriding the id when Widget#setData is called
    //      - safer 1: in case someone tries to obtain id directly from addapter
    //      - safer 2: changing the id after widget was initialized could be 
    //        detected and prevented
    //      - less memory: new HashMap created per widget to hold the id
    //      - illegal id's could be rejected immediately (close to error source)
    //      - faster (?): only ""return getAdapter( widget ).getId();"" in here 
    String result = ( String )widget.getData( CUSTOM_WIDGET_ID );
    if( result == null ) {
      result = getAdapter( widget ).getId();
    }
    return result;
  }",Returns the id of the given widget that is used to identify the widget on the client.,1,106
5113,"public Node parseXML(String text, Document doc) {
            return null;
        }",Parses the given XML string into a DocumentFragment of the given document or a new document if 'doc' is null.,1,27
5114,"public ParameterList getQueryStringParams()
  {
    try
    {
      ParameterList result = new ParameterList();
      String queryString = new URL(url).getQuery();
      result.addQuerystring(queryString);
      result.addAll(querystringParams);
      return result;
    }
    catch (MalformedURLException mue)
    {
      throw new OAuthException(""Malformed URL"", mue);
    }
  }",Get a  ParameterList with the query string parameters.,1,111
5115,"public static String encodeValue(Value value) {
		if (value instanceof BNode) {
			// SES-2129 special treatment of blank node names to avoid problems with round-tripping.
			return ((BNode)value).getID();
		}
		
		// for everything else we just use N-Triples serialization.
		return NTriplesUtil.toNTriplesString(value);
	}","Encodes a value in a canonical serialized string format, for use in a URL query parameter.",1,68
5116,"private boolean isShareable() {
        return getRequestScope().getDictionary().isSharable(obj.getClass());
    }",Checks if this persistent resource's underlying entity is sharable.,1,34
5117,"public final int getBeginColumn() {
        return this.bufcolumn[this.tokenBegin];
    }",Get the column begin,1,28
5118,"public RepositoryMethodMetadata lookupMethod(RepositoryMetadata repositoryMetadata, Method method)
    {
        return repositoryMetadata.getMethodsMetadata().get(method);
    }",lookup the  RepositoryMethodMetadata for a specific repository and method.,1,37
5119,"private static String stringify(Object obj)
	{
		if (obj instanceof DERString)
		{
			return escapeHtml(((DERString) obj).getString());
		}
		// TODO: why not DERInteger as number?
		else if (obj instanceof DERInteger || obj instanceof byte[])
		{
			return convertToHexString(obj);
		}
		else if (obj instanceof ASN1TaggedObject)
		{
			ASN1TaggedObject tagObj = (ASN1TaggedObject) obj;
			// Note: ""["", _not_ '[' ...
			return ""["" + tagObj.getTagNo() + ""] "" + stringify(tagObj.getObject());
		}
		else if (obj instanceof ASN1Sequence)
		{
			ASN1Sequence aObj = (ASN1Sequence) obj;
			StringBuilder tmp = new StringBuilder(""["");
			for (int i = 0, len = aObj.size(); i < len; i++)
			{
				tmp.append(stringify(aObj.getObjectAt(i)));
				if (i != len - 1)
				{
					tmp.append("", "");
				}
			}
			return tmp.append(""]"").toString();
		}
		else
		{
			String hex = null;
			try
			{
				Method method = obj.getClass().getMethod(""getOctets"", (Class[]) null);
				hex = convertToHexString(method.invoke(obj, (Object[]) null));
			}
			catch (Exception e)
			{
				// Ignore
			}
			if (hex == null && obj != null)
			{
				hex = escapeHtml(obj.toString());
			}
			return hex;
		}
	}",Gets a HTML escaped string representation of the given object.,1,475
5120,"public WireType getWireType() {
		return queue.wireType();
	}",Returns the queue wire type,1,23
5121,"public boolean searchEditText(String search) {
		Pattern p = Pattern.compile(search);
		Matcher matcher;
		ArrayList<EditText> editTextList = getCurrentEditTexts();
		Iterator<EditText> iterator = editTextList.iterator();
		while (iterator.hasNext()) {
			EditText editText = (EditText) iterator.next();
			matcher = p.matcher(editText.getText().toString());
			if (matcher.matches()) {
				return true;
			}
		}
		if (scrollDownList())
			return searchEditText(search);
		else
			return false;
	}",Searches for a text string in the edit texts located in the current activity.,1,173
5122,"public Job<?, ?> getOwner() {
        return job;
    }",Returns the job.,1,25
5123,"public Integer[] getVersions() {
        return vers;
    }",Get an array for all available versions (sorted),1,21
5124,"public String getConsoleText() {
		activate();
		WidgetIsFound<org.eclipse.swt.custom.StyledText> widgetIsFound = 
				new WidgetIsFound<org.eclipse.swt.custom.StyledText>(
				new ClassMatcher(org.eclipse.swt.custom.StyledText.class));
		new WaitUntil(widgetIsFound, TimePeriod.NORMAL, false);
		// Checck whether there is a console to display or not
		if (widgetIsFound.getWidget() == null) {
			return null;
		}
		// wait for text to appear
		new WaitWhile(new ConsoleHasText(""""),TimePeriod.SHORT,false);
		return new DefaultStyledText().getText();
	}",Gets text from console.,1,160
5125,"private IDKey getIdentityKey(Object value) {
        return new IDKey(value);
    }",Get an IDKey that represents the unique identity of the object.,1,27
5126,"@Processor
    @OAuthProtected
	@OAuthInvalidateAccessTokenOn(exception=OAuthTokenExpiredException.class)
	@Paged
	public PagingDelegate<Comment> listComments(
			final String fileId,
			final @Optional @Default(""false"") boolean includeDeleted,
			final @Optional @Default(""100"") int maxResults,
			final @Optional String updatedMin,
			final PagingConfiguration pagingConfiguration
			) throws IOException {
		
		return new TokenBasedPagingDelegate<Comment>() {
			
			@Override
			protected List<Comment> doGetPage() throws IOException {
				CommentList response = client.comments().list(fileId)
						.setIncludeDeleted(includeDeleted)
						.setMaxResults(maxResults)
						.setPageToken(this.getPageToken())
						.setUpdatedMin(updatedMin)
						.execute();
				
				this.setPageToken(response.getNextPageToken());
				return Comment.valueOf(response.getItems(), Comment.class);
			}
		};
		
	}",Returns a paged  Iterator with all the  org.mule.module.google.drive.model.Comments for a file @sample.xml ../../../doc/GoogleDriveConnector.xml.sample google-drive:list-comments,1,240
5127,"public static MemberID parse(String memberID, boolean isClassMember) {
        return parse(memberID, isClassMember, null);
    }","Parse a member ID, with or without classname, with or without descriptor.",1,38
5128,"public static MailboxMessage<HBaseId> messageMetaFromResult(Configuration conf, Result result) {
        HBaseMailboxMessage message = null;
        Flags flags = new Flags();
        List<Property> propList = new ArrayList<Property>();
        KeyValue[] keys = result.raw();
        String mediaType = null, subType = null;
        Long modSeq = null, uid, bodyOctets = null, contentOctets = null, textualLineCount = null;
        Date internalDate = null;

        int i = 0;
        /** it is VERY IMPORTANT that the byte arrays are kept ascending */
        if (Bytes.equals(keys[i].getQualifier(), MESSAGE_BODY_OCTETS)) {
            bodyOctets = Bytes.toLong(keys[i].getValue());
            i++;
        }
        if (Bytes.equals(keys[i].getQualifier(), MESSAGE_CONTENT_OCTETS)) {
            contentOctets = Bytes.toLong(keys[i].getValue());
            i++;
        }
        if (Bytes.equals(keys[i].getQualifier(), MESSAGE_INTERNALDATE)) {
            internalDate = new Date(Bytes.toLong(keys[i].getValue()));
            i++;
        }
        // may be null so it will probably skip
        if (Bytes.equals(keys[i].getQualifier(), MESSAGE_TEXT_LINE_COUNT)) {
            textualLineCount = Bytes.toLong(keys[i].getValue());
            i++;
        }

        if (Bytes.equals(keys[i].getQualifier(), MESSAGE_MODSEQ)) {
            modSeq = Bytes.toLong(keys[i].getValue());
            i++;
        }
        if (Bytes.equals(keys[i].getQualifier(), MESSAGE_MEDIA_TYPE)) {
            mediaType = Bytes.toString(keys[i].getValue());
            i++;
        }
        if (Bytes.equals(keys[i].getQualifier(), MESSAGE_SUB_TYPE)) {
            subType = Bytes.toString(keys[i].getValue());
            i++;
        }
        // only TEXT_LINE_COUNT can be missing if message is binary
        if (i < 5) {
            throw new RuntimeException(""HBase message column names not sorted."");
        }
        while (i < keys.length) {
            //get message properties
            if (Bytes.startsWith(keys[i].getQualifier(), PREFIX_PROP_B)) {
                propList.add(getProperty(keys[i].getValue()));
            } else if (Bytes.startsWith(keys[i].getQualifier(), PREFIX_SFLAGS_B)) {
                // get system flags, stored as qualifiers
                if (Bytes.equals(MARKER_PRESENT, keys[i].getValue())) {
                    flags.add(systemFlagFromBytes(keys[i].getQualifier()));
                }
            } else if (Bytes.startsWith(keys[i].getQualifier(), PREFIX_UFLAGS_B)) {
                // get user flags, stored as value qualifier
                flags.add(userFlagFromBytes(keys[i].getQualifier()));
            }
            i++;
        }
        HBaseId uuid = HBaseIdFromRowKey(result.getRow());
        uid = Long.MAX_VALUE - Bytes.toLong(result.getRow(), 16);
        PropertyBuilder props = new PropertyBuilder(propList);
        props.setMediaType(mediaType);
        props.setSubType(subType);
        message = new HBaseMailboxMessage(conf, uuid, internalDate, flags, contentOctets, (int) (contentOctets - bodyOctets), props);
        message.setUid(uid);
        message.setModSeq(modSeq);
        message.setTextualLineCount(textualLineCount);
        return message;
    }",Creates a HBaseMailboxMessage from a Result object.,1,923
5129,"protected String getUrlProtocol() {
        return ""derby://localhost:"" + (getPort() > 0 ? getPort() : DEFAULT_PORT) + ""/memory:"";
    }",Get the database connection protocol used for JDBC connections,1,49
5130,"private boolean searchForToggleButton(String regex, int matches) {
		sleeper.sleep();
		inst.waitForIdleSync();
		Pattern p = Pattern.compile(regex);
		Matcher matcher;
		ArrayList<ToggleButton> toggleButtonList = viewFetcher.getCurrentViews(ToggleButton.class);
		if(matches == 0)
			matches = 1;
		for(ToggleButton toggleButton : toggleButtonList){
			matcher = p.matcher(toggleButton.getText().toString());
			if(matcher.find()){	
				countMatches++;
			}
			if (countMatches == matches) {
				countMatches=0;
				return true;
			} 
		}

		if (scroller.scroll(Scroller.Direction.DOWN))
		{
			return searchForToggleButton(regex, matches);
		} else {
			if(countMatches > 0)
				Log.d(LOG_TAG, "" There are only "" + countMatches + "" matches of "" + regex);
			countMatches = 0;
			return false;
		}
		
	}",Searches for a toggle button with the given regex string and returns true if the searched toggle button is found a given number of times,1,281
5131,"private int invoke_calculateBufferSize(int tdsVersion, int packetSize) {
        Class[] classes = new Class[]{int.class, int.class};
        Object[] objects = new Object[]{new Integer(tdsVersion), new Integer(packetSize)};

        return ((Integer) invokeStaticMethod(Support.class,
                ""calculateNamedPipeBufferSize"", classes, objects)).intValue();
    }","Helper method to invoke  Support#calculateNamedPipeBufferSize(int, int) using reflection.",1,113
5132,"public String getTreeLivePath() {
        return this.treeLivePath;
    }",Returns the path to the live tree,1,21
5133,"public boolean get(WithAttributes withAttributes) {
        return withAttributes.getAttributes().get(this);
    }",Extracts the attribute map from the specified  WithAttributes and returns the value of this attribute from the map.,1,31
5134,"public Interval overlap(ReadableInterval interval) {
        interval = DateTimeUtils.getReadableInterval(interval);
        if (overlaps(interval) == false) {
            return null;
        }
        long start = Math.max(getStartMillis(), interval.getStartMillis());
        long end = Math.min(getEndMillis(), interval.getEndMillis());
        return new Interval(start, end, getChronology());
    }",Gets the overlap between this interval and another interval.,1,122
5135,"public Float getLeftValue() {
            return leftValue;
        }",Gets the 'left' attributes value using current units.,1,19
5136,"public synchronized VisualItem getItem(String itemClass, Entity entity, boolean create) {
		ItemEntry entry = (ItemEntry)m_entryMap.get(itemClass);
		if ( entry != null ) {
			VisualItem item = (VisualItem)entry.itemMap.get(entity);
			if ( !create ) {
				return item;
			} else if ( item == null ) {
				item = m_ifactory.getItem(itemClass);
				item.init(this, itemClass, entity);
				addItem(entry, entity, item);
			}
            if ( item instanceof NodeItem )
                ((NodeItem)item).removeAllNeighbors();
            item.setDirty(0);
            item.setVisible(true);
			return item;
		} else {
			throw new IllegalArgumentException(""The input string must be a""
						+ "" recognized item class!"");
		}		
	} //","Requests a VisualItem of the specified item class corresponding to a given Entity, optionally creating the VisualItem if it doesn't already exist.",1,247
5137,"public String getExportDirectory() {
        return this.exportDirectory;
    }",Returns the path to the export directory,1,21
5138,"protected LdapDirectoryInfo performAuthentication(String username, char[] password) {

        if( searchBase == null ) {
            throw new IllegalStateException( ""A search base must be specified."" );
        }
        if( url == null ) {
            throw new IllegalStateException( ""An LDAP URL must be specified of the form ldap://<hostname>:<port>"" );
        }


        if( principalSuffix != null ) {
            username = username + principalSuffix;
        }

        Hashtable<String, String> env = new Hashtable<String, String>(6);

        env.put(Context.SECURITY_AUTHENTICATION, authentication);
        env.put(Context.SECURITY_PRINCIPAL, username);
        env.put(Context.SECURITY_CREDENTIALS, new String( password ));
        env.put(Context.INITIAL_CONTEXT_FACTORY, contextFactory);
        env.put(Context.PROVIDER_URL, url);
        env.put(Context.REFERRAL, refferal);

        if (log.isDebugEnabled()) {
            log.debug( ""Initializing LDAP context using environment properties ["" + env + ""]"" );
        }

        LdapContext ctx = null;
        try {
            ctx = new InitialLdapContext(env, null);

            return getLdapDirectoryInfo(username, ctx);


        } catch (javax.naming.AuthenticationException e) {
            throw new IncorrectCredentialException( ""User could not be authenticated with LDAP server."", e );

        } catch (NamingException e) {
            throw new AuthenticationException( ""LDAP naming error while attempting to authenticate user."", e );

        } finally {
            // Always close the LDAP context
            try {
                if (ctx != null) {
                    ctx.close();
                }
            } catch (NamingException e) {
                if( log.isErrorEnabled() ) {
                    log.error(""Problem closing Context: "", e);
                }
            }
        }
    }","Performs the actual authentication of the user by connecting to the LDAP server, querying it for user information, and returning an  LdapDirectoryInfo instance containing the results.",1,487
5139,"public LookupService createLookupService() {
        return createLookupService(defaultEndpointUrl);
    }",C6reate and return a new lookup service with the default endpoint URL.,1,22
5140,"public static void to2D(double[] weights, List<Index<CRFLabel>> labelIndices, int[] map, double[][] newWeights) {
    int index = 0;
    for (int i = 0; i < map.length; i++) {
      int labelSize = labelIndices.get(map[i]).size();
      System.arraycopy(weights, index, newWeights[i], 0, labelSize);
      index += labelSize;
    }
  }","Takes a double array of weights and populates a 2D array where: the first element is the mapped index of the clique size (e.g., node-0, edge-1) matching featuresIndex i the second element is the number of output classes for that clique size",1,144
5141,"public <C extends EvictionCandidate<A, E>> C evaluate(Iterable<C> evictionCandidates) {
        C selectedEvictionCandidate = null;
        long now = Clock.currentTimeMillis();
        for (C currentEvictionCandidate : evictionCandidates) {
            if (selectedEvictionCandidate == null) {
                selectedEvictionCandidate = currentEvictionCandidate;
            } else {
                E evictable = currentEvictionCandidate.getEvictable();
                if (isExpired(now, evictable)) {
                    return currentEvictionCandidate;
                }

                int comparisonResult = evictionPolicyComparator.compare(selectedEvictionCandidate, currentEvictionCandidate);
                if (comparisonResult == EvictionPolicyComparator.SECOND_ENTRY_HAS_HIGHER_PRIORITY_TO_BE_EVICTED) {
                    selectedEvictionCandidate = currentEvictionCandidate;
                }
            }
        }
        return selectedEvictionCandidate;
    }",Selects the best candidate to be evicted.,1,197
5142,"public static MRequisitionLine[] forC_OrderLine_ID(Properties ctx, int C_OrderLine_ID, String trxName)
	{
		final String whereClause = COLUMNNAME_C_OrderLine_ID+""=?"";
		List<MRequisitionLine> list = new Query(ctx, MRequisitionLine.Table_Name, whereClause, trxName)
			.setParameters(new Object[]{C_OrderLine_ID})
			.list();
		return list.toArray(new MRequisitionLine[list.size()]);
	}",Get corresponding Requisition Line(s) for given Order Line,1,116
5143,"public Task<EncodedImage> get(List<CacheKey> keys, final AtomicBoolean isCancelled) {
    Preconditions.checkArgument(!keys.isEmpty());

    for (CacheKey key : keys) {
      final EncodedImage pinnedImage = mStagingArea.get(key);
      if (pinnedImage != null) {
        return foundPinnedImage(key, pinnedImage);
      }
    }

    Task<EncodedImage> masterTask = getAsync(keys.get(0), isCancelled);
    if (keys.size() == 1) {
      return masterTask;
    }
    for (final CacheKey key : keys.subList(1, keys.size())) {
      masterTask = masterTask.continueWithTask(
          new Continuation<EncodedImage, Task<EncodedImage>>() {
            @Override
            public Task<EncodedImage> then(Task<EncodedImage> previousTask) throws Exception {
              // If we've got a hit, stop. If this is cancelled, stop. Otherwise, keep going.
              if (previousTask.isCancelled() || previousTask.getResult() != null) {
                return previousTask;
              }
              return getAsync(key, isCancelled);
            }
          },
          mReadExecutor);
    }
    return masterTask;
  }",Performs lookup of a series of disk cache keys in a single thread.,1,316
5144,"public Constructor[] getConstructors() throws SecurityException {
        // BEGIN android-note
        // trying to get closer to the RI which returns a raw constructor array.
        // copied from newer version of harmony
        // END android-note
        checkPublicMemberAccess();
        return getDeclaredConstructors(this, true);
    }",Returns an array containing  Constructor objects for all public constructors for the class represented by this  Class.,1,49
5145,"private ASN1Object toASN1Object(
        X509Certificate cert)
        throws CertificateEncodingException
    {
        try
        {
            return new ASN1InputStream(cert.getEncoded()).readObject();
        }
        catch (Exception e)
        {
            throw new CertificateEncodingException(""Exception while encoding certificate: "" + e.toString());
        }
    }",Return a ASN1Object containing the encoded certificate.,1,88
5146,"public static String jenkinsJobName(BuildConfig bc) {
    String namespace = bc.getMetadata().getNamespace();
    String name = bc.getMetadata().getName();
    return jenkinsJobName(namespace, name);
  }",Finds the Jenkins job name for the given  BuildConfig.,1,66
5147,"private ConnectionJDBC getConnection() throws SQLException {
        return (ConnectionJDBC) statement.getConnection();
    }",Returns the  ConnectionJDBC object referenced by the  #statement instance variable.,1,31
5148,"static String substituteParamMarkers(String sql, ParamInfo[] list) {
        // A parameter can have at most 8 characters: "" @P"" plus at most 4
        // digits plus "" "". We substract the ""?"" placeholder, that's at most
        // 7 extra characters needed for each parameter.
        char[] buf = new char[sql.length() + list.length * 7];
        int bufferPtr = 0; // Output buffer pointer
        int start = 0;     // Input string pointer

        for (int i = 0; i < list.length; i++) {
            int pos = list[i].markerPos;

            if (pos > 0) {
                sql.getChars(start, pos, buf, bufferPtr);
                bufferPtr += (pos - start);
                start = pos + 1;

                // Append "" @P""
                buf[bufferPtr++] = ' ';
                buf[bufferPtr++] = '@';
                buf[bufferPtr++] = 'P';

                // Append parameter number
                String number = String.valueOf(i);
                number.getChars(0, number.length(), buf, bufferPtr);
                bufferPtr += number.length();

                // Append "" ""
                buf[bufferPtr++] = ' ';
            }
        }

        if (start < sql.length()) {
            sql.getChars(start, sql.length(), buf, bufferPtr);
            bufferPtr += (sql.length() - start);
        }

        return new String(buf, 0, bufferPtr);
    }","Update the SQL string and replace the ? markers with parameter names eg @P0, @P1 etc.",1,391
5149,"public static TokenSequencePattern compile(SequencePattern.PatternExpr nodeSequencePattern)
  {
    return new TokenSequencePattern(null, nodeSequencePattern);
  }",Compiles a PatternExpr into a TokenSequencePattern.,1,35
5150,"public DataFetcher getDataFetcher(FieldCoordinates coordinates, GraphQLFieldDefinition fieldDefinition) {
        return getDataFetcherImpl(coordinates, fieldDefinition, dataFetcherMap, systemDataFetcherMap);
    }",Returns a data fetcher associated with a field located at specified coordinates.,1,39
5151,"private ASN1Primitive toASN1Object(
        X509Certificate cert )
        throws CertificateEncodingException
    {
        try
        {
            return new ASN1InputStream(cert.getEncoded()).readObject();
        }
        catch (Exception e)
        {
            throw new CertificateEncodingException(""Exception while encoding certificate: "" + e.toString());
        }
    }",Return a ASN1Primitive containing the encoded certificate.,1,89
5152,"public static List<SLARegistrationBean> fromJSONArray(JSONArray array) {
        List<SLARegistrationBean> list = new ArrayList<SLARegistrationBean>();
        for (Object obj : array) {
            list.add(new SLARegistrationBean((JSONObject) obj));
        }
        return list;
    }",Convert a JSONArray into a SLARegistrationBean list.,1,83
5153,"public boolean isEmpty() {
            return this.tags.isEmpty();
        }",Checks if the tag stack is empty,1,25
5154,"private static long toEpochNanos(LocalDate date) {
        long epochDay = date.toEpochDay();
        return epochDay * Conversions.NANOSECONDS_PER_DAY;
    }",Get the number of nanoseconds past epoch of the given  LocalDate.,1,44
5155,"public static String getReconcileHashCode(TreeMap<String, AtomicInteger> instanceCountMap) {
        String reconcileHashCode = """";
        for (Map.Entry<String, AtomicInteger> mapEntry : instanceCountMap
                .entrySet()) {
            reconcileHashCode = reconcileHashCode + mapEntry.getKey()
                    + STATUS_DELIMITER + mapEntry.getValue().get()
                    + STATUS_DELIMITER;
        }
        return reconcileHashCode;
    }",Gets the reconciliation hashcode.,1,111
5156,"protected TokenResponse executeRefreshToken() throws IOException {
    if (refreshToken == null) {
      return null;
    }
    return new RefreshTokenRequest(transport, jsonFactory, new GenericUrl(tokenServerEncodedUrl),
        refreshToken).setClientAuthentication(clientAuthentication)
        .setRequestInitializer(requestInitializer).execute();
  }",Executes a request for new credentials from the token server.,1,82
5157,"public String getAuthor() {
        return this.author;
    }",Return the author,1,21
5158,"public ClassLoader getClassLoader() {
        SecurityManager smgr = System.getSecurityManager();
        ClassLoader loader = getClassLoaderImpl();
        if (smgr != null && loader != null) {
            ClassLoader calling = VMStack.getCallingClassLoader();

            if (calling != null && !calling.isAncestorOf(loader)) {
                smgr.checkPermission(new RuntimePermission(""getClassLoader""));
            }
        }
        
        if (this.isPrimitive()) {
            return null;
        }
        
        if (loader == null) {
            loader = BootClassLoader.getInstance();
        }
        
        return loader;
    }",Returns the class loader which was used to load the class represented by this  Class.,1,188
5159,"public Throwable getCause() {
		return super.getCause();
	}",Returns the cause of this exception or null if no cause was set.,1,23
5160,"public boolean hasParams() {
		return !cookieParams.isEmpty() || !urlParams.isEmpty() || !formParams.isEmpty() || !headerParams.isEmpty();
	}","Tells whether or not this site has any parameters (cookies, query, form parameters, or response header fields).",1,54
5161,"public Future<HttpResponse> executeAsync(Executor executor) {
    FutureTask<HttpResponse> future = new FutureTask<HttpResponse>(new Callable<HttpResponse>() {

      public HttpResponse call() throws Exception {
        return execute();
      }
    });
    executor.execute(future);
    return future;
  }",Executes this request asynchronously in a single separate thread using the supplied executor.,1,94
5162,"@Processor
    @OAuthProtected
	@OAuthInvalidateAccessTokenOn(exception=OAuthTokenExpiredException.class)
	@Paged
	public PagingDelegate<Change> listChanges(
			final @Optional @Default(""true"") boolean includeDeleted,
			final @Optional @Default(""true"") boolean includeSubscribed,
			final @Optional @Default(""100"") int maxResults,
			final @Optional Long startChangeId,
			final PagingConfiguration pagingConfiguration
			) throws IOException {
		
		return new TokenBasedPagingDelegate<Change>() {
			
			@Override
			protected List<Change> doGetPage() throws IOException {
				ChangeList response = client.changes().list()
						.setIncludeDeleted(includeDeleted)
						.setIncludeSubscribed(includeSubscribed)
						.setMaxResults(maxResults)
						.setPageToken(this.getPageToken())
						.setStartChangeId(startChangeId)
						.execute();
				
				this.setPageToken(response.getNextPageToken());
				return Change.valueOf(response.getItems(), Change.class);
			}
		};
	}",Returns a paginated  Iterator with the  org.mule.module.google.drive.model.Change objects for a user @sample.xml ../../../doc/GoogleDriveConnector.xml.sample google-drive:list-changes,1,253
5163,"public static SqlParser create(String sql, Config config) {
    SqlAbstractParserImpl parser =
        config.parserFactory().getParser(new StringReader(sql));

    return new SqlParser(sql, parser, config);
  }",Creates a SqlParser to parse the given string using the parser implementation created from given  SqlParserImplFactory with given quoting syntax and casing policies for identifiers.,1,66
5164,"public AtmosphereRequest getRequest() {
        return atmosphereRequest;
    }",Return the associated  AtmosphereRequest,1,19
5165,"public ClusterSummary getClusterInfo() throws TException {
        long start = System.nanoTime();
        try {
            StormClusterState stormClusterState = data.getStormClusterState();

            Map<String, Assignment> assignments = new HashMap<String, Assignment>();

            // get TopologySummary
            List<TopologySummary> topologySummaries = NimbusUtils.getTopologySummary(stormClusterState, assignments);

            // all supervisors
            Map<String, SupervisorInfo> supervisorInfos = Cluster.get_all_SupervisorInfo(stormClusterState, null);

            // generate SupervisorSummaries
            List<SupervisorSummary> supervisorSummaries = NimbusUtils.mkSupervisorSummaries(supervisorInfos, assignments);

            NimbusSummary nimbusSummary = NimbusUtils.getNimbusSummary(stormClusterState, supervisorSummaries, data);

            return new ClusterSummary(nimbusSummary, supervisorSummaries, topologySummaries);
        } catch (TException e) {
            LOG.info(""Failed to get ClusterSummary "", e);
            throw e;
        } catch (Exception e) {
            LOG.info(""Failed to get ClusterSummary "", e);
            throw new TException(e);
        } finally {
            long end = System.nanoTime();
            SimpleJStormMetric.updateNimbusHistogram(""getClusterInfo"", (end - start) / TimeUtils.NS_PER_US);
        }
    }","get cluster's summary, it will contain SupervisorSummary and TopologySummary",1,316
5166,"public boolean isResolvable(PicoContainer container, ComponentAdapter adapter, Class expectedType) {
        final Class collectionType = getCollectionType(expectedType);
        return collectionType != null && (emptyCollection || getResolvingAdapters(container, adapter, expectedType).length > 0);
    }",Check for a successful dependency resolution of the parameter for the expected type.,1,79
5167,"public ResultSet executeQuery(String sql) throws SQLException
   {
        if( type==ResultSet.TYPE_FORWARD_ONLY &&
            concurrency==ResultSet.CONCUR_READ_ONLY )
        {
            ResultSet rs = internalExecuteQuery( sql );

            if( rs != null )
                return rs;
            else
                throw new SQLException(""No ResultSet was produced."");
        }
        else
            return new freetds.CursorResultSet(this, sql);
   }",Execute an SQL statement that returns a single ResultSet.,1,121
5168,"protected Object convertUnsignedMediumint(Column column, Field fieldDefn, Object data){
        if (data == null) {
            data = fieldDefn.schema().defaultValue();
        }
        if (data == null) {
            if (column.isOptional()) return null;
            return 0;
        }

        if (data instanceof Integer) {
            return MySqlUnsignedIntegerConverter.convertUnsignedMediumint((int)data);
        }
        else if (data instanceof Number) {
            return MySqlUnsignedIntegerConverter.convertUnsignedMediumint(((Number) data).intValue());
        }
        else {
            //We continue with the original converting method (integer) since we have an unsigned Medium
            return convertInteger(column, fieldDefn, data);
        }
    }",Convert the a value representing a Unsigned MEDIUMINT value to the correct Unsigned SMALLINT representation.,1,193
5169,"@SuppressWarnings(""unchecked"")
	public static String append(final String url, final Map<String, ?> params) {
		if (params == null || params.isEmpty())
			return url;

		final StringBuilder result = new StringBuilder(url);

		// Add trailing slash if the base URL doesn't have any path segments.
		// The following test is checking for the last slash not being part of
		// the protocol to host separator '://'.
		int firstColon = url.indexOf(':');
		int lastSlash = url.lastIndexOf('/');
		if (firstColon + 2 == lastSlash)
			result.append('/');
		result.append('?');

		Entry<String, ?> entry;
		Object value;
		Iterator<?> iterator = params.entrySet().iterator();
		entry = (Entry<String, ?>) iterator.next();
		result.append(entry.getKey());
		result.append('=');
		value = entry.getValue();
		if (value != null)
			result.append(value);

		while (iterator.hasNext()) {
			result.append('&');
			entry = (Entry<String, ?>) iterator.next();
			result.append(entry.getKey());
			result.append('=');
			value = entry.getValue();
			if (value != null)
				result.append(value);
		}

		return result.toString();
	}",Append given query parameters to base URL,1,391
5170,"public Iterator<Component> getComponentIterator() {
        return Collections.unmodifiableList(components).iterator();
    }",Gets the component container iterator for going through all the components (tab contents).,1,31
5171,"static public IStructuredTextExpert getStatefulExpert(String type, StructuredTextEnvironment environment) {
		StructuredTextTypeHandler handler = StructuredTextTypeHandlerFactory.getHandler(type);
		if (handler == null)
			throw new IllegalArgumentException(""Invalid type argument""); //$NON-NLS-1$
		return getStatefulExpert(handler, environment);
	}",Obtains a IStructuredTextExpert instance for processing structured text with the specified type handler and the specified environment.,1,77
5172,"private static X509ExtendedTrustManager findFirstX509TrustManager(TrustManager[] tms)
            throws KeyManagementException {
        for (TrustManager tm : tms) {
            if (tm instanceof X509ExtendedTrustManager) {
                return (X509ExtendedTrustManager) tm;
            }
            if (tm instanceof X509TrustManager) {
                return new X509ExtendedTrustManagerWrapper((X509TrustManager) tm);
            }
        }
        return null;
    }",Finds the first  X509ExtendedTrustManager or  X509TrustManager element in the provided array.,1,106
5173,"public Interval gap(ReadableInterval interval) {
        interval = DateTimeUtils.getReadableInterval(interval);
        if (overlaps(interval) || abuts(interval)) {
            return null;
        }
        long otherStart = interval.getStartMillis();
        long otherEnd = interval.getEndMillis();
        long thisStart = getStartMillis();
        long thisEnd = getEndMillis();
        if (thisStart >= otherEnd) {
            return new Interval(otherEnd, thisStart, getChronology());
        } else {
            return new Interval(thisEnd, otherStart, getChronology());
        }
    }",Gets the gap between this interval and another interval.,1,172
5174,"public static RequestQueue newRequestQueue(IRestProtocol implRestConnection, int threadPoolSize) {
        return newRequestQueue(RestParser.getInstance(implRestConnection), threadPoolSize);
    }","Create a new request queue, using NoHttp default request executor  RestProtocol and default response parser  RestParser.",1,40
5175,"public static String deprocess(String str, STextProcessor processor) {
		if ((str == null) || (str.length() <= 1))
			return str;

		// make sure that LRE/PDF are added around the string
		STextEnvironment env = new STextEnvironment(null, false, STextEnvironment.ORIENT_UNKNOWN);
		if (!env.isProcessingNeeded())
			return str;
		return STextEngine.fullToLeanText(processor, env, str, null);
	}",Removes directional formatting characters in the given string.,1,124
5176,"public Expression getKey() {
    return key;
  }",Return the expression computing the key with which the value will be associated.,1,19
5177,"public static Properties parse(String s, Properties props)
        throws SQLException
    {
        return new ConnectStringParser(s).parse_(props);
    }",Parses the connect string into an existing Properties object.,1,45
5178,"public long get(WithAttributes withAttributes) {
        return withAttributes.getAttributes().get(this);
    }",Extracts the attribute map from the specified  WithAttributes and returns the value of this attribute from the map.,1,31
5179,"public static List getEditorSearchPath() {
        // grrrr, Arrays.asList() returns a readonly List item, which makes it difficult
        // to append additional items.  This means we have to do this manually.

        // start by getting the list from the editor manager, which is returned as an
        // array of Strings.
        String[] paths = PropertyEditorManager.getEditorSearchPath();

        // get a list matching the initial size...we don't always request this with the intend to append.
        List pathList = new ArrayList(paths.length);

        // now MANUALLY add each of the items in the array.
        for (int i = 0; i < paths.length; i++) {
            pathList.add(paths[i]);
        }

        return pathList;
    }",Get a list containing all of the packages in the editor search path.,1,120
5180,"public ResultSetMetaData getMetaData() throws SQLException {
        try {
            debugCodeCall(""getMetaData"");
            checkClosed();
            ResultInterface result = command.getMetaData();
            if(result == null) {
                return null;
            }
            int id = getNextId(TraceObject.RESULT_SET_META_DATA);
            if(debug()) {
                debugCodeAssign(""ResultSetMetaData"", TraceObject.RESULT_SET_META_DATA, id);
                debugCodeCall(""getMetaData"");
            }
            JdbcResultSetMetaData meta = new JdbcResultSetMetaData(null, this, result, session.getTrace(), id);
            return meta;
        } catch(Throwable e) {
            throw logAndConvert(e);
        }
    }",Gets the result set metadata of the query returned when the statement is executed.,1,188
5181,"public static Set<BitSet> getUniqueKeys(RelNode rel, boolean ignoreNulls) {
    final BuiltInMetadata.UniqueKeys metadata =
        rel.metadata(BuiltInMetadata.UniqueKeys.class);
    return metadata.getUniqueKeys(ignoreNulls);
  }",Returns the  BuiltInMetadata.UniqueKeys#getUniqueKeys(boolean) statistic.,1,61
5182,"public static MerkleTreeLeaf parseMerkleTreeLeaf(InputStream in) {
    int version = (int) readNumber(in, CTConstants.VERSION_LENGTH);
    if (version != Ct.Version.V1.getNumber()) {
      throw new SerializationException(String.format(""Unknown version: %d"", version));
    }

    int leafType = (int) readNumber(in, 1);
    if (leafType != Ct.MerkleLeafType.TIMESTAMPED_ENTRY_VALUE) {
      throw new SerializationException(String.format(""Unknown entry type: %d"", leafType));
    }

    return new MerkleTreeLeaf(Ct.Version.valueOf(version), Ct.MerkleLeafType.valueOf(leafType), parseTimestampedEntry(in));
  }",Parses a  MerkleTreeLeaf from binary encoding.,1,184
5183,"public Insets getBorderInsets(Component c) { 
        return getBorderInsets(c, null);
    }","This default implementation returns a new Insets instance where the top, left, bottom, and right fields are set to 0.",1,29
5184,"public static Type<?> valueOf(String name) {
		return ModTheMod.getGame().getTypeManager().getType(name);
	}",Gets a  Type from its name.,1,40
5185,"private XmlAttributeNode getScriptSourcePath(XmlTagNode node) {
    for (XmlAttributeNode attribute : node.getAttributes()) {
      if (attribute.getName().getLexeme().equals(SRC)) {
        return attribute;
      }
    }
    return null;
  }","Return the first source attribute for the given tag node, or  null if it does not exist.",1,75
5186,"public String getSearchPath() {
    // Java Mode doesn't need any default external jars at the moment.
    // This is here for Android Mode so that it can add its android.jar file.
    return null;
  }",Any modes that extend JavaMode can override this method to add additional,1,25
5187,"public synchronized List<ColumnIdentifier> getColumns(TableIdentifier tbl)
	{
		String schema = getSchemaToUse(tbl.getSchema());

		TableIdentifier toSearch = tbl.createCopy();
		toSearch.adjustCase(dbConnection);
		if (toSearch.getSchema() == null)
		{
			toSearch.setSchema(schema);
		}

		List<ColumnIdentifier> cols = this.objects.get(toSearch);
		if (cols == null)
		{
			try
			{
				TableDefinition def = dbConnection.getMetadata().getTableDefinition(toSearch);
				addTable(def);
			}
			catch (SQLException sql)
			{
				LogMgr.logWarning(""DbObjectCache.getColumns()"", ""Error retrieving table definition"", sql);
				return null;
			}
		}

		// To support Oracle public synonyms, try to find a table with that name but without a schema
		if (retrieveOraclePublicSynonyms && toSearch.getSchema() != null && cols == null)
		{
			toSearch.setSchema(null);
			toSearch.setType(null);
			cols = this.objects.get(toSearch);
			if (cols == null)
			{
				// retrieve Oracle PUBLIC synonyms
				this.getTables(""PUBLIC"");
				cols = this.objects.get(toSearch);
			}
		}

		if (CollectionUtil.isEmpty(cols))
		{
			TableIdentifier tblToUse = null;

			// use the stored key because that might carry the correct type attribute
			// TabelIdentifier.equals() doesn't compare the type, only the expression
			// so we'll get a containsKey() == true even if the type is different
			// (which is necessary because the TableIdentifier passed to this
			// method will never contain a type!)
			// only using objects.get() would not return anything!
			if (objects.containsKey(toSearch))
			{
				// we have already retrieved the list of tables, but not the columns for this table
				// the table identifier in the object map contains correct type and schema information, so we need
				// to use that
				tblToUse = findEntry(toSearch);
			}
			else
			{
				// retrieve the real table identifier based on the table name
				tblToUse = this.dbConnection.getMetadata().findObject(toSearch);
			}

			try
			{
				cols = this.dbConnection.getMetadata().getTableColumns(tblToUse);
			}
			catch (Throwable e)
			{
				LogMgr.logError(""DbObjectCache.getColumns"", ""Error retrieving columns for "" + tblToUse, e);
				cols = null;
			}

			if (tblToUse != null && CollectionUtil.isNonEmpty(cols))
			{
				this.objects.put(tblToUse, cols);
			}

		}
		return Collections.unmodifiableList(cols);
	}",Return the columns for the given table.,1,576
5188,"@Override
    public final TYPE next() {
        if (next == null) {
            return fromIterator.next();
        } else {
            final TYPE result = next;
            next = null;
            return result;
        }
    }",Returns the next element of the Iterable.,1,78
5189,"private List<Long> getRcsRawContactIdFromPhoneNumber(String phoneNumber) {
    	List<Long> contactsIds = new ArrayList<Long>();
    	
        String[] projection = { Data.RAW_CONTACT_ID };
        String selection = Data.MIMETYPE + ""=? AND PHONE_NUMBERS_EQUAL("" + Phone.NUMBER + "", ?)"";
        String[] selectionArgs = { MIMETYPE_NUMBER, phoneNumber };
        String sortOrder = Data.RAW_CONTACT_ID;

        Cursor cur = ctx.getContentResolver().query(Data.CONTENT_URI, 
        		projection, 
        		selection, 
        		selectionArgs,
                sortOrder);
        if (cur != null) {
            while (cur.moveToNext()) {
            	long rcsRawContactId = cur.getLong(cur.getColumnIndex(Data.RAW_CONTACT_ID));
            	contactsIds.add(rcsRawContactId);
            }
            cur.close();
        }

        return contactsIds;
    }",Utility to find the RCS rawContactIds for a specific phone number.,1,240
5190,"public MenuItem addItem(SafeHtml html, ScheduledCommand cmd) {
    return addItem(new MenuItem(html, cmd));
  }","Adds a menu item to the bar containing SafeHtml, that will fire the given command when it is selected.",1,38
5191,"private static ObjectName asObjectName(Object componentKey) throws MalformedObjectNameException {
        if (componentKey == null) {
            throw new NullPointerException(""componentKey cannot be null"");
        }
        if (componentKey instanceof ObjectName) {
            return (ObjectName) componentKey;
        }
        if (componentKey instanceof Class) {
            Class clazz = (Class) componentKey;
            return new ObjectName(""picomx:type="" + clazz.getName());
        } else {
            String text = componentKey.toString();
            // Fix, so it works under WebSphere ver. 5
            if (text.indexOf(':') == -1) {
                text = ""picomx:type="" + text;
            }
            return new ObjectName(text);
        }
    }",Ensures that the given componentKey is converted to a JMX ObjectName,1,201
5192,"public <V extends Visitor<? super X>> V visit(V visitor)
    {
        for (X x : this) {
            visitor.visit(x);
        }

        return visitor;
    }",Applies  visitor to each item,1,66
5193,"public RepositoryMetadata lookupComponent(Class<?> repositoryClass)
    {
        if (repositoriesMetadata.containsKey(repositoryClass))
        {
            return repositoriesMetadata.get(repositoryClass);
        }
        throw new RuntimeException(""Unknown Repository class "" + repositoryClass.getName());
    }",Lookup the  RepositoryMetadata for a specific Repository class.,1,70
5194,"public RequestBody serialize(Object obj, String contentType) throws ApiException {
    if (obj instanceof byte[]) {
      // Binary (byte array) body parameter support.
      return RequestBody.create(MediaType.parse(contentType), (byte[]) obj);
    } else if (obj instanceof File) {
      // File body parameter support.
      return RequestBody.create(MediaType.parse(contentType), (File) obj);
    } else if (isJsonMime(contentType)) {
      String content;
      if (obj != null) {
        content = json.serialize(obj);
      } else {
        content = null;
      }
      return RequestBody.create(MediaType.parse(contentType), content);
    } else {
      throw new ApiException(""Content type \"""" + contentType + ""\"" is not supported"");
    }
  }",Serialize the given Java object into request body according to the object's class and the request Content-Type.,1,232
5195,"public int[] set(PartialInstant instant, int fieldIndex, int[] values, int newValue) {
        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(instant), getMaximumValue(instant));
        values[fieldIndex] = newValue;
        return values;
    }",Sets a value using the specified partial instant.,1,76
5196,"public VideoCallProvider getVideoCallProvider() {
        return mVideoCallProvider;
    }",Returns the  VideoCallProvider for the connection.,1,19
5197,"public String[] checkAllWords(String words) {
        List<String> misspelledWords = new ArrayList<String>();
        StringWordTokenizer tokenizer = new StringWordTokenizer(words);

        while (tokenizer.hasMoreWords()) {
            String word = tokenizer.nextWord();
            if (!isWordCorrect(word, tokenizer.isNewSentence())) {
                misspelledWords.add(word);
            }
        }
        return misspelledWords.toArray(new String[0]);
    }",Spell checks all words in the input string and returns an array of misspelled words.,1,132
5198,"public static String getMessageId(SipRequest request) {
		String result = null;
		try {
			// Read ID from multipart content
		    String content = request.getContent();
			int index = content.indexOf(ImdnUtils.HEADER_IMDN_MSG_ID);
			if (index != -1) {
				index = index+ImdnUtils.HEADER_IMDN_MSG_ID.length()+1;
				String part = content.substring(index);
				String msgId = part.substring(0, part.indexOf(CRLF));
				result = msgId.trim();
			}
		} catch(Exception e) {
		}
		return result;
	}",Returns the message ID from a SIP request,1,174
5199,"public TupleFilter flatFilter(int maxFlatChildrenSize) {
        return flattenInternal(this, maxFlatChildrenSize);
    }",throws IllegalStateException when the flat children exceed the maxFlatChildrenSize,1,28
5200,"public BackupResultStatus backupSession( final Session session ) {
        if ( _log.isInfoEnabled() ) {
            _log.debug( ""Trying to store session in memcached: "" + session.getId() );
        }

        final MemcachedBackupSession backupSession = (MemcachedBackupSession) session;

        final BackupSessionTask task = getOrCreateBackupSessionTask( backupSession );

        final Map<String, Object> attributes = backupSession.getAttributesInternal();

        final byte[] attributesData = _transcoderService.serializeAttributes( backupSession, attributes );
        final int hashCode = Arrays.hashCode( attributesData );
        if ( backupSession.getDataHashCode() != hashCode
                || task.sessionCookieWasRelocated() ) {
            final byte[] data = _transcoderService.serialize( backupSession, attributesData );

            final BackupResult result = task.backupSession( data, attributesData );
            if ( result.getAttributesData() != null ) {
                backupSession.setDataHashCode( Arrays.hashCode( result.getAttributesData() ) );
            }

            return result.getStatus();
        } else {
            return BackupResultStatus.SKIPPED;
        }
    }",Store the provided session in memcached if the session was modified or if the session needs to be relocated.,1,312
5201,"public static final Test suite() {
            return null;
        }",Provides a null test suite so that JUnit will not try to instantiate this class directly.,1,23
5202,"public final int getLine() {
        return this.bufline[this.bufpos];
    }",Get the line number,1,28
5203,"public static EBoolean startsWith(Expr<String> left, Expr<String> right) {
        return operationFactory.createBoolean(Ops.STARTSWITH, left, right);
    }",Expr : left.startsWith(right),1,48
5204,"boolean findCellForSpan(int[] cellXY, int spanX, int spanY) {
            return findCellForSpan(cellXY, spanX, spanY, true);
        }",This method can be called only once! Calling #findVacantCellsFromOccupied will restore the ability to call this method.,1,44
5205,"public static DocumentFactory createDocumentFactory(ServiceManager manager, Session session) {
        DocumentFactory factory;
        DocumentManager docManager = null;
        try {
            docManager = (DocumentManager) manager.lookup(DocumentManager.ROLE);
            factory = docManager.createDocumentIdentityMap(session);
        } catch (ServiceException e) {
            throw new RuntimeException(e);
        } finally {
            if (docManager != null) {
                manager.release(docManager);
            }
        }
        return factory;
    }",Creates a document factory.,1,142
5206,"public static FxEnvironment getFilteredEnvironment() {
        return new FxFilteredEnvironment(getEnvironment());
    }",Return a  com.flexive.shared.structure.FxFilteredEnvironment for the calling user.,1,28
5207,"public Split start(L location) {
		if (stopwatchSource.isMonitored(location)) {
			return stopwatchSource.getMonitor(location).start();
		} else {
			return Split.DISABLED;
		}
	}","If given location is monitored, then a  Stopwatch is started and  Split returned - otherwise disabled Split is returned.",1,63
5208,"public Menu getControlMenu(final Control c) {
		Menu controlMenu = ControlHandler.getInstance().getMenu(c);
		if(controlMenu == null) {
			throw new CoreLayerException(c.getClass() +"" Has no menu"");
		}
		return controlMenu;
	}",Returns menu of given control,1,79
5209,"public String toDefaultValue(Schema p) {
        if (p instanceof StringSchema) {
            StringSchema dp = (StringSchema) p;
            if (dp.getDefault() != null) {
                return ""@\"""" + dp.getDefault() + ""\"""";
            }
        } else if (p instanceof BooleanSchema) {
            BooleanSchema dp = (BooleanSchema) p;
            if (dp.getDefault() != null) {
                if (dp.getDefault().toString().equalsIgnoreCase(""false""))
                    return ""@(NO)"";
                else
                    return ""@(YES)"";
            }
        } else if (p instanceof DateSchema) {
            // TODO
        } else if (p instanceof DateTimeSchema) {
            // TODO
        } else if (p instanceof NumberSchema) {
            NumberSchema dp = (NumberSchema) p;
            if (dp.getDefault() != null) {
                return ""@"" + dp.getDefault().toString();
            }
        } else if (p instanceof IntegerSchema) {
            IntegerSchema dp = (IntegerSchema) p;
            if (dp.getDefault() != null) {
                return ""@"" + dp.getDefault().toString();
            }
        }

        return null;
    }",Return the default value of the schema,1,374
5210,"public boolean isBuffered() {
		return queue.buffered();
	}",Indicates if the queue is buffered,1,23
5211,"public ReadableInstant withDateTimeZone(DateTimeZone newDateTimeZone) {
        final Chronology originalChrono = getChronology();
        if (originalChrono == null) {
            // Without an original chronology, no new time zone can be
            // set. Call withMillis to allow subclass to decide if a clone
            // should be made or not.
            return withMillis(getMillis());
        }
        return withChronology(originalChrono.withDateTimeZone(newDateTimeZone));
    }","Gets a copy of this instant with a different time zone, preserving the millisecond instant.",1,81
5212,"@Transactional(readOnly = true)
	@Override
	public int getAllCount(final String currentUser, final Set<String> userRoles, EphesoftUser ephesoftUser) {
		return batchInstanceDao.getAllCount(currentUser, userRoles, ephesoftUser);
	}",An api to return total count of batches from the batch instance table having access by the user roles on the basis of ephesoft user.,1,63
5213,"public String toDefaultValue(Schema p) {
        if (ModelUtils.isDateSchema(p)) {
            // TODO
        } else if (ModelUtils.isDateTimeSchema(p)) {
            // TODO
        } else if (ModelUtils.isNumberSchema(p)) {
            if (p.getDefault() != null) {
                return ""@"" + p.getDefault().toString();
            }
        } else if (ModelUtils.isIntegerSchema(p)) {
            if (p.getDefault() != null) {
                return ""@"" + p.getDefault().toString();
            }
        } else if (ModelUtils.isStringSchema(p)) {
            if (p.getDefault() != null) {
                return ""@\"""" + (String) p.getDefault() + ""\"""";
            }
        } else if (ModelUtils.isBooleanSchema(p)) {
            if (p.getDefault() != null) {
                if (p.getDefault().toString().equalsIgnoreCase(""false""))
                    return ""@(NO)"";
                else
                    return ""@(YES)"";
            }
        }

        return null;
    }",Return the default value of the schema,1,328
5214,"public Node transform(QueryVisitor queryVisitor) {
        NodeVisitorImpl nodeVisitor = new NodeVisitorImpl(queryVisitor, new QueryVisitorStub());
        Map<Class<?>, Object> rootVars = new LinkedHashMap<>();
        rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, rootParentType, null, null));

        Node root = roots.stream().findFirst()
                .orElseThrow(() -> new IllegalArgumentException(""Single root node is required for transformation.""));
        TraverserVisitor<Node> nodeTraverserVisitor = new TraverserVisitor<Node>() {

            @Override
            public TraversalControl enter(TraverserContext<Node> context) {
                context.setVar(LeaveOrEnter.class, LeaveOrEnter.ENTER);
                return context.thisNode().accept(context, nodeVisitor);
            }

            @Override
            public TraversalControl leave(TraverserContext<Node> context) {
                context.setVar(LeaveOrEnter.class, LeaveOrEnter.LEAVE);
                return  context.thisNode().accept(context, nodeVisitor);
            }
        };
        return new TreeTransformer<>(AST_NODE_ADAPTER).transform(root, nodeTraverserVisitor, rootVars);
    }",Visits the Document in pre-order and allows to transform it using  graphql.util.TreeTransformerUtil methods.,1,295
5215,"public final char readChar() throws IOException {
        if (this.inBuf > 0) {
            --this.inBuf;

            if (++this.bufpos == this.bufsize) {
                this.bufpos = 0;
            }

            return this.buffer[this.bufpos];
        }

        if (++this.bufpos >= this.maxNextCharInd) {
            fillBuff();
        }

        char c = this.buffer[this.bufpos];

        updateLineColumn(c);

        return (c);
    }",Read the next character,1,158
5216,"public static String export() {
        RequestLog current = RLOG.get();
        record(new Durations(current.aggregateDurations()));
        record(new Threads(current.threadIds));
        return LogFormatterProvider.getInstance().format(current.info);
    }",Exports current thread's request log object as a formatted string without resetting it.,1,76
5217,"public static Parameter getReferencedParameter(OpenAPI openAPI, Parameter parameter) {
        if (parameter != null && StringUtils.isNotEmpty(parameter.get$ref())) {
            String name = getSimpleRef(parameter.get$ref());
            Parameter referencedParameter = getParameter(openAPI, name);
            if(referencedParameter != null) {
                return referencedParameter;
            }
        }
        return parameter;
    }","If a Parameter contains a reference to an other Parameter with '$ref', returns the referenced Parameter if it is found or the actual Parameter in the other cases.",1,115
5218,"public String renderOrderByElement(String expression, String collation, String order, NullPrecedence nullPrecedence) {
		if ( nullPrecedence == null || nullPrecedence == NullPrecedence.NONE ) {
			return super.renderOrderByElement( expression, collation, order, NullPrecedence.NONE );
		}

		// DB2 FTW!  A null precedence was explicitly requested, but DB2 ""support"" for null precedence
		// is a joke.  Basically it supports combos that align with what it does anyway.  Here is the
		// support matrix:
		//		* ASC + NULLS FIRST -> case statement
		//		* ASC + NULLS LAST -> just drop the NULLS LAST from sql fragment
		//		* DESC + NULLS FIRST -> just drop the NULLS FIRST from sql fragment
		//		* DESC + NULLS LAST -> case statement

		if ( ( nullPrecedence == NullPrecedence.FIRST  && ""desc"".equalsIgnoreCase( order ) )
				|| ( nullPrecedence == NullPrecedence.LAST && ""asc"".equalsIgnoreCase( order ) ) ) {
			// we have one of:
			//		* ASC + NULLS LAST
			//		* DESC + NULLS FIRST
			// so just drop the null precedence.  *NOTE: we could pass along the null precedence here,
			// but only DB2 9.7 or greater understand it; dropping it is more portable across DB2 versions
			return super.renderOrderByElement( expression, collation, order, NullPrecedence.NONE );
		}

		return String.format(
				Locale.ENGLISH,
				""case when %s is null then %s else %s end, %s %s"",
				expression,
				nullPrecedence == NullPrecedence.FIRST ? ""0"" : ""1"",
				nullPrecedence == NullPrecedence.FIRST ? ""1"" : ""0"",
				expression,
				order
		);
	}","Handle DB2 ""support"" for null precedence...",1,300
5219,"public Collection<Tree> getRelatedNodes(Tree t, Tree root) {
    if (root.value() == null) {
      root.setValue(""ROOT"");  // todo: cdm: it doesn't seem like this line should be here
    }
    Set<Tree> nodeList = new LinkedHashSet<Tree>();
    for (TregexPattern p : targetPatterns) {    // cdm: I deleted: && nodeList.isEmpty()
      TregexMatcher m = p.matcher(root);
      while (m.findAt(t)) {
        nodeList.add(m.getNode(""target""));
        //System.out.println(""found "" + this + ""("" + t + "", "" + m.getNode(""target"") + "") using pattern "" + p);
      }
    }
    return nodeList;
  }","Given a Tree node t, attempts to return a list of nodes to which node t has this grammatical relation.",1,155
5220,"public static String getClassName(String memberID, boolean isClassMember) {
        int pos = memberID.indexOf(ALT_MEMBER_SEPARATOR);
        // uses alternative separator, easy
        if (pos != -1) return memberID.substring(0, pos);

        pos = memberID.indexOf('(');
        if ( pos != -1 ) {
            // has a descriptor, is a method ID, strip last member part
            pos = memberID.lastIndexOf('.', pos);
            return pos != -1 ? memberID.substring(0, pos) : """";
        }

        if (isClassMember) {
            // field or class name, cannot decide, assume it is a field
            pos = memberID.lastIndexOf('.');
            return pos != -1 ? memberID.substring(0, pos) : """";
        } else {
            // assume it is a class name
            return memberID;
        }
    }","Parse a member ID, with or without classname, with or without descriptor.",1,223
5221,"public final FacebookException getError() {
        return error;
    }","Returns the error returned for this request, if any.",1,21
5222,"private String terminalToShowWhenClosing(String handle)
   {
      int terminalClosing = terminals_.indexOfTerminal(handle);
      if (terminalClosing > 0)
         return terminals_.terminalHandleAtIndex(terminalClosing - 1);
      else if (terminalClosing + 1 < terminals_.terminalCount())
         return terminals_.terminalHandleAtIndex(terminalClosing + 1);
      else
         return null;
   }",Handle of terminal to show after closing indicated terminal.,1,103
5223,"public IncidentsTask createReportsTask() {
		return new IncidentsTask(url);
	}",Create incidents task object,1,24
5224,"public NVP<Long, Double> reset(final long newStartMs, final long newCount) {
		final long[] priorWindow = TIME_WINDOW_UPDATER.getAndSet(this, windowRangeFromMs(newStartMs, windowWidth));
		final long priorCount = count;
		count = newCount;
		return new NVP<Long, Double>(priorWindow[1], calcRate(priorCount, windowWidth));
	}",Resets the count to zero and sets the time window according to the passed ms timestamp,1,108
5225,"private int[] getEnteredTime(Boolean[] enteredZeros) {
        int amOrPm = -1;
        int startIndex = 1;
        if (!mIs24HourMode && isTypedTimeFullyLegal()) {
            int keyCode = mTypedTimes.get(mTypedTimes.size() - 1);
            if (keyCode == getAmOrPmKeyCode(AM)) {
                amOrPm = AM;
            } else if (keyCode == getAmOrPmKeyCode(PM)){
                amOrPm = PM;
            }
            startIndex = 2;
        }
        int minute = -1;
        int hour = -1;
        int second = 0;
        int shift = mEnableSeconds ? 2 : 0;
        for (int i = startIndex; i <= mTypedTimes.size(); i++) {
            int val = getValFromKeyCode(mTypedTimes.get(mTypedTimes.size() - i));
            if (mEnableSeconds) {
                if (i == startIndex) {
                    second = val;
                } else if (i == startIndex + 1) {
                    second += 10*val;
                    if (enteredZeros != null && val == 0) {
                        enteredZeros[2] = true;
                    }
                }
            }
            if (i == startIndex + shift) {
                minute = val;
            } else if (i == startIndex + shift + 1) {
                minute += 10*val;
                if (enteredZeros != null && val == 0) {
                    enteredZeros[1] = true;
                }
            } else if (i == startIndex + shift + 2) {
                hour = val;
            } else if (i == startIndex + shift + 3) {
                hour += 10*val;
                if (enteredZeros != null && val == 0) {
                    enteredZeros[0] = true;
                }
            }
        }

        return new int[] {hour, minute, second, amOrPm};
    }","Get the currently-entered time, as integer values of the hours, minutes and seconds typed.",1,604
5226,"public int get(WithAttributes withAttributes) {
        return withAttributes.getAttributes().get(this);
    }",Extracts the attribute map from the specified  WithAttributes and returns the value of this attribute from the map.,1,31
5227,"public Collection getDistancesMap(Group run, String year) {
		IWContext iwc = IWContext.getInstance();
		Map disMap = new LinkedHashMap();
		Collection distances = null;
		Collection type = new ArrayList();
		type.add(IWMarathonConstants.GROUP_TYPE_RUN_DISTANCE);
		Iterator yearsIter = getYears(run).iterator();
		while (yearsIter.hasNext()) {
			Group y = (Group) yearsIter.next();
			if (y.getName().equals(year)) {
				try {
					distances = getGroupBiz(iwc).getChildGroupsRecursiveResultFiltered(y, type, true);
				}
				catch (Exception e) {
					distances = null;
				}
			}
		}
		return distances;
	}",Gets a Collection of distances for a specific run and year.,1,214
5228,"final public Token getNextToken() {
        if (this.token.next != null) {
            this.token = this.token.next;
        } else {
            this.token = this.token.next = this.token_source.getNextToken();
        }

        this.jj_ntk = -1;
        this.jj_gen++;

        return this.token;
    }",Get the next token,1,110
5229,"public boolean isOK() {
        return (serialIO != null);
    }",Checks if the serial communication channel is open.,1,26
5230,"public static String deprocess(String str) {
		if ((str == null) || (str.length() <= 1))
			return str;
		STextEnvironment env = new STextEnvironment(null, false, STextEnvironment.ORIENT_UNKNOWN);
		if (!env.isProcessingNeeded())
			return str;

		StringBuffer buf = new StringBuffer();
		int strLen = str.length();
		for (int i = 0; i < strLen; i++) {
			char c = str.charAt(i);
			switch (c) {
				case LRM :
					continue;
				case LRE :
					continue;
				case PDF :
					continue;
				default :
					buf.append(c);
			}
		}
		return buf.toString();
	}",Removes directional formatting characters in the given string.,1,238
5231,"public boolean isBoolean() {
        return raw.equals(""true"") || raw.equals(""false"");
    }",Checks whether this ChatSection's value can be parsed as a boolean,1,38
5232,"public Material asMaterialFromName() {
        return Material.getMaterial(raw.toUpperCase());
    }",Gets the material whose name is the same as the raw value (ignores case),1,28
5233,"public ArrayList getAllImageSrcs() {
        return this.img_src_all;
    }",Get the list of src attributes for all images,1,21
5234,"public List<String> dependencyPathBetween(int start, int end, Optional<Function<Sentence, List<String>>> selector) {
    // Get paths from a node to the root of the sentence
    LinkedList<Integer> rootToStart = new LinkedList<>();
    LinkedList<Integer> rootToEnd = new LinkedList<>();
    int startAncestor = start;
    List<Optional<Integer>> governors = sentence.governors();
    Set<Integer> seenVertices = new HashSet<>();
    while (startAncestor >= 0 && governors.get(startAncestor).isPresent()) {
      if (seenVertices.contains(startAncestor)) {
        // Found loopiness -- revert to BFS
        return loopyDependencyPathBetween(start, end, selector);
      }
      seenVertices.add(startAncestor);
      rootToStart.addFirst(startAncestor);
      startAncestor = governors.get(startAncestor).get();
    }
    if (startAncestor == -1) {
      rootToStart.addFirst(-1);
    }
    int endAncestor = end;
    seenVertices.clear();
    while (endAncestor >= 0 && governors.get(endAncestor).isPresent()) {
      if (seenVertices.contains(endAncestor)) {
        // Found loopiness -- revert to BFS
        return loopyDependencyPathBetween(start, end, selector);
      }
      seenVertices.add(endAncestor);
      rootToEnd.addFirst(endAncestor);
      endAncestor = governors.get(endAncestor).get();
    }
    if (endAncestor == -1) {
      rootToEnd.addFirst(-1);
    }

    // Get least common node
    int leastCommonNodeIndex = (rootToStart.size() == 0 || rootToEnd.size() == 0 || !rootToStart.get(0).equals(rootToEnd.get(0))) ? -1 : 0;
    for (int i = 1; i < Math.min(rootToStart.size(), rootToEnd.size()); ++i) {
      if (rootToStart.get(i).equals(rootToEnd.get(i))) {
        leastCommonNodeIndex = i;
      }
    }

    // Construct the path
    if (leastCommonNodeIndex < 0) {
      return Collections.emptyList();
    }
    List<String> path = new ArrayList<>();
    Optional<List<String>> words = selector.map(x -> x.apply(sentence));
    for (int i = rootToStart.size() - 1; i > leastCommonNodeIndex; --i) {
      final int index = i;
      words.ifPresent(x -> path.add(x.get(rootToStart.get(index))));
      path.add(""<-"" + sentence.incomingDependencyLabel(rootToStart.get(i)).orElse(""dep"") + ""-"");
    }
    if (words.isPresent()) {
      path.add(words.get().get(rootToStart.get(leastCommonNodeIndex)));
    }
    for (int i = leastCommonNodeIndex + 1; i < rootToEnd.size(); ++i) {
      final int index = i;
      path.add(""-"" + sentence.incomingDependencyLabel(rootToEnd.get(i)).orElse(""dep"") + ""->"");
      words.ifPresent(x -> path.add(x.get(rootToEnd.get(index))));
    }
    return path;
  }",Find the dependency path between two words in a sentence.,1,916
5235,"public static char[] union(char[]... list) {
    	StringBuilder sb = new StringBuilder();
    	
    	for (char[] characters : list) {
	        for (int i = 0; i < list.length; i++) {
	            if (!contains(sb, characters[i]))
	                sb.append(list[i]);
	        }
    	}

        char[] toReturn = new char[sb.length()];
        sb.getChars(0, sb.length(), toReturn, 0);
        Arrays.sort(toReturn);
        return toReturn;
    }",Union multiple character arrays.,1,181
5236,"public String getSourceTableName()
	{
		return ((source != null) ? source.getTableName() : null);
	}","Get the name of the underlying(base) table this column comes from, if any.",1,41
5237,"public DrillFuncHolder findDrillFunction(FunctionResolver functionResolver, FunctionCall functionCall) {
    AtomicLong version = new AtomicLong();
    String newFunctionName = functionReplacement(functionCall);

    // Dynamic UDFS: First try with exact match. If not found, we may need to
    // update the registry, so sync with remote.

    if (useDynamicUdfs) {
      List<DrillFuncHolder> functions = localFunctionRegistry.getMethods(newFunctionName, version);
      FunctionResolver exactResolver = FunctionResolverFactory.getExactResolver(functionCall);
      DrillFuncHolder holder = exactResolver.getBestMatch(functions, functionCall);
      if (holder != null) {
        return holder;
      }
      syncWithRemoteRegistry(version.get());
    }

    // Whether Dynamic UDFs or not: look in the registry for
    // an inexact match.

    List<DrillFuncHolder> functions = localFunctionRegistry.getMethods(newFunctionName, version);
    return functionResolver.getBestMatch(functions, functionCall);
  }","First attempts to find the Drill function implementation that matches the name, arg types and return type.",1,199
5238,"public Timer getTimer(TimerDesc timerDesc) {
    return getTimer(timerDesc.getName(), timerDesc.getDurationUnit(),
        timerDesc.getTimeUnit());
  }",Create a new  Timer from the description and registers it under the given group and name.,1,44
5239,"private boolean isCached(Serializable collectionKey, CollectionPersister persister) {
		if ( persister.hasCache() ) {
			CacheKey cacheKey = context.getSession().generateCacheKey(
					collectionKey,
			        persister.getKeyType(),
			        persister.getRole()
			);
			return persister.getCacheAccessStrategy().get( cacheKey, context.getSession().getTimestamp() ) != null;
		}
		return false;
	}",Get a batch of uninitialized collection keys for a given role,1,117
5240,"public ScheduledReporter build() {
			ScheduledReporter reporter;

			switch (influxdbVersion) {
			case V08:
				Influxdb influxdb = buildInfluxdb();
				reporter = (executor == null)
						? new ReporterV08(registry, influxdb, clock, prefix, rateUnit, durationUnit, filter, skipIdleMetrics)
						: new ReporterV08(registry, influxdb, clock, prefix, rateUnit, durationUnit, filter, skipIdleMetrics, executor)
						;
				break;
			default:
				Sender s = buildSender();
				reporter = executor == null
						? new MeasurementReporter(s, registry, filter, rateUnit, durationUnit, clock, tags, transformer)
						: new MeasurementReporter(s, registry, filter, rateUnit, durationUnit, clock, tags, transformer, executor)
						;
			}
			return reporter;
		}","Builds a  ScheduledReporter with the given properties, sending metrics using the given InfluxDB.",1,238
5241,"protected long getTimeout( Session session ) {
        return session.getTimeout();
    }",Subclass template hook in case per-session timeout is not based on  org.jsecurity.session.Session#getTimeout().,1,28
5242,"public String getSubstituteExpression() {
        return this.substituteExpression;
    }",Returns the substitution regular expression used in the export,1,21
5243,"private PartitionTemplate assembleSar( final String name,
                                           final Configuration config,
                                           final Configuration assembly )
        throws LoomException
    {
        final Configuration[] blockConfig = assembly.getChildren( ""block"" );
        final ComponentTemplate[] blocks = buildBlocks( blockConfig, config );
        final PartitionTemplate blockPartition =
            new PartitionTemplate( ContainerConstants.BLOCK_PARTITION,
                                   new String[]{ContainerConstants.LISTENER_PARTITION},
                                   PartitionTemplate.EMPTY_SET,
                                   blocks );

        final Configuration[] listenerConfig = assembly.getChildren( ""listener"" );
        final ComponentTemplate[] listeners = buildBlockListeners( listenerConfig, config );
        final PartitionTemplate listenerPartition =
            new PartitionTemplate( ContainerConstants.LISTENER_PARTITION,
                                   new String[ 0 ],
                                   PartitionTemplate.EMPTY_SET,
                                   listeners );

        final PartitionTemplate[] partitions =
            new PartitionTemplate[]{blockPartition, listenerPartition};

        return new PartitionTemplate( name,
                                      new String[ 0 ],
                                      partitions,
                                      ComponentTemplate.EMPTY_SET );
    }",Create a  PartitionTemplate object based on specified name and assembly configuration.,1,282
5244,"public Element writeSchema(Class javaType, Types types) throws Exception {
        // If an array the component type should be processed first
        String componentTypeName = null;
        Class componentType = null;
        if (javaType.isArray()) {
            String dimString = ""[]"";
            componentType = javaType.getComponentType();
            if (componentType.isArray()) {
                while (componentType.isArray()) {
                    dimString += ""[]"";
                    componentType = componentType.getComponentType();
                }
            }
            componentTypeName =
                    types.getQNameString(types.getTypeQName(componentType)) +
                    dimString;
        }

        // Use Types helper method to actually create the complexType
        return types.createArrayElement(componentTypeName);
    }","Return XML schema for the specified type, suitable for insertion into the &lt;types&gt; element of a WSDL document, or underneath an &lt;element&gt; or &lt;attribute&gt; declaration.",1,182
5245,"public static final Weblogger getRoller() {
        if (rollerInstance == null) {
            throw new IllegalStateException(""Roller Weblogger has not been bootstrapped yet"");
        }
        
        return rollerInstance;
    }",Accessor to the Weblogger Weblogger business tier.,1,55
5246,"public Chronology getChronology(Object object, Chronology chrono) {
        if (chrono != null) {
            return chrono;
        }
        Calendar cal = (Calendar) object;
        DateTimeZone zone = null;
        try {
            zone = DateTimeZone.getInstance(cal.getTimeZone());
            
        } catch (IllegalArgumentException ex) {
            zone = DateTimeZone.getDefault();
        }
        return getChronology(cal, zone);
    }",Gets the chronology.,1,132
5247,"public static EBoolean endsWith(Expr<String> left, Expr<String> right) {
        return operationFactory.createBoolean(Ops.ENDSWITH, left, right);
    }",Expr : left.endsWith(right),1,48
5248,"public static List<Vulnerability> getAllVulnerabilities() {
		initializeIfEmpty();
		return Collections.unmodifiableList(vulnerabilitiesI18NMap.getVulnerabilityList(Constant.getLocale().toString()));
	}",Gets an unmodifiable  List containing all the  Vulnerability for the current active Locale.,1,48
5811,"private ClusterRequest getRequest(Map<String, Object> properties) {
    ClusterRequest cr = new ClusterRequest(
        (Long) properties.get(CLUSTER_ID_PROPERTY_ID),
        (String) properties.get(CLUSTER_NAME_PROPERTY_ID),
        (String) properties.get(CLUSTER_VERSION_PROPERTY_ID),
        null);
    
    // as a convenience, allow consumers to specify name/value overrides in this
    // call instead of forcing a cluster call to do that work
    for (Entry<String, Object> entry : properties.entrySet()) {
      String absCategory = PropertyHelper.getPropertyCategory(entry.getKey());
      String propName = PropertyHelper.getPropertyName(entry.getKey());
      
      if (absCategory.startsWith(""Clusters.desired_config"")) {
        ConfigurationRequest config = (null == cr.getDesiredConfig()) ? new ConfigurationRequest() : cr.getDesiredConfig();
        cr.setDesiredConfig(config);
        
        if (propName.equals (""type""))
          config.setType(entry.getValue().toString());
        else if (propName.equals (""tag""))
          config.setVersionTag(entry.getValue().toString());
        else if (absCategory.endsWith("".properties"")) {
          config.getProperties().put(propName, entry.getValue().toString());
        }
        
      }
    }
    
    return cr;
  }",Get a cluster request object from a map of property values.,0,342
7828,"public static AccessType fromExternalName(String externalName) {
		if ( externalName == null ) {
			return null;
		}
		for ( AccessType accessType : AccessType.values() ) {
			if ( accessType.getExternalName().equals( externalName ) ) {
				return accessType;
			}
		}
		// Check to see if making upper-case matches an enum name.
		try {
			return AccessType.valueOf( externalName.toUpperCase( Locale.ROOT) );
		}
		catch ( IllegalArgumentException e ) {
			throw new UnknownAccessTypeException( externalName );
		}
	}",Resolve an AccessType from its external name.,0,159
5821,"public PluginResult execute(String action, JSONArray args) {
		PluginResult.Status status = PluginResult.Status.OK;
		String result = """";		
		
		try {
			if (action.equals(""getContactsAndSendBack"")) {
				this.getContactsAndSendBack();
			}
			else if (action.equals(""search"")) {
				this.search(args.getString(0), args.getString(1), args.getString(2));
			}
			return new PluginResult(status, result);
		} catch (JSONException e) {
			return new PluginResult(PluginResult.Status.JSON_EXCEPTION);
		}
	}",Executes the request and returns CommandResult.,0,179
5685,"public List<InterceptorFactory> getPostConstructInterceptors() {
        List<List<InterceptorFactory>> sortedItems = postConstructInterceptors.getSortedItems();
        List<InterceptorFactory> interceptorFactories = new ArrayList<>();
        for(List<InterceptorFactory> i : sortedItems) {
            interceptorFactories.addAll(i);
        }
        return interceptorFactories;
    }",Get the post-construct interceptors.,0,90
6073,"public TimeZone getTimeZone() {
        int offset = timeZoneOffsetMins;
        if (offset == 0) {
            return DateTimeUtils.UTC;
        }
        StringBuilder b = new StringBuilder(9);
        b.append(""GMT"");
        if (offset < 0) {
            b.append('-');
            offset = - offset;
        } else {
            b.append('+');
        }
        StringUtils.appendZeroPadded(b, 2, offset / 60);
        b.append(':');
        StringUtils.appendZeroPadded(b, 2, offset % 60);
        return new SimpleTimeZone(offset * 60000, b.toString());
    }",Returns compatible offset-based time zone with no DST schedule.,0,194
5452,"public StreamSinkChannel getResponseChannel() {
        final ChannelWrapper[] wrappers = responseWrappersUpdater.getAndSet(this, null);
        if (wrappers == null) {
            return null;
        }
        StreamSinkChannel channel = gatedResponseChannel;
        for (ChannelWrapper wrapper : wrappers) {
            channel = ((ChannelWrapper<StreamSinkChannel>)wrapper).wrap(channel, this);
            if (channel == null) {
                throw TexugoMessages.MESSAGES.failedToAcquireResponseChannel();
            }
        }
        return channel;
    }",Get the response channel.,0,145
5557,"private static boolean isInstitution(String author) {
        if (!(author.isEmpty())) {
            return (author.charAt(0) == '{') && (author.charAt(author.length() - 1) == '}');
        } else {
            return false; // In case of empty author
        }
    }",Check if a value is institution.,0,95
6046,"public static PasswordEncoder newPasswordEncoder(final PasswordEncoderProperties properties) {
        val type = properties.getType();
        if (StringUtils.isBlank(type)) {
            LOGGER.trace(""No password encoder type is defined, and so none shall be created"");
            return NoOpPasswordEncoder.getInstance();
        }

        if (type.endsWith("".groovy"")) {
            LOGGER.debug(""Creating Groovy-based password encoder at [{}]"", type);
            val resource = ApplicationContextProvider.getResourceLoader().getResource(type);
            return new GroovyPasswordEncoder(resource);
        }

        if (type.contains(""."")) {
            try {
                LOGGER.debug(""Configuration indicates use of a custom password encoder [{}]"", type);
                val clazz = (Class<PasswordEncoder>) Class.forName(type);
                return clazz.getDeclaredConstructor().newInstance();
            } catch (final Exception e) {
                LOGGER.error(""Falling back to a no-op password encoder as CAS has failed to create ""
                    + ""an instance of the custom password encoder class "" + type, e);
                return NoOpPasswordEncoder.getInstance();
            }
        }

        val encoderType = PasswordEncoderProperties.PasswordEncoderTypes.valueOf(type);
        switch (encoderType) {
            case DEFAULT:
                LOGGER.debug(""Creating default password encoder with encoding alg [{}] and character encoding [{}]"",
                    properties.getEncodingAlgorithm(), properties.getCharacterEncoding());
                return new DefaultPasswordEncoder(properties.getEncodingAlgorithm(), properties.getCharacterEncoding());
            case STANDARD:
                LOGGER.debug(""Creating standard password encoder with the secret defined in the configuration"");
                return new StandardPasswordEncoder(properties.getSecret());
            case BCRYPT:
                LOGGER.debug(""Creating BCRYPT password encoder given the strength [{}] and secret in the configuration"",
                    properties.getStrength());
                if (StringUtils.isBlank(properties.getSecret())) {
                    LOGGER.debug(""Creating BCRYPT encoder without secret"");
                    return new BCryptPasswordEncoder(properties.getStrength());
                }
                LOGGER.debug(""Creating BCRYPT encoder with secret"");
                return new BCryptPasswordEncoder(properties.getStrength(), RandomUtils.getNativeInstance());
            case SCRYPT:
                LOGGER.debug(""Creating SCRYPT encoder"");
                return new SCryptPasswordEncoder();
            case PBKDF2:
                if (StringUtils.isBlank(properties.getSecret())) {
                    LOGGER.trace(""Creating PBKDF2 encoder without secret"");
                    return new Pbkdf2PasswordEncoder();
                }
                return new Pbkdf2PasswordEncoder(properties.getSecret(), properties.getStrength(), HASH_WIDTH);
            case GLIBC_CRYPT:
                val hasSecret = StringUtils.isNotBlank(properties.getSecret());
                LOGGER.debug(""Creating glibc CRYPT encoder with encoding alg [{}], strength [{}] and {}secret"",
                        properties.getEncodingAlgorithm(), properties.getStrength(),
                        BooleanUtils.toString(hasSecret, StringUtils.EMPTY, ""without ""));
                return new GlibcCryptPasswordEncoder(properties.getEncodingAlgorithm(), properties.getStrength(), properties.getSecret());
            case NONE:
            default:
                LOGGER.trace(""No password encoder shall be created given the requested encoder type [{}]"", type);
                return NoOpPasswordEncoder.getInstance();
        }
    }",New password encoder password encoder.,0,718
7166,"public IQDiscoInfoHandler getIQDiscoInfoHandler() {
        return (IQDiscoInfoHandler) modules.get(IQDiscoInfoHandler.class.getName());
    }",Returns the IQDiscoInfoHandler registered with this server.,0,34
5429,"private boolean canOverwriteChunk(Chunk c, long time) {
        if (c.time + retentionTime > time) {
            return false;
        }
        Chunk r = retainChunk;
        if (r != null && c.version > r.version) {
            return false;
        }
        return true;
    }",Store changes.,0,101
6516,"public GangliaReporter build(GMetric ganglia) {
            return new GangliaReporter(registry, ganglia, prefix, tMax, dMax, rateUnit, durationUnit, filter);
        }","Builds a  GangliaReporter with the given properties, announcing metrics to the given  GMetric client.",0,48
7850,"public static boolean isSameScriptEngine(String name, String engineName, String engineLanguage) {
		if (name == null) {
			return false;
		}

		// In the configs we just use the engine name, in the UI we use the language name as well
		if (name.indexOf(LANG_ENGINE_SEP) > 0) {
			if (name.equals(engineLanguage + LANG_ENGINE_SEP + engineName)) {
				return true;
			}
			return false;
		}

		return name.equals(engineName);
	}",Tells whether or not the given  name matches the given  engineName and  engineLanguage.,0,125
7002,"public Iterator<ContactGroup> getContactGroupsForAccountID(String accountID)
    {
        Iterator<ContactGroup> encapsulatedGroups = getContactGroups();
        LinkedList<ContactGroup> protoGroups = new LinkedList<ContactGroup>();

        while(encapsulatedGroups.hasNext())
        {
            ContactGroup group = encapsulatedGroups.next();

            if(group.getProtocolProvider().getAccountID()
               .getAccountUniqueID().equals(accountID))
            {
                protoGroups.add(group);
            }
        }
        return protoGroups.iterator();
    }","Returns all protocol specific ContactGroups, encapsulated by this",0,137
7917,"public String toString() {
        return ISOTimePeriodFormat.getInstance().standard().print(toTimePeriod());
    }",Gets the value as a String in the ISO8601 duration format.,0,34
6632,"public boolean equals(Object other) {
		if (this == other) {
			return true;
		}
		if (!(other instanceof MethodOverride)) {
			return false;
		}
		MethodOverride that = (MethodOverride) other;
		return (ObjectUtils.nullSafeEquals(this.methodName, that.methodName) &&
				ObjectUtils.nullSafeEquals(this.source, that.source));
	}",Subclasses must override this to indicate whether they match the given method.,0,116
5295,"public ResponseEntity<Properties> fetchLabels(@RequestParam(value = ""lang"", required = false) String lang, HttpServletRequest request) {
        if (!StringUtils.isEmpty(lang)) {
            Locale locale = Locale.forLanguageTag(lang);
            ((SessionLocaleResolver)localeResolver).setDefaultLocale(locale);
            log.debug(""Language provided: {} leads to Locale: {}"", lang, locale);
        }
        Properties allProperties = new Properties();
        allProperties.putAll(messages.getMessages());
        allProperties.putAll(pluginMessages.getMessages());
        return new ResponseEntity<>(allProperties, HttpStatus.OK);
    }",We use Springs session locale resolver which also gives us the option to change the local later on.,0,164
5559,"public Prefab deserialize(EntityData.Prefab prefabData, AssetUri uri) {
        String name = uri.getSimpleString();

        Prefab prefab = prefabManager.createPrefab(name);
        prefab.setPersisted(prefabData.getPersisted());
        for (String parentName : prefabData.getParentNameList()) {
            int packageSplit = parentName.indexOf(':');
            if (packageSplit == -1) {
                parentName = uri.getPackage() + "":"" + parentName;
            }
            Prefab parent = prefabManager.getPrefab(parentName);

            if (parent == null) {
                logger.error(""Missing parent prefab (need to fix parent serialization)"");
            } else {
                prefab.addParent(parent);
            }
        }

        for (EntityData.Component componentData : prefabData.getComponentList()) {
            Component component = componentSerializer.deserialize(componentData);
            if (component != null) {
                prefab.addComponent(component);
            }
        }

        return prefab;
    }","Deserializes a prefab, with a known uri.",0,276
7053,"private BlockLogBuffer checkFlush() throws IOException
    {
        if ( byteBuffer.position() > MAX_SIZE )
        {
            flush( MAX_SIZE );
        }
        return this;
    }",If the position of the byteBuffer is larger than MAX_SIZE then,0,56
6802,"public HttpEntity encodeText(Object contentType, Object data) throws IOException {
        String contentTypeAsString = contentTypeToString(contentType);
        if (data instanceof Closure) {
            StringWriter out = new StringWriter();
            PrintWriter writer = new PrintWriter(out);
            ((Closure) data).call(writer);
            writer.close();
            out.flush();
            data = out;
        } else if (data instanceof Writable) {
            StringWriter out = new StringWriter();
            ((Writable) data).writeTo(out);
            out.flush();
            data = out;
        } else if (data instanceof Reader && !(data instanceof BufferedReader)) {
            data = new BufferedReader((Reader) data);
        } else if (data instanceof File) {
            data = toString((File) data, contentTypeAsString);
        }
        if (data instanceof BufferedReader) {
            StringWriter out = new StringWriter();
            DefaultGroovyMethods.leftShift(out, (BufferedReader) data);

            data = out;
        }
        // if data is a String, we are already covered.
        return createEntity(contentTypeAsString, data);
    }",Default handler used for a plain text content-type.,0,335
6314,"public CharSequence getMessage() {
        return getShadowAlertController().getMessage();
    }",Non-Android accessor.,0,25
5513,"public static ShellClient newClient( ShellServer server, CtrlCHandler signalHandler ) throws ShellException
    {
	    return newClient( server, new HashMap<String, Serializable>(), signalHandler );
	}","Creates a client and ""starts"" it, i.e.",0,57
6482,"public static int getWidthFromMaxInt(int bound) {
    return 32 - Integer.numberOfLeadingZeros(bound);
  }",give the number of bits needed to encode an int given the max value,0,33
7860,"public Document createSchemaDefinition(Map<String, Object> introspectionResult) {
        assertTrue(introspectionResult.get(""__schema"") != null, ""__schema expected"");
        Map<String, Object> schema = (Map<String, Object>) introspectionResult.get(""__schema"");


        Map<String, Object> queryType = (Map<String, Object>) schema.get(""queryType"");
        assertNotNull(queryType, ""queryType expected"");
        TypeName query = TypeName.newTypeName().name((String) queryType.get(""name"")).build();
        boolean nonDefaultQueryName = !""Query"".equals(query.getName());

        SchemaDefinition.Builder schemaDefinition = SchemaDefinition.newSchemaDefintion();
        schemaDefinition.operationTypeDefinition(OperationTypeDefinition.newOperationTypeDefinition().name(""query"").type(query).build());

        Map<String, Object> mutationType = (Map<String, Object>) schema.get(""mutationType"");
        boolean nonDefaultMutationName = false;
        if (mutationType != null) {
            TypeName mutation = TypeName.newTypeName().name((String) mutationType.get(""name"")).build();
            nonDefaultMutationName = !""Mutation"".equals(mutation.getName());
            schemaDefinition.operationTypeDefinition(OperationTypeDefinition.newOperationTypeDefinition().name(""mutation"").type(mutation).build());
        }

        Map<String, Object> subscriptionType = (Map<String, Object>) schema.get(""subscriptionType"");
        boolean nonDefaultSubscriptionName = false;
        if (subscriptionType != null) {
            TypeName subscription = TypeName.newTypeName().name(((String) subscriptionType.get(""name""))).build();
            nonDefaultSubscriptionName = !""Subscription"".equals(subscription.getName());
            schemaDefinition.operationTypeDefinition(OperationTypeDefinition.newOperationTypeDefinition().name(""subscription"").type(subscription).build());
        }

        Document.Builder document = Document.newDocument();
        if (nonDefaultQueryName || nonDefaultMutationName || nonDefaultSubscriptionName) {
            document.definition(schemaDefinition.build());
        }

        List<Map<String, Object>> types = (List<Map<String, Object>>) schema.get(""types"");
        for (Map<String, Object> type : types) {
            TypeDefinition typeDefinition = createTypeDefinition(type);
            if (typeDefinition == null) continue;
            document.definition(typeDefinition);
        }

        return document.build();
    }",Returns a IDL Document that reprSesents the schema as defined by the introspection result map,0,682
7764,"public String applyClassNamingPolicy(String input) {
    if (input != null && input.length() > 0) {
      if (""string"".equalsIgnoreCase(input)) {
        return ""string"";
      }
      
      String output = input.substring(0, 1).toUpperCase() + input.substring(1);
      // class name can't have . so if dot exists remove the same
      output = output.replace(""."", """");
      
      return output;
    }
    else {
      throw new CodeGenerationException(""Error converting input to first letter caps becuase of null or empty input"");
    }
  }",Converts the first character of the input into upper case .,0,157
6525,"public Optional<ExternalFileType> getExternalFileTypeByExt(String extension) {
        String extensionCleaned = extension.replace(""."", """").replace(""*"", """");
        return externalFileTypes.stream().filter(type -> type.getExtension().equalsIgnoreCase(extensionCleaned)).findFirst();
    }","Look up the external file type registered for this extension, if any.",0,84
5743,"public List distinct(final String fieldName, final DBCollectionDistinctOptions options) {
        notNull(""fieldName"", fieldName);
        return new MongoIterableImpl<BsonValue>(executor, options.getReadConcern() != null ? options.getReadConcern() : getReadConcern(),
                                                  options.getReadPreference() != null ? options.getReadPreference() : getReadPreference()) {
            @Override
            ReadOperation<BatchCursor<BsonValue>> asReadOperation() {
                return new DistinctOperation<BsonValue>(getNamespace(), fieldName, new BsonValueCodec())
                               .readConcern(super.getReadConcern())
                               .filter(wrapAllowNull(options.getFilter()))
                               .collation(options.getCollation());
            }
        }.map(new Function<BsonValue, Object>() {
            @Override
            public Object apply(final BsonValue bsonValue) {
                if (bsonValue == null) {
                    return null;
                }
                BsonDocument document = new BsonDocument(""value"", bsonValue);
                DBObject obj = getDefaultDBObjectCodec().decode(new BsonDocumentReader(document), DecoderContext.builder().build());
                return obj.get(""value"");
            }
        }).into(new ArrayList<Object>());
    }",Find the distinct values for a specified field across a collection and returns the results in an array.,0,335
7449,"public AuthenticationSessionModel getOrCreateLoginSessionForIdpInitiatedSso(KeycloakSession session, RealmModel realm, ClientModel client, String relayState) {
        String[] bindingProperties = getUrlAndBindingForIdpInitiatedSso(client);
        if (bindingProperties == null) {
            return null;
        }
        String redirect = bindingProperties[0];
        String bindingType = bindingProperties[1];

        AuthenticationSessionModel authSession = createAuthenticationSession(client, null);

        authSession.setProtocol(SamlProtocol.LOGIN_PROTOCOL);
        authSession.setAction(AuthenticationSessionModel.Action.AUTHENTICATE.name());
        authSession.setClientNote(SamlProtocol.SAML_BINDING, bindingType);
        authSession.setClientNote(SamlProtocol.SAML_IDP_INITIATED_LOGIN, ""true"");
        authSession.setRedirectUri(redirect);

        if (relayState == null) {
            relayState = client.getAttribute(SamlProtocol.SAML_IDP_INITIATED_SSO_RELAY_STATE);
        }
        if (relayState != null && !relayState.trim().equals("""")) {
            authSession.setClientNote(GeneralConstants.RELAY_STATE, relayState);
        }

        return authSession;
    }",Creates a client session object for SAML IdP-initiated SSO session.,0,267
5798,"public static SharedLibrary loadNative(Class<?> context, Configuration<String> name, String... defaultNames) {
		if ( name.get() != null )
			return loadNative(context, name.get());
		else if ( defaultNames.length <= 1 ) {
			if ( defaultNames.length == 0 )
				throw new RuntimeException(""No default names specified."");

			return loadNative(context, defaultNames[0]);
		} else {
			SharedLibrary library = null;
			try {
				library = Library.loadNative(context, defaultNames[0]); // try first
			} catch (Throwable t) {
				for ( int i = 1; i < defaultNames.length; i++ ) { // try alternatives
					try {
						library = Library.loadNative(context, defaultNames[i]);
						break;
					} catch (Throwable ignored) {
					}
				}
				if ( library == null )
					throw t; // original error
			}
			return library;
		}
	}",Loads a shared library using  #loadNative(String) with the name specified by  name.,0,306
5920,"private Set<String> getSiteMemberIds(final String siteContext) {
		HibernateCallback<Set<String>> hc = session -> {
            Query q = session.getNamedQuery(""findSiteMemberUserUids"");
            q.setParameter(""siteContext"", siteContext);
            return new HashSet<>(q.list());
        };

		return getHibernateTemplate().execute(hc);
	}",Gets only the user IDs of the site members,0,107
7878,"public String fakeOuterStringSerialize(String body) throws ApiException {
    Object localVarPostBody = body;
    
    // create path and map variables
    String localVarPath = ""/fake/outer/string"";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<String> localVarReturnType = new GenericType<String>() {};
    return apiClient.invokeAPI(localVarPath, ""POST"", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }",Test serialization of outer string types,0,310
6857,"public KaleoNotificationRecipient remove(long kaleoNotificationRecipientId)
		throws NoSuchNotificationRecipientException, SystemException {
		return remove(Long.valueOf(kaleoNotificationRecipientId));
	}",Removes the kaleo notification recipient with the primary key from the database.,0,38
6843,"protected Optional<String> resolveView(AnnotationMetadata route, Object responseBody) {
        Optional<String> optionalViewName = route.stringValue(View.class);
        if (optionalViewName.isPresent()) {
            return optionalViewName;
        } else if (responseBody instanceof ModelAndView) {
            return ((ModelAndView) responseBody).getView();
        }
        return Optional.empty();
    }",Resolves the view for the given method and response body.,0,109
5431,"public static int getTotalTableFragmentation(final HMaster master) 
  throws IOException {
    Map<String, Integer> map = getTableFragmentation(master);
    return map != null && map.size() > 0 ? map.get(""-TOTAL-"") : -1;
  }",Returns the total overall fragmentation percentage.,0,85
6595,"public static String nextStringNumericIdentifier() {
        return STRING_NUMERIC_IDENTIFIER_FACTORY.nextStringIdentifier();
    }",Gets the next identifier using the singleton instance of the,0,25
5325,"public boolean pull() {
        val remotes = this.gitInstance.getRepository().getRemoteNames();
        return !remotes.isEmpty() && this.gitInstance.pull()
            .setTimeout(TIMEOUT_SECONDS)
            .setFastForward(MergeCommand.FastForwardMode.FF_ONLY)
            .setRebase(false)
            .setProgressMonitor(new LoggingGitProgressMonitor())
            .call()
            .isSuccessful();
    }",Pull repository changes.,0,103
5426,"public String getParentRemotePath() {
        String parentPath = new File(getRemotePath()).getParent();
        return (parentPath.substring(parentPath.length() - 1).equals(""/"")) ? parentPath : (parentPath + ""/"");
    }",get remote path of parent file,0,78
5788,"public static String shaveString(String toShave) {
        if ((toShave == null) || (toShave.length() == 0)) {
            return toShave;
        }
        toShave = toShave.trim();
        if ((toShave.startsWith(""{"") && toShave.endsWith(""}""))
                || (toShave.startsWith(""\"""") && toShave.endsWith(""\""""))) {
            return toShave.substring(1, toShave.length() - 1);
        }
        return toShave;
    }","Returns the string, after shaving off whitespace at the beginning and end, and removing (at most) one pair of braces or "" surrounding it.",0,159
7019,"public static boolean includesProperty(Element element, String name) {
        String value = null;

        if (value == null) {
            String[] propName = parsePropertyName(name);

            // Grab the attribute if there is one
            String lastName = propName[propName.length - 1];
            String attName = null;
            int attributeIndex = lastName.indexOf(':');
            if (attributeIndex >= 0) {
                propName[propName.length - 1] = lastName.substring(0, attributeIndex);
                attName = lastName.substring(attributeIndex + 1);
            }

            // Search for this property by traversing down the XML hierarchy.
            int i = propName[0].equals(element.getName()) ? 1 : 0;
            for (; i < propName.length; i++) {
                element = element.element(propName[i]);
                if (element == null) {
                    break;
                }
            }

            if (element != null) {
                if (attName == null){
                    // The property exists so return true
                    return true;
                } else {
                    // The property exists if the attribute exists in the element
                    return element.attribute(attName) != null;
                }
            }
            else {
                // The property does not exist so return false
                return false;
            }
        }
        return true;
    }",Returns true if the specified property is included in the XML hierarchy.,0,361
6028,"public static int toInt(byte[] bytes, int offset, final int length) {
    if (length != SIZEOF_INT || offset + length > bytes.length) {
      throw explainWrongLengthOrOffset(bytes, offset, length, SIZEOF_INT);
    }
    return ConverterHolder.BEST_CONVERTER.toInt(bytes, offset, length);
  }",Converts a byte array to an int value,0,101
5630,"public HostsType getMasterAndHosts(String serviceName, String componentName) {
    HostsType hostsType = new HostsType();

    if (serviceName == null || componentName == null) {
      return null;
    }

    Set<String> componentHosts = cluster.getHosts(serviceName, componentName);
    if (0 == componentHosts.size()) {
      return null;
    }
    
    hostsType.hosts = componentHosts;

    Service s = null;
    try {
      s = Service.valueOf(serviceName.toUpperCase());
    } catch (Exception e) {
      // !!! nothing to do
      return hostsType;
    }

    switch (s) {
      case HDFS:
        if (componentName.equalsIgnoreCase(""NAMENODE"")) {
          Map<Status, String> pair = getNameNodePair(componentHosts);
          if (pair != null) {
            hostsType.master = pair.containsKey(Status.ACTIVE) ? pair.get(Status.ACTIVE) :  null;
            hostsType.secondary = pair.containsKey(Status.STANDBY) ? pair.get(Status.STANDBY) :  null;
          } else {
            hostsType.master = componentHosts.iterator().next();
          }
        }
        break;
      case YARN:
        if (componentName.equalsIgnoreCase(""RESOURCEMANAGER"")) {
          resolveResourceManagers(hostsType);
        }
        break;
      case HBASE:
        if (componentName.equalsIgnoreCase(""HBASE_MASTER"")) {
          resolveHBaseMasters(hostsType);
        }
        break;
    }
    return hostsType;
  }",Get the master hostname of the given service and component.,0,433
6899,"public static boolean isXMLFileWellFormed( ValueMetaInterface metaA, Object dataA ) {
    boolean xmlWellFormed = false;
    try {
      xmlWellFormed = isXMLFileWellFormed( metaA, dataA, false );
    } catch ( KettleFileNotFoundException e ) {
      // Ignore
    }
    return xmlWellFormed;
  }",Checks an xml file is well formed.,0,86
6284,"public boolean connect() {
        if (isConnected()) {
            LOG.warn(""Ingoring connect() because already connected."");
            return false;
        }
        synchronized (mGattMonitor) {
            if (mBluetoothGatt != null) {
                // Tribal knowledge says you're better off not reusing existing BlueoothGatt connections,
                // so create a new one.
                LOG.info(""connect() requested -- disconnecting previous connection: "" + mGbDevice.getName());
                disconnect();
            }
        }
        LOG.info(""Attempting to connect to "" + mGbDevice.getName());
        BluetoothDevice remoteDevice = mBluetoothAdapter.getRemoteDevice(mGbDevice.getAddress());
        synchronized (mGattMonitor) {
            mBluetoothGatt = remoteDevice.connectGatt(mContext, true, internalGattCallback);
        }
        setDeviceConnectionState(State.CONNECTING);
        return true;
    }",Connects to the given remote device.,0,188
6795,"public static InodeDirectory fromJournalEntry(InodeDirectoryEntry entry) {
    Permission permission =
        new Permission(entry.getOwner(), entry.getGroup(), (short) entry.getMode());
    return new InodeDirectory(entry.getId(), entry.getCreationTimeMs())
        .setName(entry.getName())
        .setParentId(entry.getParentId())
        .setPersistenceState(PersistenceState.valueOf(entry.getPersistenceState()))
        .setPinned(entry.getPinned())
        .setLastModificationTimeMs(entry.getLastModificationTimeMs())
        .setPermission(permission)
        .setMountPoint(entry.getMountPoint())
        .setDirectChildrenLoaded(entry.getDirectChildrenLoaded());
  }",Converts the entry to an  InodeDirectory.,0,167
7739,"private void ensureSameType(SqlRexContext cx, final RexNode[] exprs) {
        RelDataType type =
            cx.getTypeFactory().leastRestrictive(
                new AbstractList<RelDataType>() {
                    public RelDataType get(int index) {
                        return exprs[index].getType();
                    }
                    public int size() {
                        return exprs.length;
                    }
                });
        for (int i = 0; i < exprs.length; i++) {
            exprs[i] = cx.getRexBuilder().ensureType(type, exprs[i], false);
        }
    }",Converts a call to an operator into a  RexCall to the same operator.,0,172
7247,"public static Implementation toStaticField(String fieldName, TypeDefinition fieldType) {
        return new Forwarding(isValidIdentifier(fieldName),
                isActualType(fieldType).asGenericType(),
                PreparationHandler.ForStaticField.INSTANCE);
    }",Forwards all intercepted method invocations to a  static field of the instrumented class.,0,56
6140,"public ByteBuddy withTypeAnnotation(Collection<? extends AnnotationDescription> annotations) {
        return new ByteBuddy(classFileVersion,
                namingStrategy,
                auxiliaryTypeNamingStrategy,
                implementationContextFactory,
                interfaceTypes,
                ignoredMethods,
                classVisitorWrapper,
                methodRegistry,
                modifiers,
                new TypeAttributeAppender.ForAnnotation(new ArrayList<AnnotationDescription>(nonNull(annotations)), AnnotationAppender.ValueFilter.AppendDefaults.INSTANCE),
                methodGraphCompiler,
                defaultFieldAttributeAppenderFactory,
                defaultMethodAttributeAppenderFactory);
    }",Defines a new type annotation for this configuration that replaces the currently defined type attribute appender.,0,109
5307,"public static Type determine(JSONObject json) {
        // This code originally lived in AbstractStreamImplementation.
        // I've moved it in here to expose it as a public encapsulation of
        // the object type determination logic.
        if (!json.isNull(""sender"")) {
            return Type.SENDER;
        } else if (!json.isNull(""text"")) {
            return Type.STATUS;
        } else if (!json.isNull(""direct_message"")) {
            return Type.DIRECT_MESSAGE;
        } else if (!json.isNull(""delete"")) {
            return Type.DELETE;
        } else if (!json.isNull(""limit"")) {
            return Type.LIMIT;
        } else if (!json.isNull(""warning"")) {
            return Type.STALL_WARNING;
        } else if (!json.isNull(""scrub_geo"")) {
            return Type.SCRUB_GEO;
        } else if (!json.isNull(""friends"")) {
            return Type.FRIENDS;
        } else if (!json.isNull(""event"")) {
            String event;
            try {
                event = json.getString(""event"");
                if (""favorite"".equals(event)) {
                    return Type.FAVORITE;
                } else if (""unfavorite"".equals(event)) {
                    return Type.UNFAVORITE;
                } else if (""follow"".equals(event)) {
                    return Type.FOLLOW;
                } else if (""unfollow"".equals(event)) {
                    return Type.UNFOLLOW;
                } else if (event.startsWith(""list"")) {
                    if (""list_member_added"".equals(event)) {
                        return Type.USER_LIST_MEMBER_ADDED;
                    } else if (""list_member_removed"".equals(event)) {
                        return Type.USER_LIST_MEMBER_DELETED;
                    } else if (""list_user_subscribed"".equals(event)) {
                        return Type.USER_LIST_SUBSCRIBED;
                    } else if (""list_user_unsubscribed"".equals(event)) {
                        return Type.USER_LIST_UNSUBSCRIBED;
                    } else if (""list_created"".equals(event)) {
                        return Type.USER_LIST_CREATED;
                    } else if (""list_updated"".equals(event)) {
                        return Type.USER_LIST_UPDATED;
                    } else if (""list_destroyed"".equals(event)) {
                        return Type.USER_LIST_DESTROYED;
                    }
                } else if (""user_update"".equals(event)) {
                    return Type.USER_UPDATE;
                } else if (""block"".equals(event)) {
                    return Type.BLOCK;
                } else if (""unblock"".equals(event)) {
                    return Type.UNBLOCK;
                }
            } catch (JSONException jsone) {
                try {
                    logger.warn(""Failed to get event element: "", json.toString(2));
                } catch (JSONException ignore) {
                }
            }
        } else if (!json.isNull(""disconnect"")) {
            return Type.DISCONNECTION;
        }
        return Type.UNKNOWN;
    }",Determine the respective object type for a given JSONObject.,0,808
7157,"static boolean isElementType(Type repeatedType, Schema elementSchema) {
    if (repeatedType.isPrimitive() ||
        repeatedType.asGroupType().getFieldCount() > 1 ||
        repeatedType.asGroupType().getType(0).isRepetition(REPEATED)) {
      // The repeated type must be the element type because it is an invalid
      // synthetic wrapper. Must be a group with one optional or required field
      return true;
    } else if (elementSchema != null &&
        elementSchema.getType() == Schema.Type.RECORD) {
      Set<String> fieldNames = new HashSet<String>();
      for (Schema.Field field : elementSchema.getFields()) {
        fieldNames.add(field.name());
      }
      // The repeated type must be the element type because it matches the
      // structure of the Avro element's schema.
      return fieldNames.contains(repeatedType.asGroupType().getFieldName(0));
    }
    return false;
  }",Returns whether the given type is the element type of a list or is a synthetic group with one field that is the element type.,0,213
5469,"public static Result setFileGroup(String path,  String groupName) {
    if (LINUX) {
      // Set the file's group, if the group name is given
      if (!StringUtils.isEmpty(groupName)) {
        try {
          return runCommand(new String[]{""chgrp"", groupName, path}, null, null, true);
        } catch (IOException | InterruptedException e) {
          // Improbable
          LOG.warn(String.format(""Can not perform chgrp %s %s"", groupName, path), e);
          return new Result(-1, """", ""Cannot perform operation: "" + e.getLocalizedMessage());
        }
      } else {
        return new Result(0, """", """");
      }
    } else {
      LOG.debug(String.format(""Not performing chgrp command for file %s "" +
          ""because current OS is not Linux "", path));
      return new Result(-1, """", ""Cannot perform operation: The current OS is not Linux"");
    }
  }",Sets the group for a file.,0,251
5784,"public boolean getRequireCertificate()
    {
        return requireCertificate;
    }",Get require certificate or not,0,20
6725,"public CompletableFuture<Acknowledge> disconnectTaskManager(final ResourceID resourceID, final Exception cause) {
		taskManagerHeartbeatManager.unmonitorTarget(resourceID);
		CompletableFuture<Acknowledge> releaseFuture = slotPoolGateway.releaseTaskManager(resourceID);

		Tuple2<TaskManagerLocation, TaskExecutorGateway> taskManagerConnection = registeredTaskManagers.remove(resourceID);

		if (taskManagerConnection != null) {
			taskManagerConnection.f1.disconnectJobManager(jobGraph.getJobID(), cause);
		}

		return releaseFuture;
	}",Updates the task execution state for a given task.,0,120
6530,"private View fillDown(int pos, int top) {

		//int end = (mBottom - mTop) - mListPadding.bottom;
		int end = (getBottom() - getTop()) - mListPadding.bottom;
		int childTop = getFillChildBottom() + mDividerHeight;

		while (childTop < end && pos < mItemCount) {
			// is this the selected item?
			makeAndAddView(pos, getItemTop(pos), true, false);
			pos++;
			childTop = getFillChildBottom() + mDividerHeight;
		}

		return null;
	}",Fills the list from pos down to the end of the list view.,0,142
6393,"V put(K key, V value, boolean notifyWriter, boolean onlyIfAbsent) {
    requireNonNull(key);
    requireNonNull(value);

    @SuppressWarnings(""unchecked"")
    K[] nodeKey = (K[]) new Object[1];
    @SuppressWarnings(""unchecked"")
    V[] oldValue = (V[]) new Object[1];
    @SuppressWarnings({""unchecked"", ""rawtypes""})
    RemovalCause[] cause = new RemovalCause[1];
    long now = expirationTicker().read();

    int[] oldWeight = new int[1];
    int newWeight = weigher.weigh(key, value);
    Object keyRef = nodeFactory.newReferenceKey(key, keyReferenceQueue());
    Node<K, V> node = data.compute(keyRef, (kr, n) -> {
      if (n == null) {
        if (notifyWriter) {
          writer.write(key, value);
        }
        return nodeFactory.newNode(kr, value, valueReferenceQueue(), newWeight, now);
      }

      synchronized (n) {
        nodeKey[0] = n.getKey();
        oldValue[0] = n.getValue();
        oldWeight[0] = n.getWeight();
        if ((nodeKey == null) || (oldValue[0] == null)) {
          cause[0] = RemovalCause.COLLECTED;
        } else if (hasExpired(n, now)) {
          cause[0] = RemovalCause.EXPIRED;
        }
        if (cause[0] != null) {
          writer.delete(nodeKey[0], oldValue[0], cause[0]);
        } else if (onlyIfAbsent && (oldValue[0] != null)) {
          return n;
        }

        if (value != oldValue[0]) {
          if (cause[0] == null) {
            cause[0] = RemovalCause.REPLACED;
          }
          if (notifyWriter) {
            writer.write(key, value);
          }
        }

        n.setValue(value, valueReferenceQueue());
        n.setWeight(newWeight);
        n.setAccessTime(now);
        n.setWriteTime(now);
        return n;
      }
    });

    if (cause[0] != null) {
      if (cause[0].wasEvicted()) {
        statsCounter().recordEviction();
      }
      if (hasRemovalListener()) {
        notifyRemoval(nodeKey[0], oldValue[0], cause[0]);
      }
    }

    if ((oldValue[0] == null) && (cause[0] == null)) {
      afterWrite(node, new AddTask(node, newWeight), now);
    } else if (onlyIfAbsent && (oldValue[0] != null) && (cause[0] == null)) {
      afterRead(node, now, false);
    } else {
      int weightedDifference = newWeight - oldWeight[0];
      afterWrite(node, new UpdateTask(node, weightedDifference), now);
    }

    tracer().recordWrite(id, key, newWeight);
    return (cause[0] == null) || (cause[0] == RemovalCause.REPLACED) ? oldValue[0] : null;
  }",Adds a node to the list and the data store.,0,962
5629,"public boolean remove(T element) {
    return mQueue.removeIf(x -> x.getValue() == element);
  }",Removes an element.,0,41
7068,"public static Object sendRead(Node readNode, TruffleObject receiver, Object identifier) throws UnknownIdentifierException, UnsupportedMessageException {
        try {
            if (LEGACY_TO_LIBRARY_BRIDGE) {
                return ((LegacyToLibraryNode) readNode).sendRead(receiver, identifier);
            } else {
                return ((InteropAccessNode) readNode).execute(receiver, identifier);
            }
        } catch (UnsupportedMessageException e) {
            CompilerDirectives.transferToInterpreter();
            throw e;
        } catch (UnknownIdentifierException e) {
            CompilerDirectives.transferToInterpreter();
            throw e;
        } catch (InteropException e) {
            CompilerDirectives.transferToInterpreter();
            throw new AssertionError(""Unexpected exception caught."", e);
        }
    }",Sends a  Message#READ READ message to the foreign receiver object by executing the  readNode .,0,193
7243,"public ClientDependencyInfo getClientDependencyInfo(int did) throws IOException, TException {
    while (!mIsShutdown) {
      connect();
      try {
        return mClient.user_getClientDependencyInfo(did);
      } catch (TTransportException e) {
        LOG.error(e.getMessage());
        mIsConnected = false;
      } catch (DependencyDoesNotExistException e) {
        throw new IOException(e);
      }
    }
    return null;
  }",Register the worker to the master.,0,125
5322,"public static String getImageType(final File file) {
        if (file == null) return """";
        InputStream is = null;
        try {
            is = new FileInputStream(file);
            String type = getImageType(is);
            if (type != null) {
                return type;
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (is != null) {
                    is.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return getFileExtension(file.getAbsolutePath()).toUpperCase();
    }",Return the type of image.,0,204
7361,"public int activeTermId()
    {
        return buffer.getInt(offset + ACTIVE_TERM_ID_FIELD_OFFSET, LITTLE_ENDIAN);
    }",return active term id field,0,32
6225,"public String toString() {
        return ""compile: "" + method;
    }",Converts this compilation to a string.,0,25
7382,"public String getNetworkTypeName() {
        if (mCell == null) {
            return ""Unknown"";
        }

        // TODO: 2016-02-28 Why do we do an assignment? Getters shouldn't have side effects
        mNetType = mCell.getRAT();
        return mNetType;
    }",Network Type,0,60
7073,"public String addCategory(String category_name, String category_slug, String category_desc, int parent_id) {
        // Return string
        String returnString = """";

        // Save selected categories
        updateSelectedCategoryList();
        saveScrollOffset();

        // Store the parameters for wp.addCategory
        Map<String, Object> struct = new HashMap<String, Object>();
        struct.put(""name"", category_name);
        struct.put(""slug"", category_slug);
        struct.put(""description"", category_desc);
        struct.put(""parent_id"", parent_id);

        client = new XMLRPCClient(blog.getUrl(), blog.getHttpuser(), blog.getHttppassword());

        Object[] params = { blog.getBlogId(), blog.getUsername(), blog.getPassword(), struct };

        Object result = null;
        try {
            result = client.call(""wp.newCategory"", params);
        } catch (XMLRPCException e) {
            e.printStackTrace();
        }

        if (result == null) {
            returnString = ""addCategory_failed"";
        } else {
            // Category successfully created. ""result"" is the ID of the new category
            // Initialize the category database
            // Convert ""result"" (= category_id) from type Object to int
            int category_id = Integer.parseInt(result.toString());
            // Insert the new category into database
            WordPress.wpDB.insertCategory(blog.getId(), category_id, parent_id, category_name);
            returnString = ""addCategory_success"";
            // auto select new category
            mSelectedCategories.add(category_name);
        }

        return returnString;
    }",function addCategory,0,394
6831,"public Collection<SQLSegment> extract(final SQLAST ast) {
        Optional<SQLStatementExtractor> extractor = SQLSegmentsExtractorFactory.getInstance(databaseType, ast.getType());
        if (!extractor.isPresent()) {
            return Collections.emptyList();
        }
        Collection<SQLSegment> result = new LinkedList<>();
        for (SQLSegmentExtractor each : extractor.get().getExtractors()) {
            if (each instanceof OptionalSQLSegmentExtractor) {
                Optional<? extends SQLSegment> sqlSegment = ((OptionalSQLSegmentExtractor) each).extract(ast.getParserRuleContext());
                if (sqlSegment.isPresent()) {
                    result.add(sqlSegment.get());
                }
            }
            if (each instanceof CollectionSQLSegmentExtractor) {
                result.addAll(((CollectionSQLSegmentExtractor) each).extract(ast.getParserRuleContext()));
            }
        }
        return result;
    }",Extract SQL segments.,0,241
6410,"protected static Dispatcher make() {
                        try {
                            return new ForJava8CapableVm(Class.class.getDeclaredMethod(""getAnnotatedSuperclass""),
                                    Class.class.getDeclaredMethod(""getAnnotatedInterfaces""),
                                    Field.class.getDeclaredMethod(""getAnnotatedType""),
                                    Method.class.getDeclaredMethod(""getAnnotatedReturnType""),
                                    Class.forName(""java.lang.reflect.Executable"").getDeclaredMethod(""getAnnotatedParameterTypes""),
                                    Class.forName(""java.lang.reflect.Executable"").getDeclaredMethod(""getAnnotatedExceptionTypes""),
                                    Class.forName(""java.lang.reflect.Executable"").getDeclaredMethod(""getAnnotatedReceiverType""),
                                    Class.forName(""java.lang.reflect.AnnotatedType"").getDeclaredMethod(""getType""));
                        } catch (RuntimeException exception) {
                            throw exception;
                        } catch (Exception ignored) {
                            return Dispatcher.ForLegacyVm.INSTANCE;
                        }
                    }",Creates a new annotation reader dispatcher if this is possible or falls back to a no-op version if the current JVM does not support this feature.,0,196
5670,"public static int parseAc3SyncframeSize(byte[] data) {
    if (data.length < 5) {
      return C.LENGTH_UNSET;
    }
    int fscod = (data[4] & 0xC0) >> 6;
    int frmsizecod = data[4] & 0x3F;
    return getAc3SyncframeSize(fscod, frmsizecod);
  }",Returns the size in bytes of the given AC-3 syncframe.,0,99
6160,"public static UserTrades adaptTradeHistory(BitstampUserTransaction[] bitstampUserTransactions) {

    List<UserTrade> trades = new ArrayList<UserTrade>();
    long lastTradeId = 0;
    for (BitstampUserTransaction bitstampUserTransaction : bitstampUserTransactions) {
      if (bitstampUserTransaction.getType().equals(BitstampUserTransaction.TransactionType.trade)) { // skip account deposits and withdrawals.
        OrderType orderType = bitstampUserTransaction.getUsd().doubleValue() > 0.0 ? OrderType.ASK : OrderType.BID;
        BigDecimal tradableAmount = bitstampUserTransaction.getBtc();
        BigDecimal price = bitstampUserTransaction.getPrice().abs();
        Date timestamp = BitstampUtils.parseDate(bitstampUserTransaction.getDatetime());
        long transactionId = bitstampUserTransaction.getId();
        if (transactionId > lastTradeId)
          lastTradeId = transactionId;
        final String tradeId = String.valueOf(transactionId);
        final String orderId = String.valueOf(bitstampUserTransaction.getOrderId());
        final BigDecimal feeAmount = bitstampUserTransaction.getFee();
        final CurrencyPair currencyPair = CurrencyPair.BTC_USD;

        UserTrade trade = new UserTrade(orderType, tradableAmount, currencyPair, price, timestamp, tradeId, orderId, feeAmount, currencyPair.counterSymbol);
        trades.add(trade);
      }
    }

    return new UserTrades(trades, lastTradeId, TradeSortType.SortByID);
  }",Adapt the user's trades,0,353
5543,"public static boolean isFalse(Boolean bool) {
        return Boolean.FALSE.equals(bool);
    }","Checks if a  Boolean value is  false, handling  null by returning  false.",0,31
6638,"public Path apply(TargetNode<?> input) {
                Path basePath = input.getBuildTarget().getBasePath();

                if (input.getConstructorArg() instanceof AndroidResourceDescription.Arg) {
                  return basePath;
                }

                return simplifyPath(basePath, minimumPathDepth, aggregationHaltPoints);
              }",Create all the modules we are capable of representing in IntelliJ from the supplied graph.,0,82
7325,"public static boolean getMobileDataEnabled() {
        try {
            TelephonyManager tm =
                    (TelephonyManager) Utils.getApp().getSystemService(Context.TELEPHONY_SERVICE);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                //noinspection ConstantConditions
                return tm.isDataEnabled();
            }
            //noinspection ConstantConditions
            @SuppressLint(""PrivateApi"")
            Method getMobileDataEnabledMethod = tm.getClass().getDeclaredMethod(""getDataEnabled"");
            if (null != getMobileDataEnabledMethod) {
                return (boolean) getMobileDataEnabledMethod.invoke(tm);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }",Return whether mobile data is enabled.,0,179
6386,"public static Tuple of(Object[] list) {
		if(list == null) return empty();
		switch (list.length){
			case 1:
				return of(list[0], null);
			case 2:
				return of(list[0], list[1]);
			case 3:
				return of(list[0], list[1], list[2]);
			case 4:
				return of(list[0], list[1], list[2], list[3]);
			case 5:
				return of(list[0], list[1], list[2], list[3], list[4]);
			case 6:
				return of(list[0], list[1], list[2], list[3], list[4], list[5]);
			case 7:
				return of(list[0], list[1], list[2], list[3], list[4], list[5], list[6]);
		}
		return new TupleN(list);
	}",Create a  Tuple with the given object.,0,317
7252,"public static MemorySegment allocateUnpooledSegment(int size, Object owner) {
		return new HybridMemorySegment(new byte[size], owner);
	}",Allocates some unpooled memory and creates a new memory segment that represents that memory.,0,42
7641,"private AsyncBufferedImage loadImage(int itemId, int quantity, boolean stackable)
	{
		AsyncBufferedImage img = new AsyncBufferedImage(36, 32, BufferedImage.TYPE_INT_ARGB);
		clientThread.invokeLater(() ->
		{
			if (client.getGameState().ordinal() < GameState.LOGIN_SCREEN.ordinal())
			{
				return false;
			}
			SpritePixels sprite = client.createItemSprite(itemId, quantity, 1, SpritePixels.DEFAULT_SHADOW_COLOR,
				stackable ? 1 : 0, false, CLIENT_DEFAULT_ZOOM);
			if (sprite == null)
			{
				return false;
			}
			sprite.toBufferedImage(img);
			img.changed();
			return true;
		});
		return img;
	}","Loads item sprite from game, makes transparent, and generates image",0,203
7249,"public List<PwPair> getPwPairsSortedByRank() {
    // Get all valid PwPairs.
    List<PwPair> allPwPairs = getPwPairs();

    // Sort the list in descending order.
    Collections.sort(allPwPairs, Collections.reverseOrder());

    // Filter the list.
    return removeDuplicateSiteUrls(allPwPairs);
  }",Return a list of PwPairs sorted by rank in descending order.,0,67
7625,"public Struct ceDataAttribute() {
        return recordParser.data();
    }",Construct the value of the data attribute of CloudEvents.,0,23
6664,"private Mono<OAuth2AccessTokenResponse> readTokenResponse(T grantRequest, ClientResponse response) {
		return response.body(oauth2AccessTokenResponse())
				.map(tokenResponse -> populateTokenResponse(grantRequest, tokenResponse));
	}",Reads the token response from the response body.,0,55
6027,"public String getMedia()
    {
        return getAttributeString(MEDIA_ARG_NAME);
    }","Returns the media type for the stream that this description element represents, such as ""audio"" or ""video"".",0,23
5504,"public MemberRequest addMemberRequest(MemberRequest memberRequest)
		throws SystemException {
		memberRequest.setNew(true);

		return memberRequestPersistence.update(memberRequest, false);
	}",Adds the member request to the database.,0,45
6093,"public static Object convertTo(SessionInterface session, JdbcConnection conn, Value v, Class<?> paramClass) {
        if (paramClass == Blob.class) {
            return new JdbcBlob(conn, v, 0);
        } else if (paramClass == Clob.class) {
            return new JdbcClob(conn, v, 0);
        }
        if (v.getType() == Value.JAVA_OBJECT) {
            Object o = Utils.deserialize(v.getBytes());
            if (paramClass.isAssignableFrom(o.getClass())) {
                return o;
            }
        }
        throw DbException.getUnsupportedException(paramClass.getName());
    }",Convert a value to the specified class.,0,193
5468,"public Annotation annotate(File file, String revision) throws Exception {
        ArrayList<String> argv = new ArrayList<String>();
        argv.add(getCommand());
        argv.add(""annotate"");
        argv.add(""-u"");
        argv.add(""-n"");
        argv.add(""-f"");
        if (revision != null) {
            argv.add(""-r"");
            argv.add(revision);
        }
        argv.add(file.getName());
        ProcessBuilder pb = new ProcessBuilder(argv);
        pb.directory(file.getParentFile());
        Process process = null;
        BufferedReader in = null;
        Annotation ret = null;
        try {
            process = pb.start();
            in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            ret = new Annotation(file.getName());
            String line;
            int lineno = 0;
            while ((line = in.readLine()) != null) {
                ++lineno;
                Matcher matcher = ANNOTATION_PATTERN.matcher(line);
                if (matcher.find()) {
                    String author = matcher.group(1);
                    String rev = matcher.group(2);
                    ret.addLine(rev, author, true);
                } else {
                    System.err.println(""Error: did not find annotation in line "" + lineno);
                    System.err.println(""["" + line + ""]"");
                }
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    // Just ignore
                }
            }
            if (process != null) {
                try {
                    process.exitValue();
                } catch (IllegalThreadStateException e) {
                    // the process is still running??? just kill it..
                    process.destroy();
                }
            }
        }
        return ret;
    }",Annotate the specified file/revision.,0,558
7770,"public ArrayList<CheckBox> getCurrentCheckBoxes() {
		return ensureArrayListOrNull(viewFetcher.getCurrentViews(CheckBox.class));
	}",Returns a  List of the  CheckBoxes contained in the current  Activity.,0,32
6782,"public static Indent logAndIndent(String format, Object arg) {
        if (ENABLED) {
            return logvAndIndent(format, arg);
        }
        return null;
    }","A convenience function which combines  #log(String, Object) and  #indent().",0,53
5834,"public static List<String> getProperties( String parent )
    {
        return getListProperty( parent, new ArrayList<String>() );
    }","Return all immediate children property values of a parent Jive property as a list of strings, or an empty list if there are no children.",0,45
6815,"public List getPermittedPagesInOrder(Site site)
	{
		// Get all of the pages
		List<SitePage> pages = site.getOrderedPages();
		boolean siteUpdate = SecurityService.unlock(""site.upd"", site.getReference());

		List<SitePage> newPages = new ArrayList<>();

		for (SitePage p : pages)
		{
			// check if current user has permission to see page
			List pTools = p.getTools();
			Iterator iPt = pTools.iterator();
			boolean allowPage = false;
			while (iPt.hasNext())
			{
				ToolConfiguration placement = (ToolConfiguration) iPt.next();

				boolean thisTool = allowTool(site, placement);
				boolean unHidden = siteUpdate || ! isHidden(placement);
				if (thisTool && unHidden) allowPage = true;
			}
			if (allowPage) newPages.add(p);
		}

		PageFilter pageFilter = portal.getPageFilter();

		if (pageFilter != null)
		{
			newPages = pageFilter.filter(newPages, site);
		}

		// Force ""Overview"" to the top at all times if enabled
		if (ServerConfigurationService.getBoolean(SAK_PROP_FORCE_OVERVIEW_TO_TOP, SAK_PROP_FORCE_OVERVIEW_TO_TOP_DEFAULT))
		{
			List<SitePage> newPagesCopy = new ArrayList<>(newPages);
			for (SitePage page : newPages)
			{
				if (OVERVIEW_TOOL_TITLE.equalsIgnoreCase(page.getTitle()))
				{
					int index = newPages.indexOf(page);
					if (index >= 0)
					{
						newPagesCopy = new ArrayList<>(newPages.size());
						newPagesCopy.addAll(newPages.subList(0, index));
						newPagesCopy.add(0, (SitePage) newPages.get(index));
						newPagesCopy.addAll(newPages.subList(index + 1, newPages.size()));
					}
				}
			}

			return newPagesCopy;
		}

		return newPages;
	}","Retrieve the list of pages in this site, checking to see if the user has permission to see the page - by checking the permissions of tools on the page.",0,513
7170,"private MosaicOutput prepareResponse() throws DataSourceException {

        try {
            // === select overview
            chooseOverview();

            // === extract bbox
            initBBOX();

            // === init transformations
            initTransformations();

            // === init raster bounds
            initRasterBounds();
            
            // === init excess granule removal if needed
            initExcessGranuleRemover();

            // === create query and basic BBOX filtering
            MosaicQueryBuilder queryBuilder = new MosaicQueryBuilder(request, mosaicBBox);
            final Query query = queryBuilder.build();

            // === collect granules
            final MosaicProducer visitor = new MosaicProducer(submosaicProducerFactory
                    .createProducers(this.getRequest(), this.getRasterManager(), this, false));
            rasterManager.getGranuleDescriptors(query, visitor);

            // get those granules and create the final mosaic
            MosaicOutput returnValue = visitor.produce();

            //
            // Did we actually load anything?? Notice that it might happen that
            // either we have holes inside the definition area for the mosaic
            // or we had some problem with missing tiles, therefore it might
            // happen that for some bboxes we don't have anything to load.
            //

            //
            // Create the mosaic image by doing a crop if necessary and also
            // managing the transparent color if applicable. Be aware that
            // management of the transparent color involves removing
            // transparency information from the input images.
            //
            if (returnValue != null) {
                if (LOGGER.isLoggable(Level.FINE)) {
                    LOGGER.fine(""Loaded bbox "" + mosaicBBox.toString() + "" while crop bbox ""
                            + request.spatialRequestHelper.getComputedBBox().toString());
                }
                return returnValue;
            }

            if (visitor.granulesNumber == 0) {
                // Redo the query without filter to check whether we got no granules due
                // to a filter. In that case we need to return null
                // Notice that we are using a dryRun visitor to make sure we don't
                // spawn any loading tasks, we also ensure we get only 1 feature at most
                // to make this blazing fast
                LOGGER.fine(""We got no granules, let's do a dry run with no filters"");
                List<SubmosaicProducer> collectors = submosaicProducerFactory
                        .createProducers(this.getRequest(), this.getRasterManager(), this, true);
                final MosaicProducer dryRunVisitor = new MosaicProducer(true, collectors);
                final Utils.BBOXFilterExtractor bboxExtractor = new Utils.BBOXFilterExtractor();
                query.getFilter().accept(bboxExtractor, null);
                query.setFilter(FeatureUtilities.DEFAULT_FILTER_FACTORY.bbox(
                        FeatureUtilities.DEFAULT_FILTER_FACTORY.property(rasterManager
                                .getGranuleCatalog().getType(rasterManager.getTypeName())
                                .getGeometryDescriptor().getName()),
                        bboxExtractor.getBBox()));
                query.setMaxFeatures(1);
                rasterManager.getGranuleDescriptors(query, dryRunVisitor);
                if (dryRunVisitor.granulesNumber > 0) {
                    LOGGER.fine(
                            ""Dry run got a target granule, returning null as the additional filters did filter all the granules out"");
                    // It means the previous lack of granule was due to a filter excluding all the results. Then we return null
                    return null;
                }
            }

            // do we return a null (outside of the coverage) or a blank? The choice is ""hard"" as we
            // might be in a hole of the coverage and not know it
            if (!mosaicBBox.intersects((BoundingBox) ReferencedEnvelope.reference(coverageEnvelope)) &&
                    !mosaicBBox.intersects((BoundingBox) ReferencedEnvelope.reference(rasterManager
                            .spatialDomainManager.coverageBBox))) {
                if (LOGGER.isLoggable(Level.FINE)) {
                    LOGGER.fine(""Could not locate any granule in the requested bbox, returning null as it does not "" +
                            ""match the cached bbox of the mosaic"");
                }
                return null;
            } else {
                // prepare a blank response
                return createBlankResponse();
            }

        } catch (Exception e) {
            throw new DataSourceException(""Unable to create this mosaic"", e);
        }
    }",This method loads the granules which overlap the requested  GeneralEnvelope using the provided values for alpha and input ROI.,0,719
5683,"public STStrokeArrowLength getStartarrowlength() {
        return startarrowlength;
    }",Gets the value of the startarrowlength property.,0,19
5950,"static Gen<Long> choose(long min, long max) {
        if (min > max) {
            throw new IllegalArgumentException(String.format(""min > max: %s > %s"", min, max));
        }
        if (min == max) {
            return ignored -> min;
        } else {
            return random -> {
                final double d = random.nextDouble();
                return (long) ((d * max) + ((1.0 - d) * min) + d);
            };
        }
    }","Chooses a long between min and max, bounds inclusive and numbers equally distributed.",0,167
7328,"public boolean match(Project p) {
        return compiledPattern.matcher(p.getName()).matches();
    }",Test group for a match,0,35
6032,"Set<String> jbossSchemaNames() {
        return getSchemas().keySet();
    }",A collection of the schema names.,0,26
6326,"public static List<String> getInputArguments() {
        if (Lazy.runtimeMXBean == null) {
            return null;
        }
        return Lazy.runtimeMXBean.getInputArguments();
    }",Gets the input arguments passed to the Java virtual machine which does not include the arguments to the  main method.,0,55
6421,"public Object convertId(Object id) {

		if (id == null) {
			return null;
		}

		if (id instanceof String) {
			return ObjectId.isValid(id.toString()) ? conversionService.convert(id, ObjectId.class) : id;
		}

		try {
			return conversionService.canConvert(id.getClass(), ObjectId.class) ? conversionService
					.convert(id, ObjectId.class) : delegateConvertToMongoType(id, null);
		} catch (ConversionException o_O) {
			return delegateConvertToMongoType(id, null);
		}
	}",Converts the given raw id value into either  ObjectId or  String.,0,170
6504,"public static Response getRedirectResponse(final String url, final Map<String, String> parameters) {
        final var builder = new StringBuilder(parameters.size() * CONST_REDIRECT_RESPONSE_MULTIPLIER + CONST_REDIRECT_RESPONSE_BUFFER);
        final var sanitizedUrl = sanitizeUrl(url);
        LOGGER.debug(""Sanitized URL for redirect response is [{}]"", sanitizedUrl);
        final var fragmentSplit = Splitter.on(""#"").splitToList(sanitizedUrl);
        builder.append(fragmentSplit.get(0));
        final var params = parameters.entrySet().stream().filter(entry -> entry.getValue() != null).map(entry -> {
            String param;
            try {
                param = String.join(""="", entry.getKey(), EncodingUtils.urlEncode(entry.getValue()));
            } catch (final Exception e) {
                param = String.join(""="", entry.getKey(), entry.getValue());
            }
            return param;
        }).collect(Collectors.joining(""&""));
        if (!(params == null || params.isEmpty())) {
            builder.append(url.contains(""?"") ? ""&"" : ""?"");
            builder.append(params);
        }
        if (fragmentSplit.size() > 1) {
            builder.append('#');
            builder.append(fragmentSplit.get(1));
        }
        final var urlRedirect = builder.toString();
        LOGGER.debug(""Final redirect response is [{}]"", urlRedirect);
        return new DefaultResponse(ResponseType.REDIRECT, urlRedirect, parameters);
    }",Gets the redirect response.,0,449
7414,"public boolean isBatchingAckTrackerEmpty() {
        return consumers.stream().allMatch(ConsumerImpl::isBatchingAckTrackerEmpty);
    }",helper method that returns current state of data structure used to track acks for batch messages,0,31
7605,"public double distanceSquared(Vector o) {
        return NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z);
    }",Get the squared distance between this vector and another.,0,63
7679,"public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
            throws IOException, ServletException {

        synchronized (req) {
            SessionTimeoutSupport.restoreTimeout(req);

            AtmosphereResourceImpl r = null;
            try {
                if (trackActiveRequest) {
                    long l = (Long) req.getAttribute(MAX_INACTIVE);
                    if (l == -1) {
                        // The closedDetector closed the connection.
                        return timedoutAction;
                    }
                    req.setAttribute(MAX_INACTIVE, (long) -1);
                }

                logger.debug(""Cancelling the connection for request {}"", req);

                r = (AtmosphereResourceImpl) req.resource();
                if (r != null) {
                    r.getAtmosphereResourceEvent().setCancelled(true);
                    invokeAtmosphereHandler(r);

                    try {
                        r.getResponse().getOutputStream().close();
                    } catch (Throwable t) {
                        try {
                            r.getResponse().getWriter().close();
                        } catch (Throwable t2) {
                        }
                    }
                }
            } catch (Throwable ex) {
                // Something wrong happenned, ignore the exception
                logger.debug(""failed to cancel resource: "" + r, ex);
            } finally {
                config.framework().notify(Action.TYPE.CANCELLED, req, res);
                try {
                    if (r != null) {
                        r.notifyListeners();
                        r.setIsInScope(false);
                        r.cancel();
                    }
                } catch (Throwable t) {
                    logger.trace(""cancel"", t);
                } finally {
                    if (r != null) {
                        destroyResource(r);
                    }
                }
            }
        }

        return cancelledAction;
    }",All proprietary Comet based  Servlet must invoke the cancelled method when the underlying WebServer detect that the client closed the connection.,0,468
6522,"public boolean isMappable() {
      
      boolean isNotClassAttribute = !delegate.getName().equals(""class"");
      boolean hasGetter = delegate.getReadMethod() != null;
      boolean hasField = ReflectionUtils.findField(owningType, delegate.getName()) != null;
      
      return isNotClassAttribute && hasGetter && hasField;
    }",Returns whether the underlying property is actually mappable.,0,101
5583,"public RadiusAuthenticator getRadiusAuthenticator() {
        return RadiusClient.getAuthProtocol(radiusServerConfigurationContext.getProtocol().getName());
    }",Gets radius authenticator.,0,32
6241,"public Date getLastActive()
    {
        return lastActive;
    }",Get the EPerson's last-active stamp.,0,20
6152,"public String getFullRequestUrl() {
        return UrlUtils.buildFullRequestUrl(this.getScheme(), this.getServerName(), this.getServerPort(), this.getContextPath(),
        this.getRequestURL(), this.getServletPath(), this.getRequestURI(), this.getPathInfo(), this.getQueryString());
    }",Indicates the URL that the user agent used for this request.,0,85
5673,"private SC_HANDLE openServiceControlManager(String machine, int access) {
    return advapi32.OpenSCManager(machine, null, access);
  }",Get a handle to the ServiceControlManager.,0,38
6910,"public String getPrivacyStatementURL() {
        final Collection<String> items = getPrivacyStatementURLs();
        if (items.isEmpty()) {
            return this.registeredService.getPrivacyUrl();
        }
        return StringUtils.collectionToDelimitedString(items, ""."");
    }",Gets privacy statement uRL.,0,74
5294,"public static boolean isClientSASLEnabled() {
    return Boolean.valueOf(System.getProperty(
        ZookeeperConfigOptions.PROP_ZK_ENABLE_SASL_CLIENT, ""true""));
  }",Is the system property enabling the SASL client set?,0,40
5735,"public boolean isSuppressed(String warningId) {
    return suppressions.contains(warningId);
  }",Extends a set of suppressed warnings with the contents of any SuppressWarnings annotations on the given symbol.,0,27
7647,"public User executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<User>(){}.getType();
            return execute(handler).as(type);
        }",GET /user/username,0,59
7752,"protected Iterable<Object> toIterable(Object result) {
        return FpKit.toCollection(result);
    }",Converts an object that is known to should be an Iterable into one,0,30
6581,"public String getCoords() {
        if(decimalCoords!=null){
            return decimalCoords;
        }else if (latitude!=null && latitudeRef!=null && longitude!=null && longitudeRef!=null) {
            Timber.d(""Latitude: %s %s"", latitude, latitudeRef);
            Timber.d(""Longitude: %s %s"", longitude, longitudeRef);

            decimalCoords = getDecimalCoords(latitude, latitudeRef, longitude, longitudeRef);
            return decimalCoords;
        } else {
            return null;
        }
    }","Extracts geolocation (either of image from EXIF data, or of user)",0,145
5878,"public KaleoTimer addKaleoTimer(KaleoTimer kaleoTimer)
		throws SystemException {
		kaleoTimer.setNew(true);

		return kaleoTimerPersistence.update(kaleoTimer, false);
	}",Adds the kaleo timer to the database.,0,45
5649,"private Object readResolve() {
            return SHORT_PREFIX_STYLE;
        }",Ensure Singleton after serialization.,0,19
6923,"public static Tag uri(HttpServletRequest request, HttpServletResponse response) {
		if (request != null) {
			String pattern = getMatchingPattern(request);
			if (pattern != null) {
				return Tag.of(""uri"", pattern);
			}
			else if (response != null) {
				HttpStatus status = extractStatus(response);
				if (status != null && status.is3xxRedirection()) {
					return URI_REDIRECTION;
				}
				if (status != null && status.equals(HttpStatus.NOT_FOUND)) {
					return URI_NOT_FOUND;
				}
			}
			String pathInfo = getPathInfo(request);
			if (pathInfo.isEmpty()) {
				return URI_ROOT;
			}
		}
		return URI_UNKNOWN;
	}",Creates a  uri tag based on the URI of the given  request.,0,226
7371,"protected static Comparable getValue(@Nonnull String input, @Nonnull FieldSpec.DataType dataType) {
    try {
      if (dataType != FieldSpec.DataType.BYTES) {
        return (Comparable) dataType.convert(input);
      } else {
        return new ByteArray(BytesUtils.toBytes(input));
      }
    } catch (Exception e) {
      throw new BadQueryRequestException(e);
    }
  }",Helper method to get value of the specified type from the given string.,0,120
6280,"public boolean isMessageFlagged() {
      return isMessageFlagged(getMessage());
    }",Returns if message is read,0,24
6971,"private NodeInfo[] generateOrderedNodeInfos(Collection<WorkerInfo> workerInfos) {
    NodeInfo[] ret = new NodeInfo[workerInfos.size()];
    int index = 0;
    for (WorkerInfo workerInfo : workerInfos) {
      ret[index ++] = new NodeInfo(workerInfo);
    }

    Arrays.sort(ret, new Ordering<NodeInfo>() {
      @Override
      public int compare(NodeInfo info0, NodeInfo info1) {
        return info0.getHost().compareTo(info1.getHost());
      }
    });

    return ret;
  }",Order the nodes by hostName and generate NodeInfo list for UI display,0,165
6637,"public int size() {
        return (int) collection.getCount(getQuery(), getKeysWanted(), findModel.getLimit(), findModel.getSkip(), getReadPreference(),
                                         findModel.getMaxTime(MILLISECONDS), MILLISECONDS);
    }",Counts the number of objects matching the query this does take limit/skip into consideration,0,66
6709,"public static boolean hasMetadata(InputStream is) {
        try {
            List<BibEntry> l = XMPUtil.readXMP(is);
            return !l.isEmpty();
        } catch (EncryptionNotSupportedException ex) {
            LOGGER.info(""Encryption not supported by XMPUtil"");
            return false;
        } catch (IOException e) {
            LOGGER.error(""XMP reading failed"", e);
            return false;
        }
    }","Will try to read XMP metadata from the given file, returning whether metadata was found.",0,118
5709,"public static Vector<Character> ofAll(char[] array) {
        Objects.requireNonNull(array, ""array is null"");
        return Vector.ofAll(() -> Iterator.ofAll(array));
    }",Creates a Vector based on the elements of a char array.,0,59
7035,"private Optional<Boolean> assertConnectorAndTasksRunning(String connectorName, int numTasks) {
        return assertConnectorState(
            connectorName,
            AbstractStatus.State.RUNNING,
            numTasks,
            AbstractStatus.State.RUNNING);
    }",Confirm that a connector with an exact number of tasks is running.,0,55
6849,"private static String getContents(String fileName) {
        InputStream stream = InfinispanClientProducer.class.getResourceAsStream(fileName);
        try (Scanner scanner = new Scanner(stream, ""UTF-8"")) {
            return scanner.useDelimiter(""\\A"").next();
        }
    }",Reads all the contents of the file as a single string using default charset,0,81
7887,"public int yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char[] yy_buffer_l = yy_buffer;
    char[] yycmap_l = yycmap;

    int[] yytrans_l = yytrans;
    int[] yy_rowMap_l = yy_rowMap;
    byte[] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l) {
            yy_input = yy_buffer_l[yy_currentPos_l++];
          } else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          } else {
            // store back cached positions
            yy_currentPos = yy_currentPos_l;
            yy_markedPos = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l = yy_currentPos;
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            yy_endRead_l = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            } else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[yy_rowMap_l[yy_state] + yycmap_l[yy_input]];
          if (yy_next == -1) {
            break yy_forAction;
          }
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ((yy_attributes & 1) == 1) {
            yy_action = yy_state;
            yy_markedPos_l = yy_currentPos_l;
            if ((yy_attributes & 8) == 8) {
              break yy_forAction;
            }
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 4:
        case 9:
        case 10:
        case 13:
          {
            return ACCEPT;
          }
        case 19:
          break;
        case 5:
        case 6:
        case 7:
          {
            return IGNORE;
          }
        case 20:
          break;
        case 2:
          {
            return IGNORE;
          }
        case 21:
          break;
        case 15:
          {
            yybegin(SENTENCE);
            /* System.out.println(""Beginning of sentence""); */
            return ACCEPT;
          }
        case 22:
          break;
        case 3:
          {
            System.out.print(yytext());
          }
        case 23:
          break;
        case 16:
        case 17:
          {
            yybegin(YYINITIAL);
            /* System.out.println(""End of sentence""); */
            return ACCEPT;
          }
        case 24:
          break;
        default:
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return YYEOF;
          } else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }","Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error occurs.",0,838
6315,"public RegisterValue asValue(PlatformKind kind) {
        if (values.containsKey(kind)) {
            return values.get(kind);
        } else {
            RegisterValue ret = new RegisterValue(kind, this);
            values.put(kind, ret);
            return ret;
        }
    }",Gets this register as a plain RegisterValue value with a specified kind.,0,87
6560,"public static String toString(Collection<?> collection, String separator) {
		if (collection == null) {
			return null;
		}

		String asString =
			collection.stream().map(o -> o.toString()).collect(Collectors.joining(separator));
		return ""[ "" + asString + "" ]"";
	}","Turn the given data into an attractive string, with the separator of your choosing",0,107
5832,"public MetaRegion getMetaRegionForRow(final byte [] row)
  throws NotAllMetaRegionsOnlineException {
    if (!areAllMetaRegionsOnline()) {
      throw new NotAllMetaRegionsOnlineException();
    }
    // Row might be in -ROOT- table.  If so, return -ROOT- region.
    int prefixlen = META_REGION_PREFIX.length;
    if (row.length > prefixlen &&
     Bytes.compareTo(META_REGION_PREFIX, 0, prefixlen, row, 0, prefixlen) == 0) {
    	return new MetaRegion(this.master.getRootRegionLocation(), HRegionInfo.ROOT_REGIONINFO);
    }
    return this.onlineMetaRegions.floorEntry(row).getValue();
  }",Get metaregion that would host passed in row.,0,154
7727,"private Iterable<TransactionObserver> observers() {
		if ( observers == null || observers.isEmpty() ) {
			return Collections.emptyList();
		}
		else {
			return new ArrayList<>( observers );
		}
	}","Needed because while iterating the observers list and executing the before/update callbacks, some observers might get removed from the list.",0,77
7688,"public static void main(String[] args) throws IOException, ClassNotFoundException {
    RedwoodConfiguration.standard().apply();  // Disable SLF4J crap.
    ArgumentParser.fillOptions(KBPStatisticalExtractor.class, args);  // Fill command-line options

    // Load the test (or dev) data
    forceTrack(""Test data"");
    List<Pair<KBPInput, String>> testExamples = KBPRelationExtractor.readDataset(TEST_FILE);
    log.info(""Read "" + testExamples.size() + "" examples"");
    endTrack(""Test data"");

    // If we can't find an existing model, train one
    if (!IOUtils.existsInClasspathOrFileSystem(MODEL_FILE)) {
      forceTrack(""Training data"");
      List<Pair<KBPInput, String>> trainExamples = KBPRelationExtractor.readDataset(TRAIN_FILE);
      log.info(""Read "" + trainExamples.size() + "" examples"");
      log.info("""" + trainExamples.stream().map(Pair::second).filter(NO_RELATION::equals).count() + "" are "" + NO_RELATION);
      endTrack(""Training data"");

      // Featurize + create the dataset
      forceTrack(""Creating dataset"");
      RVFDataset<String, String> dataset = new RVFDataset<>();
      final AtomicInteger i = new AtomicInteger(0);
      long beginTime = System.currentTimeMillis();
      trainExamples.stream().parallel().forEach(example -> {
        if (i.incrementAndGet() % 1000 == 0) {
          log.info(""["" + Redwood.formatTimeDifference(System.currentTimeMillis() - beginTime) +
              ""] Featurized "" + i.get() + "" / "" + trainExamples.size() + "" examples"");
        }
        Counter<String> features = features(example.first);  // This takes a while per example
        synchronized (dataset) {
          dataset.add(new RVFDatum<>(features, example.second));
        }
      });
      trainExamples.clear();  // Free up some memory
      endTrack(""Creating dataset"");

      // Train the classifier
      log.info(""Training classifier:"");
      Classifier<String, String> classifier = trainMultinomialClassifier(dataset, FEATURE_THRESHOLD, SIGMA);
      dataset.clear();  // Free up some memory

      // Save the classifier
      IOUtils.writeObjectToFile(new KBPStatisticalExtractor(classifier), MODEL_FILE);
    }

    // Read either a newly-trained or pre-trained model
    Object model = IOUtils.readObjectFromURLOrClasspathOrFileSystem(MODEL_FILE);
    KBPStatisticalExtractor classifier;
    if (model instanceof Classifier) {
      //noinspection unchecked
      classifier = new KBPStatisticalExtractor((Classifier<String, String>) model);
    } else {
      classifier = ((KBPStatisticalExtractor) model);
    }

    // Evaluate the model
    classifier.computeAccuracy(testExamples.stream(), PREDICTIONS.map(x -> {
      try {
        return ""stdout"".equalsIgnoreCase(x) ? System.out : new PrintStream(new FileOutputStream(x));
      } catch (IOException e) {
        throw new RuntimeIOException(e);
      }
    }));
  }","Score the given input, returning both the classification decision and the probability of that decision.",0,773
6124,"public Connection getConnection() throws ResourceException {
		ConnectionFactory targetConnectionFactory = obtainTargetConnectionFactory();
		Connection con = ConnectionFactoryUtils.doGetConnection(targetConnectionFactory);
		return getTransactionAwareConnectionProxy(con, targetConnectionFactory);
	}",Delegate to ConnectionFactoryUtils for automatically participating in Spring-managed transactions.,0,56
7672,"public long set(long instant, int year) {
        Utils.verifyValueBounds(this, Math.abs(year),
                                iChronology.getMinYear(), iChronology.getMaxYear());
        //
        // Do nothing if no real change is requested.
        //
        int thisWeekyear = get( instant );
        if ( thisWeekyear == year ) {
            return instant;
        }
        //
        // Calculate the DayOfWeek (to be preserved).
        //
        int thisDow = iChronology.dayOfWeek().get( instant );
        //
        // Calculate the maximum weeks in the target year.
        //
        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );
        int weeksInToYear = iChronology.getWeeksInYear( year );
        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?
            weeksInToYear : weeksInFromYear;
        //
        // Get the current week of the year. This will be preserved in
        // the output unless it is greater than the maximum possible
        // for the target weekyear.  In that case it is adjusted
        // to the maximum possible.
        //
        int setToWeek = iChronology.weekOfWeekyear().get( instant );
        if ( setToWeek > maxOutWeeks ) {
            setToWeek = maxOutWeeks;
        }
        //
        // Get a wroking copy of the current date-time.
        // This can be a convenience for debugging.
        //
        long workInstant = instant; // Get a copy
        //
        // Attempt to get close to the proper weekyear.
        // Note - we cannot currently call ourself, so we just call
        // set for the year.  This at least gets us close.
        //
        workInstant = iChronology.year().set( workInstant, year );
        //
        // Calculate the weekyear number for the get close to value
        // (which might not be equal to the year just set).
        //
        int workWoyYear = iChronology.weekyear().get( workInstant );

        //
        // At most we are off by one year, which can be ""fixed"" by
        // adding/subtracting a week.
        //
        if ( workWoyYear < year ) {
            workInstant += DateTimeConstants.MILLIS_PER_WEEK;
        } else if ( workWoyYear > year ) {
            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;
        }
        //
        // Set the proper week in the current weekyear.
        //

        // BEGIN: possible set WeekOfWeekyear logic.
        int currentWoyWeek = iChronology.weekOfWeekyear().get( workInstant );
        // No range check required (we already know it is OK).
        workInstant = workInstant + (setToWeek - currentWoyWeek)
            * (long)DateTimeConstants.MILLIS_PER_WEEK;
        // END: possible set WeekOfWeekyear logic.

        //
        // Reset DayOfWeek to previous value.
        //
        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );
        //
        // Return result.
        //
        return workInstant;
    }",Set the Year of a week based year component of the specified time instant.,0,546
5887,"public String getName() {
        Object fieldValue = this.getFieldValue(""ID"");
        if (fieldValue instanceof Structure) {
            Structure id = (Structure) fieldValue;
            return id == null ? null : id.getFieldValue(""name"").toString().substring(2);// blender adds 2-charactes as a name prefix
        }
        Object name = this.getFieldValue(""name"", null);
        return name == null ? null : name.toString().substring(2);
    }",This method returns the name of the structure.,0,144
7432,"private Node removeOneNodeFromToVisitSet() {
        final Iterator<Node> iterator = this.toVisit.iterator();
        final Node node = iterator.next();
        iterator.remove();
        return node;
      }",Removes one node from the toVisit set and returns that node.,0,64
5918,"public boolean next()
    {
        return (++currentPos < size);
    }",Sets the current position of the Data set to the next row.,0,28
6464,"private boolean verticalHitTest(Vector3f origin) {
        boolean result = false;
        for (int x = -1; x < 2; ++x) {
            for (int z = -1; z < 2; ++z) {
                for (int y = -1; y < 1; ++y) {
                    Vector3f blockPos = new Vector3f((int) (origin.x + x + 0.5f), (int) (origin.y + y + 0.5f), (int) (origin.z + z + 0.5f));
                    int blockType1 = _parent.getBlock((int) (blockPos.x + 0.5f), (int) (blockPos.y + 0.5f), (int) (blockPos.z + 0.5f));

                    if (!Block.getBlock(blockType1).isPenetrable()) {
                        if (_position.x + 0.1f > blockPos.x - 0.5f && _position.x - 0.1f < blockPos.x + 0.5f && _position.z + 0.1f > blockPos.z - 0.5f && _position.z - 0.1f < blockPos.z + 0.5f && _position.y + 0.1f > blockPos.y - 0.5f && _position.y - 0.1f < blockPos.y + 0.5f) {
                            //Vector3f normal = new Vector3f(0f, y, 0f).normalise(null);
                            result = true;

                            _position.y = origin.y;
                            _gravity = 0f;
                        }
                    }
                }
            }
        }

        return result;
    }",TODO: Check for blocks above the player!,0,440
7815,"public Action doCometSupport(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException {
        req.setAttribute(BROADCASTER_FACTORY, broadcasterFactory);
        req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
        req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
        req.setAttribute(ATMOSPHERE_CONFIG, config);

        AtmosphereRequest r = null;
        Action a = null;
        try {
            if (config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST) != null
                    && (isIECandidate(req) || req.getParameter(HeaderConfig.JSONP_CALLBACK_NAME) != null)
                    && req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {

                Map<String, String> headers = configureQueryStringAsRequest(req);
                String body = headers.remove(ATMOSPHERE_POST_BODY);
                if (body != null && body.isEmpty()) {
                    body = null;
                }

                r = new AtmosphereRequest.Builder()
                        .headers(headers)
                        .method(body != null && req.getMethod().equalsIgnoreCase(""GET"") ? ""POST"" : req.getMethod())
                        .body(body)
                        .request(req).build();

                a = cometSupport.service(r, res);
            } else {
                if (AtmosphereRequest.class.isAssignableFrom(req.getClass())) {
                    return cometSupport.service(req, res);
                } else {
                    return cometSupport.service(AtmosphereRequest.wrap(req), res);
                }
            }
        } catch (IllegalStateException ex) {
            if (ex.getMessage() != null && ex.getMessage().startsWith(""Tomcat failed"")) {
                if (!isFilter) {
                    logger.warn(""Failed using comet support: {}, error: {} Is the Nio or Apr Connector enabled?"", cometSupport.getClass().getName(),
                            ex.getMessage());
                    logger.warn(""Using BlockingIOCometSupport."");
                }
                logger.trace(ex.getMessage(), ex);

                cometSupport = new BlockingIOCometSupport(config);
                doCometSupport(req, res);
            } else {
                logger.error(""AtmosphereServlet exception"", ex);
                throw ex;
            }
        } finally {
            if (r != null && a != null && a.type != Action.TYPE.SUSPEND) {
                r.destroy();
            }
        }
        return null;
    }",Invoke the proprietary  CometSupport,0,646
7405,"private IgfsHadoopFileSystem fileSystem() throws Exception {
        Configuration fsCfg = new Configuration();

        fsCfg.addResource(U.resolveIgniteUrl(""modules/core/src/test/config/hadoop/core-site-loopback.xml""));

        fsCfg.setBoolean(""fs.ggfs.impl.disable.cache"", true);

        if (logging)
            fsCfg.setBoolean(String.format(PARAM_GGFS_LOG_ENABLED, ""ggfs:ggfs-grid@""), logging);

        fsCfg.setStrings(String.format(PARAM_GGFS_LOG_DIR, ""ggfs:ggfs-grid@""), U.getIgniteHome());

        return (IgfsHadoopFileSystem)FileSystem.get(new URI(""ggfs://ggfs:ggfs-grid@/""), fsCfg);
    }",Instantiate new file system.,0,145
5479,"public NotifyBuilder whenReceived(final int number) {
        stack.add(new EventPredicateSupport() {
            private AtomicInteger current = new AtomicInteger();

            @Override
            public boolean onExchangeCreated(Exchange exchange) {
                current.incrementAndGet();
                return true;
            }

            public boolean matches() {
                return current.get() >= number;
            }

            @Override
            public void reset() {
                current.set(0);
            }

            @Override
            public String toString() {
                return ""whenReceived("" + number + "")"";
            }
        });
        return this;
    }",Sets a condition when number of  Exchange has been received.,0,186
5863,"public BooleanValueModel getIsDialogsEmpty() {
        return isDialogsEmpty;
    }",Dialogs empty View Model,0,19
7820,"public ProcessingColorProvider getProcessingColorProvider() {
		return (fColorProvider == null) ? new ProcessingColorProvider() : fColorProvider;
	}",Returns the shared color provider.,0,38
6083,"public static StreamExecutionEnvironment getExecutionEnvironment() {
		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();
		if (env instanceof ContextEnvironment) {
			ContextEnvironment ctx = (ContextEnvironment) env;
			return createContextEnvironment(ctx.getClient(), ctx.getJars(),
					ctx.getDegreeOfParallelism());
		} else if (env instanceof OptimizerPlanEnvironment | env instanceof PreviewPlanEnvironment) {
			return new StreamPlanEnvironment(env);
		} else {
			return createLocalEnvironment();
		}
	}",Creates an execution environment that represents the context in which the program is currently executed.,0,138
7375,"public ContainerConfiguration build() {
      return new ContainerConfiguration(
          creationTime,
          entrypoint,
          programArguments,
          environmentMap == null ? null : ImmutableMap.copyOf(environmentMap),
          exposedPorts == null ? null : ImmutableList.copyOf(exposedPorts),
          labels == null ? null : ImmutableMap.copyOf(labels),
          user);
    }",Builds the  ContainerConfiguration.,0,104
7388,"public EqualsBuilder append(int lhs, int rhs) {
        isEquals &= (lhs == rhs);
        return this;
    }",Test if two ints are equal.,0,43
6266,"public static String removeCR( String in ) {
    char[] inArray = in.toCharArray();
    StringBuffer out = new StringBuffer( inArray.length );
    for ( int i = 0; i < inArray.length; i++ ) {
      char c = inArray[i];
      if ( c != '\n' ) {
        out.append( c );
      }
    }
    return out.toString();
  } // removeCR",Remove CR / LF from String,0,144
5931,"public boolean delete(Path path, boolean recursive) throws IOException {
    LOG.info(""delete({}, {})"", path, recursive);
    if (mStatistics != null) {
      mStatistics.incrementWriteOps(1);
    }
    AlluxioURI uri = new AlluxioURI(HadoopUtils.getPathWithoutScheme(path));
    DeleteOptions options = DeleteOptions.defaults().setRecursive(recursive);
    try {
      mFileSystem.delete(uri, options);
      return true;
    } catch (InvalidPathException | FileDoesNotExistException e) {
      LOG.info(""delete failed: {}"", e.getMessage());
      return false;
    } catch (AlluxioException e) {
      throw new IOException(e);
    }
  }",Attempts to delete the file or directory with the specified path.,0,198
7282,"private Expression compileExpression() throws ParseException {
    try {
      Tree antlrTree = getAntlrComputedExpressionTree();
      
      beginCompile();
      recursiveCompile(antlrTree, ComputedType.DOUBLE);
      endCompile();
      
      Class<? extends Expression> evaluatorClass = new Loader(getClass().getClassLoader())
        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());
      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);
      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));
    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {
      throw new IllegalStateException(""An internal error occurred attempting to compile the expression ("" + sourceText + "")."", exception);
    }
  }",Compiles the given expression.,0,221
7095,"public List<RosterEntry> getEntries() {
        synchronized (entries) {
            return new ArrayList<>(entries);
        }
    }",Returns an copied list of all entries in the group.,0,41
7704,"public static OperaDriverService createDefaultService() {
    return new Builder().build();
  }",Configures and returns a new  OperaDriverService using the default configuration.,0,29
5794,"public int getDimensionSystem() {
        return typeAndDimensionSystem / 1_000;
    }",Return a minimal dimension system that can be used for this geometry.,0,23
7799,"@PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + "" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'OPERATION')  or hasPermission(#cube, 'MANAGEMENT')"")
    public CubeInstance enableCube(CubeInstance cube) throws IOException, JobException {
        String cubeName = cube.getName();

        RealizationStatusEnum ostatus = cube.getStatus();
        if (!cube.getStatus().equals(RealizationStatusEnum.DISABLED)) {
            throw new InternalErrorException(""Only disabled cube can be enabled, status of "" + cubeName + "" is "" + ostatus);
        }

        if (cube.getSegments(SegmentStatusEnum.READY).size() == 0) {
            throw new InternalErrorException(""Cube "" + cubeName + "" dosen't contain any READY segment"");
        }

        final List<CubingJob> cubingJobs = listAllCubingJobs(cube.getName(), null, EnumSet.of(ExecutableState.READY, ExecutableState.RUNNING));
        if (!cubingJobs.isEmpty()) {
            throw new JobException(""Enable is not allowed with a running job."");
        }
        if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
            this.releaseAllSegments(cube);
        }

        cube.setStatus(RealizationStatusEnum.READY);
        try {
            return getCubeManager().updateCube(cube);
        } catch (IOException e) {
            cube.setStatus(ostatus);
            throw e;
        }
    }",Update a cube status from disable to ready.,0,344
7191,"private int rmInternal(String path, boolean mustBeFile) {
    final AlluxioURI turi = mPathResolverCache.getUnchecked(path);

    try {
      if (!mFileSystem.exists(turi)) {
        LOG.error(""File {} does not exist"", turi);
        return -ErrorCodes.ENOENT();
      }
      final URIStatus status = mFileSystem.getStatus(turi);
      if (mustBeFile && status.isFolder()) {
        LOG.error(""File {} is a directory"", turi);
        return -ErrorCodes.EISDIR();
      }

      mFileSystem.delete(turi);
    } catch (FileDoesNotExistException e) {
      LOG.debug(""File does not exist {}"", path, e);
      return -ErrorCodes.ENOENT();
    } catch (IOException e) {
      LOG.error(""IOException on {}"", path, e);
      return -ErrorCodes.EIO();
    } catch (DirectoryNotEmptyException e) {
      LOG.error(""{} is not empty"", path, e);
      return -ErrorCodes.ENOTEMPTY();
    } catch (AlluxioException e) {
      LOG.error(""AlluxioException on {}"", path, e);
      return -ErrorCodes.EFAULT();
    } catch (Throwable e) {
      LOG.error(""Unexpected exception on {}"", path, e);
      return -ErrorCodes.EFAULT();
    }

    return 0;
  }",Convenience internal method to remove files or directories.,0,375
7154,"public JobExecutionResult execute(String jobName) throws Exception {
		return ClusterUtil.runOnMiniCluster(this.streamGraph.getJobGraph(jobName), getParallelism(),
																		getConfig().isSysoutLoggingEnabled());
	}",Executes the JobGraph of the on a mini cluster of CLusterUtil with a user specified name.,0,53
6107,"public String toString() {
        // Note:  the toString() method is also used for serialization and deserialization.  So
        // toString() and parse() must always return objects that return true when you call equals()
        if (mValue.length == 2) {
            return Integer.toString(toInt());
        }
        if (mValue.length == 16) {
            return toUuid().toString();
        }
        return ""0x"" + toHexString();
    }",Represents the value as a String.,0,96
6115,"public Set<DocumentedTypeDTO> getFlowFileProcessorTypes(final String bundleGroupFilter, final String bundleArtifactFilter, final String typeFilter) {
        return dtoFactory.fromDocumentedTypes(ExtensionManager.getExtensions(Processor.class), bundleGroupFilter, bundleArtifactFilter, typeFilter);
    }",Gets the FlowFileProcessor types that this controller supports.,0,62
6889,"protected String getValue(Item item)
    {
        // The overall array and each element are guaranteed non-null
        List<MetadataValue> dcvalues = itemService.getMetadata(item, MetadataSchema.DC_SCHEMA, element, qualifier, language);

        if (dcvalues.size() == 0)
        {
            return null;
        }

        if (dcvalues.size() == 1)
        {
            return normalizeTitle(dcvalues.get(0));
        }

        // We want to sort using Strings, but also keep track of
        // which Metadatum the value came from.
        Map<String, Integer> values = new HashMap<String, Integer>();

        for (int i = 0; i < dcvalues.size(); i++)
        {
            String value = dcvalues.get(i).getValue();

            if (value != null)
            {
                values.put(value, i);
            }
        }

        if (values.size() == 0)
        {
            return null;
        }

        Set<String> valueSet = values.keySet();
        String chosen = max ? Collections.max(valueSet)
                : Collections.min(valueSet);

        int index = values.get(chosen);

        return normalizeTitle(dcvalues.get(index));
    }",Choose the canonical value from an item for comparison.,0,344
6180,"public SipMessageFactory getMessageFactory()
    {
        if (messageFactory == null)
        {
            messageFactory =
                new SipMessageFactory(this, new MessageFactoryImpl());
        }
        return messageFactory;
    }",Returns the Message Factory used to create SIP messages.,0,59
5434,"public static BrowseInfo getItemsByTitle(BrowseScope scope)
        throws SQLException
    {
        scope.setBrowseType(ITEMS_BY_TITLE_BROWSE);
        scope.setAscending(true);
        scope.setSortByTitle(null);

        return doBrowse(scope);
    }",Return Items indexed by title in the given scope.,0,61
7230,"public static Type codeToType(final byte b) {
      for (Type t : Type.values()) {
        if (t.getCode() == b) {
          return t;
        }
      }
      throw new RuntimeException(""Unknown code "" + b);
    }",Cannot rely on enum ordinals .,0,86
5345,"protected List<Product> getProducts(QueryResponse response) {
        final List<Long> productIds = new ArrayList<Long>();
        SolrDocumentList docs = response.getResults();
        for (SolrDocument doc : docs) {
            productIds.add((Long) doc.getFieldValue(shs.getProductIdFieldName()));
        }

        List<Product> products = productDao.readProductsByIds(productIds);

        // We have to sort the products list by the order of the productIds list to maintain sortability in the UI
        if (products != null) {
            Collections.sort(products, new Comparator<Product>() {
                public int compare(Product o1, Product o2) {
                    return new Integer(productIds.indexOf(o1.getId())).compareTo(productIds.indexOf(o2.getId()));
                }
            });
        }

        return products;
    }","Given a list of product IDs from solr, this method will look up the IDs via the productDao and build out actual Product instances.",0,222
7004,"public long getLargestFileSize(Text midKey) throws IOException {
    long maxSize = 0L;
    if (this.mapFiles.size() <= 0) {
      return maxSize;
    }
    
    
    long mapIndex = 0L;

    // Iterate through all the MapFiles
    
    for(Iterator<Map.Entry<Long, HStoreFile>> it = mapFiles.entrySet().iterator();
        it.hasNext(); ) {
      
      Map.Entry<Long, HStoreFile> e = it.next();
      HStoreFile curHSF = e.getValue();
      long size = fs.getLength(new Path(curHSF.getMapFilePath(), MapFile.DATA_FILE_NAME));
      
      if(size > maxSize) {              // This is the largest one so far
        maxSize = size;
        mapIndex = e.getKey();
      }
    }

    MapFile.Reader r = maps.get(mapIndex);
    
    synchronized(r) {
      midKey.set(((HStoreKey)r.midKey()).getRow());
    }
    
    return maxSize;
  }",Gets the size of the largest MapFile and its mid key.,0,294
5580,"public static boolean isNotEmpty(final double[] array) {
        return array != null && array.length != 0;
    }",Checks if an array of primitive doubles is not empty and not  null.,0,45
6970,"protected FactoryBuilderSupport getProxyBuilder() {
        FactoryBuilderSupport proxy = _localProxyBuilder.get();
        if (proxy == null) {
            return _globalProxyBuilder;
        } else {
            return proxy;
        }
    }","Proxy builders are useful for changing the building context, thus enabling mix &amp; match builders.",0,63
6666,"public Iterator<GenericDetail> getAllDetailsForContact(Contact contact)
    {
        if(isPrivateMessagingContact(contact) ||!(contact instanceof ContactJabberImpl))
            return new LinkedList<GenericDetail>().iterator();

        List<GenericDetail> details
            = infoRetreiver.getContactDetails(((ContactJabberImpl) contact)
                .getAddressAsJid()
                .asEntityBareJidOrThrow());

        if(details == null)
            return new LinkedList<GenericDetail>().iterator();
        else
            return new LinkedList<>(details).iterator();
    }",request the full info for the given uin waits and return this details,0,144
5387,"public boolean isCloseTag()
    {
        if (position == (text.length() - 1)) {
            return false;
        }
        return (text.charAt(position + 1) == '/');
    }",Indicates if this tag is a close (end) tag.,0,69
7008,"public ObjectArray<InDoubtTransaction> getInDoubtTransactions() {
        if (pageStore != null) {
            return pageStore.getInDoubtTransactions();
        }
        return inDoubtTransactions;
    }",Get the list of in-doubt transactions.,0,49
5926,"public SampleResult sample() {
        SampleResult res = null;
        try {
            if (PROTOCOL_FILE.equalsIgnoreCase(getProtocol())){
                res = fileSample(new URI(PROTOCOL_FILE,getPath(),null));
            } else {
                res = sample(getUrl(), getMethod(), false, 0);
            }
            res.setSampleLabel(getName());
            return res;
        } catch (Exception e) {
            return errorResult(e, new HTTPSampleResult());
        }
    }","Perform a sample, and return the results",0,148
7031,"public String build() {
        return String.join("","", this.addresses);
    }",Format the address into a long string.,0,31
6086,"public static long stringToBytes(String formattedString) {
    if (formattedString == null) {
      return 0L;
    }

    Matcher matcher = REGEX_MATCHER.matcher(formattedString);
    if (!matcher.matches()) {
      throw new IllegalArgumentException(
          ""The formatted string ["" + formattedString + ""] does not match with the regex /"" + REGEX_MATCHER.toString()
              + ""/"");
    }
    if (matcher.groupCount() != 1 && matcher.groupCount() != 2) {
      throw new IllegalArgumentException();
    }

    double numPart = Double.parseDouble(matcher.group(1));
    if (numPart < 0) {
      throw new IllegalArgumentException(""The number part of the memory cannot be less than zero: ["" + numPart + ""]."");
    }
    String unitPart = matcher.groupCount() == 2 ? matcher.group(2).toUpperCase() : """";
    if (!unitPart.endsWith(""B"")) {
      unitPart += ""B"";
    }
    for (int i = 0; i < UNITS.length; i++) {
      if (unitPart.equals(UNITS[i].getName())) {
        return (long) (numPart * UNITS[i].getBytes());
      }
    }
    throw new IllegalArgumentException(""The formatted string ["" + formattedString + ""] 's unit part ["" + unitPart
        + ""] does not match any unit. The supported units are (case-insensitive, and also the 'B' is ignorable): [""
        + StringUtils.join(UNITS) + ""]."");
  }",Convert a formatted string into a long value in bytes.,0,417
6317,"public static User createUser(String rawJSON) throws TwitterException {
        return TwitterObjectFactory.createUser(rawJSON);
    }",Constructs a User object from rawJSON string.,0,33
5444,"public EvaluationContext getEvaluationContext() {
		if (this.defaultContext == null) {
			this.defaultContext = new StandardEvaluationContext();
		}
		return this.defaultContext;
	}",Return the default evaluation context that will be used if none is supplied on an evaluation call,0,54
6941,"private String getLocalizedValues(final String locale, final List<?> items) {
        final var foundLocale = findLocale(StringUtils.defaultString(locale, ""en""), items);
        if (foundLocale.isPresent()) {
            return foundLocale.get();
        }

        if (!items.isEmpty()) {
            LOGGER.trace(""Loading first available locale [{}]"", ((LocalizedName) items.get(0)).getValue());
            return ((XSString) items.get(0)).getValue();
        }
        return null;
    }",Gets localized values.,0,156
7837,"public ModelApiResponse uploadFile(Long petId, String additionalMetadata, File file) throws ApiException {
    return uploadFileWithHttpInfo(petId, additionalMetadata, file).getData();
      }",uploads an image,0,49
6548,"private Attribute buildNode(TreeNode node) {

        AttributeBuilder ab = new AttributeBuilder(new LenientFeatureFactoryImpl());

        if (node instanceof TreeLeaf) {

            TreeLeaf leaf = (TreeLeaf) node;

            ab.setDescriptor(node.descriptor);
            Attribute att = ab.buildSimple(null, leaf.value);
            if (leaf.userData != null) {
                att.getUserData().putAll(leaf.userData);
            }
            return att;

        } else if (node instanceof TreeBranch) {

            ab.setDescriptor(node.descriptor);
            List<Attribute> list = new ArrayList<Attribute>();
            for (List<TreeNode> nodes : ((TreeBranch) node).children.values()) {
                for (TreeNode child : nodes) {
                    list.add(buildNode(child));
                }
            }
            return ab.createComplexAttribute(list, null, node.descriptor, null);
        }

        return null;
    }",Helper method for building feature from tree node,0,282
7090,"public String getComponentState(String serviceName, String componentName) {
    Map<String, Set<String>> serviceHostComponents = hostComponents.get(serviceName);
    if (serviceHostComponents != null) {

      for (Map.Entry<String, Set<String>> entry : serviceHostComponents.entrySet()) {
        String      hostName       = entry.getKey();
        Set<String> componentNames = entry.getValue();

        for (String name : componentNames) {
          if (name.equals(componentName)) {
            if (isClientOnlyComponent(componentName)) return ""INSTALLED"";
            if (stateProvider.getRunningState(hostName, componentName) != StateProvider.State.Running) {
              return ""INSTALLED"";
            }
          }
        }
      }
    }

    return ""STARTED"";
  }",Get the component state from the give service name and component name.,0,226
7280,"private CameraNode toCamera249(Structure structure) throws BlenderFileException {
        Camera camera = new Camera(DEFAULT_CAM_WIDTH, DEFAULT_CAM_HEIGHT);
        int type = ((Number) structure.getFieldValue(""type"")).intValue();
        if (type != 0 && type != 1) {
            LOGGER.log(Level.WARNING, ""Unknown camera type: {0}. Perspective camera is being used!"", type);
            type = 0;
        }
        //type==0 - perspective; type==1 - orthographic; perspective is used as default
        camera.setParallelProjection(type == 1);
        float aspect = 0;
        float clipsta = ((Number) structure.getFieldValue(""clipsta"")).floatValue();
        float clipend = ((Number) structure.getFieldValue(""clipend"")).floatValue();
        if (type == 0) {
            aspect = ((Number) structure.getFieldValue(""lens"")).floatValue();
        } else {
            aspect = ((Number) structure.getFieldValue(""ortho_scale"")).floatValue();
        }
        camera.setFrustumPerspective(aspect, camera.getWidth() / camera.getHeight(), clipsta, clipend);
        return new CameraNode(null, camera);
    }",This method converts the given structure to jme camera.,0,318
6020,"private StoreFileReader open(boolean canUseDropBehind) throws IOException {
    if (this.reader != null) {
      throw new IllegalAccessError(""Already open"");
    }

    // Open the StoreFile.Reader
    this.reader = fileInfo.open(this.fs, this.cacheConf, canUseDropBehind);

    // Load up indices and fileinfo. This also loads Bloom filter type.
    metadataMap = Collections.unmodifiableMap(this.reader.loadFileInfo());

    // Read in our metadata.
    byte [] b = metadataMap.get(MAX_SEQ_ID_KEY);
    if (b != null) {
      // By convention, if halfhfile, top half has a sequence number > bottom
      // half. Thats why we add one in below. Its done for case the two halves
      // are ever merged back together --rare.  Without it, on open of store,
      // since store files are distinguished by sequence id, the one half would
      // subsume the other.
      this.sequenceid = Bytes.toLong(b);
      if (fileInfo.isTopReference()) {
        this.sequenceid += 1;
      }
    }

    if (isBulkLoadResult()){
      // generate the sequenceId from the fileName
      // fileName is of the form <randomName>_SeqId_<id-when-loaded>_
      String fileName = this.getPath().getName();
      // Use lastIndexOf() to get the last, most recent bulk load seqId.
      int startPos = fileName.lastIndexOf(""SeqId_"");
      if (startPos != -1) {
        this.sequenceid = Long.parseLong(fileName.substring(startPos + 6,
            fileName.indexOf('_', startPos + 6)));
        // Handle reference files as done above.
        if (fileInfo.isTopReference()) {
          this.sequenceid += 1;
        }
      }
      // SKIP_RESET_SEQ_ID only works in bulk loaded file.
      // In mob compaction, the hfile where the cells contain the path of a new mob file is bulk
      // loaded to hbase, these cells have the same seqIds with the old ones. We do not want
      // to reset new seqIds for them since this might make a mess of the visibility of cells that
      // have the same row key but different seqIds.
      this.reader.setSkipResetSeqId(isSkipResetSeqId(metadataMap.get(SKIP_RESET_SEQ_ID)));
      this.reader.setBulkLoaded(true);
    }
    this.reader.setSequenceID(this.sequenceid);

    b = metadataMap.get(HFile.Writer.MAX_MEMSTORE_TS_KEY);
    if (b != null) {
      this.maxMemstoreTS = Bytes.toLong(b);
    }

    b = metadataMap.get(MAJOR_COMPACTION_KEY);
    if (b != null) {
      boolean mc = Bytes.toBoolean(b);
      if (this.majorCompaction == null) {
        this.majorCompaction = new AtomicBoolean(mc);
      } else {
        this.majorCompaction.set(mc);
      }
    } else {
      // Presume it is not major compacted if it doesn't explicity say so
      // HFileOutputFormat explicitly sets the major compacted key.
      this.majorCompaction = new AtomicBoolean(false);
    }

    b = metadataMap.get(EXCLUDE_FROM_MINOR_COMPACTION_KEY);
    this.excludeFromMinorCompaction = (b != null && Bytes.toBoolean(b));

    BloomType hfileBloomType = reader.getBloomFilterType();
    if (cfBloomType != BloomType.NONE) {
      reader.loadBloomfilter(BlockType.GENERAL_BLOOM_META);
      if (hfileBloomType != cfBloomType) {
        LOG.info(""HFile Bloom filter type for ""
            + reader.getHFileReader().getName() + "": "" + hfileBloomType
            + "", but "" + cfBloomType + "" specified in column family ""
            + ""configuration"");
      }
    } else if (hfileBloomType != BloomType.NONE) {
      LOG.info(""Bloom filter turned off by CF config for ""
          + reader.getHFileReader().getName());
    }

    // load delete family bloom filter
    reader.loadBloomfilter(BlockType.DELETE_FAMILY_BLOOM_META);

    try {
      byte [] timerangeBytes = metadataMap.get(TIMERANGE_KEY);
      if (timerangeBytes != null) {
        this.reader.timeRangeTracker = new TimeRangeTracker();
        Writables.copyWritable(timerangeBytes, this.reader.timeRangeTracker);
      }
    } catch (IllegalArgumentException e) {
      LOG.error(""Error reading timestamp range data from meta -- "" +
          ""proceeding without"", e);
      this.reader.timeRangeTracker = null;
    }
    // initialize so we can reuse them after reader closed.
    firstKey = reader.getFirstKey();
    lastKey = reader.getLastKey();
    comparator = reader.getComparator();
    return this.reader;
  }",Opens reader on this store file.,0,969
5454,"public HostsType getMasterAndHosts(String serviceName, String componentName) {
    HostsType hostsType = new HostsType();

    if (serviceName == null || componentName == null) {
      return null;
    }

    Set<String> componentHosts = m_cluster.getHosts(serviceName, componentName);
    if (0 == componentHosts.size()) {
      return null;
    }

    hostsType.hosts = componentHosts;

    Service s = Service.OTHER;
    try {
      s = Service.valueOf(serviceName.toUpperCase());
    } catch (Exception e) {
      // !!! nothing to do
    }

    switch (s) {
      case HDFS:
        if (componentName.equalsIgnoreCase(""NAMENODE"")) {
          Map<Status, String> pair = getNameNodePair(componentHosts);
          if (pair != null) {
            hostsType.master = pair.containsKey(Status.ACTIVE) ? pair.get(Status.ACTIVE) :  null;
            hostsType.secondary = pair.containsKey(Status.STANDBY) ? pair.get(Status.STANDBY) :  null;
          } else {
            hostsType.master = componentHosts.iterator().next();
          }
        } else {
          hostsType = filterSameVersion(hostsType, serviceName, componentName);
        }
        break;
      case YARN:
        if (componentName.equalsIgnoreCase(""RESOURCEMANAGER"")) {
          resolveResourceManagers(hostsType);
        } else {
          hostsType = filterSameVersion(hostsType, serviceName, componentName);
        }
        break;
      case HBASE:
        if (componentName.equalsIgnoreCase(""HBASE_MASTER"")) {
          resolveHBaseMasters(hostsType);
        } else {
          hostsType = filterSameVersion(hostsType, serviceName, componentName);
        }
        break;
      case OTHER:
        hostsType = filterSameVersion(hostsType, serviceName, componentName);
        break;
    }
    return hostsType;
  }",Get the master hostname of the given service and component.,0,527
6556,"public Value convert(Value v, Mode mode) {
        try {
            return v.convertTo(type.getValueType(), mode, this, type.getExtTypeInfo());
        } catch (DbException e) {
            if (e.getErrorCode() == ErrorCode.DATA_CONVERSION_ERROR_1) {
                String target = (table == null ? """" : table.getName() + "": "") +
                        getCreateSQL();
                throw DbException.get(
                        ErrorCode.DATA_CONVERSION_ERROR_1, e,
                        v.getTraceSQL() + "" ("" + target + "")"");
            }
            throw e;
        }
    }",Convert a value to this column's type using the given  Mode.,0,184
6986,"static AbsoluteUnixPath getAppRootChecked(JibExtension jibExtension) {
    String appRoot = jibExtension.getContainer().getAppRoot();
    try {
      return AbsoluteUnixPath.get(appRoot);
    } catch (IllegalArgumentException ex) {
      throw new GradleException(""container.appRoot is not an absolute Unix-style path: "" + appRoot);
    }
  }",Gets the value of the  container.appRoot parameter.,0,83
5744,"public static boolean resetCrypto() {
    return hawkBuilder.getEncryption() == null || hawkBuilder.getEncryption().reset();
  }",Clears all saved data that is used for the crypto,0,43
6145,"private String[] listInternal(String path, boolean recursive) throws IOException {
    path = stripPrefixIfPresent(path);
    path = PathUtils.normalizePath(path, PATH_SEPARATOR);
    path = path.equals(PATH_SEPARATOR) ? """" : path;
    String delimiter = recursive ? """" : PATH_SEPARATOR;
    String priorLastKey = null;
    Set<String> listResult = new HashSet<>();
    try {
      while (true) {
        StorageObjectsChunk chunk = mClient.listObjectsChunked(mBucketName, path, delimiter,
            LISTING_LENGTH, priorLastKey);
        StorageObject[] objects = chunk.getObjects();
        if (objects.length == 0) {
          break;
        }
        priorLastKey = objects[objects.length - 1].getKey();
        // For files encoded as objects and directories encoded as objects by Alluxio
        for (StorageObject obj : objects) {
          // Remove parent portion of the key
          String child = getChildName(obj.getKey(), path);
          // Prune the special folder suffix
          child = stripFolderSuffixIfPresent(child);
          // Only add if the path is not empty (removes results equal to the path)
          if (!child.isEmpty()) {
            listResult.add(child);
          }
        }
        // For directories encoded as prefixes
        for (String commonPrefix : chunk.getCommonPrefixes()) {
          // Remove parent portion of the key
          String child = getChildName(commonPrefix, path);
          listResult.add(child);
        }
      }
    } catch (ServiceException e) {
      LOG.error(""Failed to list path {}"", path, e);
      return null;
    }
    return listResult.toArray(new String[listResult.size()]);
  }","Lists the files in the given path, the paths will be their logical names and not contain the folder suffix.",0,428
7242,"public int getIntParameter(String name, int defaultValue) {
        if (params == null || !params.containsKey(name)) {
            return defaultValue;
        }

        try {
            return Integer.parseInt(params.get(name));
        } catch (NumberFormatException e) {
            LOGGER.warn(""Value for parameter '"" + name + ""' not an integer: '"" + params.get(name) + ""'.  Using default: '""
                    + defaultValue + ""'."", e);
            return defaultValue;
        }
    }","Get the value of a specified parameter as an integer, or return the specified default value if the value was not specified or is not an integer.",0,149
6911,"public static Capabilities fromIntList(List<Integer> capabilities) {
        return new Capabilities(capabilities.stream()
                .filter(integer -> integer < Capability.values().length)
                .filter(integer -> integer >= 0)
                .map(integer -> Capability.values()[integer])
                .collect(Collectors.toSet()));
    }",helper for protobuffer stuff,0,105
6117,"public long allocate(int length, long reservedAreaSize) {
        return getPos(allocate(getBlockCount(length), getBlock(reservedAreaSize), true));
    }",Allocate a number of blocks and mark them as used.,0,45
7306,"public UserGroupDTO createUserGroupDto(final Group userGroup, Set<TenantEntity> users, final Set<AccessPolicySummaryEntity> accessPolicies) {
        if (userGroup == null) {
            return null;
        }

        // convert to access policies to handle backward compatibility due to incorrect
        // type in the UserGroupDTO
        final Set<AccessPolicyEntity> policies = accessPolicies.stream().map(summaryEntity -> {
            final AccessPolicyDTO policy = new AccessPolicyDTO();
            policy.setId(summaryEntity.getId());

            if (summaryEntity.getPermissions().getCanRead()) {
                final AccessPolicySummaryDTO summary = summaryEntity.getComponent();
                policy.setResource(summary.getResource());
                policy.setAction(summary.getAction());
                policy.setComponentReference(summary.getComponentReference());
            }

            return entityFactory.createAccessPolicyEntity(policy, summaryEntity.getRevision(), summaryEntity.getPermissions());
        }).collect(Collectors.toSet());

        final UserGroupDTO dto = new UserGroupDTO();
        dto.setId(userGroup.getIdentifier());
        dto.setUsers(users);
        dto.setIdentity(userGroup.getName());
        dto.setAccessPolicies(policies);

        return dto;
    }",Creates a  UserGroupDTO from the specified  Group.,0,306
6076,"public static String replaceFirst(final CharSequence self, final Pattern pattern, final Closure closure) {
        return replaceFirst(self.toString(), pattern, closure);
    }",Replaces the first occurrence of a captured group by the result of a closure call on that text.,0,53
6852,"public ResourceCapacity freeCapacityOf(Node dockerHost, boolean treatInactiveOrRetiredAsUnusedCapacity) {
        // Only hosts have free capacity
        if (!dockerHost.type().equals(NodeType.host)) return new ResourceCapacity();

        ResourceCapacity hostCapacity = new ResourceCapacity(dockerHost);
        for (Node container : allNodes.childrenOf(dockerHost).asList()) {
            boolean isUsedCapacity = !(treatInactiveOrRetiredAsUnusedCapacity && isInactiveOrRetired(container));
            if (isUsedCapacity) {
                hostCapacity.subtract(container);
            }
        }
        return hostCapacity;
    }",Calculate the remaining capacity for the dockerHost.,0,143
7667,"private static int parseOffset(String str) {
        Chronology chrono;
        if (cDefault != null) {
            chrono = ISOChronology.getInstanceUTC();
        } else {
            // Can't use a real chronology if called during class
            // initialization. Offset parser doesn't need it anyhow.
            chrono = new BaseChronology() {
                public DateTimeZone getZone() {
                    return null;
                }
                public Chronology withUTC() {
                    return this;
                }
                public Chronology withZone(DateTimeZone zone) {
                    return this;
                }
                public String toString() {
                    return getClass().getName();
                }
            };
        }

        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
    }",Converts an old style id to a new style id.,0,196
6088,"public NamedDataSource getDataSource(final SQLType sqlType) {
        if (isMasterRoute(sqlType)) {
            DML_FLAG.set(true);
            return new NamedDataSource(masterSlaveRule.getMasterDataSourceName(), dataSourceMap.get(masterSlaveRule.getMasterDataSourceName()));
        }
        String selectedSourceName = masterSlaveRule.getStrategy().getDataSource(
                masterSlaveRule.getName(), masterSlaveRule.getMasterDataSourceName(), new ArrayList<>(masterSlaveRule.getSlaveDataSourceNames()));
        DataSource selectedSource = dataSourceMap.get(selectedSourceName);
        return new NamedDataSource(selectedSourceName, selectedSource);
    }",Get data source from master-slave data source.,0,144
5655,"public boolean isTypeSmokeDetectorSensor() {
        return TYPE_SMOKEDETECTORSENSOR.equals(getType());
    }","Returns true, if the  Capability is of type SmokeDetectorSensor.",0,26
7078,"private static String getWorkerMetricName(String name) {
    String result = CACHED_METRICS.get(name);
    if (result != null) {
      return result;
    }
    return CACHED_METRICS.computeIfAbsent(name,
        n -> getMetricNameWithUniqueId(InstanceType.WORKER, name));
  }",Builds metric registry name for worker instance.,0,84
6745,"private UIFileInfo getUiFileInfo(FileSystem fileSystem, long fileId)
      throws FileDoesNotExistException, BlockDoesNotExistException, IOException, TachyonException {
    return getUiFileInfo(fileSystem, fileId, TachyonURI.EMPTY_URI);
  }",Gets the  UIFileInfo object based on file id.,0,52
7408,"public ExecutionResult addEvent(HystrixEventType eventType) {
        return new ExecutionResult(eventCounts.plus(eventType), startTimestamp, executionLatency,
                userThreadLatency, failedExecutionException, executionException,
                executionOccurred, isExecutedInThread, collapserKey);
    }",Creates a new ExecutionResult by adding the defined 'event' to the ones on the current instance.,0,58
5727,"public static List getAt(Matcher self, Collection indices) {
        List result = new ArrayList();
        for (Iterator iter = indices.iterator(); iter.hasNext();) {
            Object value = iter.next();
            if (value instanceof Range) {
                result.addAll(getAt(self, (Range) value));
            } else {
                int idx = DefaultTypeTransformation.intUnbox(value);
                result.add(getAt(self, idx));
            }
        }
        return result;
    }",Select a List of values from a Matcher using a Collection to identify the indices to be selected.,0,159
6976,"public Response moveParagraph(@PathParam(""noteId"") String noteId,
                                @PathParam(""paragraphId"") String paragraphId,
                                @PathParam(""newIndex"") String newIndex)
      throws IOException {
    LOG.info(""move paragraph {} {} {}"", noteId, paragraphId, newIndex);

    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note);
    checkIfUserCanWrite(noteId, ""Insufficient privileges you cannot move paragraph"");

    notebookService.moveParagraph(noteId, paragraphId, Integer.parseInt(newIndex),
        getServiceContext(),
        new RestServiceCallback<Paragraph>() {
          @Override
          public void onSuccess(Paragraph result, ServiceContext context) throws IOException {
            notebookServer.broadcastNote(result.getNote());
          }
        });
    return new JsonResponse(Status.OK, """").build();

  }",Move paragraph REST API.,0,216
6056,"public FullHueObject getLight(HueObject light) throws IOException, ApiException {
        requireAuthentication();

        Result result = http.get(getRelativeURL(""lights/"" + enc(light.getId())));

        handleErrors(result);

        FullHueObject fullLight = safeFromJson(result.getBody(), FullLight.class);
        fullLight.setId(light.getId());
        return fullLight;
    }",Returns detailed information for the given light.,0,111
6369,"public static String formatParams(ArrayList<? extends ParameterInterface> parameters) {
        if (parameters.size() == 0) {
            return """";
        }
        StatementBuilder buff = new StatementBuilder();
        int i = 0;
        boolean params = false;
        for (ParameterInterface p : parameters) {
            if (p.isValueSet()) {
                if (!params) {
                    buff.append("" {"");
                    params = true;
                }
                buff.appendExceptFirst("", "");
                Value v = p.getParamValue();
                buff.append(++i).append("": "").append(v.getTraceSQL());
            }
        }
        if (params) {
            buff.append('}');
        }
        return buff.toString();
    }",Format the parameter list.,0,236
5497,"public int run(String[] argv) {
    if (argv.length < 1) {
      OptionsParser.usage();
      return DistCpConstants.INVALID_ARGUMENT;
    }
    
    try {
      inputOptions = (OptionsParser.parse(argv));
      setTargetPathExists();
      LOG.info(""Input Options: "" + inputOptions);
    } catch (Throwable e) {
      LOG.error(""Invalid arguments: "", e);
      System.err.println(""Invalid arguments: "" + e.getMessage());
      OptionsParser.usage();      
      return DistCpConstants.INVALID_ARGUMENT;
    }
    
    try {
      execute();
    } catch (InvalidInputException e) {
      LOG.error(""Invalid input: "", e);
      return DistCpConstants.INVALID_ARGUMENT;
    } catch (DuplicateFileException e) {
      LOG.error(""Duplicate files in input path: "", e);
      return DistCpConstants.DUPLICATE_INPUT;
    } catch (AclsNotSupportedException e) {
      LOG.error(""ACLs not supported on at least one file system: "", e);
      return DistCpConstants.ACLS_NOT_SUPPORTED;
    } catch (Exception e) {
      LOG.error(""Exception encountered "", e);
      return DistCpConstants.UNKNOWN_ERROR;
    }
    return DistCpConstants.SUCCESS;
  }",Implementation of Tool::run().,0,327
6138,"public static byte[] toBytes(int n,byte[] b, int offset) {
        b[offset+3] = (byte) (n);
        n >>>= 8;
        b[offset+2] = (byte) (n);
        n >>>= 8;
        b[offset+1] = (byte) (n);
        n >>>= 8;
        b[offset+0] = (byte) (n);
        return b;
    }",Converts an integer to four bytes,0,146
7501,"private static int perSecond(float meanTime) {
        return (meanTime > 0) ? (int)(MICROSECONDS_IN_SECOND / meanTime) : 0;
    }",Calculate rate of metric per second.,0,47
6290,"public String getSessInitID()
    {
        return sessionInitIQ != null ? sessionInitIQ.getPacketID() : null;
    }",Returns the IQ ID of the Jingle session-initiate packet associated with this call.,0,37
7115,"public static String getLoginProperty(String key)
    {
        return getResources().getSettingsString(key);
    }",Returns the application property corresponding to the given key.,0,32
6192,"public Response sendEmailForApp(@PathParam(""app"") String application, @PathParam(""startTime"") Long startTime,
      @PathParam(""endTime"") Long endTime, @QueryParam(""from"") String fromAddr,
      @QueryParam(""to"") String toAddr, @QueryParam(""cc"") String ccAddr, @QueryParam(""bcc"") String bccAddr,
      @QueryParam(""subject"") String subject,
      @QueryParam(""includeSentAnomaliesOnly"") boolean includeSentAnomaliesOnly,
      @QueryParam(""isApplyFilter"") boolean isApplyFilter,
      @QueryParam(""teHost"") String teHost, @QueryParam(""smtpHost"") String smtpHost,
      @QueryParam(""smtpPort"") int smtpPort) {

    if(Strings.isNullOrEmpty(application)) {
      throw new WebApplicationException(""Application empty : "" + application);
    }
    List<ApplicationDTO> apps = appDAO.findByName(application);
    if (apps.size() == 0) {
      throw new WebApplicationException(""Application not found: "" + application);
    }
    LOG.info(""Generating report for application [{}]"", application);
    Set<Long> anomalyFunctions = new HashSet<>();

    for (ApplicationDTO applicationDTO : apps) {
      List<AlertConfigDTO> alertConfigDTOS = alertDAO.findWhereApplicationLike(applicationDTO.getApplication());
      if (alertConfigDTOS.size() > 0) {
        for (AlertConfigDTO alertConfigDTO : alertConfigDTOS) {
          if (alertConfigDTO.getEmailConfig() != null && alertConfigDTO.getEmailConfig().getFunctionIds() != null) {
            anomalyFunctions.addAll(alertConfigDTO.getEmailConfig().getFunctionIds());
          }
        }
      }
    }

    LOG.info(""Generating report for application: {}, functions {}"", application, anomalyFunctions);


    List<Long> functionList = new ArrayList<>();
    functionList.addAll(anomalyFunctions);
    if (functionList.size() == 0) {
      throw new WebApplicationException(""metrics empty : "" + functionList);
    }

    AnomalyReportGenerator anomalyReportGenerator = AnomalyReportGenerator.getInstance();
    List<MergedAnomalyResultDTO> anomalies = anomalyReportGenerator
        .getAnomaliesForFunctions(functionList, startTime, endTime);

    DetectionAlertFilterRecipients recipients = new DetectionAlertFilterRecipients(
        EmailUtils.getValidEmailAddresses(toAddr),
        EmailUtils.getValidEmailAddresses(ccAddr),
        EmailUtils.getValidEmailAddresses(bccAddr));
    return generateAnomalyReportForAnomalies(anomalyReportGenerator, anomalies, isApplyFilter, startTime, endTime, null,
        null, subject, includeSentAnomaliesOnly, recipients, fromAddr, application, true,
        teHost, smtpHost, smtpPort);
  }",End point to send anomalies by metrics,0,656
6119,"public boolean isSet(final OPTION option) {
        return options != null && options.contains(option);
    }",Whether the passed in option is currently set.,0,39
7311,"public static DataType getBaseDataType(DataType dataType) {
		if (dataType instanceof Array) {
			return getBaseDataType(((Array) dataType).getDataType());
		}
		else if (dataType instanceof Pointer) {
			DataType baseDataType = ((Pointer) dataType).getDataType();
			if (baseDataType != null) {
				return getBaseDataType(baseDataType);
			}
		}

		// NOTE: we do not unroll TypeDefs.  This allows clients of this API to search for
		//       TypeDefs.  If we get the base type, then the client cannot search for them.
		//else if (dataType instanceof TypeDef) {
		//	DataType baseDataType = ((TypeDef) dataType).getBaseDataType();
		//	return getBaseDataType(baseDataType);
		//}
		return dataType;
	}",A recursive function to get the base highest level data type for the given data type.,0,142
5424,"public JsonParser asParser(ObjectCodec codec)
    {
        return new Parser(_first, codec, _hasNativeTypeIds, _hasNativeObjectIds);
    }",Method used to create a  JsonParser that can read contents stored in this buffer.,0,37
6501,"HttpEntity templateToHttpEntity() {
        // the internal representation of a template has type nested under mappings.
        // this uses xContent to help remove the type before sending to the remote cluster
        try (XContentParser parser = XContentFactory.xContent(XContentType.JSON)
            .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, template.get())) {
            XContentBuilder builder = JsonXContent.contentBuilder();
            IndexTemplateMetaData.Builder.removeType(IndexTemplateMetaData.Builder.fromXContent(parser, templateName), builder);
            return new StringEntity(BytesReference.bytes(builder).utf8ToString(), ContentType.APPLICATION_JSON);
        } catch (IOException ex) {
            throw new IllegalStateException(""Cannot serialize template ["" + templateName + ""] for monitoring export"", ex);
        }
    }",Create a  HttpEntity for the  #template.,0,165
7040,"public static String substitute(String s, Map<String, String> properties, String defaultValue) {
        return Strings.isNullOrEmpty(s) ? defaultValue : replaceMacro(s, properties);
    }",Substitutes a placeholder with a value found in the specified map.,0,59
6335,"public BlockWorkerClient acquireBlockWorkerClient(final WorkerNetAddress workerNetAddress)
      throws IOException {
    return acquireBlockWorkerClientInternal(workerNetAddress, mClientContext.getSubject());
  }",Acquires a block worker client from the client pools.,0,39
6313,"public static BufferedImage getStatusIcon(PresenceStatus status)
    {
        if(status != null)
        {
            int connectivity = status.getStatus();

            if(connectivity < PresenceStatus.ONLINE_THRESHOLD)
            {
                return ImageLoader
                    .getImage(ImageLoader.USER_OFFLINE_ICON);
            }
            else if(connectivity < PresenceStatus.EXTENDED_AWAY_THRESHOLD)
            {
                return ImageLoader
                    .getImage(ImageLoader.USER_DND_ICON);
            }
            else if(connectivity == PresenceStatus.EXTENDED_AWAY_THRESHOLD)
            {
                // the special status On The Phone is state
                // between DND and EXTENDED AWAY states.
                return ImageLoader
                    .getImage(ImageLoader.USER_USER_ON_THE_PHONE_ICON);
            }
            else if(connectivity < PresenceStatus.AWAY_THRESHOLD)
            {
                return ImageLoader
                    .getImage(ImageLoader.USER_EXTENDED_AWAY_ICON);
            }
            else if(connectivity < PresenceStatus.AVAILABLE_THRESHOLD)
            {
                return ImageLoader
                    .getImage(ImageLoader.USER_AWAY_ICON);
            }
            else if(connectivity
                        < PresenceStatus.EAGER_TO_COMMUNICATE_THRESHOLD)
            {
                return ImageLoader
                    .getImage(ImageLoader.USER_ONLINE_ICON);
            }
            else if(connectivity < 
                ChatRoomPresenceStatus.CHAT_ROOM_ONLINE_THRESHOLD)
            {
                return ImageLoader
                    .getImage(ImageLoader.USER_FFC_ICON);
            }
            else if(connectivity < 
                ChatRoomPresenceStatus.CHAT_ROOM_OFFLINE_THRESHOLD)
            {
                return ImageLoader
                    .getImage(ImageLoader.CHAT_ROOM_ONLINE_ICON);
            }
            else if(connectivity == MessageSourceContactPresenceStatus
                                        .MSG_SRC_CONTACT_ONLINE_THRESHOLD)
            {
                return ImageLoader
                    .getImage(ImageLoader.MSG_SRC_CONTACT_ONLINE_ICON);
            }
            else if(connectivity < PresenceStatus.MAX_STATUS_VALUE)
            {
                return ImageLoader
                    .getImage(ImageLoader.CHAT_ROOM_OFFLINE_ICON);
            }
            else
            {
                return ImageLoader
                    .getImage(ImageLoader.USER_OFFLINE_ICON);
            }
        }
        else
        {
            return ImageLoader
                .getImage(ImageLoader.USER_OFFLINE_ICON);
        }
    }",Returns the image corresponding to the given presence status.,0,462
7286,"static Word refillAllocate(Word intArrayHub, int sizeInBytes, boolean log) {

        Word intArrayMarkWord = Word.fromLong(tlabIntArrayMarkWord());
        int alignmentReserveInBytes = tlabAlignmentReserveInHeapWords() * wordSize();

        Word thread = thread();
        Word top = thread.readWord(threadTlabTopOffset());
        Word end = thread.readWord(threadTlabEndOffset());

        // calculate amount of free space
        Word tlabFreeSpaceInBytes = end.minus(top);

        log(log, ""refillTLAB: thread=%p\n"", thread.toLong());
        log(log, ""refillTLAB: top=%p\n"", top.toLong());
        log(log, ""refillTLAB: end=%p\n"", end.toLong());
        log(log, ""refillTLAB: tlabFreeSpaceInBytes=%d\n"", tlabFreeSpaceInBytes.toLong());

        // a DIV or SHR operations on Words would be handy here...
        Word tlabFreeSpaceInWords = Word.fromLong(tlabFreeSpaceInBytes.toLong() >>> log2WordSize());

        // Retain TLAB and allocate object in shared space if
        // the amount free in the TLAB is too large to discard.
        Word refillWasteLimit = thread.readWord(tlabRefillWasteLimitOffset());
        if (tlabFreeSpaceInWords.belowOrEqual(refillWasteLimit)) {
            if (tlabStats()) {
                // increment number of refills
                storeInt(thread, 0, tlabNumberOfRefillsOffset(), thread.readInt(tlabNumberOfRefillsOffset()) + 1);
                log(log, ""thread: %p -- number_of_refills %d\n"", thread.toLong(), thread.readInt(tlabNumberOfRefillsOffset()));
                // accumulate wastage
                Word wastage = thread.readWord(tlabFastRefillWasteOffset()).plus(tlabFreeSpaceInWords);
                log(log, ""thread: %p -- accumulated wastage %d\n"", thread.toLong(), wastage.toLong());
                storeWord(thread, 0, tlabFastRefillWasteOffset(), wastage);
            }

            // if TLAB is currently allocated (top or end != null) then
            // fill [top, end + alignment_reserve) with array object
            if (top != Word.zero()) {
                int headerSize = arrayBaseOffset(Kind.Int);
                // just like the HotSpot assembler stubs, assumes that tlabFreeSpaceInInts fits in an int
                int tlabFreeSpaceInInts = (int) tlabFreeSpaceInBytes.toLong() >>> 2;
                int length = ((alignmentReserveInBytes - headerSize) >>> 2) + tlabFreeSpaceInInts;
                NewObjectSnippets.formatArray(intArrayHub, -1, length, headerSize, top, intArrayMarkWord, false);

                Word allocated = thread.readWord(threadAllocatedBytesOffset());
                allocated = allocated.plus(top.minus(thread.readWord(threadTlabStartOffset())));
                storeWord(thread, 0, threadAllocatedBytesOffset(), allocated);
            }

            // refill the TLAB with an eden allocation
            Word tlabRefillSizeInWords = thread.readWord(threadTlabSizeOffset());
            Word tlabRefillSizeInBytes = Word.fromLong(tlabRefillSizeInWords.toLong() * wordSize());
            // allocate new TLAB, address returned in top
            top = edenAllocate(tlabRefillSizeInBytes, log);
            if (top != Word.zero()) {
                storeWord(thread, 0, threadTlabStartOffset(), top);
                storeWord(thread, 0, threadTlabTopOffset(), top);

                end = top.plus(tlabRefillSizeInBytes.minus(alignmentReserveInBytes));
                storeWord(thread, 0, threadTlabEndOffset(), end);

                return allocate(sizeInBytes);
            } else {
                return Word.zero();
            }
        } else {
            // Retain TLAB
            Word newRefillWasteLimit = refillWasteLimit.plus(tlabRefillWasteIncrement());
            storeWord(thread, 0, tlabRefillWasteLimitOffset(), newRefillWasteLimit);
            log(log, ""refillTLAB: retaining TLAB - newRefillWasteLimit=%p\n"", newRefillWasteLimit.toLong());

            if (tlabStats()) {
                storeInt(thread, 0, tlabSlowAllocationsOffset(), thread.readInt(tlabSlowAllocationsOffset()) + 1);
            }

            return edenAllocate(Word.fromInt(sizeInBytes), log);
        }
    }",Attempts to refill the current thread's TLAB and retries the allocation.,0,932
7347,"public Collection<Resource> populateResources() throws SystemException {
      // No open ended query support.
      if (temporalInfo != null && (temporalInfo.getStartTime() == null
          || temporalInfo.getEndTime() == null)) {
        return Collections.emptySet();
      }

      for (Map.Entry<String, Set<Resource>> resourceEntry : resources.entrySet()) {
        String componentName = resourceEntry.getKey();
        Set<Resource> resourceSet = resourceEntry.getValue();

        TimelineMetrics timelineMetrics = new TimelineMetrics();

        Set<String> nonHostComponentMetrics = new HashSet<String>(metrics.keySet());
        nonHostComponentMetrics.removeAll(hostComponentHostMetrics);
        String hostnames = getHostnames(resources.get(componentName));

        // Allow for multiple requests since host metrics for a
        // hostcomponent need the HOST appId
        if (!hostComponentHostMetrics.isEmpty()) {
          String hostComponentHostMetricParams = getSetString(processRegexps(hostComponentHostMetrics), -1);
          setQueryParams(hostComponentHostMetricParams, hostnames, true, componentName);
          TimelineMetrics metricsResponse = null;
          try {
            metricsResponse = getTimelineMetricsFromCache(
              getTimelineAppMetricCacheKey(hostComponentHostMetrics,
                componentName, uriBuilder.toString()), componentName);
          } catch (IOException e) {
            if (LOG.isDebugEnabled()) {
              LOG.debug(""Caught exception fetching metric data."", e);
            }
            // Skip further queries to preempt long calls due to timeout
            if (e instanceof SocketTimeoutException) {
              return Collections.emptySet();
            }
          }
          if (metricsResponse != null) {
            timelineMetrics.getMetrics().addAll(metricsResponse.getMetrics());
          }
        }

        if (!nonHostComponentMetrics.isEmpty()) {
          String nonHostComponentHostMetricParams = getSetString(processRegexps(nonHostComponentMetrics), -1);
          setQueryParams(nonHostComponentHostMetricParams, hostnames, false, componentName);
          TimelineMetrics metricsResponse = null;
          try {
            metricsResponse = getTimelineMetricsFromCache(
              getTimelineAppMetricCacheKey(nonHostComponentMetrics,
                componentName, uriBuilder.toString()), componentName);
          } catch (IOException e) {
            if (LOG.isDebugEnabled()) {
              LOG.debug(""Caught exception fetching metric data."", e);
            }
            // Skip further queries to preempt long calls due to timeout
            if (e instanceof SocketTimeoutException) {
              return Collections.emptySet();
            }
          }
          if (metricsResponse != null) {
            timelineMetrics.getMetrics().addAll(metricsResponse.getMetrics());
          }
        }

        Map<String, Set<TimelineMetric>> metricsMap = new HashMap<String, Set<TimelineMetric>>();
        Set<String> patterns = createPatterns(metrics.keySet());

        if (!timelineMetrics.getMetrics().isEmpty()) {
          for (TimelineMetric metric : timelineMetrics.getMetrics()) {
            if (metric.getMetricName() != null
                && metric.getMetricValues() != null
                && checkMetricName(patterns, metric.getMetricName())) {
              String hostname = metric.getHostName();
              if (!metricsMap.containsKey(hostname)) {
                metricsMap.put(hostname, new HashSet<TimelineMetric>());
              }
              metricsMap.get(hostname).add(metric);
            }
          }
          for (Resource resource : resourceSet) {
            String hostname = getHostName(resource);
            if (metricsMap.containsKey(hostname)) {
              for (TimelineMetric metric : metricsMap.get(hostname)) {
                // Pad zeros or nulls if needed to a clone so we do not cache
                // padded values
                TimelineMetric timelineMetricClone = new TimelineMetric(metric);
                metricsPaddingMethod.applyPaddingStrategy(timelineMetricClone, temporalInfo);
                populateResource(resource, timelineMetricClone, temporalInfo);
              }
            }
          }
        }
      }

      return Collections.emptySet();
    }",Populate the associated resources by making a call to the Metrics service.,0,978
7882,"public static EDateTime<Date> currentTimestamp() {
        return currentTimestamp(Date.class);
    }",Get an expression representing the current time instant as a EDateTime instance,0,29
7840,"public int destroy() {
    ExecuteWatchdog watchdog = executor.getWatchdog();
    while (!watchdog.isWatching()){
      try {
        Thread.sleep(50);
      } catch (InterruptedException e) {
        throw new WebDriverException(e);
      }
    }
    watchdog.destroyProcess();
    if (handler.hasResult()) {
       return getExitCode();
    }


    log.info(""Process destruction entered a last-ditch phase that shouldn't happen. File an issue if you see this message"");
    // Give the process a chance to die naturally.
    quiesceFor(3, SECONDS);

    if (!handler.hasResult()) {
      log.info(
          ""Command failed to close cleanly. Destroying forcefully. "" + this);
      ProcessUtils.killProcess(snitch.getProcess());
      quiesceFor(1, SECONDS);
    }

    int exitCode;
    if (!handler.hasResult()) {
      log.severe(String.format(
          ""Unable to kill process with PID %s: %s"", snitch.getProcess(), this));
      exitCode = -1;
      executor.setExitValue(exitCode);
    } else {
      exitCode = getExitCode();
    }

    postRunCleanup();
    return exitCode;
  }",Destroy the current command.,0,300
5831,"public PathMatch<T> match(String path){
        if (!exactPathMatches.isEmpty()) {
            T match = getExactPath(path);
            if (match != null) {
                return new PathMatch<>(path, """", match);
            }
        }

        int length = path.length();
        final int[] lengths = this.lengths;
        for (int i = 0; i < lengths.length; ++i) {
            int pathLength = lengths[i];
            if (pathLength == length) {
                T next = paths.get(path);
                if (next != null) {
                    return new PathMatch<>(path, """", next);
                }
            } else if (pathLength < length) {
                char c = path.charAt(pathLength);
                if (c == '/') {
                    String part = path.substring(0, pathLength);
                    T next = paths.get(part);
                    if (next != null) {
                        return new PathMatch<>(part, path.substring(pathLength), next);
                    }
                }
            }
        }
        return new PathMatch<>("""", path, defaultHandler);
    }",Matches a path against the registered handlers.,0,373
7332,"File[] listTaskDirectories() {
        return !stateDir.exists() ? new File[0] :
                stateDir.listFiles(pathname -> pathname.isDirectory() && PATH_NAME.matcher(pathname.getName()).matches());
    }",List all of the task directories,0,70
6034,"private Set<MyFormat> findCandidates(TrackGroupArray[] allTracks) {
        String trackId = mPrefs.getSelectedTrackId();
        int trackHeight = mPrefs.getSelectedTrackHeight();

        Set<MyFormat> result = new HashSet<>();

        TrackGroupArray groupArray = allTracks[VIDEO_RENDERER_INDEX];
        Set<MyFormat> backedList = new HashSet<>();

        // search the same tracks
        for (int j = 0; j < groupArray.length; j++) {
            TrackGroup trackGroup = groupArray.get(j);
            for (int i = 0; i < trackGroup.length; i++) {
                Format format = trackGroup.getFormat(i);

                if (PlayerUtil.isPreferredFormat(mPlayerActivity, format)) {
                    MyFormat myFormat = new MyFormat(format, new Pair<>(j, i));
                    if (tracksEquals(format.id, trackId)) {
                        result.clear();
                        result.add(myFormat);
                        break;
                    }

                    if (heightEquals(format.height, trackHeight)) {
                        result.add(myFormat);
                    }

                    backedList.add(myFormat);
                }
            }
        }

        return result.isEmpty() ? backedList : result;
    }",Try to find a candidate(s) that match preferred settings,0,349
6479,"public static Vector decodePoint(String formattedString) {
    final int closingBracketIndex = formattedString.indexOf(']'); 
    if (formattedString.charAt(0) != '[' || closingBracketIndex < 0) {
      throw new IllegalArgumentException(formattedString);
    }

    formattedString = formattedString.substring(1, closingBracketIndex);

    final String[] pts = splitPattern.split(formattedString);
    final Vector point = new SparseVector(pts.length);
    for (int i = 0; i < point.cardinality(); i++) {
      point.set(i, Double.parseDouble(pts[i]));
    }

    return point;
  }",Decodes a point from its string representation.,0,195
7111,"public Status read(String table, String key, Set<String> fields, HashMap<String,ByteIterator> result)
    {
        //if this is a ""new"" table, init HTable object.  Else, use existing one
        if (!_table.equals(table)) {
            _hTable = null;
            try
            {
                getHTable(table);
                _table = table;
            }
            catch (IOException e)
            {
                System.err.println(""Error accessing HBase table: ""+e);
                return Status.ERROR;
            }
        }

        Result r = null;
        try
        {
        if (_debug) {
        System.out.println(""Doing read from HBase columnfamily ""+_columnFamily);
        System.out.println(""Doing read for key: ""+key);
        }
            Get g = new Get(Bytes.toBytes(key));
          if (fields == null) {
            g.addFamily(_columnFamilyBytes);
          } else {
            for (String field : fields) {
              g.addColumn(_columnFamilyBytes, Bytes.toBytes(field));
            }
          }
            r = _hTable.get(g);
        }
        catch (IOException e)
        {
            System.err.println(""Error doing get: ""+e);
            return Status.ERROR;
        }
        catch (ConcurrentModificationException e)
        {
            //do nothing for now...need to understand HBase concurrency model better
            return Status.ERROR;
        }

  for (KeyValue kv : r.raw()) {
    result.put(
        Bytes.toString(kv.getQualifier()),
        new ByteArrayByteIterator(kv.getValue()));
    if (_debug) {
      System.out.println(""Result for field: ""+Bytes.toString(kv.getQualifier())+
          "" is: ""+Bytes.toString(kv.getValue()));
    }

  }
    return Status.OK;
    }",Read a record from the database.,0,476
7367,"private long getWorkerStoringFile(TachyonURI path) throws FileDoesNotExistException {
    Map<Long, Integer> workerBlockCounts = Maps.newHashMap();
    List<FileBlockInfo> blockInfoList;
    try {
      blockInfoList = getFileBlockInfoList(path);

      for (FileBlockInfo fileBlockInfo : blockInfoList) {
        for (BlockLocation blockLocation : fileBlockInfo.blockInfo.locations) {
          if (workerBlockCounts.containsKey(blockLocation.workerId)) {
            workerBlockCounts.put(blockLocation.workerId,
                workerBlockCounts.get(blockLocation.workerId) + 1);
          } else {
            workerBlockCounts.put(blockLocation.workerId, 1);
          }

          // TODO(yupeng) remove the requirement that all the blocks of a file must be stored on the
          // same worker, for now it returns the first worker that has all the blocks
          if (workerBlockCounts.get(blockLocation.workerId) == blockInfoList.size()) {
            return blockLocation.workerId;
          }
        }
      }
    } catch (FileDoesNotExistException e) {
      LOG.error(""The file {} to persist does not exist"", path);
      return IdUtils.INVALID_WORKER_ID;
    } catch (InvalidPathException e) {
      LOG.error(""The file {} to persist is invalid"", path);
      return IdUtils.INVALID_WORKER_ID;
    }

    if (workerBlockCounts.size() == 0) {
      LOG.error(""The file "" + path + "" does not exist on any worker"");
      return IdUtils.INVALID_WORKER_ID;
    }

    LOG.error(""Not all the blocks of file {} stored on the same worker"", path);
    return IdUtils.INVALID_WORKER_ID;
  }",Gets a worker where the given file is stored.,0,362
5363,"public Fraction negate() {
        // the positive range is one smaller than the negative range of an int.
        if (numerator==Integer.MIN_VALUE) {
            throw new ArithmeticException(""overflow: too large to negate"");
        }
        return new Fraction(-numerator, denominator);
    }",Gets a fraction that is the negative (-fraction) of this one. The returned fraction is not reduced.,0,61
5787,"private ASTVariableDeclaratorId getDeclaration(ASTLocalVariableDeclaration node) {
        ASTType type = node.getTypeNode();
        if (MAP_CLASSES.keySet().contains(type.getTypeImage())) {
            return node.getFirstDescendantOfType(ASTVariableDeclaratorId.class);
        }
        return null;
    }",This method checks the variable declaration if it is on a class we care about.,0,74
7034,"public static ByteArrayComparable toComparator(ComparatorProtos.Comparator proto)
  throws IOException {
    return ProtobufConverter.toComparator(proto);
  }",Convert a protocol buffer Comparator to a ByteArrayComparable,0,36
7042,"public boolean equals(Object object) {
    return object instanceof BlockStoreLocation
        && ((BlockStoreLocation) object).tierLevel() == tierLevel()
        && ((BlockStoreLocation) object).tierAlias() == tierAlias()
        && ((BlockStoreLocation) object).dir() == dir();
  }",Compares to a specific object.,0,95
6943,"private Contact getSelectedContact()
    {
        KnownFingerprintsTableModel model =
            (KnownFingerprintsTableModel) contactsTable.getModel();
        int index = contactsTable.getSelectedRow();
        if (index < 0 || index > model.getRowCount())
            return null;

        return model.getContactFromRow(index);
    }",Gets the selected  Contact for this  KnownFingerprintsTableModel.,0,89
6097,"public Response deleteHostComponents(String body, @Context HttpHeaders headers, @Context UriInfo ui) {

    return handleRequest(headers, body, ui, Request.Type.DELETE,
        createHostComponentResource(m_clusterName, m_hostName, null));
  }",Handles DELETE /clusters/clusterID/hosts/hostID/host_components,0,66
6037,"public Type getLocalType(final int local) {
        return (Type) this.localTypes.get( local - this.firstLocal );
    }",Returns the type of the given local variable.,0,43
5302,"public long getId() {
        return this.id;
    }",Returns the id of the status,0,21
7353,"static boolean isAttributeMethod(Method method) {
		return (method != null && method.getParameterCount() == 0 && method.getReturnType() != void.class);
	}",Determine if the supplied  method is an annotation attribute method.,0,59
7343,"public String getName()
    {
        return getAttributeAsString(NAME_ARG_NAME);
    }",Returns the value of the name argument if it exists or null if it doesn't.,0,23
7705,"public TopicPublisher createPublisher(Topic topic) throws JMSException {
        checkClosed();

        if (topic instanceof CustomDestination) {
            CustomDestination customDestination = (CustomDestination)topic;
            return customDestination.createPublisher(this);
        }
        int timeSendOut = connection.getSendTimeout();
        return new ActiveMQTopicPublisher(this, ActiveMQMessageTransformation.transformDestination(topic),timeSendOut);
    }",Creates a publisher for the specified topic.,0,102
7330,"public static boolean isBlank(String str) {
		return (str == null || str.trim().isEmpty());
	}","Determine if the supplied  String is blank (i.e.,  null or consisting only of whitespace characters).",0,44
7474,"private Callable<Long> internalUpdate(final long l, final boolean updated) {
        return new Callable<Long>() {
            @Override public Long call() throws Exception {
                IgniteTx tx = CU.txStartInternal(ctx, seqView, PESSIMISTIC, REPEATABLE_READ);

                try {
                    GridCacheAtomicSequenceValue seq = seqView.get(key);

                    checkRemoved();

                    assert seq != null;

                    long curLocVal;

                    long newUpBound;

                    lock.lock();

                    try {
                        curLocVal = locVal;

                        // If local range was already reserved in another thread.
                        if (locVal + l <= upBound) {
                            long retVal = locVal;

                            locVal += l;

                            return updated ? locVal : retVal;
                        }

                        long curGlobalVal = seq.get();

                        long newLocVal;

                        /* We should use offset because we already reserved left side of range.*/
                        long off = batchSize > 1 ? batchSize - 1 : 1;

                        // Calculate new values for local counter, global counter and upper bound.
                        if (curLocVal + l >= curGlobalVal) {
                            newLocVal = curLocVal + l;

                            newUpBound = newLocVal + off;
                        }
                        else {
                            newLocVal = curGlobalVal;

                            newUpBound = newLocVal + off;
                        }

                        locVal = newLocVal;
                        upBound = newUpBound;

                        if (updated)
                            curLocVal = newLocVal;
                    }
                    finally {
                        lock.unlock();
                    }

                    // Global counter must be more than reserved upper bound.
                    seq.set(newUpBound + 1);

                    seqView.put(key, seq);

                    tx.commit();

                    return curLocVal;
                }
                catch (Error | Exception e) {
                    U.error(log, ""Failed to get and add: "" + this, e);

                    throw e;
                } finally {
                    tx.close();
                }
            }
        };
    }",Method returns callable for execution all update operations in async and sync mode.,0,520
7084,"public Expression color(){
        Expression value = value();
        // this is a plain property category so we can turn it into a function
        // Assume a EXPOTENTIAL function for now because it is the default for color
        FunctionType type = getType();
        if( type == null || type == FunctionType.CATEGORICAL){
            return colorCategorical(value); // CATEGORICAL is the default
        }
        else if( type == FunctionType.EXPONENTIAL){
            return colorExponential(value);
        }
        else if( type == FunctionType.INTERVAL){
            return colorInterval(value);
        }
        else if( type == FunctionType.IDENITY){
            return value;
        }
        throw new UnsupportedOperationException(""Not yet implemented support for '""+type+""' function"");
    }",GeoTools  Function from json definition that evaluates to a color.,0,184
7369,"public UserGroupInformation getUser() {
    if ( (owner == null) || ("""".equals(owner.toString()))) {
      return null;
    }
    final UserGroupInformation realUgi;
    final UserGroupInformation ugi;
    if ((realUser == null) || ("""".equals(realUser.toString()))
        || realUser.equals(owner)) {
      ugi = realUgi = UserGroupInformation.createRemoteUser(owner.toString());
    } else {
      realUgi = UserGroupInformation.createRemoteUser(realUser.toString());
      ugi = UserGroupInformation.createProxyUser(owner.toString(), realUgi);
    }
    realUgi.setAuthenticationMethod(AuthenticationMethod.TOKEN);
    return ugi;
  }",Get the username encoded in the token identifier,0,201
6880,"private boolean select(RoutingContext context, String routeName) {
        if (config == null) {
            return true;
        }
        DocumentSelector selector = config.get(routeName);
        if (selector == null) {
            return true;
        }

        // Select based on message content.
        Message msg = context.getMessage();
        switch (msg.getType()) {

        case DocumentProtocol.MESSAGE_PUTDOCUMENT:
            return selector.accepts(((PutDocumentMessage)msg).getDocumentPut()) == Result.TRUE;

        case DocumentProtocol.MESSAGE_UPDATEDOCUMENT:
            return selector.accepts(((UpdateDocumentMessage)msg).getDocumentUpdate()) != Result.FALSE;

        case DocumentProtocol.MESSAGE_REMOVEDOCUMENT: {
            RemoveDocumentMessage removeMsg = (RemoveDocumentMessage)msg;
            if (removeMsg.getDocumentId().hasDocType()) {
                return selector.accepts(removeMsg.getDocumentRemove()) != Result.FALSE;
            } else {
                return true;
            }
        }

        default:
            return true;
        }
    }",This method runs the selector associated with the given location on the content of the message.,0,280
6460,"public Request<T> approximate() {
            return downsample(Downsampler.AT_LEAST);
        }",Load images at a size near the size of the target using  Downsampler#AT_LEAST.,0,27
7655,"public Vertex rotate(int orientation)
	{
		// models are orientated north (1024) and there are 2048 angles total
		orientation = (orientation + 1024) % 2048;

		if (orientation == 0)
		{
			return this;
		}

		int sin = Perspective.SINE[orientation];
		int cos = Perspective.COSINE[orientation];

		return new Vertex(
			x * cos + z * sin >> 16,
			y,
			z * cos - x * sin >> 16
		);
	}",Rotate the vertex by the given orientation,0,152
7623,"public boolean areInsertionsOrDeletionsQueued() {
		return ( insertions.size() > 0 || ! unresolvedInsertions.isEmpty() || deletions.size() > 0 );
	}",Check whether any insertion or deletion actions are currently queued.,0,55
5491,"public Memoable copy()
    {
        return new Zuc128CoreEngine(this);
    }",Create a copy of the engine.,0,25
6909,"public KBArticle updateKBArticle(KBArticle kbArticle, boolean merge)
		throws SystemException {
		kbArticle.setNew(false);

		kbArticle = kbArticlePersistence.update(kbArticle, merge);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.reindex(kbArticle);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}

		return kbArticle;
	}",Updates the k b article in the database.,0,154
5470,"public int getFrameByteCount() {
        return mMetaData[0] * mMetaData[1] * 4;
    }",Returns the minimum number of bytes that can be used to store pixels of the single frame.,0,33
6953,"public GeoResults<GeoLocation<byte[]>> convert(Set<byte[]> source) {

				if (CollectionUtils.isEmpty(source)) {
					return new GeoResults<>(Collections.<GeoResult<GeoLocation<byte[]>>> emptyList());
				}

				List<GeoResult<GeoLocation<byte[]>>> results = new ArrayList<>(source.size());
				Iterator<byte[]> it = source.iterator();
				while (it.hasNext()) {
					results.add(new GeoResult<>(new GeoLocation<>(it.next(), null), new Distance(0D)));
				}
				return new GeoResults<>(results);
			}",Get  Converter capable of  Set of  Byte into  GeoResults.,0,195
6371,"protected static GeoPoint[][] decompose(double dateline, GeoPoint[] coordinates) {
        int offset = 0;
        ArrayList<GeoPoint[]> parts = new ArrayList<>();
        
        double shift = coordinates[0].x > DATELINE ? DATELINE : (coordinates[0].x < -DATELINE ? -DATELINE : 0);

        for (int i = 1; i < coordinates.length; i++) {
            double t = intersection(coordinates[i-1], coordinates[i], dateline);
            if(!Double.isNaN(t)) {
                GeoPoint[] part;
                if(t<1) {
                    part = Arrays.copyOfRange(coordinates, offset, i+1);
                    part[part.length-1] = Edge.position(coordinates[i-1], coordinates[i], t);
                    coordinates[offset+i-1] = Edge.position(coordinates[i-1], coordinates[i], t);
                    shift(shift, part);
                    offset = i-1;
                    shift = coordinates[i].x > DATELINE ? DATELINE : (coordinates[i].x < -DATELINE ? -DATELINE : 0);
                } else {
                    part = shift(shift, Arrays.copyOfRange(coordinates, offset, i+1));
                    offset = i;
                }
                parts.add(part);
            }
        }

        if(offset == 0) {
            parts.add(shift(shift, coordinates));
        } else if(offset < coordinates.length-1) {
            GeoPoint[] part = Arrays.copyOfRange(coordinates, offset, coordinates.length);
            parts.add(shift(shift, part));
        }
        return parts.toArray(new GeoPoint[parts.size()][]);
    }",Decompose a linestring given as array of coordinates at a vertical line.,0,528
6557,"private Object[] prepareArguments(MethodCallTargetNode methodCallTargetNode, ResolvedJavaType[] parameterTypes, ResolvedJavaMethod target, boolean folding) {
        NodeInputList<ValueNode> arguments = methodCallTargetNode.arguments();
        Object[] reflectionCallArguments = folding ? new JavaConstant[arguments.size()] : new Object[arguments.size()];
        for (int i = 0; i < reflectionCallArguments.length; ++i) {
            int parameterIndex = i;
            if (!methodCallTargetNode.isStatic()) {
                parameterIndex--;
            }
            ValueNode argument = arguments.get(i);
            if (folding || target.getParameterAnnotation(ConstantNodeParameter.class, parameterIndex) != null) {
                if (!(argument instanceof ConstantNode)) {
                    return null;
                }
                ConstantNode constantNode = (ConstantNode) argument;
                Constant constant = constantNode.asConstant();
                ResolvedJavaType type = providers.getConstantReflection().asJavaType(constant);
                if (type != null) {
                    reflectionCallArguments[i] = type;
                    parameterTypes[i] = providers.getMetaAccess().lookupJavaType(ResolvedJavaType.class);
                } else {
                    JavaConstant javaConstant = (JavaConstant) constant;
                    if (parameterTypes[i].getKind() == Kind.Boolean) {
                        reflectionCallArguments[i] = Boolean.valueOf(javaConstant.asInt() != 0);
                    } else if (parameterTypes[i].getKind() == Kind.Byte) {
                        reflectionCallArguments[i] = Byte.valueOf((byte) javaConstant.asInt());
                    } else if (parameterTypes[i].getKind() == Kind.Short) {
                        reflectionCallArguments[i] = Short.valueOf((short) javaConstant.asInt());
                    } else if (parameterTypes[i].getKind() == Kind.Char) {
                        reflectionCallArguments[i] = Character.valueOf((char) javaConstant.asInt());
                    } else if (parameterTypes[i].getKind() == Kind.Object) {
                        if (!folding) {
                            reflectionCallArguments[i] = snippetReflection.asObject(parameterTypes[i], javaConstant);
                        } else {
                            reflectionCallArguments[i] = javaConstant;
                        }
                    } else {
                        reflectionCallArguments[i] = javaConstant.asBoxedPrimitive();
                    }
                }
                if (folding && reflectionCallArguments[i] != constant) {
                    assert !(reflectionCallArguments[i] instanceof JavaConstant);
                    reflectionCallArguments[i] = snippetReflection.forObject(reflectionCallArguments[i]);
                }
            } else {
                reflectionCallArguments[i] = argument;
                parameterTypes[i] = providers.getMetaAccess().lookupJavaType(ValueNode.class);
            }
        }
        return reflectionCallArguments;
    }",Converts the arguments of an invoke node to object values suitable for use as the arguments to a reflective invocation of a Java method.,0,757
7805,"static Object wrapArgumentForScriptExecution(Object argument) {
      JSONObject wrappedArgument = new JSONObject();
      try {
        if (argument instanceof String) {
          wrappedArgument.put(""type"", ""STRING"");
          wrappedArgument.put(""value"", argument);
        } else if (argument instanceof Boolean) {
          wrappedArgument.put(""type"", ""BOOLEAN"");
          wrappedArgument.put(""value"", argument);
        } else if (argument instanceof Number) {
          wrappedArgument.put(""type"", ""NUMBER"");
          wrappedArgument.put(""value"", argument);
        } else if (argument instanceof ChromeWebElement) {
          wrappedArgument.put(""type"", ""ELEMENT"");
          wrappedArgument.put(""value"", ((ChromeWebElement)argument).getElementId());
        } else if (argument instanceof Collection<?>) {
          JSONArray array = new JSONArray();
          for (Object o : (Collection<?>)argument) {
            array.put(wrapArgumentForScriptExecution(o));
          }
          return array;
        } else {
          throw new IllegalArgumentException(""Could not wrap up "" +
                ""javascript parameter "" + argument +
                ""(class: "" + argument.getClass() + "")"");
        }
      } catch (JSONException e) {
        throw new WebDriverException(e);
      }
      return wrappedArgument;
    }","Wraps up values as type: some_type, value: some_value objects",0,392
7555,"public Response addMapper(IdentityProviderMapperRepresentation mapper) {
        auth.requireManage();

        if (identityProviderModel == null) {
            throw new javax.ws.rs.NotFoundException();
        }

        IdentityProviderMapperModel model = RepresentationToModel.toModel(mapper);
        try {
            model = realm.addIdentityProviderMapper(model);
        } catch (Exception e) {
            return ErrorResponse.error(""Failed to add mapper '"" + model.getName() + ""' to identity provider ["" + identityProviderModel.getProviderId() + ""]."", Response.Status.BAD_REQUEST);
        }

        adminEvent.operation(OperationType.CREATE).resource(ResourceType.IDENTITY_PROVIDER_MAPPER).resourcePath(uriInfo, model.getId())
            .representation(mapper).success();

        return Response.created(uriInfo.getAbsolutePathBuilder().path(model.getId()).build()).build();

    }",Add a mapper to identity provider,0,232
7251,"public static boolean isLoopbackAddress(Socket socket) {
        boolean result = true;
        //## Java 1.4 begin ##
        result = socket.getInetAddress().isLoopbackAddress();
        if (result) {
            return result;
        }
        //## Java 1.4 end ##
        String s = getLocalAddress();
        result = socket.getInetAddress().getHostAddress().equals(s);
        return result;
    }",Check if a socket is connected to localhost.,0,107
6583,"public static int checkTransmissionSupported(Context context) {
        if (android.os.Build.VERSION.SDK_INT < 21) {
            return NOT_SUPPORTED_MIN_SDK;
        }
        if (!context.getApplicationContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {
            return NOT_SUPPORTED_BLE;
        }
        if (!((BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE)).getAdapter().isMultipleAdvertisementSupported()) {
            return NOT_SUPPORTED_MULTIPLE_ADVERTISEMENTS;
        }
        try {
            // Check to see if the getBluetoothLeAdvertiser is available.  If not, this will throw an exception indicating we are not running Android L
            ((BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE)).getAdapter().getBluetoothLeAdvertiser();
        } catch (Exception e) {
            return NOT_SUPPORTED_CANNOT_GET_ADVERTISER;
        }
        return SUPPORTED;
    }",Checks to see if this device supports beacon advertising,0,183
5764,"private OIndexSearchResult createIndexedProperty(final OSQLFilterCondition iCondition, final Object iItem) {
    if (iItem == null || !(iItem instanceof OSQLFilterItemField)) {
      return null;
    }

    if (iCondition.getLeft() instanceof OSQLFilterItemField && iCondition.getRight() instanceof OSQLFilterItemField) {
      return null;
    }

    final OSQLFilterItemField item = (OSQLFilterItemField) iItem;

    if (item.hasChainOperators() && !item.isFieldChain()) {
      return null;
    }

    final Object origValue = iCondition.getLeft() == iItem ? iCondition.getRight() : iCondition.getLeft();

    OQueryOperator operator = iCondition.getOperator();

    if (iCondition.getRight() == iItem) {
      if (operator instanceof OQueryOperatorIn) {
        operator = new OQueryOperatorContains();
      } else if (operator instanceof OQueryOperatorContains) {
        operator = new OQueryOperatorIn();
      }
    }

    if (iCondition.getOperator() instanceof OQueryOperatorBetween || operator instanceof OQueryOperatorIn) {

      return new OIndexSearchResult(operator, item.getFieldChain(), origValue);
    }

    final Object value = OSQLHelper.getValue(origValue);
    return new OIndexSearchResult(operator, item.getFieldChain(), value);
  }",Add SQL filter field to the search candidate list.,0,373
7399,"public static double gt(double value) {
        reportMatcher(new GreaterThan<Double>(value));
        return 0;
    }",double argument greater than the given value.,0,39
5916,"public static DataSource createDataSource(final byte[] yamlBytes) throws SQLException, IOException {
        YamlMasterSlaveConfiguration config = YamlMasterSlaveConfiguration.unmarshal(yamlBytes);
        return MasterSlaveDataSourceFactory.createDataSource(config.getDataSources(), config.getMasterSlaveRule().getMasterSlaveRuleConfiguration(),
                config.getMasterSlaveRule().getConfigMap(), config.getMasterSlaveRule().getProps());
    }",Create master-slave data source.,0,93
5695,"static byte[] getImageInBytes(String imageID) 
    {
        InputStream in
            = IrcActivator.getResources().getImageInputStream(imageID);
        byte[] image = null;

        if (in != null)
        {
            try 
            {
                image = new byte[in.available()];
    
                in.read(image);
            }
            catch (IOException e) 
            {
                logger.error(""Failed to load image:"" + imageID, e);
            }
        }
        return image;
    }",Returns the byte representation of the image corresponding to the given identifier.,0,149
5725,"public PluginResult execute(String action, JSONArray args, String callbackId) {
		PluginResult.Status status = PluginResult.Status.OK;
		String result = """";		
		try {
			if (action.equals(""isAvailable"")) {
				boolean b = this.isAvailable();
				return new PluginResult(status, b);
			}
			else if (action.equals(""isWifiActive"")) {
				boolean b = this.isWifiActive();
				return new PluginResult(status, b);
			}
			else if (action.equals(""isReachable"")) {
				int i = this.isReachable(args.getString(0), args.getBoolean(1));
				return new PluginResult(status, i);
			}
			else if (action.equals(""getConnectionInfo"")) {
				this.connectionCallbackId = callbackId;
				NetworkInfo info = sockMan.getActiveNetworkInfo();
				PluginResult pluginResult = new PluginResult(status, this.getConnectionInfo(info));
				pluginResult.setKeepCallback(true);
				return pluginResult;
			}			
			return new PluginResult(status, result);
		} catch (JSONException e) {
			return new PluginResult(PluginResult.Status.JSON_EXCEPTION);
		}
	}",Executes the request and returns PluginResult.,0,347
5476,"public static int putShort(byte[] bytes, int offset, short val) {
    if (bytes.length - offset < SIZEOF_SHORT) {
      throw new IllegalArgumentException(""Not enough room to put a short at""
          + "" offset "" + offset + "" in a "" + bytes.length + "" byte array"");
    }
    if (UnsafeAccess.isAvailable()) {
      return UnsafeAccess.putShort(bytes, offset, val);
    } else {
      bytes[offset+1] = (byte) val;
      val >>= 8;
      bytes[offset] = (byte) val;
      return offset + SIZEOF_SHORT;
    }
  }",Put a short value out to the specified byte array position.,0,186
5991,"public static long getTimeLocalWithoutDst(java.util.Date d) {
        return d.getTime() + getCalendar().get(Calendar.ZONE_OFFSET);
    }","Get the number of milliseconds since 1970-01-01 in the local timezone, but without daylight saving time into account.",0,45
5550,"public Promise<Node> reveal(final Path path, final boolean select) {
    return reveal(path, select, select);
  }",Search node in the project explorer tree by storable path.,0,43
6951,"public static Permission toPermission(AccessControlProtos.Permission proto) {

    if (proto.getType() == AccessControlProtos.Permission.Type.Global) {
      AccessControlProtos.GlobalPermission perm = proto.getGlobalPermission();
      Action[] actions = toPermissionActions(perm.getActionList());
      return Permission.newBuilder().withActions(actions).build();
    }
    if (proto.getType() == AccessControlProtos.Permission.Type.Namespace) {
      AccessControlProtos.NamespacePermission perm = proto.getNamespacePermission();
      Action[] actions = toPermissionActions(perm.getActionList());

      if (!proto.hasNamespacePermission()) {
        throw new IllegalStateException(""Namespace must not be empty in NamespacePermission"");
      }
      String ns = perm.getNamespaceName().toStringUtf8();
      return Permission.newBuilder(ns).withActions(actions).build();
    }
    if (proto.getType() == AccessControlProtos.Permission.Type.Table) {
      AccessControlProtos.TablePermission perm = proto.getTablePermission();
      Action[] actions = toPermissionActions(perm.getActionList());

      byte[] qualifier = null;
      byte[] family = null;

      if (!perm.hasTableName()) {
        throw new IllegalStateException(""TableName cannot be empty"");
      }
      TableName table = toTableName(perm.getTableName());

      if (perm.hasFamily()) family = perm.getFamily().toByteArray();
      if (perm.hasQualifier()) qualifier = perm.getQualifier().toByteArray();
      return Permission.newBuilder(table).withFamily(family).withQualifier(qualifier)
          .withActions(actions).build();
    }
    throw new IllegalStateException(""Unrecognize Perm Type: "" + proto.getType());
  }",Converts a Permission shaded proto to a client TablePermission object.,0,474
6752,"String getUfsPath() throws IOException {
    ClientFileInfo info = mTachyonFS.getFileStatus(mFileId, """", true);

    if (!info.getUfsPath().isEmpty()) {
      return info.getUfsPath();
    }

    return mTachyonFS.getFileStatus(mFileId, """", false).getUfsPath();
  }",Return the under filesystem path in the under file system of this file,0,92
7759,"CloseableReference<Bitmap> createBitmap(short width, short height) {
    CloseableReference<PooledByteBuffer> jpgRef = mJpegGenerator.generate(width, height);
    try {
      CloseableReference<Bitmap> bitmapRef =
          decodeJPEGFromPooledByteBuffer(jpgRef, jpgRef.get().size());
      Bitmap underlying = bitmapRef.get();
      for (int x = 0; x < underlying.getWidth(); x++) {
        for (int y = 0; y < underlying.getHeight(); y++) {
          underlying.setPixel(x, y, Color.TRANSPARENT);
        }
      }
      return bitmapRef;
    } finally {
      jpgRef.close();
    }
  }",Creates a bitmap of the specified width and height.,0,199
7104,"public SendSmsResponse sendSmsRequest(SendSmsRequest sendSmsRequest)
			throws ClientException {

		return sendSmsRequest(sendSmsRequest, aliCloudProperties.getAccessKey(),
				aliCloudProperties.getSecretKey());
	}",will expose user to call this method send sms message,0,46
6210,"private Polygon addPolygonToMap(GeoJsonPolygonStyle polygonStyle, GeoJsonPolygon polygon) {
        PolygonOptions polygonOptions = polygonStyle.toPolygonOptions();
        // First array of coordinates are the outline
        polygonOptions.addAll(polygon.getCoordinates().get(POLYGON_OUTER_COORDINATE_INDEX));
        // Following arrays are holes
        for (int i = POLYGON_INNER_COORDINATE_INDEX; i < polygon.getCoordinates().size();
                i++) {
            polygonOptions.addHole(polygon.getCoordinates().get(i));
        }
        Polygon addedPolygon = mMap.addPolygon(polygonOptions);
        addedPolygon.setClickable(true);
        return addedPolygon;
    }",Adds a GeoJsonPolygon to the map as a Polygon,0,146
6673,"public static AggregateType getAggregateType(String name) {
        return AGGREGATES.get(name);
    }","Get the aggregate type for this name, or -1 if no aggregate has been found.",0,29
6158,"private static boolean isInstitution(String author) {
        if (!(author.isEmpty())) {
            return (author.charAt(0) == '{') && (author.charAt(author.length() - 1) == '}');
        } else {
            return false; // In case of empty or null author
        }
    }",Check if a value is institution.,0,95
7905,"public static RelStatSource getStatistics(RelNode rel) {
    throw new UnsupportedOperationException();
  }",Returns statistics for a relational expression.,0,28
7603,"public String disablePropertyName() {
        return ""zuul."" + baseName + "".disable"";
    }",The name of the Archaius property to disable this filter.,0,31
6944,"public Tile getParent() {
            if (envelope.contains((BoundingBox) dataEnvelope)) {
                return null;
            } else {
                Tile parent = super.getParent();
                if(parent != null) {
                    // wrap it, as we have some custom logic working against the data envelope here
                    parent = new CachedTile(super.getParent());
                }
                
                return parent;
            }
        }","Returns the parent of this tile, or null if this tile is (one of) the root of the current dataset",0,105
5586,"public Expression typesBoolean(){
        return ff.function(""mbType"", exprList());
    }",Asserts that the input value is a boolean.,0,30
6399,"public int getLength() {
        return schemaNameLength + tableName.length() + quoteCharacter.getStartDelimiter().length() + quoteCharacter.getEndDelimiter().length();
    }",Get table token length.,0,51
6408,"public RestTemplateBuilder basicAuthentication(String username, String password, Charset charset) {
		return additionalHttpHeadersCustomizers(false,
				SimpleHttpHeaderDefaultingCustomizer.basicAuthentication(username, password, charset));
	}","Add HTTP Basic Authentication to requests with the given username/password pair, unless a custom Authorization header has been set before.",0,50
7265,"private ClickableSpan getClickableSpanInCoords(int x, int y) {
    final int offset = getTextOffsetAt(x, y);
    if (offset < 0) {
      return null;
    }
    final ClickableSpan[] clickableSpans = ((Spanned) mText).getSpans(
        offset,
        offset,
        ClickableSpan.class);

    if (clickableSpans != null && clickableSpans.length > 0) {
      return clickableSpans[0];
    }

    return null;
  }",Get the clickable span that is at the exact coordinates,0,143
6742,"public String getAttribute(String key, String value) {
    if (!matrixContext.getAttributes().containsKey(key))
      return value;
    return matrixContext.getAttributes().get(key);
  }",Gets attribute.,0,59
7851,"public static int getPrecision(MajorType majorType) {
    if (majorType.hasPrecision()) {
      return majorType.getPrecision();
    }

    return isScalarStringType(majorType) ? MAX_VARCHAR_LENGTH : UNDEFINED;
  }",Get the precision of given type.,0,62
7824,"public static TimeExtractionFunction createDefault(String timeZone) {
    return new TimeExtractionFunction(ISO_TIME_FORMAT, null, timeZone, null);
  }",Creates the default time format extraction function.,0,38
6726,"protected String getFragment() {
            return page.getUriFragment();
        }",Returns the current URI fragment tracked by this UriFragentManager.,0,23
7891,"public static DateTimeFormatter dateTimeNoMillis() {
        return Constants.dtx;
    }","Returns a formatter that combines a full date and time without millis, separated by a 'T' (yyyy-MM-dd'T'HH:mm:ssZZ).",0,23
6758,"public static LongBuffer memLongBuffer(long address, int capacity) {
        return wrap(BUFFER_LONG, checkAlignment(address, 8 - 1), capacity);
    }",Creates a new direct LongBuffer that starts at the specified memory address and has the specified capacity.,0,48
7397,"protected String name(Object principal) {
		// We are reusing the logic from AbstractAuthenticationToken#getName
		return new TestingAuthenticationToken(principal, null).getName();
	}",Derives a String name for the given principal.,0,37
6330,"public ZipEntry getEntry(String name) {
        return getEntry0(name, java.util.zip.ZipEntry::new);
    }","Returns the zip file entry for the specified name, or null if not found.",0,37
7039,"static TimeLimiter of(Duration timeoutDuration) {
        TimeLimiterConfig timeLimiterConfig = TimeLimiterConfig.custom()
                .timeoutDuration(timeoutDuration)
                .build();
        return new TimeLimiterImpl(DEFAULT_NAME, timeLimiterConfig);
    }",Creates a TimeLimiter decorator with a timeout Duration.,0,57
5519,"public static ContextResolver<MoxyJsonConfig> createMoxyJsonResolver() {
        final Map<String, String> namespacePrefixMapper = new HashMap<>(1);
        namespacePrefixMapper.put(""http://www.w3.org/2001/XMLSchema-instance"", ""xsi"");

        return new MoxyJsonConfig()
                .setNamespacePrefixMapper(namespacePrefixMapper)
                .setNamespaceSeparator(':')
                .resolver();
    }",Create MOXy JSON config context resolver.,0,90
5348,"public Marker getMarker(Cluster<T> cluster) {
        return mClusterMarkerCache.get(cluster);
    }",Get the marker from a Cluster,0,30
5510,"public List<ViewEntity> findByCommonName(String viewCommonName) {
    List<ViewEntity> list = Lists.newArrayList();
    if (viewCommonName != null) {
      for (ViewEntity viewEntity : findAll()) {
        if (viewCommonName.equals(viewEntity.getCommonName())) {
          list.add(viewEntity);
        }
      }
    }
    return list;
  }",Find a view with a given common name.,0,109
7376,"public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        LikeFilterImpl that = (LikeFilterImpl) o;
        return Objects.equals(attribute, that.attribute) && Objects.equals(pattern, that.pattern);
    }",Compares this filter to the specified object.,0,111
6707,"protected static String getLiteralByType(int type, String value, String databaseType) {
        // Format value based on column type. For example, strings and timestamps need to be quoted
        switch (type) {
            // For string-represented values, put in single quotes
            case CHAR:
            case LONGNVARCHAR:
            case LONGVARCHAR:
            case NCHAR:
            case NVARCHAR:
            case VARCHAR:
            case ROWID:
            case DATE:
            case TIME:
                return ""'"" + value + ""'"";
            case TIMESTAMP:
                if (""Oracle"".equals(databaseType)) {
                    // For backwards compatibility, the type might be TIMESTAMP but the state value is in DATE format. This should be a one-time occurrence as the next maximum value
                    // should be stored as a full timestamp. Even so, check to see if the value is missing time-of-day information, and use the ""date"" coercion rather than the
                    // ""timestamp"" coercion in that case
                    if (value.matches(""\\d{4}-\\d{2}-\\d{2}"")) {
                        return ""date '"" + value + ""'"";
                    } else {
                        return ""timestamp '"" + value + ""'"";
                    }
                } else {
                    return ""'"" + value + ""'"";
                }
                // Else leave as is (numeric types, e.g.)
            default:
                return value;
        }
    }",Returns a SQL literal for the given value based on its type.,0,257
5616,"private RequestFuture<ClientResponse> sendMetadataRequest(MetadataRequest request) {
        final Node node = client.leastLoadedNode();
        if (node == null)
            return RequestFuture.noBrokersAvailable();
        else
            return client.send(node, ApiKeys.METADATA, request);
    }",Send Metadata Request to least loaded node in Kafka cluster asynchronously,0,79
7518,"public BlockFace getAttachedFace() {
        byte data = getData();

        switch (data) {
        case 0x1:
            return BlockFace.WEST;

        case 0x2:
            return BlockFace.EAST;

        case 0x3:
            return BlockFace.NORTH;

        case 0x4:
            return BlockFace.SOUTH;

        case 0x5:
            return BlockFace.DOWN;
        }

        return null;
    }",Gets the face that this block is attached on,0,119
6388,"public Query getQuery() {
        if (query == null) {
            return Query.ALL;
        } else {
            return query;
        }
    }",Returns the definition query (filter) for this layer.,0,51
7749,"public Order placeOrder(Order body) throws ApiException {
        ApiResponse<Order> localVarResp = placeOrderWithHttpInfo(body);
        return localVarResp.getData();
    }",Place an order for a pet,0,46
7551,"public Response updateRealm(final RealmRepresentation rep) {
        auth.requireManage();

        logger.debug(""updating realm: "" + realm.getName());
        try {
            RepresentationToModel.updateRealm(rep, realm);
            if (rep.isRealmCacheEnabled() != null && session.realms() instanceof CacheRealmProvider) {
                CacheRealmProvider cacheRealmProvider = (CacheRealmProvider)session.realms();
                cacheRealmProvider.setEnabled(rep.isRealmCacheEnabled());
            }
            if (rep.isUserCacheEnabled() != null && session.userStorage() instanceof CacheUserProvider) {
                CacheUserProvider cache = (CacheUserProvider)session.userStorage();
                cache.setEnabled(rep.isUserCacheEnabled());
            }

            // Refresh periodic sync tasks for configured federationProviders
            List<UserFederationProviderModel> federationProviders = realm.getUserFederationProviders();
            UsersSyncManager usersSyncManager = new UsersSyncManager();
            for (final UserFederationProviderModel fedProvider : federationProviders) {
                usersSyncManager.refreshPeriodicSyncForProvider(session.getKeycloakSessionFactory(), session.getProvider(TimerProvider.class), fedProvider, realm.getId());
            }

            return Response.noContent().build();
        } catch (PatternSyntaxException e) {
            return Flows.errors().exists(""Specified regex pattern(s) is invalid."");
        } catch (ModelDuplicateException e) {
            return Flows.errors().exists(""Realm "" + rep.getRealm() + "" already exists."");
        }  catch (Exception e) {
            return Flows.errors().exists(""Failed to update "" + rep.getRealm() + "" Realm."");
        }
    }",Update the top-level information of this realm.,0,415
7256,"public static List<Integer> createColors(int[] colors) {

        List<Integer> result = new ArrayList<Integer>();

        for (int i : colors) {
            result.add(i);
        }

        return result;
    }",Turns an array of colors (integer color values) into an ArrayList of colors.,0,79
6605,"public String call() throws AlluxioException, IOException {
        int level = getLevelFromPolicy(writeTier);
        return mWorker.createBlock(sessionId, blockId, mStorageTierAssoc.getAlias(level),
            initialBytes);
      }","Used to allocate location and space for a new coming block, worker will choose the appropriate storage directory which fits the initial block size by some allocation strategy.",0,59
6966,"private boolean isGlobalVarReference(String name, Scope s) {
    Var v = s.getVar(name);
    if (v == null && externsScope != null) {
      v = externsScope.getVar(name);
    }
    if (v == null) {
      Name providedName = nameMap.get(name);
      return providedName != null && providedName.isProvided;
    } else {
      return !v.isLocal();
    }
  }",Determines whether a variable name reference in a particular scope is a global variable reference.,0,144
6182,"public String getUserPage() {
        return (String)getConfigurationValue(""userPage"");
    }",Returns the user page for the history listing,0,27
7356,"public boolean isBeforeFirst() throws SQLException {
        try {
            debugCodeCall(""isBeforeFirst"");
            checkClosed();
            int row = result.getRowId();
            int count = result.getRowCount();
            return count > 0 && row < 0;
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }","Checks if the current position is before the first row, that means next() was not called yet.",0,109
6578,"public static XMPMetadata readRawXMP(File file) throws IOException {
        try (FileInputStream inputStream = new FileInputStream(file)) {
            return XMPUtil.readRawXMP(inputStream);
        }
    }","Will read the XMPMetadata from the given pdf file, closing the file afterwards.",0,56
7699,"private List<BatchResponse> handleBatchRequests(final List<BatchRequest> requestList, final UriInfo uriInfo) {

        final List<BatchResponse> responseList = new ArrayList<>(requestList.size());

        final List<BatchRequestNode> batchRequestNodes = this.resolutionHelper.getDependingRequests(requestList);
        checkList.clear();
        if(batchRequestNodes.isEmpty()) {
        	 final BatchResponse response = new BatchResponse();
        	 ErrorInfo ex = ErrorHandler.handler(new ClientDetailsNotFoundException());
             response.setStatusCode(500);
             response.setBody(ex.getMessage());
             responseList.add(response) ;
             return responseList ;
        }
        for (BatchRequestNode rootNode : batchRequestNodes) {
            final BatchRequest rootRequest = rootNode.getRequest();
            final CommandStrategy commandStrategy = this.strategyProvider.getCommandStrategy(CommandContext
                    .resource(rootRequest.getRelativeUrl()).method(rootRequest.getMethod()).build());
            final BatchResponse rootResponse = commandStrategy.execute(rootRequest, uriInfo);

            responseList.add(rootResponse);
            responseList.addAll(this.processChildRequests(rootNode, rootResponse, uriInfo));
        }

        Collections.sort(responseList, new Comparator<BatchResponse>() {

            @Override
            public int compare(BatchResponse source, BatchResponse testee) {
                return source.getRequestId().compareTo(testee.getRequestId());
            }
        });

        checkList = responseList;
        return responseList;

    }",Returns the response list by getting a proper  org.apache.fineract.batch.command.CommandStrategy.,0,391
5773,"public static HttpServer createServer(String webapp) throws IOException {
    return new HttpServer.Builder().setName(webapp).setBindAddress(""0.0.0.0"")
        .setPort(0).setFindPort(true).build();
  }",Create an HttpServer instance for the given webapp,0,62
6669,"protected String getParam(final String value, final String paramName) {
		if (value == null || value.length() == 0)
			return null;
		int postSemi = value.indexOf(';') + 1;
		if (postSemi == 0 || postSemi == value.length())
			return null;
		String[] params = value.substring(postSemi).split("";"");
		for (String param : params) {
			String[] split = param.split(""="");
			if (split.length != 2)
				continue;
			if (!paramName.equals(split[0].trim()))
				continue;

			String paramValue = split[1].trim();
			int length = paramValue.length();
			if (length == 0)
				continue;
			if (length > 2 && '""' == paramValue.charAt(0)
					&& '""' == paramValue.charAt(length - 1))
				paramValue = paramValue.substring(1, length - 1);
			return paramValue;
		}
		return null;
	}",Get parameter value from header,0,337
6357,"public Data<ENTITY> create( final Configuration config )
            {
                return new Data<ENTITY>()
                {
                    @Override
                    public CharSeeker stream()
                    {
                        try
                        {
                            return charSeeker( multipleFiles( files ), DEFAULT_BUFFER_SIZE,
                                               true, config.quotationCharacter() );
                        }
                        catch ( IOException e )
                        {
                            throw new InputException( e.getMessage(), e );
                        }
                    }

                    @Override
                    public Function<ENTITY,ENTITY> decorator()
                    {
                        return decorator;
                    }
                };
            }",Creates a  DataFactory where data exists in multiple files.,0,167
7530,"private static CacheConfiguration utilitySystemCache(boolean client) {
            CacheConfiguration cache = new CacheConfiguration();

            cache.setName(CU.UTILITY_CACHE_NAME);
            cache.setCacheMode(REPLICATED);
            cache.setAtomicityMode(TRANSACTIONAL);
            cache.setSwapEnabled(false);
            cache.setQueryIndexEnabled(false);
            cache.setRebalanceMode(SYNC);
            cache.setWriteSynchronizationMode(FULL_SYNC);
            cache.setAffinity(new CacheRendezvousAffinityFunction(false, 100));

            if (client)
                cache.setDistributionMode(CLIENT_ONLY);

            return cache;
        }",Creates utility system cache configuration.,0,139
6014,"private boolean needsUpgrade() throws SQLException {
        return table.exists() && dbSupport.primaryKeyExists(table.getSchema().getName(), table.getName());
    }",Checks whether the metadata table needs to be upgraded.,0,52
7476,"public IgniteFuture<GridCacheTx> commitAsyncLocal() {
        if (log.isDebugEnabled())
            log.debug(""Committing colocated tx locally: "" + this);

        // In optimistic mode prepare was called explicitly.
        if (pessimistic())
            prepareAsync();

        IgniteFuture<GridCacheTxEx<K, V>> prep = prepFut.get();

        // Do not create finish future if there are no remote nodes.
        if (F.isEmpty(dhtMap) && F.isEmpty(nearMap)) {
            if (prep != null)
                return (IgniteFuture<GridCacheTx>)(IgniteFuture)prep;

            return new GridFinishedFuture<GridCacheTx>(cctx.kernalContext(), this);
        }

        final GridDhtTxFinishFuture<K, V> fut = new GridDhtTxFinishFuture<>(cctx, this, /*commit*/true);

        cctx.mvcc().addFuture(fut);

        if (prep == null || prep.isDone()) {
            assert prep != null || optimistic();

            try {
                if (prep != null)
                    prep.get(); // Check for errors of a parent future.

                fut.finish();
            }
            catch (GridCacheTxOptimisticException e) {
                if (log.isDebugEnabled())
                    log.debug(""Failed optimistically to prepare transaction [tx="" + this + "", e="" + e + ']');

                fut.onError(e);
            }
            catch (IgniteCheckedException e) {
                U.error(log, ""Failed to prepare transaction: "" + this, e);

                fut.onError(e);
            }
        }
        else
            prep.listenAsync(new CI1<IgniteFuture<GridCacheTxEx<K, V>>>() {
                @Override public void apply(IgniteFuture<GridCacheTxEx<K, V>> f) {
                    try {
                        f.get(); // Check for errors of a parent future.

                        fut.finish();
                    }
                    catch (GridCacheTxOptimisticException e) {
                        if (log.isDebugEnabled())
                            log.debug(""Failed optimistically to prepare transaction [tx="" + this + "", e="" + e + ']');

                        fut.onError(e);
                    }
                    catch (IgniteCheckedException e) {
                        U.error(log, ""Failed to prepare transaction: "" + this, e);

                        fut.onError(e);
                    }
                }
            });

        return fut;
    }",Commits local part of colocated transaction.,0,610
5693,"public static Expression refExpression(final String ref) {
        return new ExpressionAdapter() {
            public Object evaluate(Exchange exchange) {
                String text = simpleExpression(ref).evaluate(exchange, String.class);
                return exchange.getContext().getRegistry().lookupByName(text);
            }

            @Override
            public String toString() {
                return ""ref("" + ref + "")"";
            }
        };
    }",Returns an expression for lookup a bean in the  org.apache.camel.spi.Registry,0,130
6639,"public Set<ConnectorTaskId> tasks(String connectorName) {
        if (inconsistentConnectors.contains(connectorName))
            return Collections.emptySet();

        Integer numTasks = connectorTaskCounts.get(connectorName);
        if (numTasks == null)
            return Collections.emptySet();

        Set<ConnectorTaskId> taskIds = new HashSet<>();
        for (int taskIndex = 0; taskIndex < numTasks; taskIndex++) {
            ConnectorTaskId taskId = new ConnectorTaskId(connectorName, taskIndex);
            taskIds.add(taskId);
        }
        return taskIds;
    }",Get the current set of task IDs for the specified connector.,0,162
5948,"public static float addDungeonMob(EntityType<?> type, int rarity)
    {
        if (rarity <= 0)
        {
            throw new IllegalArgumentException(""Rarity must be greater then zero"");
        }

        Iterator<DungeonMob> itr = dungeonMobs.iterator();
        while (itr.hasNext())
        {
            DungeonMob mob = itr.next();
            if (type == mob.type)
            {
                itr.remove();
                rarity = mob.itemWeight + rarity;
                break;
            }
        }

        dungeonMobs.add(new DungeonMob(rarity, type));
        return rarity;
    }",Adds a mob to the possible list of creatures the spawner will create.,0,177
5281,"static JavaVersion get(final String nom) {
        if (nom == null) {
            return null;
        } else if (""0.9"".equals(nom)) {
            return JAVA_0_9;
        } else if (""1.1"".equals(nom)) {
            return JAVA_1_1;
        } else if (""1.2"".equals(nom)) {
            return JAVA_1_2;
        } else if (""1.3"".equals(nom)) {
            return JAVA_1_3;
        } else if (""1.4"".equals(nom)) {
            return JAVA_1_4;
        } else if (""1.5"".equals(nom)) {
            return JAVA_1_5;
        } else if (""1.6"".equals(nom)) {
            return JAVA_1_6;
        } else if (""1.7"".equals(nom)) {
            return JAVA_1_7;
        } else if (""1.8"".equals(nom)) {
            return JAVA_1_8;
        } else if (""9"".equals(nom)) {
            return JAVA_9;
        } else if (""10"".equals(nom)) {
            return JAVA_10;
        } else if (""11"".equals(nom)) {
            return JAVA_11;
        } else if (""12"".equals(nom)) {
            return JAVA_12;
        } else if (""13"".equals(nom)) {
            return JAVA_13;
        }
        final float v = toFloatVersion(nom);
        if ((v - 1.) < 1.) { // then we need to check decimals > .9
            final int firstComma = Math.max(nom.indexOf('.'), nom.indexOf(','));
            final int end = Math.max(nom.length(), nom.indexOf(',', firstComma));
            if (Float.parseFloat(nom.substring(firstComma + 1, end)) > .9f) {
                return JAVA_RECENT;
            }
        } else if (v > 10) {
            return JAVA_RECENT;
        }
        return null;
    }",Transforms the given string with a Java version number to the corresponding constant of this enumeration class.,0,574
7141,"public V computeIfAbsent(K key, CacheLoader<K, V> loader) throws ExecutionException {
        long now = now();
        V value = get(key, now);
        if (value == null) {
            CacheSegment<K, V> segment = getCacheSegment(key);
            // we synchronize against the segment lock; this is to avoid a scenario where another thread is inserting
            // a value for the same key via put which would not be observed on this thread without a mechanism
            // synchronizing the two threads; it is possible that the segment lock will be too expensive here (it blocks
            // readers too!) so consider this as a possible place to optimize should contention be observed
            try (ReleasableLock ignored = segment.writeLock.acquire()) {
                value = get(key, now);
                if (value == null) {
                    try {
                        value = loader.load(key);
                    } catch (Exception e) {
                        throw new ExecutionException(e);
                    }
                    if (value == null) {
                        throw new ExecutionException(new NullPointerException(""loader returned a null value""));
                    }
                    put(key, value, now);
                }
            }
        }
        return value;
    }","If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.",0,261
6146,"public List<Search> order(List<Search> unordered) {
        // Description above state that the original order should be preserved, except for the dependency constraint.
        // Yet we botch that guarantee by sorting the list...
        unordered.sort(Comparator.comparing(Search::getName));

        // No, this is not a fast algorithm...
        indexOnDocumentName(unordered);
        List<Search> ordered = new ArrayList<>(unordered.size());
        List<Search> moveOutwards = new ArrayList<>();
        for (Search search : unordered) {
            if (allDependenciesAlreadyEmitted(ordered, search)) {
                addOrdered(ordered, search, moveOutwards);
            }
            else {
                moveOutwards.add(search);
            }
        }

        // Any leftovers means we have search definitions with undefined inheritants.
        // This is warned about elsewhere.
        ordered.addAll(moveOutwards);

        documentNameToSearch.clear();
        return ordered;
    }",Reorders the given list of search definitions such that any supertype always preceed any subtype.,0,196
6670,"private static String getDatabaseProductName(JdbcTemplate jdbcTemplate) {
        return (String) jdbcTemplate.execute(new ConnectionCallback() {
            @Override
            public String doInConnection(Connection connection) throws SQLException, DataAccessException {
                DatabaseMetaData databaseMetaData = connection.getMetaData();
                if (databaseMetaData == null) {
                    throw new FlywayException(""Unable to read database metadata while it is null!"");
                }
                return databaseMetaData.getDatabaseProductName();
            }
        });
    }",Retrieves the name of the database product.,0,123
6597,"public static Registry<Master> createLeaderFileSystemMasterFromJournal() throws Exception {
    return createFileSystemMasterFromJournal(true);
  }","Creates a new leader  FileSystemMaster from journal along with its dependencies, and returns the master registry containing that master.",0,31
6881,"private static String getTransportType(Object value) {
        if (value == null) {
            return JsonConstants.VTYPE_NULL;
        } else if (value instanceof String) {
            return JsonConstants.VTYPE_STRING;
        } else if (value instanceof Connector) {
            return JsonConstants.VTYPE_CONNECTOR;
        } else if (value instanceof Boolean) {
            return JsonConstants.VTYPE_BOOLEAN;
        } else if (value instanceof Integer) {
            return JsonConstants.VTYPE_INTEGER;
        } else if (value instanceof Float) {
            return JsonConstants.VTYPE_FLOAT;
        } else if (value instanceof Double) {
            return JsonConstants.VTYPE_DOUBLE;
        } else if (value instanceof Long) {
            return JsonConstants.VTYPE_LONG;
        } else if (value instanceof List) {
            return JsonConstants.VTYPE_LIST;
        } else if (value instanceof Set) {
            return JsonConstants.VTYPE_SET;
        } else if (value instanceof String[]) {
            return JsonConstants.VTYPE_STRINGARRAY;
        } else if (value instanceof Object[]) {
            return JsonConstants.VTYPE_ARRAY;
        } else if (value instanceof Map) {
            return JsonConstants.VTYPE_MAP;
        } else if (value instanceof Enum<?>) {
            // Enum value is processed as a string
            return JsonConstants.VTYPE_STRING;
        }
        return null;
    }",Returns the transport type for the given value.,0,384
5775,"public static long getLong(PropertyKey key) {
    return CONF.getLong(key);
  }",Gets the long representation of the value for the given key.,0,29
6983,"public static HConnection createConnection(Configuration conf) throws IOException {
    return ConnectionManager.createConnectionInternal(conf);
  }",Create a new HConnection instance using the passed conf instance.,0,33
7569,"public static IgnitePredicate<Event> eventNodeId(@Nullable final UUID... nodeIds) {
        return isEmpty(nodeIds) ? F.<Event>alwaysFalse() : new IgnitePredicate<Event>() {
            // Don't set peer deploy aware as UUID is loaded by
            // system class loader.

            @Override public boolean apply(Event e) {
                assert e != null;

                return F.isAll(e.node().id(), in(nodeIds));
            }
        };
    }",Gets event predicate that returns  true only if event was produced on one of given nodes (specified by ids).,0,127
6285,"public static int validate(String... argv) throws InterruptedException {
    if (argv.length < 1) {
      printHelp(""Target not specified."");
      return -2;
    }
    String target = argv[0];
    String name = null;
    String[] args;
    int argsLength = 0;
    // Find all non-option command line arguments.
    while (argsLength < argv.length && !argv[argsLength].startsWith(""-"")) {
      argsLength++;
    }
    if (argsLength > 1) {
      name = argv[1];
      args = Arrays.copyOfRange(argv, 2, argv.length);
    } else {
      args = Arrays.copyOfRange(argv, 1, argv.length);
    }

    boolean success;
    switch (target) {
      case ""local"":
      case ""worker"":
      case ""master"":
        success = validateLocal(target, name, args);
        break;
      case ""all"":
        success = validateMasters(name, args);
        success = validateWorkers(name, args) && success;
        break;
      case ""workers"":
        success = validateWorkers(name, args);
        break;
      case ""masters"":
        success = validateMasters(name, args);
        break;
      default:
        printHelp(""Invalid target."");
        return -2;
    }

    return success ? 0 : -1;
  }",Validates environment.,0,416
6206,"static Iterator<IrcStatusEnum> supportedStatusSet()
    {
        return supportedStatusSet.iterator();
    }",Returns an iterator over all status instances supported by the irc provider.,0,27
7904,"private boolean isCached(Serializable collectionKey, CollectionPersister persister) {
		SessionImplementor session = context.getSession();
		if ( session.getCacheMode().isGetEnabled() && persister.hasCache() ) {
			CollectionRegionAccessStrategy cache = persister.getCacheAccessStrategy();
			CollectionCacheKey cacheKey = cache.generateCacheKey(
					collectionKey,
					persister,
					session.getFactory(),
					session.getTenantIdentifier()
			);
			return CacheHelper.fromSharedCache( session, cacheKey, cache ) != null;
		}
		return false;
	}",Get a batch of uninitialized collection keys for a given role,0,149
7593,"private int errorCode(GridException e, boolean checkIo) {
        if (X.hasCause(e, GridGgfsFileNotFoundException.class))
            return ERR_FILE_NOT_FOUND;
        else if (GridGgfsPathAlreadyExistsException.class.isInstance(e))
            return ERR_PATH_ALREADY_EXISTS;
        else if (GridGgfsDirectoryNotEmptyException.class.isInstance(e))
            return ERR_DIRECTORY_NOT_EMPTY;
        else if (GridGgfsParentNotDirectoryException.class.isInstance(e))
            return ERR_PARENT_NOT_DIRECTORY;
        else if (GridGgfsInvalidHdfsVersionException.class.isInstance(e))
            return ERR_INVALID_HDFS_VERSION;
        else if (X.hasCause(e, GridGgfsCorruptedFileException.class))
            return ERR_CORRUPTED_FILE;
            // This check should be the last.
        else if (GridGgfsException.class.isInstance(e)) {
            if (checkIo && e.hasCause(IOException.class)) {
                IOException e0 = e.getCause(IOException.class);

                return errorCode(GridGgfsHadoopUtils.cast(e0), false);
            }

            return ERR_GGFS_GENERIC;
        }

        return ERR_GENERIC;
    }",Gets error code based on exception class.,0,254
7514,"public String toString() {
        return ""found: "" + found + "", weight: "" + weight + "", time: "" + time + "", distance: "" + distance + "", edges: "" + edgeIds.size();
    }",Calculates the PathDetails for this Path.,0,69
5495,"private StoreScanner createScanner(List<StoreFile> filesToCompact, ScanType scanType)
      throws IOException {
    List<StoreFileScanner> scanners = StoreFileScanner.getScannersForStoreFiles(filesToCompact,
      false, true, false, false, HConstants.LATEST_TIMESTAMP);
    long ttl = HStore.determineTTLFromFamily(column);
    ScanInfo scanInfo = new ScanInfo(conf, column, ttl, 0, CellComparator.COMPARATOR);
    return new StoreScanner(scanInfo, scanType, scanners);
  }",Creates a store scanner.,0,126
7531,"public boolean createNew(TYPE item) {
        long newRow = database.insert(table.name,
                AbstractModel.ID_PROPERTY.name, item.getMergedValues());
        boolean result = newRow >= 0;
        if(result) {
            item.markSaved();
            item.setId(newRow);
        }
        return result;
    }",Creates the given item.,0,97
5361,"public static Object convert(Object value, Class<?> toType) {
        if (value == null) {
            value = """";
        } else if (toType.isAssignableFrom(value.getClass())) {
            return value;
        } else if (toType.equals(float.class) || toType.equals(Float.class)) {
            return new Float(getFloat(value));
        } else if (toType.equals(double.class) || toType.equals(Double.class)) {
            return new Double(getDouble(value));
        } else if (toType.equals(String.class)) {
            return getString(value);
        } else if (toType.equals(int.class) || toType.equals(Integer.class)) {
            return Integer.valueOf(getInt(value));
        } else if (toType.equals(char.class) || toType.equals(Character.class)) {
            return new Character(getChar(value));
        } else if (toType.equals(long.class) || toType.equals(Long.class)) {
            return Long.valueOf(getLong(value));
        } else if (toType.equals(boolean.class) || toType.equals(Boolean.class)) {
            return  Boolean.valueOf(getBoolean(value));
        } else if (toType.equals(java.util.Date.class)) {
            return getDate(value);
        } else if (toType.equals(Calendar.class)) {
            return getCalendar(value);
        } else if (toType.equals(Class.class)) {
            try {
                return Class.forName(value.toString());
            } catch (Exception e) {
                // don't do anything
            }
        }
        return value;
    }",Convert the given value object to an object of the given type,0,512
5979,"public DatabaseType getDatabaseType() {
        if (lexer instanceof H2Lexer) {
            return DatabaseType.H2;
        }
        if (lexer instanceof MySQLLexer) {
            return DatabaseType.MySQL;
        }
        if (lexer instanceof OracleLexer) {
            return DatabaseType.Oracle;
        }
        if (lexer instanceof SQLServerLexer) {
            return DatabaseType.SQLServer;
        }
        if (lexer instanceof PostgreSQLLexer) {
            return DatabaseType.PostgreSQL;
        }
        throw new UnsupportedOperationException(String.format(""Cannot support lexer class: %s"", lexer.getClass().getCanonicalName()));
    }",Get database type.,0,162
6840,"public Plan plan(Analysis analysis) {
        return process(analysis, null);
    }",dispatch plan creation based on analysis type,0,28
7204,"private static ArrayCreator makeArrayCreatorFor(TypeDescription componentType) {
        if (componentType.isPrimitive()) {
            if (componentType.represents(boolean.class)) {
                return ArrayCreator.ForPrimitiveType.BOOLEAN;
            } else if (componentType.represents(byte.class)) {
                return ArrayCreator.ForPrimitiveType.BYTE;
            } else if (componentType.represents(short.class)) {
                return ArrayCreator.ForPrimitiveType.SHORT;
            } else if (componentType.represents(char.class)) {
                return ArrayCreator.ForPrimitiveType.CHARACTER;
            } else if (componentType.represents(int.class)) {
                return ArrayCreator.ForPrimitiveType.INTEGER;
            } else if (componentType.represents(long.class)) {
                return ArrayCreator.ForPrimitiveType.LONG;
            } else if (componentType.represents(float.class)) {
                return ArrayCreator.ForPrimitiveType.FLOAT;
            } else if (componentType.represents(double.class)) {
                return ArrayCreator.ForPrimitiveType.DOUBLE;
            } else {
                throw new IllegalArgumentException(""Cannot create array of type "" + componentType);
            }
        } else {
            return new ArrayCreator.ForReferenceType(componentType);
        }
    }",Creates a suitable array creator for the given component type.,0,317
6864,"public CLIOutputWithRevisionResponse checkout(final CheckoutRequest request)
            throws IOException, SubversionException, UnauthorizedException {
        final File projectPath = new File(request.getProjectPath());
        final List<String> cliArgs = defaultArgs();

        // Flags
        addFlag(cliArgs, ""--ignore-externals"", request.isIgnoreExternals());

        // Options
        addOption(cliArgs, ""--depth"", request.getDepth());
        addOption(cliArgs, ""--revision"", request.getRevision());

        // Command Name
        cliArgs.add(""checkout"");

        // Command Arguments
        cliArgs.add(request.getUrl());
        cliArgs.add(projectPath.getAbsolutePath());

        CommandLineResult result = runCommand(null,
                                              cliArgs,
                                              projectPath,
                                              request.getPaths(),
                                              request.getUsername(),
                                              request.getPassword(),
                                              request.getUrl());

        return DtoFactory.getInstance().createDto(CLIOutputWithRevisionResponse.class)
                         .withCommand(result.getCommandLine().toString())
                         .withOutput(result.getStdout())
                         .withErrOutput(result.getStderr())
                         .withRevision(SubversionUtils.getCheckoutRevision(result.getStdout()));
    }","Perform an ""svn checkout"" based on the request.",0,302
6148,"public Date parseString(String dateString) throws ParseException {
        Matcher xep82WoMillisMatcher = xep80DateTimeWoMillisPattern.matcher(dateString);
        Matcher xep82Matcher = xep80DateTimePattern.matcher(dateString);

        if (xep82WoMillisMatcher.matches() || xep82Matcher.matches()) {
            String rfc822Date;
            // Convert the ISO 8601 time zone string to a RFC822 compatible format
            // since SimpleDateFormat supports ISO8601 only with Java7 or higher
            if (dateString.charAt(dateString.length() - 1) == 'Z') {
                rfc822Date = dateString.replace(""Z"", ""+0000"");
            } else {
                // If the time zone wasn't specified with 'Z', then it's in
                // ISO8601 format (i.e. '(+|-)HH:mm')
                // RFC822 needs a similar format just without the colon (i.e.
                // '(+|-)HHmm)'), so remove it
                int lastColon = dateString.lastIndexOf(':');
                rfc822Date = dateString.substring(0, lastColon) + dateString.substring(lastColon + 1);
            }

            if (xep82WoMillisMatcher.matches()) {
                synchronized (dateTimeFormatWoMillies) {
                    return dateTimeFormatWoMillies.parse(rfc822Date);
                }
            } else {
                // OF-898: Replace any number of millisecond-characters with at most three of them.
                rfc822Date = rfc822Date.replaceAll(""(\\.[0-9]{3})[0-9]*"", ""$1"");

                synchronized (dateTimeFormat) {
                    return dateTimeFormat.parse(rfc822Date);
                }
            }
        }
        throw new ParseException(""Date String could not be parsed"", 0);
    }",Tries to convert a given string to a Date object.,0,313
5511,"protected boolean isGrantTypeSupportedBy(final OAuthRegisteredService registeredService, final String type) {
        return OAuth20Utils.isAuthorizedGrantTypeForService(type, registeredService);
    }",Is grant type supported service.,0,39
7156,"public Set<Subject> getSubjects() {
        List<Subject> subjectList = getExtensions(Subject.class);

        Set<Subject> subjects = new HashSet<>(subjectList.size());
        subjects.addAll(subjectList);

        return subjects;
    }","Returns a set of all subjects in this Message, including the default message subject accessible from  #getSubject().",0,75
6561,"public int getPeersCount() throws IOException {
    return this.admin.listReplicationPeers().size();
  }",Get the number of slave clusters the local cluster has.,0,33
6447,"public String pop() {
        return lines.remove(lines.lastKey());
    }",Removes the highest line from the instance.,0,28
7319,"public float optFloat(int index, float defaultValue) {
        final Number val = this.optNumber(index, null);
        if (val == null) {
            return defaultValue;
        }
        final float floatValue = val.floatValue();
        // if (Float.isNaN(floatValue) || Float.isInfinite(floatValue)) {
        // return floatValue;
        // }
        return floatValue;
    }",Get the optional float value associated with an index.,0,95
7708,"public User getUserByName(String username) throws ApiException {
        ApiResponse<User> localVarResp = getUserByNameWithHttpInfo(username);
        return localVarResp.getData();
    }",Get user by user name,0,46
6716,"public boolean removeBody(Body body) {
        ExtensionElement removedElement = removeExtension(body);
        return removedElement != null;
    }",Removes the body from the message and returns true if the body was removed.,0,40
6461,"public int getAdaptiveSupport(int rendererIndex, int groupIndex, int[] trackIndices) {
      TrackGroup trackGroup = trackGroups[rendererIndex].get(groupIndex);
      if (!trackGroup.adaptive) {
        return RendererCapabilities.ADAPTIVE_NOT_SUPPORTED;
      }
      int handledTrackCount = 0;
      int adaptiveSupport = RendererCapabilities.ADAPTIVE_SEAMLESS;
      boolean multipleMimeTypes = false;
      String firstSampleMimeType = null;
      for (int i = 0; i < trackIndices.length; i++) {
        int trackIndex = trackIndices[i];
        String sampleMimeType = trackGroups[rendererIndex].get(groupIndex).getFormat(trackIndex)
            .sampleMimeType;
        if (handledTrackCount++ == 0) {
          firstSampleMimeType = sampleMimeType;
        } else {
          multipleMimeTypes |= !Util.areEqual(firstSampleMimeType, sampleMimeType);
        }
        adaptiveSupport = Math.min(adaptiveSupport, formatSupport[rendererIndex][groupIndex][i]
            & RendererCapabilities.ADAPTIVE_SUPPORT_MASK);
      }
      return multipleMimeTypes
          ? Math.min(adaptiveSupport, mixedMimeTypeAdaptiveSupport[rendererIndex])
          : adaptiveSupport;
    }",Gets the extent to which the renderer supports adaptation between specified tracks within a  TrackGroup.,0,294
6340,"public Color getTextHaloColor() throws MBFormatException {
        if (!paint.containsKey(""text-halo-color"")) {
            return new Color(0,0,0,0);
        } else {
            return parse.convertToColor(parse.optional(String.class, paint, ""text-halo-color"", ""#000000""));             
        }
    }","Defaults to rgba(0, 0, 0, 0).",0,93
6746,"public AnalysisProvider<CharFilterFactory> getCharFilterProvider(String charFilter, IndexSettings indexSettings) {
        final Map<String, Settings> tokenFilterSettings = indexSettings.getSettings().getGroups(""index.analysis.char_filter"");
        if (tokenFilterSettings.containsKey(charFilter)) {
            Settings currentSettings = tokenFilterSettings.get(charFilter);
            return getAnalysisProvider(""charfilter"", charFilters, charFilter, currentSettings.get(""type""));
        } else {
            return prebuiltAnalysis.charFilterFactories.get(charFilter);
        }
    }",Returns a registered  CharFilterFactory provider by  IndexSettings or a registered  CharFilterFactory provider by predefined name or null if the charFilter was not registered,0,132
7140,"public int migrate(final List<Migration> migrations) throws FlywayException {
        int migrationSuccessCount = 0;
        try {
            while (true) {
                final boolean firstRun = migrationSuccessCount == 0;
                MetaDataTableRow metaDataTableRow = (MetaDataTableRow) transactionTemplate.execute(new TransactionCallback() {
                    @Override
                    public MetaDataTableRow doInTransaction(TransactionStatus status) {
                        metaDataTable.lock();

                        SchemaVersion currentSchemaVersion = metaDataTable.getCurrentSchemaVersion();
                        if (firstRun) {
                            LOG.info(""Current schema version: "" + currentSchemaVersion);
                        }

                        SchemaVersion latestAvailableMigrationVersion = migrations.get(0).getVersion();
                        boolean isFutureMigration = latestAvailableMigrationVersion.compareTo(currentSchemaVersion) < 0;
                        if (isFutureMigration) {
                            LOG.warn(""Database version ("" + currentSchemaVersion + "") is newer than the latest available migration (""
                                    + latestAvailableMigrationVersion + "") !"");
                        }

                        MigrationState currentSchemaState = metaDataTable.getCurrentSchemaState();
                        if (currentSchemaState == MigrationState.FAILED) {
                            if (isFutureMigration && ignoreFailedFutureMigration) {
                                LOG.warn(""Detected failed migration to version "" + currentSchemaVersion + "" !"");
                            } else {
                                throw new MigrationException(currentSchemaVersion, false);
                            }
                        }

                        if (isFutureMigration) {
                            return null;
                        }

                        Migration migration = getNextMigration(migrations, currentSchemaVersion);
                        if (migration == null) {
                            // No further migrations available
                            return null;
                        }

                        return applyMigration(migration);
                    }
                });

                if (metaDataTableRow == null) {
                    // No further migrations available
                    break;
                }

                if (MigrationState.FAILED == metaDataTableRow.getState()) {
                    throw new MigrationException(metaDataTableRow.getVersion(), false);
                }

                migrationSuccessCount++;
            }
        } catch (TransactionException e) {
            throw new FlywayException(""Migration failed !"", e);
        }

        logSummary(migrationSuccessCount);
        return migrationSuccessCount;
    }",Starts the actual migration.,0,535
6001,"public static String getRoundedValue(double value) {
    if (Double.isNaN(value) || Double.isInfinite(value)) {
      if (Double.isNaN(value)) {
        return Double.toString(Double.NaN);
      }
      if (value > 0) {
        return Double.toString(Double.POSITIVE_INFINITY);
      } else {
        return Double.toString(Double.NEGATIVE_INFINITY);
      }
    }
    StringBuffer decimalFormatBuffer = new StringBuffer(TWO_DECIMALS_FORMAT);
    double compareValue = 0.1;
    while (value > 0 && value < compareValue && !decimalFormatBuffer.toString().equals(MAX_DECIMALS_FORMAT)) {
      decimalFormatBuffer.append(DECIMALS_FORMAT_TOKEN);
      compareValue = compareValue * 0.1;
    }
    DecimalFormat decimalFormat = new DecimalFormat(decimalFormatBuffer.toString());
    return decimalFormat.format(value);
  }","Get rounded double value, according to the value of the double.",0,240
6498,"public static CompactionDescriptor getCompaction(Cell kv) throws IOException {
    return isCompactionMarker(kv)? CompactionDescriptor.parseFrom(CellUtil.cloneValue(kv)): null;
  }",Deserialized and returns a CompactionDescriptor is the KeyValue contains one.,0,47
6250,"public int allocatePage() throws SQLException {
        if (freePageCount == 0) {
            if (pageCount * pageSize >= fileLength) {
                increaseFileSize(INCREMENT_PAGES);
            }
        }
        if (lastUsedPage < pageCount) {
            return ++lastUsedPage;
        }
        if (freeListRootPageId == 0) {
            Message.throwInternalError();
        }
        PageFreeList free = (PageFreeList) cache.find(freeListRootPageId);
        if (free == null) {
            free = new PageFreeList(this, freeListRootPageId, 0);
            free.read();
        }
        int id = free.allocate();
        freePageCount--;
        return id;
    }",Allocate a page.,0,200
7611,"public byte[] encrypt(final byte[] plaintext, final byte[] additionalData)
      throws GeneralSecurityException {
    ByteBuffer ciphertext = ByteBuffer.allocate(
        nonceSizeInBytes() + plaintext.length + MAC_TAG_SIZE_IN_BYTES);
    encrypt(ciphertext, plaintext, additionalData);
    return ciphertext.array();
  }",Encrypts the  plaintext with Poly1305 authentication based on  additionalData.,0,88
6649,"public double getDouble(long offset) {
        return Native.getDouble(peer + offset);
    }",Indirect the native pointer as a pointer to double.,0,31
7114,"private String parsePath(Filter filter) {
        if (filter == null){
            throw new IllegalArgumentException(""The provided filter is null"");
        }
        //Workaround to deal with the case of Filter.INCLUDE 
        //being saved when creating the store
        if (filter instanceof IncludeFilter){
            if (LOGGER.isLoggable(Level.FINE)){
                LOGGER.fine(""Using DEFAULT Path"");
            }
            return rasterManager.parent.defaultPath;
        }
        if (!(filter instanceof IsEqualsToImpl)){
            throw new IllegalArgumentException(""The provided filter should be an \""equals to\"" filter: \"""" + PATH_KEY + ""=value\"""");
        }
        
        IsEqualsToImpl pathEqualTo = (IsEqualsToImpl) filter;
        AttributeExpressionImpl pathKey = (AttributeExpressionImpl) pathEqualTo.getExpression1();
        String pathK = (String) pathKey.getPropertyName();
        if (!pathK.equalsIgnoreCase(PATH_KEY)){
            throw new IllegalArgumentException(""Invalid filter specified. It should be like this: \"""" + PATH_KEY + ""=value\"" whilst the first expression is "" + pathK);
        }
        
        Literal pathValue = (Literal) pathEqualTo.getExpression2();
        String pathV = (String) pathValue.getValue();

        return pathV;
    }",Extract a PATH from the specified filter.,0,296
7661,"static String boxClassName(Type type) {
        if (!(type instanceof Class)) {
            return type.toString();
        }
        Primitive primitive = Primitive.of(type);
        if (primitive != null) {
            return primitive.boxClass.getSimpleName();
        } else {
            return className(type);
        }
    }","Boxes a type, if it is primitive, and returns the type name.",0,105
5674,"public SessionWindows grace(final Duration afterWindowEnd) throws IllegalArgumentException {
        ApiUtils.validateMillisecondDuration(afterWindowEnd, ""afterWindowEnd"");
        if (afterWindowEnd.toMillis() < 0) {
            throw new IllegalArgumentException(""Grace period must not be negative."");
        }

        return new SessionWindows(
            gapMs,
            maintainDurationMs,
            afterWindowEnd
        );
    }",Reject late events that arrive more than  afterWindowEnd after the end of its window.,0,93
6339,"public static String getRedirect(String urlstring) throws IOException {
    	return getRedirect(urlstring, true);
    }",get a redirect for an url: this method shall be called if it is expected that a url is redirected to another url.,0,34
6628,"public ClientResponse testPost(String url, Object entity) throws Exception {
        return testPostWithHeaders(url, entity, null);
    }",Performs a POST using the specified url and entity body.,0,40
5750,"public int getJDBCMajorVersion() {
        debugCodeCall(""getJDBCMajorVersion"");
        int majorVersion = 3;
        //## Java 1.6 begin ##
        majorVersion = 4;
        //## Java 1.6 end ##
        return majorVersion;
    }",Gets the major version of the supported JDBC API.,0,52
5699,"public static InstallState getInstallState() {
        // install wizard will always run if environment specified
        if (!Boolean.getBoolean(""jenkins.install.runSetupWizard"")) {
            if (Functions.getIsUnitTest()) {
                return InstallState.TEST;
            }
            
            if (Boolean.getBoolean(""hudson.Main.development"")) {
                return InstallState.DEVELOPMENT;
            }
        }

        VersionNumber lastRunVersion = new VersionNumber(getLastExecVersion());

        // Neither the top level config or the lastExecVersionFile have a version
        // stored in them, which means it's a new install.
        if (lastRunVersion.compareTo(NEW_INSTALL_VERSION) == 0) {
            // Edge case: used Jenkins 1 but did not save the system config page,
            // the version is not persisted and returns 1.0, so try to check if
            // they actually did anything
            if (!Jenkins.getInstance().getItemMap().isEmpty()) {
                return InstallState.UPGRADE;
            }
            return InstallState.NEW;
        }

        // We have a last version.

        VersionNumber currentRunVersion = new VersionNumber(getCurrentExecVersion());
        if (lastRunVersion.isOlderThan(currentRunVersion)) {
            return InstallState.UPGRADE;
        } else if (lastRunVersion.isNewerThan(currentRunVersion)) {
            return InstallState.DOWNGRADE;
        } else {
            // Last running version was the same as ""this"" running version.
            return InstallState.RESTART;
        }
    }",Get the current installation state.,0,279
7121,"public List<WorkerSlot> getAvailableSlots(SupervisorDetails supervisor) {
        if(whiteListedHosts!=null && !whiteListedHosts.isEmpty() && !whiteListedHosts.contains(supervisor.host)) return new ArrayList();
        List<Integer> ports = this.getAvailablePorts(supervisor);
        List<WorkerSlot> slots = new ArrayList<WorkerSlot>(ports.size());

        for (Integer port : ports) {
            slots.add(new WorkerSlot(supervisor.getId(), port));
        }

        return slots;
    }",Return all the available slots on this supervisor.,0,150
6828,"public ProtocolOutput getProtocolOutput(Text url, CrawlDatum datum) {
    String urlString = url.toString();
    try {
      URL u = new URL(urlString);
  
      int redirects = 0;
  
      while (true) {
        FileResponse response;
        response = new FileResponse(u, datum, this, getConf());   // make a request
  
        int code = response.getCode();
  
        if (code == 200) {                          // got a good response
          return new ProtocolOutput(response.toContent());              // return it
  
        } else if (code == 304) {                   // got not modified
          return new ProtocolOutput(response.toContent(), ProtocolStatus.STATUS_NOTMODIFIED);

        } else if (code == 401) {                   // access denied / no read permissions
          return new ProtocolOutput(response.toContent(), new ProtocolStatus(ProtocolStatus.ACCESS_DENIED));

        } else if (code == 404) {                   // no such file
          return new ProtocolOutput(response.toContent(), ProtocolStatus.STATUS_NOTFOUND);

        } else if (code >= 300 && code < 400) {     // handle redirect
          if (redirects == MAX_REDIRECTS)
            throw new FileException(""Too many redirects: "" + url);
          u = new URL(response.getHeader(""Location""));
          redirects++;                
          if (LOG.isTraceEnabled()) {
            LOG.trace(""redirect to "" + u); 
          }
  
        } else {                                    // convert to exception
          throw new FileError(code);
        }
      } 
    } catch (Exception e) {
      e.printStackTrace();
      return new ProtocolOutput(null, new ProtocolStatus(e));
    }
  }",Creates a  FileResponse object corresponding to the url and return a  ProtocolOutput object as per the content received,0,480
6766,"private static boolean isSingleLineElse(DetailAST literalElse) {
        final DetailAST block = literalElse.getFirstChild();
        return literalElse.getLineNo() == block.getLineNo();
    }","Checks if current else statement is single-line statement, e.g.:   else doSomeStuff();",0,53
5352,"public boolean isSortable() {
        return getToolbarActions().contains(DefaultListGridActions.REORDER) || 
                Type.MAP.toString().toLowerCase().equals(getListGridType());
    }",This grid is sortable if there is a reorder action defined in the toolbar.,0,52
5698,"public AuthenticationBuilder setSuccesses(final Map<String, HandlerResult> successes) {
        Assert.notNull(successes, ""Successes cannot be null"");
        this.successes.clear();
        return addSuccesses(successes);
    }",Sets the authentication handler success map.,0,57
7633,"public static Observable<Boolean> observeInternetConnectivity() {
    return observeInternetConnectivity(DEFAULT_INITIAL_PING_INTERVAL_IN_MS,
        DEFAULT_PING_INTERVAL_IN_MS, DEFAULT_PING_HOST, DEFAULT_PING_PORT,
        DEFAULT_PING_TIMEOUT_IN_MS, new DefaultErrorHandler());
  }",Observes connectivity with the Internet with default settings.,0,48
6041,"protected InputFilter getReturnFilter() {
		return new CarriageReturnFilter();
	}",Disallows carriage returns from user entry,0,23
5521,"public boolean prepareDelete(String table, String codes[], String condition[])
    {
        return prepareDelete(null, table, codes, condition);
    }","Prepare a delete statement by giving it the tablename, fields and conditions to work with.",0,49
7778,"public String getSchemaType(Schema schema) {
        if (schema instanceof ComposedSchema) { // composed schema
            ComposedSchema cs = (ComposedSchema) schema;
            List<Schema> schemas = ModelUtils.getInterfaces(cs);
            if (cs.getAllOf() != null) {
                for (Schema s : cs.getAllOf()) {
                    if (s != null) {
                        //schema = s;
                    }
                    //LOGGER.info(""ALL OF SCHEMA: {}"", s);
                }

                LOGGER.info(""Composed schema not yet supported: {}"", cs);
                // get the model (allOf)
                return getAlias(""UNKNOWN_COMPOSED_SCHMEA"");
            } else if (cs.getAnyOf() != null) { // anyOf
                List<String> names = new ArrayList<String>();
                for (Schema s : schemas) {
                    if (StringUtils.isNotBlank(s.get$ref())) { // reference to another definition/schema
                        String schemaName = ModelUtils.getSimpleRef(s.get$ref());
                        if (StringUtils.isNotEmpty(schemaName)) {
                            names.add(getAlias(schemaName));
                        } else {
                            LOGGER.warn(""Error obtaining the datatype from ref:"" + schema.get$ref() + "". Default to 'object'"");
                            return ""object"";
                        }
                    } else {
                        // primitive type or model
                        names.add(getAlias(getPrimitiveType(s)));
                    }
                    return ""anyOf<"" + String.join("","", names) + "">"";
                }
            } else if (cs.getOneOf() != null) { // oneOf
                List<String> names = new ArrayList<String>();
                for (Schema s : schemas) {
                    if (StringUtils.isNotBlank(s.get$ref())) { // reference to another definition/schema
                        String schemaName = ModelUtils.getSimpleRef(s.get$ref());
                        if (StringUtils.isNotEmpty(schemaName)) {
                            names.add(getAlias(schemaName));
                        } else {
                            LOGGER.warn(""Error obtaining the datatype from ref:"" + schema.get$ref() + "". Default to 'object'"");
                            return ""object"";
                        }
                    } else {
                        // primitive type or model
                        names.add(getAlias(getPrimitiveType(s)));
                    }
                    return ""oneOf<"" + String.join("","", names) + "">"";
                }
            }
        }

        if (StringUtils.isNotBlank(schema.get$ref())) { // reference to another definition/schema
            // get the schema/model name from $ref
            String schemaName = ModelUtils.getSimpleRef(schema.get$ref());
            if (StringUtils.isNotEmpty(schemaName)) {
                return getAlias(schemaName);
            } else {
                LOGGER.warn(""Error obtaining the datatype from ref:"" + schema.get$ref() + "". Default to 'object'"");
                return ""object"";
            }
        } else { // primitive type or model
            return getAlias(getPrimitiveType(schema));
        }
    }",returns the OpenAPI type for the property.,0,746
7145,"public String toString() {
        Object value = getValue();

        if (LLVMManagedPointer.isInstance(value)) {
            final LLVMManagedPointer managedPointer = LLVMManagedPointer.cast(value);
            final Object target = managedPointer.getObject();

            String targetString;
            if (target instanceof LLVMGlobal) {
                final LLVMGlobal global = (LLVMGlobal) target;
                targetString = ""LLVM global "" + global.getName();

            } else if (target instanceof LLVMFunctionDescriptor) {
                final LLVMFunctionDescriptor function = (LLVMFunctionDescriptor) target;
                targetString = ""LLVM function "" + function.getName();

            }  else {
                targetString = ""<managed pointer>"";
            }

            final long offset = managedPointer.getOffset();
            if (offset != 0L) {
                targetString = String.format(""%s + %d byte%s"", targetString, offset, offset == 1L ? """" : ""s"");
            }

            value = targetString;
        }

        return Objects.toString(value);
    }",A representation of the current value of the referenced variable for the debugger to show.,0,299
7483,"private IgniteFuture<GridRestResponse> execute(UUID destId, String cacheName, Callable<GridRestResponse> c) {
        boolean locExec = destId == null || destId.equals(ctx.localNodeId()) || replicatedCacheAvailable(cacheName);

        if (locExec)
            return ctx.closure().callLocalSafe(c, false);
        else {
            if (ctx.discovery().node(destId) == null)
                return new GridFinishedFutureEx<>(new IgniteCheckedException(""Destination node ID has left the grid (retry "" +
                    ""the query): "" + destId));

            try {
                IgniteCompute comp = ctx.grid().compute(ctx.grid().forNodeId(destId)).withNoFailover().enableAsync();

                comp.call(c);

                return comp.future();
            }
            catch (IgniteCheckedException e) {
                // Should not be thrown since uses asynchronous execution.
                return new GridFinishedFutureEx<>(e);
            }
        }
    }",Executes given closure either locally or on specified node.,0,251
7389,"public static String writeMultipleClientConfigAvro(Map<String, Properties> mapStoreToProps) {
        // FIXME: This sucks. We shouldn't be manually manipulating json...
        String avroConfig = new String();
        Boolean firstStore = true;
        for(String storeName: mapStoreToProps.keySet()) {
            if(firstStore) {
                firstStore = false;
            } else {
                avroConfig = avroConfig + "",\n"";
            }
            Properties props = mapStoreToProps.get(storeName);
            avroConfig = avroConfig + ""\t\"""" + storeName + ""\"": ""
                         + writeSingleClientConfigAvro(props);

        }
        return ""{\n"" + avroConfig + ""\n}"";
    }",Assembles an avro format string that contains multiple fat client configs from map of store to properties,0,185
5435,"public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {
    // TODO: change these all to use readableToIndexed/bytes instead (e.g. for unicode collation)
    if (field.hasDocValues() && !field.indexed()) {
      return DocValuesRangeQuery.newBytesRefRange(
          field.getName(),
          part1 == null ? null : new BytesRef(toInternal(part1)),
          part2 == null ? null : new BytesRef(toInternal(part2)),
          minInclusive, maxInclusive);
    } else {
      MultiTermQuery rangeQuery = TermRangeQuery.newStringRange(
            field.getName(),
            part1 == null ? null : toInternal(part1),
            part2 == null ? null : toInternal(part2),
            minInclusive, maxInclusive);
      rangeQuery.setRewriteMethod(getRewriteMethod(parser, field));
      return rangeQuery;
    }
  }",Returns a Query instance for doing range searches on this field type.,0,240
6499,"public Collection<GroovyRunner> values() {
        List<GroovyRunner> values = cachedValues;
        if (values == null) {
            Map<String, GroovyRunner> map = getMap();
            // racy, multiple threads may set cachedValues but rather have that than take a write lock
            readLock.lock();
            try {
                if ((values = cachedValues) == null) {
                    cachedValues = values = Collections.unmodifiableList(new ArrayList<>(map.values()));
                }
            } finally {
                readLock.unlock();
            }
        }
        return values;
    }",Returns a collection of all registered runners.,0,155
7458,"public int getFilterPriorityToApply() {
        return filterPriority;
    }",The level of priority to use for applying filters.,0,19
7125,"private IndexDeletionPolicyWrapper initDeletionPolicy(IndexDeletionPolicyWrapper delPolicyWrapper) {
    if (delPolicyWrapper != null) {
      return delPolicyWrapper;
    }
    
    final PluginInfo info = solrConfig.getPluginInfo(IndexDeletionPolicy.class.getName());
    final IndexDeletionPolicy delPolicy;
    if (info != null) {
      delPolicy = createInstance(info.className, IndexDeletionPolicy.class, ""Deletion Policy for SOLR"", this, getResourceLoader());
      if (delPolicy instanceof NamedListInitializedPlugin) {
        ((NamedListInitializedPlugin) delPolicy).init(info.initArgs);
      }
    } else {
      delPolicy = new SolrDeletionPolicy();
    }
    return new IndexDeletionPolicyWrapper(delPolicy);
  }",Returns a Map of name vs SolrInfoMBean objects.,0,183
5677,"public EnrollmentResponse simpleEnrollPoP(boolean reEnroll, final PKCS10CertificationRequestBuilder builder, final ContentSigner contentSigner, ESTAuth auth)
        throws IOException
    {
        if (!clientProvider.isTrusted())
        {
            throw new IllegalStateException(""No trust anchors."");
        }

        ESTResponse resp = null;
        try
        {
            final ByteArrayOutputStream bos = new ByteArrayOutputStream();
            URL url = new URL(server + (reEnroll ? SIMPLE_REENROLL : SIMPLE_ENROLL));
            ESTClient client = clientProvider.makeClient();

            //
            // Connect supplying a source listener.
            // The source listener is responsible for completing the PCS10 Cert request and encoding it.
            //
            ESTRequestBuilder reqBldr = new ESTRequestBuilder(""POST"", url, new ESTSourceConnectionListener()
            {
                public ESTRequest onConnection(Source source, ESTRequest request)
                    throws IOException
                {
                    //
                    // Add challenge password from tls unique
                    //

                    if (source instanceof TLSUniqueProvider)
                    {
                        bos.reset();
                        byte[] tlsUnique = ((TLSUniqueProvider)source).getTLSUnique();

                        builder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_challengePassword, new DERPrintableString(Base64.toBase64String(tlsUnique)));
                        bos.write(annotateRequest(builder.build(contentSigner).getEncoded()).getBytes());
                        bos.flush();

                        ESTRequestBuilder reqBuilder = new ESTRequestBuilder(request);

                        reqBuilder.setHeader(""Content-Length"", Long.toString(bos.size()));

                        return reqBuilder.build();
                    }
                    else
                    {
                        throw new IOException(""Source does not supply TLS unique."");
                    }
                }
            })
            .withClientRequestIdempotentInputSource(new ESTClientRequestIdempotentInputSource()
            {
                public void ready(OutputStream os)
                    throws IOException
                {
                    os.write(bos.toByteArray());
                    os.flush();
                }
            });

            reqBldr.addHeader(""Content-Type"", ""application/pkcs10"");
            reqBldr.addHeader(""Content-Transfer-Encoding"", ""base64"");

            if (auth != null)
            {
                auth.applyAuth(reqBldr);
            }

            resp = client.doRequest(reqBldr.build());
            return handleEnrollResponse(resp);

        }
        catch (Throwable t)
        {
            if (t instanceof ESTException)
            {
                throw (ESTException)t;
            }
            else
            {
                throw new ESTException(t.getMessage(), t);
            }
        }
        finally
        {
            if (resp != null)
            {
                resp.close();
            }
        }

    }",Implements Enroll with PoP.,0,666
5912,"public Vector2 lerp (Vector2 target, float alpha) {
		final float invAlpha = 1.0f - alpha;
		this.x = (x * invAlpha) + (target.x * alpha);
		this.y = (y * invAlpha) + (target.y * alpha);
		return this;
	}","Linearly interpolates between this vector and the target vector by alpha which is in the range [0,1].",0,100
5884,"public NodeClassIterable inputs() {
        if (USE_GENERATED_NODES) {
            return inputsV2();
        }
        return getNodeClass().getInputIterable(this);
    }",Returns an  NodeClassIterable iterable which can be used to traverse all non-null input edges of this node.,0,46
7291,"public List<String> getCopySources(String destField) {
    SchemaField f = getField(destField);
    if (!isCopyFieldTarget(f)) {
      return Collections.emptyList();
    }
    List<String> fieldNames = new ArrayList<String>();
    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {
      for (CopyField copyField : cfs.getValue()) {
        if (copyField.getDestination().getName().equals(destField)) {
          fieldNames.add(copyField.getSource().getName());
        }
      }
    }
    for (DynamicCopy dynamicCopy : dynamicCopyFields) {
      if (dynamicCopy.getDestFieldName().equals(destField)) {
        fieldNames.add(dynamicCopy.getRegex());
      }
    }
    return fieldNames;
  }","Get all copy fields, both the static and the dynamic ones.",0,233
6829,"static Stream<Short> ofAll(short[] array) {
        Objects.requireNonNull(array, ""array is null"");
        return Stream.ofAll(() -> new Iterator.Impl<Short>() {
            int i = 0;

            @Override
            public boolean hsNext() {
                return i < array.length;
            }

            @Override
            public Short getNext() {
                return array[i++];
            }
        });
    }",Creates a Stream based on the elements of a short array.,0,135
6643,"public String getStringColumn(String column)
    {
        return getStringColumnCanonicalized(canonicalize(column));
    }",Return the String value of column.,0,29
5919,"protected InputStream getStreamFromFile(String imageUri, Object extra) throws IOException {
		String filePath = Scheme.FILE.crop(imageUri);
		return new ContentLengthInputStream(new BufferedInputStream(new FileInputStream(filePath), BUFFER_SIZE),
											new File(filePath).length());
	}",Retrieves  InputStream of image by URI (image is located on the local file system or SD card).,0,79
5552,"private static boolean isPotentialXml(String postData) {
        try {
            SAXParserFactory spf = SAXParserFactory.newInstance();
            SAXParser saxParser = spf.newSAXParser();
            XMLReader xmlReader = saxParser.getXMLReader();
            ErrorDetectionHandler detectionHandler =
                    new ErrorDetectionHandler();
            xmlReader.setContentHandler(detectionHandler);
            xmlReader.setErrorHandler(detectionHandler);
            xmlReader.parse(new InputSource(new StringReader(postData)));
            return !detectionHandler.isErrorDetected();
        } catch (ParserConfigurationException | SAXException | IOException e) {
            return false;
        }
    }",Tries parsing to see if content is xml,0,158
5394,"public static boolean inRegressionTestMode() {
	boolean inRegressionMode = true; // default
	try {
	    //get the ""pmd.regress"" System property
	    String property = System.getProperty(""pmd.regress"");
	    if (property != null) {
		inRegressionMode = Boolean.parseBoolean(property);
	    }
	} catch (IllegalArgumentException e) {
	} catch (NullPointerException e) {
	}
	
        return inRegressionMode;
    }",Checks whether we are testing for regression problems only.,0,119
7678,"public static DateTimeFormatter basicTime() {
        return Constants.bt;
    }","Returns a basic formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, three digit millis, and time zone offset (HHmmss.SSSZ).",0,23
6380,"public boolean removeInterceptHandler(InterceptHandler interceptHandler) {
        if (!m_initialized) {
            throw new IllegalStateException(""Can't deregister interceptors from a server that is not yet started"");
        }
        return m_processor.removeInterceptHandler(interceptHandler);
    }",SPI method used by Broker embedded applications to remove intercept handlers.,0,53
6449,"public static String toString(Date date, String pattern) {
        Instant instant = new java.util.Date((date.getTime())).toInstant();
        return LocalDateTime.ofInstant(instant, ZoneId.systemDefault()).format(DateTimeFormatter.ofPattern(pattern));
    }",format date to string,0,80
5761,"public FileInStream getInStream(ReadType readType) throws IOException {
    if (readType == null) {
      throw new IOException(""ReadType can not be null."");
    }

    if (!isComplete()) {
      throw new IOException(""The file "" + this + "" is not complete."");
    }

    if (isDirectory()) {
      throw new IOException(""Cannot open a directory for reading."");
    }

    FileInfo info = getUnCachedFileStatus();
    TachyonURI uri = new TachyonURI(info.getPath());
    ClientOptions.Builder optionsBuilder = new ClientOptions.Builder(mTachyonConf);
    optionsBuilder.setBlockSize(info.getBlockSizeByte());
    if (readType.isCache()) {
      optionsBuilder.setCacheType(CacheType.CACHE);
    } else {
      optionsBuilder.setCacheType(CacheType.NO_CACHE);
    }
    return mTFS.getInStream(mTFS.open(uri), optionsBuilder.build());
  }",Return the  InStream of this file based on the specified read type.,0,249
6674,"public Type getTypeFromString(String typeStr) {
    validateTypeStr(typeStr);
    if (isPrimitiveType(typeStr)) {
      return getPrimitiveType(typeStr);
    }
    Name typeName = getName(typeStr);
    ClassSymbol typeSymbol = getSymtab().classes.get(typeName);
    if (typeSymbol == null) {
      JavaCompiler compiler = JavaCompiler.instance(context);
      Symbol sym = compiler.resolveIdent(typeStr);
      if (!(sym instanceof ClassSymbol)) {
        return null;
      }
      typeSymbol = (ClassSymbol) sym;
    }
    Type type = typeSymbol.asType();
    try {
      // Throws CompletionFailure if the source/class file for this type is not available.
      // This is hacky but the best way I can think of to handle this case.
      if (type.isErroneous()) {
        return null;
      }
    } catch (CompletionFailure failure) {
      return null;
    }
    return type;
  }","Given the string representation of a simple (non-array, non-generic) type, return the matching Type.",0,238
5999,"public static byte[] normalize(String string) {
        JSONByteArrayTarget target = new JSONByteArrayTarget();
        parse(string, target);
        return target.getResult();
    }",Normalizes textual JSON representation.,0,54
5796,"private List<String> getExcludeAutoConfigurationsProperty() {
		if (getEnvironment() instanceof ConfigurableEnvironment) {
			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(
					this.environment, ""spring.autoconfigure."");
			Map<String, Object> properties = resolver.getSubProperties(""exclude"");
			if (properties.isEmpty()) {
				return Collections.emptyList();
			}
			List<String> excludes = new ArrayList<String>();
			for (Map.Entry<String, Object> entry : properties.entrySet()) {
				String name = entry.getKey();
				Object value = entry.getValue();
				if (name.isEmpty() || name.startsWith(""["") && value != null) {
					excludes.addAll(
							StringUtils.commaDelimitedListToSet(String.valueOf(value)));
				}
			}
			return excludes;
		}
		RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(getEnvironment(),
				""spring.autoconfigure."");
		String[] exclude = resolver.getProperty(""exclude"", String[].class);
		return (Arrays.asList(exclude == null ? new String[0] : exclude));
	}",Return any exclusions that limit the candidate configurations.,0,330
6718,"public BuildConfiguration build() throws IOException {
      // Validates the parameters.
      List<String> missingFields = new ArrayList<>();
      if (baseImageConfiguration == null) {
        missingFields.add(""base image configuration"");
      }
      if (targetImageConfiguration == null) {
        missingFields.add(""target image configuration"");
      }
      if (baseImageLayersCacheDirectory == null) {
        missingFields.add(""base image layers cache directory"");
      }
      if (applicationLayersCacheDirectory == null) {
        missingFields.add(""application layers cache directory"");
      }

      switch (missingFields.size()) {
        case 0: // No errors
          Preconditions.checkNotNull(baseImageConfiguration);
          if (!baseImageConfiguration.getImage().isTagDigest()
              && !baseImageConfiguration.getImage().isScratch()) {
            eventHandlers.dispatch(
                LogEvent.warn(
                    ""Base image '""
                        + baseImageConfiguration.getImage()
                        + ""' does not use a specific image digest - build may not be reproducible""));
          }

          return new BuildConfiguration(
              baseImageConfiguration,
              Preconditions.checkNotNull(targetImageConfiguration),
              additionalTargetImageTags,
              containerConfiguration,
              Cache.withDirectory(Preconditions.checkNotNull(baseImageLayersCacheDirectory)),
              Cache.withDirectory(Preconditions.checkNotNull(applicationLayersCacheDirectory)),
              targetFormat,
              offline,
              layerConfigurations,
              toolName,
              eventHandlers,
              // TODO: try setting global User-Agent: here
              new FailoverHttpClient(
                  allowInsecureRegistries,
                  JibSystemProperties.sendCredentialsOverHttp(),
                  eventHandlers::dispatch),
              executorService == null ? Executors.newCachedThreadPool() : executorService,
              executorService == null, // shutDownExecutorService
              alwaysCacheBaseImage);

        case 1:
          throw new IllegalStateException(missingFields.get(0) + "" is required but not set"");

        case 2:
          throw new IllegalStateException(
              missingFields.get(0) + "" and "" + missingFields.get(1) + "" are required but not set"");

        default:
          missingFields.add(""and "" + missingFields.remove(missingFields.size() - 1));
          StringJoiner errorMessage = new StringJoiner("", "", """", "" are required but not set"");
          for (String missingField : missingFields) {
            errorMessage.add(missingField);
          }
          throw new IllegalStateException(errorMessage.toString());
      }
    }",Builds a new  BuildConfiguration using the parameters passed into the builder.,0,576
6095,"private boolean removeOrMaterializeIf(SimplifierTool tool) {
        if (trueSuccessor().next() instanceof AbstractEndNode && falseSuccessor().next() instanceof AbstractEndNode) {
            AbstractEndNode trueEnd = (AbstractEndNode) trueSuccessor().next();
            AbstractEndNode falseEnd = (AbstractEndNode) falseSuccessor().next();
            MergeNode merge = trueEnd.merge();
            if (merge == falseEnd.merge() && merge.forwardEndCount() == 2 && trueSuccessor().anchored().isEmpty() && falseSuccessor().anchored().isEmpty()) {
                Iterator<PhiNode> phis = merge.phis().iterator();
                if (!phis.hasNext()) {
                    // empty if construct with no phis: remove it
                    removeEmptyIf(tool);
                    return true;
                } else {
                    PhiNode singlePhi = phis.next();
                    if (!phis.hasNext()) {
                        // one phi at the merge of an otherwise empty if construct: try to convert
                        // into a MaterializeNode
                        boolean inverted = trueEnd == merge.forwardEndAt(1);
                        ValueNode trueValue = singlePhi.valueAt(inverted ? 1 : 0);
                        ValueNode falseValue = singlePhi.valueAt(inverted ? 0 : 1);
                        if (trueValue.kind() != falseValue.kind()) {
                            return false;
                        }
                        if (trueValue.kind() != Kind.Int && trueValue.kind() != Kind.Long) {
                            return false;
                        }
                        ConditionalNode conditional = canonicalizeConditionalCascade(trueValue, falseValue);
                        if (conditional != null) {
                            graph().replaceFloating(singlePhi, conditional);
                            removeEmptyIf(tool);
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }",Tries to remove an empty if construct or replace an if construct with a materialization.,0,478
6013,"public Class parseClass(InputStream in) throws CompilationFailedException {
        return parseClass(in, generateScriptName());
    }",Parses the given character stream into a Java class capable of being run,0,34
6949,"public TaskCancelResult cancelTask() {

		final ExecutionState previousState = this.executionState.get();

		if(previousState == ExecutionState.CANCELED) {
			return new TaskCancelResult(getID(), AbstractTaskResult.ReturnCode.SUCCESS);
		}
		
		if (updateExecutionState(ExecutionState.CANCELING) != ExecutionState.CANCELING) {

			if (this.groupVertex.getStageNumber() != this.executionGraph.getIndexOfCurrentExecutionStage()) {
				// Set to canceled directly
				updateExecutionState(ExecutionState.CANCELED, null);
				return new TaskCancelResult(getID(), AbstractTaskResult.ReturnCode.SUCCESS);
			}

			if (previousState == ExecutionState.FINISHED || previousState == ExecutionState.FAILED) {
				// Ignore this call
				return new TaskCancelResult(getID(), AbstractTaskResult.ReturnCode.SUCCESS);
			}

			if (previousState != ExecutionState.RUNNING && previousState != ExecutionState.STARTING
				&& previousState != ExecutionState.FINISHING && previousState != ExecutionState.REPLAYING) {
				// Set to canceled directly
				updateExecutionState(ExecutionState.CANCELED, null);
				return new TaskCancelResult(getID(), AbstractTaskResult.ReturnCode.SUCCESS);
			}

			if (this.allocatedResource == null) {
				final TaskCancelResult result = new TaskCancelResult(getID(), AbstractTaskResult.ReturnCode.NO_INSTANCE);
				result.setDescription(""Assigned instance of vertex "" + this.toString() + "" is null!"");
				return result;
			}

			try {
				return this.allocatedResource.getInstance().cancelTask(this.vertexID);

			} catch (IOException e) {
				final TaskCancelResult result = new TaskCancelResult(getID(), AbstractTaskResult.ReturnCode.IPC_ERROR);
				result.setDescription(StringUtils.stringifyException(e));
				return result;
			}
		}

		return new TaskCancelResult(getID(), ReturnCode.SUCCESS);
	}",Cancels and removes the task represented by this vertex from the instance it is currently running on.,0,493
6855,"public SourceSection getSourceSection() throws DebugException {
        try {
            Node node = scope.getNode();
            if (node != null) {
                return session.resolveSection(node.getEncapsulatingSourceSection());
            } else {
                return null;
            }
        } catch (ThreadDeath td) {
            throw td;
        } catch (Throwable ex) {
            throw new DebugException(session, ex, language, null, true, null);
        }
    }",Get a source section representing this scope.,0,142
5505,"public List<DBObject> getIndexInfo() {
        try {
            return new GetIndexesOperation<DBObject>(getBufferPool(), getSession(), getNamespace(), objectCodec).execute();
        } catch (org.mongodb.MongoException e) {
            throw mapException(e);
        }
    }",Return a list of the indexes for this collection.,0,83
6797,"public RestTemplateBuilder customizers(Collection<? extends RestTemplateCustomizer> restTemplateCustomizers) {
		Assert.notNull(restTemplateCustomizers, ""RestTemplateCustomizers must not be null"");
		return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, this.messageConverters,
				this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication,
				Collections.unmodifiableSet(new LinkedHashSet<RestTemplateCustomizer>(restTemplateCustomizers)),
				this.requestFactoryCustomizer, this.interceptors);
	}",Set the  RestTemplateCustomizer RestTemplateCustomizers that should be applied to the  RestTemplate.,0,109
5696,"public static IHttpCredentialsPlugin GetDrpcHttpCredentialsPlugin(Map conf) {
        String klassName = (String)conf.get(Config.DRPC_HTTP_CREDS_PLUGIN);
        return klassName == null ? null : AuthUtils.GetHttpCredentialsPlugin(conf, klassName);
    }",Construct an HttpServletRequest credential plugin specified by the DRPC storm configuration,0,65
7232,"public int pop(){
		if(isEmpty()){ //Checks for an empty stack
			System.out.println(""The stack is already empty"");
			return -1;
		}

		if(top < maxSize/4){
			resize(maxSize/2);
		}
        
        return stackArray[top--];
	}",Removes the top element of the stack and returns the value you've removed,0,85
6887,"public InputStream getSettingsInputStream(String streamKey)
    {
        String path = findString(streamKey, settingsPacks.elements());

        if (path == null || path.length() == 0)
        {
            logger.warn(""Missing resource for key: "" + streamKey);
            return null;
        }

        return getSettingsInputStreamForPath(path);
    }",Loads a stream from a given identifier.,0,101
6366,"public Durability getDurability() {
      return getOrDefault(DURABILITY_KEY, Durability::valueOf, DEFAULT_DURABLITY);
    }",Returns the durability setting for the table.,0,31
5609,"public R perform(Context context, R dso, Operation operation) {
        performPatchOperation(context, dso, operation);
        return dso;
    }",Implements the patch operation for metadata operations.,0,45
6861,"public static Object[] getPluginSequence(Class intfc)
        throws PluginInstantiationException
    {
        return getPluginSequence(null, intfc);
    }","Returns instances of all plugins that implement the interface intface, in an Array.",0,38
6481,"protected boolean trySkipToNextColumn(Cell cell) throws IOException {
    Cell nextCell = null;
    do {
      Cell nextIndexedKey = getNextIndexedKey();
      if (nextIndexedKey != null && nextIndexedKey != KeyValueScanner.NO_NEXT_INDEXED_KEY
          && matcher.compareKeyForNextColumn(nextIndexedKey, cell) >= 0) {
        this.heap.next();
        ++kvsScanned;
      } else {
        return false;
      }
    } while ((nextCell = this.heap.peek()) != null && CellUtil.matchingRowColumn(cell, nextCell));
    // We need this check because it may happen that the new scanner that we get
    // during heap.next() is requiring reseek due of fake KV previously generated for
    // ROWCOL bloom filter optimization. See HBASE-19863 for more details
    if (nextCell != null && matcher.compareKeyForNextColumn(nextCell, cell) < 0) {
      return false;
    }
    return true;
  }",See  org.apache.hadoop.hbase.regionserver.StoreScanner#trySkipToNextRow(Cell),0,219
5280,"public RealmQuery<E> where() {
        if (managedMode) {
            checkValidView();
            return RealmQuery.createQueryFromList(this);
        } else {
            throw new RealmException(ONLY_IN_MANAGED_MODE_MESSAGE);
        }
    }","Returns a RealmQuery, which can be used to query for specific objects of this class.",0,63
6229,"public static LLVMExpressionNode convertToPrimitiveNode(LLVMExpressionNode originalArg, LLVMContext context) {
        CompilerAsserts.neverPartOfCompilation();
        if (originalArg instanceof LLVMAddressNode) {
            return LLVMAddressToI64NodeGen.create((LLVMAddressNode) originalArg);
        } else if (originalArg instanceof LLVM80BitFloatNode) {
            throw new AssertionError(""foreign function interface does not support 80 bit floats yet"");
        } else if (originalArg instanceof LLVMFunctionNode) {
            LLVMFunctionDescriptor function = ((LLVMFunctionLiteralNode) originalArg).executeFunction();
            if (function.isNullFunction()) {
                return new LLVMI64LiteralNode(0);
            } else {
                String functionName = function.getName();
                long getNativeSymbol = context.getNativeHandle(functionName);
                if (getNativeSymbol != 0) {
                    return new LLVMI64LiteralNode(getNativeSymbol);
                } else {
                    throw new LLVMUnsupportedException(UnsupportedReason.FUNCTION_POINTER_ESCAPES_TO_NATIVE);
                }
            }
        } else {
            return originalArg;
        }
    }",Converts a Sulong Truffle node to a node that returns a primitive that can be used as an argument to Graal's NFI.,0,253
5849,"public int search() {
        source = RuntimeEnvironment.getInstance().getSourceRootPath();
        data = RuntimeEnvironment.getInstance().getDataRootPath();
        docs.clear();
                
        String qry = Util.buildQueryString(freetext, definition, symbol, file, history);
        if (qry.length() > 0) {
            try {
                query = qparser.parse(qry);
                RuntimeEnvironment env = RuntimeEnvironment.getInstance();
                File root = new File(env.getDataRootFile(), ""index"");            

                if (env.hasProjects()) {
                    // search all projects
                    //TODO support paging per project
                        searchMultiDatabase(env.getProjects(),false);
                } else {
                    // search the index database
                    searchSingleDatabase(root,true);
                }
            } catch (Exception e) {
                OpenGrokLogger.getLogger().log(
                        Level.WARNING, SEARCH_EXCEPTION_MSG, e);
            }
        }
        if (!docs.isEmpty()) {
            sourceContext = null;
            summarizer = null;
            try {
                sourceContext = new Context(query);
                if(sourceContext.isEmpty()) {
                    sourceContext = null;
                }
                summarizer = new Summarizer(query, analyzer);
            } catch (Exception e) {
                OpenGrokLogger.getLogger().log(Level.WARNING, ""An error occured while creating summary"", e);
            }
            
            historyContext = null;
            try {
                historyContext = new HistoryContext(query);
                if(historyContext.isEmpty()) {
                    historyContext = null;
                }
            } catch (Exception e) {
                OpenGrokLogger.getLogger().log(Level.WARNING, ""An error occured while getting history context"", e);
            }
        }
        return hits.length;
    }",Execute a search.,0,480
5707,"public static WorkspaceItem[] findByEPerson(Context context, EPerson ep)
            throws SQLException
    {
        List<WorkspaceItem> wsItems = new ArrayList<WorkspaceItem>();

        TableRowIterator tri = DatabaseManager.queryTable(context, ""workspaceitem"",
                ""SELECT workspaceitem.* FROM workspaceitem, item WHERE "" +
                ""workspaceitem.item_id=item.item_id AND "" +
                ""item.submitter_id= ? "" +
                ""ORDER BY workspaceitem.workspace_item_id"", 
                ep.getID());

        try
        {
            while (tri.hasNext())
            {
                TableRow row = tri.next();

                // Check the cache
                WorkspaceItem wi = (WorkspaceItem) context.fromCache(
                        WorkspaceItem.class, row.getIntColumn(""workspace_item_id""));

                if (wi == null)
                {
                    wi = new WorkspaceItem(context, row);
                }

                wsItems.add(wi);
            }
        }
        finally
        {
            // close the TableRowIterator to free up resources
            if (tri != null)
            {
                tri.close();
            }
        }

        return wsItems.toArray(new WorkspaceItem[wsItems.size()]);
    }",Get all workspace items for a particular e-person.,0,290
7387,"public Response accountPage() {
        if (session.getContext().getRequestHeaders().getAcceptableMediaTypes().contains(MediaType.APPLICATION_JSON_TYPE)) {
            requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);

            UserRepresentation rep = ModelToRepresentation.toRepresentation(session, realm, auth.getUser());
            if (rep.getAttributes() != null) {
                Iterator<String> itr = rep.getAttributes().keySet().iterator();
                while (itr.hasNext()) {
                    if (itr.next().startsWith(""keycloak."")) {
                        itr.remove();
                    }
                }
            }

            return Cors.add(request, Response.ok(rep).type(MediaType.APPLICATION_JSON_TYPE)).auth().allowedOrigins(auth.getToken()).build();
        } else {
            return forwardToPage(null, AccountPages.ACCOUNT);
        }
    }",Get account information.,0,242
6365,"public int getLoopCount() {
        return getLoopCount(mNativeInfoHandle.gifInfoPtr);
    }",Returns loop count previously read from GIF's application extension block.,0,24
6559,"public Gson create() {
    List<ExclusionStrategy> deserializationStrategies =
        new LinkedList<ExclusionStrategy>(deserializeExclusionStrategies);
    List<ExclusionStrategy> serializationStrategies =
        new LinkedList<ExclusionStrategy>(serializeExclusionStrategies);
    deserializationStrategies.add(modifierBasedExclusionStrategy);
    serializationStrategies.add(modifierBasedExclusionStrategy);

    if (!serializeInnerClasses) {
      deserializationStrategies.add(innerClassExclusionStrategy);
      serializationStrategies.add(innerClassExclusionStrategy);
    }
    if (ignoreVersionsAfter != VersionConstants.IGNORE_VERSIONS) {
      VersionExclusionStrategy versionExclusionStrategy =
          new VersionExclusionStrategy(ignoreVersionsAfter);
      deserializationStrategies.add(versionExclusionStrategy);
      serializationStrategies.add(versionExclusionStrategy);
    }
    if (excludeFieldsWithoutExposeAnnotation) {
      deserializationStrategies.add(exposeAnnotationDeserializationExclusionStrategy);
      serializationStrategies.add(exposeAnnotationSerializationExclusionStrategy);
    }

    ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers =
        DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.copyOf();
    customSerializers.register(serializers.copyOf());
    ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers =
        DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.copyOf();
    customDeserializers.register(deserializers.copyOf());
    addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, customSerializers,
        customDeserializers);

    customSerializers.registerIfAbsent(DefaultTypeAdapters.getDefaultSerializers());
    customDeserializers.registerIfAbsent(DefaultTypeAdapters.getDefaultDeserializers());

    ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators =
        instanceCreators.copyOf();
    customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.getDefaultInstanceCreators());

    customSerializers.makeUnmodifiable();
    customDeserializers.makeUnmodifiable();
    instanceCreators.makeUnmodifiable();

    return new Gson(new DisjunctionExclusionStrategy(deserializationStrategies),
        new DisjunctionExclusionStrategy(serializationStrategies),
        fieldNamingPolicy, instanceCreators, serializeNulls,
        customSerializers, customDeserializers, generateNonExecutableJson, escapeHtmlChars,
        prettyPrinting, serializeSpecialFloatingPointValues, longSerializationPolicy);
  }",Creates a  Gson instance based on the current configuration.,0,429
5965,"public static byte[] convertToDefiniteLength(byte[] berPKCS12File, char[] passwd, String provider)
        throws IOException
    {
        Pfx pfx = Pfx.getInstance(berPKCS12File);

        ContentInfo info = pfx.getAuthSafe();

        ASN1OctetString content = ASN1OctetString.getInstance(info.getContent());
        ASN1Primitive obj = ASN1Primitive.fromByteArray(content.getOctets());

        byte[] derEncoding = obj.getEncoded(ASN1Encoding.DER);

        info = new ContentInfo(info.getContentType(), new DEROctetString(derEncoding));

        MacData mData = pfx.getMacData();
        try
        {
            int itCount = mData.getIterationCount().intValue();
            byte[] data = ASN1OctetString.getInstance(info.getContent()).getOctets();
            byte[] res = calculatePbeMac(mData.getMac().getAlgorithmId().getAlgorithm(), mData.getSalt(), itCount, passwd, data, provider);

            AlgorithmIdentifier algId = new AlgorithmIdentifier(mData.getMac().getAlgorithmId().getAlgorithm(), DERNull.INSTANCE);
            DigestInfo dInfo = new DigestInfo(algId, res);

            mData = new MacData(dInfo, mData.getSalt(), itCount);
        }
        catch (Exception e)
        {
            throw new IOException(""error constructing MAC: "" + e.toString());
        }

        pfx = new Pfx(info, mData);

        return pfx.getEncoded(ASN1Encoding.DER);
    }","Re-encode the PKCS#12 structure to definite length encoding at the inner layer as well, recomputing the MAC accordingly.",0,410
5413,"public String getFormattedBody()
		{
			if ( getHtmlBody() != null && getHtmlBody().length() > 0 )
				return getHtmlBody();
			else 
				return Web.encodeUrlsAsHtml( FormattedText.convertPlaintextToFormattedText(m_body) );
				
		} // getHtmlBody","Get the formatted body (either html or plain-text converted to html), as a string.",0,79
7005,"protected String toCommaDelimitedString(List<String> headerValues) {
		StringJoiner joiner = new StringJoiner("", "");
		for (String val : headerValues) {
			if (val != null) {
				joiner.add(val);
			}
		}
		return joiner.toString();
	}",Turn the given list of header values into a comma-delimited result.,0,90
7313,"public String getSnippet(LineColumn start, LineColumn end) {
        // preconditions
        if (start == null || end == null) { return null; } // no text to return
        if (start.equals(end)) { return null; } // no text to return
        if (lines.size() == 1 && current.length() == 0) { return null; } // buffer hasn't been filled yet

        // working variables
        int startLine = start.getLine();
        int startColumn = start.getColumn();
        int endLine = end.getLine();
        int endColumn = end.getColumn();

        // reset any out of bounds requests
        if (startLine < 1) { startLine = 1;}
        if (endLine < 1) { endLine = 1;}
        if (startColumn < 1) { startColumn = 1;}
        if (endColumn < 1) { endColumn = 1;}
        if (startLine > lines.size()) { startLine = lines.size(); }
        if (endLine > lines.size()) { endLine = lines.size(); }

        // obtain the snippet from the buffer within specified bounds
        StringBuffer snippet = new StringBuffer();
        for (int i = startLine - 1; i < endLine;i++) {
            String line = ((StringBuffer)lines.get(i)).toString();
            if (startLine == endLine) {
                // reset any out of bounds requests (again)
                if (startColumn > line.length()) { startColumn = line.length();}
                if (startColumn < 1) { startColumn = 1;}
                if (endColumn > line.length()) { endColumn = line.length() + 1;}
                if (endColumn < 1) { endColumn = 1;}

                line = line.substring(startColumn - 1, endColumn - 1);
            } else {
                if (i == startLine - 1) {
                    if (startColumn - 1 < line.length()) {
                        line = line.substring(startColumn - 1);
                    }
                }
                if (i == endLine - 1) {
                    if (endColumn - 1 < line.length()) {
                        line = line.substring(0,endColumn - 1);
                    }
                }
            }
            snippet.append(line);
        }
        return snippet.toString();
    }",Obtains a snippet of the source code within the bounds specified,0,705
7737,"public ArrayList<View> getViews() {
		try {
			return ensureArrayListOrNull(viewFetcher.getViews());
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}",Returns a  List of the  Views located in the current  Activity.,0,64
7162,"public static Date stringToDate(String date) {
        if (date == null || date.length() == 0) return null;
        Matcher matcher = jsonDate.matcher(date);
        if (matcher.find()) {
            String dateMatch = matcher.group(1);
            return new Date(Long.parseLong(dateMatch));
        } else {
            return new Date(Long.parseLong(date));
        }
    }",Converts a Json string to a Java Date object.,0,134
5888,"public static DataFrame evaluateExpressions(DataFrame df, Collection<MetricExpression> expressions) throws Exception {
    if(expressions.size() != 1)
      throw new IllegalArgumentException(""Requires exactly one expression"");

    MetricExpression me = expressions.iterator().next();
    Collection<MetricFunction> functions = me.computeMetricFunctions();

    Map<String, Double> context = new HashMap<>();
    double[] values = new double[df.size()];

    for(int i=0; i<df.size(); i++) {
      for(MetricFunction f : functions) {
        // TODO check inconsistency between getMetricName() and toString()
        context.put(f.getMetricName(), df.getDouble(f.toString(), i));
      }
      values[i] = MetricExpression.evaluateExpression(me, context);
    }

    // drop intermediate columns
    for(MetricFunction f : functions) {
      df.dropSeries(f.toString());
    }

    return df.addSeries(COL_VALUE, values);
  }",Returns the DataFrame augmented with a  COL_VALUE column that contains the evaluation results from computing derived metric expressions.,0,284
5594,"public static SocketAddress resolve(RedisURI redisURI, DnsResolver dnsResolver) {

        if (redisURI.getSocket() != null) {
            return getDomainSocketAddress(redisURI);
        }

        try {
            InetAddress[] inetAddress = dnsResolver.resolve(redisURI.getHost());

            if (inetAddress.length == 0) {
                return InetSocketAddress.createUnresolved(redisURI.getHost(), redisURI.getPort());
            }

            return new InetSocketAddress(inetAddress[0], redisURI.getPort());
        } catch (UnknownHostException e) {
            return new InetSocketAddress(redisURI.getHost(), redisURI.getPort());
        }
    }",Resolves a  io.lettuce.core.RedisURI to a  java.net.SocketAddress.,0,183
5714,"public int compare( Object[] o1, Object[] o2 ) {
    try {
      // First compare on the natural keys...
      //
      int cmp = rowMeta.compare( o1, o2, keyIndexes );
      if ( cmp != 0 ) {
        return cmp;
      }

      // Then see if the start of the date range of o2 falls between the start and end of o2
      //
      ValueMetaInterface fromDateMeta = rowMeta.getValueMeta( fromDateIndex );
      ValueMetaInterface toDateMeta = rowMeta.getValueMeta( toDateIndex );

      Date fromDate = fromDateMeta.getDate( o1[fromDateIndex] );
      Date toDate = toDateMeta.getDate( o1[toDateIndex] );
      Date lookupDate = fromDateMeta.getDate( o2[fromDateIndex] );

      int fromCmpLookup = 0;
      if ( fromDate == null ) {
        if ( lookupDate == null ) {
          fromCmpLookup = 0;
        } else {
          fromCmpLookup = -1;
        }
      } else {
        if ( lookupDate == null ) {
          fromCmpLookup = 1;
        } else {
          fromCmpLookup = fromDateMeta.compare( fromDate, lookupDate );
        }
      }
      if ( fromCmpLookup < 0 ) {
        if ( toDate != null ) {
          int toCmpLookup = toDateMeta.compare( toDate, lookupDate );
          if ( toCmpLookup > 0 ) {
            return 0;
          }
        }
      }
      return fromCmpLookup;
    } catch ( Exception e ) {
      throw new RuntimeException( e );
    }
  }",Compare 2 rows of data using the natural keys and indexes specified.,0,438
7447,"public Set<String> sdiff(final String... keys) {
        runChecks();
        client.sdiff(keys);
        final List<String> members = client.getMultiBulkReply();
        return new HashSet<String>(members);
    }","Return the difference between the Set stored at key1 and all the Sets key2, ..., keyN  Example:  key1 = [x, a, b, c] key2 = [c] key3 = [a, d]",0,72
6224,"public static boolean nextBoolean() {
        return nextBoolean(JVM_RANDOM);
    }","Returns the next pseudorandom, uniformly distributed boolean value from the Math.random() sequence.",0,24
7209,"public long getProjectID(String name) throws GetProjectIDException {
        Integer c = 0;
        Long id = 0L;
        for (Entry<Long, ProjectMetadata> entry : _projectsMetadata.entrySet()) {
            if (entry.getValue().getName().equals(name)) {
                id = entry.getKey();
                c += 1;
            }
        }
        if (c == 1) {
            return id;
        } else if (c == 0) {
            throw new GetProjectIDException(""Unable to find project with name: "" + name); 
        } else {
            throw new GetProjectIDException(c + "" projects found with name: "" + name); 
        }
    }",Tries to find the project id when given a project name,0,203
6136,"public Optional<ColumnRef> resolveName(final KsqlConfig ksqlConfig) {
    if (shouldUseLegacy(ksqlConfig)) {
      return legacyKeyField.map(LegacyField::columnRef);
    }

    return keyField;
  }",Resolve this  KeyField to the specific key field name to use.,0,57
6712,"public String getFirstKey() {
        return findInDocument(new Finder<String>() {
            @Override
            public String find(final BsonReader bsonReader) {
                return bsonReader.readName();
            }
        }, null);
    }","Gets the first key in this document, or null if the document is empty.",0,69
5615,"static GlobalMetaData getGlobalMetaData(List<Footer> footers) {
    return getGlobalMetaData(footers, true);
  }",Will merge the metadata of all the footers together,0,31
6306,"public Object finalizeComputation(Object object)
  {
    if (shouldFinalize) {
      SketchHolder holder = (SketchHolder) object;
      if (errorBoundsStdDev != null) {
        return holder.getEstimateWithErrorBounds(errorBoundsStdDev);
      } else {
        return holder.getEstimate();
      }
    } else {
      return object;
    }
  }",Finalize the computation on sketch object and returns estimate from underlying sketch.,0,101
5466,"public GeoPoint fromPixels(float x, float y) {
			return bb.getGeoPointOfRelativePositionWithLinearInterpolation(x / getWidth(), y / getHeight());
		}",Converts x/y ScreenCoordinates to the underlying GeoPoint.,0,47
7395,"public boolean generateSQLExampleWhereClause() {
        if (isModelOnly) {
            return false;
        }
        
        boolean rc = tableConfiguration.isSelectByExampleStatementEnabled()
                || tableConfiguration.isDeleteByExampleStatementEnabled()
                || tableConfiguration.isCountByExampleStatementEnabled();

        if (introspectedTable.getTargetRuntime() == TargetRuntime.IBATIS2) {
            rc |= tableConfiguration.isUpdateByExampleStatementEnabled();
        }

        return rc;
    }",Implements the rule for generating the SQL example where clause element.,0,111
5751,"public boolean skipTo(int target) throws IOException {
        while (subScorers.size()>0 && ((Scorer)subScorers.get(0)).doc()<target) {
            if (((Scorer)subScorers.get(0)).skipTo(target))
                heapAdjust(0);
            else
                heapRemoveRoot();
        }
        if ((subScorers.size()==0))
            return (more = false);
        return true;
    }",Advance to the first document beyond the current whose number is greater than or equal to target.,0,131
5793,"public OffsetAndMetadata committed(TopicPartition partition, final Duration timeout) {
        return committed(Collections.singleton(partition), timeout).get(partition);
    }",Get the last committed offset for the given partition (whether the commit happened by this process or another).,0,45
6912,"public boolean equals( Object obj ) {
    if ( ( obj != null ) && ( obj.getClass().equals( this.getClass() ) ) ) {
      UnivariateStatsMetaFunction mf = (UnivariateStatsMetaFunction) obj;

      return ( getXML().equals( mf.getXML() ) );
    }

    return false;
  }",Check for equality,0,110
6721,"public BooleanSpec path(String... patterns) {
		return asyncPredicate(getBean(PathRoutePredicateFactory.class)
				.applyAsync(c -> c.setPatterns(Arrays.asList(patterns))));
	}",A predicate that checks if the path of the request matches the given pattern,0,55
5835,"public static UnderFileSystemFactory find(String path) {
    Preconditions.checkArgument(path != null, ""path may not be null"");

    final String selectedFactoryFormat =
        ""Selected Under File System Factory implementation {} for path {}"";
    for (UnderFileSystemFactory factory : FACTORIES) {
      if (factory.supportsPath(path)) {
        LOG.debug(selectedFactoryFormat, factory.getClass(), path);
        return factory;
      }
    }
    // Scan extensions directory on the fly
    for (UnderFileSystemFactory factory : findExtensions()) {
      if (factory.supportsPath(path)) {
        LOG.debug(selectedFactoryFormat, factory.getClass(), path);
        return factory;
      }
    }

    LOG.warn(""No Under File System Factory implementation supports the path {}. Please check if ""
        + ""the under storage path is valid."", path);
    return null;
  }",Finds the first Under File System factory that supports the given path.,0,206
7660,"public Mono<Pet> getPetById(Long petId) throws RestClientException {
        Object postBody = null;
        
        // verify the required parameter 'petId' is set
        if (petId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, ""Missing the required parameter 'petId' when calling getPetById"");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put(""petId"", petId);
        String path = UriComponentsBuilder.fromPath(""/pet/{petId}"").buildAndExpand(uriVariables).toUriString();

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] accepts = { 
            ""application/xml"", ""application/json""
        };
        final List<MediaType> accept = apiClient.selectHeaderAccept(accepts);
        final String[] contentTypes = { };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] { ""api_key"" };

        ParameterizedTypeReference<Pet> returnType = new ParameterizedTypeReference<Pet>() {};
        return apiClient.invokeAPI(path, HttpMethod.GET, queryParams, postBody, headerParams, cookieParams, formParams, accept, contentType, authNames, returnType);
    }",Find pet by ID,0,421
6411,"private long getAvailableBytes(BlockWorkerInfo workerInfo) {
    long mCapacityBytes = workerInfo.getCapacityBytes();
    long mUsedBytes = workerInfo.getUsedBytes();
    return mCapacityBytes - mUsedBytes - mFileWriteCapacityReserved;
  }",The information of BlockWorkerInfo is update after a file complete write.,0,58
5308,"public byte[] getIcon() {
        return ImageLoader.getImageInBytes(
                ImageLoader.QUICK_MENU_ADD_ICON);        
    }",Returns the icon of this configuration form.,0,31
5872,"public String getCoreRootDirectory() {
    SolrResourceLoader loader = config.getResourceLoader();
    String relativeDir = get(CfgProp.SOLR_COREROOTDIRECTORY, null);
    if (relativeDir != null)
      return loader.resolve(relativeDir);
    return loader.getInstanceDir();
  }",The directory against which relative core instance dirs are resolved.,0,78
7434,"public int update(final String updateClause, final Object... params) throws SQLException {
    try {
      return this.queryRunner.update(updateClause, params);
    } catch (final SQLException ex) {
      // todo kunkun-tang: Retry logics should be implemented here.
      logger.error(""update failed"", ex);
      throw ex;
    }
  }",update implementation.,0,94
7054,"private ExecutionEvent getExecutionEvent(final SQLType sqlType, final BaseStatementUnit baseStatementUnit, final List<Object> parameters) {
        ExecutionEvent result;
        if (SQLType.DQL == sqlType) {
            result = new DQLExecutionEvent(baseStatementUnit.getSqlExecutionUnit().getDataSource(), baseStatementUnit.getSqlExecutionUnit().getSqlUnit(), parameters);
        } else {
            result = new DMLExecutionEvent(baseStatementUnit.getSqlExecutionUnit().getDataSource(), baseStatementUnit.getSqlExecutionUnit().getSqlUnit(), parameters);
        }
        return result;
    }",Execute.,0,143
6645,"private String typeAnsAnswerFilter(String buf, String userAnswer, String correctAnswer) {
        Matcher m = sTypeAnsPat.matcher(buf);
        
        // Obtain the diff and send it to updateCard
        DiffEngine diff = new DiffEngine();
        String diffUserAnswer = diff.diff_prettyHtml(diff.diff_main(userAnswer, correctAnswer), mNightMode);
        if(userAnswer.equals(correctAnswer))
        	return m.replaceFirst(diffUserAnswer + ""\u2714"");
        else
        	return m.replaceFirst(diffUserAnswer + ""\u21a6"" + diff.diff_prettyHtml(diff.diff_main(correctAnswer, correctAnswer), mNightMode));
    }",Format answer field when it contains typeAnswer or clozes,0,156
5457,"public boolean handleClose(Editor editor) {
    // Check if modified
//    boolean immediate = editors.size() == 1;
    if (!editor.checkModified()) {
      return false;
    }

    if (editors.size() == 1) {
      storeSketches();

      // This will store the sketch count as zero
      editors.remove(editor);
      try {
        Editor.serialMonitor.close();
      } catch (Exception e) {
        //ignore
      }
      rebuildRecentSketchesMenuItems();

      // Save out the current prefs state
      PreferencesData.save();

      // Since this wasn't an actual Quit event, call System.exit()
      System.exit(0);

    } else {
      // More than one editor window open,
      // proceed with closing the current window.
      editor.setVisible(false);
      editor.dispose();
//      for (int i = 0; i < editorCount; i++) {
//        if (editor == editors[i]) {
//          for (int j = i; j < editorCount-1; j++) {
//            editors[j] = editors[j+1];
//          }
//          editorCount--;
//          // Set to null so that garbage collection occurs
//          editors[editorCount] = null;
//        }
//      }
      editors.remove(editor);
    }
    return true;
  }",Close a sketch as specified by its editor window.,0,216
5487,"static boolean isMalformed(byte[] bytes)
    {
        switch (bytes.length)
        {
        case 0:
            return true;
        case 1:
            return false;
        default:
            return bytes[0] == (bytes[1] >> 7)
                // Apply loose validation, see note in public constructor ASN1Integer(byte[])
                && !Properties.isOverrideSet(""org.bouncycastle.asn1.allow_unsafe_integer"");
        }
    }",Apply the correct validation for an INTEGER primitive following the BER rules.,0,103
6113,"public static Optional<GeneratedKey> getGenerateKey(final ShardingRule shardingRule, final List<Object> parameters, final InsertStatement insertStatement) {
        Optional<String> generateKeyColumnName = shardingRule.findGenerateKeyColumnName(insertStatement.getTables().getSingleTableName());
        if (!generateKeyColumnName.isPresent()) {
            return Optional.absent();
        }
        return isContainsGenerateKeyColumn(insertStatement, generateKeyColumnName.get()) 
                ? findGeneratedKey(parameters, insertStatement, generateKeyColumnName.get()) : Optional.of(createGeneratedKey(shardingRule, insertStatement, generateKeyColumnName.get()));
    }",Get generate key.,0,150
6658,"public static String getIpPort(SocketAddress socketAddress) {
        if (socketAddress instanceof InetSocketAddress) {
            InetSocketAddress inetSocketAddress = (InetSocketAddress) socketAddress;
            String address = SocketAddressUtils.getAddressFirst(inetSocketAddress);
            if (address == null) {
                return ThriftConstants.UNKNOWN_ADDRESS;
            }
            return HostAndPort.toHostAndPortString(address, inetSocketAddress.getPort());
        }
        return ThriftConstants.UNKNOWN_ADDRESS;
    }",Returns the ip and port information retrieved from the given  SocketAddress.,0,114
7779,"public static ColumnNameFilter getInstance(String fullyQualifiedColumnNames) {
            Predicate<ColumnId> delegate = Predicates.excludes(fullyQualifiedColumnNames, ColumnId::toString);
            return (catalogName, schemaName, tableName, columnName) -> delegate.test(new ColumnId(new TableId(catalogName, schemaName, tableName), columnName));
        }","Build the  ColumnNameFilter that determines whether a column identified by a given  ColumnId is to be included, using the given comma-separated regular expression patterns defining which columns (if any) should be excluded.",0,88
6245,"public Repository repository(String repositoryName) {
        Repository repository = repositories.get(repositoryName);
        if (repository != null) {
            return repository;
        }
        throw new RepositoryMissingException(repositoryName);
    }",Returns registered repository,0,65
7400,"public int getTotalTimeMean() {
        return rollingCommandUserLatencyDistributionStream.getLatestMean();
    }",The mean (average) execution time (in milliseconds) for  HystrixCommand#execute() or  HystrixCommand#queue().,0,23
7321,"protected Message[] searchForNewMessages() throws MessagingException {
		Folder folderToUse = getFolder();
		Flags supportedFlags = folderToUse.getPermanentFlags();
		SearchTerm searchTerm = compileSearchTerms(supportedFlags);
		if (folderToUse.isOpen()) {
			return nullSafeMessages(searchTerm != null ? folderToUse.search(searchTerm) : folderToUse.getMessages());
		}
		throw new MessagingException(""Folder is closed"");
	}",Retrieves new messages from this receiver's folder.,0,118
6187,"public static int putInt(byte[] bytes, int offset, int val) {
    if (bytes.length - offset < SIZEOF_INT) {
      throw new IllegalArgumentException(""Not enough room to put an int at""
          + "" offset "" + offset + "" in a "" + bytes.length + "" byte array"");
    }
    if (UnsafeAccess.isAvailable()) {
      return UnsafeAccess.putInt(bytes, offset, val);
    } else {
      for(int i= offset + 3; i > offset; i--) {
        bytes[i] = (byte) val;
        val >>>= 8;
      }
      bytes[offset] = (byte) val;
      return offset + SIZEOF_INT;
    }
  }",Put an int value out to the specified byte array position.,0,217
5577,"public PrivateData getPrivateData(final String elementName, final String namespace) throws NoResponseException, XMPPErrorException, NotConnectedException
    {
        // Create an IQ packet to get the private data.
        IQ privateDataGet = new PrivateDataIQ(elementName, namespace);

        PrivateDataIQ response = connection().createPacketCollectorAndSend(
                        privateDataGet).nextResultOrThrow();
        return response.getPrivateData();
    }",Returns the private data specified by the given element name and namespace.,0,91
7415,"public boolean isJava6() {
    return ""1.6"".equals(javaSpecVersion);
  }",Tells whether the Java version is 6.,0,26
7562,"protected IgfsFileRange split(long start, long len) {
        return new IgfsFileRange(FILE, start, len);
    }",Create split.,0,38
6862,"public List distinct(final String fieldName, final DBObject query, final ReadPreference readPreference) {
        Find find = new Find().filter(toDocument(query))
                              .readPreference(readPreference.toNew());
        org.mongodb.MongoCursor<String> result = new DistinctOperation(getNamespace(), fieldName, find, getBufferPool(),
                                                                       getSession(), false).execute();

        List<String> results = new ArrayList<String>();
        while (result.hasNext()) {
            results.add(result.next());
        }

        return results;
    }",Find the distinct values for a specified field across a collection and returns the results in an array.,0,170
6687,"public CssRule getSubRuleByZIndex(Integer zIndex) {
        Map<PseudoClass, List<Property>> zProperties = new HashMap<>();
        List<Integer> zIndexes = new ArrayList<>();
        for (Map.Entry<PseudoClass, List<Property>> entry : this.getProperties().entrySet()) {
            List<Property> props = entry.getValue();
            collectZIndexesInProperties(props, zIndexes);
            // the list of z-index values is positional, people will normally set them in
            // increasing order, but we don't want to make assumptions... users could
            // even repeat the same z-index multiple times, take care of that as well
            ListIterator<Integer> it = zIndexes.listIterator();
            while (it.hasNext()) {
                int zIndexPosition = it.nextIndex();
                Integer nextZIndex = it.next();
                if (nextZIndex == NO_Z_INDEX) {
                    // this set of properties is z-index indepenent
                    zProperties.put(entry.getKey(), props);
                } else if (!nextZIndex.equals(zIndex)) {
                    continue;
                } else {
                    // extract the property values at that position
                    List<Property> zIndexProperties = new ArrayList<>();
                    for (Property property : props) {
                        if (isZIndex(property)) {
                            continue;
                        }
                        List<Value> values = property.getValues();
                        if (zIndexPosition < values.size()) {
                            Property p = new Property(property.getName(), Arrays.asList(values
                                    .get(zIndexPosition)));
                            zIndexProperties.add(p);
                        }
                    }
                    // if we collected any, add to the result
                    if (zIndexProperties.size() > 0) {
                        zProperties.put(entry.getKey(), zIndexProperties);
                    }
                }
            }
        }

        if (zProperties.size() > 0) {
            return new CssRule(this.getSelector(), zProperties, this.getComment());
        } else {
            return null;
        }
    }",Extracts a sub-rule at the given z-index.,0,497
5321,"public static boolean isWifiConnected() {
        ConnectivityManager cm =
                (ConnectivityManager) Utils.getApp().getSystemService(Context.CONNECTIVITY_SERVICE);
        //noinspection ConstantConditions
        return cm.getActiveNetworkInfo() != null
                && cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;
    }",Return whether wifi is connected.,0,80
7821,"private ZapTextField getTxtPattern() {
		if (txtPattern == null) {
			txtPattern = new ZapTextField();
		}
		return txtPattern;
	}",This method initializes txtPattern,0,48
7396,"static boolean isOpenShift(Client client) {
      return isOpenShiftAPIGroups(client);
    }",Check if OpenShift is available.,0,25
5388,"public static StringDataInstance getStringDataInstance(Data data) {
		if (data == null) {
			return NULL_INSTANCE;
		}
		DataType dt = data.getBaseDataType();
		if (dt instanceof AbstractStringDataType) {
			return ((AbstractStringDataType) dt).getStringDataInstance(data, data,
				data.getLength());
		}
		if (dt instanceof Array && !data.isInitializedMemory()) {
			ArrayStringable arrayStringable =
				ArrayStringable.getArrayStringable(((Array) dt).getDataType());
			if (arrayStringable != null && arrayStringable.hasStringValue(data)) {
				return new StringDataInstance(arrayStringable, data, data, data.getLength());
			}
		}
		return NULL_INSTANCE;

	}",Returns a new  StringDataInstance using the bytes in the data codeunit.,0,209
6120,"public static Collection<String> getNameServiceIds(Configuration conf) {
    return conf.getTrimmedStringCollection(DFS_FEDERATION_NAMESERVICES);
  }",Returns collection of nameservice Ids from the configuration.,0,32
6209,"public long loadMetadata(AlluxioURI path, LoadMetadataOptions options)
      throws BlockInfoException, FileDoesNotExistException, InvalidPathException,
      InvalidFileSizeException, FileAlreadyCompletedException, IOException, AccessControlException {
    MountTable.Resolution resolution;
    synchronized (mInodeTree) {
      // Permission checking is not performed in this method, but in the methods invoked.
      resolution = mMountTable.resolve(path);
    }
    AlluxioURI ufsUri = resolution.getUri();
    UnderFileSystem ufs = resolution.getUfs();
    try {
      if (!ufs.exists(ufsUri.toString())) {
        throw new FileDoesNotExistException(
            ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(path.getPath()));
      }
      synchronized (mInodeTree) {
        if (ufs.isFile(ufsUri.toString())) {
          return loadFileMetadata(path, resolution, options);
        } else {
          long fileId = loadDirectoryMetadata(path, options);
          InodeDirectory inode = (InodeDirectory) mInodeTree.getInodeById(fileId);
          if (!inode.isDirectChildrenLoaded() && options.isLoadDirectChildren()) {
            String[] files = ufs.list(ufsUri.getPath());
            LoadMetadataOptions loadMetadataOptions = LoadMetadataOptions.defaults();
            loadMetadataOptions.setLoadDirectChildren(false).setCreateAncestors(false);
            for (int i = 0; i < files.length; i++) {
              loadMetadata(path.join(files[i]), loadMetadataOptions);
            }
            inode.isDirectChildrenLoaded();
          }
          return fileId;
        }
      }
    } catch (IOException e) {
      LOG.error(ExceptionUtils.getStackTrace(e));
      throw e;
    }
  }",Loads metadata for the object identified by the given path from UFS into Alluxio.,0,425
7335,"private PersistentPropertyPath<MongoPersistentProperty> getPath(String pathExpression) {

			try {

				PropertyPath path = PropertyPath.from(pathExpression, entity.getTypeInformation());
				PersistentPropertyPath<MongoPersistentProperty> propertyPath = mappingContext.getPersistentPropertyPath(path);

				Iterator<MongoPersistentProperty> iterator = propertyPath.iterator();
				boolean associationDetected = false;

				while (iterator.hasNext()) {

					MongoPersistentProperty property = iterator.next();

					if (property.isAssociation()) {
						associationDetected = true;
						continue;
					}

					if (associationDetected && !property.isIdProperty()) {
						throw new MappingException(String.format(INVALID_ASSOCIATION_REFERENCE, pathExpression));
					}
				}

				return propertyPath;
			} catch (PropertyReferenceException e) {
				return null;
			}
		}",Returns the  PersistentPropertyPath for the given pathExpression.,0,226
6055,"public String getPid(VPaintable paintable) {
        if (paintable == null) {
            return null;
        }
        return paintable.getId();
    }",Gets the paintableId for a specific paintable.,0,49
6203,"public String[] getLocations() {
        String[] result = new String[locations.getLocations().size()];
        for (int i = 0; i < locations.getLocations().size(); i++) {
            result[i] = locations.getLocations().get(i).toString();
        }
        return result;
    }",Retrieves locations on the classpath to scan recursively for migrations.,0,108
5489,"public boolean isLoggingEnabled(ProtocolName protocol)
    {
        switch(protocol)
        {
            case SIP:
                return getConfiguration().isGlobalLoggingEnabled()
                        && getConfiguration().isSipLoggingEnabled();
            case JABBER:
                return getConfiguration().isGlobalLoggingEnabled()
                        && getConfiguration().isJabberLoggingEnabled();
            case RTP:
                return getConfiguration().isGlobalLoggingEnabled()
                        && getConfiguration().isRTPLoggingEnabled();
            case ICE4J:
                return getConfiguration().isGlobalLoggingEnabled()
                        && getConfiguration().isIce4JLoggingEnabled();
            default:
                return false;
        }
    }",Checks is logging globally enabled for and is it currently available fo the given service.,0,159
6420,"public static PathEvaluator atDepth( final int depth )
    {
        return new PathEvaluator.Adapter()
        {
            public Evaluation evaluate( Path path, BranchState state )
            {
                return path.length() == depth ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_CONTINUE;
            }
        };
    }",Returns an  Evaluator which only includes positions at  depth and prunes everything deeper than that.,0,93
7331,"public boolean covers(Vector point) {
    return measure.distance(getCenter().getLengthSquared(), getCenter(), point) < t1;
  }",Return if the point is covered by this canopy,0,45
7576,"public boolean checkAESKey(KeyParameter aesKey) {
        lock.lock();
        try {
            return keychain.checkAESKey(aesKey);
        } finally {
            lock.unlock();
        }
    }",Check whether the AES key can decrypt the first encrypted key in the wallet.,0,58
6920,"public boolean onChunkLoadError(Chunk chunk, IOException e) {
    if (chunk.bytesLoaded() == 0
        && (chunk instanceof TsChunk || chunk instanceof MediaPlaylistChunk
            || chunk instanceof EncryptionKeyChunk)
        && (e instanceof InvalidResponseCodeException)) {
      InvalidResponseCodeException responseCodeException = (InvalidResponseCodeException) e;
      int responseCode = responseCodeException.responseCode;
      if (responseCode == 404 || responseCode == 410) {
        int variantIndex;
        if (chunk instanceof TsChunk) {
          TsChunk tsChunk = (TsChunk) chunk;
          variantIndex = getVariantIndex(tsChunk.format);
        } else if (chunk instanceof MediaPlaylistChunk) {
          MediaPlaylistChunk playlistChunk = (MediaPlaylistChunk) chunk;
          variantIndex = playlistChunk.variantIndex;
        } else {
          EncryptionKeyChunk encryptionChunk = (EncryptionKeyChunk) chunk;
          variantIndex = encryptionChunk.variantIndex;
        }
        boolean alreadyBlacklisted = variantBlacklistTimes[variantIndex] != 0;
        variantBlacklistTimes[variantIndex] = SystemClock.elapsedRealtime();
        if (alreadyBlacklisted) {
          // The playlist was already blacklisted.
          Log.w(TAG, ""Already blacklisted variant ("" + responseCode + ""): ""
              + chunk.dataSpec.uri);
          return false;
        } else if (!allVariantsBlacklisted()) {
          // We've handled the 404/410 by blacklisting the variant.
          Log.w(TAG, ""Blacklisted variant ("" + responseCode + ""): ""
              + chunk.dataSpec.uri);
          return true;
        } else {
          // This was the last non-blacklisted playlist. Don't blacklist it.
          Log.w(TAG, ""Final variant not blacklisted ("" + responseCode + ""): ""
              + chunk.dataSpec.uri);
          variantBlacklistTimes[variantIndex] = 0;
          return false;
        }
      }
    }
    return false;
  }",Invoked when the  HlsSampleSource encounters an error loading a chunk obtained from this source.,0,470
7379,"public BlockInStream getInStream(long blockId, InStreamOptions options)
      throws IOException {
    BlockInfo blockInfo;
    try (CloseableResource<BlockMasterClient> masterClientResource =
        mContext.acquireBlockMasterClientResource()) {
      blockInfo = masterClientResource.get().getBlockInfo(blockId);
    } catch (AlluxioException e) {
      throw new IOException(e);
    }

    if (blockInfo.getLocations().isEmpty()) {
      throw new IOException(""Block "" + blockId + "" is not available in Alluxio"");
    }
    // TODO(calvin): Get location via a policy.
    // Although blockInfo.locations are sorted by tier, we prefer reading from the local worker.
    // But when there is no local worker or there are no local blocks, we prefer the first
    // location in blockInfo.locations that is nearest to memory tier.
    // Assuming if there is no local worker, there are no local blocks in blockInfo.locations.
    // TODO(cc): Check mContext.hasLocalWorker before finding for a local block when the TODO
    // for hasLocalWorker is fixed.
    if (Configuration.getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED)) {
      for (BlockLocation location : blockInfo.getLocations()) {
        WorkerNetAddress workerNetAddress = location.getWorkerAddress();
        if (workerNetAddress.getHost().equals(mLocalHostName)) {
          // There is a local worker and the block is local.
          try {
            return StreamFactory.createLocalBlockInStream(mContext, blockId, blockInfo.getLength(),
                workerNetAddress, options);
          } catch (IOException e) {
            LOG.warn(""Failed to open local stream for block {}: {}"", blockId, e.getMessage());
            // Getting a local stream failed, do not try again
            break;
          }
        }
      }
    }
    // No local worker/block, choose a random location. In the future we could change this to
    // only randomize among locations in the highest tier, or have the master randomize the order.
    List<BlockLocation> locations = blockInfo.getLocations();
    WorkerNetAddress workerNetAddress =
        locations.get(mRandom.nextInt(locations.size())).getWorkerAddress();
    return StreamFactory
        .createRemoteBlockInStream(mContext, blockId, blockInfo.getLength(), workerNetAddress,
            options);
  }",Gets a stream to read the data of a block.,0,402
5877,"public Double nextValue() {
    return -Math.log(ThreadLocalRandom.current().nextDouble()) / gamma;
  }",Generate the next item as a long.,0,37
5901,"protected FieldValue createByReflection(Object arg) {
        Class<?> valClass = getValueClass();
        if (valClass != null) {
            Pair<Class<?>, Class<?>> key = new Pair<>(valClass, arg.getClass());
            Constructor<?> cstr = constructorCache.get(key);
            if (cstr == null) {
                if (!constructorCache.containsKey(key)) {
                    try {
                        cstr = valClass.getConstructor(key.getSecond());
                        constructorCache.put(key, cstr);
                    } catch (NoSuchMethodException e) {
                        constructorCache.put(key, null);
                    }
                }
            }
            try {
                return cstr != null ? (FieldValue)cstr.newInstance(arg) : null;
            } catch (ReflectiveOperationException e) {
                // Only rethrow exceptions coming from the underlying FieldValue constructor.
                if (e instanceof InvocationTargetException) {
                    throw new IllegalArgumentException(e.getCause().getMessage(), e.getCause());
                }
            }
        }
        return null;
    }",Creates a field value by reflection,0,298
5319,"public static boolean doesResourceExist(final Resource res) {
        if (res != null) {
            try {
                IOUtils.read(res.getInputStream(), new byte[1]);
                return res.contentLength() > 0;
            } catch (final Exception e) {
                LOGGER.trace(e.getMessage(), e);
                return false;
            }
        }
        return false;
    }",Does resource exist?,0,123
5869,"public List<ImapResponse> search() throws IOException, MessagingException {
                String imapQuery = ""UID SEARCH "";
                if (requiredFlags != null) {
                    for (Flag flag : requiredFlags) {
                        switch (flag) {
                            case DELETED: {
                                imapQuery += ""DELETED "";
                                break;
                            }
                            case SEEN: {
                                imapQuery += ""SEEN "";
                                break;
                            }
                            case ANSWERED: {
                                imapQuery += ""ANSWERED "";
                                break;
                            }
                            case FLAGGED: {
                                imapQuery += ""FLAGGED "";
                                break;
                            }
                            case DRAFT: {
                                imapQuery += ""DRAFT "";
                                break;
                            }
                            case RECENT: {
                                imapQuery += ""RECENT "";
                                break;
                            }
                            default: {
                                break;
                            }
                        }
                    }
                }

                if (forbiddenFlags != null) {
                    for (Flag flag : forbiddenFlags) {
                        switch (flag) {
                            case DELETED: {
                                imapQuery += ""UNDELETED "";
                                break;
                            }
                            case SEEN: {
                                imapQuery += ""UNSEEN "";
                                break;
                            }
                            case ANSWERED: {
                                imapQuery += ""UNANSWERED "";
                                break;
                            }
                            case FLAGGED: {
                                imapQuery += ""UNFLAGGED "";
                                break;
                            }
                            case DRAFT: {
                                imapQuery += ""UNDRAFT "";
                                break;
                            }
                            case RECENT: {
                                imapQuery += ""UNRECENT "";
                                break;
                            }
                            default: {
                                break;
                            }
                        }
                    }
                }

                String encodedQuery = ImapUtility.encodeString(queryString);
                if (store.getStoreConfig().isRemoteSearchFullText()) {
                    imapQuery += ""TEXT "" + encodedQuery;
                } else {
                    imapQuery += ""OR SUBJECT "" + encodedQuery + "" FROM "" + encodedQuery;
                }

                return executeSimpleCommand(imapQuery);
            }",Search the remote ImapFolder.,0,561
7881,"public boolean start(final FileDownloadListener listener, final boolean isSerial) {

        if (listener == null) {
            FileDownloadLog.w(this, ""Tasks with the listener can't start, because the listener "" +
                    ""provided is null: [null, %B]"", isSerial);
            return false;
        }


        return isSerial ? startSerialTasks(listener) : startParallelTasks(listener);
    }",Start the download queue by the same listener,0,95
7427,"public Collection<String>   getParticipantNodes() throws Exception
    {
        return LockInternals.getParticipantNodes(internals.getClient(), basePath, internals.getLockName(), internals.getDriver());
    }",Return a sorted list of all current nodes participating in the lock,0,53
5540,"public T readRecord(final T target) throws IOException, InterruptedException {

		T record = null;

		if (this.executingThread == null) {
			this.executingThread = Thread.currentThread();
		}

		if (this.executingThread.isInterrupted()) {
			throw new InterruptedException();
		}

		while (true) {

			if (this.channelToReadFrom == -1) {
				this.channelToReadFrom = waitForAnyChannelToBecomeAvailable();
			}
			try {
				record = this.getInputChannel(this.channelToReadFrom).readRecord(target);
			} catch (EOFException e) {
				// System.out.println(""### Caught EOF exception at channel "" + channelToReadFrom + ""("" +
				// this.getInputChannel(channelToReadFrom).getType().toString() + "")"");
				if (this.isClosed()) {
					return null;
				}
			}

			if (record != null) {
				break;
			} else {
				this.channelToReadFrom = -1;
			}
		}

		return record;
	}",Reads a record from one of the associated input channels.,0,261
7195,"public List<Ring> getInnerRings() {
		groupInRings();
		return innerRings;
	}",get the Inner Rings,0,28
6343,"protected boolean isMatched(GenericFile<T> file, boolean isDirectory) {
        String name = file.getFileNameOnly();

        // folders/names starting with dot is always skipped (eg. ""."", "".camel"", "".camelLock"")
        if (name.startsWith(""."")) {
            return false;
        }

        // lock files should be skipped
        if (name.endsWith(FileComponent.DEFAULT_LOCK_FILE_POSTFIX)) {
            return false;
        }

        if (endpoint.getFilter() != null) {
            if (!endpoint.getFilter().accept(file)) {
                return false;
            }
        }

        if (endpoint.getAntFilter() != null) {
            if (!endpoint.getAntFilter().accept(file)) {
                return false;
            }
        }

        // directories are regarded as matched if filter accepted them
        if (isDirectory) {
            return true;
        }

        if (ObjectHelper.isNotEmpty(endpoint.getExclude())) {
            if (name.matches(endpoint.getExclude())) {
                return false;
            }
        }

        if (ObjectHelper.isNotEmpty(endpoint.getInclude())) {
            if (!name.matches(endpoint.getInclude())) {
                return false;
            }
        }

        // use file expression for a simple dynamic file filter
        if (endpoint.getFileName() != null) {
            evaluateFileExpression();
            if (fileExpressionResult != null) {
                if (!name.equals(fileExpressionResult)) {
                    return false;
                }
            }
        }

        // if done file name is enabled, then the file is only valid if a done file exists
        if (endpoint.getDoneFileName() != null) {
            // done file must be in same path as the file
            String doneFileName = endpoint.createDoneFileName(file.getAbsoluteFilePath());
            ObjectHelper.notEmpty(doneFileName, ""doneFileName"", endpoint);

            // is it a done file name?
            if (endpoint.isDoneFile(file.getFileNameOnly())) {
                log.trace(""Skipping done file: {}"", file);
                return false;
            }

            if (!isMatched(file, doneFileName)) {
                return false;
            }
        }

        return true;
    }",Strategy to perform file matching based on endpoint configuration.,0,531
7533,"public static boolean isPullRequest(final Issue issue) {
        return issue != null && issue.pullRequest != null
                && !TextUtils.isEmpty(issue.pullRequest.html_url);
    }",Is the given issue a pull request?,0,59
7694,"public int atAdPos(final int pos) {
        final int take_int = (int) Math.floor((pos + 1) / adfrequency);
        Log.d(""atAdPosE2"", take_int + """");
        return take_int;
    }",to display the accumulator for the Ad position,0,74
5377,"private static List<BundleDescriptor> getBundleDescriptors(final String bundleFilter) throws Exception {
        return new ClasspathScanner().scanForBundles(bundleFilter);
    }",Gets list of bundle descriptors.,0,42
6519,"protected Symbol visitCast(Cast node, ExpressionAnalysisContext context) {
            DataType returnType = DataTypeAnalyzer.convert(node.getType());
            return cast(node.getExpression().accept(this, context), returnType, false);
        }",Create a chain of if functions by the given list of operands and results.,0,67
6539,"static String getDataType(FieldDefinition fieldDef, boolean strictTypeMapping) {
        Class<?> fieldClass = fieldDef.field.getType();
        String type = SUPPORTED_TYPES.get(fieldClass);
        if (type != null) {
            return type;
        }
        if (!strictTypeMapping) {
            return ""VARCHAR"";
        }
        throw new RuntimeException(""Unsupported type "" + fieldClass.getName());
    }",Returns a SQL type mapping for a Java class.,0,120
5584,"boolean shouldOverrideUrlLoading(WebView view, String url) {
        // Give plugins the chance to handle the url
        if (this.appView.pluginManager.onOverrideUrlLoading(url)) {
            // Do nothing other than what the plugins wanted.
            // If any returned true, then the request was handled.
            return true;
        }
        else if(url.startsWith(""file://"") | url.startsWith(""data:""))
        {
            //This directory on WebKit/Blink based webviews contains SQLite databases!
            //DON'T CHANGE THIS UNLESS YOU KNOW WHAT YOU'RE DOING!
            return url.contains(""app_webview"");
        }
        else if (appView.getWhitelist().isUrlWhiteListed(url)) {
            // Allow internal navigation
            return false;
        }
        else if (appView.getExternalWhitelist().isUrlWhiteListed(url))
        {
            try {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(Uri.parse(url));
                intent.addCategory(Intent.CATEGORY_BROWSABLE);
                intent.setComponent(null);
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) {
                    intent.setSelector(null);
                }
                this.cordova.getActivity().startActivity(intent);
                return true;
            } catch (android.content.ActivityNotFoundException e) {
                LOG.e(TAG, ""Error loading url "" + url, e);
            }
        }
        // Intercept the request and do nothing with it -- block it
        return true;
    }",Give the host application a chance to take over the control when a new url is about to be loaded in the current WebView.,0,323
5774,"private Optional<TaskManagerSlot> findMatchingSlot(ResourceProfile requestResourceProfile) {
		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator();

		while (iterator.hasNext()) {
			TaskManagerSlot taskManagerSlot = iterator.next().getValue();

			// sanity check
			Preconditions.checkState(
				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,
				""TaskManagerSlot %s is not in state FREE but %s."",
				taskManagerSlot.getSlotId(), taskManagerSlot.getState());

			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {
				iterator.remove();
				return Optional.of(taskManagerSlot);
			}
		}

		return Optional.empty();
	}",Finds a matching slot for a given resource profile.,0,184
5848,"public PluginResult execute(String action, JSONArray args) {
		PluginResult.Status status = PluginResult.Status.OK;
		String result = """";		
		
		try {
			if (action.equals(""setBase64"")) {
				this.setBase64(args.getBoolean(0));
			}
			else if (action.equals(""takePicture"")) {
				this.takePicture(args.getInt(0));
			}
			return new PluginResult(status, result);
		} catch (JSONException e) {
			e.printStackTrace();
			return new PluginResult(PluginResult.Status.JSON_EXCEPTION);
		}
	}",Executes the request and returns CommandResult.,0,177
7786,"public Boolean fakeOuterBooleanSerialize(Boolean body) throws ApiException {
    return fakeOuterBooleanSerializeWithHttpInfo(body).getData();
      }",Test serialization of outer boolean types,0,33
6962,"public static int compareVersionPart(String a, String b) {
        if (WILDCARD.equals(a) || WILDCARD.equals(b)) {
            return 0;
        }
        // handle of the parts == null
        if (a == null) {
            if (b != null) {
                return -1;
            } else {
                return 0;
            }
        } else if (b == null) {
            return 1;
        }
        boolean dA = Character.isDigit(a.charAt(0));
        boolean dB = Character.isDigit(a.charAt(0));
        if (dA != dB) {
            // numeric part is always later
            return dA ? 1 : -1;
        }
        if (dA && dB) {
            int l = a.length() - b.length();
            if (l != 0) {
                return l;
            }
        }
        // if at this point dA == dB == true, all numbers have the same length, so we
        // can use lexicographic comparison to numeric parts as well.
        return a.compareTo(b);
    }","Compares version parts, RPM-like rules.",0,291
7393,"public boolean generateDeleteByExample() {
        if (isModelOnly) {
            return false;
        }
        
        boolean rc = tableConfiguration.isDeleteByExampleStatementEnabled();

        return rc;
    }",Implements the rule for generating the delete by example SQL Map element and DAO method.,0,54
5517,"public BufferedBlockOutStream getOutStream(long blockId, long blockSize, WorkerNetAddress address)
      throws IOException {
    if (blockSize == -1) {
      try (CloseableResource<BlockMasterClient> blockMasterClientResource =
          mContext.acquireMasterClientResource()) {
        blockSize = blockMasterClientResource.get().getBlockInfo(blockId).getLength();
      } catch (AlluxioException e) {
        throw new IOException(e);
      }
    }
    // No specified location to write to.
    if (address == null) {
      throw new RuntimeException(ExceptionMessage.NO_WORKER_AVAILABLE.getMessage());
    }
    // Location is local.
    if (NetworkAddressUtils.getLocalHostName(ClientContext.getConf()).equals(address.getHost())) {
      if (mContext.hasLocalWorker()) {
        return new LocalBlockOutStream(blockId, blockSize);
      } else {
        throw new IOException(ExceptionMessage.NO_LOCAL_WORKER.getMessage(""write""));
      }
    }
    // Location is specified and it is remote.
    return new RemoteBlockOutStream(blockId, blockSize, address);
  }",Gets a stream to write data to a block.,0,267
5671,"private long resolvePeriodIndexToWindowSequenceNumber(Object periodUid) {
    int windowIndex = timeline.getPeriodByUid(periodUid, period).windowIndex;
    if (oldFrontPeriodUid != null) {
      int oldFrontPeriodIndex = timeline.getIndexOfPeriod(oldFrontPeriodUid);
      if (oldFrontPeriodIndex != C.INDEX_UNSET) {
        int oldFrontWindowIndex = timeline.getPeriod(oldFrontPeriodIndex, period).windowIndex;
        if (oldFrontWindowIndex == windowIndex) {
          // Try to match old front uid after the queue has been cleared.
          return oldFrontPeriodWindowSequenceNumber;
        }
      }
    }
    MediaPeriodHolder mediaPeriodHolder = getFrontPeriod();
    while (mediaPeriodHolder != null) {
      if (mediaPeriodHolder.uid.equals(periodUid)) {
        // Reuse window sequence number of first exact period match.
        return mediaPeriodHolder.info.id.windowSequenceNumber;
      }
      mediaPeriodHolder = mediaPeriodHolder.getNext();
    }
    mediaPeriodHolder = getFrontPeriod();
    while (mediaPeriodHolder != null) {
      int indexOfHolderInTimeline = timeline.getIndexOfPeriod(mediaPeriodHolder.uid);
      if (indexOfHolderInTimeline != C.INDEX_UNSET) {
        int holderWindowIndex = timeline.getPeriod(indexOfHolderInTimeline, period).windowIndex;
        if (holderWindowIndex == windowIndex) {
          // As an alternative, try to match other periods of the same window.
          return mediaPeriodHolder.info.id.windowSequenceNumber;
        }
      }
      mediaPeriodHolder = mediaPeriodHolder.getNext();
    }
    // If no match is found, create new sequence number.
    return nextWindowSequenceNumber++;
  }",Resolves the specified period uid to a corresponding window sequence number.,0,346
7673,"protected Object convertTimestampToEpochMillisAsDate(Column column, Field fieldDefn, Object data) {
        // epoch is the fallback value
        return convertValue(column, fieldDefn, data, 0L, (r) -> {
            try {
                r.deliver(new java.util.Date(Timestamp.toEpochMillis(data, adjuster)));
            } catch (IllegalArgumentException e) {
            }
        });
    }",Converts a value object for an expected JDBC type of  Types#TIMESTAMP to  java.util.Date values representing milliseconds past epoch.,0,108
5704,"public int getSourceFileIndex() {
		return sourceFileIndex & 0xffff;
	}",The value of the sourcefile_index item must be a valid index into the constant_pool table.,0,23
5328,"public char[] toCharArray(int startIndex, int endIndex) {
        endIndex = validateRange(startIndex, endIndex);
        int len = endIndex - startIndex;
        if (len == 0) {
            return ArrayUtils.EMPTY_CHAR_ARRAY;
        }
        char chars[] = new char[len];
        System.arraycopy(buf, startIndex, chars, 0, len);
        return chars;
    }",Copies part of the builder's character array into a new character array.,0,120
6913,"public Contact getContact(String id)
    {
        try
        {
            return findContact(JidCreate.from(id));
        }
        catch (XmppStringprepException e)
        {
            return null;
        }
    }",Returns the Contact with the specified address or identifier.,0,61
7262,"public String combine(String pattern1, String pattern2) {
		if (!StringUtils.hasText(pattern1) && !StringUtils.hasText(pattern2)) {
			return """";
		}
		else if (!StringUtils.hasText(pattern1)) {
			return pattern2;
		}
		else if (!StringUtils.hasText(pattern2)) {
			return pattern1;
		}
		else if (match(pattern1, pattern2)) {
			return pattern2;
		}
		else if (pattern1.endsWith(""/*"")) {
			if (pattern2.startsWith(""/"")) {
				// /hotels/* + /booking -> /hotels/booking
				return pattern1.substring(0, pattern1.length() - 1) + pattern2.substring(1);
			}
			else {
				// /hotels/* + booking -> /hotels/booking
				return pattern1.substring(0, pattern1.length() - 1) + pattern2;
			}
		}
		else if (pattern1.endsWith(""/**"")) {
			if (pattern2.startsWith(""/"")) {
				// /hotels/** + /booking -> /hotels/**/booking
				return pattern1 + pattern2;
			}
			else {
				// /hotels/** + booking -> /hotels/**/booking
				return pattern1 + ""/"" + pattern2;
			}
		}
		else {
			int dotPos1 = pattern1.indexOf('.');
			int dotPos2 = pattern2.indexOf('.');
			if (dotPos1 == -1 && dotPos2 == -1) {
				// simply concatenate the two patterns
				if (pattern1.endsWith(""/"") || pattern2.startsWith(""/"")) {
					return pattern1 + pattern2;
				}
				else {
					return pattern1 + ""/"" + pattern2;
				}
			}
			String fileName1 = """";
			String extension1 = """";
			if (dotPos1 != -1) {
				fileName1 = pattern1.substring(0, dotPos1);
				extension1 = pattern1.substring(dotPos1);
			}
			else {
				fileName1 = pattern1;
			}
			String fileName2 = """";
			String extension2 = """";
			if (dotPos2 != -1) {
				fileName2 = pattern2.substring(0, dotPos2);
				extension2 = pattern2.substring(dotPos2);
			}
			else {
				fileName2 = pattern2;
			}
			String fileName = fileName1.endsWith(""*"") ? fileName2 : fileName2;
			String extension = extension1.startsWith(""*"") ? extension2 : extension1;

			return fileName + extension;
		}
	}",Combines two patterns into a new pattern that is returned.,0,692
7186,"public Collection<Object> findPatients(String searchValue, boolean includeVoided) {
		
		// the list to return
		List<Object> patientList = new Vector<Object>();
		
		PatientService ps = Context.getPatientService();
		Collection<Patient> patients;
		
		try {
			patients = ps.getPatients(searchValue);
		}
		catch (APIAuthenticationException e) {
			patientList.add(""Error while attempting to find patients - "" + e.getMessage());
			return patientList;
		}
		
		patientList = new Vector<Object>(patients.size());
		for (Patient p : patients)
			patientList.add(new PatientListItem(p));
		
		// if only 2 results found and a number was not in the
		// search, then do a decapitated search: trim each word
		// down to the first three characters and search again
		if (patientList.size() < 3 && !searchValue.matches("".*\\d+.*"")) {
			String[] names = searchValue.split("" "");
			String newSearch = """";
			for (String name : names) {
				if (name.length() > 3)
					name = name.substring(0, 4);
				newSearch += "" "" + name;
			}
			
			newSearch = newSearch.trim();
			Collection<Patient> newPatients = ps.getPatients(newSearch);
			newPatients.removeAll(patients); // remove the potential first two patients from these hits
			if (newPatients.size() > 0) {
				patientList.add(""Minimal patients returned. Results for <b>"" + newSearch + ""</b>"");
				for (Patient p : newPatients) {
					PatientListItem pi = new PatientListItem(p);
					patientList.add(pi);
				}
			}
		}
		//no results found and a number was in the search --
		//should check whether the check digit is correct.
		else if (patientList.size() == 0 && searchValue.matches("".*\\d+.*"")) {
			
			//Looks through all the patient identifier validators to see if this type of identifier
			//is supported for any of them.  If it isn't, then no need to warn about a bad check
			//digit.  If it does match, then if any of the validators validates the check digit
			//successfully, then the user is notified that the identifier has been entered correctly.
			//Otherwise, the user is notified that the identifier was entered incorrectly.
			
			Collection<IdentifierValidator> pivs = ps.getAllIdentifierValidators();
			boolean shouldWarnUser = true;
			boolean validCheckDigit = false;
			boolean identifierMatchesValidationScheme = false;
			
			for (IdentifierValidator piv : pivs) {
				try {
					if (piv.isValid(searchValue)) {
						shouldWarnUser = false;
						validCheckDigit = true;
					}
					identifierMatchesValidationScheme = true;
				}
				catch (UnallowedIdentifierException e) {}
			}
			
			if (identifierMatchesValidationScheme) {
				if (shouldWarnUser)
					patientList
					        .add(""<p style=\""color:red; font-size:big;\""><b>WARNING: Identifier has been typed incorrectly!  Please double check the identifier.</b></p>"");
				else if (validCheckDigit)
					patientList
					        .add(""<p style=\""color:green; font-size:big;\""><b>This identifier has been entered correctly, but still no patients have been found.</b></p>"");
			}
		}
		
		return patientList;
	}",Search on the searchValue.,0,713
6805,"public static boolean isNullOrEmpty(String s) {
    return s == null || s.isEmpty();
  }",Convenience function to test whether a string is empty.,0,38
6396,"public List<Connection> getConnections(final ConnectionMode connectionMode, final String dataSourceName, final int connectionSize, final TransactionType transactionType) throws SQLException {
        DataSource dataSource = TransactionType.XA == transactionType ? xaDataSources.get(dataSourceName) : dataSources.get(dataSourceName);
        if (1 == connectionSize) {
            return Collections.singletonList(dataSource.getConnection());
        }
        if (ConnectionMode.CONNECTION_STRICTLY == connectionMode) {
            return createConnections(dataSource, connectionSize);
        }
        synchronized (dataSource) {
            return createConnections(dataSource, connectionSize);
        }
    }",Get connections.,0,168
5866,"public static Builder sentinel(String host, int port, String masterId) {
            return sentinel(host, port, masterId, null);
        }","Set Sentinel host, port and master id.",0,46
7492,"public SAMLDocumentHolder idpInitiatedLogin(UserRepresentation user, Binding expectedResponseBinding, boolean consentRequired, boolean consent) {
        return getSamlResponse(expectedResponseBinding, (client, context, strategy) -> {
            HttpGet get = new HttpGet(samlEndpoint);
            CloseableHttpResponse response = client.execute(get);
            assertThat(response, statusCodeIsHC(Response.Status.OK));

            String loginPageText = EntityUtils.toString(response.getEntity(), ""UTF-8"");
            response.close();

            assertThat(loginPageText, containsString(""login""));

            HttpUriRequest loginRequest = handleLoginPage(user, loginPageText);

            if (consentRequired) {
                // Client requires consent
                response = client.execute(loginRequest, context);
                String consentPageText = EntityUtils.toString(response.getEntity(), ""UTF-8"");
                loginRequest = handleConsentPage(consentPageText, consent);
            }

            strategy.setRedirectable(false);
            return client.execute(loginRequest, context);
        });
    }",Send request for login form and then login using user param.,0,266
7538,"private static CacheConfiguration marshallerSystemCache(boolean client) {
            if (!client) {
                CacheConfiguration cache = new CacheConfiguration();

                cache.setName(CU.MARSH_CACHE_NAME);
                cache.setCacheMode(REPLICATED);
                cache.setAtomicityMode(TRANSACTIONAL);
                cache.setSwapEnabled(false);
                cache.setRebalanceMode(SYNC);
                cache.setWriteSynchronizationMode(FULL_SYNC);
                cache.setAffinity(new CacheRendezvousAffinityFunction(false, 100));
                cache.setNodeFilter(CacheConfiguration.ALL_NODES);

                return cache;
            }

            return null;
        }",Creates marshaller system cache configuration.,0,144
6751,"public int getValvePosition() {
        return this.valvePosition;
    }",Returns the current valve position of this thermostat in percent.,0,21
6847,"public MapMessage clone() {
            try {
                return (MapMessage) super.clone();
            } catch (CloneNotSupportedException e) {
                // Not possible
                throw new AssertionError();
            }
        }",shallow clone,0,61
7545,"public static byte or(byte first, byte second) {
        MOCKING_PROGRESS.getArgumentMatcherStorage().reportOr();
        return 0;
    }",byte argument that matches any of the given argument matchers.,0,41
5403,"static Iterator<Integer> from(int value) {
        return new Iterator<Integer>() {
            private int next = value;

            @Override
            public boolean hasNext() {
                return true;
            }

            @Override
            public Integer next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }
                return next++;
            }
        };
    }",Returns an infinite iterator of int values starting from  value.,0,124
5728,"public AndroidResourcesProvider toProvider(Label label, ResourceContainer newDirectResource) {
    if (neverlink) {
      return ResourceDependencies.empty().toProvider(label);
    }
    return AndroidResourcesProvider.create(
        label,
        NestedSetBuilder.<ResourceContainer>naiveLinkOrder()
            .addTransitive(transitiveResources)
            .addTransitive(directResources)
            .build(),
        NestedSetBuilder.<ResourceContainer>naiveLinkOrder().add(newDirectResource).build());
  }",Creates a new AndroidResourcesProvider with the supplied ResourceContainer as the direct dep.,0,112
7109,"public static GetClusterStatusRequest buildGetClusterStatusRequest(EnumSet<Option> options) {
    return GetClusterStatusRequest.newBuilder()
                                  .addAllOptions(ProtobufUtil.toOptions(options))
                                  .build();
  }",Creates a protocol buffer GetClusterStatusRequest,0,49
7700,"private Timestamp[] getTimeframe()
    {
        Timestamp oldest = Timestamp.ZERO.plus(1000000);
        Timestamp newest = Timestamp.ZERO;
        for (Habit h : selectedHabits)
        {
            if(h.getRepetitions().getOldest() == null || h.getRepetitions().getNewest() == null)
                continue;
            Timestamp currOld = h.getRepetitions().getOldest().getTimestamp();
            Timestamp currNew = h.getRepetitions().getNewest().getTimestamp();
            oldest = currOld.isOlderThan(oldest) ? oldest : currOld;
            newest = currNew.isNewerThan(newest) ? newest : currNew;
        }
        return new Timestamp[]{oldest, newest};
    }",Gets the overall timeframe of the selected habits.,0,207
7709,"public static boolean isComparable(RelDataType type1, RelDataType type2) {
    if (type1.isStruct() != type2.isStruct()) {
      return false;
    }

    if (type1.isStruct()) {
      int n = type1.getFieldCount();
      if (n != type2.getFieldCount()) {
        return false;
      }
      for (Pair<RelDataTypeField, RelDataTypeField> pair
          : Pair.zip(type1.getFieldList(), type2.getFieldList())) {
        if (!isComparable(pair.left.getType(), pair.right.getType())) {
          return false;
        }
      }
      return true;
    }
    RelDataTypeFamily family1 = null;
    RelDataTypeFamily family2 = null;

    // REVIEW jvs 2-June-2005:  This is needed to keep
    // the Saffron type system happy.
    if (type1.getSqlTypeName() != null) {
      family1 = type1.getSqlTypeName().getFamily();
    }
    if (type2.getSqlTypeName() != null) {
      family2 = type2.getSqlTypeName().getFamily();
    }
    if (family1 == null) {
      family1 = type1.getFamily();
    }
    if (family2 == null) {
      family2 = type2.getFamily();
    }
    if (family1 == family2) {
      return true;
    }

    // If one of the operators is of type 'ANY', return true.
    if (family1 == SqlTypeFamily.ANY
        || family2 == SqlTypeFamily.ANY) {
      return true;
    }

    // We can implicitly convert from character to date
    if (family1 == SqlTypeFamily.CHARACTER
        && canConvertStringInCompare(family2)
        || family2 == SqlTypeFamily.CHARACTER
        && canConvertStringInCompare(family1)) {
      return true;
    }

    return false;
  }",Returns whether two types are comparable.,0,487
6624,"public Table getTable(final byte[] tableName) throws
        IOException {
      String table = Bytes.toString(tableName);
      return connectionCache.getTable(table);
    }",Creates and returns a Table instance from a given table name.,0,51
7358,"public boolean removeStream(Stream stream) {
        final boolean removed = streams.remove(stream);

        if (removed) {
            indexSets.clear();
            for (Stream s : streams) {
                indexSets.addAll(s.getIndexSets());
            }
        }

        return removed;
    }",Remove the stream assignment from this message.,0,92
5747,"private boolean isKnownVersion(long version) {
        if (version > currentVersion || version < 0) {
            return false;
        }
        if (version == currentVersion || chunks.isEmpty()) {
            // no stored data
            return true;
        }
        // need to check if a chunk for this version exists
        Chunk c = getChunkForVersion(version);
        if (c == null) {
            return false;
        }
        // also, all chunks referenced by this version
        // need to be available in the file
        MVMap<String, String> oldMeta = getMetaMap(version);
        try {
            for (Iterator<String> it = oldMeta.keyIterator(""chunk."");
                    it.hasNext();) {
                String chunkKey = it.next();
                if (!chunkKey.startsWith(""chunk."")) {
                    break;
                }
                if (!meta.containsKey(chunkKey)) {
                    String s = oldMeta.get(chunkKey);
                    Chunk c2 = Chunk.fromString(s);
                    Chunk test = readChunkHeaderAndFooter(c2.block, c2.id);
                    if (test == null) {
                        return false;
                    }
                }
            }
        } catch (IllegalStateException e) {
            // the chunk missing where the metadata is stored
            return false;
        }
        return true;
    }",Check whether all data can be read from this version.,0,348
6757,"public int readAndProcess() throws IOException, InterruptedException {
      // Try and read in an int.  If new connection, the int will hold the 'HBas' HEADER.  If it
      // does, read in the rest of the connection preamble, the version and the auth method.
      // Else it will be length of the data to read (or -1 if a ping).  We catch the integer
      // length into the 4-byte this.dataLengthBuffer.
      int count = read4Bytes();
      if (count < 0 || dataLengthBuffer.remaining() > 0) {
        return count;
      }

      // If we have not read the connection setup preamble, look to see if that is on the wire.
      if (!connectionPreambleRead) {
        count = readPreamble();
        if (!connectionPreambleRead) {
          return count;
        }

        count = read4Bytes();
        if (count < 0 || dataLengthBuffer.remaining() > 0) {
          return count;
        }
      }

      // We have read a length and we have read the preamble.  It is either the connection header
      // or it is a request.
      if (data == null) {
        dataLengthBuffer.flip();
        int dataLength = dataLengthBuffer.getInt();
        if (dataLength == RpcClient.PING_CALL_ID) {
          if (!useWrap) { //covers the !useSasl too
            dataLengthBuffer.clear();
            return 0;  //ping message
          }
        }
        if (dataLength < 0) { // A data length of zero is legal.
          throw new DoNotRetryIOException(""Unexpected data length ""
              + dataLength + ""!! from "" + getHostAddress());
        }

        if (dataLength > maxRequestSize) {
          String msg = ""RPC data length of "" + dataLength + "" received from ""
              + getHostAddress() + "" is greater than max allowed ""
              + maxRequestSize + "". Set \"""" + MAX_REQUEST_SIZE
              + ""\"" on server to override this limit (not recommended)"";
          LOG.warn(msg);

          if (connectionHeaderRead && connectionPreambleRead) {
            incRpcCount();
            // Construct InputStream for the non-blocking SocketChannel
            // We need the InputStream because we want to read only the request header
            // instead of the whole rpc.
            ByteBuffer buf = ByteBuffer.allocate(1);
            InputStream is = new InputStream() {
              @Override
              public int read() throws IOException {
                channelRead(channel, buf);
                buf.flip();
                int x = buf.get();
                buf.flip();
                return x;
              }
            };
            CodedInputStream cis = CodedInputStream.newInstance(is);
            int headerSize = cis.readRawVarint32();
            Message.Builder builder = RequestHeader.newBuilder();
            ProtobufUtil.mergeFrom(builder, cis, headerSize);
            RequestHeader header = (RequestHeader) builder.build();

            // Notify the client about the offending request
            Call reqTooBig = new Call(header.getCallId(), this.service, null, null, null,
                null, this, responder, 0, null, this.addr,0);
            metrics.exception(REQUEST_TOO_BIG_EXCEPTION);
            setupResponse(null, reqTooBig, REQUEST_TOO_BIG_EXCEPTION, msg);
            // We are going to close the connection, make sure we process the response
            // before that. In rare case when this fails, we still close the connection.
            responseWriteLock.lock();
            responder.processResponse(reqTooBig);
            responseWriteLock.unlock();
          }
          // Close the connection
          return -1;
        }

        data = ByteBuffer.allocate(dataLength);

        // Increment the rpc count. This counter will be decreased when we write
        //  the response.  If we want the connection to be detected as idle properly, we
        //  need to keep the inc / dec correct.
        incRpcCount();
      }

      count = channelRead(channel, data);

      if (count >= 0 && data.remaining() == 0) { // count==0 if dataLength == 0
        process();
      }

      return count;
    }",Read off the wire.,0,830
6413,"protected ImmutableBytesWritable createGroupKey(byte[][] vals) {
    if(vals == null) {
      return null;
    }
    StringBuilder sb =  new StringBuilder();
    for(int i = 0; i < vals.length; i++) {
      if(i > 0) {
        sb.append("" "");
      }
      try {
        sb.append(new String(vals[i], HConstants.UTF8_ENCODING));
      } catch (UnsupportedEncodingException e) {
        throw new RuntimeException(e);
      }
    }
    return new ImmutableBytesWritable(Bytes.toBytes(sb.toString()));
  }",Create a key by concatenating multiple column values.,0,187
5885,"public float getRadius() {
        if(mCircleBox == null) return 0;
        else return mCircleBox.width() / 2f;
    }",returns the radius of the pie-chart,0,45
6135,"public Gson create() {
    addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, serializers, deserializers);

    ExclusionStrategy deserializeExclusionStrategy = combine(this.deserializeExclusionStrategy,
        new GsonExclusionStrategy(ignoreVersionsAfter, modifiers, true,
        true, serializeInnerClasses, false, excludeFieldsWithoutExposeAnnotation));
    ExclusionStrategy serializeExclusionStrategy = combine(this.serializeExclusionStrategy,
        new GsonExclusionStrategy(ignoreVersionsAfter, modifiers, true, true,
            serializeInnerClasses, excludeFieldsWithoutExposeAnnotation, false));

    return new Gson(deserializeExclusionStrategy, serializeExclusionStrategy, fieldNamingPolicy,
        instanceCreators.copyOf().makeUnmodifiable(), serializeNulls,
        serializers.copyOf().makeUnmodifiable(), deserializers.copyOf().makeUnmodifiable(),
        complexMapKeySerialization, generateNonExecutableJson, escapeHtmlChars, prettyPrinting,
        serializeSpecialFloatingPointValues, longSerializationPolicy, typeAdapterFactories);
  }",Creates a  Gson instance based on the current configuration.,0,198
5702,"public DependencyGraph<Address> getDependencyGraph(TaskMonitor monitor)
			throws CancelledException {

		DependencyGraph<Address> graph = new DependencyGraph<Address>();
		Deque<Address> startPoints = findStartPoints();
		Set<Address> unprocessed = new TreeSet<Address>(functionSet); // reliable processing order

		while (!unprocessed.isEmpty()) {
			monitor.checkCanceled();
			Address functionEntry = getNextStartFunction(startPoints, unprocessed);
			processForward(graph, unprocessed, functionEntry, monitor);
		}

		return graph;
	}",Builds the DependencyGraph for the acyclic call graph represented by this object.,0,148
5745,"public List<RTPExtension> getSupportedExtensions()
    {
        return device.getSupportedExtensions();
    }",Returns a List containing (at the time of writing) a single extension descriptor indicating SENDRECV for mixer-to-client audio levels.,0,27
5721,"public static Config load(ConfigParseOptions parseOptions) {
        return load(parseOptions, ConfigResolveOptions.defaults());
    }",Like  #load() but allows specifying parse options,0,34
5419,"public static boolean isAuthenticationEnabled() {
    return !Configuration.getEnum(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.class)
        .equals(AuthType.NOSASL);
  }",Checks if authentication is enabled.,0,43
5664,"static JSType unifyUnknowns(JSType t1, JSType t2) {
    if (t1.isUnknown()) {
      return t2;
    } else if (t2.isUnknown()) {
      return t1;
    } else if (t1.isTop() && t2.isTop()) {
      return TOP;
    } else if (t1.isTop() || t2.isTop()) {
      return null;
    }

    ImmutableSet<EnumType> newEnums = null;
    if (t1.enums == null) {
      if (t2.enums != null) {
        return null;
      }
      newEnums = null;
    } else if (t2.enums == null) {
      return null;
    } else if (!t1.enums.equals(t2.enums)) {
      return null;
    } else {
      newEnums = t1.enums;
    }

    int t1Mask = promoteBoolean(t1.mask);
    int t2Mask = promoteBoolean(t2.mask);
    if (t1Mask != t2Mask || !Objects.equal(t1.typeVar, t2.typeVar)) {
      return null;
    }
    // All scalar types are equal
    if ((t1Mask & NON_SCALAR_MASK) == 0) {
      return t1;
    }
    if (t1.objs.size() != t2.objs.size()) {
      return null;
    }

    Set<ObjectType> ununified = Sets.newHashSet(t2.objs);
    Set<ObjectType> unifiedObjs = Sets.newHashSet();
    for (ObjectType objType1 : t1.objs) {
      ObjectType unified = objType1;
      boolean hasUnified = false;
      for (ObjectType objType2 : t2.objs) {
        ObjectType tmp = ObjectType.unifyUnknowns(unified, objType2);
        if (tmp != null) {
          hasUnified = true;
          ununified.remove(objType2);
          unified = tmp;
        }
      }
      if (!hasUnified) {
        return null;
      }
      unifiedObjs.add(unified);
    }
    if (!ununified.isEmpty()) {
      return null;
    }
    return new JSType(
        t1Mask, null, ImmutableSet.copyOf(unifiedObjs), t1.typeVar, newEnums);
  }","Unify the two types symmetrically, given that we have already instantiated the type variables of interest in  t1 and  t2, treating",0,648
7831,"public static long safeSubtract(long val1, long val2) {
        long diff = val1 - val2;
        // If there is a sign change, but the two values have different signs...
        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
            throw new ArithmeticException
                (""The calculation caused an overflow: "" + val1 + "" - "" + val2);
        }
        return diff;
    }",Subtracts two values throwing an exception if overflow occurs.,0,112
6168,"public static Vector getSignatureAlgorithmsExtension(Hashtable extensions)
        throws IOException
    {
        byte[] extensionData = getExtensionData(extensions, EXT_signature_algorithms);
        return extensionData == null ? null : readSignatureAlgorithmsExtension(extensionData);
    }",Get a 'signature_algorithms' extension from extensions.,0,64
7267,"public AnnotationMetadata buildForMethod(T element) {
        DefaultAnnotationMetadata annotationMetadata = new DefaultAnnotationMetadata();
        return buildInternal(null, element, annotationMetadata, false);
    }",Build the meta data for the given method element excluding any class metadata.,0,48
5422,"public static DbSupport createDbSupport(JdbcTemplate jdbcTemplate) {
        String databaseProductName = getDatabaseProductName(jdbcTemplate);

        LOG.debug(""Database: "" + databaseProductName);

        if (""H2"".equals(databaseProductName)) {
            return new H2DbSupport(jdbcTemplate);
        }
        if (""HSQL Database Engine"".equals(databaseProductName)) {
            return new HsqlDbSupport(jdbcTemplate);
        }
        if (""Microsoft SQL Server"".equals(databaseProductName)) {
            return new SQLServerDbSupport(jdbcTemplate);
        }
        if (""MySQL"".equals(databaseProductName)) {
            return new MySQLDbSupport(jdbcTemplate);
        }
        if (""Oracle"".equals(databaseProductName)) {
            return new OracleDbSupport(jdbcTemplate);
        }
        if (""PostgreSQL"".equals(databaseProductName)) {
            return new PostgreSQLDbSupport(jdbcTemplate);
        }
        if ((databaseProductName != null) && databaseProductName.startsWith(""DB2"")) {
            // DB2 returns also OS it's running on
            // e.g. DB2/NT
            return new DB2DbSupport(jdbcTemplate);
        }

        throw new FlywayException(""Unsupported Database: "" + databaseProductName);
    }",Initializes the appropriate DbSupport class for the database product used by the data source.,0,294
6220,"public String getType(TypeMirror type) {
		if (type == null) {
			return null;
		}
		return type.accept(this.typeExtractor, null);
	}",Return the type of the specified  TypeMirror including all its generic information.,0,55
5300,"private static Collection collection(Object value) {
        if (null == value) {
            return Collections.EMPTY_LIST;
        } else if (value.getClass().isArray()) {
            final int len = java.lang.reflect.Array.getLength(value);
            List list = new ArrayList(len);

            for (int i = 0; i < len; i++) {
                Object val = Array.get(value, i);
                list.add(val);
            }
            return list;
        } else if (value instanceof FeatureCollection){
            return Collections.singletonList(value); // force singleton for FeatureCollectionType
        } else if (value instanceof Collection) {
            return (Collection) value;
        }

        return Collections.singletonList(value);
    }","Returns a collection view for value, taking care of the case where value is of an array type, in which case the collection returned contains the array elements, not the array itself.",0,234
5839,"public int compareTo(PrioritizableNode other) {
        // First always pick nodes without violation above nodes with violations
        if (!this.violatesSpares && other.violatesSpares) return -1;
        if (!other.violatesSpares && this.violatesSpares) return 1;

        // Choose active nodes
        if (this.node.state() == Node.State.active && other.node.state() != Node.State.active) return -1;
        if (other.node.state() == Node.State.active && this.node.state() != Node.State.active) return 1;

        // Choose active node that is not retired first (surplus is active but retired)
        if (!this.isSurplusNode && other.isSurplusNode) return -1;
        if (!other.isSurplusNode && this.isSurplusNode) return 1;

        // Choose inactive nodes
        if (this.node.state() == Node.State.inactive && other.node.state() != Node.State.inactive) return -1;
        if (other.node.state() == Node.State.inactive && this.node.state() != Node.State.inactive) return 1;

        // Choose reserved nodes from a previous allocation attempt (the exist in node repo)
        if (this.isInNodeRepoAndReserved() && ! other.isInNodeRepoAndReserved()) return -1;
        if (other.isInNodeRepoAndReserved() && ! this.isInNodeRepoAndReserved()) return 1;

        // Choose ready nodes
        if (this.node.state() == Node.State.ready && other.node.state() != Node.State.ready) return -1;
        if (other.node.state() == Node.State.ready && this.node.state() != Node.State.ready) return 1;

        if (this.node.state() != other.node.state())
            throw new IllegalStateException(""Nodes "" + this.node + "" and "" + other.node + "" have different states"");

        if (this.parent.isPresent() && other.parent.isPresent()) {
            int diskCostDifference = NodeResources.DiskSpeed.compare(this.parent.get().flavor().resources().diskSpeed(),
                                                                     other.parent.get().flavor().resources().diskSpeed());
            if (diskCostDifference != 0)
                return diskCostDifference;

            int storageCostDifference = NodeResources.StorageType.compare(this.parent.get().flavor().resources().storageType(),
                                                                          other.parent.get().flavor().resources().storageType());
            if (storageCostDifference != 0)
                return storageCostDifference;
        }

        int hostPriority = Double.compare(this.skewWithThis() - this.skewWithoutThis(),
                                          other.skewWithThis() - other.skewWithoutThis());
        if (hostPriority != 0) return hostPriority;

        // Choose cheapest node
        if (this.node.flavor().cost() < other.node.flavor().cost()) return -1;
        if (other.node.flavor().cost() < this.node.flavor().cost()) return 1;

        // Choose nodes where host is in more desirable state
        int thisHostStatePri = this.parent.map(host -> ALLOCATABLE_HOST_STATES.indexOf(host.state())).orElse(-2);
        int otherHostStatePri = other.parent.map(host -> ALLOCATABLE_HOST_STATES.indexOf(host.state())).orElse(-2);
        if (thisHostStatePri != otherHostStatePri) return otherHostStatePri - thisHostStatePri;

        // All else equal choose hostname alphabetically
        return this.node.hostname().compareTo(other.node.hostname());
    }",Compares two prioritizable nodes,0,976
6806,"private boolean contactFilter( long fixtureA, long fixtureB )
	{
		if( contactFilter != null )
			return contactFilter.shouldCollide( fixtures.get(fixtureA), fixtures.get(fixtureB));
		else
		{
			Filter filterA = fixtures.get(fixtureA).getFilterData();
			Filter filterB = fixtures.get(fixtureB).getFilterData();					

			if (filterA.groupIndex == filterB.groupIndex && filterA.groupIndex != 0)
			{
				return filterA.groupIndex > 0;
			}

			boolean collide = (filterA.maskBits & filterB.categoryBits) != 0 && (filterA.categoryBits & filterB.maskBits) != 0;
			return collide;
		}
	}",Internal method called from JNI in case a contact happens,0,209
5299,"boolean getNext(int i) throws IOException {
      boolean result = false;
      ImmutableBytesWritable ibw = new ImmutableBytesWritable();
      while (true) {
        if (!readers[i].next(keys[i], ibw)) {
          closeSubScanner(i);
          break;
        }
        if (keys[i].getTimestamp() <= this.timestamp) {
          vals[i] = ibw.get();
          result = true;
          break;
        }
      }
      return result;
    }",Get the next value from the specified reader.,0,151
7240,"public int compareRows(final Cell left, final Cell right) {
    // left and right can be exactly the same at the beginning of a row
    if (left == right) {
      return 0;
    }
    if (left instanceof ByteBufferedCell && right instanceof ByteBufferedCell) {
      return ByteBufferUtils.compareTo(((ByteBufferedCell) left).getRowByteBuffer(),
          ((ByteBufferedCell) left).getRowPosition(), left.getRowLength(),
          ((ByteBufferedCell) right).getRowByteBuffer(),
          ((ByteBufferedCell) right).getRowPosition(), right.getRowLength());
    }
    if (left instanceof ByteBufferedCell) {
      return ByteBufferUtils.compareTo(((ByteBufferedCell) left).getRowByteBuffer(),
          ((ByteBufferedCell) left).getRowPosition(), left.getRowLength(),
          right.getRowArray(), right.getRowOffset(), right.getRowLength());
    }
    if (right instanceof ByteBufferedCell) {
      return -(ByteBufferUtils.compareTo(((ByteBufferedCell) right).getRowByteBuffer(),
          ((ByteBufferedCell) right).getRowPosition(), right.getRowLength(),
          left.getRowArray(), left.getRowOffset(), left.getRowLength()));
    }
    return Bytes.compareTo(left.getRowArray(), left.getRowOffset(), left.getRowLength(),
        right.getRowArray(), right.getRowOffset(), right.getRowLength());
  }",Compares the rows of the left and right cell.,0,367
6694,"protected Connection getConnectionFromDriver(String username, String password) throws SQLException {
		Properties props = new Properties(getConnectionProperties());
		if (username != null) {
			props.setProperty(""user"", username);
		}
		if (password != null) {
			props.setProperty(""password"", password);
		}
		return getConnectionFromDriver(props);
	}","Build properties for the Driver, including the given username and password (if any), and obtain a corresponding Connection.",0,113
6509,"private ClientRWLock getBlockLock(long blockId) {
    ClientRWLock blockLock;
    synchronized (mSharedMapsLock) {
      blockLock = mLocks.get(blockId);
      if (blockLock != null) {
        blockLock.addReference();
      }
    }
    if (blockLock == null) {
      // Acquire the lock outside the synchronized section because #acquire might need to block.
      blockLock = mLockPool.acquire();
      synchronized (mSharedMapsLock) {
        if (mLocks.containsKey(blockId)) {
          // Someone else acquired a block lock for blockId while we were acquiring one. Use theirs.
          mLockPool.release(blockLock);
          blockLock = mLocks.get(blockId);
        } else {
          mLocks.put(blockId, blockLock);
        }
        blockLock.addReference();
      }
    }
    return blockLock;
  }","Returns the block lock for the given block id, acquiring such a lock if it doesn't exist yet.",0,191
5275,"public List<String> ls(String path, boolean recursive) throws InvalidPathException,
      FileDoesNotExistException {
    synchronized (mRoot) {
      Inode inode = getInode(path);
      if (inode == null) {
        throw new FileDoesNotExistException(path);
      }
      return _ls(inode, path, recursive);
    }
  }",Get the names of the sub-directories at the given path.,0,100
6938,"public Response testPostWithHeaders(String url, Object entity, Map<String, String> headers) throws Exception {
        // get the resource
        Invocation.Builder resourceBuilder = addProxiedEntities(client.target(url).request());

        // append any headers
        if (headers != null && !headers.isEmpty()) {
            for (String key : headers.keySet()) {
                resourceBuilder = resourceBuilder.header(key, headers.get(key));
            }
        }

        // perform the request
        return resourceBuilder.post(Entity.json(entity));
    }",Performs a POST using the specified url and entity body.,0,157
7783,"public static FlumeNodeState findByValue(int value) { 
    switch (value) {
      case 0:
        return HELLO;
      case 1:
        return IDLE;
      case 2:
        return CONFIGURING;
      case 3:
        return ACTIVE;
      case 4:
        return ERROR;
      case 5:
        return LOST;
      case 6:
        return DECOMMISSIONED;
      default:
        return null;
    }
  }","Find a the enum type by its integer value, as defined in the Thrift IDL.",0,125
6996,"public V getFromSnapshot(K key) {
        switch (transaction.isolationLevel) {
        case READ_UNCOMMITTED: {
            Snapshot<K,VersionedValue<V>> snapshot = getStatementSnapshot();
            VersionedValue<V> data = map.get(snapshot.root.root, key);
            if (data != null) {
                return data.getCurrentValue();
            }
            return null;
        }
        case REPEATABLE_READ:
        case SNAPSHOT:
        case SERIALIZABLE:
            if (transaction.hasChanges()) {
                Snapshot<K,VersionedValue<V>> snapshot = getStatementSnapshot();
                VersionedValue<V> data = map.get(snapshot.root.root, key);
                if (data != null) {
                    long id = data.getOperationId();
                    if (id != 0L && transaction.transactionId == TransactionStore.getTransactionId(id)) {
                        return data.getCurrentValue();
                    }
                }
            }
            //$FALL-THROUGH$
        case READ_COMMITTED:
        default:
            Snapshot<K,VersionedValue<V>> snapshot = getSnapshot();
            return getFromSnapshot(snapshot.root, snapshot.committingTransactions, key);
        }
    }","Get the value for the given key from a snapshot, or null if not found.",0,326
6908,"public Builder identifier(final String identifier) {
            if (fromGroup) {
                throw new IllegalStateException(
                        ""Identifier can not be changed when initialized from an existing group"");
            }

            this.identifier = identifier;
            return this;
        }",Sets the identifier of the builder.,0,62
5623,"public Expectation[] retrieveExistingExpectations(HttpRequest httpRequest) {
        HttpResponse httpResponse = sendRequest(request().withMethod(""PUT"").withPath(calculatePath(""retrieve"")).withQueryStringParameter(""type"", ""expectation"").withBody(httpRequest != null ? httpRequestSerializer.serialize(httpRequest) : """", Charsets.UTF_8));
        if (!Strings.isNullOrEmpty(httpResponse.getBodyAsString())) {
            return expectationSerializer.deserializeArray(httpResponse.getBodyAsString());
        } else {
            return new Expectation[0];
        }
    }","Retrieve the already setup expectations match the httpRequest parameter, use null for the parameter to retrieve all expectations",0,146
7684,"static public StringList packageListFromClassPath(String path) {
//    Map<String, Object> map = new HashMap<String, Object>();
    StringList list = new StringList();
    String pieces[] =
      PApplet.split(path, File.pathSeparatorChar);

    for (int i = 0; i < pieces.length; i++) {
      //System.out.println(""checking piece '"" + pieces[i] + ""'"");
      if (pieces[i].length() == 0) continue;

      if (pieces[i].toLowerCase().endsWith("".jar"") ||
          pieces[i].toLowerCase().endsWith("".zip"")) {
        //System.out.println(""checking "" + pieces[i]);
        packageListFromZip(pieces[i], list);

      } else {  // it's another type of file or directory
        File dir = new File(pieces[i]);
        if (dir.exists() && dir.isDirectory()) {
          packageListFromFolder(dir, null, list);
          //importCount = magicImportsRecursive(dir, null,
          //                                  map);
                                              //imports, importCount);
        }
      }
    }
//    int mapCount = map.size();
//    String output[] = new String[mapCount];
//    int index = 0;
//    Set<String> set = map.keySet();
//    for (String s : set) {
//      output[index++] = s.replace('/', '.');
//    }
//    return output;
    StringList outgoing = new StringList(list.size());
    for (String item : list) {
      outgoing.append(item.replace('/', '.'));
    }
    return outgoing;
  }","A classpath, separated by the path separator, will contain a series of .jar/.zip files or directories containing .class files, or containing subdirectories that have .class files.",0,329
7003,"public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {
		Assert.notNull(routerFunction, ""RouterFunction must not be null"");
		Assert.notNull(strategies, ""HandlerStrategies must not be null"");

		return new HttpWebHandlerAdapter(exchange -> {
			ServerRequest request = new DefaultServerRequest(exchange, strategies);
			addAttributes(exchange, request);
			HandlerFunction<?> handlerFunction = routerFunction.route(request).orElse(notFound());
			ServerResponse<?> response = handlerFunction.handle(request);
			return response.writeTo(exchange, strategies);
		});
	}","Convert the given plain RouterFunction routing function into a  HttpHandler, using the given strategies.",0,159
7702,"public boolean isVisible(String locator) {
    return ((RenderedWebElement) elementFinder.findElement(driver, locator)).isDisplayed();
  }",Determines if the specified element is visible.,0,40
6663,"private FileBlockInfo generateFileBlockInfo(LockedInodePath inodePath, BlockInfo blockInfo)
      throws InvalidPathException, FileDoesNotExistException {
    InodeFile file = inodePath.getInodeFile();
    FileBlockInfo fileBlockInfo = new FileBlockInfo();
    fileBlockInfo.setBlockInfo(blockInfo);
    fileBlockInfo.setUfsLocations(new ArrayList<>());

    // The sequence number part of the block id is the block index.
    long offset = file.getBlockSizeBytes() * BlockId.getSequenceNumber(blockInfo.getBlockId());
    fileBlockInfo.setOffset(offset);

    if (fileBlockInfo.getBlockInfo().getLocations().isEmpty() && file.isPersisted()) {
      // No alluxio locations, but there is a checkpoint in the under storage system. Add the
      // locations from the under storage system.
      long blockId = fileBlockInfo.getBlockInfo().getBlockId();
      List<String> locations = mUfsBlockLocationCache.get(blockId, inodePath.getUri(),
          fileBlockInfo.getOffset());
      if (locations != null) {
        fileBlockInfo.setUfsLocations(locations);
      }
    }
    return fileBlockInfo;
  }",Generates a  FileBlockInfo object from internal metadata.,0,244
7285,"public Declaration[] getRequiredDeclarations() {
        return this.restriction.getRequiredDeclarations();
    }","Literal constraints cannot have required declarations, so always return an empty array.",0,27
7741,"public FieldSelector build() {
            List<Path> result = new ArrayList<>();
            parse(fullyQualifiedFieldNames, name -> {
                String[] nameNodes = parseIntoParts(name, name, length -> length < 3, DOT);
                return new RemovePath(selectNamespacePartAsPattern(nameNodes), selectFieldPartAsNodes(nameNodes));
            }, result);
            parse(fullyQualifiedFieldReplacements, name -> {
                String[] replacement = parseIntoParts(name, name, length -> length != 2, COLON);
                String[] nameNodes = parseIntoParts(name, replacement[0], length -> length < 3, DOT);
                return new RenamePath(selectNamespacePartAsPattern(nameNodes), selectFieldPartAsNodes(nameNodes), replacement[1]);
            }, result);
            return new FieldSelector(result);
        }","Builds the filter selector that returns the field filter for a given collection identifier, using the comma-separated list of fully-qualified field names (for details, see  MongoDbConnectorConfig#FIELD_BLACKLIST) defining which fields (if any) should be excluded, and using the comma-separated list of fully-qualified field replacements (for details, see  MongoDbConnectorConfig#FIELD_RENAMES) defining which fields (if any) should be renamed.",0,234
7549,"public Flux<Payload> requestStream(Payload payload) {
            String streamName = payload.getDataUtf8();
            if (DATA_STREAM_NAME.equals(streamName)) {
                return Flux.from(dataPublisher);
            }
            return Flux.error(new IllegalArgumentException(streamName));
        }",Handle Request/Stream messages.,0,77
7085,"public ModelAndView handleRequest(final HttpServletRequest request, final HttpServletResponse response) {
        final J2EContext context = new J2EContext(request, response, this.oauthConfig.getSessionStore());
        final DefaultCallbackLogic callback = new DefaultCallbackLogic();
        callback.perform(context, oauthConfig, J2ENopHttpActionAdapter.INSTANCE, null, false, false);

        final String url = StringUtils.remove(response.getHeader(""Location""), ""redirect:"");
        final ProfileManager manager = WebUtils.getPac4jProfileManager(request, response);
        return oAuth20CallbackAuthorizeViewResolver.resolve(context, manager, url);
    }",Handle request.,0,163
5498,"protected HttpContext createHttpContext(Bundle bundle) {
        return httpContextFactoryService.createDefaultHttpContext(bundle);
    }",Creates a  HttpContext,0,27
6064,"public ContextSnapshot capture() {
        List<TraceSegmentRef> refs = this.segment.getRefs();
        if (refs != null && refs.size() > 0) {
            TraceSegmentRef ref = refs.get(0);
            return new ContextSnapshot(segment.getTraceSegmentId(),
                activeSpan().getSpanId(),
                segment.getRelatedGlobalTraces(), ref.getOperationId(), ref.getOperationName()
            );
        } else {
            AbstractTracingSpan firstSpan = first();
            return new ContextSnapshot(segment.getTraceSegmentId(),
                activeSpan().getSpanId(),
                segment.getRelatedGlobalTraces(), firstSpan.getOperationId(), firstSpan.getOperationName()
            );
        }
    }",Capture the snapshot of current context.,0,194
7719,"public TopicSubscriber createSubscriber(Topic topic, String messageSelector, boolean noLocal) throws JMSException {
        checkClosed();

        if (topic instanceof CustomDestination)  {
            CustomDestination customDestination = (CustomDestination) topic;
            return customDestination.createSubscriber(this, messageSelector, noLocal);
        }

        ActiveMQPrefetchPolicy prefetchPolicy = this.connection.getPrefetchPolicy();
        return new ActiveMQTopicSubscriber(this, getNextConsumerId(), ActiveMQMessageTransformation
                .transformDestination(topic), null, messageSelector, prefetchPolicy.getTopicPrefetch(), 
                prefetchPolicy.getMaximumPendingMessageLimit(), noLocal, false, asyncDispatch);
    }","Creates a nondurable subscriber to the specified topic, using a message selector or specifying whether messages published by its own connection should be delivered to it.",0,158
6242,"public static CharArraySet copy(Set<?> set) {
    return copy(Version.LUCENE_30, set);
  }",Returns a copy of the given set as a  CharArraySet.,0,35
6535,"public static byte[] toByteArray(InputStream in) throws IOException {
    checkNotNull(in);
    return toByteArrayInternal(in, new ArrayDeque<byte[]>(TO_BYTE_ARRAY_DEQUE_SIZE), 0);
  }",Reads all bytes from an input stream into a byte array.,0,56
5612,"public static Stream<Double> stream(final double[] self) {
        return Arrays.stream(self).mapToObj(Double::valueOf);
    }",Returns a sequential  Stream with the specified array as its source.,0,44
7698,"public static Log named(String name) {
        // a thread-safe SLF4J initialization routine is apparently hard, so I get to do dumb
        // shit like this
        while (true) {
            final org.slf4j.Logger logger = LoggerFactory.getLogger(name);
            if (logger instanceof Logger) {
                return forSlf4jLogger(logger);
            }
        }
    }",Returns a  Log instance with the given name.,0,82
6346,"public static boolean isJava17() {
        return getJavaMajorVersion() == 7;

    }",Is this Java 1.7,0,29
7016,"public boolean addFile(File sourceFile) {
    String filename = sourceFile.getName();
    File destFile = null;
    boolean isData = false;
    boolean replacement = false;

    if (FileUtils.hasExtension(sourceFile, Sketch.EXTENSIONS)) {
      destFile = new File(sketch.getFolder(), filename);
    } else {
      sketch.prepareDataFolder();
      destFile = new File(sketch.getDataFolder(), filename);
      isData = true;
    }

    // check whether this file already exists
    if (destFile.exists()) {
      Object[] options = { tr(""OK""), tr(""Cancel"") };
      String prompt = I18n.format(tr(""Replace the existing version of {0}?""), filename);
      int result = JOptionPane.showOptionDialog(editor,
                                                prompt,
                                                tr(""Replace""),
                                                JOptionPane.YES_NO_OPTION,
                                                JOptionPane.QUESTION_MESSAGE,
                                                null,
                                                options,
                                                options[0]);
      if (result == JOptionPane.YES_OPTION) {
        replacement = true;
      } else {
        return false;
      }
    }

    // If it's a replacement, delete the old file first,
    // otherwise case changes will not be preserved.
    // http://dev.processing.org/bugs/show_bug.cgi?id=969
    if (replacement) {
      boolean muchSuccess = destFile.delete();
      if (!muchSuccess) {
        Base.showWarning(tr(""Error adding file""),
                         I18n.format(tr(""Could not delete the existing ''{0}'' file.""), filename),
			 null);
        return false;
      }
    }

    // make sure they aren't the same file
    if (isData && sourceFile.equals(destFile)) {
      Base.showWarning(tr(""You can't fool me""),
                       tr(""This file has already been copied to the\n"" +
                         ""location from which where you're trying to add it.\n"" +
                         ""I ain't not doin nuthin'.""), null);
      return false;
    }

    // in case the user is ""adding"" the code in an attempt
    // to update the sketch's tabs
    if (!sourceFile.equals(destFile)) {
      try {
        Base.copyFile(sourceFile, destFile);

      } catch (IOException e) {
        Base.showWarning(tr(""Error adding file""),
                         I18n.format(tr(""Could not add ''{0}'' to the sketch.""), filename),
			 e);
        return false;
      }
    }

    if (!isData) {
      int tabIndex;
      if (replacement) {
        tabIndex = editor.findTabIndex(destFile);
        editor.getTabs().get(tabIndex).reload();
      } else {
        SketchFile sketchFile;
        try {
          sketchFile = sketch.addFile(destFile.getName());
          editor.addTab(sketchFile, null);
        } catch (IOException e) {
          // This does not pass on e, to prevent showing a backtrace for
          // ""normal"" errors.
          Base.showWarning(tr(""Error""), e.getMessage(), null);
          return false;
        }
        tabIndex = editor.findTabIndex(sketchFile);
      }
      editor.selectTab(tabIndex);
    }
    return true;
  }",Add a file to the sketch.,0,768
7107,"public CommonExpressionSegment extractCommonExpressionSegment(final Map<ParserRuleContext, Integer> placeholderIndexes, final ParserRuleContext expressionNode) {
        CommonExpressionSegment result = new CommonExpressionSegment(expressionNode.getStart().getStartIndex(), expressionNode.getStop().getStopIndex());
        Optional<ParserRuleContext> questionNode = ExtractorUtils.findFirstChildNode(expressionNode, RuleName.QUESTION);
        if (questionNode.isPresent()) {
            Integer index = placeholderIndexes.get(questionNode.get());
            result.setPlaceholderIndex(index);
            return result;
        }
        Optional<ParserRuleContext> bitExprNode = ExtractorUtils.findFirstChildNode(expressionNode, RuleName.BIT_EXPR);
        if (bitExprNode.isPresent() && 1 != bitExprNode.get().getChildCount()) {
            return result;
        }
        Optional<ParserRuleContext> numberNode = ExtractorUtils.findFirstChildNode(expressionNode, RuleName.NUMBER);
        if (numberNode.isPresent()) {
            result.setLiterals(NumberUtil.getExactlyNumber(numberNode.get().getText(), 10));
        }
        Optional<ParserRuleContext> stringNode = ExtractorUtils.findFirstChildNode(expressionNode, RuleName.STRING);
        if (stringNode.isPresent()) {
            String text = stringNode.get().getText();
            result.setLiterals(text.substring(1, text.length() - 1));
        }
        return result;
    }",Extract common expression segment.,0,353
7221,"public List<Collection> getCollections()
    {
        // We return a copy because we do not want people to add elements to this collection directly.
        return Arrays.asList(collections.toArray(new Collection[]{}));
    }",Get the collections in this community.,0,42
7510,"boolean isNextToLeftBound() {
        return transformer.isNextToLeftBound();
    }",Check if dragged view is next to the left bound.,0,21
6039,"private ServerAddress parseServerAddress(String source) {

		if (!StringUtils.hasText(source)) {
			LOG.warn(COULD_NOT_PARSE_ADDRESS_MESSAGE, ""source"", source);
			return null;
		}

		String[] hostAndPort = extractHostAddressAndPort(source.trim());

		if (hostAndPort.length > 2) {
			LOG.warn(COULD_NOT_PARSE_ADDRESS_MESSAGE, ""source"", source);
			return null;
		}

		try {
			InetAddress hostAddress = InetAddress.getByName(hostAndPort[0]);
			Integer port = hostAndPort.length == 1 ? null : Integer.parseInt(hostAndPort[1]);

			return port == null ? new ServerAddress(hostAddress) : new ServerAddress(hostAddress, port);
		} catch (UnknownHostException e) {
			LOG.warn(COULD_NOT_PARSE_ADDRESS_MESSAGE, ""host"", hostAndPort[0]);
		} catch (NumberFormatException e) {
			LOG.warn(COULD_NOT_PARSE_ADDRESS_MESSAGE, ""port"", hostAndPort[1]);
		}

		return null;
	}",Parses the given source into a  ServerAddress.,0,286
6259,"public static Vector<Integer> rangeClosedBy(int from, int toInclusive, int step) {
        return ofAll(ArrayType.<int[]> asPrimitives(int.class, Iterator.rangeClosedBy(from, toInclusive, step)));
    }","Creates a Vector of int numbers starting from  from, extending to  toInclusive, with  step.",0,67
7444,"public Response updateRealm(final RealmRepresentation rep) {
        auth.requireManage();

        logger.debug(""updating realm: "" + realm.getName());
        try {
            RepresentationToModel.updateRealm(rep, realm);
            if (rep.isRealmCacheEnabled() != null && session.realms() instanceof CacheRealmProvider) {
                CacheRealmProvider cacheRealmProvider = (CacheRealmProvider)session.realms();
                cacheRealmProvider.setEnabled(rep.isRealmCacheEnabled());
            }
            if (rep.isUserCacheEnabled() != null && session.userStorage() instanceof CacheUserProvider) {
                CacheUserProvider cache = (CacheUserProvider)session.userStorage();
                cache.setEnabled(rep.isUserCacheEnabled());
            }

            // Refresh periodic sync tasks for configured federationProviders
            List<UserFederationProviderModel> federationProviders = realm.getUserFederationProviders();
            UsersSyncManager usersSyncManager = new UsersSyncManager();
            for (final UserFederationProviderModel fedProvider : federationProviders) {
                usersSyncManager.refreshPeriodicSyncForProvider(session.getKeycloakSessionFactory(), session.getProvider(TimerProvider.class), fedProvider, realm.getId());
            }

            return Response.noContent().build();
        } catch (PatternSyntaxException e) {
            return Flows.errors().exists(""Specified regex pattern(s) is invalid."");
        } catch (ModelDuplicateException e) {
            return Flows.errors().exists(""Realm "" + rep.getRealm() + "" already exists."");
        }  catch (Exception e) {
            return Flows.errors().exists(""Failed to update "" + rep.getRealm() + "" Realm."");
        }
    }",Update the top-level information of this realm.,0,415
6710,"private String metaDataBlobName(SnapshotId snapshotId, boolean legacy) {
        if (legacy) {
            return LEGACY_METADATA_PREFIX + snapshotId.getSnapshot();
        } else {
            return METADATA_PREFIX + snapshotId.getSnapshot() + METADATA_SUFFIX;
        }
    }",Returns name of metadata blob,0,72
5963,"public String asString() throws IOException
    {
	    return IOUtil.toString( ReaderFactory.newXmlReader( getInputStream() ) );
    }",Returns XML model as string,0,40
6222,"private static Point skipHtmlComment(String[] text, Point fromPoint) {
        Point toPoint = fromPoint;
        toPoint = findChar(text, '>', toPoint);
        while (!text[toPoint.getLineNo()]
               .substring(0, toPoint.getColumnNo() + 1).endsWith(""-->"")) {
            toPoint = findChar(text, '>', getNextCharPos(text, toPoint));
        }
        return toPoint;
    }",Skips HTML comments.,0,126
6249,"public long getBytesAsLong() {
        long tmpSum = this.getHeadersSize() + this.getBodySizeAsLong();
        return tmpSum == 0 ? bytes : tmpSum;
    }",return the bytes returned by the response.,0,54
7355,"SocketAddress address() {
        return address;
    }",Resolve the socket address for this Spec.,0,17
5971,"public TableMetaData load(final String logicTableName, final ShardingRule shardingRule) {
        List<TableMetaData> actualTableMetaDataList = load(
                shardingRule.getTableRuleByLogicTableName(logicTableName).getActualDataNodes(), shardingRule.getShardingDataSourceNames());
        checkUniformed(logicTableName, actualTableMetaDataList);
        return actualTableMetaDataList.iterator().next();
    }",Load table meta data.,0,83
7648,"protected ApiResponse findMethodResponse(ApiResponses responses) {
        String code = null;
        for (String responseCode : responses.keySet()) {
            if (responseCode.startsWith(""2"") || responseCode.equals(""default"")) {
                if (code == null || code.compareTo(responseCode) > 0) {
                    code = responseCode;
                }
            }
        }
        if (code == null) {
            return null;
        }
        return responses.get(code);
    }",Override with any special handling of response codes,0,152
6818,"public int compareTo(Object o)
    {
        MetaContactImpl target = (MetaContactImpl) o;

        int isOnline
            = (contactsOnline > 0)
            ? 1
            : 0;
        int targetIsOnline
            = (target.contactsOnline > 0)
            ? 1
            : 0;

        return ( (10 - isOnline) - (10 - targetIsOnline)) * 1000000
            + getDisplayName().compareToIgnoreCase(target.getDisplayName())
            * 10000
            + getMetaUID().compareTo(target.getMetaUID());
    }",Compares this meta contact with the specified object for order.,0,155
6170,"public boolean isJavaWebStartSupported() {
        return !JavaUtils.isRunningWithPostJava8();
    }",Returns true if Java Web Start button should be displayed.,0,24
7199,"public static String encodeScheme(String scheme, Charset charset) {
		return encode(scheme, charset, HierarchicalUriComponents.Type.SCHEME);
	}",Encode the given URI scheme with the given encoding.,0,42
6432,"public Point getPoint(int position) {
        return HELPER.getPoint(this, position);
    }",Returns the point at the given position.,0,30
5376,"public BitmapRequestBuilder<byte[]> loadFromImage(byte[] model, final String id) {
            StreamByteArrayLoader loader = new StreamByteArrayLoader() {
                @Override
                public String getId(byte[] model) {
                    return id;
                }
            };

            LoadProvider<byte[], InputStream, Bitmap> loadProvider =
                    new FixedLoadProvider<byte[], InputStream, Bitmap>(loader, streamDataProvider);

            return new BitmapRequestBuilder<byte[]>(context, model, loadProvider, null, bitmapPool);
        }",Use a new  StreamByteArrayLoader to load an image from the given model.,0,148
7261,"private int[] activeCols(final double l1, final double l2, final double[] grad) {
      if (_allIn) return null;
      int selected = 0;
      int[] cols = null;
      if (_parms._alpha[0] > 0) {
        final double rhs = _parms._alpha[0] * (2 * l1 - l2);
        cols = MemoryManager.malloc4(_dinfo.fullN());
        int j = 0;
        int [] oldActiveCols = _taskInfo._activeCols;
        if (oldActiveCols == null) oldActiveCols = new int[0];
        for (int i = 0; i < _dinfo.fullN(); ++i)
          if ((j < oldActiveCols.length && i == oldActiveCols[j]) || grad[i] > rhs || grad[i] < -rhs) {
            cols[selected++] = i;
            if (j < oldActiveCols.length && i == oldActiveCols[j]) ++j;
          }
      }
      if (_parms._alpha[0] == 0 || selected == _dinfo.fullN()) {
        _allIn = true;
        _activeData = _dinfo;
        LogInfo(""strong rule at lambda_value="" + l1 + "", all "" + _dinfo.fullN() + "" coefficients are active"");
        return null;
      } else {
        LogInfo(""strong rule at lambda_value="" + l1 + "", got "" + selected + "" active cols out of "" + _dinfo.fullN() + "" total."");
        return Arrays.copyOf(cols, selected);
      }
    }",Apply strong rules to filter out expected innactive (with zero coefficient) predictors.,0,474
7880,"private boolean isBreakOnOpcode(Integer opcode) {
		boolean shouldBreak = false;
		if (config.isBreakOnPingPong()) {
			// break on every message type
			shouldBreak = true;
		} else {
			// break only on non-ping/pong
			boolean isPing = opcode.equals(WebSocketMessage.OPCODE_PING);
			boolean isPong = opcode.equals(WebSocketMessage.OPCODE_PONG);
			
			if (!isPing && !isPong) {
				shouldBreak = true;
			}
		}
		return shouldBreak;
	}",Check out if breakpoint should be applied on given  WebSocketMessageDTO#opcode.,0,132
5669,"public static boolean authenticateDomain(String domain, String hostname) {
        if (hostname == null || hostname.length() == 0 || hostname.trim().indexOf(' ') > -1) {
            // Do nothing if the target hostname is empty, null or contains whitespaces
            return false;
        }
        try {
            // Check if the remote hostname is in the blacklist
            if (!RemoteServerManager.canAccess(hostname)) {
                return false;
            }

            OutgoingServerSession session;
            // Check if a session, that is using server dialback, already exists to the desired
            // hostname (i.e. remote server). If no one exists then create a new session. The same
            // session will be used for the same hostname for all the domains to authenticate
            SessionManager sessionManager = SessionManager.getInstance();
            if (sessionManager == null) {
                // Server is shutting down while we are trying to create a new s2s connection
                return false;
            }
            session = sessionManager.getOutgoingServerSession(hostname);
            if (session == null) {
                // Try locating if the remote server has previously authenticated with this server
                for (IncomingServerSession incomingSession : sessionManager.getIncomingServerSessions(hostname)) {
                    for (String otherHostname : incomingSession.getValidatedDomains()) {
                        session = sessionManager.getOutgoingServerSession(otherHostname);
                        if (session != null) {
                            if (session.isUsingServerDialback()) {
                                // A session to the same remote server but with different hostname
                                // was found. Use this session.
                                break;
                            } else {
                                session = null;
                            }
                        }
                    }
                }
            }
            if (session == null) {
                int port = RemoteServerManager.getPortForServer(hostname);
                // No session was found to the remote server so make sure that only one is created
                session = sessionManager.getOutgoingServerSession(hostname);
                if (session == null) {
                    session = createOutgoingSession(domain, hostname, port);
                    if (session != null) {
                        // Add the validated domain as an authenticated domain
                        session.addAuthenticatedDomain(domain);
                        // Add the new hostname to the list of names that the server may have
                        session.addHostname(hostname);
                        // Notify the SessionManager that a new session has been created
                        sessionManager.outgoingServerSessionCreated((LocalOutgoingServerSession) session);
                        return true;
                    }
                } else {
                    Log.warn(""Fail to connect to {} for {}"", hostname, domain);
                    return false;
                }
            }
            // A session already exists. The session was established using server dialback so
            // it is possible to do piggybacking to authenticate more domains
            if (session.getAuthenticatedDomains().contains(domain) && session.getHostnames().contains(hostname)) {
                // Do nothing since the domain has already been authenticated
                return true;
            }
            // A session already exists so authenticate the domain using that session
            return session.authenticateSubdomain(domain, hostname);
        }
        catch (Exception e) {
            Log.error(""Error authenticating domain with remote server: "" + hostname, e);
        }
        return false;
    }",Creates a new outgoing connection to the specified hostname if no one exists.,0,602
6018,"public List<TraceSegmentObject> deserializeMultiple(String segmentJsonFile) throws Exception {
        List<TraceSegmentObject> segmentList = new ArrayList<>();
        streamReader(segmentList, new FileReader(segmentJsonFile));
        return segmentList;
    }",Read a json array file contains multiple segments.,0,63
6708,"public String toString () {
		StringBuilder sb = new StringBuilder();
		sb.append(getClass().getName());
		sb.append("", status: capacity=""); //$NON-NLS-1$
		sb.append(capacity());
		sb.append("" position=""); //$NON-NLS-1$
		sb.append(position());
		sb.append("" limit=""); //$NON-NLS-1$
		sb.append(limit());
		return sb.toString();
	}",Returns a string representing the state of this long buffer.,0,125
7018,"private static byte[] getImageInBytes(String imageID) 
    {
        return ProtocolIconIrcImpl.getImageInBytes(imageID);
    }",Returns the byte representation of the image corresponding to the given identifier.,0,33
5763,"public ObjectSinkNode getNextObjectSinkNode() {
        return this.nextRightTupleSinkNode;
    }",Returns the next node,0,21
7787,"public Mono<Client> testClientModel(Client body) throws RestClientException {
        Object postBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, ""Missing the required parameter 'body' when calling testClientModel"");
        }
        
        // create path and map variables
        final Map<String, Object> pathParams = new HashMap<String, Object>();

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] accepts = { 
            ""application/json""
        };
        final List<MediaType> accept = apiClient.selectHeaderAccept(accepts);
        final String[] contentTypes = { 
            ""application/json""
        };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<Client> returnType = new ParameterizedTypeReference<Client>() {};
        return apiClient.invokeAPI(""/fake"", HttpMethod.PATCH, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, accept, contentType, authNames, returnType);
    }",To test \&quot;client\&quot; model,0,384
5604,"public static MemorySegment allocateOffHeapUnsafeMemory(int size, Object owner) {
		// TODO: rollbacked to direct memory because of FLINK-13985
		return allocateUnpooledOffHeapMemory(size, owner);
	}",Allocates an off-heap unsafe memory and creates a new memory segment to represent that memory.,0,38
7171,"public MeetupsEntry remove(Serializable primaryKey)
		throws NoSuchMeetupsEntryException, SystemException {
		Session session = null;

		try {
			session = openSession();

			MeetupsEntry meetupsEntry = (MeetupsEntry)session.get(MeetupsEntryImpl.class,
					primaryKey);

			if (meetupsEntry == null) {
				if (_log.isWarnEnabled()) {
					_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
				}

				throw new NoSuchMeetupsEntryException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					primaryKey);
			}

			return remove(meetupsEntry);
		}
		catch (NoSuchMeetupsEntryException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}",Removes the meetups entry with the primary key from the database.,0,210
5560,"public boolean visit(Result r) throws IOException {
        this.current =
          HRegionInfo.getHRegionInfo(r, HConstants.REGIONINFO_QUALIFIER);
        if (this.current == null) {
          LOG.warn(""No serialized HRegionInfo in "" + r);
          return true;
        }
        if (!isInsideTable(this.current, tableNameBytes)) return false;
        // Else call super and add this Result to the collection.
        super.visit(r);
        // Stop collecting regions from table after we get one.
        return false;
      }",Checks if the specified table exists.,0,123
5949,"public static String decodeComponent(final String s, final Charset charset) {
        if (s == null) {
            return EMPTY_STRING;
        }
        return decodeComponent(s, 0, s.length(), charset, false);
    }",Decodes a bit of an URL encoded by a browser.,0,75
6077,"protected HttpEntity createRequestEntity(Exchange exchange) {
        Message in = exchange.getIn();
        if (in.getBody() == null) {
            return null;
        }

        HttpEntity answer = in.getBody(HttpEntity.class);
        if (answer == null) {
            try {
                String data = in.getBody(String.class);
                if (data != null) {
                    String contentType = ExchangeHelper.getContentType(exchange);
                    String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
                    if (charset == null) {
                        charset = HTTP.DEFAULT_CONTENT_CHARSET;
                    }

                    answer = new StringEntity(data, charset);
                    ((StringEntity) answer).setContentEncoding(charset);
                    if (contentType != null) {
                        ((StringEntity) answer).setContentType(contentType);
                    }
                }
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeCamelException(e);
            }
        }
        return answer;
    }",Creates a holder object for the data to send to the remote server.,0,292
7857,"private Bitmap getWidgetPreview(AppWidgetProviderInfo info) {
        final PackageManager packageManager = mPackageManager;
        String packageName = info.provider.getPackageName();
        Drawable drawable = null;
        if (info.previewImage != 0) {
            drawable = packageManager.getDrawable(packageName, info.previewImage, null);
            if (drawable == null) {
                Log.w(TAG, ""Can't load icon drawable 0x"" + Integer.toHexString(info.icon)
                        + "" for provider: "" + info.provider);
            }
        }

        // If we don't have a preview image, create a default one
        if (drawable == null) {
            Resources resources = mLauncher.getResources();

            // Create a new bitmap to hold the widget preview
            int width = (int) (Math.max(mMinWidgetPreviewDim,
                Math.min(mMaxWidgetPreviewDim, info.minWidth)) * sScaleFactor);
            int height = (int) (Math.max(mMinWidgetPreviewDim,
                Math.min(mMaxWidgetPreviewDim, info.minHeight)) * sScaleFactor);
            final Bitmap bitmap = Bitmap.createBitmap(width, height, Config.ARGB_8888);
            final Drawable background = resources.getDrawable(R.drawable.default_widget_preview);
            renderDrawableToBitmap(background, bitmap, 0, 0, width, height, 1.0f, 1.0f);

            // Draw the icon flush left
            try {
                Drawable icon = null;
                if (info.icon > 0) {
                    icon = packageManager.getDrawable(packageName, info.icon, null);
                }
                if (icon == null) {
                    icon = resources.getDrawable(R.drawable.ic_launcher_application);
                }

                final int iconSize = mMinWidgetPreviewDim / 2;
                final int offset = iconSize / 4;
                renderDrawableToBitmap(icon, null, offset, offset, iconSize, iconSize, 1.0f, 1.0f);
            } catch (Resources.NotFoundException e) {
                // if we can't find the icon, then just don't draw it
            }

            return bitmap;
        } else {
            // Scale down the preview if necessary
            final float imageWidth = drawable.getIntrinsicWidth();
            final float imageHeight = drawable.getIntrinsicHeight();
            final float aspect = (float) imageWidth / imageHeight;
            final int scaledWidth = (int) (Math.max(mMinWidgetPreviewDim,
                Math.min(mMaxWidgetPreviewDim, imageWidth)) * sScaleFactor);
            final int scaledHeight = (int) (Math.max(mMinWidgetPreviewDim,
                Math.min(mMaxWidgetPreviewDim, imageHeight)) * sScaleFactor);
            int width;
            int height;
            if (aspect >= 1.0f) {
                width = scaledWidth;
                height = (int) (((float) scaledWidth / imageWidth) * imageHeight);
            } else {
                height = scaledHeight;
                width = (int) (((float) scaledHeight / imageHeight) * imageWidth);
            }

            final Bitmap bitmap = Bitmap.createBitmap(width, height, Config.ARGB_8888);
            renderDrawableToBitmap(drawable, bitmap, 0, 0, width, height, 1.0f, 1.0f);

            return bitmap;
        }
    }","This method will extract the preview image specified by the widget developer (if it exists), otherwise, it will try to generate a default image preview with the widget's package icon.",0,830
5937,"public static String[] tokenizeToStringArray(final String s, final String delimiters) {
        if (s == null) {
            return EMPTY_ARRAY;
        }
        return tokenizeToCollection(s, delimiters, ArrayList::new).toArray(new String[0]);
    }",Tokenize the given String into a String array via a StringTokenizer.,0,80
6547,"public int compareTo(Tag object) {
            final int result;
            if (line == object.line) {
                result = Integer.compare(column, object.column);
            }
            else {
                result = Integer.compare(line, object.line);
            }
            return result;
        }",Compares the position of this tag in the file with the position of another tag.,0,93
5478,"public boolean publishInstall(final Context context) {
        return SdkRuntime.publishInstall(context, mAppId);
    }",Manually publish install attribution to the facebook graph.,0,32
7227,"public static int secureRandomInt(int lowerThan) {
        return getSecureRandom().nextInt(lowerThan);
    }",Get a cryptographically secure pseudo random int value between 0 (including and the given value (excluding).,0,31
7315,"public String get(final String name) {
    String[] values = metadata.get(name);
    if (values == null) {
      return null;
    } else {
      return values[0];
    }
  }",Get the value associated to a metadata name.,0,74
7448,"public OverloadedWorldHolder getWorldData(String worldName) {
    	String worldNameLowered = worldName.toLowerCase();
    	
    	// Find this worlds data
    	if (worldsData.containsKey(worldNameLowered)) {
    		
    		String usersMirror = mirrorsUser.get(worldNameLowered);
        	String groupsMirror = mirrorsGroup.get(worldNameLowered);
    		
    		if (usersMirror != null) {
    			
    			// If both are mirrored
    			if (groupsMirror != null) {
    				
    				// if the data sources are the same, return the parent
    				if (usersMirror == groupsMirror)
    					return getUpdatedWorldData(usersMirror.toLowerCase());
    				
    				// Both data sources are mirrors, but they are from different parents
        			// so we return the actual data object.
        			return getUpdatedWorldData(worldNameLowered);
    			}
    			
    			// Groups isn't a mirror  so return this this worlds data source
    			return getUpdatedWorldData(worldNameLowered);	
    		}
    		
    		// users isn't mirrored so we need to return this worlds data source
    		return getUpdatedWorldData(worldNameLowered);
    	}
    	
    	// Oddly no data source was found for this world so return the default.
        GroupManager.logger.finest(""Requested world "" + worldName + "" not found or badly mirrored. Returning default world..."");
        return getDefaultWorld();
    }",Returns the dataHolder for the given world.,0,237
5336,"public String encryptValue(final String value) {
        try {
            initializeJasyptInstanceIfNecessary();
            return ENCRYPTED_VALUE_PREFIX + this.jasyptInstance.encrypt(value);
        } catch (final Exception e) {
            LOGGER.error(""Could not encrypt value [{}]"", e);
        }
        return null;
    }",Encrypt value string.,0,84
6397,"public InProgressSubmission getWorkflowItem(Context context, Item item)
            throws DSpaceSwordException
    {
        try
        {
            if(ConfigurationManager.getProperty(""workflow"",""workflow.framework"").equals(""xmlworkflow"")){
                return XmlWorkflowItem.findByItem(context, item);
            }else{
                return WorkflowItem.findByItem(context, item);
            }
        }
        catch (SQLException e)
        {
            throw new DSpaceSwordException(e);
        }
    }",Obtain the WorkflowItem object which wraps the given Item,0,123
5526,"private Application getApplication(HttpServletRequest request)
			throws MalformedURLException {

		// Ensures that the session is still valid
		HttpSession session = request.getSession(false);
		if (session == null)
			return null;

		// Gets application list for the session.
		Collection applications = WebApplicationContext.getApplicationContext(session).getApplications();

		// Search for the application (using the application URI) from the list
		Application application = null;
		for (Iterator i = applications.iterator(); i.hasNext()
				&& application == null;) {
			Application a = (Application) i.next();
			String aPath = a.getURL().getPath();
			String servletPath = request.getContextPath()
					+ request.getServletPath();
			if (servletPath.length() < aPath.length())
				servletPath += ""/"";
			if (servletPath.equals(aPath))
				application = a;
		}

		// Removes stopped applications from the list
		if (application != null && !application.isRunning()) {
			WebApplicationContext.getApplicationContext(session).removeApplication(application);
			application = null;
		}

		return application;
	}",Gets the existing application for given request.,0,305
5977,"public Projection<T> project(boolean... fieldFlags) {
		return new Projection<T>(this, fieldFlags);
	}",Selects a subset of fields of a Tuple to create new Tuples.,0,39
5551,"public static boolean isOnField(DetailAST blockComment) {
        return isOnPlainClassMember(blockComment, TokenTypes.VARIABLE_DEF)
                || isOnTokenWithModifiers(blockComment, TokenTypes.VARIABLE_DEF)
                    && blockComment.getParent().getParent().getParent()
                        .getType() == TokenTypes.OBJBLOCK
                || isOnTokenWithAnnotation(blockComment, TokenTypes.VARIABLE_DEF)
                    && blockComment.getParent().getParent().getParent()
                        .getParent().getType() == TokenTypes.OBJBLOCK;
    }",Node is on field declaration.,0,126
7583,"public PlatformCache withSkipStore() {
        if (cache.delegate().skipStore())
            return this;

        return copy(rawCache.withSkipStore(), keepBinary);
    }","Gets cache with ""skip-store"" flag set.",0,51
6733,"public BufferedBlockOutStream getOutStream(long blockId, long blockSize, WorkerNetAddress address)
      throws IOException {
    if (blockSize == -1) {
      BlockMasterClient blockMasterClient = mContext.acquireMasterClient();
      try {
        blockSize = blockMasterClient.getBlockInfo(blockId).getLength();
      } catch (TachyonException e) {
        throw new IOException(e);
      } finally {
        mContext.releaseMasterClient(blockMasterClient);
      }
    }
    // No specified location to write to.
    if (address == null) {
      throw new RuntimeException(ExceptionMessage.NO_WORKER_AVAILABLE_ON_HOST.getMessage());
    }
    // Location is local.
    if (NetworkAddressUtils.getLocalHostName(ClientContext.getConf()).equals(address.getHost())) {
      if (mContext.hasLocalWorker()) {
        return new LocalBlockOutStream(blockId, blockSize);
      } else {
        throw new IOException(ExceptionMessage.NO_LOCAL_WORKER.getMessage(""write""));
      }
    }
    // Location is specified and it is remote.
    return new RemoteBlockOutStream(blockId, blockSize, address);
  }",Gets a stream to write data to a block.,0,275
5679,"public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ServerDescription that = (ServerDescription) o;

        if (maxDocumentSize != that.maxDocumentSize) {
            return false;
        }
        if (maxMessageSize != that.maxMessageSize) {
            return false;
        }
        if (maxWriteBatchSize != that.maxWriteBatchSize) {
            return false;
        }
        if (ok != that.ok) {
            return false;
        }
        if (!address.equals(that.address)) {
            return false;
        }
        if (!arbiters.equals(that.arbiters)) {
            return false;
        }
        if (!hosts.equals(that.hosts)) {
            return false;
        }
        if (!passives.equals(that.passives)) {
            return false;
        }
        if (primary != null ? !primary.equals(that.primary) : that.primary != null) {
            return false;
        }
        if (setName != null ? !setName.equals(that.setName) : that.setName != null) {
            return false;
        }
        if (setVersion != null ? !setVersion.equals(that.setVersion) : that.setVersion != null) {
            return false;
        }
        if (state != that.state) {
            return false;
        }
        if (!tags.equals(that.tags)) {
            return false;
        }
        if (type != that.type) {
            return false;
        }
        if (!version.equals(that.version)) {
            return false;
        }
        if (minWireVersion != that.minWireVersion) {
            return false;
        }
        if (maxWireVersion != that.maxWireVersion) {
            return false;
        }

        return true;
    }",Returns true if this instance is equals to o.,0,597
5736,"public static boolean isNotEmpty(final byte[] array) {
        return array != null && array.length != 0;
    }",Checks if an array of primitive bytes is not empty and not  null.,0,45
6400,"protected List<SnapshotId> readSnapshotList() throws IOException {
        try (InputStream blob = snapshotsBlobContainer.openInput(SNAPSHOTS_FILE)) {
            final byte[] data = ByteStreams.toByteArray(blob);
            ArrayList<SnapshotId> snapshots = new ArrayList<>();
            try (XContentParser parser = XContentHelper.createParser(new BytesArray(data))) {
                if (parser.nextToken() == XContentParser.Token.START_OBJECT) {
                    if (parser.nextToken() == XContentParser.Token.FIELD_NAME) {
                        String currentFieldName = parser.currentName();
                        if (""snapshots"".equals(currentFieldName)) {
                            if (parser.nextToken() == XContentParser.Token.START_ARRAY) {
                                while (parser.nextToken() != XContentParser.Token.END_ARRAY) {
                                    snapshots.add(new SnapshotId(repositoryName, parser.text()));
                                }
                            }
                        }
                    }
                }
            }
            return ImmutableList.copyOf(snapshots);
        }
    }",Reads snapshot index file,0,274
7450,"public PluginResult execute(String action, JSONArray args, String callbackId) {
		try {
			if (action.equals(""startActivity"")) {
				if(args.length() != 1) {
					return new PluginResult(PluginResult.Status.INVALID_ACTION);
				}
				
				// Parse the arguments
				JSONObject obj = args.getJSONObject(0);
				String type = obj.has(""type"") ? obj.getString(""type"") : null;
				Uri uri = obj.has(""url"") ? Uri.parse(obj.getString(""url"")) : null;
				JSONObject extras = obj.has(""extras"") ? obj.getJSONObject(""extras"") : null;
				Map<String, String> extrasMap = new HashMap<String, String>();
				
				// Populate the extras if any exist
				if (extras != null) {
					JSONArray extraNames = extras.names();
					for (int i = 0; i < extraNames.length(); i++) {
						String key = extraNames.getString(i);
						String value = extras.getString(key);
						extrasMap.put(key, value);
					}
				}
				
				startActivity(obj.getString(""action""), uri, type, extrasMap);
				return new PluginResult(PluginResult.Status.OK);
				
			} else if (action.equals(""hasExtra"")) {
				if (args.length() != 1) {
					return new PluginResult(PluginResult.Status.INVALID_ACTION);
				}
				Intent i = this.ctx.getIntent();
				String extraName = args.getString(0);
				return new PluginResult(PluginResult.Status.OK, i.hasExtra(extraName));
				
			} else if (action.equals(""getExtra"")) {
				if (args.length() != 1) {
					return new PluginResult(PluginResult.Status.INVALID_ACTION);
				}
				Intent i = this.ctx.getIntent();
				String extraName = args.getString(0);
				if (i.hasExtra(extraName)) {
					return new PluginResult(PluginResult.Status.OK, i.getStringExtra(extraName));
				} else {
					return new PluginResult(PluginResult.Status.ERROR);
				}
			} else if (action.equals(""getUri"")) {
				if (args.length() != 0) {
					return new PluginResult(PluginResult.Status.INVALID_ACTION);
				}

				Intent i = this.ctx.getIntent();
				String uri = i.getDataString();
				return new PluginResult(PluginResult.Status.OK, uri);
			} else if (action.equals(""onNewIntent"")) {
				if (args.length() != 0) {
					return new PluginResult(PluginResult.Status.INVALID_ACTION);
				}
				
				this.onNewIntentCallback = callbackId;
				PluginResult result = new PluginResult(PluginResult.Status.NO_RESULT);
				result.setKeepCallback(true);
				return result;
			}
			return new PluginResult(PluginResult.Status.INVALID_ACTION);
		} catch (JSONException e) {
			e.printStackTrace();
			return new PluginResult(PluginResult.Status.JSON_EXCEPTION);
		}
	}",Executes the request and returns PluginResult.,0,908
7833,"private FileSelection expandIfNecessary(FileSelection selection) throws IOException {
    if (selection.isExpandedFully()) {
      return selection;
    }

    // use the cacheFileRoot if provided (e.g after partition pruning)
    Path metaFilePath = new Path(cacheFileRoot != null ? cacheFileRoot : selectionRoot, Metadata.METADATA_FILENAME);
    if (!fs.exists(metaFilePath)) { // no metadata cache
      if (selection.isExpandedPartial()) {
        logger.error(""'{}' metadata file does not exist, but metadata directories cache file is present"", metaFilePath);
        metaContext.setMetadataCacheCorrupted(true);
      }

      return selection;
    }

    return expandSelectionFromMetadataCache(selection, metaFilePath);
  }",expands the selection's folders if metadata cache is found for the selection root.,0,158
6196,"public String getPreReleaseID()
    {
        if(!isPreRelease())
            return null;

        return super.getPreReleaseID();
    }",Returns the version prerelease ID of the current Jitsi version and null if this version is not a prerelease.,0,40
6183,"public String unescape(String str) {
        int firstAmp = str.indexOf('&');
        if (firstAmp < 0) {
            return str;
        }

        StringBuffer buf = new StringBuffer(str.length());
        buf.append(str.substring(0, firstAmp));
        for (int i = firstAmp; i < str.length(); ++i) {
            char ch = str.charAt(i);
            if (ch == '&') {
                int semi = str.indexOf(';', i + 1);
                if (semi == -1) {
                    buf.append(ch);
                    continue;
                }
                int amph = str.indexOf('&', i + 1);
                if( amph != -1 && amph < semi ) {
                    // Then the text looks like &...&...;
                    buf.append(ch);
                    continue;
                }
                String entityName = str.substring(i + 1, semi);
                int entityValue;
                if (entityName.length() == 0) {
                    entityValue = -1;
                } else if (entityName.charAt(0) == '#') {
                    if (entityName.length() == 1) {
                        entityValue = -1;
                    } else {
                        char charAt1 = entityName.charAt(1);
                        try {
                            if (charAt1 == 'x' || charAt1=='X') {
                                entityValue = Integer.valueOf(entityName.substring(2), 16).intValue();
                            } else {
                                entityValue = Integer.parseInt(entityName.substring(1));
                            }
                        } catch (NumberFormatException ex) {
                            entityValue = -1;
                        }
                    }
                } else {
                    entityValue = this.entityValue(entityName);
                }
                if (entityValue == -1) {
                    buf.append('&');
                    buf.append(entityName);
                    buf.append(';');
                } else {
                    buf.append((char) (entityValue));
                }
                i = semi;
            } else {
                buf.append(ch);
            }
        }
        return buf.toString();
    }","Unescapes the entities in a String. For example, if you have called addEntity(&quot;foo&quot;, 0xA1), unescape(&quot;&amp;foo;&quot;) will return &quot;\u00A1&quot;",0,634
7909,"public DateTime roundHalfEvenCopy() {
        DateTime instant = iInstant;
        return (DateTime)instant.withMillis(iField.roundHalfEven(instant.getMillis()));
    }",Rounds to the nearest whole unit of this field on a copy of this DateTime.,0,46
6329,"public UncheckedRow getUncheckedRow(long index) {
        return UncheckedRow.getByRowIndex(context, this, index);
    }",Returns a non-checking Row.,0,33
5539,"public static ValueGeometry get(String s) {
        Geometry g = fromWKT(s);
        // not all WKT values can be represented in WKB, but since we persist it in WKB format,
        // it has to be valid in WKB
        toWKB(g);
        return (ValueGeometry) Value.cache(new ValueGeometry(g));
    }",Get or create a geometry value for the given geometry.,0,64
7564,"public static File cacheResource(URL resourceURL, String target) throws IOException {
        // Find appropriate subdirectory in cache for the resource ...
        File urlFile = new File(resourceURL.getPath());
        String name = urlFile.getName();
        long size, timestamp;
        File cacheSubdir = getCacheDir().getCanonicalFile();
        URLConnection urlConnection = resourceURL.openConnection();
        if (urlConnection instanceof JarURLConnection) {
            JarFile jarFile = ((JarURLConnection)urlConnection).getJarFile();
            JarEntry jarEntry = ((JarURLConnection)urlConnection).getJarEntry();
            File jarFileFile = new File(jarFile.getName());
            File jarEntryFile = new File(jarEntry.getName());
            size = jarEntry.getSize();
            timestamp = jarEntry.getTime();
            cacheSubdir = new File(cacheSubdir, jarFileFile.getName() + File.separator + jarEntryFile.getParent());
        } else {
            size = urlFile.length();
            timestamp = urlFile.lastModified();
            cacheSubdir = new File(cacheSubdir, name);
        }
        if (resourceURL.getRef() != null) {
            // ... get the URL fragment to let users rename library files ...
            name = resourceURL.getRef();
        }
        // ... then check if it has not already been extracted, and if not ...
        File file = new File(cacheSubdir, name);
        if (target != null && target.length() > 0) {
            // ... create symbolic link to already extracted library or ...
            try {
                if (logger.isDebugEnabled()) {
                    logger.debug(""Creating symbolic link to "" + target);
                }
                Path path = file.toPath(), targetPath = Paths.get(target);
                if ((!file.exists() || !Files.isSymbolicLink(path))
                        && targetPath.isAbsolute() && !targetPath.equals(path)) {
                    file.delete();
                    Files.createSymbolicLink(path, targetPath);
                }
            } catch (IOException e) {
                // ... (probably an unsupported operation on Windows, but DLLs never need links) ...
                return null;
            }
        } else if (!file.exists() || file.length() != size || file.lastModified() != timestamp
                    || !cacheSubdir.equals(file.getCanonicalFile().getParentFile())) {
            // ... then extract it from our resources ...
            if (logger.isDebugEnabled()) {
                logger.debug(""Extracting "" + resourceURL);
            }
            file.delete();
            extractResource(resourceURL, file, null, null);
            file.setLastModified(timestamp);
        } else while (System.currentTimeMillis() - file.lastModified() >= 0
                   && System.currentTimeMillis() - file.lastModified() < 1000) {
            // ... else wait until the file is at least 1 second old ...
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                // ... and reset interrupt to be nice.
                Thread.currentThread().interrupt();
            }
        }
        return file;
    }","Extracts a resource, if the size or last modified timestamp differs from what is in cache, and returns the cached  File.",0,786
6373,"public OrchestrationProxyConfiguration loadProxyConfiguration() {
        try {
            OrchestrationProxyConfiguration result = ProxyConfigurationConverter.proxyConfigFromYaml(regCenter.getDirectly(configNode.getFullPath(ConfigurationNode.PROXY_RULE_NODE_PATH)));
            Preconditions.checkState(!Strings.isNullOrEmpty(result.getProxyAuthority().getUsername()), ""Authority configuration is invalid."");
            Preconditions.checkState(null != result.getShardingRule() || null != result.getMasterSlaveRule(), ""Sharding rule or Master slave rule can not be both null."");
            return result;
        } catch (final Exception ex) {
            throw new ShardingConfigurationException(""No available proxy configuration to load."");
        }
    }",Load proxy configuration.,0,147
6278,"public Deferred<Object> persist() {
    final byte[] q = Arrays.copyOfRange(batched_qualifier, 0, qualifier_index);
    final byte[] v = Arrays.copyOfRange(batched_value, 0, value_index);
    final byte[] r = Arrays.copyOfRange(row_key, 0, row_key.length);
    final long base_time = this.base_time; // shadow fixes issue #1436
    System.out.println(Arrays.toString(q) + ""  "" + Arrays.toString(v) + ""  "" + Arrays.toString(r));
    reset();
    return tsdb.put(r, q, v, base_time);
  }",A copy of the values is created and sent with a put request.,0,181
6377,"public Response createSeedFile(SeedList seedList) {
    if (seedList == null) {
      return Response.status(Status.BAD_REQUEST)
          .entity(""Seed list cannot be empty!"").build();
    }
    File seedFile = createSeedFile();
    BufferedWriter writer = getWriter(seedFile);

    Collection<SeedUrl> seedUrls = seedList.getSeedUrls();
    if (CollectionUtils.isNotEmpty(seedUrls)) {
      for (SeedUrl seedUrl : seedUrls) {
        writeUrl(writer, seedUrl);
      }
    }
    String seedFilePath = seedFile.getParent();
    seedList.setSeedFilePath(seedFilePath);
    NutchServer.getInstance().getSeedManager().
          setSeedList(seedList.getName(), seedList);
    return Response.ok().entity(seedFilePath).build();
  }",Method creates seed list file and returns temporary directory path,0,215
5267,"TimeWindowStatisticsImpl build(final long currentTime) {
            final long diff = currentTime - startTime;
            if (interval == 0) {
                if (diff < MINIMUM_UNIT_SIZE) {
                    return TimeWindowStatisticsImpl.EMPTY.get(0l);
                } else {
                    final double requestsPerSecond = (double) (1000 * lastUnitCount) / diff;
                    final long avg = lastUnitCount == 0 ? -1 : lastUnitDuration / lastUnitCount;

                    return lastUnitCount == 0 ?
                            TimeWindowStatisticsImpl.EMPTY.get(0l) :
                            new TimeWindowStatisticsImpl(0, requestsPerSecond, lastUnitMin, lastUnitMax, avg, lastUnitCount);
                }
            }

            closeLastUnitIfNeeded(currentTime);
            long min = -1;
            long max = -1;
            final double requestsPerSecond;

            for (final Unit u : this.unitQueue) {
                min = getMin(min, u.minimumDuration);
                max = getMax(max, u.maximumDuration);
            }

            min = getMin(min, lastUnitMin);
            max = getMax(max, lastUnitMax);

            long adjustedTotalCount = totalCount + lastUnitCount;
            long adjustedTotalDuration = totalDuration + lastUnitDuration;

            final int size = unitQueue.size();
            if (size >= unitsPerInterval) {
                final double ratio = (currentTime - (lastUnitEnd - unit)) / ((double) unit);

                if (oldestUnit != null) {
                    adjustedTotalCount -= (long) (oldestUnit.count * ratio);
                    adjustedTotalDuration -= (long) (oldestUnit.duration * ratio);
                }

                // intervalWithRoundError is used instead of size * unit for performance reasons
                requestsPerSecond = (double) (1000 * adjustedTotalCount) / intervalWithRoundError;
            } else {
                requestsPerSecond = diff == 0 ? 0 : (double) (1000 * adjustedTotalCount) / (double) diff;
            }

            if (adjustedTotalCount == 0) {
                return getOrCreateEmptyStats(interval);
            } else {
                final long avg = adjustedTotalDuration / adjustedTotalCount;
                return new TimeWindowStatisticsImpl(interval, requestsPerSecond, min, max, avg, adjustedTotalCount);
            }
        }",Build the time window statistics instance.,0,619
7599,"public static double solve(Matrix A, Preconditioner Ap, double[] b, double[] x, double tol, int itol) {
        return solve(A, Ap, b, x, tol, itol, 2 * Math.max(A.nrows(), A.ncols()));
    }",Solves A x = b by iterative biconjugate gradient method.,0,94
6382,"public CloseableIterator<String> run(GetDomainType request) {
        try {
            List<String> result = new ArrayList<String>();
            if (request.getParameterName() != null && !request.getParameterName().isEmpty()) {
                String parameterName = request.getParameterName();
                if (parameterName.indexOf(""."") > 0)
                {
                    final String operation = parameterName.split(""\\."")[0];
                    final String parameter = parameterName.split(""\\."")[1];
                    
                    if (GetCapabilities.operationParameters.get(operation) != null)
                    {
                        for (DomainType param : GetCapabilities.operationParameters.get(operation))
                        {
                            if (param.getName().equalsIgnoreCase(parameter))
                            {
                                for (Object value : param.getValue())
                                {
                                    result.add((String) value);
                                }
                            }
                        }
                    }
                }
            }

            if (request.getPropertyName() != null && !request.getPropertyName().isEmpty()) {
                final String propertyName = request.getPropertyName();
                String nameSpace = """";
                String localPart = null;
                if (propertyName.indexOf("":"") > 0)
                {
                    nameSpace = propertyName.split("":"")[0];
                    localPart = propertyName.split("":"")[1];
                } 
                else 
                {
                    if (propertyName.equalsIgnoreCase(""anyText""))
                    {
                        nameSpace = ns.getURI(""csw"");
                    }
                    localPart = propertyName;
                }
                                                
                Name attName = new NameImpl(ns.getURI(nameSpace), localPart);

                Name typeName = attributeTypeMap.get(attName);
                if (typeName != null)
                {
                    return this.store.getDomain(typeName, attName);
                }
            }

            return new CloseableIteratorAdapter<String>(result.iterator());
        } catch (Exception e) {
            throw new ServiceException(e, ""Failed to retrieve the domain values"",
                    ServiceException.NO_APPLICABLE_CODE);
        }
    }",Returns the requested feature types,0,593
7416,"public EventStorageSpi getEventStorageSpi() {
        return evtSpi;
    }",Should return fully configured event SPI implementation.,0,19
7736,"public boolean needCache() {
		return RequestMethod.GET == getRequestMethod();
	}",Randomly generated boundary mark,0,28
6270,"public static Task<ParseUser> logInInBackground() {
    final AnonymousAuthenticationProvider provider = getProvider();
    return provider.authenticateAsync().onSuccessTask(new Continuation<Map<String, String>, Task<ParseUser>>() {
      @Override
      public Task<ParseUser> then(Task<Map<String, String>> task) throws Exception {
        return ParseUser.logInWithInBackground(provider.getAuthType(), task.getResult());
      }
    });
  }",Creates an anonymous user in the background.,0,129
7838,"private TrimResult dummyProject(int fieldCount, RelNode input) {
    final RelOptCluster cluster = input.getCluster();
    final Mapping mapping =
        Mappings.create(MappingType.INVERSE_SURJECTION, fieldCount, 1);
    if (input.getRowType().getFieldCount() == 1) {
      // Input already has one field (and may in fact be a dummy project we
      // created for the child). We can't do better.
      return result(input, mapping);
    }
    final RexLiteral expr =
        cluster.getRexBuilder().makeExactLiteral(BigDecimal.ZERO);
    relBuilder.push(input);
    relBuilder.project(ImmutableList.<RexNode>of(expr), ImmutableList.of(""DUMMY""));
    return result(relBuilder.build(), mapping);
  }","Creates a project with a dummy column, to protect the parts of the system that cannot handle a relational expression with no columns.",0,182
7275,"public static CompleteUfsFileOptions defaults(AlluxioConfiguration alluxioConf) {
    return new CompleteUfsFileOptions(alluxioConf);
  }","Creates a default  CompleteUfsFileOptions with owner, group from login module and default file mode.",0,29
5880,"public static byte[] decodeUrlSafe(byte[] src) {
		if (src == null || src.length == 0) {
			return src;
		}
		return Base64.getUrlDecoder().decode(src);
	}","Base64-decode the given byte array using the RFC 4648 ""URL and Filename Safe Alphabet"".",0,72
6907,"public int migrate() throws FlywayException {
        return execute(new Command<Integer>() {
            public Integer execute(Connection connectionMetaDataTable, Connection connectionUserObjects, DbSupport dbSupport, Schema[] schemas) {
                MetaDataTable metaDataTable = new MetaDataTableImpl(dbSupport, schemas[0].getTable(table));

                MigrationResolver migrationResolver = createMigrationResolver(dbSupport);
                if (validateOnMigrate) {
                    doValidate(connectionMetaDataTable, migrationResolver, metaDataTable, schemas);
                }

                new DbSchemas(connectionMetaDataTable, schemas, metaDataTable).create();

                if (!metaDataTable.hasSchemasMarker() && !metaDataTable.hasInitMarker() && !metaDataTable.hasAppliedMigrations()) {
                    List<Schema> nonEmptySchemas = new ArrayList<Schema>();
                    for (Schema schema : schemas) {
                        if (!schema.empty()) {
                            nonEmptySchemas.add(schema);
                        }
                    }

                    if (initOnMigrate || nonEmptySchemas.isEmpty()) {
                        if (initOnMigrate && !nonEmptySchemas.isEmpty()) {
                            new DbInit(connectionMetaDataTable, metaDataTable, initVersion, initDescription).init();
                        }
                    } else {
                        if (nonEmptySchemas.size() == 1) {
                            Schema schema = nonEmptySchemas.get(0);
                            //Check whether we only have an empty metadata table in an otherwise empty schema
                            if (schema.allTables().length != 1 || !schema.getTable(table).exists()) {
                                throw new FlywayException(""Found non-empty schema "" + schema
                                        + "" without metadata table! Use init()""
                                        + "" or set initOnMigrate to true to initialize the metadata table."");
                            }
                        } else {
                            throw new FlywayException(""Found non-empty schemas ""
                                    + StringUtils.collectionToCommaDelimitedString(nonEmptySchemas)
                                    + "" without metadata table! Use init()""
                                    + "" or set initOnMigrate to true to initialize the metadata table."");
                        }
                    }
                }

                DbSupport dbSupportUserObjects = DbSupportFactory.createDbSupport(connectionUserObjects);
                Schema originalSchemaUserObjects = dbSupport.getCurrentSchema();
                boolean schemaChange = !schemas[0].equals(originalSchemaUserObjects);
                if (schemaChange) {
                    dbSupportUserObjects.setCurrentSchema(schemas[0]);
                }

                DbMigrate dbMigrator =
                        new DbMigrate(connectionMetaDataTable, connectionUserObjects, dbSupport, metaDataTable,
                                schemas[0], migrationResolver, target, ignoreFailedFutureMigration, outOfOrder);
                try {
                    return dbMigrator.migrate();
                } finally {
                    if (schemaChange) {
                        dbSupportUserObjects.setCurrentSchema(originalSchemaUserObjects);
                    }
                }
            }
        });
    }",Starts the database migration.,0,651
5939,"public static JmeterKeyStore getInstance(String type) throws Exception {
        return getInstance(type, 0, 0, null);
    }",Create a keystore which returns the first alias only.,0,40
7903,"public ItemPrice getItemPrice(int itemId) throws IOException
	{
		ItemPrice itemPrice = itemPrices.getIfPresent(itemId);
		if (itemPrice != null && itemPrice != EMPTY)
		{
			return itemPrice == NONE ? null : itemPrice;
		}

		itemPrice = itemClient.lookupItemPrice(itemId);
		if (itemPrice == null)
		{
			itemPrices.put(itemId, NONE);
			return null;
		}

		itemPrices.put(itemId, itemPrice);
		return itemPrice;
	}",Look up an item's price synchronously,0,152
6768,"public String toString() {
    if (mUriString != null) {
      return mUriString;
    }
    StringBuilder sb = new StringBuilder();
    if (mUri.getScheme() != null) {
      sb.append(mUri.getScheme());
      sb.append(""://"");
    }
    if (hasAuthority()) {
      if (mUri.getScheme() == null) {
        sb.append(""//"");
      }
      sb.append(mUri.getAuthority().toString());
    }
    if (mUri.getPath() != null) {
      String path = mUri.getPath();
      if (path.indexOf('/') == 0 && hasWindowsDrive(path, true) && // has windows drive
          mUri.getScheme() == null && // but no scheme
          mUri.getAuthority() == null) { // or authority
        path = path.substring(1); // remove slash before drive
      }
      sb.append(path);
    }
    if (mUri.getQuery() != null) {
      sb.append(""?"");
      sb.append(mUri.getQuery());
    }
    mUriString = sb.toString();
    return mUriString;
  }","Illegal characters unescaped in the string, for glob processing, etc.",0,349
5477,"public HttpRequest acceptEncoding(String value) {
		return header(HEADER_ACCEPT_ENCODING, value);
	}",Set the 'Accept-Encoding' header to given value,0,28
5868,"public double getDouble(String key) throws JSONException {
        Object object = this.get(key);
        try {
            if (object instanceof Number) {
                return ((Number) object).doubleValue();
            } else if (object instanceof String) {
                return Double.parseDouble((String) object);
            }
        } catch (Exception e) {
        }
        throw new JSONException(""JSONObject["" + quote(key)
                + ""] is not a number."");
    }",Get the double value associated with a key.,0,147
6308,"public boolean handleBack() {
        List<RouterTransaction> childTransactions = new ArrayList<>();

        for (ControllerHostedRouter childRouter : childRouters) {
            childTransactions.addAll(childRouter.getBackstack());
        }

        Collections.sort(childTransactions, new Comparator<RouterTransaction>() {
            @Override
            public int compare(RouterTransaction o1, RouterTransaction o2) {
                return o2.transactionIndex - o1.transactionIndex;
            }
        });

        for (RouterTransaction transaction : childTransactions) {
            Controller childController = transaction.controller;

            if (childController.isAttached() && childController.getRouter().handleBack()) {
                return true;
            }
        }

        return false;
    }",Should be overridden if this Controller needs to handle the back button being pressed.,0,202
6554,"public static byte[] getHash(byte[] data, boolean nullData) {
        byte[] result;
        try {
            result = MessageDigest.getInstance(""SHA-256"").digest(data);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        if (nullData) {
            Arrays.fill(data, (byte) 0);
        }
        return result;
    }",Calculate the hash code for the given data.,0,121
5564,"public static DataSource createDataSource(final Map<String, DataSource> dataSourceMap, final byte[] yamlByteArray) throws SQLException {
        YamlMasterSlaveConfiguration config = unmarshal(yamlByteArray);
        return new MasterSlaveDataSource(dataSourceMap, config.getMasterSlaveRule().getMasterSlaveRuleConfiguration().build(), config.getMasterSlaveRule().getConfigMap());
    }",Create master-slave data source.,0,89
7176,"public ActionStatus append(final DirectBuffer srcBuffer, final int srcOffset, final int length)
    {
        checkMessageLength(length);

        final ActionStatus status;
        if (length <= maxPayloadLength)
        {
            status = appendUnfragmentedMessage(srcBuffer, srcOffset, length);
        }
        else
        {
            status = appendFragmentedMessage(srcBuffer, srcOffset, length);
        }

        return status;
    }",Append a message to the log if sufficient capacity exists.,0,117
7757,"public boolean available()  {
    return 0 < glTextureID;
  }",Returns true if the texture has been initialized.,0,23
7619,"public int getNumberFallbackEmissions() {
        return executionResult.getEventCounts().getCount(HystrixEventType.FALLBACK_EMIT);
    }",Number of emissions of the execution of a fallback.,0,30
7714,"public static TimeExtractionFunction createFromGranularity(Granularity granularity) {
    switch (granularity) {
    case DAY:
      return new TimeExtractionFunction(""d"", null, ""UTC"", Locale.getDefault().toLanguageTag());
    case MONTH:
      return new TimeExtractionFunction(""M"", null, ""UTC"", Locale.getDefault().toLanguageTag());
    case YEAR:
      return new TimeExtractionFunction(""yyyy"", null, ""UTC"", Locale.getDefault().toLanguageTag());
    default:
      throw new AssertionError(""Extraction "" + granularity.value + "" is not valid"");
    }
  }",Creates the time format extraction function for the given granularity.,0,173
5606,"public static boolean indexExists(File directory) {
    return SegmentInfos.getCurrentSegmentGeneration(directory.list()) != -1;
  }",Returns true if an index exists at the specified directory.,0,39
6153,"public static boolean getWifiEnabled() {
        @SuppressLint(""WifiManagerLeak"")
        WifiManager manager = (WifiManager) Utils.getApp().getSystemService(WIFI_SERVICE);
        if (manager == null) return false;
        return manager.isWifiEnabled();
    }",Return whether wifi is enabled.,0,73
6061,"public static ValueGeometry get(String s) {
        try {
            Geometry g = new WKTReader().read(s);
            return get(g);
        } catch (ParseException ex) {
            throw DbException.convert(ex);
        }
    }",Get or create a geometry value for the given geometry.,0,78
6279,"public boolean next() {
        if (jbatch != null) {
            // will happen only on topTableFilter since jbatch.next does not call join.next()
            return jbatch.next();
        }
        if (state == AFTER_LAST) {
            return false;
        } else if (state == BEFORE_FIRST) {
            cursor.find(session, indexConditions);
            if (!cursor.isAlwaysFalse()) {
                if (nestedJoin != null) {
                    nestedJoin.reset();
                }
                if (join != null) {
                    join.reset();
                }
            }
        } else {
            // state == FOUND || NULL_ROW
            // the last row was ok - try next row of the join
            if (join != null && join.next()) {
                return true;
            }
        }
        while (true) {
            // go to the next row
            if (state == NULL_ROW) {
                break;
            }
            if (cursor.isAlwaysFalse()) {
                state = AFTER_LAST;
            } else if (nestedJoin != null) {
                if (state == BEFORE_FIRST) {
                    state = FOUND;
                }
            } else {
                if ((++scanCount & 4095) == 0) {
                    checkTimeout();
                }
                if (cursor.next()) {
                    currentSearchRow = cursor.getSearchRow();
                    current = null;
                    state = FOUND;
                } else {
                    state = AFTER_LAST;
                }
            }
            if (nestedJoin != null && state == FOUND) {
                if (!nestedJoin.next()) {
                    state = AFTER_LAST;
                    if (joinOuter && !foundOne) {
                        // possibly null row
                    } else {
                        continue;
                    }
                }
            }
            // if no more rows found, try the null row (for outer joins only)
            if (state == AFTER_LAST) {
                if (joinOuter && !foundOne) {
                    setNullRow();
                } else {
                    break;
                }
            }
            if (!isOk(filterCondition)) {
                continue;
            }
            boolean joinConditionOk = isOk(joinCondition);
            if (state == FOUND) {
                if (joinConditionOk) {
                    foundOne = true;
                } else {
                    continue;
                }
            }
            if (join != null) {
                join.reset();
                if (!join.next()) {
                    continue;
                }
            }
            // check if it's ok
            if (state == NULL_ROW || joinConditionOk) {
                return true;
            }
        }
        state = AFTER_LAST;
        return false;
    }",Check if there are more rows to read.,0,719
7814,"public boolean applyAPSRequest(APSResult request, Callback callback) {
        PumpInterface pump = getActivePump();
        request.rate = applyBasalConstraints(request.rate);

        if (!pump.isInitialized()) {
            log.debug(""applyAPSRequest: "" + MainApp.sResources.getString(R.string.pumpNotInitialized));
            if (callback != null) {
                callback.result(new PumpEnactResult().comment(MainApp.sResources.getString(R.string.pumpNotInitialized)).enacted(false).success(false)).run();
            }
            return false;
        }

        if (pump.isSuspended()) {
            log.debug(""applyAPSRequest: "" + MainApp.sResources.getString(R.string.pumpsuspended));
            if (callback != null) {
                callback.result(new PumpEnactResult().comment(MainApp.sResources.getString(R.string.pumpsuspended)).enacted(false).success(false)).run();
            }
            return false;
        }

        if (Config.logCongigBuilderActions)
            log.debug(""applyAPSRequest: "" + request.toString());
        if ((request.rate == 0 && request.duration == 0) || Math.abs(request.rate - pump.getBaseBasalRate()) < pump.getPumpDescription().basalStep) {
            if (isTempBasalInProgress()) {
                if (Config.logCongigBuilderActions)
                    log.debug(""applyAPSRequest: cancelTempBasal()"");
                getCommandQueue().cancelTempBasal(false, callback);
                if (request.smb == 0)
                    return true;
            } else {
                if (Config.logCongigBuilderActions)
                    log.debug(""applyAPSRequest: Basal set correctly"");
                if (callback != null) {
                    callback.result(new PumpEnactResult().absolute(request.rate).duration(0).enacted(false).success(true).comment(""Basal set correctly"")).run();
                }
                if (request.smb == 0)
                    return false;
            }
        } else if (isTempBasalInProgress()
                && getTempBasalRemainingMinutesFromHistory() > 5
                && Math.abs(request.rate - getTempBasalAbsoluteRateHistory()) < pump.getPumpDescription().basalStep) {
            if (Config.logCongigBuilderActions)
                log.debug(""applyAPSRequest: Temp basal set correctly"");
            if (callback != null) {
                callback.result(new PumpEnactResult().absolute(getTempBasalAbsoluteRateHistory()).duration(getTempBasalFromHistory(System.currentTimeMillis()).getPlannedRemainingMinutes()).enacted(false).success(true).comment(""Temp basal set correctly"")).run();
            }
            if (request.smb == 0)
                return false;
        } else {
            if (Config.logCongigBuilderActions)
                log.debug(""applyAPSRequest: setTempBasalAbsolute()"");
            getCommandQueue().tempBasalAbsolute(request.rate, request.duration, false, callback);

            if (request.smb == 0) return true;
        }
        log.debug(""SMB requested in config is: "" + request.smb);
        if (request.smb != 0) {
            long lastBolusTime = getLastBolusTime();
            if (lastBolusTime != 0 && lastBolusTime + 3 * 60 * 1000 > System.currentTimeMillis()) {
                log.debug(""SMB requsted but still in 3 min interval"");
            } else {
                DetailedBolusInfo detailedBolusInfo = new DetailedBolusInfo();
                detailedBolusInfo.eventType = CareportalEvent.CORRECTIONBOLUS;
                detailedBolusInfo.insulin = request.smb;
                detailedBolusInfo.isSMB = true;
                detailedBolusInfo.source = Source.USER;
                boolean smbDelivered = getCommandQueue().bolus(detailedBolusInfo, callback);
                if (smbDelivered)
                    return true;
                else
                    return false;
            }
        }
        return true;
    }",expect absolute request and allow both absolute and percent response based on pump capabilities,0,994
6699,"public SelectionKey registerForRead(final SelectableChannel channel, final UdpChannelTransport udpChannelTransport)
    {
        try
        {
            transportList.add(udpChannelTransport);
            return channel.register(selector, SelectionKey.OP_READ, udpChannelTransport);
        }
        catch (final ClosedChannelException ex)
        {
            throw new RuntimeException(ex);
        }
    }",Register channel for read.,0,91
6869,"public int run(String[] args) {
      final long startTime = Time.now();
      final Configuration conf = getConf();

      try {
        checkReplicationPolicyCompatibility(conf);

        final Collection<URI> namenodes = DFSUtil.getNsServiceRpcUris(conf);
        return Balancer.run(namenodes, parse(args), conf);
      } catch (IOException e) {
        System.out.println(e + "".  Exiting ..."");
        return ExitStatus.IO_EXCEPTION.getExitCode();
      } catch (InterruptedException e) {
        System.out.println(e + "".  Exiting ..."");
        return ExitStatus.INTERRUPTED.getExitCode();
      } finally {
        System.out.format(""%-24s "", DateFormat.getDateTimeInstance().format(new Date()));
        System.out.println(""Balancing took "" + time2Str(Time.now()-startTime));
      }
    }",Parse arguments and then run Balancer.,0,251
5923,"public List<InputSplit> getSplits(JobContext context) throws IOException {
	if (table == null) {
	    throw new IOException(""No table was provided."");
	}
    // Get the name server address and the default value is null.
    this.nameServer =
      context.getConfiguration().get(""hbase.nameserver.address"", null);
    
    Pair<byte[][], byte[][]> keys = table.getStartEndKeys();
    if (keys == null || keys.getFirst() == null ||
        keys.getFirst().length == 0) {
      HRegionLocation regLoc = table.getRegionLocation(
          HConstants.EMPTY_BYTE_ARRAY, false);
      if (null == regLoc) {
        throw new IOException(""Expecting at least one region."");
      }
      List<InputSplit> splits = new ArrayList<InputSplit>(1);
      InputSplit split = new TableSplit(table.getTableName(),
          HConstants.EMPTY_BYTE_ARRAY, HConstants.EMPTY_BYTE_ARRAY, regLoc
              .getHostnamePort().split(Addressing.HOSTNAME_PORT_SEPARATOR)[0]);
      splits.add(split);
      return splits;
    }
    List<InputSplit> splits = new ArrayList<InputSplit>(keys.getFirst().length);
    for (int i = 0; i < keys.getFirst().length; i++) {
      if ( !includeRegionInSplit(keys.getFirst()[i], keys.getSecond()[i])) {
        continue;
      }
      HServerAddress regionServerAddress = 
        table.getRegionLocation(keys.getFirst()[i]).getServerAddress();
      InetAddress regionAddress =
        regionServerAddress.getInetSocketAddress().getAddress();
      String regionLocation;
      try {
        regionLocation = reverseDNS(regionAddress);
      } catch (NamingException e) {
        LOG.error(""Cannot resolve the host name for "" + regionAddress +
            "" because of "" + e);
        regionLocation = regionServerAddress.getHostname();
      }

			byte[] startRow = scan.getStartRow();
			byte[] stopRow = scan.getStopRow();
			// determine if the given start an stop key fall into the region
      if ((startRow.length == 0 || keys.getSecond()[i].length == 0 ||
					 Bytes.compareTo(startRow, keys.getSecond()[i]) < 0) &&
          (stopRow.length == 0 ||
           Bytes.compareTo(stopRow, keys.getFirst()[i]) > 0)) {
        byte[] splitStart = startRow.length == 0 ||
          Bytes.compareTo(keys.getFirst()[i], startRow) >= 0 ?
            keys.getFirst()[i] : startRow;
        byte[] splitStop = (stopRow.length == 0 ||
          Bytes.compareTo(keys.getSecond()[i], stopRow) <= 0) &&
          keys.getSecond()[i].length > 0 ?
            keys.getSecond()[i] : stopRow;
        InputSplit split = new TableSplit(table.getTableName(),
          splitStart, splitStop, regionLocation);
        splits.add(split);
        if (LOG.isDebugEnabled()) {
          LOG.debug(""getSplits: split -> "" + i + "" -> "" + split);
        }
      }
    }
    return splits;
  }",Calculates the splits that will serve as input for the map tasks.,0,889
6803,"public static Status createStatus(String rawJSON) throws TwitterException {
        return TwitterObjectFactory.createStatus(rawJSON);
    }",Constructs a Status object from rawJSON string.,0,33
6977,"protected Control addCustomInputs(Control prevControl) {
	String[] dataformats = new String[DataFormat.values().length];
	int i = 0;
	for (DataFormat format : DataFormat.values()) {
	  dataformats[i++] = format.getDisplayText();
	}

	Map<String,Charset> availableCharsetsMap = Charset.availableCharsets();
	String[] availableCharsets = new String[availableCharsetsMap.size()];
	int j = 0;
	for (String charsetName : availableCharsetsMap.keySet()) {
	  availableCharsets[j++] = charsetName;
	}
    dataFormatSelect = addStandardSelect(BaseMessages.getString(PKG, ""InfobrightLoaderDialog.Dataformat.Label""), prevControl, dataformats);
    targetSchemaText = addStandardTextVar(BaseMessages.getString(PKG, ""InfobrightLoaderDialog.TargetSchema.Label""), dataFormatSelect);
    targetTableText = addStandardTextVar(BaseMessages.getString(PKG, ""InfobrightLoaderDialog.TargetTable.Label""), targetSchemaText);
    charsetSelect = addStandardSelect(BaseMessages.getString(PKG, ""InfobrightLoaderDialog.Charset.Label""), targetTableText, availableCharsets);
    agentPortText = addStandardTextVar(BaseMessages.getString(PKG, ""InfobrightLoaderDialog.AgentPort.Label""), charsetSelect);
    debugFileText = addStandardTextVar(BaseMessages.getString(PKG, ""InfobrightLoaderDialog.DebugFile.Label""), agentPortText);
    return debugFileText;
  }",Adds any custom inputs,0,330
6466,"private String[] retrieveContextLocations(ContextLoader contextLoader, Class<?> clazz) {
		Assert.notNull(contextLoader, ""ContextLoader must not be null"");
		Assert.notNull(clazz, ""Class must not be null"");

		List<String> locationsList = new ArrayList<String>();
		Class<ContextConfiguration> annotationType = ContextConfiguration.class;
		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz);
		Assert.notNull(declaringClass, ""Could not find an 'annotation declaring class' for annotation type [""
				+ annotationType + ""] and class ["" + clazz + ""]"");

		// --- configuration class resources ----------------------------

		// TODO [SPR-6184] Implement recursive search for configuration classes.
		// This needs to integrate seamlessly (i.e., analogous yet mutually
		// exclusive) with the existing locations search. Furthermore, the
		// solution must not depend on an explicit ACCL check.
		if (contextLoader instanceof AnnotationConfigContextLoader) {

			ContextConfiguration cc = declaringClass.getAnnotation(annotationType);
			if (logger.isTraceEnabled()) {
				logger.trace(String.format(""Retrieved @ContextConfiguration [%s] for declaring class [%s]."", cc,
					declaringClass));
			}

			String[] classNames = null;

			Class<?>[] configClasses = cc.classes();
			if (!ObjectUtils.isEmpty(configClasses)) {
				classNames = new String[configClasses.length];

				for (int i = 0; i < configClasses.length; i++) {
					classNames[i] = configClasses[i].getName();
				}
			}

			return contextLoader.processLocations(declaringClass, classNames);
		}

		// --- location/value resources ---------------------------------

		while (declaringClass != null) {
			ContextConfiguration contextConfiguration = declaringClass.getAnnotation(annotationType);
			if (logger.isTraceEnabled()) {
				logger.trace(String.format(""Retrieved @ContextConfiguration [%s] for declaring class [%s]."",
					contextConfiguration, declaringClass));
			}

			String[] valueLocations = contextConfiguration.value();
			String[] locations = contextConfiguration.locations();
			if (!ObjectUtils.isEmpty(valueLocations) && !ObjectUtils.isEmpty(locations)) {
				String msg = String.format(
					""Test class [%s] has been configured with @ContextConfiguration's 'value' [%s] and 'locations' [%s] attributes. Only one declaration of resource locations is permitted per @ContextConfiguration annotation."",
					declaringClass, ObjectUtils.nullSafeToString(valueLocations),
					ObjectUtils.nullSafeToString(locations));
				logger.error(msg);
				throw new IllegalStateException(msg);
			}
			else if (!ObjectUtils.isEmpty(valueLocations)) {
				locations = valueLocations;
			}

			locations = contextLoader.processLocations(declaringClass, locations);
			locationsList.addAll(0, Arrays.<String> asList(locations));
			declaringClass = contextConfiguration.inheritLocations() ? AnnotationUtils.findAnnotationDeclaringClass(
				annotationType, declaringClass.getSuperclass()) : null;
		}

		return locationsList.toArray(new String[locationsList.size()]);
	}","Retrieve  ApplicationContext resource locations for the supplied  Class class, using the supplied  ContextLoader to  ContextLoader#processLocations(Class, String...) process the locations.",0,685
5450,"public DBCExecutionContext getExecutionContext() {
        DBSDataContainer dataContainer = getDataContainer();
        return dataContainer == null ? null : dataContainer.getDataSource();
    }",Uses data source as main execution context,0,48
5430,"public List<Integer> getCircleColors() {
        return mCircleColors;
    }",returns all colors specified for the circles,0,22
6736,"public static FeedMedia getFeedMedia(final long mediaId) {
        PodDBAdapter adapter = PodDBAdapter.getInstance();

        adapter.open();
        Cursor mediaCursor = adapter.getSingleFeedMediaCursor(mediaId);

        if (!mediaCursor.moveToFirst()) {
            return null;
        }

        int indexFeedItem = mediaCursor.getColumnIndex(PodDBAdapter.KEY_FEEDITEM);
        long itemId = mediaCursor.getLong(indexFeedItem);
        FeedMedia media = FeedMedia.fromCursor(mediaCursor);
        mediaCursor.close();

        if(media != null) {
            FeedItem item = getFeedItem(itemId);
            if (item != null) {
                media.setItem(item);
                item.setMedia(media);
            }
        }

        adapter.close();

        return media;
    }",Searches the DB for a FeedMedia of the given id.,0,219
5924,"public boolean isAllowed(HttpServletRequest request, Group group) {
        return checkAll(
                request,
                ""plugin_framework_group_cache"",
                group,
                new Predicate<AuthorizationPluginWrapper>() {
            @Override
            public boolean test(AuthorizationPluginWrapper plugin) {
                return plugin.isAllowed(request, group);
            }
        });
    }",Checks if the request should have an access to group.,0,92
6859,"public long getPerContainerRam() {
    return getPerContainerRamAsBytes();
  }",Gets the RAM used per topology container as a number of bytes,0,21
7359,"protected Object queryForObject(ResultSet rs) throws SQLException {
        Object result = null;
        List<Map<String, Object>> data = extractResultSetData(rs);
        if (data.size() > 1) {
            throw new SQLDataException(""Query result not unique for outputType=SelectOne. Got "" + data.size() + "" count instead."");
        } else if (data.size() == 1) {
            if (getEndpoint().getOutputClass() == null) {
                // Set content depend on number of column from query result
                Map<String, Object> row = data.get(0);
                if (row.size() == 1) {
                    result = row.values().iterator().next();
                } else {
                    result = row;
                }
            } else {
                Class<?> outputClzz = getEndpoint().getCamelContext().getClassResolver().resolveClass(getEndpoint().getOutputClass());
                Object answer = getEndpoint().getCamelContext().getInjector().newInstance(outputClzz);

                Map<String, Object> row = data.get(0);
                Map<String, Object> properties = new LinkedHashMap<String, Object>(data.size());

                // map row names using the bean row mapper
                for (Map.Entry<String, Object> entry : row.entrySet()) {
                    Object value = entry.getValue();
                    String name = getEndpoint().getBeanRowMapper().map(entry.getKey(), value);
                    properties.put(name, value);
                }
                try {
                    IntrospectionSupport.setProperties(answer, properties);
                } catch (Exception e) {
                    throw new SQLException(""Error setting properties on output class "" + outputClzz, e);
                }

                // check we could map all properties to the bean
                if (!properties.isEmpty()) {
                    throw new IllegalArgumentException(""Cannot map all properties to bean of type "" + outputClzz + "". There are "" + properties.size() + "" unmapped properties. "" + properties);
                }
                return answer;
            }
        }

        // If data.size is zero, let result be null.
        return result;
    }",Extract the result from the ResultSet,0,562
7863,"public ApiResponse<Client> testClientModelWithHttpInfo(Client body) throws ApiException {
        okhttp3.Call localVarCall = testClientModelValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }",To test \&quot;client\&quot; model,0,81
5381,"static Iterator<Long> from(long value, long step) {
        return new Iterator<Long>() {
            private long next = value;

            @Override
            public boolean hasNext() {
                return true;
            }

            @Override
            public Long next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }
                final long result = next;
                next += step;
                return result;
            }
        };
    }",Returns an infinite iterator of long values starting from  value and spaced by  step.,0,148
5602,"public Optional<JComponent> getExtra(final FieldEditor editor) {
        final String fieldName = editor.getFieldName();

        final Set<FieldProperties> fieldExtras = InternalBibtexFields.getFieldExtras(fieldName);

        // timestamp or a other field with datepicker command
        if (Globals.prefs.get(JabRefPreferences.TIME_STAMP_FIELD).equals(fieldName)
                || fieldExtras.contains(FieldProperties.DATE)) {
            // double click AND datefield => insert the current date (today)
            return FieldExtraComponents.getDateTimeExtraComponent(editor,
                    fieldExtras.contains(FieldProperties.DATE), fieldExtras.contains(FieldProperties.ISO_DATE));
        } else if (fieldExtras.contains(FieldProperties.EXTERNAL)) {
            return FieldExtraComponents.getExternalExtraComponent(panel, editor);
        } else if (fieldExtras.contains(FieldProperties.JOURNAL_NAME)) {
            // Add controls for switching between abbreviated and full journal names.
            // If this field also has a FieldContentSelector, we need to combine these.
            return FieldExtraComponents.getJournalExtraComponent(frame, panel, editor, entry, contentSelectors,
                    getStoreFieldAction());
        } else if (!panel.getBibDatabaseContext().getMetaData().getContentSelectors(fieldName).isEmpty()) {
            return FieldExtraComponents.getSelectorExtraComponent(frame, panel, editor, contentSelectors, getStoreFieldAction());
        } else if (fieldExtras.contains(FieldProperties.DOI)) {
            return FieldExtraComponents.getDoiExtraComponent(panel, this, editor);
        } else if (fieldExtras.contains(FieldProperties.EPRINT)) {
            return FieldExtraComponents.getEprintExtraComponent(panel, this, editor);
        } else if (fieldExtras.contains(FieldProperties.ISBN)) {
            return FieldExtraComponents.getIsbnExtraComponent(panel, this, editor);
        } else if (fieldExtras.contains(FieldProperties.OWNER)) {
            return FieldExtraComponents.getSetOwnerExtraComponent(editor, getStoreFieldAction());
        } else if (fieldExtras.contains(FieldProperties.YES_NO)) {
            return FieldExtraComponents.getYesNoExtraComponent(editor, this);
        } else if (fieldExtras.contains(FieldProperties.MONTH)) {
            return FieldExtraComponents.getMonthExtraComponent(editor, this, frame.getCurrentBasePanel().getBibDatabaseContext().getMode());
        } else if (fieldExtras.contains(FieldProperties.GENDER)) {
            return FieldExtraComponents.getGenderExtraComponent(editor, this);
        } else if (fieldExtras.contains(FieldProperties.EDITOR_TYPE)) {
            return FieldExtraComponents.getEditorTypeExtraComponent(editor, this);
        } else if (fieldExtras.contains(FieldProperties.PAGINATION)) {
            return FieldExtraComponents.getPaginationExtraComponent(editor, this);
        } else if (fieldExtras.contains(FieldProperties.TYPE)) {
            return FieldExtraComponents.getTypeExtraComponent(editor, this, ""patent"".equalsIgnoreCase(entry.getType()));
        } else if (fieldExtras.contains(FieldProperties.CROSSREF)) {
            return FieldExtraComponents.getCrossrefExtraComponent(editor, frame.getCurrentBasePanel());
        }
        return Optional.empty();
    }",getExtra checks the field name against InternalBibtexFields.getFieldExtras(name).,0,709
7298,"protected String adjustSkin(String skin, boolean published)
	{
		// return the skin as just a name, no "".css"", and not dependent on the published status, or a null if not defined
		if (StringUtils.isEmpty(skin)) {
			skin = serverConfigurationService().getString(""skin.default"", ""default"");
		}

		String templates = serverConfigurationService().getString(""portal.templates"", ""neoskin"");
		if(""neoskin"".equals(templates))
		{
			if (StringUtils.isNotEmpty(portalSkinPrefix)) {
				skin = portalSkinPrefix + skin;
			}
		}

		if (!skin.endsWith("".css"")) return skin;

		return skin.substring(0, skin.lastIndexOf("".css""));
	}","Adjust a skin value to be just a (folder) name, with no extension, and if missing, be null.",0,180
7775,"public static LobCreator getLobCreator(SessionImplementor session) {
		return session.getFactory()
				.getServiceRegistry()
				.getService( JdbcServices.class )
				.getLobCreator( session );
	}",Obtain a lob creator for the given session.,0,54
7146,"static public boolean registerCommand(ButterflyModule module, String commandName, Command commandObject) {
        return s_singleton.registerOneCommand(module, commandName, commandObject);
    }",Register a single command.,0,45
5568,"public SELF withFixedExposedPort(int hostPort, int containerPort) {

        super.addFixedExposedPort(hostPort, containerPort);

        return self();
    }",Bind a fixed port on the docker host to a container port,0,43
5906,"public ShardLock shardLock(ShardId id, final String details) throws ShardLockObtainFailedException {
        return shardLock(id, details, 0);
    }",Tries to lock the given shards ID.,0,42
5645,"protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {
        if (headerValue instanceof String) {
            return headerValue;
        } else if (headerValue instanceof BigInteger) {
            return headerValue.toString();
        } else if (headerValue instanceof BigDecimal) {
            return headerValue.toString();
        } else if (headerValue instanceof Number) {
            return headerValue;
        } else if (headerValue instanceof Character) {
            return headerValue;
        } else if (headerValue instanceof CharSequence) {
            return headerValue.toString();
        } else if (headerValue instanceof Boolean) {
            return headerValue;
        } else if (headerValue instanceof Date) {
            if (this.endpoint.getConfiguration().isFormatDateHeadersToIso8601()) {
                return ZonedDateTime.ofInstant(((Date)headerValue).toInstant(), ZoneOffset.UTC).toString();
            } else {
                return headerValue.toString();
            }
        }
        return null;
    }",Strategy to test if the given header is valid according to the JMS spec to be set as a property on the JMS message.,0,284
6652,"private Element getMergedVCard(String username, Element mergeVCard) {
        // Un-escape username.
        username = JID.unescapeNode(username);
        Map<String, String> map = getLdapAttributes(username);
        Log.debug(""LdapVCardProvider: Retrieving LDAP mapped vcard for "" + username);
        if (map.isEmpty()) {
            return null;
        }
        Element vcard = new VCard(template).getVCard(map);
        if (mergeVCard == null) {
            // No vcard passed in?  Hrm.  Fine, return LDAP vcard.
            return vcard;
        }
        if (mergeVCard.element(""PHOTO"") == null) {
            // Merged vcard has no photo element, return LDAP vcard as is.
            return vcard;
        }
        Element photoElement = mergeVCard.element(""PHOTO"").createCopy();
        if (photoElement == null || photoElement.element(""BINVAL"") == null || photoElement.element(""BINVAL"").getText().matches(""\\s*"")) {
            // We were passed something null or empty, so lets just return the LDAP based vcard.
            return vcard;
        }
        // Now we need to check that the LDAP vcard doesn't have a PHOTO element that's filled in.
        if (!((vcard.element(""PHOTO"") == null || vcard.element(""PHOTO"").element(""BINVAL"") == null || vcard.element(""PHOTO"").element(""BINVAL"").getText().matches(""\\s*"")))) {
            // Hrm, it does, return the original vcard;
            return vcard;
        }
        Log.debug(""LdapVCardProvider: Merging avatar element from passed vcard"");
        Element currentElement = vcard.element(""PHOTO"");
        if (currentElement != null) {
            vcard.remove(currentElement);
        }
        vcard.add(photoElement);
        return vcard;
    }",Returns a merged LDAP vCard combined with a PHOTO element provided in specified vCard.,0,425
7724,"public static TsurgeonPattern parseOperation(String operationString) {
    try {
      TsurgeonParser parser =
        new TsurgeonParser(new StringReader(operationString + ""\n""));
      return new TsurgeonPatternRoot(new TsurgeonPattern[] {parser.Root()} );
    } catch(ParseException e) {
      throw new TsurgeonParseException(""Error parsing Tsurgeon expression: "" +
                                       operationString, e);
    } catch(TokenMgrError e) {
      throw new TsurgeonParseException(""Error parsing Tsurgeon expression: "" +
                                       operationString, e);
    }
  }",Parses an operation string into a  TsurgeonPattern.,0,144
7165,"public Optional<Field> findField(final String fieldName) {
    Optional<Field> found = doFindField(fieldName, metaFields);
    if (found.isPresent()) {
      return found;
    }

    found = doFindField(fieldName, keyFields);
    if (found.isPresent()) {
      return found;
    }

    return doFindField(fieldName, valueFields);
  }",Search for a field with the supplied  fieldName.,0,112
5433,"UnderFileSystem get(long mountId) {
        return mIdToUnderFileSystemMap.get(mountId);
      }",Gets a UFS instance from the cache if exists.,0,25
5689,"Text compact() throws IOException {
    synchronized (compactLock) {
      long maxId = -1;
      List<HStoreFile> filesToCompact = null;
      synchronized (storefiles) {
        filesToCompact = new ArrayList<HStoreFile>(this.storefiles.values());
        if (filesToCompact.size() < 1) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""Not compacting "" + this.storeName +
            "" because no store files to compact."");
          }
          return checkSplit();
        } else if (filesToCompact.size() == 1) {
          if (!filesToCompact.get(0).isReference()) {
            if (LOG.isDebugEnabled()) {
              LOG.debug(""Not compacting "" + this.storeName +
              "" because only one store file and it is not a reference"");
            }
            return checkSplit();
          }
        } else if (filesToCompact.size() < compactionThreshold) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""Not compacting "" + this.storeName +
                "" because number of stores "" + filesToCompact.size() +
                "" < compaction threshold "" + compactionThreshold);
          }
          return checkSplit();
        }

        if (!fs.exists(compactionDir) && !fs.mkdirs(compactionDir)) {
          LOG.warn(""Mkdir on "" + compactionDir.toString() + "" failed"");
          return checkSplit();
        }

        if (LOG.isDebugEnabled()) {
          LOG.debug(""started compaction of "" + filesToCompact.size() +
              "" files using "" + compactionDir.toString() + "" for "" +
              this.storeName);
        }

        // Storefiles are keyed by sequence id. The oldest file comes first.
        // We need to return out of here a List that has the newest file first.
        Collections.reverse(filesToCompact);

        // The max-sequenceID in any of the to-be-compacted TreeMaps is the 
        // last key of storefiles.

        maxId = this.storefiles.lastKey();
      }

      // Step through them, writing to the brand-new MapFile
      HStoreFile compactedOutputFile = new HStoreFile(conf, fs, 
          this.compactionDir, info.getEncodedName(), family.getFamilyName(),
          -1L, null);
      MapFile.Writer compactedOut = compactedOutputFile.getWriter(this.fs,
          this.compression, this.bloomFilter);
      try {
        compactHStoreFiles(compactedOut, filesToCompact);
      } finally {
        compactedOut.close();
      }

      // Now, write out an HSTORE_LOGINFOFILE for the brand-new TreeMap.
      compactedOutputFile.writeInfo(fs, maxId);

      // Move the compaction into place.
      completeCompaction(filesToCompact, compactedOutputFile);

      if (LOG.isDebugEnabled()) {
        LOG.debug(""Completed compaction of "" + this.storeName +
            "" store size is "" + StringUtils.humanReadableInt(storeSize));
      }
    }
    return checkSplit();
  }",Compact the back-HStores.,0,700
7899,"protected int getNormalLayoutResId() {
        return itemGridCellBinder.layout;
    }",the layout id for the normal data,0,21
7185,"public static FetchResultType findByValue(int value) { 
    switch (value) {
      case 0:
        return UNKNOWN;
      case 100:
        return HIT;
      case 101:
        return MISS;
      case 102:
        return CONTAINS;
      case 103:
        return SKIPPED;
      case 104:
        return ERROR;
      case 105:
        return MISS_ONLY_IN_MEMCACHE;
      case 106:
        return MISS_IN_SLA;
      case 107:
        return MISS_OUT_SLA;
      case 108:
        return MISS_UNKNOWN;
      default:
        return null;
    }
  }","Find a the enum type by its integer value, as defined in the Thrift IDL.",0,161
6118,"public ExecutionResult execute( String query ) throws CypherException
    {
        return new ExecutionResult(inner.execute( query ));
    }",Executes a query and returns an iterable that contains the result set,0,41
6495,"public static RuleUpdatedEvent createRuleUpdatedEvent(Rule rule, Rule oldRule, String source) {
        String topic = buildTopic(RULE_UPDATED_EVENT_TOPIC, rule);
        final RuleDTO ruleDto = RuleDTOMapper.map(rule);
        final RuleDTO oldRuleDto = RuleDTOMapper.map(oldRule);
        List<RuleDTO> rules = new LinkedList<RuleDTO>();
        rules.add(ruleDto);
        rules.add(oldRuleDto);
        String payload = serializePayload(rules);
        return new RuleUpdatedEvent(topic, payload, source, ruleDto, oldRuleDto);
    }",creates a rule updated event,0,152
5440,"public static Trades adaptTrades(BTCTurkTrades[] btcTurkTrades, CurrencyPair currencyPair) {
    List<Trade> trades = new ArrayList<>();
    int lastTradeId = 0;
    for (BTCTurkTrades btcTurkTrade : btcTurkTrades) {
      if (btcTurkTrade.getTid() > lastTradeId) {
        lastTradeId = btcTurkTrade.getTid();
      }
      trades.add(adaptTrade(btcTurkTrade, currencyPair, 1));
    }
    return new Trades(trades, lastTradeId, Trades.TradeSortType.SortByID);
  }",Adapts a BTCTurkTrade[] to a Trades Object,0,143
6303,"protected Mono<ServerResponse> renderErrorView(ServerRequest request) {
		boolean includeStackTrace = isIncludeStackTrace(request, MediaType.TEXT_HTML);
		Map<String, Object> error = getErrorAttributes(request, includeStackTrace);
		HttpStatus errorStatus = getHttpStatus(error);
		ServerResponse.BodyBuilder responseBody = ServerResponse.status(errorStatus).contentType(MediaType.TEXT_HTML);
		return Flux
				.just(""error/"" + errorStatus.value(), ""error/"" + SERIES_VIEWS.get(errorStatus.series()), ""error/error"")
				.flatMap((viewName) -> renderErrorView(viewName, responseBody, error))
				.switchIfEmpty(this.errorProperties.getWhitelabel().isEnabled()
						? renderDefaultErrorView(responseBody, error) : Mono.error(getError(request)))
				.next();
	}",Render the error information as an HTML view.,0,211
7411,"public static Frame parseFrame(Key okey, File file) {
    if( !file.exists() )
      throw new RuntimeException(""File not found "" + file);
    if(okey == null)
      okey = Key.make(file.getName());
    Key fkey = NFSFileVec.make(file);
    return ParseDataset2.parse(okey, new Key[] { fkey });
  }",Parse given file into the form of frame represented by the given key.,0,120
7609,"protected Iterator<GridH2Row> filter(Iterator<GridH2Row> iter) {
        IgniteBiPredicate<Object, Object> p = null;

        IndexingQueryFilter f = filters.get();

        return new FilteringIterator(iter, U.currentTimeMillis(), f);
    }",Filters rows from expired ones and using predicate.,0,75
7756,"public DurationType getDurationType(Object object, boolean precise) {
        ReadableTimePeriod period = (ReadableTimePeriod) object;
        if (precise) {
            if (period.getDurationType().isPrecise()) {
                return period.getDurationType();
            } else {
                return DurationType.getPreciseAllType();
            }
        }
        return period.getDurationType();
    }",Selects a suitable duration type for the given object.,0,104
6362,"public List<String> getChildren(String path) {
        try {
            return RetryLoops.invokeWithRetry(
                    () -> {
                        requiredNotNull(client, failed);
                        int len = path.length();
                        return client.getKVClient()
                                .get(ByteSequence.from(path, UTF_8),
                                        GetOption.newBuilder().withPrefix(ByteSequence.from(path, UTF_8)).build())
                                .get(DEFAULT_REQUEST_TIMEOUT, TimeUnit.MILLISECONDS)
                                .getKvs().stream().parallel()
                                .filter(pair -> {
                                    String key = pair.getKey().toString(UTF_8);
                                    int index = len, count = 0;
                                    if (key.length() > len) {
                                        for (; (index = key.indexOf(Constants.PATH_SEPARATOR, index)) != -1; ++index) {
                                            if (count++ > 1) break;
                                        }
                                    }
                                    return count == 1;
                                })
                                .map(pair -> pair.getKey().toString(UTF_8))
                                .collect(toList());
                    }, retryPolicy);
        } catch (Exception e) {
            throw new IllegalStateException(e.getMessage(), e);
        }
    }","find direct children directory, excluding path self,",0,352
7794,"public String getSearchPath() {
    return getCoreLibrary().getJarPath();
  }",Any modes that extend JavaMode can override this method to add additional,0,25
6576,"public List<BytesRef> getTerms() {
      return terms;
    }","Note, there may be multiple terms at the same position",0,22
5755,"private static String md5Hex(String a2) {
			return DigestUtils.md5DigestAsHex(a2.getBytes(StandardCharsets.UTF_8));
		}",Computes the response portion of a Digest authentication header.,0,36
6552,"private ThreadState newThreadState() {
    assert numThreadStatesActive < threadStates.length;
    final ThreadState threadState = threadStates[numThreadStatesActive];
    threadState.lock(); // lock so nobody else will get this ThreadState
    boolean unlock = true;
    try {
      if (threadState.isActive()) {
        // unreleased thread states are deactivated during DW#close()
        numThreadStatesActive++; // increment will publish the ThreadState
        //System.out.println(""activeCount="" + numThreadStatesActive);
        assert threadState.dwpt == null;
        unlock = false;
        return threadState;
      }
      // we are closed: unlock since the threadstate is not active anymore
      assert assertUnreleasedThreadStatesInactive();
      throw new AlreadyClosedException(""this IndexWriter is closed"");
    } finally {
      if (unlock) {
        // in any case make sure we unlock if we fail 
        threadState.unlock();
      }
    }
  }",Returns a new  ThreadState iff any new state is available otherwise null.,0,179
7511,"public ScimUser addUser(UaaUser user) {
		ScimUser scimUser = getScimUser(user);
		List<ScimUser> users = scimUserProvisioning.retrieveUsers(""userName eq '"" + user.getUsername() + ""'"");
		if (users.isEmpty()) {
			logger.info(""Registering new user account: "" + user);
			// TODO: send a message or raise an event that can be used to inform the user of his new password
			scimUser = scimUserProvisioning.createUser(scimUser, user.getPassword());
		} else {
			if (!override) {
				logger.debug(""Not registering existing user: "" + user);
				// We don't update existing accounts - use the ScimUserProvisioning for that
			} else {
				String id = users.iterator().next().getId();
				scimUserProvisioning.updateUser(id, scimUser);
				scimUserProvisioning.changePassword(id, null, user.getPassword());
			}
		}
		if (scimGroupProvisioning != null && membershipManager != null) {
			Set<Group> groups = scimUser.getGroups();
			for (Group g : groups) {
				addToGroup(scimUser, g.display);
			}
		}
		return scimUser;
	}",Add a user account from the properties provided.,0,295
7822,"public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }",POST /fake/outer/string,0,59
6063,"public String text() {
        final StringBuilder accum = new StringBuilder();
        new NodeTraversor(new NodeVisitor() {
            public void head(Node node, int depth) {
                if (node instanceof TextNode) {
                    TextNode textNode = (TextNode) node;
                    appendNormalisedText(accum, textNode);
                } else if (node instanceof Element) {
                    Element element = (Element) node;
                    if (accum.length() > 0 &&
                        (element.isBlock() || element.tag.getName().equals(""br"")) &&
                        !TextNode.lastCharIsWhitespace(accum))
                        accum.append("" "");
                }
            }

            public void tail(Node node, int depth) {
            }
        }).traverse(this);
        return accum.toString().trim();
    }",Gets the combined text of this element and all its children.,0,250
7072,"public boolean isValid(Object value) {
        if (value == null) {
            return allowNull;
        }
        final String s = value.toString();
        if (s == null) {
            return allowNull;
        }
        final int len = s.length();
        if ((minLength >= 0 && len < minLength)
                || (maxLength >= 0 && len > maxLength)) {
            return false;
        }
        return true;
    }",Checks if the given value is valid.,0,156
7270,"public Snapshot snapshot(SnapshotId snapshotId) {
        ImmutableList<SnapshotMetaData.Entry> entries = currentSnapshots(snapshotId.getRepository(), new String[] {snapshotId.getSnapshot()});
        if (!entries.isEmpty()) {
            return inProgressSnapshot(entries.iterator().next());
        }
        return repositoriesService.repository(snapshotId.getRepository()).readSnapshot(snapshotId);
    }",Retrieves snapshot from repository,0,107
7475,"public static List<Grid> allGrids() {
        return GridGainEx.allGrids();
    }",Gets a list of all grids started so far.,0,28
5371,"public int getAndSet(int newValue) {
		return operations.getSet(key, newValue);
	}",Set to the give value and return the old value.,0,30
7528,"private Executor pool(GridIoPolicy plc) {
        switch (plc) {
            case P2P_POOL:
                return p2pPool;
            case SYSTEM_POOL:
                return sysPool;
            case PUBLIC_POOL:
                return pubPool;
            case MANAGEMENT_POOL:
                return mgmtPool;
            case AFFINITY_POOL:
                return affPool;

            case UTILITY_CACHE_POOL:
                assert utilityCachePool != null : ""Utility cache pool is not configured."";

                return utilityCachePool;

            case MARSH_CACHE_POOL:
                assert marshCachePool != null : ""Marshaller cache pool is not configured."";

                return marshCachePool;

            default: {
                assert false : ""Invalid communication policy: "" + plc;

                // Never reached.
                return null;
            }
        }
    }",Gets execution pool for policy.,0,185
5542,"public boolean isMetaRegion() {
    return delegatee.isMetaRegion();
  }",Checks if this table is  hbase:meta  region.,0,23
7589,"public static Grid grid(UUID locNodeId) throws GridIllegalStateException {
        return GridGainEx.grid(locNodeId);
    }",Gets a grid instance for given local node ID.,0,33
6811,"private UserDetails getUserFromBackend(String username) {
        UserDetails loadedUser;

        try {
            loadedUser = this.authenticationDao.loadUserByUsername(username);
        } catch (UsernameNotFoundException notFound) {
            if (hideUserNotFoundExceptions) {
                throw new BadCredentialsException(""Bad credentials presented"");
            } else {
                throw notFound;
            }
        } catch (DataAccessException repositoryProblem) {
            throw new AuthenticationServiceException(repositoryProblem
                .getMessage(), repositoryProblem);
        }

        if (loadedUser == null) {
            throw new AuthenticationServiceException(
                ""AuthenticationDao returned null, which is an interface contract violation"");
        }

        return loadedUser;
    }",Creates a successful  Authentication object.,0,170
7284,"public ObjectMatrix3D<T> viewSliceFlip() {
    return (ObjectMatrix3D<T>) view().vSliceFlip();
  }",Constructs and returns a new flip view along the slice axis.,0,35
7742,"public static Tree UCPtransform(Tree t) {
    if (t == null) {
      return null;
    }
    Tree firstChild = t.firstChild();
    if (firstChild != null) {
      List<Pair<TregexPattern,TsurgeonPattern>> ops = Generics.newArrayList();

      for (int i = 0; i < operations.length; i++) {
        for (TregexPattern pattern : matchPatterns[i]) {
          ops.add(Generics.newPair(pattern, operations[i]));
        }
      }

      return Tsurgeon.processPatternsOnTree(ops, t);
    } else {
      return t;
    }
  }","Transforms t if it contains an UCP, it will change the UCP tag into the phrasal tag of the first word of the UCP (UCP (JJ electronic) (, ,) (NN computer) (CC and) (NN building)) will become (ADJP (JJ electronic) (, ,) (NN computer) (CC and) (NN building))",0,196
6465,"public String getItemMetaDataByLabel(String label) {
    for (Iterator i = this.itemMetaDataSet.iterator(); i.hasNext(); ) {
      ItemMetaDataIfc itemMetaData = (ItemMetaDataIfc) i.next();
      if (itemMetaData.getLabel().equals(label)) {
        return itemMetaData.getEntry();
      }
    }
    return null;
  }",Get meta data by label,0,104
7394,"public Reporter execute() throws IOException {
        Map<ClusterNode, Iterator<Pair<ByteArray, Versioned<byte[]>>>> nodeFetchIteratorMap;
        nodeFetchIteratorMap = new HashMap<ClusterNode, Iterator<Pair<ByteArray, Versioned<byte[]>>>>();
        /* start fetch from each node */
        for(ClusterNode clusterNode: clusterNodeList) {
            AdminClient adminClient = adminClients.get(clusterNode.getPrefixId());
            List<Integer> singlePartition = new ArrayList<Integer>();
            singlePartition.add(partitionId);
            if(logger.isDebugEnabled()) {
                logger.debug(""Start fetch request to Node["" + clusterNode.toString()
                             + ""] for partition["" + partitionId + ""] of store["" + storeName + ""]"");
            }

            Iterator<Pair<ByteArray, Versioned<byte[]>>> fetchIterator;
            fetchIterator = adminClient.bulkFetchOps.fetchEntries(clusterNode.getNode().getId(),
                                                                  storeName,
                                                                  singlePartition,
                                                                  null,
                                                                  false);
            nodeFetchIteratorMap.put(clusterNode, fetchIterator);
        }
        keyFetchTracker = new KeyFetchTracker(clusterNodeList.size());

        /* start to fetch */
        boolean fetchFinished;
        do {
            fetchFinished = true;
            for(Map.Entry<ClusterNode, Iterator<Pair<ByteArray, Versioned<byte[]>>>> nodeFetchIteratorMapEntry: nodeFetchIteratorMap.entrySet()) {
                ClusterNode clusterNode = nodeFetchIteratorMapEntry.getKey();
                Iterator<Pair<ByteArray, Versioned<byte[]>>> fetchIterator = nodeFetchIteratorMapEntry.getValue();
                if(fetchIterator.hasNext()) {
                    fetchFinished = false;
                    reporter.recordScans(1);

                    Pair<ByteArray, Versioned<byte[]>> fetchedEntry = fetchIterator.next();
                    ByteArray key = fetchedEntry.getFirst();
                    Versioned<byte[]> versioned = fetchedEntry.getSecond();

                    // record fetch
                    recordFetch(clusterNode, key, versioned);

                    // try sweep last key fetched by this iterator
                    keyFetchTracker.recordFetch(clusterNode, key);
                    if(logger.isTraceEnabled()) {
                        logger.trace(""fetched "" + new String(key.get()));
                        logger.trace(""map has keys: "" + keyVersionNodeSetMap.size());
                    }
                    trySweepAll();
                    if(logger.isTraceEnabled()) {
                        logger.trace(""sweeped; keys left: "" + keyVersionNodeSetMap.size());
                    }
                }
            }

            // stats reporting
            if(logger.isInfoEnabled()) {
                String report = reporter.tryProgressReport();
                if(report != null) {
                    for(String line: report.split(""\n"")) {
                        logger.info(line);
                    }
                }
            }
        } while(!fetchFinished);

        /* adminClient shutdown */
        for(AdminClient adminClient: adminClients) {
            if(adminClient != null) {
                adminClient.stop();
            }
        }

        // clean keys not sufficient for write
        cleanIneligibleKeys(keyVersionNodeSetMap, requiredWrites);

        keyFetchTracker.finishAll();
        trySweepAll();

        reporter.processInconsistentKeys(storeName, partitionId, keyVersionNodeSetMap);

        return reporter;
    }",Run consistency check on connected key-value iterators,0,809
7424,"public SslContextProvider<K> release(final SslContextProvider<K> value) {
    checkNotNull(value, ""value"");
    K key = value.getSource();
    return releaseInternal(key, value);
  }",Releases an instance of the given  SslContextProvider.,0,62
5628,"public SolrCore create(CoreDescriptor dcore) {

    if (isShutDown) {
      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, ""Solr has shutdown."");
    }

    try {

      ConfigSet coreConfig = coreConfigService.getConfig(dcore);
      log.info(""Creating SolrCore '{}' using configuration from {}"", dcore.getName(), coreConfig.getName());
      SolrCore core = new SolrCore(dcore, coreConfig);
      solrCores.addCreated(core);

      // always kick off recovery if we are in non-Cloud mode
      if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {
        core.getUpdateHandler().getUpdateLog().recoverFromLog();
      }

      return core;

    }
    catch (Exception e) {
      throw recordAndThrow(dcore.getName(), ""Unable to create core: "" + dcore.getName(), e);
    }

  }",Creates a new core based on a descriptor but does not register it.,0,229
6738,"public ConsumesRequestCondition getMatchingCondition(ServerWebExchange exchange) {
		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {
			return PRE_FLIGHT_MATCH;
		}
		if (isEmpty()) {
			return this;
		}
		Set<ConsumeMediaTypeExpression> result = new LinkedHashSet<>(this.expressions);
		result.removeIf(expression -> !expression.match(exchange));
		return (!result.isEmpty() ? new ConsumesRequestCondition(result) : null);
	}",Checks if any of the contained media type expressions match the given request 'Content-Type' header and returns an instance that is guaranteed to contain matching expressions only.,0,131
5822,"public URLConnection openConnection(URL url, boolean isSpnego)
      throws IOException, AuthenticationException {
    if (isSpnego) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""open AuthenticatedURL connection"" + url);
      }
      UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab();
      final AuthenticatedURL.Token authToken = new AuthenticatedURL.Token();
      return new AuthenticatedURL(AUTH, connConfigurator).openConnection(url,
          authToken);
    } else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""open URL connection"");
      }
      URLConnection connection = url.openConnection();
      if (connection instanceof HttpURLConnection) {
        connConfigurator.configure((HttpURLConnection) connection);
      }
      return connection;
    }
  }",Opens a url with read and connect timeouts,0,210
7089,"private Exception createExceptionFromFault(Fault fault) {
        String message = fault.getFaultstring();

        Detail faultDetail = fault.getDetail();
        if (faultDetail == null || faultDetail.getAny().size() == 0) {
            try {
                return new SOAPFaultException(SOAPFactory.newInstance().createFault(message, fault.getFaultcode()));
            } catch (SOAPException e) {
                throw new RuntimeCamelException(e);
            }
        }
        
        JAXBElement<?> detailEl = (JAXBElement<?>) faultDetail.getAny().get(0);
        Class<? extends Exception> exceptionClass = getDataFormat().getElementNameStrategy().findExceptionForFaultName(detailEl.getName());
        Constructor<? extends Exception> messageConstructor;
        Constructor<? extends Exception> constructor;

        try {
            messageConstructor = exceptionClass.getConstructor(String.class);
            Object detail = JAXBIntrospector.getValue(detailEl);
            try {
                constructor = exceptionClass.getConstructor(String.class, detail.getClass());
                return constructor.newInstance(message, detail);
            } catch (NoSuchMethodException e) {
                return messageConstructor.newInstance(message);
            }
        } catch (Exception e) {
            throw new RuntimeCamelException(e);
        }
    }",Creates an exception and eventually an embedded bean that contains the fault detail.,0,359
6474,"protected List<MediaType> getMediaTypes(HttpServletRequest request) {
		if (this.favorPathExtension) {
			String requestUri = urlPathHelper.getLookupPathForRequest(request);
			String filename = WebUtils.extractFullFilenameFromUrlPath(requestUri);
			MediaType mediaType = getMediaTypeFromFilename(filename);
			if (mediaType != null) {
				if (logger.isDebugEnabled()) {
					logger.debug(""Requested media type is '"" + mediaType + ""' (based on filename '"" + filename + ""')"");
				}
				return Collections.singletonList(mediaType);
			}
		}
		if (this.favorParameter) {
			if (request.getParameter(this.parameterName) != null) {
				String parameterValue = request.getParameter(this.parameterName);
				MediaType mediaType = getMediaTypeFromParameter(parameterValue);
				if (mediaType != null) {
					if (logger.isDebugEnabled()) {
						logger.debug(""Requested media type is '"" + mediaType + ""' (based on parameter '"" +
								this.parameterName + ""'='"" + parameterValue + ""')"");
					}
					return Collections.singletonList(mediaType);
				}
			}
		}
		if (!this.ignoreAcceptHeader) {
			String acceptHeader = request.getHeader(ACCEPT_HEADER);
			if (StringUtils.hasText(acceptHeader)) {
				try {
					List<MediaType> acceptableMediaTypes = MediaType.parseMediaTypes(acceptHeader);
					List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request);
					Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>();
					for (MediaType acceptable : acceptableMediaTypes) {
						for (MediaType producible : producibleMediaTypes) {
							if (acceptable.isCompatibleWith(producible)) {
								compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible));
							}
						}
					}
					List<MediaType> selectedMediaTypes = new ArrayList<MediaType>(compatibleMediaTypes);
					MediaType.sortBySpecificityAndQuality(selectedMediaTypes);
					if (logger.isDebugEnabled()) {
						logger.debug(""Requested media types are "" + selectedMediaTypes + "" based on Accept header types "" +
								""and producible media types "" + producibleMediaTypes + "")"");
					}
					return selectedMediaTypes;
				}
				catch (IllegalArgumentException ex) {
					if (logger.isDebugEnabled()) {
						logger.debug(""Could not parse accept header ["" + acceptHeader + ""]: "" + ex.getMessage());
					}
					return null;
				}
			}
		}
		if (this.defaultContentType != null) {
			if (logger.isDebugEnabled()) {
				logger.debug(""Requested media types is "" + this.defaultContentType +
						"" (based on defaultContentType property)"");
			}
			return Collections.singletonList(this.defaultContentType);
		}
		else {
			return Collections.emptyList();
		}
	}",Determines the list of  MediaType for the given  HttpServletRequest.,0,729
7417,"public RealmEventsConfigRepresentation getRealmEventsConfig() {
        auth.init(RealmAuth.Resource.EVENTS).requireView();

        RealmEventsConfigRepresentation config = ModelToRepresentation.toEventsConfigReprensetation(realm);
        if (config.getEnabledEventTypes() == null || config.getEnabledEventTypes().isEmpty()) {
            config.setEnabledEventTypes(new LinkedList<String>());
            for (EventType e : EventType.values()) {
                if (e.isSaveByDefault()) {
                    config.getEnabledEventTypes().add(e.name());
                }
            }
        }
        return config;
    }",Get the events provider configuration,0,157
6662,"public int cleanLogBuffer()
    {
        int workCount = 0;

        for (final LogBuffer logBuffer : rebuilders)
        {
            if (logBuffer.status() == NEEDS_CLEANING && logBuffer.compareAndSetStatus(NEEDS_CLEANING, IN_CLEANING))
            {
                logBuffer.clean();
                workCount = 1;
            }
        }

        return workCount;
    }",Called from the  DriverConductor.,0,104
5461,"private int getParaFromViewCursorOrDialog(String chPara) {
    // try to get ViewCursor position (proof initiated by mouse click)
    int nParas = docCursor.getViewCursorParagraph();
    if (nParas >= 0 && nParas < allParas.size() && chPara.equals(allParas.get(nParas))) {
      numLastVCPara = nParas;
      if (debugMode > 0) {
        MessageHandler.printToLogFile(""From View Cursor: Number of Paragraph: "" + nParas + logLineBreak);
      }
      return nParas;
    }
    // try to get next position from last ViewCursor position (proof per dialog box)
    for(int i = numLastVCPara; i < allParas.size(); i++) {
      if (chPara.equals(allParas.get(i))) {
        numLastVCPara = i;
        if (debugMode > 0) {
          MessageHandler.printToLogFile(""From Dialog: Number of Paragraph: "" + i + logLineBreak);
        }
        return numLastVCPara;
      }
    }
    return -1;
  }",Get the number of paragraph from position of ViewCursor or from the last position (dialog),0,241
7568,"private static IgniteNamedInstance start0(GridStartContext startCtx, boolean failIfStarted ) throws IgniteCheckedException {
        assert startCtx != null;

        String name = startCtx.config().getGridName();

        if (name != null && name.isEmpty())
            throw new IgniteCheckedException(""Non default grid instances cannot have empty string name."");

        IgniteNamedInstance grid = new IgniteNamedInstance(name);

        IgniteNamedInstance old;

        if (name != null)
            old = grids.putIfAbsent(name, grid);
        else {
            synchronized (dfltGridMux) {
                old = dfltGrid;

                if (old == null)
                    dfltGrid = grid;
            }
        }

        if (old != null)
            if (failIfStarted) {
                if (name == null)
                    throw new IgniteCheckedException(""Default Ignite instance has already been started."");
                else
                    throw new IgniteCheckedException(""Ignite instance with this name has already been started: "" + name);
            }
            else
                return old;

        if (startCtx.config().getWarmupClosure() != null)
            startCtx.config().getWarmupClosure().apply(startCtx.config());

        startCtx.single(grids.size() == 1);

        boolean success = false;

        try {
            try {
                grid.start(startCtx);
            }
            catch (IgniteInterruptedCheckedException e) {
                if (grid.starterThreadInterrupted)
                    Thread.interrupted();

                throw e;
            }

            notifyStateChange(name, STARTED);

            success = true;
        }
        finally {
            if (!success) {
                if (name != null)
                    grids.remove(name, grid);
                else {
                    synchronized (dfltGridMux) {
                        if (dfltGrid == grid)
                            dfltGrid = null;
                    }
                }

                grid = null;
            }
        }

        if (grid == null)
            throw new IgniteCheckedException(""Failed to start grid with provided configuration."");

        return grid;
    }",Starts grid with given configuration.,0,556
7407,"private float getVerticalDragRange() {
        return getHeight() - transformer.getHeightPlusMarginTop();
    }",Calculate the vertical drag range between the custom view and dragged view.,0,29
5373,"public static String minus(String self, Object target) {
        String text = DefaultGroovyMethods.toString(target);
        int index = self.indexOf(text);
        if (index == -1) return self;
        int end = index + text.length();
        if (self.length() > end) {
            return self.substring(0, index) + self.substring(end);
        }
        return self.substring(0, index);
    }",Remove a part of a String.,0,146
5544,"public static boolean notEqual(final Object object1, final Object object2) {
        return !ObjectUtils.equals(object1, object2);
    }","Compares two objects for inequality, where either one or both objects may be  null.",0,42
5842,"public Agent createIceAgent()
     {
         Agent a = new Agent();
//         a.getStunStack().
         return a;
     }",Creates and returns an ICE agent that a protocol could use for the negotiation of media transport addresses.,0,36
7055,"private long remainingToQueue() {
    ReadRequestInternal request = mRequest;
    return request == null ? 0 : request.end() - mPosToQueue;
  }",Requires to hold mLock when calling this.,0,50
7015,"public List<Query> optimize(Query query)
  {
    long start = System.currentTimeMillis();
    // only topN/timeseries/groupby query can be optimized
    // only TableDataSource can be optimiezed
    if (!(query instanceof TopNQuery || query instanceof TimeseriesQuery || query instanceof GroupByQuery)
        || !(query.getDataSource() instanceof TableDataSource)) {
      return Collections.singletonList(query);
    }
    String datasourceName = ((TableDataSource) query.getDataSource()).getName();
    // get all derivatives for datasource in query. The derivatives set is sorted by average size of 
    // per segment granularity.
    Set<DerivativeDataSource> derivatives = DerivativeDataSourceManager.getDerivatives(datasourceName);
    
    if (derivatives.isEmpty()) {
      return Collections.singletonList(query);
    }
    lock.readLock().lock();
    try {
      totalCount.putIfAbsent(datasourceName, new AtomicLong(0));
      hitCount.putIfAbsent(datasourceName, new AtomicLong(0));
      costTime.putIfAbsent(datasourceName, new AtomicLong(0));
      totalCount.get(datasourceName).incrementAndGet();
      
      // get all fields which the query required
      Set<String> requiredFields = MaterializedViewUtils.getRequiredFields(query);
      
      Set<DerivativeDataSource> derivativesWithRequiredFields = Sets.newHashSet();
      for (DerivativeDataSource derivativeDataSource : derivatives) {
        derivativesHitCount.putIfAbsent(derivativeDataSource.getName(), new AtomicLong(0));
        if (derivativeDataSource.getColumns().containsAll(requiredFields)) {
          derivativesWithRequiredFields.add(derivativeDataSource);
        }
      }
      // if no derivatives contains all required dimensions, this materialized view selection failed.
      if (derivativesWithRequiredFields.isEmpty()) {
        missFields.putIfAbsent(datasourceName, new ConcurrentHashMap<>());
        missFields.get(datasourceName).putIfAbsent(requiredFields, new AtomicLong(0));
        missFields.get(datasourceName).get(requiredFields).incrementAndGet();
        costTime.get(datasourceName).addAndGet(System.currentTimeMillis() - start);
        return Collections.singletonList(query);
      }
      
      List<Query> queries = Lists.newArrayList();
      List<Interval> remainingQueryIntervals = (List<Interval>) query.getIntervals();
      
      for (DerivativeDataSource derivativeDataSource : ImmutableSortedSet.copyOf(derivativesWithRequiredFields)) {
        final List<Interval> derivativeIntervals = remainingQueryIntervals.stream()
            .flatMap(interval -> serverView
                .getTimeline((new TableDataSource(derivativeDataSource.getName())))
                .lookup(interval)
                .stream()
                .map(TimelineObjectHolder::getInterval)
            )
            .collect(Collectors.toList());
        // if the derivative does not contain any parts of intervals in the query, the derivative will
        // not be selected. 
        if (derivativeIntervals.isEmpty()) {
          continue;
        }
        
        remainingQueryIntervals = MaterializedViewUtils.minus(remainingQueryIntervals, derivativeIntervals);
        queries.add(
            query.withDataSource(new TableDataSource(derivativeDataSource.getName()))
                .withQuerySegmentSpec(new MultipleIntervalSegmentSpec(derivativeIntervals))
        );
        derivativesHitCount.get(derivativeDataSource.getName()).incrementAndGet();
        if (remainingQueryIntervals.isEmpty()) {
          break;
        }
      }

      if (queries.isEmpty()) {
        costTime.get(datasourceName).addAndGet(System.currentTimeMillis() - start);
        return Collections.singletonList(query);
      }

      //after materialized view selection, the result of the remaining query interval will be computed based on
      // the original datasource. 
      if (!remainingQueryIntervals.isEmpty()) {
        queries.add(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(remainingQueryIntervals)));
      }
      hitCount.get(datasourceName).incrementAndGet();
      costTime.get(datasourceName).addAndGet(System.currentTimeMillis() - start);
      return queries;
    } 
    finally {
      lock.readLock().unlock();
    }
  }",Do main work about materialized view selection: transform user query to one or more sub-queries.,0,915
6812,"Connection getConnection() throws SQLException
    {
        try
        {
            long timeout = configuration.getConnectionTimeout();
            final long start = System.currentTimeMillis();
            do
            {
                addConnections(AddConnectionStrategy.ONLY_IF_EMPTY);
    
                IHikariConnectionProxy connectionProxy = idleConnections.poll(timeout, TimeUnit.MILLISECONDS);
                if (connectionProxy == null)
                {
                    // We timed out... break and throw exception
                	break;
                }

                idleConnectionCount.decrementAndGet();

                connectionProxy.unclose();

                if (!isConnectionAlive(connectionProxy, timeout))
                {
                    // Throw away the dead connection, try again
                    closeConnection(connectionProxy);
                    timeout -= (System.currentTimeMillis() - start);
                    continue;
                }
    
                if (leakDetectionThreshold > 0)
                {
                    connectionProxy.captureStack(leakDetectionThreshold, houseKeepingTimer);
                }

                connectionProxy.clearWarnings();

                return connectionProxy;

            } while (timeout > 0);

            logPoolState();

        	String msg = String.format(""Timeout of %dms encountered waiting for connection."", configuration.getConnectionTimeout());
            LOGGER.error(msg);

            throw new SQLException(msg);
        }
        catch (InterruptedException e)
        {
            return null;
        }
        finally
        {
            addConnections(AddConnectionStrategy.BACKGROUND_FILL);
        }
    }","Get a connection from the pool, or timeout trying.",0,343
5536,"public boolean equals(Object obj) {
		if (obj instanceof NFA) {
			@SuppressWarnings(""unchecked"")
			NFA<T> other = (NFA<T>) obj;

			return nonDuplicatingTypeSerializer.equals(other.nonDuplicatingTypeSerializer) &&
				sharedBuffer.equals(other.sharedBuffer) &&
				states.equals(other.states) &&
				windowTime == other.windowTime;
		} else {
			return false;
		}
	}",Processes the next input event.,0,126
7490,"public BigDecimal getEnteredNumber() {
        String value = ""0"";
        for (int i = mInputPointer; i >= 0; i--) {
            if (mInput[i] == -1) {
                break;
            } else if (mInput[i] == CLICKED_DECIMAL) {
                value += ""."";
            } else {
                value += mInput[i];
            }
        }
        if (mSign == SIGN_NEGATIVE) {
            value = ""-"" + value;
        }

        return new BigDecimal(value);
    }",Returns the number inputted by the user,0,175
6598,"public static AssignerConfigurable value(Object fixedValue) {
        if (fixedValue == null) {
            return new ForPoolValue(NullConstant.INSTANCE,
                    TypeDescription.OBJECT,
                    defaultAssigner(),
                    true);
        }
        Class<?> type = fixedValue.getClass();
        if (type == String.class) {
            return new ForPoolValue(new TextConstant((String) fixedValue),
                    TypeDescription.STRING,
                    defaultAssigner(),
                    defaultConsiderRuntimeType());
        } else if (type == Boolean.class) {
            return new ForPoolValue(IntegerConstant.forValue((Boolean) fixedValue),
                    new TypeDescription.ForLoadedType(boolean.class),
                    defaultAssigner(),
                    defaultConsiderRuntimeType());
        } else if (type == Byte.class) {
            return new ForPoolValue(IntegerConstant.forValue((Byte) fixedValue),
                    new TypeDescription.ForLoadedType(byte.class),
                    defaultAssigner(),
                    defaultConsiderRuntimeType());
        } else if (type == Short.class) {
            return new ForPoolValue(IntegerConstant.forValue((Short) fixedValue),
                    new TypeDescription.ForLoadedType(short.class),
                    defaultAssigner(),
                    defaultConsiderRuntimeType());
        } else if (type == Character.class) {
            return new ForPoolValue(IntegerConstant.forValue((Character) fixedValue),
                    new TypeDescription.ForLoadedType(char.class),
                    defaultAssigner(),
                    defaultConsiderRuntimeType());
        } else if (type == Integer.class) {
            return new ForPoolValue(IntegerConstant.forValue((Integer) fixedValue),
                    new TypeDescription.ForLoadedType(int.class),
                    defaultAssigner(),
                    defaultConsiderRuntimeType());
        } else if (type == Long.class) {
            return new ForPoolValue(LongConstant.forValue((Long) fixedValue),
                    new TypeDescription.ForLoadedType(long.class),
                    defaultAssigner(),
                    defaultConsiderRuntimeType());
        } else if (type == Float.class) {
            return new ForPoolValue(FloatConstant.forValue((Float) fixedValue),
                    new TypeDescription.ForLoadedType(float.class),
                    defaultAssigner(),
                    defaultConsiderRuntimeType());
        } else if (type == Double.class) {
            return new ForPoolValue(DoubleConstant.forValue((Double) fixedValue),
                    new TypeDescription.ForLoadedType(double.class),
                    defaultAssigner(),
                    defaultConsiderRuntimeType());
        } else {
            return reference(fixedValue);
        }
    }",Creates a fixed value instrumentation that returns a fixed value.,0,674
5622,"public Put add(byte [] family, byte [] qualifier, long ts, byte [] value) {
    return addColumn(family, qualifier, ts, value);
  }","Add the specified column and value, with the specified timestamp as its version to this Put operation.",0,58
6217,"public static RegistryAuthenticator forOther(String serverUrl, String repository)
      throws RegistryAuthenticationFailedException, IOException, RegistryException {
    try {
      return RegistryClient.factory(serverUrl, repository)
          .newRegistryClient()
          .getRegistryAuthenticator();

    } catch (MalformedURLException ex) {
      throw new RegistryAuthenticationFailedException(ex);

    } catch (InsecureRegistryException ex) {
      // HTTP is not allowed, so just return null.
      return null;
    }
  }",Gets a  RegistryAuthenticator for a custom registry server and repository.,0,116
7800,"public static Predicate or(Predicate left, Predicate right) {
        left = (Predicate) extract(left);
        right = (Predicate) extract(right);
        if (left == null) {
            return right;
        } else if (right == null) {
            return left;
        } else {
            return PredicateOperation.create(Ops.OR, left, right);
        }
    }",Create a left or right expression,0,126
7183,"protected int getHorizontalSpacing() {
        return LayoutManager.get(client).getOuterWidth(spacingMeasureElement);
    }",Returns the spacing between the cells horizontally in pixels,0,29
5898,"public DomainNameMapping<V> build() {
        return builder.build();
    }",Creates a new instance of immutable  DomainNameMapping,0,26
6381,"public List<Search> order(List<Search> unordered) {
        // Description above state that the original order should be preserved, except for the dependency constraint.
        // Yet we botch that guarantee by sorting the list...
        unordered.sort(Comparator.comparing(Search::getName));

        // No, this is not a fast algorithm...
        indexOnDocumentName(unordered);
        List<Search> ordered = new ArrayList<>(unordered.size());
        List<Search> moveOutwards = new ArrayList<>();
        for (Search search : unordered) {
            if (containsInheritedAndReferenced(ordered, search)) {
                addOrdered(ordered, search, moveOutwards);
            }
            else {
                moveOutwards.add(search);
            }
        }

        // Any leftovers means we have search definitions with undefined inheritants.
        // This is warned about elsewhere.
        ordered.addAll(moveOutwards);

        documentNameToSearch.clear();
        return ordered;
    }",Reorders the given list of search definitions such that any supertype always preceed any subtype.,0,196
6957,"public static void removeModifier(EnumSet<Modifier> modifiers, Modifier mod) {
        modifiers.remove(mod);
    }",Removes the given modifier.,0,35
6959,"public Time getTime(int columnIndex, Calendar calendar) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode(""getTime("" + columnIndex + "", calendar)"");
            }
            return get(columnIndex).getTime(calendar != null ? calendar.getTimeZone() : null);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }",Returns the value of the specified column as a java.sql.Time using a specified time zone.,0,119
5547,"public PrivacyList getActiveList() throws NoResponseException, XMPPErrorException, NotConnectedException  {
        Privacy privacyAnswer = this.getPrivacyWithListNames();
        String listName = privacyAnswer.getActiveName();
        if (StringUtils.isNullOrEmpty(listName)) {
            return null;
        }
        boolean isDefaultAndActive = listName != null && listName.equals(privacyAnswer.getDefaultName());
        return new PrivacyList(true, isDefaultAndActive, listName, getPrivacyListItems(listName));
    }",Answer the active privacy list.,0,126
7360,"public String studentGetCourseName(int rowID) {
		waitForElementPresent(By.className(""dataTable""));
		rowID++;
		return selenium.getTable(""class=dataTable."" + rowID + "".1"");
	}",Returns course name from the table at specific rowID as student.,0,59
6085,"public static AlluxioException fromThrift(AlluxioTException e) {
    Class<? extends AlluxioException> throwClass;
    if (e.isSetClassName()) {
      // server version 1.1.0 or newer
      try {
        throwClass = (Class<? extends AlluxioException>) Class.forName(e.getClassName());
      } catch (ClassNotFoundException ee) {
        // this can happen when the client is talking to a newer version of a server that
        // introduced an exception that the client does not recognize
        return new AlluxioException(e.getMessage());
      }
    } else {
      // server version 1.0.x
      throwClass = AlluxioExceptionType.getAlluxioExceptionClass(e.getType());
      if (throwClass == null) {
        return new AlluxioException(e.getMessage());
      }
    }
    try {
      return throwClass.getConstructor(String.class).newInstance(e.getMessage());
    } catch (ReflectiveOperationException ee) {
      String errorMessage = String
          .format(""Could not instantiate %s with a String-only constructor: %s"", e.getType(),
              ee.getMessage());
      throw new IllegalStateException(errorMessage, ee);
    }
  }",Converts an Alluxio exception from Thrift representation to native representation.,0,270
6297,"private ConstantNode getCallerClassNode(MetaAccessProvider metaAccess) {
        if (!shouldIntrinsify(getTargetMethod())) {
            return null;
        }

        // Walk back up the frame states to find the caller at the required depth.
        FrameState state = stateAfter();

        // Cf. JVM_GetCallerClass
        // NOTE: Start the loop at depth 1 because the current frame state does
        // not include the Reflection.getCallerClass() frame.
        for (int n = 1; state != null; state = state.outerFrameState(), n++) {
            HotSpotResolvedJavaMethod method = (HotSpotResolvedJavaMethod) state.method();
            switch (n) {
                case 0:
                    throw GraalInternalError.shouldNotReachHere(""current frame state does not include the Reflection.getCallerClass frame"");
                case 1:
                    // Frame 0 and 1 must be caller sensitive (see JVM_GetCallerClass).
                    if (!method.isCallerSensitive()) {
                        return null;  // bail-out; let JVM_GetCallerClass do the work
                    }
                    break;
                default:
                    if (!method.ignoredBySecurityStackWalk()) {
                        // We have reached the desired frame; return the holder class.
                        HotSpotResolvedObjectType callerClass = method.getDeclaringClass();
                        return ConstantNode.forConstant(callerClass.getEncoding(Representation.JavaClass), metaAccess);
                    }
                    break;
            }
        }
        return null;  // bail-out; let JVM_GetCallerClass do the work
    }",If inlining is deep enough this method returns a  ConstantNode of the caller class by walking the the stack.,0,266
7543,"public static byte not(byte first) {
        return mockingProgress.getLastArguments().reportNot().returnZero();
    }",byte argument that does not match the given argument matcher.,0,36
5686,"public static int getScreenWidth() {
        WindowManager wm = (WindowManager) Utils.getApp().getSystemService(Context.WINDOW_SERVICE);
        if (wm == null) return -1;
        Point point = new Point();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            wm.getDefaultDisplay().getRealSize(point);
        } else {
            wm.getDefaultDisplay().getSize(point);
        }
        return point.x;
    }","Return the width of screen, in pixel.",0,138
7254,"private long computeNumberOfProcessedKeys() {
		OptimizerNode pred1 = input1 == null ? null : input1.getSourcePact();
		OptimizerNode pred2 = input2 == null ? null : input2.getSourcePact();

		if(pred1 != null && pred2 != null) {
			// Match processes only keys that appear in both input sets
			
			if(pred1.getEstimatedKeyCardinality() == -1) {
				// key card of 1st input unknown. Use key card of 2nd input as upper bound
				return pred2.getEstimatedKeyCardinality();
			} else if(pred2.getEstimatedKeyCardinality() == -1) {
				// key card of 2nd input unknown. Use key card of 1st input as upper bound
				return pred1.getEstimatedKeyCardinality();
			} else {
				// key card of both inputs known. Use minimum as upper bound
				return Math.min(pred1.getEstimatedKeyCardinality(), pred2.getEstimatedKeyCardinality());
			}
		} else {
			return -1;
		}
	}",Computes the number of keys that are processed by the PACT.,0,214
7508,"public boolean execute(CommandSender sender, String commandLabel, String[] args) {
        boolean success = false;

        if (!owningPlugin.isEnabled()) {
            return false;
        }

        try {
            success = executor.onCommand(sender, this, commandLabel, args);
        } catch (Throwable ex) {
            throw new CommandException(""Unhandled exception executing command '"" + commandLabel + ""' in plugin "" + owningPlugin.getDescription().getFullName(), ex);
        }

        if (!success && usageMessage.length() > 0) {
            sender.sendMessage(usageMessage.replace(""<command>"", commandLabel));
        }
        
        return success;
    }","Executes the command, returning its success",0,198
7664,"public static boolean isTree(SemanticGraph tree) {
    for (IndexedWord vertex : tree.vertexSet()) {
      // Check one and only one incoming edge
      if (tree.getRoots().contains(vertex)) {
        if (tree.incomingEdgeIterator(vertex).hasNext()) {
          return false;
        }
      } else {
        Iterator<SemanticGraphEdge> iter = tree.incomingEdgeIterator(vertex);
        if (!iter.hasNext()) {
          return false;
        }
        iter.next();
        if (iter.hasNext()) {
          return false;
        }
      }
      // Check incoming and outgoing edges match
      for (SemanticGraphEdge edge : tree.outgoingEdgeIterable(vertex)) {
        boolean foundReverse = false;
        for (SemanticGraphEdge reverse : tree.incomingEdgeIterable(edge.getDependent())) {
          if (reverse == edge) { foundReverse = true; }
        }
        if (!foundReverse) {
          return false;
        }
      }
      for (SemanticGraphEdge edge : tree.incomingEdgeIterable(vertex)) {
        boolean foundReverse = false;
        for (SemanticGraphEdge reverse : tree.outgoingEdgeIterable(edge.getGovernor())) {
          if (reverse == edge) { foundReverse = true; }
        }
        if (!foundReverse) {
          return false;
        }
      }
    }
    // Check topological sort -- sometimes fails?
//    try {
//      tree.topologicalSort();
//    } catch (Exception e) {
//      e.printStackTrace();
//      return false;
//    }
    return true;
  }",A little utility function to make sure a SemanticGraph is a tree.,0,397
7856,"public List<ResourceFilter> create(AbstractMethod am) {
        LinkedList<ResourceFilter> list = new LinkedList<ResourceFilter>();
        Filter f;
        if (logger.isLoggable(Level.FINE)) {
            for (Annotation a : am.getAnnotations()) {
                logger.log(Level.FINE, ""AtmosphereFilter processing annotation: "" + a);
            }
        }

        if (SuspendResponse.class.isAssignableFrom(am.getMethod().getReturnType())) {
            list.addLast(new Filter(Action.SUSPEND_RESPONSE));
            return list;
        }

        if (am.isAnnotationPresent(Broadcast.class)) {
            int delay = am.getAnnotation(Broadcast.class).delay();
            Class[] suspendTimeout = am.getAnnotation(Broadcast.class).value();

            if (am.getAnnotation(Broadcast.class).resumeOnBroadcast()) {
                f = new Filter(Action.RESUME_ON_BROADCAST, delay, 0, Suspend.SCOPE.APPLICATION, true, suspendTimeout);
            } else {
                f = new Filter(Action.BROADCAST, delay, 0, Suspend.SCOPE.APPLICATION, true, suspendTimeout);
            }

            list.addLast((ResourceFilter) f);

            if (am.isAnnotationPresent(Cluster.class)) {
                suspendTimeout = am.getAnnotation(Cluster.class).value();
                for (Class<ClusterBroadcastFilter> c : suspendTimeout) {
                    try {
                        ClusterBroadcastFilter cbf = c.newInstance();
                        cbf.setClusterName(am.getAnnotation(Cluster.class).name());
                        f.addCluster(cbf);
                    } catch (Throwable t) {
                        logger.log(Level.WARNING, ""Invalid ClusterBroadcastFilter"", t);
                    }
                }
            }
        }

        if (am.isAnnotationPresent(Suspend.class)) {

            long suspendTimeout = am.getAnnotation(Suspend.class).period();
            TimeUnit tu = am.getAnnotation(Suspend.class).timeUnit();
            suspendTimeout = translateTimeUnit(suspendTimeout,tu);

            Suspend.SCOPE scope = am.getAnnotation(Suspend.class).scope();
            boolean outputComments = am.getAnnotation(Suspend.class).outputComments();

            if (am.getAnnotation(Suspend.class).resumeOnBroadcast()) {
                f = new Filter(Action.SUSPEND_RESUME, suspendTimeout, 0, scope, outputComments);
            } else {
                f = new Filter(Action.SUSPEND, suspendTimeout, 0, scope, outputComments);
            }
            f.setListeners(am.getAnnotation(Suspend.class).listeners());

            list.addFirst((ResourceFilter) f);
        }

        if (am.isAnnotationPresent(Resume.class)) {
            int suspendTimeout = am.getAnnotation(Resume.class).value();
            list.addFirst((ResourceFilter)
                    new Filter(Action.RESUME, suspendTimeout));
        }

        if (am.isAnnotationPresent(Schedule.class)) {
            int period = am.getAnnotation(Schedule.class).period();
            int waitFor = am.getAnnotation(Schedule.class).waitFor();

            if (am.getAnnotation(Schedule.class).resumeOnBroadcast()) {
                list.addFirst((ResourceFilter)
                        new Filter(Action.SCHEDULE_RESUME, period, waitFor));
            } else {
                list.addFirst((ResourceFilter)
                        new Filter(Action.SCHEDULE, period, waitFor));
            }
        }

        // Nothing, normal Jersey application.
        return list.size() > 0 ? list : null;
    }",Create a  ResourceFilter which contains the information about the annotation being processed.,0,954
5317,"private Throwable getThrowableException() {
        int h = System.identityHashCode(this);
        ExceptionNode e;
        final ReentrantLock lock = exceptionTableLock;
        lock.lock();
        try {
            expungeStaleExceptions();
            ExceptionNode[] t = exceptionTable;
            e = t[h & (t.length - 1)];
            while (e != null && e.get() != this)
                e = e.next;
        } finally {
            lock.unlock();
        }
        Throwable ex;
        if (e == null || (ex = e.ex) == null)
            return null;
        if (e.thrower != Thread.currentThread().getId()) {
            try {
                Constructor<?> noArgCtor = null;
                // public ctors only
                for (Constructor<?> c : ex.getClass().getConstructors()) {
                    Class<?>[] ps = c.getParameterTypes();
                    if (ps.length == 0)
                        noArgCtor = c;
                    else if (ps.length == 1 && ps[0] == Throwable.class)
                        return (Throwable)c.newInstance(ex);
                }
                if (noArgCtor != null) {
                    Throwable wx = (Throwable)noArgCtor.newInstance();
                    wx.initCause(ex);
                    return wx;
                }
            } catch (ReflectionStrippedError ignore) {
                // J2ObjC reflection-stripping change.
                return new Throwable(ex);
            } catch (Exception ignore) {
            }
        }
        return ex;
    }","Returns a rethrowable exception for this task, if available.",0,457
7071,"protected Statement createBindableStatement(PropertyNode propertyNode, Expression fieldExpression) {
        // create statementBody
        Expression methodArguments = new ArgumentListExpression(
                new Expression[]{
                        new ConstantExpression(propertyNode.getName()),
                        fieldExpression,
                        new BinaryExpression(
                                fieldExpression,
                                Token.newSymbol(Types.EQUAL, 0, 0),
                                new VariableExpression(""value""))});
        if (pcsField == null) {
            // call is directly on the object
            return new ExpressionStatement(
                    new MethodCallExpression(
                            VariableExpression.THIS_EXPRESSION,
                            ""firePropertyChange"",
                            methodArguments));
        } else {
            // call is on the propertyChangeSupport
            return new ExpressionStatement(
                    new MethodCallExpression(
                            new FieldExpression(pcsField),
                            ""firePropertyChange"",
                            methodArguments));
        }
    }","Creates a statement body similar to: pcsField.firePropertyChange(""field"", field, field = value)",0,199
6925,"public static long toLong(ByteBuffer buffer, int offset) {
    return ConverterHolder.BEST_CONVERTER.toLong(buffer, offset);
  }",Reads a long value at the given buffer's offset.,0,39
6473,"public TruffleFile getCanonicalFile(LinkOption... options) throws IOException {
        try {
            return new TruffleFile(fileSystemContext, fileSystemContext.fileSystem.toRealPath(path, options));
        } catch (IOException | SecurityException e) {
            throw e;
        } catch (Throwable t) {
            throw wrapHostException(t);
        }
    }",Returns a  TruffleFile representing the real (canonical) path of an existing file.,0,100
7732,"public BatchSchema build(){
    List<MaterializedField> fieldList = Lists.newArrayList(fields);
    return new BatchSchema(this.selectionVectorMode, fieldList);
  }",Generate a new BatchSchema object based on the current state of the builder.,0,46
5488,"private MongoPersistentProperty getIdPropertyFor(Class<?> type) {
		Optional<? extends MongoPersistentEntity<?>> persistentEntity = mappingContext.getPersistentEntity(type);
		return persistentEntity.isPresent() ? persistentEntity.get().getIdProperty().orElse(null) : null;
	}",Tries to convert the given  RuntimeException into a  DataAccessException but returns the original exception if the conversation failed.,0,75
6993,"private boolean isCarryingRegion(ServerName serverName, HRegionInfo hri) {
    RegionState regionState = regionStates.getRegionTransitionState(hri);
    ServerName transitionAddr = regionState != null? regionState.getServerName(): null;
    if (transitionAddr != null) {
      boolean matchTransitionAddr = transitionAddr.equals(serverName);
      LOG.debug(""Checking region="" + hri.getRegionNameAsString()
        + "", transitioning on server="" + matchTransitionAddr
        + "" server being checked: "" + serverName
        + "", matches="" + matchTransitionAddr);
      return matchTransitionAddr;
    }

    ServerName assignedAddr = regionStates.getRegionServerOfRegion(hri);
    boolean matchAssignedAddr = serverName.equals(assignedAddr);
    LOG.debug(""based on AM, current region="" + hri.getRegionNameAsString()
      + "" is on server="" + assignedAddr + "", server being checked: ""
      + serverName);
    return matchAssignedAddr;
  }",Check if the shutdown server carries the specific region.,0,229
6644,"private boolean checkIntent() {
        if (runOnce()) {
            return false;
        }

        if (mIntent.hasExtra(PlayerActivity.BUTTON_SUBSCRIBE))
            return true;

        Log.w(TAG, ""Action is cancelled. User tapped back key. Disable subsequent start of the player activity..."");
        // Uncomment next section to debug
        // Toast.makeText(mContext, ""Action is cancelled. Do nothing..."", Toast.LENGTH_LONG).show();
        return false;
    }",Check that user didn't tapped back key before actual playback,0,81
6558,"private DiscoInfoProvider getServerInfoProvider() {
        DiscoInfoProvider discoInfoProvider = new DiscoInfoProvider() {
            ArrayList identities = new ArrayList();
            ArrayList features = new ArrayList();

            public Iterator getIdentities(String name, String node, JID senderJID) {
                if (name == null) {
                    // Answer identity of the server
                    synchronized (identities) {
                        if (identities.isEmpty()) {
                            Element identity = DocumentHelper.createElement(""identity"");
                            identity.addAttribute(""category"", ""services"");
                            identity.addAttribute(""name"", ""Messenger Server"");
                            identity.addAttribute(""type"", ""jabber"");

                            identities.add(identity);
                        }
                    }
                    return identities.iterator();
                }
                else {
                    // Answer identity of a registered user.
                    // Note: We know that this user exists because #hasInfo returned true
                    return userIdentities.iterator();
                }
            }

            public Iterator getFeatures(String name, String node, JID senderJID) {
                if (name == null) {
                    // Answer features of the server
                    return serverFeatures.iterator();
                }
                else {
                    // Answer features of the user
                    return userFeatures.iterator();
                }
            }

            public boolean hasInfo(String name, String node, JID senderJID) {
                try {
                    // True if it is an info request of the server or of a registered user. We
                    // now support disco of user's bare JIDs
                    return node == null &&
                            (name == null || UserManager.getInstance().getUser(name) != null);
                }
                catch (UserNotFoundException e) {
                    return false;
                }
            }

            public XDataFormImpl getExtendedInfo(String name, String node, JID senderJID) {
                return null;
            }
        };
        return discoInfoProvider;
    }",Returns the DiscoInfoProvider responsible for providing information at the server level.,0,469
6799,"TextElementMatcher matchByRange() {
        return (TextElement textElement) ->
                getRange()
                        .flatMap(r1 -> textElement.getRange()
                                .map(r1::equals))
                        // We're missing range information. This may happen when a node is manually instantiated. Don't be too harsh on that:
                        .orElse(true);
    }",Creates a  TextElementMatcher that matches any TextElement with the same range as this TextElement.,0,65
6702,"public static XMPPError parseError(XmlPullParser parser) throws Exception {
        final String errorNamespace = ""urn:ietf:params:xml:ns:xmpp-stanzas"";
    	String errorCode = ""-1"";
        String type = null;
        String message = null;
        String condition = null;
        List<PacketExtension> extensions = new ArrayList<PacketExtension>();

        // Parse the error header
        for (int i=0; i<parser.getAttributeCount(); i++) {
            if (parser.getAttributeName(i).equals(""code"")) {
                errorCode = parser.getAttributeValue("""", ""code"");
            }
            if (parser.getAttributeName(i).equals(""type"")) {
            	type = parser.getAttributeValue("""", ""type"");
            }
        }
        boolean done = false;
        // Parse the text and condition tags
        while (!done) {
            int eventType = parser.next();
            if (eventType == XmlPullParser.START_TAG) {
                if (parser.getName().equals(""text"")) {
                    message = parser.nextText();
                }
                else {
                	// Condition tag, it can be xmpp error or an application defined error.
                    String elementName = parser.getName();
                    String namespace = parser.getNamespace();
                    if (errorNamespace.equals(namespace)) {
                    	condition = elementName;
                    }
                    else {
                    	extensions.add(parsePacketExtension(elementName, namespace, parser));
                    }
                }
            }
                else if (eventType == XmlPullParser.END_TAG) {
                    if (parser.getName().equals(""error"")) {
                        done = true;
                    }
                }
        }
        // Parse the error type.
        XMPPError.Type errorType = XMPPError.Type.CANCEL;
        try {
            errorType = XMPPError.Type.valueOf(type.toUpperCase());
        }
        catch (IllegalArgumentException iae) {
            // Print stack trace. We shouldn't be getting an illegal error type.
            iae.printStackTrace();
        }
        return new XMPPError(Integer.parseInt(errorCode), errorType, condition, message, extensions);
    }",Parses error sub-packets.,0,553
7326,"protected String getPropertyNameForFieldSearchable(Field field, FieldType searchableFieldType) {
	    return new StringBuilder()
	        .append(getGlobalPrefix())
	        .append(searchableFieldType.equals(FieldType.PRICE) ? getPricelistPrefix() : getLocalePrefix())
	        .append(field.getPropertyName()).append(""_"").append(searchableFieldType.getType())
	        .toString();
	}",Returns the property name for the given field and field type.,0,99
6667,"public INDArray getArr(boolean enforceExistence){
        if(sameDiff.arrayAlreadyExistsForVarName(getVarName()))
            return sameDiff.getArrForVarName(getVarName());

        //initialize value if it's actually a scalar constant (zero or 1 typically...)
        if(variableType == VariableType.VARIABLE && weightInitScheme != null && shape != null){
            INDArray arr = weightInitScheme.create(dataType, shape);
            sameDiff.associateArrayWithVariable(arr, this);
            if(log.isTraceEnabled()){
                log.trace(""getArr() for variable \""{}\"" allocated new array: shape {}"", getVarName(), Arrays.toString(getShape()));
            }
            return arr;
        } else if(sameDiff.getShapeForVarName(getVarName()) == null) {
            if (enforceExistence) {
                throw new IllegalStateException(""Cannot get array for SDVariable \"""" + getVarName() + ""\"": no array has"" +
                        "" been defined, and array shape cannot be calculated"");
            }
            if(log.isTraceEnabled()){
                log.trace(""SDVariable.getArr(): could not get array for variable {}: shape is null"", getVarName());
            }
            return null;
        }
        return sameDiff.getArrForVarName(getVarName());
    }",A getter for the allocated ndarray with this  SDVariable.,0,281
6437,"public Bitmap cropImage() throws Exception {
        Bitmap viewBitmap = getViewBitmap();
        if (viewBitmap == null) {
            return null;
        }

        cancelAllAnimations();
        setImageToWrapCropBounds(false);

        RectF currentImageRect = RectUtils.trapToRect(mCurrentImageCorners);
        if (currentImageRect.isEmpty()) {
            return null;
        }

        float currentScale = getCurrentScale();
        float currentAngle = getCurrentAngle();

        if (mMaxResultImageSizeX > 0 && mMaxResultImageSizeY > 0) {
            float cropWidth = mCropRect.width() / currentScale;
            float cropHeight = mCropRect.height() / currentScale;

            if (cropWidth > mMaxResultImageSizeX || cropHeight > mMaxResultImageSizeY) {

                float scaleX = mMaxResultImageSizeX / cropWidth;
                float scaleY = mMaxResultImageSizeY / cropHeight;
                float resizeScale = Math.min(scaleX, scaleY);

                Bitmap resizedBitmap = Bitmap.createScaledBitmap(viewBitmap,
                        (int) (viewBitmap.getWidth() * resizeScale),
                        (int) (viewBitmap.getHeight() * resizeScale), false);
                viewBitmap.recycle();
                viewBitmap = resizedBitmap;

                currentScale /= resizeScale;
            }
        }

        if (currentAngle != 0) {
            mTempMatrix.reset();
            mTempMatrix.setRotate(currentAngle, viewBitmap.getWidth() / 2, viewBitmap.getHeight() / 2);

            Bitmap rotatedBitmap = Bitmap.createBitmap(viewBitmap, 0, 0, viewBitmap.getWidth(), viewBitmap.getHeight(),
                    mTempMatrix, true);
            viewBitmap.recycle();
            viewBitmap = rotatedBitmap;
        }

        int top = (int) ((mCropRect.top - currentImageRect.top) / currentScale);
        int left = (int) ((mCropRect.left - currentImageRect.left) / currentScale);
        int width = (int) (mCropRect.width() / currentScale);
        int height = (int) (mCropRect.height() / currentScale);

        return Bitmap.createBitmap(viewBitmap, left, top, width, height);
    }",This method crops part of image that fills the crop bounds.,0,594
5636,"public Symbol cast(DataType<?> targetType, boolean tryCast) {
        if (targetType.equals(valueType())) {
            return this;
        }
        return CastFunctionResolver.generateCastFunction(this, targetType, tryCast);
    }",Casts this Symbol to a new  DataType by wrapping a cast function around it.,0,66
6141,"public static int getDatePart(Value date, int field) {
        long dateValue = EPOCH_DATE_VALUE;
        long timeNanos = 0;
        if (date instanceof ValueTimestamp) {
            ValueTimestamp v = (ValueTimestamp) date;
            dateValue = v.getDateValue();
            timeNanos = v.getTimeNanos();
        } else if (date instanceof ValueDate) {
            dateValue = ((ValueDate) date).getDateValue();
        } else if (date instanceof ValueTime) {
            timeNanos = ((ValueTime) date).getNanos();
        } else if (date instanceof ValueTimestampTimeZone) {
            ValueTimestampTimeZone v = (ValueTimestampTimeZone) date;
            dateValue = v.getDateValue();
            timeNanos = v.getTimeNanos();
        } else {
            ValueTimestamp v = (ValueTimestamp) date.convertTo(Value.TIMESTAMP);
            dateValue = v.getDateValue();
            timeNanos = v.getTimeNanos();
        }
        switch (field) {
        case Function.YEAR:
            return yearFromDateValue(dateValue);
        case Function.MONTH:
            return monthFromDateValue(dateValue);
        case Function.DAY_OF_MONTH:
            return dayFromDateValue(dateValue);
        case Function.HOUR:
            return (int) (timeNanos / 3_600_000_000_000L % 24);
        case Function.MINUTE:
            return (int) (timeNanos / 60_000_000_000L % 60);
        case Function.SECOND:
            return (int) (timeNanos / 1_000_000_000 % 60);
        case Function.MILLISECOND:
            return (int) (timeNanos / 1_000_000 % 1_000);
        case Function.DAY_OF_YEAR:
            return getDayOfYear(dateValue);
        case Function.DAY_OF_WEEK:
            return getSundayDayOfWeek(dateValue);
        case Function.WEEK:
            GregorianCalendar gc = getCalendar();
            return getWeekOfYear(dateValue, gc.getFirstDayOfWeek() - 1, gc.getMinimalDaysInFirstWeek());
        case Function.QUARTER:
            return (monthFromDateValue(dateValue) - 1) / 3 + 1;
        case Function.ISO_YEAR:
            return getIsoWeekYear(dateValue);
        case Function.ISO_WEEK:
            return getIsoWeekOfYear(dateValue);
        case Function.ISO_DAY_OF_WEEK:
            return getIsoDayOfWeek(dateValue);
        }
        throw DbException.getUnsupportedException(""getDatePart("" + date + "", "" + field + ')');
    }","Get the specified field of a date, however with years normalized to positive or negative, and month starting with 1.",0,643
7677,"public static Predicate isNotNull(Expression<?> left) {
        return PredicateOperation.create(Ops.IS_NOT_NULL, left);
    }",Create a left is not null expression,0,37
6714,"public static String memUTF8(long address) {
        return MultiReleaseTextDecoding.decodeUTF8(address, memLengthNT1(address, Integer.MAX_VALUE));
    }",Converts the null-terminated UTF-8 encoded string at the specified memory address to a  String.,0,40
5558,"public Collection<SIPCommButton> getContactCustomActionButtons()
    {
        if (sourceContact != null)
            return uiGroup.getParentUISource()
                    .getContactCustomActionButtons(sourceContact);

        return null;
    }",Returns all custom action buttons for this notification contact.,0,53
5865,"public Note createNote() throws IOException {
    Note note;
    if (conf.getBoolean(ConfVars.ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING)) {
      note = createNote(replFactory.getDefaultInterpreterSettingList());
    } else {
      note = createNote(null);
    }
    notebookIndex.addIndexDoc(note);
    return note;
  }",Create new note.,0,90
7855,"public static PathMetadata<Integer> forListAccess(PList<?> parent, int index) {
        return new PathMetadata<Integer>(parent, EConstant.create(index), PathType.LISTVALUE_CONSTANT);
    }",Create a new PathMetadata instance for indexed list access,0,56
5351,"private URL getCleanedUrl(URL originalUrl, String originalPath) {
		String cleanedPath = StringUtils.cleanPath(originalPath);
		if (!cleanedPath.equals(originalPath)) {
			try {
				return new URL(cleanedPath);
			}
			catch (MalformedURLException ex) {
				// Cleaned URL path cannot be converted to URL -> take original URL.
			}
		}
		return originalUrl;
	}",Determine a cleaned URL for the given original URL.,0,96
6480,"public LoadStatistics getLoadStatistics() {
        return LabelAtom.get(nodeName != null ? nodeName : Jenkins.getInstance().getSelfLabel().toString()).loadStatistics;
    }",Returns the  Node that this computer represents.,0,51
6008,"public String getDisplayName()
    {
        if(this.entry.getDisplayName() != null)
        {
            return this.entry.getDisplayName().getValue();
        }

        // If we didn't find a display name we return the user name. 
        SipURI sipURI = (SipURI) sipAddress.getURI();
        String sipUserName = sipURI.getUser();

        if (sipUserName != null && sipUserName.length() > 0)
            return sipUserName;

        if(getAddress().startsWith(""sip:""))
            return getAddress().substring(4);

        return getAddress();
    }",Returns a String that could be used by any user interacting modules for referring to this contact.,0,159
7289,"public CommandResult command(final DBObject cmd) {
        final MongoCommand command = new MongoCommand(DBObjects.toDocument(cmd))
                                     .readPreference(getReadPreference().toNew());
        final org.mongodb.result.CommandResult baseCommandResult = database.executeCommand(command);
        return toCommandResult(cmd, new ServerAddress(baseCommandResult.getAddress()), baseCommandResult.getResponse());
    }",Executes a database command.,0,104
7226,"public long nmalloc(int alignment, int size) {
        if (DEBUG) {
            checkAlignment(alignment);
        }

        int newPointer = pointer - size;
        if (CHECKS) {
            checkPush(newPointer);
        }

        // Align pointer to the specified alignment
        pointer = newPointer & ~(alignment - 1);

        return this.address + Integer.toUnsignedLong(pointer);
    }",Allocates a block of  size bytes of memory on the stack.,0,115
5795,"public static String sha256(final File file) throws IOException {
		return DigestEngine.sha256().digestString(file);
	}",Creates SHA-256 digest of a file.,0,39
6613,"protected List<AnnotationValue<CachePut>> putOperations(MethodInvocationContext context) {
        return context.getAnnotationValuesByType(CachePut.class);
    }",Saving inside the cache.,0,35
7534,"public IgniteInternalFuture<Object> releaseFuture() {
        return releaseFut;
    }",Gets span release future.,0,22
7916,"public static int getNumberOfMatches(String regex, TextView view, Set<TextView> uniqueTextViews){
		if(view == null) {
			return uniqueTextViews.size();
		}

		Pattern pattern = null;
		try{
			pattern = Pattern.compile(regex);
		}catch(PatternSyntaxException e){
			pattern = Pattern.compile(regex, Pattern.LITERAL);
		}
		String viewText = view.getText().toString();
		viewText = viewText.replaceAll(""[\n\r]"", "" "");
		Matcher matcher = pattern.matcher(viewText);

		if (matcher.find()){
			uniqueTextViews.add(view);
		}
		if (view.getError() != null){
			matcher = pattern.matcher(view.getError().toString());
			if (matcher.find()){
				uniqueTextViews.add(view);
			}
		}	
		if (view.getText().toString().equals("""") && view.getHint() != null){
			matcher = pattern.matcher(view.getHint().toString());
			if (matcher.find()){
				uniqueTextViews.add(view);
			}
		}	
		return uniqueTextViews.size();		
	}",Checks if a View matches a certain string and returns the amount of total matches.,0,359
5905,"public KaleoInstanceToken remove(long kaleoInstanceTokenId)
		throws NoSuchInstanceTokenException, SystemException {
		Session session = null;

		try {
			session = openSession();

			KaleoInstanceToken kaleoInstanceToken = (KaleoInstanceToken)session.get(KaleoInstanceTokenImpl.class,
					new Long(kaleoInstanceTokenId));

			if (kaleoInstanceToken == null) {
				if (_log.isWarnEnabled()) {
					_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
						kaleoInstanceTokenId);
				}

				throw new NoSuchInstanceTokenException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					kaleoInstanceTokenId);
			}

			return kaleoInstanceTokenPersistence.remove(kaleoInstanceToken);
		}
		catch (NoSuchInstanceTokenException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}",Removes the kaleo instance token with the primary key from the database.,0,218
7600,"public AvatarLoader bind(final ActionBar actionBar, final AtomicReference<User> userReference) {
        if (userReference == null)
            return this;

        final User user = userReference.get();
        if (user == null)
            return this;

        final String avatarUrl = user.getAvatarUrl();
        if (TextUtils.isEmpty(avatarUrl))
            return this;

        final Integer userId = Integer.valueOf(user.getId());

        BitmapDrawable loadedImage = loaded.get(userId);
        if (loadedImage != null) {
            actionBar.setLogo(loadedImage);
            return this;
        }

        new FetchAvatarTask(context) {

            @Override
            public BitmapDrawable call() throws Exception {
                final BitmapDrawable image = getImage(user);
                if (image != null)
                    return image;
                else
                    return fetchAvatar(avatarUrl, userId);
            }

            @Override
            protected void onSuccess(BitmapDrawable image) throws Exception {
                final User current = userReference.get();
                if (current != null && userId.equals(current.getId()))
                    actionBar.setLogo(image);
            }
        }.execute();

        return this;
    }",Sets the logo on the  ActionBar to the user's avatar.,0,358
5441,"private Vector computeCentroid() {
    if (numPoints == 0)
      return pointTotal;
    else if (centroid == null) {
      // lazy compute new centroid
      centroid = pointTotal.divide(numPoints);
    }
    return centroid;
  }",Compute the centroid by averaging the pointTotals,0,72
6780,"public static FormatStep messageFormatStep(final boolean leftJustify, final int minimumWidth, final boolean truncateBeginning, final int maximumWidth) {
        return new JustifyingFormatStep(leftJustify, minimumWidth, truncateBeginning, maximumWidth) {
            public void renderRaw(Formatter formatter, final StringBuilder builder, final ExtLogRecord record) {
                String formatted;
                if (formatter == null || record.getFormatStyle() == ExtLogRecord.FormatStyle.PRINTF && ! (formatter instanceof ExtFormatter)) {
                    formatted = record.getFormattedMessage();
                } else {
                    formatted = formatter.formatMessage(record);
                }
                builder.append(formatted);
                final Throwable t = record.getThrown();
                if (t != null) {
                    builder.append("": "");
                    t.printStackTrace(new PrintWriter(new StringBuilderWriter(builder)));
                }
            }
        };
    }",Create a format step which emits the formatted log message text with the given justification rules.,0,255
6060,"public CryptsyTransfersReturn getTransferHistory() throws IOException, ExchangeException {
  
    return checkResult(cryptsy.mytransfers(apiKey, signatureCreator, nextNonce()));
  }","Get history of transfers (within Cryptsy, send to another user)",0,44
7873,"public User getUserByName(String username) throws ApiException {
    Object postBody = null;
    
     // verify the required parameter 'username' is set
     if (username == null) {
        throw new ApiException(400, ""Missing the required parameter 'username' when calling getUserByName"");
     }
     
    // create path and map variables
    String path = ""/user/{username}"".replaceAll(""\\{format\\}"",""json"")
      .replaceAll(""\\{"" + ""username"" + ""\\}"", apiClient.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    

    

    final String[] accepts = {
      ""application/json"", ""application/xml""
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    
    GenericType<User> returnType = new GenericType<User>() {};
    return apiClient.invokeAPI(path, ""GET"", queryParams, postBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
  }",Get user by user name,0,390
7642,"public Action timedout(AtmosphereRequest request, AtmosphereResponse response)
            throws IOException, ServletException {

        AtmosphereResourceImpl r = null;

        try {
            SessionTimeoutSupport.restoreTimeout(request);

            if (trackActiveRequest) {
                long l = (Long) request.getAttribute(MAX_INACTIVE);
                if (l == -1) {
                    // The closedDetector closed the connection.
                    return timedoutAction;
                }
                request.setAttribute(MAX_INACTIVE, (long) -1);
            }

            logger.debug(""Timing out the connection for request {}"", request);

            // Something went wrong.
            if (request == null || response == null) {
                logger.warn(""Invalid Request/Response: {}/{}"", request, response);
                return timedoutAction;
            }

            r = (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

            if (r != null && r.getAtmosphereResourceEvent().isSuspended()) {
                r.getAtmosphereResourceEvent().setIsResumedOnTimeout(true);

                Broadcaster b = r.getBroadcaster();
                if (b instanceof DefaultBroadcaster) {
                    ((DefaultBroadcaster) b).broadcastOnResume(r);
                }

                if (request.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT) != null) {
                    r.getAtmosphereResourceEvent().setIsResumedOnTimeout(
                            (Boolean) request.getAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT));
                }

                invokeAtmosphereHandler(r);
            }
        } catch (Throwable t) {
            logger.error(""failed to timeout resource {}"", r, t);
        } finally {
            config.framework().notify(Action.TYPE.TIMEOUT, request, response);
            try {
                if (r != null) {
                    r.notifyListeners();
                    r.setIsInScope(false);
                    r.cancel();
                }
            } catch (Throwable t) {
                logger.trace(""timedout"", t);
            } finally {

                try {
                    response.getOutputStream().close();
                } catch (Throwable t) {
                    try {
                        response.getWriter().close();
                    } catch (Throwable t2) {
                    }
                }

                if (r != null) {
                    destroyResource(r);
                }
            }
        }

        return timedoutAction;
    }",All proprietary Comet based  Servlet must invoke the timedout method when the underlying WebServer time out the  AtmosphereResponse.,0,615
6510,"public static Float toFloat(CharSequence self) {
        return Float.valueOf(self.toString().trim());
    }",Parse a CharSequence into a Float,0,37
7220,"public static boolean isPrimitive(Object obj) {
        if (obj instanceof TruffleObject) {
            // Someone tried to pass a TruffleObject in
            return false;
        }
        if (obj == null) {
            return false;
        }
        return ToPrimitiveNode.temporary().isPrimitive(obj);
    }","Test whether the object is a primitive, which all  TruffleLanguages are supposed to handle.",0,81
6191,"public boolean writeOutbound(Object... msgs) {
        ensureOpen();
        if (msgs.length == 0) {
            return !outboundMessages.isEmpty();
        }

        RecyclableArrayList futures = RecyclableArrayList.newInstance(msgs.length);
        try {
            for (Object m: msgs) {
                if (m == null) {
                    break;
                }
                futures.add(write(m));
            }

            flush();

            for (int i = 0; i < futures.size(); i++) {
                ChannelFuture future = (ChannelFuture) futures.get(i);
                assert future.isDone();
                if (future.cause() != null) {
                    recordException(future.cause());
                }
            }

            runPendingTasks();
            checkException();
            return !outboundMessages.isEmpty();
        } finally {
            futures.recycle();
        }
    }",Write messages to the outbound of this  Channel.,0,273
5777,"public boolean provideIsBetaVariant() {
        return ConfigUtils.isBetaFlavour();
    }",Provides app flavour.,0,23
7493,"public IgniteInternalFuture<Object> delete(IgfsFileInfo fileInfo) {
        //assert validTxState(any); // Allow this method call for any transaction state.

        if (!fileInfo.isFile()) {
            if (log.isDebugEnabled())
                log.debug(""Cannot delete content of not-data file: "" + fileInfo);

            return new GridFinishedFuture<>();
        }
        else
            return delWorker.deleteAsync(fileInfo);
    }",Delete file's data from data cache.,0,93
7423,"public boolean killServer(InstanceSpec instance) throws Exception
    {
        for ( TestingZooKeeperServer server : servers )
        {
            if ( server.getInstanceSpec().equals(instance) )
            {
                server.kill();
                return true;
            }
        }
        return false;
    }",Kills the given server.,0,86
6786,"public String getString()
    {
        try
        {
            return Strings.fromUTF8ByteArray(string);
        }
        catch (Exception e)
        {    // not UTF-8 try 8 bit.
            return Strings.fromByteArray(string);
        }
    }","Decode the encoded string and return it, UTF8 assumed.",0,62
7744,"public Order placeOrder(Order body) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, ""Missing the required parameter 'body' when calling placeOrder"");
    }
    
    // create path and map variables
    String localVarPath = ""/store/order"";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      ""application/xml"", ""application/json""
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<Order> localVarReturnType = new GenericType<Order>() {};
    return apiClient.invokeAPI(localVarPath, ""POST"", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }",Place an order for a pet,0,356
5874,"static BlobKey readFromInputStream(InputStream inputStream) throws IOException {

		final byte[] key = new byte[BlobKey.SIZE];

		int bytesRead = 0;
		// read key
		while (bytesRead < key.length) {
			final int read = inputStream.read(key, bytesRead, key.length - bytesRead);
			if (read < 0) {
				throw new EOFException(""Read an incomplete BLOB key"");
			}
			bytesRead += read;
		}
		// read BLOB type
		final BlobType blobType;
		{
			final int read = inputStream.read();
			if (read < 0) {
				throw new EOFException(""Read an incomplete BLOB type"");
			} else if (read == TRANSIENT_BLOB.ordinal()) {
				blobType = TRANSIENT_BLOB;
			} else if (read == PERMANENT_BLOB.ordinal()) {
				blobType = PERMANENT_BLOB;
			} else {
				throw new IOException(""Invalid data received for the BLOB type: "" + read);
			}
		}

		return createKey(blobType, key);
	}",Auxiliary method to read a BLOB key from an input stream.,0,300
6483,"public static boolean isUnderspecified(Element element) {
		return isAbstract(element) || StringUtils.hasText(element.getAttribute(""parent""));
	}","Should this element be treated as incomplete? If it has a parent or is abstract, then it may not have all properties.",0,44
6211,"public Context createSubcontext(final Context callingContext, final Name name) throws NamingException {
        if (isLastComponentEmpty(name)) {
            throw emptyNameException();
        }
        checkPermissions(name, JndiPermission.Action.CREATE_SUBCONTEXT);
        return root.accept(new CreateSubContextVisitor(callingContext, name));
    }",Create a context node at the give location in the tree.,0,85
5405,"PreparedStatement execute(Connection connection, String sql) throws SQLException {
            if (returnGeneratedKeys != 0)
                return connection.prepareStatement(sql, returnGeneratedKeys);
            if (appearsLikeStoredProc(sql))
                return connection.prepareCall(sql);
            return connection.prepareStatement(sql);
        }",Execute the command that's defined by the subclass following the Command pattern.,0,81
6974,"public STStrokeLineStyle getLinestyle() {
        return linestyle;
    }",Gets the value of the linestyle property.,0,19
6372,"public int readBranchDest() {
        // reads the destination for a branch bytecode
        if (opcode == Bytecodes.GOTO_W || opcode == Bytecodes.JSR_W) {
            return curBCI + Bytes.beS4(code, curBCI + 1);
        } else {
            return curBCI + Bytes.beS2(code, curBCI + 1);
        }
    }",Read the destination of a  Bytecodes#GOTO or  IF instructions.,0,98
6476,"long registerTempPage(Page p) {
        long pos = --tempPageId;
        temp.put(pos, p);
        int index = (int) pos & (tempCache.length - 1);
        tempCache[index] = p;
        return pos;
    }",Register a page and get the next temporary page id.,0,81
7329,"public Class<T> getImplementationType() {
        return implementationType;
    }",Gets service's type.,0,22
6486,"public ImageLayers<T> build() {
      return new ImageLayers<>(ImmutableList.copyOf(layers), layerDigestsBuilder.build());
    }",Adds all layers in  layers.,0,41
7683,"public ProcessingPartitionScanner getProcessingPartitionScanner() {
		return (fPartitionScanner == null) ? new ProcessingPartitionScanner() : fPartitionScanner;
	}",Return a scanner for creating Processing partitions.,0,38
5273,"public String toString() {
	if (ruleSetFileName != null) {
	    if (allRules) {
		return ruleSetFileName;
	    } else {
		return ruleSetFileName + ""/"" + ruleName;
	    }

	} else {
	    if (allRules) {
		return ""anonymous all Rule"";
	    } else {
		return ruleName;
	    }
	}
    }",Return the String form of this Rule reference.,0,112
5414,"public boolean getBoolean(final String key, final boolean defaultValue) {

		final String str = this.confData.get(key);
		if (str == null) {
			return defaultValue;
		}

		return Boolean.parseBoolean(str);
	}",Returns the value associated with the given key as a boolean.,0,80
6950,"public static String getAudioMediaMimeType(String codecs) {
    if (codecs == null) {
      return null;
    }
    String[] codecList = codecs.split("","");
    for (String codec : codecList) {
      String mimeType = getMediaMimeType(codec);
      if (mimeType != null && isAudio(mimeType)) {
        return mimeType;
      }
    }
    return null;
  }",Derives a audio sample mimeType from a codecs attribute.,0,128
5593,"public Bitmap loadAsIs(InputStream is, int width, int height) {
        return fixedAsIsDownsampler.load(is, width, height);
    }",Load the image at its original size,0,43
7445,"public static int[] unique(int[] x) {
        return Arrays.stream(x).distinct().toArray();
    }",Find unique elements of vector.,0,41
7798,"public static boolean isMatchedWithTopN(CubeInstance cube, SQLDigest digest) {

        boolean hasTopN = hasTopNMeasure(cube.getDescriptor());
        
        if (hasTopN == false) {
            return false;
        }
        
        Collection<TblColRef> dimensionColumns = CubeDimensionDeriver.getDimensionColumns(digest);
        
        boolean matchDimensions = isMatchedWithDimensions(dimensionColumns, cube);

        if (matchDimensions == true) {
            return false;
        }

        Collection<FunctionDesc> functions = digest.aggregations;
        if (functions == null || functions.size() != 1) {
            // topN only allow one measure
            return false;
        }

        return isMatchedWithTopN(dimensionColumns, cube, digest);
    }",Check whether the cube can match the sql digest with TopN measure,0,200
7152,"public Object invokeMethod(Object object, String methodName, Object arguments) {
        /*
        System
            .out
            .println(
                ""Invoker - Invoking method on object: ""
                    + object
                    + "" method: ""
                    + methodName
                    + "" arguments: ""
                    + InvokerHelper.toString(arguments));
                    */

        if (object == null) {
            object = NullObject.getNullObject();
            //throw new NullPointerException(""Cannot invoke method "" + methodName + ""() on null object"");
        }
        
        // if the object is a Class, call a static method from that class
        if (object instanceof Class) {
            Class theClass = (Class) object;
            MetaClass metaClass = metaRegistry.getMetaClass(theClass);
            return metaClass.invokeStaticMethod(object, methodName, asArray(arguments));
        }
        else // it's an instance
        {
            // if it's not an object implementing GroovyObject (thus not builder, nor a closure)
            if (!(object instanceof GroovyObject)) {
                return invokePojoMethod(object, methodName, arguments);
            }
            // it's an object implementing GroovyObject
            else {
                return invokePogoMethod(object, methodName, arguments);
            }
        }
    }",Invokes the given method on the object.,0,206
5708,"public static SQLExecuteCallback<Integer> getUpdateSQLExecuteCallback(final DatabaseType databaseType, final SQLType sqlType , final boolean isExceptionThrown, final Map<String, Object> dataMap, final String[] columnNames) {
        return new SQLExecuteCallback<Integer>(databaseType, sqlType, isExceptionThrown, dataMap) {
            @Override
            protected Integer executeSQL(final StatementExecuteUnit executeUnit) throws SQLException {
                return executeUnit.getStatement().executeUpdate(executeUnit.getRouteUnit().getSqlUnit().getSql(), columnNames);
            }
        };
    }",Get update SQLExecuteCallBack with column names for StatementExecutor.,0,144
7864,"public int copyMatchingMessages(ConnectionContext context, MessageReferenceFilter filter, ActiveMQDestination dest, int maximumMessages) throws Exception {
        int movedCounter = 0;
        int count = 0;
        List<MessageReference> list = null;
        do {
            pageInMessages();
            synchronized (pagedInMessages) {
                list = new ArrayList<MessageReference>(pagedInMessages.values());
            }
            for (MessageReference ref : list) {
                IndirectMessageReference r = (IndirectMessageReference) ref;
                if (filter.evaluate(context, r)) {
                    // We should only copy messages that can be locked.
                    if (lockMessage(r)) {
                        r.incrementReferenceCount();
                        try {
                            Message m = r.getMessage();
                            BrokerSupport.resend(context, m, dest);
                            if (++movedCounter >= maximumMessages
                                    && maximumMessages > 0) {
                                return movedCounter;
                            }
                        } finally {
                            r.decrementReferenceCount();
                        }
                    }
                }
                count++;
            }
        } while (count < this.destinationStatistics.getMessages().getCount());
        return movedCounter;
    }",Copies the messages matching the given filter up to the maximum number of matched messages,0,312
7428,"public Set<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max) {
    checkIsInMultiOrPipeline();
    client.zrangeByScoreWithScores(key, min, max);
    return getBinaryTupledSet();
  }",Return the all the elements in the sorted set at key with a score between min and max (including elements with score equal to min or max).,0,66
6858,"public static String nullSafeToString(short[] array) {
		if (array == null) {
			return NULL_STRING;
		}
		int length = array.length;
		if (length == 0) {
			return EMPTY_ARRAY;
		}
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < length; i++) {
			if (i == 0) {
				sb.append(ARRAY_START);
			}
			else {
				sb.append(ARRAY_ELEMENT_SEPARATOR);
			}
			sb.append(array[i]);
		}
		sb.append(ARRAY_END);
		return sb.toString();
	}",Return a String representation of the contents of the specified array.,0,196
5911,"public Iterator<PGPSecretKey> getSecretKeys()
    {
        return Collections.unmodifiableList(keys).iterator();
    }",Return an iterator containing all the secret keys.,0,32
6622,"public static byte[] decodeHex(String hex) {
        return DatatypeConverter.parseHexBinary(hex);
    }",Turns a hex encoded string into a byte array.,0,31
5572,"public PolyglotEngine build() {
            assertNoCompilation();

            InputStream realIn;
            DispatchOutputStream realOut;
            DispatchOutputStream realErr;

            PolyglotRuntime realRuntime = runtime;
            if (realRuntime == null) {
                realRuntime = PolyglotRuntime.newBuilder().setIn(in).setOut(out).setErr(err).build();

                realIn = realRuntime.in;
                realOut = realRuntime.out;
                realErr = realRuntime.err;
            } else {
                if (out == null) {
                    realOut = realRuntime.out;
                } else {
                    realOut = SPIAccessor.instrumentAccess().createDispatchOutput(out);
                    SPIAccessor.engine().attachOutputConsumer(realOut, realRuntime.out);
                }
                if (err == null) {
                    realErr = realRuntime.err;
                } else {
                    realErr = SPIAccessor.instrumentAccess().createDispatchOutput(err);
                    SPIAccessor.engine().attachOutputConsumer(realErr, realRuntime.err);
                }
                realIn = in == null ? realRuntime.in : in;
            }

            return new PolyglotEngine(realRuntime, executor, realIn, realOut, realErr, globals, arguments);
        }",Creates an  PolyglotEngine engine configured by builder methods.,0,326
5613,"public LogicalSchema withMetaAndKeyFieldsInValue() {
    final List<Field> newValueFields = new ArrayList<>(
        metadata.fields().size()
            + key.fields().size()
            + value.fields().size());

    newValueFields.addAll(metadata.fields());
    newValueFields.addAll(key.fields());

    value.fields().forEach(f -> {
      if (!doFindField(f.name(), newValueFields).isPresent()) {
        newValueFields.add(f);
      }
    });

    final SqlStruct.Builder builder = SqlTypes.struct();
    newValueFields.forEach(builder::field);

    return new LogicalSchema(
        metadata,
        key,
        builder.build()
    );
  }",Copies metadata and key fields to the value schema.,0,215
5815,"public static ManagementResourceRegistration create(final ResourceDefinition resourceDefinition) {
            return create(resourceDefinition, null);
        }",Create a new root model node registration.,0,32
6740,"public InlineInfo getInlineInfo(Invoke invoke, Replacements replacements, Assumptions assumptions, OptimisticOptimizations optimisticOpts) {
        final String failureMessage = InliningUtil.checkInvokeConditions(invoke);
        if (failureMessage != null) {
            InliningUtil.logNotInlinedMethod(invoke, failureMessage);
            return null;
        }
        MethodCallTargetNode callTarget = (MethodCallTargetNode) invoke.callTarget();
        ResolvedJavaMethod targetMethod = callTarget.targetMethod();

        if (callTarget.invokeKind() == MethodCallTargetNode.InvokeKind.Special || targetMethod.canBeStaticallyBound()) {
            return getExactInlineInfo(invoke, replacements, optimisticOpts, targetMethod);
        }

        assert callTarget.invokeKind() == MethodCallTargetNode.InvokeKind.Virtual || callTarget.invokeKind() == MethodCallTargetNode.InvokeKind.Interface;

        ResolvedJavaType holder = targetMethod.getDeclaringClass();
        if (!(callTarget.receiver().stamp() instanceof ObjectStamp)) {
            return null;
        }
        ObjectStamp receiverStamp = (ObjectStamp) callTarget.receiver().stamp();
        if (receiverStamp.alwaysNull()) {
            // Don't inline if receiver is known to be null
            return null;
        }
        ResolvedJavaType contextType = invoke.getContextType();
        if (receiverStamp.type() != null) {
            // the invoke target might be more specific than the holder (happens after inlining:
            // parameters lose their declared type...)
            ResolvedJavaType receiverType = receiverStamp.type();
            if (receiverType != null && holder.isAssignableFrom(receiverType)) {
                holder = receiverType;
                if (receiverStamp.isExactType()) {
                    assert targetMethod.getDeclaringClass().isAssignableFrom(holder) : holder + "" subtype of "" + targetMethod.getDeclaringClass() + "" for "" + targetMethod;
                    ResolvedJavaMethod resolvedMethod = holder.resolveMethod(targetMethod, contextType);
                    if (resolvedMethod != null) {
                        return getExactInlineInfo(invoke, replacements, optimisticOpts, resolvedMethod);
                    }
                }
            }
        }

        if (holder.isArray()) {
            // arrays can be treated as Objects
            ResolvedJavaMethod resolvedMethod = holder.resolveMethod(targetMethod, contextType);
            if (resolvedMethod != null) {
                return getExactInlineInfo(invoke, replacements, optimisticOpts, resolvedMethod);
            }
        }

        if (assumptions.useOptimisticAssumptions()) {
            ResolvedJavaType uniqueSubtype = holder.findUniqueConcreteSubtype();
            if (uniqueSubtype != null) {
                ResolvedJavaMethod resolvedMethod = uniqueSubtype.resolveMethod(targetMethod, contextType);
                if (resolvedMethod != null) {
                    return getAssumptionInlineInfo(invoke, replacements, optimisticOpts, resolvedMethod, new Assumptions.ConcreteSubtype(holder, uniqueSubtype));
                }
            }

            ResolvedJavaMethod concrete = holder.findUniqueConcreteMethod(targetMethod);
            if (concrete != null) {
                return getAssumptionInlineInfo(invoke, replacements, optimisticOpts, concrete, new Assumptions.ConcreteMethod(targetMethod, holder, concrete));
            }
        }

        // type check based inlining
        return getTypeCheckedInlineInfo(invoke, maxMethodPerInlining, replacements, targetMethod, optimisticOpts);
    }",Determines if inlining is possible at the given invoke node.,0,782
6791,"public boolean relative(int rowCount) throws SQLException {
        try {
            debugCodeCall(""relative"", rowCount);
            checkClosed();
            if (rowCount < 0) {
                rowCount = result.getRowId() + rowCount + 1;
                resetResult();
            }
            for (int i = 0; i < rowCount; i++) {
                if (!nextRow()) {
                    return false;
                }
            }
            return isOnValidRow();
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }",Moves the current position to a specific row relative to the current row.,0,169
6496,"private AirQualityJsonResponse getAirQualityData() {
        AirQualityJsonResponse result = null;
        String errorMsg = null;

        String urlStr = buildRequestURL();
        logger.debug(""URL = {}"", urlStr);

        try {
            // Run the HTTP request and get the JSON response from aqicn.org
            URL url = new URL(urlStr);
            URLConnection connection = url.openConnection();

            try {
                String response = IOUtils.toString(connection.getInputStream());
                logger.debug(""aqiResponse = {}"", response);

                // Map the JSON response to an object
                result = gson.fromJson(response, AirQualityJsonResponse.class);
            } finally {
                IOUtils.closeQuietly(connection.getInputStream());
            }

            if (result.getData() != null && result.getStatus() != ""error"") {
                String attributions = result.getData().getAttributions();
                updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, attributions);
                return result;
            } else {
                retryCounter++;
                if (retryCounter == 1) {
                    logger.warn(""Error in aqicn.org (Air Quality), retrying once"");
                    return getAirQualityData();
                }
                errorMsg = ""missing data sub-object"";
                logger.warn(""Error in aqicn.org (Air Quality) response: {}"", errorMsg);
            }

        } catch (MalformedURLException e) {
            errorMsg = e.getMessage();
            logger.warn(""Constructed url is not valid: {}"", errorMsg);
        } catch (JsonSyntaxException e) {
            errorMsg = ""Configuration is incorrect"";
            logger.warn(""Error running aqicn.org (Air Quality) request: {}"", errorMsg);
        } catch (IOException | IllegalStateException e) {
            errorMsg = e.getMessage();
        }

        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);
        return null;
    }",Request new air quality data to the aqicn.org service,0,469
5567,"public Swagger2MarkupResultHandler build() {
              return new Swagger2MarkupResultHandler(outputDir, markupLanguage,
                    examplesFolderPath);
        }",Builds Swagger2MarkupResultHandler which converts the Swagger response into Markup and writes into the given  outputDir.,0,31
5548,"public INDArray concat(int dimension, INDArray... toConcat) {
        if (toConcat == null || toConcat.length == 0)
            throw new ND4JIllegalStateException(""Can't concatenate 0 arrays"");

        if (toConcat.length == 1)
            return toConcat[0];

        return Nd4j.exec(new Concat(dimension, toConcat))[0];

        // legacy implementation
/*
        // if reusable var wasn't created for this thread, or is smaller then needed - set it to new value
        if (extrazA.get() == null || extrazB.get() == null || extrazSize.get() == null || extrazSize.get() < toConcat.length) {
            extrazA.set(new PointerPointer(toConcat.length));
            extrazB.set(new PointerPointer(toConcat.length));
            extrazSize.set(toConcat.length);
        }

        PointerPointer shapeInfoPointers = extrazA.get();
        PointerPointer dataPointers = extrazB.get();
        int sumAlongDim = 0;

        long[] outputShape = ArrayUtil.copy(toConcat[0].shape());

        boolean allScalars = true;

        for (int i = 0; i < toConcat.length; i++) {
            Preconditions.checkState(toConcat[i].rank() == outputShape.length, ""Encountered different array ranks for concat: input[0].shape()=%ndShape, input[%s].shape()=%ndShape"",
                    toConcat[0], i, toConcat[i]);

            if (toConcat[i].isCompressed())
                Nd4j.getCompressor().decompressi(toConcat[i]);

            Preconditions.checkArgument(toConcat[i].dataType() == toConcat[0].dataType(), ""All operands must have same data type: input 0 has type %s, input %s has type %s"",
                    toConcat[0].dataType(), i, toConcat[i].dataType());

            allScalars &= toConcat[i].rank() == 0;

            shapeInfoPointers.put(i, toConcat[i].shapeInfoDataBuffer().addressPointer());
            dataPointers.put(i, toConcat[i].data().addressPointer());
            sumAlongDim += toConcat[i].size(dimension);
            for (int j = 0; j < toConcat[i].rank(); j++) {

                if (j != dimension && toConcat[i].size(j) != outputShape[j]) {
                    throw new IllegalArgumentException(
                            ""Illegal concatenation at array "" + i + "" and shape element "" + j);
                }
            }
        }

        if (allScalars) {
            outputShape = new long[]{sumAlongDim};
        } else {
            outputShape[dimension] = sumAlongDim;
        }

        INDArray ret = Nd4j.createUninitialized(toConcat[0].dataType(), outputShape, Nd4j.order());

        nativeOps.concat(null, dimension, toConcat.length,
                    dataPointers, shapeInfoPointers,
                null, null,
                    ret.data().addressPointer(), (LongPointer) ret.shapeInfoDataBuffer().addressPointer(),
                    null, null,
                    null, null);

        return ret;
        */
    }",concatenate ndarrays along a dimension,0,114
5964,"public double getLineHeightForAnchorY(double anchorY) {
        // null checks
        if (lines == null) return 0;
        if (lines.isEmpty()) return 0;

        // validation checks
        anchorY = (anchorY < 0) ? 0 : anchorY;
        anchorY = (anchorY > 1) ? 1 : anchorY;

        if (anchorY == 0) return lines.get(getLineCount() - 1).getLineHeight();
        if (anchorY == 1) return lines.get(0).getLineHeight();
        // return average height
        return lines.stream().mapToDouble(l -> l.getLineHeight()).average().orElse(0);
    }",Returns appropriate line height for the given displacemntY Should give Top line for max displacementY (1) and Bottom line for min displacemntY (0),0,195
6414,"public static byte[] readFile2BytesByStream(final File file) {
        return readFile2BytesByStream(file, null);
    }",Return the bytes in file by stream.,0,34
5899,"public boolean hasCacheForDirectory(File directory, Repository repository)
            throws HistoryException {
        assert directory.isDirectory();
        Repository repos = HistoryGuru.getInstance().getRepository(directory);
        if (repos == null) {
            return true;
        }
        RuntimeEnvironment env = RuntimeEnvironment.getInstance();
        File dir = env.getDataRootFile();
        dir = new File(dir, FileHistoryCache.historyCacheDirName);
        try {
            dir = new File(dir, env.getPathRelativeToSourceRoot(
                new File(repos.getDirectoryName())));
        } catch (ForbiddenSymlinkException e) {
            LOGGER.log(Level.FINER, e.getMessage());
            return false;
        } catch (IOException e) {
            throw new HistoryException(""Could not resolve "" +
                    repos.getDirectoryName()+"" relative to source root"", e);
        }
        return dir.exists();
    }",Check if the directory is in the cache.,0,253
7433,"public Notification createDefaultNotification() {
        Notification notification = new Notification();
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH && android.os.Build.VERSION.SDK_INT <= Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) {
            notification.icon = getApplicationInfo().icon;
        } else {
            notification.icon = 0;
        }
        notification.tickerText = null;
        notification.when = System.currentTimeMillis();
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
            notification.priority = Notification.PRIORITY_MIN;
        }
        return notification;
    }",This method can be overriden in order to create a foreground,0,180
7316,"public static TomcatService forTomcat(Tomcat tomcat) {
        return of(tomcat);
    }",Creates a new  TomcatService from an existing  Tomcat instance.,0,27
6338,"public Route create(Route route) throws InfrastructureException {
    putLabel(route, CHE_WORKSPACE_ID_LABEL, workspaceId);
    try {
      return clientFactory.createOC(workspaceId).routes().inNamespace(namespace).create(route);
    } catch (KubernetesClientException e) {
      throw new KubernetesInfrastructureException(e);
    }
  }",Creates specified route.,0,90
7083,"public static String toString(List<String> strings) {
		return toString(strings, EOL);	
	}","Concatenates a list of strings to a single string, separated by line breaks.",0,34
7143,"protected boolean shouldRegister(Object service, Route route) {
        // the agent hasn't been started
        if (!initialized) {
            return false;
        }

        LOG.trace(""Checking whether to register {} from route: {}"", service, route);

        ManagementAgent agent = getManagementStrategy().getManagementAgent();
        if (agent == null) {
            // do not register if no agent
            return false;
        }

        // always register if we are starting CamelContext
        if (getCamelContext().getStatus().isStarting()) {
            return true;
        }

        // always register if we are setting up routes
        if (getCamelContext().isSetupRoutes()) {
            return true;
        }

        // register if always is enabled
        if (agent.getRegisterAlways()) {
            return true;
        }

        // is it a known route then always accept
        if (route != null && knowRouteIds.contains(route.getId())) {
            return true;
        }

        // only register if we are starting a new route, and current thread is in starting routes mode
        if (agent.getRegisterNewRoutes()) {
            // no specific route, then fallback to see if this thread is starting routes
            // which is kept as state on the camel context
            return getCamelContext().isStartingRoutes();
        }

        return false;
    }",Whether or not to register the mbean.,0,276
6650,"public CloseableIterator<String> run(GetDomainType request) {
        try {
            List<String> result = new ArrayList<String>();
            if (request.getParameterName() != null && !request.getParameterName().isEmpty()) {
                String parameterName = request.getParameterName();
                if (parameterName.indexOf(""."") > 0)
                {
                    final String operation = parameterName.split(""\\."")[0];
                    final String parameter = parameterName.split(""\\."")[1];
                    
                    if (store.getCapabilities().operationParameters.get(operation) != null)
                    {
                        for (DomainType param : store.getCapabilities().operationParameters.get(operation))
                        {
                            if (param.getName().equalsIgnoreCase(parameter))
                            {
                                for (Object value : param.getValue())
                                {
                                    result.add((String) value);
                                }
                            }
                        }
                    }
                }
            }

            if (request.getPropertyName() != null && !request.getPropertyName().isEmpty()) {
                final String propertyName = request.getPropertyName();
                String nameSpace = null;
                String localPart = null;
                if (propertyName.indexOf("":"") > 0)
                {
                    nameSpace = propertyName.split("":"")[0];
                    localPart = propertyName.split("":"")[1];
                } 
                else 
                {
                    localPart = propertyName;
                }
                Name typeName = (nameSpace != null ? new NameImpl(CSWRecordDescriptor.NAMESPACES.getURI(nameSpace), localPart) : new NameImpl(localPart) );

                List<Name> domainQueriables = store.getCapabilities().getDomainQueriables(typeName);
                if (domainQueriables != null && domainQueriables.size() > 0)
                {
                    return this.store.getDomain(new NameImpl(CSW.NAMESPACE, ""Record""), typeName);
                }
            }

            return new CloseableIteratorAdapter<String>(result.iterator());
        } catch (Exception e) {
            throw new ServiceException(e, ""Failed to retrieve the domain values"",
                    ServiceException.NO_APPLICABLE_CODE);
        }
    }",Returns the requested feature types,0,618
6915,"public static String formOk(String contentType, long contentLength)
    {
        StringBuffer out = new StringBuffer();

        out.append(HTTP_PROTOCOL).append("" 200 Ok"").append(CR);
        out.append(""Server: "").append(HTTP_SERVER).append(CR);
        out.append(""MIME-version: 1.0"").append(CR);

        if (0 < contentType.length())
        {
            out.append(""Content-type: "").append(contentType).append(CR);
        }
        else
        {
            out.append(""Content-Type: text/html"").append(CR);
        }

        if (0 != contentLength)
        {
            out.append(""Content-Length: "").append(contentLength).append(CR);
        }

        out.append(CR);

        return out.toString();
    }",Forms a http ok reply header,0,226
7734,"private PendingIntent getGeofencePendingIntent() {
        // Reuse the PendingIntent if we already have it.
        if (mGeofencePendingIntent != null) {
            return mGeofencePendingIntent;
        }
        Intent intent = new Intent(this, GeofenceBroadcastReceiver.class);
        // We use FLAG_UPDATE_CURRENT so that we get the same pending intent back when calling
        // addGeofences() and removeGeofences().
        mGeofencePendingIntent = PendingIntent.getBroadcast(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
        return mGeofencePendingIntent;
    }",Gets a PendingIntent to send with the request to add or remove Geofences.,0,95
6389,"public DBMakerT writeAheadLogDisable(){
        this._writeAheadLogEnabled = false;
        return getThis();
    }",Transaction journal is enabled by default,0,30
6764,"private static BigInteger memNeeded(DataWord offset, DataWord size) {
        return size.isZero() ? BigInteger.ZERO : offset.value().add(size.value());
    }",Utility to calculate new total memory size needed for an operation.,0,56
6294,"public boolean isExpanded() {
        return mSlideState == SlideState.EXPANDED;
    }",Check if the layout is completely expanded.,0,26
7028,"public RealmResults<E> findAllSorted(String fieldName, Sort sortOrder) {
        checkQueryIsNotReused();
        TableView tableView = query.findAll();
        Long columnIndex = schema.getFieldIndex(fieldName);
        if (columnIndex == null || columnIndex < 0) {
            throw new IllegalArgumentException(String.format(""Field name '%s' does not exist."", fieldName));
        }
        tableView.sort(columnIndex, sortOrder);

        RealmResults<E> realmResults;
        if (isDynamicQuery()) {
            realmResults = (RealmResults<E>) RealmResults.createFromDynamicTableOrView(realm, tableView, className);
        } else {
            realmResults = RealmResults.createFromTableOrView(realm, tableView, clazz);
        }
        if (realm.handlerController != null) {
            realm.handlerController.addToRealmResults(realmResults);
        }
        return realmResults;
    }",Finds all objects that fulfill the query conditions and sorted by specific field name.,0,230
6524,"public ScriptEngine getScriptEngineForLanguage(String language) {

    if (language != null) {
      language = language.toLowerCase();
    }

    ProcessApplicationReference pa = Context.getCurrentProcessApplication();

    ScriptEngine engine = null;
    if(pa != null) {
      engine = getPaScriptEngine(language, pa);
    }

    if(engine == null) {
      engine = getGlobalScriptEngine(language);
    }

    return engine;
  }",Loads the given script engine by language name.,0,137
5262,"public List<Collection> getOldMappedCollections()
    {
        // Return the array
        return oldMappedCollections;
    }",Get the list of old mapped Collections,0,26
6332,"protected boolean isTypeCompatible(FeatureVisitor visitor, SimpleFeatureType featureType) {
        if (visitor instanceof CountVisitor) {
            // pass through if the CountVisitor has been recognized
            return true;
        } else if (visitor instanceof FeatureAttributeVisitor) {
            // allow passing down if the properties requested are not computed not renamed,
            // thus can be passed to the delegate collection as is
            for (Expression e : ((FeatureAttributeVisitor) visitor).getExpressions()) {
                if (!(e instanceof PropertyName)) {
                    return false;
                }
                PropertyName externalName = (PropertyName) e;
                Expression attributeExpression =
                        transformer.getExpression(externalName.getPropertyName());
                if (!(attributeExpression instanceof PropertyName)) {
                    return false;
                }
                if (!((PropertyName) attributeExpression)
                        .getPropertyName()
                        .equals(externalName.getPropertyName())) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }","Checks if the visitor is accessing only properties available in the specified feature type, checks if the target schema contains transformed attributes or as a special case, if it's a count visitor accessing no properties at all",0,235
6084,"public static boolean isAudio(String mimeType) {
    return getTopLevelType(mimeType).equals(BASE_TYPE_AUDIO);
  }",Whether the top-level type of  mimeType is audio.,0,32
6804,"public static long getBytes(PropertyKey key) {
    return CONF.getBytes(key);
  }",Gets the bytes of the value for the given key.,0,29
5780,"private String displayable(String query) {
        if (query == null ||
            query.length() == 0) {
            return query;
        }

        StringBuilder buff = new StringBuilder(query);

        // handle two character transforms first
        subst(buff, SQL_NE, NOT_EQUAL__);
        subst(buff, NE_BANG, BANG_NOT_EQUAL__);
        subst(buff, NE_HAT, HAT_NOT_EQUAL__);
        subst(buff, LE, LESS_THAN_EQUAL__);
        subst(buff, GE, GREATER_THAN_EQUAL__);
        subst(buff, CONCAT, CONCAT__);
        subst(buff, LT, LESS_THAN__);
        subst(buff, EQ, EQUAL__);
        subst(buff, GT, GREATER__);
        subst(buff, OPEN, LEFT_PAREN__);
        subst(buff, CLOSE, RIGHT_PAREN__);
        subst(buff, OPEN_BRACKET, LEFT_BRACKET__);
        subst(buff, CLOSE_BRACKET, RIGHT_BRACKET__);
        subst(buff, PLUS, PLUS__);
        subst(buff, MINUS, MINUS__);
        subst(buff, STAR, STAR__);
        subst(buff, DIV, DIVIDE__);
        subst(buff, MOD, MODULUS__);
        subst(buff, COLON, COLON__);
        subst(buff, PARAM, PARAM__);
        subst(buff, COMMA, COMMA__);
        subst(buff, SPACE, SPACE__);
        subst(buff, TAB, TAB__);
        subst(buff, NEWLINE, NEWLINE__);
        subst(buff, LINEFEED, LINEFEED__);
        subst(buff, QUOTE, QUOTE__);
        subst(buff, DQUOTE, DQUOTE__);
        subst(buff, TICK, TICK__);
        subst(buff, OPEN_BRACE, OPEN_BRACE__);
        subst(buff, CLOSE_BRACE, CLOSE_BRACE__);
        subst(buff, HAT, HAT__);
        subst(buff, AMPERSAND, AMPERSAND__);
        return buff.toString();
    }",transform a Hibernate HQL query into something that can be displayed/used for management operations,0,500
5672,"public HRJobTitle fetchByPrimaryKey(long hrJobTitleId)
		throws SystemException {
		HRJobTitle hrJobTitle = (HRJobTitle)EntityCacheUtil.getResult(HRJobTitleModelImpl.ENTITY_CACHE_ENABLED,
				HRJobTitleImpl.class, hrJobTitleId, this);

		if (hrJobTitle == _nullHRJobTitle) {
			return null;
		}

		if (hrJobTitle == null) {
			Session session = null;

			boolean hasException = false;

			try {
				session = openSession();

				hrJobTitle = (HRJobTitle)session.get(HRJobTitleImpl.class,
						Long.valueOf(hrJobTitleId));
			}
			catch (Exception e) {
				hasException = true;

				throw processException(e);
			}
			finally {
				if (hrJobTitle != null) {
					cacheResult(hrJobTitle);
				}
				else if (!hasException) {
					EntityCacheUtil.putResult(HRJobTitleModelImpl.ENTITY_CACHE_ENABLED,
						HRJobTitleImpl.class, hrJobTitleId, _nullHRJobTitle);
				}

				closeSession(session);
			}
		}

		return hrJobTitle;
	}",Returns the h r job title with the primary key or returns null if it could not be found.,0,280
7468,"public static HystrixCommandKey asKey(String name) {
            HystrixCommandKey k = intern.get(name);
            if (k == null) {
                k = new HystrixCommandKeyDefault(name);
                intern.putIfAbsent(name, k);
            }
            return k;
        }",Retrieve (or create) an interned HystrixCommandKey instance for a given name.,0,81
5574,"public TypeSerializer<T> restoreSerializer() {
		if (serializer != null) {
			return this.serializer;
		} else {
			throw new IllegalStateException(""Trying to restore the prior serializer via TypeSerializerConfigSnapshot, "" +
				""but the prior serializer has not been set."");
		}
	}","Creates a serializer using this configuration, that is capable of reading data written by the serializer described by this configuration.",0,68
7322,"protected int getPageColor(int position) {
        return mTutorial.getPageColor(position);
    }",Get page color.,0,27
6656,"public Z execute() throws ZException {
		if(executed) { return this; }
		initialize();
		//connection = connection(conn);
		
		if (this.hasPrev()){
			prev().execute();
		}
		String q;
		String query = getQuery();
		String[] queries = Util.split(query, ';');
		for (int i=0; i<queries.length-1; i++){//all except last one
		    q = queries[i];
		    lastQueryResult = executeQuery(q, maxResult);
		}
		
		if (queries.length > 0) {//the last query
            q = queries[queries.length-1];
            if (isUnNamed()){
                lastQueryResult = executeQuery(q, maxResult);
            } else {
                if(!isSaveableQuery(q)){
                    throw new ZException(""Can not save query ""+q+"" into table ""+name());
                }
                if(isTable()){
                    lastQueryResult = driver.createTableFromQuery(name(), q);
                } else {
                    lastQueryResult = driver.createTableFromQuery(name(), q);
                }
            }

		}

		webEnabled = isWebEnabled();
		executed = true;
		return this;
	}",Execute Z instance's query from head of this linked(piped) list to this instance.,0,349
7496,"public boolean isPending() {
        return getConfidence().getConfidenceType() == TransactionConfidence.ConfidenceType.PENDING;
    }",Convenience wrapper around getConfidence().getConfidenceType(),0,34
6322,"public LockFeatureResponseType lockFeature(LockFeatureType request)
        throws WFSException {
        LockFeature lockFeature = new LockFeature(wfs, catalog);
        lockFeature.setFilterFactory(filterFactory);

        return (LockFeatureResponseType) 
            lockFeature.lockFeature(LockFeatureRequest.adapt(request)).getAdaptee();
    }",WFS LockFeatureType operation.,0,75
6291,"public Optional<Group> takeGroup(Set<Integer> rejectedGroups) {
        synchronized (this) {
            Optional<GroupStatus> best = scheduler.takeNextGroup(rejectedGroups);

            if (best.isPresent()) {
                GroupStatus gs = best.get();
                gs.allocate();
                Group ret = gs.group;
                if (log.isLoggable(Level.FINE)) {
                    log.fine(""Offering <"" + ret + ""> for query connection"");
                }
                return Optional.of(ret);
            } else {
                return Optional.empty();
            }
        }
    }",Select and allocate the search cluster group which is to be used for the next search query.,0,171
5644,"protected static List<String> getColumnNames(ResultSetMetaData meta)
            throws SQLException
    {
        List<String> results = new ArrayList<String>();
        int columns = meta.getColumnCount();

        for (int i = 0; i < columns; i++)
        {
            results.add(meta.getColumnLabel(i + 1));
        }

        return results;
    }",Return the names of all the columns of the ResultSet.,0,118
6487,"public Asset remove(Serializable primaryKey)
		throws NoSuchAssetException, SystemException {
		Session session = null;

		try {
			session = openSession();

			Asset asset = (Asset)session.get(AssetImpl.class, primaryKey);

			if (asset == null) {
				if (_log.isWarnEnabled()) {
					_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
				}

				throw new NoSuchAssetException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					primaryKey);
			}

			return remove(asset);
		}
		catch (NoSuchAssetException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}",Removes the asset with the primary key from the database.,0,209
7048,"public boolean read(IOReadableWritable object) {
			if (!isBound()) {
				throw new UnboundMemoryBackedException();
			}

			try {
				if (position >= limit) {
					return false;
				}

				memory.inputView.skip(4); // skip serialized length
				object.read(memory.inputView); // read object
				position = memory.inputView.getPosition(); // update current read position
				return position <= limit; // ok if read limit was not exceeded while reading
			} catch (IOException e) {
				return false;
			}
		}",Reads an  IOReadableWritable from the underlying memory segment into the provided  IOReadableWritable object by calling it's  IOReadableWritable#read(DataInput) operation with the backing memory's  DataInputView.,0,148
6684,"public int getChunkWorldPosZ() {
        return (int) _position.z * (int) Configuration.CHUNK_DIMENSIONS.z;
    }",Returns the position of the chunk within the world.,0,37
6244,"public Set<String> getNamesForType(Class<?> type, TypeExtractor typeExtractor) {
		updateTypesIfNecessary();
		return this.beanTypes.entrySet().stream().filter((entry) -> {
			Class<?> beanType = extractType(entry.getValue(), typeExtractor);
			return beanType != null && type.isAssignableFrom(beanType);
		}).map(Map.Entry::getKey).collect(Collectors.toCollection(LinkedHashSet::new));
	}","Return the names of beans matching the given type (including subclasses), judging from either bean definitions or the value of  FactoryBean#getObjectType() in the case of  FactoryBean FactoryBeans.",0,131
7731,"public String escapeReservedWord(String name) {           
        if(this.reservedWordsMappings().containsKey(name)) {
            return this.reservedWordsMappings().get(name);
        }
        return ""_"" + name;
    }",Escapes a reserved word as defined in the `reservedWords` array.,0,64
6939,"protected RegisteredService resolveRegisteredServiceInRequestContext(final RequestContext requestContext) {
        final Service resolvedService = resolveServiceFromAuthenticationRequest(requestContext);
        if (resolvedService != null) {
            final RegisteredService service = this.servicesManager.findServiceBy(resolvedService);
            RegisteredServiceAccessStrategyUtils.ensureServiceAccessIsAllowed(resolvedService, service);
            return service;
        }
        LOGGER.debug(""Authentication request is not accompanied by a service given none is specified"");
        return null;
    }",Resolve registered service in request context.,0,104
5523,"public String getDisplayName() {
        return bibtexFields.getDisplayName();
    }",Get the table column name to be displayed in the UI,0,23
6298,"public int compareTo(Tag object) {
            if (line == object.line) {
                return Integer.compare(column, object.column);
            }

            return Integer.compare(line, object.line);
        }",Compares the position of this tag in the file with the position of another tag.,0,68
7561,"public Gist getGist(final GithubEvent event) {
        if (event == null)
            return null;
        if (event.payload == null)
            return null;

        Gson gson = new Gson();
        String json = gson.toJson(event.payload);

        EventType type = event.getType();
        if (EventType.GistEvent.equals(type))
            return (gson.fromJson(json, GistEventPayload.class)).gist;
        else
            return null;
    }",Get gist from event,0,146
7215,"public static String getRevision() {
    return Version.revision;
  }",Get the subversion revision number for the root directory,0,23
5678,"public PresenceStatus getPresenceStatus()
    {
        return this.presenceStatus;
    }",Returns the status of the contact.,0,22
5480,"public static List<Long> getAt(long[] array, ObjectRange range) {
        return primitiveArrayGet(array, range);
    }",Support the subscript operator with an ObjectRange for a long array,0,40
5620,"public static ReadPreference nearest(final long maxStaleness, final TimeUnit timeUnit) {
        return new NearestReadPreference(Collections.<TagSet>emptyList(), maxStaleness, timeUnit);
    }",Gets a read preference that forces reads to a primary or a secondary that is less stale than the given maximum.,0,51
6609,"public Response locationTestWithInterceptor() {
            URI uri = getUriBuilder().segment(""foo"").build();
            return Response.created(uri).entity(""Return from locationTestWithInterceptor"").type(""text/plain"").build();
        }",Resource method for the test with uri rewritten in the interceptor,0,65
7123,"public static String homePathForUser(String username) {
    Preconditions.checkArgument(username != null, ""null user"");

    // catch recursion
    if (username.startsWith(RegistryConstants.PATH_USERS)) {
      return username;
    }
    if (username.isEmpty()) {
      return RegistryConstants.PATH_SYSTEM_SERVICES;
    }

    // convert username to registry name
    String convertedName = convertUsername(username);

    return RegistryPathUtils.join(RegistryConstants.PATH_USERS,
        encodeForRegistry(convertedName));
  }","Buld the user path -switches to the system path if the user is """".",0,128
5257,"protected DeclaredType resolveTypeVariable(Element element, TypeVariable typeVariable) {
        Element enclosing = element.getEnclosingElement();

        while (enclosing instanceof Parameterizable) {
            Parameterizable parameterizable = (Parameterizable) enclosing;
            String name = typeVariable.toString();
            for (TypeParameterElement typeParameter : parameterizable.getTypeParameters()) {
                if (name.equals(typeParameter.toString())) {
                    List<? extends TypeMirror> bounds = typeParameter.getBounds();
                    if (bounds.size() == 1) {
                        TypeMirror typeMirror = bounds.get(0);
                        TypeKind kind = typeMirror.getKind();
                        switch (kind) {
                            case DECLARED:
                                return (DeclaredType) typeMirror;
                            case TYPEVAR:
                                return resolveTypeVariable(element, (TypeVariable) typeMirror);
                           default:
                               return null;
                        }
                    }
                }
            }
            enclosing = enclosing.getEnclosingElement();
        }
        return null;
    }",Resolve the first type argument to a parameterized type.,0,272
7868,"public Configuration addFile(final File xmlFile) throws MappingException {
		log.info( ""Reading mappings from file: "" + xmlFile.getPath() );
		final String name =  xmlFile.getAbsolutePath();
		final InputSource inputSource;
		try {
			inputSource = new InputSource( new FileInputStream( xmlFile ) );
		}
		catch ( FileNotFoundException e ) {
			throw new MappingNotFoundException( ""file"", xmlFile.toString() );
		}
		add( inputSource, ""file"", name );
		return this;
	}",Read mappings from a particular XML file,0,158
5578,"public Highlight getHighlightByTouchPoint(float x, float y) {

        // create an array of the touch-point
        float[] pts = new float[2];
        pts[0] = x;
        pts[1] = y;

        Matrix tmp = new Matrix();

        // invert all matrixes to convert back to the original value
        mMatrixOffset.invert(tmp);
        tmp.mapPoints(pts);

        mMatrixTouch.invert(tmp);
        tmp.mapPoints(pts);

        mMatrixValueToPx.invert(tmp);
        tmp.mapPoints(pts);

        double xTouchVal = pts[0];
        double yTouchVal = pts[1];
        double base = Math.floor(xTouchVal);

        Log.i(LOG_TAG, ""touchindex x: "" + xTouchVal + "", touchindex y: "" + yTouchVal);

        // touch out of chart
        if ((this instanceof LineChart || this instanceof ScatterChart)
                && (xTouchVal < 0 || xTouchVal > mDeltaX))
            return null;
        if (this instanceof BarChart && (xTouchVal < 0 || xTouchVal > mDeltaX + 1))
            return null;

        int xIndex = (int) base;
        int dataSetIndex = 0; // index of the DataSet inside the ChartData
                              // object

        if (this instanceof LineChart || this instanceof ScatterChart) {

            // check if we are more than half of a x-value or not
            if (xTouchVal - base > 0.5) {
                xIndex = (int) base + 1;
            }
        }

        if(mDataNotSet) {
            Log.i(LOG_TAG, ""no data set"");
            return null;
        }

        ArrayList<SelInfo> valsAtIndex = getYValsAtIndex(xIndex);

        dataSetIndex = getClosestDataSetIndex(valsAtIndex, (float) yTouchVal);

        if (dataSetIndex == -1)
            return null;

        return new Highlight(xIndex, dataSetIndex);
    }",returns the Highlight object (contains x-index and DataSet index) of the selected value at the given touch point.,0,503
5565,"public static String getString(String key)
    {
        return getResources().getI18NString(key);
    }",Returns an internationalized string corresponding to the given key.,0,32
5690,"public static boolean isInP4Depot(File file) {
        boolean status = false;
        if (p4Binary.available) {
            ArrayList<String> cmd = new ArrayList<String>();
            String name = file.getName();
            File   dir  = file.getParentFile();
            if (file.isDirectory()) {
                dir = file;
                name = ""*"";
                cmd.add(getCommand());
                cmd.add(""dirs"");
                cmd.add(name);
                Executor executor = new Executor(cmd, dir);
                executor.exec();
            /* OUTPUT:
            stdout: //depot_path/name
            stderr: name - no such file(s). 
             */
                status = (executor.getOutputString().indexOf(""//"") != -1);
            }
            if (!status) {
                cmd.clear();
                cmd.add(getCommand());
                cmd.add(""files"");
                cmd.add(name);
                Executor executor = new Executor(cmd, dir);
                executor.exec();
            /* OUTPUT:
            stdout: //depot_path/name
            stderr: name - no such file(s). 
             */
                status = (executor.getOutputString().indexOf(""//"") != -1);
            }
        }
        return status;
    }",Check if a given file is in the depot,0,325
5357,"public Cluster getCluster(ViewInstanceDefinition viewInstance) {
    if (viewInstance != null) {
      String clusterId = viewInstance.getClusterHandle();

      if (clusterId != null && viewInstance.getClusterType() == ClusterType.LOCAL_AMBARI) {
        try {
          return new ClusterImpl(clustersProvider.get().getCluster(clusterId));
        } catch (AmbariException e) {
          LOG.warn(""Could not find the cluster identified by "" + clusterId + ""."");
        }
      } else if(clusterId != null && viewInstance.getClusterType() == ClusterType.REMOTE_AMBARI){
        return remoteAmbariClusterRegistry.get(clusterId);
      }
    }
    return null;
  }",Get the cluster associated with the given view instance.,0,192
6896,"public String call() throws AlluxioException, IOException {
        return mWorker
            .createBlock(sessionId, blockId, mStorageTierAssoc.getAlias(writeTier), initialBytes);
      }","Used to allocate location and space for a new coming block, worker will choose the appropriate storage directory which fits the initial block size by some allocation strategy.",0,47
5374,"private double computeAverageRecordWidth() {
		CompilerHints hints = getPactContract().getCompilerHints();

		if(hints.getAvgBytesPerRecord() != -1) {
			// use hint if available
			return hints.getAvgBytesPerRecord();
		}
	
		long outputSize = 0;
		long numRecords = 0;
		for(PactConnection c : this.input1) {
			OptimizerNode pred = c.getSourcePact();
			
			if(pred != null) {
				// if one input (all of them are unioned) does not know
				// its output size or number of records, we a pessimistic and return ""unknown"" as well
				if(pred.estimatedOutputSize == -1 || pred.estimatedNumRecords == -1) {
					outputSize = -1;
					break;
				}
				
				outputSize += pred.estimatedOutputSize;
				numRecords += pred.estimatedNumRecords;
			}
		}

		double avgWidth = -1;

		if(outputSize != -1) {
			avgWidth = outputSize / (double)numRecords;
			if(avgWidth < 1)
				avgWidth = 1;
		}
		

		for(PactConnection c : this.input2) {
			OptimizerNode pred = c.getSourcePact();
			
			if(pred != null) {
				// if one input (all of them are unioned) does not know
				// its output size or number of records, we a pessimistic and return ""unknown"" as well
				if(pred.estimatedOutputSize == -1) {
					return avgWidth;
				}
				
				outputSize += pred.estimatedOutputSize;
				numRecords += pred.estimatedNumRecords;
			}
		}
		
		if(outputSize != -1) {
			avgWidth += outputSize / (double)numRecords;
			if(avgWidth < 2)
				avgWidth = 2;
		}

		return avgWidth;
	}",Computes the width of output records,0,444
6212,"public int compareTo(final OCompositeKey otherKey) {
		final Iterator<Comparable> inIter = keys.iterator();
		final Iterator<Comparable> outIter = otherKey.keys.iterator();

		while (inIter.hasNext() && outIter.hasNext()) {
			final Comparable inKey = inIter.next();
			final Comparable outKey = outIter.next();

			if(outKey instanceof OAlwaysGreaterKey)
				return -1;

			if(outKey instanceof OAlwaysLessKey)
				return 1;

			@SuppressWarnings(""unchecked"")
			final int result = inKey.compareTo(outKey);
			if (result != 0)
				return result;
		}

		return 0;
	}",Performs partial comparison of two composite keys.,0,202
6968,"public FactoryMethodReturnValueTester testNulls() throws Exception {
      for (Invokable<?, ?> factory : getFactoriesToTest()) {
        Object instance = instantiate(factory);
        if (instance != null
            && packagesToTest.contains(Reflection.getPackageName(instance.getClass()))) {
          try {
            nullPointerTester.testAllPublicInstanceMethods(instance);
          } catch (AssertionError e) {
            AssertionError error = new AssertionFailedError(
                ""Null check failed on return value of "" + factory);
            error.initCause(e);
            throw error;
          }
        }
      }
      return this;
    }","Tests null checks against the instance methods of the return values, if any.",0,167
6169,"public UriComponents build(boolean encoded) {
		return buildInternal(encoded ?
				EncodingHint.FULLY_ENCODED :
				this.encodeTemplate ? EncodingHint.ENCODE_TEMPLATE : EncodingHint.NONE);
	}",Build a  UriComponents instance from the various components contained in this builder.,0,51
6703,"private int getIntAt(int index) {
        assertTag(index, JVM_CONSTANT.Integer);
        return unsafe.getInt(metaspaceConstantPool + runtime().getConfig().constantPoolSize + index * runtime().getTarget().wordSize);
    }",Gets the integer constant pool entry at index  index.,0,67
7217,"public static ImmutableList<String> expandAtFiles(Iterable<String> args, Path projectRoot) {
    return StreamSupport.stream(args.spliterator(), /* parallel */ false)
        .flatMap(
            arg -> {
              if (arg.startsWith(""@"")) {
                String[] parts = arg.split(""#"", 2);
                String unresolvedArgsPath = parts[0].substring(1);
                Path argsPath = projectRoot.resolve(Paths.get(unresolvedArgsPath));
                Optional<String> flavors =
                    parts.length == 2 ? Optional.of(parts[1]) : Optional.empty();

                if (!Files.exists(argsPath)) {
                  throw new HumanReadableException(
                      ""The file ""
                          + unresolvedArgsPath
                          + "" can't be found. Please make sure the path exists relatively to the ""
                          + ""current folder."");
                }
                try {
                  return getArgsFromPath(argsPath, flavors);
                } catch (IOException e) {
                  throw new HumanReadableException(e, ""Could not read options from "" + arg);
                }
              } else {
                return ImmutableList.of(arg).stream();
              }
            })
        .collect(MoreCollectors.toImmutableList());
  }",Expland AT-file syntax in a way that matches what args4j does.,0,325
7023,"public static String getStringValueFromGetter(String propertyName, Sku sku, RecordHelper helper) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException, FieldNotAvailableException {
        //only attempt the getter on the first-level Sku properties
        if (propertyName.contains(""."")) {
            StringTokenizer tokens = new StringTokenizer(propertyName, ""."");
            propertyName = tokens.nextToken();
        }

        Object value = helper.getFieldManager().getFieldValue(sku, propertyName);

        String strVal;
        if (value == null) {
            strVal = null;
        } else {
            if (Date.class.isAssignableFrom(value.getClass())) {
                strVal = dateFormat.format((Date) value);
            } else if (Timestamp.class.isAssignableFrom(value.getClass())) {
                strVal = dateFormat.format(new Date(((Timestamp) value).getTime()));
            } else if (Calendar.class.isAssignableFrom(value.getClass())) {
                strVal = dateFormat.format(((Calendar) value).getTime());
            } else if (Double.class.isAssignableFrom(value.getClass())) {
                strVal = helper.getDecimalFormatter().format(value);
            } else if (BigDecimal.class.isAssignableFrom(value.getClass())) {
                strVal = helper.getDecimalFormatter().format(((BigDecimal) value).doubleValue());
            } else {
                strVal = value.toString();
            }
        }

        return strVal;
    }","Under the covers this uses PropertyUtils to call the getter of the property name for the given Sku, then undergoes conversion according to the formatters from helper.",0,414
5367,"public JPopupMenu getRightButtonMenu()
    {
        if(!(sourceContact instanceof MetaContact) && 
            (sourceContact.getPreferredContactDetail(
                OperationSetMultiUserChat.class) 
                != null))
        {
            return new ChatRoomRightButtonMenu(
                GuiActivator.getMUCService()
                    .findChatRoomWrapperFromSourceContact(sourceContact));
        }
        else
        {
            return new SourceContactRightButtonMenu(this);
        }
    }",Returns the JPopupMenu opened on a right button click over this SourceUIContact.,0,102
6337,"public static String fGetXAttr(int fd, String name, String encoding) throws IOException {
        byte[] valueMem = fGetXAttrBytes(fd, name);
        return new String(valueMem, Charset.forName(encoding));
    }",Get extended attribute value.,0,69
6016,"private Integer writeToTar(File baseDir, String fileMask, String excludes, OutputStream out) throws IOException {
        Archiver tw = ArchiverFactory.TAR.create(out);
        try {
            new DirScanner.Glob(fileMask,excludes).scan(baseDir,tw);
        } finally {
            tw.close();
        }
        return tw.countEntries();
    }",Writes to a tar stream and stores obtained files to the base dir.,0,105
6419,"public double getBytesPerSecond() {
        return getRatePerSecond(calculator.getTotalBytes());
    }",Throughput in bytes / second,0,26
6975,"public Response getCronJob(@PathParam(""noteId"") String noteId)
      throws IOException, IllegalArgumentException {
    LOG.info(""Get cron job note {}"", noteId);

    Note note = notebook.getNote(noteId);
    checkIfNoteIsNotNull(note);
    checkIfUserCanRead(noteId, ""Insufficient privileges you cannot get cron information"");
    checkIfNoteSupportsCron(note);
    Map<String, Object> response = new HashMap<>();
    response.put(""cron"", note.getConfig().get(""cron""));
    response.put(""releaseResource"", note.getConfig().get(""releaseresource""));

    return new JsonResponse<>(Status.OK, response).build();
  }",Get cron job REST API.,0,182
7743,"protected Object convertDurationToMicroseconds(Column column, Field fieldDefn, Object data) {
        return convertValue(column, fieldDefn, data, 0L, (r) -> {
            try {
                if (data instanceof Duration) {
                    r.deliver(((Duration)data).toNanos() / 1_000);
                }
            } catch (IllegalArgumentException e) {
            }
        });
    }",Converts a value object for an expected type of  java.time.Duration to  Long values that represents the time in microseconds.,0,117
7872,"private synchronized static Supplier<Annotator> getOrCreate(AnnotatorFactory factory) {
    return () -> {
      Annotator rtn = customAnnotators.get(factory.signature());
      if (rtn == null) {
        // Create the annotator
        rtn = factory.create();
        // Register the annotator
        customAnnotators.put(factory.signature(), factory.create());
        // Clean up memory if needed
        while (customAnnotators.size() > 10) {
          customAnnotators.keySet().iterator().remove();
        }
      }
      return rtn;
    };
  }","Either get a custom annotator which was recently defined, or create it if it has never been defined.",0,157
6625,"public boolean isLinked(final String itemName, final UID uid) {
        toLinkLock.readLock().lock();
        try {
            final Set<L> forItemName = itemNameToLink.get(itemName);
            final Set<L> forLinkedUID = linkedUidToLink.get(uid);
            if (forItemName == null || forLinkedUID == null) {
                return false;
            } else {
                return forItemName.parallelStream().anyMatch(forLinkedUID::contains);
            }
        } finally {
            toLinkLock.readLock().unlock();
        }
    }",Returns if an item for a given item name is linked to a channel or thing for a given UID.,0,162
5941,"public static Scheduler async(String name) {
		return async(name, PlatformDependent.MEDIUM_BUFFER_SIZE);
	}","An Async factory is a worker factory with sensible defaults for for ""fast"" or ""non-blocking"" tasks.",0,32
7715,"public boolean isCached(String requestUrl, int maxWidth, int maxHeight) {
        return isCached(requestUrl, maxWidth, maxHeight, ScaleType.CENTER_INSIDE);
    }",Checks if the item is available in the cache.,0,46
6360,"static int hash(Object o1, Object o2, Object o3) {
        return Objects.hash(o1, o2, o3);
    }",Return the order-dependent hash of the three given values.,0,43
7065,"public static Query newBoxQuery(String field, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {
    // exact double values of lat=90.0D and lon=180.0D must be treated special as they are not represented in the encoding
    // and should not drag in extra bogus junk! TODO: should encodeCeil just throw ArithmeticException to be less trappy here?
    if (minLatitude == 90.0) {
      // range cannot match as 90.0 can never exist
      return new MatchNoDocsQuery();
    }
    if (minLongitude == 180.0) {
      if (maxLongitude == 180.0) {
        // range cannot match as 180.0 can never exist
        return new MatchNoDocsQuery();
      } else if (maxLongitude < minLongitude) {
        // encodeCeil() with dateline wrapping!
        minLongitude = -180.0;
      }
    }
    byte[] lower = encodeCeil(minLatitude, minLongitude);
    byte[] upper = encode(maxLatitude, maxLongitude);
    // Crosses date line: we just rewrite into OR of two bboxes, with longitude as an open range:
    if (maxLongitude < minLongitude) {
      // Disable coord here because a multi-valued doc could match both rects and get unfairly boosted:
      BooleanQuery.Builder q = new BooleanQuery.Builder();
      q.setDisableCoord(true);

      // E.g.: maxLon = -179, minLon = 179
      byte[] leftOpen = lower.clone();
      // leave longitude open
      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, leftOpen, Integer.BYTES);
      Query left = newBoxInternal(field, leftOpen, upper);
      q.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));

      byte[] rightOpen = upper.clone();
      // leave longitude open
      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, rightOpen, Integer.BYTES);
      Query right = newBoxInternal(field, lower, rightOpen);
      q.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));
      return new ConstantScoreQuery(q.build());
    } else {
      return newBoxInternal(field, lower, upper);
    }
  }",Create a query for matching a bounding box.,0,433
5570,"public List<Collection> getCollections()
    {
        // We return a copy because we do not want people to add elements to this collection directly.
        return Arrays.asList(collections.toArray(new Collection[]{}));
    }",Get the collections this item is in.,0,42
5858,"private boolean isIdKey(String key, MongoPersistentEntity<?> entity) {

		if (null != entity && entity.getIdProperty() != null) {
			MongoPersistentProperty idProperty = entity.getIdProperty();
			return idProperty.getName().equals(key) || idProperty.getFieldName().equals(key);
		}

		return DEFAULT_ID_NAMES.contains(key);
	}",Returns whether the given key will be considered an id key.,0,111
5726,"public Iterator<Item> getItems() {
        synchronized (items) {
            return Collections.unmodifiableList(new ArrayList<Item>(items)).iterator();
        }
    }","Returns an Iterator for item childs that holds information about roles, affiliation, jids and nicks.",0,51
7785,"public String getTypeDeclaration(Schema schema) {
        if (schema == null) {
            LOGGER.warn(""Null schema found. Default type to `NULL_SCHMEA_ERR`"");
            return ""NULL_SCHMEA_ERR"";
        }

        String oasType = getSchemaType(schema);
        if (typeMapping.containsKey(oasType)) {
            return typeMapping.get(oasType);
        }

        return oasType;
    }",Output the type declaration of the property,0,101
5296,"public static Cell createFirstOnRow(final Cell cell) {
    if (cell instanceof ByteBufferedCell) {
      return new FirstOnRowByteBufferedCell(((ByteBufferedCell) cell).getRowByteBuffer(),
        ((ByteBufferedCell) cell).getRowPositionInByteBuffer(), cell.getRowLength());
    }
    return new FirstOnRowCell(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength());
  }",Create a Cell that is smaller than all other possible Cells for the given Cell's row.,0,107
6610,"public HTable createTable(String tableName, String[] families)
  throws IOException {
    return createTable(tableName, families);
  }",Create a table.,0,40
6310,"public static LinkageType getSdkEntryLinkageType(String swcPath, FlexIdeBuildConfiguration bc) {
    return getSdkEntryLinkageType(bc.getSdk(), swcPath, bc.getNature(), bc.getDependencies().getTargetPlayer(),
                                  bc.getDependencies().getComponentSet());
  }","If LinkageType.Default is returned then use  #getDefaultFrameworkLinkage(String, BuildConfigurationNature) to get real value.",0,69
5819,"protected boolean authorize(Context c, DSpaceObject o, int action, EPerson e, boolean useInheritance) throws SQLException
    {
        // return FALSE if there is no DSpaceObject
        if (o == null)
        {
            return false;
        }

        // is authorization disabled for this context?
        if (c.ignoreAuthorization())
        {
            return true;
        }

        // is eperson set? if not, userToCheck = null (anonymous)
        EPerson userToCheck = null;
        if (e != null)
        {
            userToCheck = e;

            // perform isAdmin check to see
            // if user is an Admin on this object
            DSpaceObject adminObject = useInheritance ? serviceFactory.getDSpaceObjectService(o).getAdminObject(c, o, action) : null;

            if (isAdmin(c, adminObject))
            {
                return true;
            }
        }

        // In case the dso is an bundle or bitstream we must ignore custom
        // policies if it does not belong to at least one installed item (see
        // DS-2614).
        // In case the dso is an item and a corresponding workspace or workflow
        // item exist, we have to ignore custom policies (see DS-2614).
        boolean ignoreCustomPolicies = false;
        if (o instanceof Bitstream)
        {
            Bitstream b = (Bitstream) o;

            // Ensure that this is not a collection or community logo
            DSpaceObject parent = bitstreamService.getParentObject(c, b);
            if (!(parent instanceof Collection) && !(parent instanceof Community))
            {
                ignoreCustomPolicies = !isAnyItemInstalled(c, b.getBundles());
            }
        }
        if (o instanceof Bundle)
        {
            ignoreCustomPolicies = !isAnyItemInstalled(c, Arrays.asList(((Bundle) o)));
        }
        if (o instanceof Item)
        {
            if (workspaceItemService.findByItem(c, (Item) o) != null ||
                    workflowItemService.findByItem(c, (Item) o) != null)
            {
                ignoreCustomPolicies = true;
            }
        }


        for (ResourcePolicy rp : getPoliciesActionFilter(c, o, action))
        {

            if (ignoreCustomPolicies
                    && ResourcePolicy.TYPE_CUSTOM.equals(rp.getRpType()))
            {
                continue;
            }

            // check policies for date validity
            if (resourcePolicyService.isDateValid(rp))
            {
                if (rp.getEPerson() != null && rp.getEPerson().equals(userToCheck))
                {
                    return true; // match
                }

                if ((rp.getGroup() != null)
                        && (groupService.isMember(c, rp.getGroup())))
                {
                    // group was set, and eperson is a member
                    // of that group
                    return true;
                }
            }
        }

        // default authorization is denial
        return false;
    }",Check to see if the given user can perform the given action on the given object.,0,651
5339,"public static AsyncPersistHandler create(FileSystemMasterView view) {
      return new DefaultAsyncPersistHandler(view);
    }",Creates a new instance of  AsyncPersistHandler.,0,29
5960,"public static String constructLogString(String message, String taskName, AbstractInvokable parent) {
		return message + "":  "" + taskName + "" ("" + (parent.getEnvironment().getIndexInSubtaskGroup() + 1) +
				'/' + parent.getEnvironment().getCurrentNumberOfSubtasks() + ')';
	}",Utility function that composes a string for logging purposes.,0,89
7122,"boolean compactStores() throws IOException {
    if (this.closed.get()) {
      return false;
    }
    try {
      synchronized (writestate) {
        if (!writestate.compacting && writestate.writesEnabled) {
          writestate.compacting = true;

        } else {
          LOG.info(""NOT compacting region "" +
              this.regionInfo.getRegionName().toString() + "": compacting="" +
              writestate.compacting + "", writesEnabled="" +
              writestate.writesEnabled);
            return false;
        }
      }
      long startTime = System.currentTimeMillis();
      LOG.info(""starting compaction on region "" +
        this.regionInfo.getRegionName().toString());
      boolean status = true;
      for (HStore store : stores.values()) {
        if(!store.compact()) {
          status = false;
        }
      }
      LOG.info(""compaction completed on region "" +
        this.regionInfo.getRegionName().toString() + "". Took "" +
        StringUtils.formatTimeDiff(System.currentTimeMillis(), startTime));
      return status;
      
    } finally {
      synchronized (writestate) {
        writestate.compacting = false;
        writestate.notifyAll();
      }
    }
  }",Compact all the stores.,0,347
6792,"public List<MetadataValue> getMetadata(Item item, String schema, String element, String qualifier, String lang) {
        return this.getMetadata(item, schema, element, qualifier, lang, true);
    }",This method will return a list of MetadataValue objects that contains all the regular metadata of the item passed along in the parameters as well as all the virtual metadata which will be generated and processed together with the  VirtualMetadataPopulator by processing the item's relationships,0,65
7825,"public JobInstance cancel(@PathVariable String jobId) {

        try {
            final JobInstance jobInstance = jobService.getJobInstance(jobId);
            jobService.cancelJob(jobInstance);
            return jobService.getJobInstance(jobId);
        } catch (Exception e) {
            logger.error(e.getLocalizedMessage(), e);
            throw new InternalErrorException(e);
        }
    }",Cancel/discard a job,0,104
7038,"public DocumentationContext build(DocumentationContextBuilder builder) {
    if (initialized.compareAndSet(false, true)) {
      configure(builder.getDefaults());
      buildScannerContext(builder.getDefaults());
    }
    return builder
            .withApiInfo(apiInfo)
            .withGlobalResponseMessages(mergedResponseMessages)
            .withRequestMappingEvaluator(requestMappingEvaluator)
            .withGroupName(swaggerGroup)
            .withIgnorableParameterTypes(mergedIgnorableParameterTypes)
            .withSwaggerPathProvider(swaggerPathProvider)
            .withResourceGroupingStrategy(resourceGroupingStrategy)
            .withAuthorizationContext(authorizationContext)
            .withAuthorizationTypes(authorizationTypes)
            .withApiListingReferenceOrdering(apiListingReferenceOrdering)
            .withApiDescriptionOrdering(apiDescriptionOrdering)
            .withExcludedAnnotations(mergedExcludedAnnotations)
            .build();
  }",Builds the SwaggerSpringMvcPlugin by merging/overlaying user specified values.,0,154
7094,"public List<DebugComponent> getChildComponents() {
    if (!isLayoutNode()) {
      final int nextComponentIndex = mComponentIndex - 1;
      DebugComponent component = getInstance(mNode, nextComponentIndex);
      if (component != null) {
        return Collections.singletonList(component);
      } else {
        return Collections.emptyList();
      }
    }

    final List<DebugComponent> children = new ArrayList<>();

    for (int i = 0, count = mNode.getChildCount(); i < count; i++) {
      final InternalNode childNode = mNode.getChildAt(i);
      final int index = Math.max(0, childNode.getComponents().size() - 1);
      DebugComponent component = getInstance(childNode, index);
      if (component != null) {
        children.add(component);
      }
    }

    final InternalNode nestedTree = mNode.getNestedTree();
    if (nestedTree != null && nestedTree.isInitialized()) {
      for (int i = 0, count = nestedTree.getChildCount(); i < count; i++) {
        final InternalNode childNode = nestedTree.getChildAt(i);
        int index = Math.max(0, childNode.getComponents().size() - 1);
        DebugComponent component = getInstance(childNode, index);
        if (component != null) {
          children.add(component);
        }
      }
    }

    return children;
  }",Get the list of components composed by this component.,0,443
6075,"public List getMessagesByTypeByContext(final String typeUuid, final String contextId)
  {

    if (LOG.isDebugEnabled())
    {
      LOG.debug(""getMessagesByTypeForASite(typeUuid:"" + typeUuid + "")"");
    }

    HibernateCallback<List> hcb = session -> {
      Query q = session.getNamedQuery(QUERY_MESSAGES_BY_USER_TYPE_AND_CONTEXT);

      q.setParameter(""userId"", getCurrentUser(), StringType.INSTANCE);
      q.setParameter(""typeUuid"", typeUuid, StringType.INSTANCE);
      q.setParameter(""contextId"", contextId, StringType.INSTANCE);
      return q.list();
    };

    return getHibernateTemplate().execute(hcb);
  }",FOR SYNOPTIC TOOL: helper method to get messages by type needed to pass contextId since could be in MyWorkspace,0,186
7456,"protected boolean checkPermissions(SessionType sessionType, Audio audio) {
        checkPermissionsManifestOrThrow(sessionType, audio);
        // Manifest is OK at this point. Let's check runtime permissions.
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) return true;

        Context c = getContext();
        boolean needsCamera = true;
        boolean needsAudio = sessionType == SessionType.VIDEO && audio == Audio.ON;

        needsCamera = needsCamera && c.checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED;
        needsAudio = needsAudio && c.checkSelfPermission(Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED;

        if (needsCamera || needsAudio) {
            requestPermissions(needsCamera, needsAudio);
            return false;
        }
        return true;
    }",Checks that we have appropriate permissions for this session type.,0,209
5561,"public List<ResolvedExpression> resolve(List<Expression> expressions) {
		final Function<List<Expression>, List<Expression>> resolveFunction =
			concatenateRules(getAllResolverRules());
		final List<Expression> resolvedExpressions = resolveFunction.apply(expressions);
		return resolvedExpressions.stream()
			.map(e -> e.accept(VERIFY_RESOLUTION_VISITOR))
			.collect(Collectors.toList());
	}",Resolves given expressions with configured set of rules.,0,110
6618,"public static boolean isCoinbaseTransaction(Transaction transaction) {
    return transaction.getRawData().getVinList().size() == 1 && transaction.getRawData().getVin(0)
        .getRawData().getTxID().size() == 0
        && transaction.getRawData().getVin(0).getRawData().getVout() == -1;
  }",Determine whether the transaction is a coin-base transaction.,0,103
5810,"public boolean exist(long index) {
    if(useIntKey) {
      if(row.isSparse()) {
        return ((IntFloatVector) row).getStorage().hasKey((int)(index - startCol));
      } else {
        return ((IntFloatVector) row).getStorage().get((int)(index - startCol)) != 0.0f;
      }
    } else {
      if(row.isSparse()) {
        return ((LongFloatVector) row).getStorage().hasKey(index - startCol);
      } else {
        return ((LongFloatVector) row).getStorage().get(index - startCol) != 0.0f;
      }
    }
  }",Check the vector contains the index or not,0,198
7200,"protected Iterator<Item> buildFromCommunity(Context context, Community community, List<Integer> itemIDs, int indent)
                                                                               throws SQLException
    {
        // Add all the collections
        List<Collection> collections = community.getCollections();
        Iterator<Item> result = null;
        for (Collection collection : collections)
        {
            for (int i = 0; i < indent; i++)
            {
                System.out.print("" "");
            }

            Iterator<Item> items = itemService.findByCollection(context, collection);
            if(result == null)
            {
                result = items;
            }else{
                result = Iterators.concat(result, items);
            }

        }
        // Add all the sub-communities
        List<Community> communities = community.getSubcommunities();
        for (Community subCommunity : communities)
        {
            for (int i = 0; i < indent; i++)
            {
                System.out.print("" "");
            }
            buildFromCommunity(context, subCommunity, itemIDs, indent + 1);
        }

        return result;
    }",Build an array list of item ids that are in a community (include sub-communities and collections),0,318
7622,"private String poolName(byte plc) {
        switch (plc) {
            case PUBLIC_POOL:
                return ""public"";

            case SYSTEM_POOL:
                return ""system"";

            case IGFS_POOL:
                return ""igfs"";

            default:
                return ""unknown"";
        }
    }",Gets pool name by execution policy.,0,84
5760,"public FilePath[] getModuleRoots(FilePath workspace, AbstractBuild build) {
        if (Util.isOverridden(SCM.class,getClass(),""getModuleRoots"", FilePath.class))
            // if the subtype derives legacy getModuleRoots(FilePath), delegate to it
            return getModuleRoots(workspace);

        // otherwise the default implementation
        return new FilePath[]{getModuleRoot(workspace,build)};
    }",Gets the top directories of all the checked out modules.,0,84
5627,"public MemberRemoval stripMethods(ElementMatcher<? super MethodDescription> matcher) {
        return stripInvokables(isMethod().and(matcher));
    }",Specifies that any method that matches the specified matcher should be removed.,0,39
7666,"public Collection<TvShow> getTvShows() {
    return (Set<TvShow>) ((LinkedHashSet<TvShow>) tvShows).clone();
  }","We should return a full clone of TvShow objects inside catalog because all this data is in memory and anyone can change it if we don't return only copies, but this is just a sample!",0,42
6965,"public String[] getS3ObjectsNames( String bucketName ) throws Exception {
    Bucket bucket = getBucket( bucketName );
    if ( bucket == null ) {
      throw new Exception( Messages.getString( ""S3DefaultService.Exception.UnableToFindBucket.Message"", bucketName ) );
    }
    return getS3Objects( bucket ).getObjectSummaries().stream().map( b -> b.getKey() ).toArray( String[]::new );
  }",Returns the objects names in a bucket.,0,130
5534,"public boolean delete(Path cPath, boolean recursive) throws IOException {
    LOG.info(""delete("" + cPath + "", "" + recursive + "")"");
    if (mStatistics != null) {
      mStatistics.incrementWriteOps(1);
    }
    TachyonURI path = new TachyonURI(Utils.getPathWithoutScheme(cPath));
    if (!mTFS.exist(path)) {
      return false;
    }
    boolean rtn = mTFS.delete(path, recursive);
    if (mTFS.exist(path)) {
      throw new IOException(""Failed to delete path "" + path.toString());
    }
    return rtn;
  }",Attempts to delete the file or directory with the specified path.,0,188
6062,"public static ItemArchive create(Context context, File dir, String itemField)
	throws Exception
	{
		ItemArchive itarch = new ItemArchive(); 
		itarch.dir = dir;
		itarch.dirname = dir.getName();
        InputStream is = null;
        try
        {
            is = new FileInputStream(new File(dir, DUBLIN_CORE_XML));
            itarch.dtomList = MetadataUtilities.loadDublinCore(getDocumentBuilder(), is);
            
            //The code to search for local schema files was copied from org.dspace.app.itemimport.ItemImportServiceImpl.java
            File file[] = dir.listFiles(new LocalSchemaFilenameFilter());
            for (int i = 0; i < file.length; i++)
            {
                is = new FileInputStream(file[i]);
                itarch.dtomList.addAll(MetadataUtilities.loadDublinCore(getDocumentBuilder(), is));
            }
        }
        finally
        {
            if (is != null)
            {
                is.close();
            }
        }
		ItemUpdate.pr(""Loaded metadata with "" + itarch.dtomList.size() + "" fields"");
		
		if (itemField == null)
		{
			itarch.item = itarch.itemFromHandleInput(context);  // sets the item instance var and seeds the undo list
		}
		else
		{
			itarch.item = itarch.itemFromMetadataField(context, itemField);  			
		}
		
		if (itarch.item == null)
		{
			throw new Exception(""Item not instantiated: "" + itarch.dirname);
		}
		
		ItemUpdate.prv(""item instantiated: "" + itarch.item.getHandle());

		return itarch;
	}",factory method,0,427
5323,"public StreamGraph getStreamGraph() {
		if (transformations.size() <= 0) {
			throw new IllegalStateException(""No operators defined in streaming topology. Cannot execute."");
		}
		StreamGraph result = StreamGraphGenerator.generate(this, transformations);
		return result;
	}",Getter of the  org.apache.flink.streaming.api.graph.StreamGraph of the streaming job.,0,71
7596,"public long processRequestQueue(long timeNow) {
		synchronized (m_requestQueue) {
			if (m_requestQueue.isEmpty()) {
				return 0L;
			}
			if (m_featureQueried != null) {
				// A feature has been queried, but
				// the response has not been digested yet.
				// Must wait for the query to be processed.
				long dt = timeNow - (m_lastQueryTime + TIMEOUT_DIRECT_MESSAGE_REPLY);
				if (dt < 0) {
					logger.debug(""still waiting for query reply from {} for another {} usec"",
							m_address, -dt);
					return (timeNow + 2000L); // retry soon
				} else {
					logger.warn(""gave up waiting for query reply from device {}"", m_address);
				}
			}
			QEntry qe = m_requestQueue.poll(); // take it off the queue!
			if (!qe.getMsg().isBroadcast()) {
				logger.debug(""qe taken off direct: {} {}"", qe.getFeature(), qe.getMsg());
				m_lastQueryTime = timeNow;
				// mark feature as pending
				qe.getFeature().setQueryStatus(DeviceFeature.QueryStatus.QUERY_PENDING);
				// also mark this queue as pending so there is no doubt
				m_featureQueried = qe.getFeature();
			} else {
				logger.debug(""qe taken off bcast: {} {}"", qe.getFeature(), qe.getMsg());
			}
			long quietTime = qe.getMsg().getQuietTime();
			qe.getMsg().setQuietTime(500L); // rate limiting downstream!
			try {
				writeMessage(qe.getMsg());
			} catch (IOException e) {
				logger.error(""message write failed for msg {}"", qe.getMsg(), e);
			}
			// figure out when the request queue should be checked next
			QEntry qnext = m_requestQueue.peek();
			long nextExpTime = (qnext == null ? 0L : qnext.getExpirationTime());
			long nextTime = Math.max(timeNow + quietTime, nextExpTime);
			logger.debug(""next request queue processed in {} msec, quiettime = {}"",
						 nextTime - timeNow, quietTime);
			return (nextTime);
		}
	}",Called by the RequestQueueManager when the queue has expired,0,489
7257,"public YamlNode getSingleNode() {
        // Drop the STREAM-START event.
        parser.getEvent();
        // Compose a document if the stream is not empty.
        YamlNode document = null;
        if (!parser.checkEvent(Event.ID.StreamEnd)) {
            document = composeDocument();
        }
        // Ensure that the stream contains no more documents.
        if (!parser.checkEvent(Event.ID.StreamEnd)) {
            Event event = parser.getEvent();
            throw new ComposerException(""expected a single document in the stream"", document
                    .getStartMark(), ""but found another document"", event.getStartMark());
        }
        // Drop the STREAM-END event.
        parser.getEvent();
        return document;
    }",Reads a document from a source that contains only one document.,0,159
5315,"public boolean flushPipelinedData() throws IOException {
        if (buffer == null || (buffer.getResource().position() == 0 && allAreClear(state, FLUSHING))) {
            return next.flush();
        }
        return flushBuffer();
    }",Flushes the cached data.,0,83
5656,"public static Vector<Short> ofAll(short[] array) {
        Objects.requireNonNull(array, ""array is null"");
        return Vector.ofAll(() -> Iterator.ofAll(array));
    }",Creates a Vector based on the elements of a short array.,0,59
6221,"public static Function getFunction(Database database, String name) {
        if (!database.getSettings().databaseToUpper) {
            // if not yet converted to uppercase, do it now
            name = StringUtils.toUpperEnglish(name);
        }
        FunctionInfo info = FUNCTIONS.get(name);
        if (info == null) {
            HashMap<String, FunctionInfo> aliases = database.getMode().functionAliases;
            if (aliases == null) {
                return null;
            }
            info = aliases.get(name);
            if (info == null) {
                return null;
            }
        }
        switch (info.type) {
        case TABLE:
        case TABLE_DISTINCT:
            return new TableFunction(database, info, Long.MAX_VALUE);
        default:
            return new Function(database, info);
        }
    }",Get an instance of the given function for this database.,0,234
5605,"public BufferedBlockInStream getInStream(long blockId) throws IOException {
    BlockInfo blockInfo;
    try (CloseableResource<BlockMasterClient> masterClientResource =
        mContext.acquireMasterClientResource()) {
      blockInfo = masterClientResource.get().getBlockInfo(blockId);
    } catch (AlluxioException e) {
      throw new IOException(e);
    }

    if (blockInfo.getLocations().isEmpty()) {
      throw new IOException(""Block "" + blockId + "" is not available in Alluxio"");
    }
    // TODO(calvin): Get location via a policy.
    // Although blockInfo.locations are sorted by tier, we prefer reading from the local worker.
    // But when there is no local worker or there are no local blocks, we prefer the first
    // location in blockInfo.locations that is nearest to memory tier.
    // Assuming if there is no local worker, there are no local blocks in blockInfo.locations.
    // TODO(cc): Check mContext.hasLocalWorker before finding for a local block when the TODO
    // for hasLocalWorker is fixed.
    for (BlockLocation location : blockInfo.getLocations()) {
      WorkerNetAddress workerNetAddress = location.getWorkerAddress();
      if (workerNetAddress.getHost().equals(mLocalHostName)) {
        // There is a local worker and the block is local.
        try {
          return new LocalBlockInStream(blockId, blockInfo.getLength(), workerNetAddress, mContext);
        } catch (IOException e) {
          LOG.warn(""Failed to open local stream for block "" + blockId + "". "" + e.getMessage());
          // Getting a local stream failed, do not try again
          break;
        }
      }
    }
    // No local worker/block, get the first location since it's nearest to memory tier.
    WorkerNetAddress workerNetAddress = blockInfo.getLocations().get(0).getWorkerAddress();
    return new RemoteBlockInStream(blockId, blockInfo.getLength(), workerNetAddress, mContext);
  }",Gets a stream to read the data of a block.,0,349
6762,"public byte[] getBodyPartBytes() {
        byte[] bp = bytes.get();
        if (bp != null) {
            return bp;
        }

        byte[] rb = ChannelBufferUtil.channelBuffer2bytes(getChannelBuffer());
        bytes.set(rb);
        return rb;
    }",Return the response body's part bytes received.,0,89
7866,"private void getAndStoreFullRegistry() throws Throwable {
        long currentUpdateGeneration = fetchRegistryGeneration.get();

        logger.info(""Getting all instance registry info from the eureka server"");

        Applications apps = null;
        if (shouldUseExperimentalTransport()) {
            EurekaHttpResponse<Applications> httpResponse = clientConfig.getRegistryRefreshSingleVipAddress() == null
                    ? eurekaHttpClient.getApplications()
                    : eurekaHttpClient.getVip(clientConfig.getRegistryRefreshSingleVipAddress());
            if (httpResponse.getStatusCode() == Status.OK.getStatusCode()) {
                apps = httpResponse.getEntity();
            }
            logger.info(""The response status is {}"", httpResponse.getStatusCode());
        } else {
            ClientResponse response = makeRemoteCall(Action.Refresh);
            try {
                if (response.getStatus() == Status.OK.getStatusCode()) {
                    apps = response.getEntity(Applications.class);
                }
                logger.info(""The response status is {}"", response.getStatus());
            } finally {
                closeResponse(response);
            }
        }

        if (apps == null) {
            logger.error(""The application is null for some reason. Not storing this information"");
        } else if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1)) {
            localRegionApps.set(this.filterAndShuffle(apps));
            logger.debug(""Got full registry with apps hashcode {}"", apps.getAppsHashCode());
        } else {
            logger.warn(""Not updating applications as another thread is updating it already"");
        }
    }",Gets the full registry information from the eureka server and stores it locally.,0,378
5766,"public int collapse(int position) {
		if (DEBUG)
			Log.v(TAG, ""Request to Collapse on position "" + position + "" ExpandedItems="" + getExpandedPositions());
		T item = getItem(position);
		int subItemsCount = 0, recursiveCount = 0;
		if (item != null && item.isExpandable() && item.isExpanded() &&
				(!hasSubItemsSelected(item) || isExpandablePendingRemove(position))) {

			//Take the current subList
			List<T> subItems = getExpandableList(item);
			//Recursive collapse of all sub expandable
			recursiveCount = recursiveCollapse(subItems);
			mItems.removeAll(subItems);
			subItemsCount = subItems.size();
			//Save expanded state
			item.setExpanded(false);

			//Collapse!
			notifyItemRangeRemoved(position + 1, subItemsCount);

			if (DEBUG)
				Log.v(TAG, ""Collapsed "" + subItemsCount + "" subItems on position="" + position + "" ExpandedItems="" + getExpandedPositions());
		}
		return subItemsCount + recursiveCount;
	}","Collapses an Expandable item that is already expanded, in conjunction with no subItems selected or item is pending removal (used in combination with removeRange).",0,281
7716,"public static Schema parse(File file) throws IOException {
    return new Parser().parse(file);
  }",Constructs a Schema object from JSON schema file file.,0,37
6696,"public String getUserPage() {
        return threadConfig.get().getUserPage();
    }",Returns the user page for the history listing,0,27
5947,"public EntropySource get(final int bitsRequired)
    {
        return new EntropySource()
        {
            public boolean isPredictionResistant()
            {
                return _predictionResistant;
            }

            public byte[] getEntropy()
            {
                return _sr.generateSeed((bitsRequired + 7) / 8);
            }
        };
    }",Return an entropy source that will create bitsRequired bits of entropy on each invocation of getEntropy().,0,95
6385,"public boolean checkURL(String url) {
        return url.contains(""?"");
    }",Checks the string to make sure it has /path/file?name=value format.,0,29
7339,"public boolean dominates(State other) {
        if (other.weight == 0) {
            return false;
        }
        // Multi-state (bike rental, P+R) - no domination for different states
        if (isBikeRenting() != other.isBikeRenting())
            return false;
        if (isCarParked() != other.isCarParked())
            return false;

        if (backEdge != other.getBackEdge() && ((backEdge instanceof PlainStreetEdge)
                && (!((PlainStreetEdge) backEdge).getTurnRestrictions().isEmpty())))
            return false;

        if (this.routeSequenceSubset(other)) {
            return this.weight <= other.weight;
        }

        // If returning more than one result from GenericAStar, the search can be very slow
        // unless you replace the following code with:
        // return false;
        double weightDiff = this.weight / other.weight;
        return walkDistance <= other.getWalkDistance() * 1.05
                && (weightDiff < 1.02 && this.weight - other.weight < 30)
                && this.getElapsedTimeSeconds() - other.getElapsedTimeSeconds() <= 30;
        
    }",Multicriteria comparison of states.,0,285
7500,"public ByteVector putUTF8(final String s) {
        int charLength = s.length();
        if (charLength > 65535) {
            throw new IllegalArgumentException();
        }
        int len = length;
        if (len + 2 + charLength > data.length) {
            enlarge(2 + charLength);
        }
        byte[] data = this.data;
        // optimistic algorithm: instead of computing the byte length and then
        // serializing the string (which requires two loops), we assume the byte
        // length is equal to char length (which is the most frequent case), and
        // we start serializing the string right away. During the serialization,
        // if we find that this assumption is wrong, we continue with the
        // general method.
        data[len++] = (byte) (charLength >>> 8);
        data[len++] = (byte) charLength;
        for (int i = 0; i < charLength; ++i) {
            char c = s.charAt(i);
            if (c >= '\001' && c <= '\177') {
                data[len++] = (byte) c;
            } else {
                length = len;
                return encodeUTF8(s, i, 65535);
            }
        }
        length = len;
        return this;
    }",Puts an UTF8 string into this byte vector.,0,318
6936,"public ExecutorService getExecutorService() {
        return TransactionType.XA.equals(RULE_REGISTRY.getTransactionType()) ? ChannelThreadExecutorGroup.getInstance().get(channelId) : eventLoopGroup;
    }",Get executor service.,0,47
6846,"public static MenuDrawer attach(Activity activity, Position position) {
        return attach(activity, Type.BEHIND, position);
    }",Attaches the MenuDrawer to the Activity.,0,40
5532,"public CompoundConfiguration add(final Configuration conf) {
    freezeMutableConf();

    if (conf instanceof CompoundConfiguration) {
      this.configs.addAll(0, ((CompoundConfiguration) conf).configs);
      return this;
    }
    // put new config at the front of the list (top priority)
    this.configs.add(0, new ImmutableConfWrapper(conf));
    return this;
  }",Add Hadoop Configuration object to config list.,0,97
6580,"private RepositoryVersionState getEffectiveState(Map<RepositoryVersionState, Set<String>> stateToHosts) {
    if (stateToHosts == null || stateToHosts.size() < 1) {
      return null;
    }

    int totalHosts = 0;
    for (Set<String> hosts : stateToHosts.values()) {
      totalHosts += hosts.size();
    }

    if (stateToHosts.containsKey(RepositoryVersionState.CURRENT) && stateToHosts.get(RepositoryVersionState.CURRENT).size() == totalHosts) {
      return RepositoryVersionState.CURRENT;
    }
    if (stateToHosts.containsKey(RepositoryVersionState.INSTALLED) && stateToHosts.get(RepositoryVersionState.INSTALLED).size() == totalHosts) {
      return RepositoryVersionState.INSTALLED;
    }
    if (stateToHosts.containsKey(RepositoryVersionState.INSTALL_FAILED) &&
      !stateToHosts.get(RepositoryVersionState.INSTALL_FAILED).isEmpty()) {
      // Installation failed on some host(s). But
      // cluster version state should transition to Install Failed only after
      // all hosts have finished installation. Otherwise, UI will misbehave
      // (hide progress dialog before installation is finished)
      if (! stateToHosts.containsKey(RepositoryVersionState.INSTALLING) ||
        stateToHosts.get(RepositoryVersionState.INSTALLING).isEmpty()) {
        return RepositoryVersionState.INSTALL_FAILED;
      }
    }

    int totalInstalling = stateToHosts.containsKey(RepositoryVersionState.INSTALLING) ? stateToHosts.get(RepositoryVersionState.INSTALLING).size() : 0;
    int totalInstalled = stateToHosts.containsKey(RepositoryVersionState.INSTALLED) ? stateToHosts.get(RepositoryVersionState.INSTALLED).size() : 0;
    int totalNotRequired = stateToHosts.containsKey(RepositoryVersionState.NOT_REQUIRED) ? stateToHosts.get(RepositoryVersionState.NOT_REQUIRED).size() : 0;
    int totalInstallFailed = stateToHosts.containsKey(RepositoryVersionState.INSTALL_FAILED) ? stateToHosts.get(RepositoryVersionState.INSTALL_FAILED).size() : 0;

    if (totalInstalling + totalInstalled + totalInstallFailed == totalHosts) {
      return RepositoryVersionState.INSTALLING;
    }

    if (totalNotRequired > 0) {

      // !!! if all we have is NOT_REQUIRED and something else, the return should be the something else
      if (2 == stateToHosts.size()) {

        Map<RepositoryVersionState, Set<String>> map = Maps.filterKeys(stateToHosts,
            new com.google.common.base.Predicate<RepositoryVersionState>() {
              @Override
              public boolean apply(RepositoryVersionState repoState) {
                return repoState != RepositoryVersionState.NOT_REQUIRED;
              }
            });

        // !!! better be true
        if (1 == map.size()) {
          return map.keySet().iterator().next();
        } else {
          LOG.warn(""The mix of NON_REQUIRED hosts is unexpected: {}"", stateToHosts);
          return RepositoryVersionState.OUT_OF_SYNC;
        }
      }

      // if any hosts are still installing, then cluster is INSTALLING
      if (totalInstalling > 0) {
        return RepositoryVersionState.INSTALLING;
      }

      // if any hosts are install_failed, then cluster is INSTALL_FAILED
      if (totalInstallFailed > 0) {
        return RepositoryVersionState.INSTALL_FAILED;
      }

      // should be covered by the 2-state check above
      if (totalInstalled > 0) {
        return RepositoryVersionState.INSTALLED;
      }

      // rare
      if (totalNotRequired == totalHosts) {
        return RepositoryVersionState.NOT_REQUIRED;
      }

    }

    // Also returns when have a mix of CURRENT and INSTALLING|INSTALLED
    LOG.warn(""Have a mix of CURRENT and INSTALLING|INSTALLED host versions, "" +
      ""returning OUT_OF_SYNC as cluster version. Host version states: {}"", stateToHosts);
    return RepositoryVersionState.OUT_OF_SYNC;
  }",Calculate the effective Cluster Version State based on the state of its hosts.,0,824
5463,"public AuditEvent createAuditEvent(final Request request, final Result result) {

    return RequestAuditEvent.builder()
      .withTimestamp(System.currentTimeMillis())
      .withRemoteIp(request.getRemoteAddress())
      .withRequestType(request.getRequestType())
      .withUrl(request.getURI())
      .withResultStatus(result.getStatus())
      .build();
  }",Creates a simple  AuditEvent with the details of request and response,0,97
6005,"public boolean isInMemory() throws IOException {
    return TFS.isInMemory(FID);
  }",Return whether the file is in memory or not.,0,28
5406,"public SQLStatement judge() {
        LexerEngine lexerEngine = LexerEngineFactory.newInstance(DatabaseType.MySQL, sql);
        lexerEngine.nextToken();
        while (true) {
            TokenType tokenType = lexerEngine.getCurrentToken().getType();
            if (tokenType instanceof Keyword) {
                if (isDQL(tokenType)) {
                    return getDQLStatement();
                }
                if (isDML(tokenType)) {
                    return getDMLStatement(tokenType);
                }
                if (isTCL(tokenType)) {
                    return getTCLStatement();
                }
                if (isDAL(tokenType)) {
                    return getDALStatement(tokenType, lexerEngine);
                }
                lexerEngine.nextToken();
                if (isDCL(tokenType, lexerEngine)) {
                    return getDCLStatement();
                }
                if (isDDL(tokenType, lexerEngine)) {
                    return getDDLStatement();
                }
            } else {
                lexerEngine.nextToken();
            }
            if (tokenType instanceof Assist && Assist.END == tokenType) {
                throw new SQLParsingException(""Unsupported SQL statement: [%s]"", sql);
            }
        }
    }",judge SQL Type only.,0,303
7429,"public String getList(String listId) {
        TodorooCursor<MilkList> cursor = milkListDao.query(Query.select(
                MilkList.NAME).where(MilkList.ID.eq(listId)));
        try {
            if(cursor.getCount() == 0)
                return null;
            cursor.moveToFirst();
            return cursor.get(MilkList.NAME);
        } finally {
            cursor.close();
        }
    }",Get list name by list id,0,120
5824,"public static INDArray create(int[] shape, int[] stride, long offset) {
        checkShapeValues(shape);
        return INSTANCE.create(shape, stride, offset);
    }",Creates an ndarray with the specified shape,0,56
7364,"public int rename(String oldPath, String newPath) {
    final AlluxioURI oldUri = mPathResolverCache.getUnchecked(oldPath);
    final AlluxioURI newUri = mPathResolverCache.getUnchecked(newPath);
    LOG.trace(""rename({}, {}) [Alluxio: {}, {}]"", oldPath, newPath, oldUri, newUri);

    try {
      if (!mFileSystem.exists(oldUri)) {
        LOG.error(""File {} does not exist"", oldPath);
        return -ErrorCodes.ENOENT();
      }
      if (mFileSystem.exists(newUri)) {
        LOG.error(""File {} already exists, please delete the destination file first"", newPath);
        return -ErrorCodes.EEXIST();
      }
      mFileSystem.rename(oldUri, newUri);
    } catch (FileDoesNotExistException e) {
      LOG.debug(""File {} does not exist"", oldPath);
      return -ErrorCodes.ENOENT();
    } catch (IOException e) {
      LOG.error(""IOException while moving {} to {}"", oldPath, newPath, e);
      return -ErrorCodes.EIO();
    } catch (AlluxioException e) {
      LOG.error(""Exception while moving {} to {}"", oldPath, newPath, e);
      return -ErrorCodes.EFAULT();
    } catch (Throwable e) {
      LOG.error(""Unexpected exception on mv {} {}"", oldPath, newPath, e);
      return -ErrorCodes.EFAULT();
    }

    return 0;
  }",Renames a path.,0,361
7010,"public static ZKClusterKey transformClusterKey(String key) throws IOException {
    String[] parts = key.split("":"");

    if (parts.length == 3) {
      return new ZKClusterKey(parts [0], Integer.parseInt(parts [1]), parts [2]);
    }

    if (parts.length > 3) {
      // The quorum could contain client port in server:clientport format, try to transform more.
      String zNodeParent = parts [parts.length - 1];
      String clientPort = parts [parts.length - 2];

      // The first part length is the total length minus the lengths of other parts and minus 2 "":""
      int endQuorumIndex = key.length() - zNodeParent.length() - clientPort.length() - 2;
      String quorumStringInput = key.substring(0, endQuorumIndex);
      String[] serverHosts = quorumStringInput.split("","");

      // The common case is that every server has its own client port specified - this means
      // that (total parts - the ZNodeParent part - the ClientPort part) is equal to
      // (the number of "","" + 1) - ""+ 1"" because the last server has no "","".
      if ((parts.length - 2) == (serverHosts.length + 1)) {
        return new ZKClusterKey(quorumStringInput, Integer.parseInt(clientPort), zNodeParent);
      }

      // For the uncommon case that some servers has no port specified, we need to build the
      // server:clientport list using default client port for servers without specified port.
      return new ZKClusterKey(
        ZKConfig.buildQuorumServerString(serverHosts, clientPort),
        Integer.parseInt(clientPort),
        zNodeParent);
    }

    throw new IOException(""Cluster key passed "" + key + "" is invalid, the format should be:"" +
          HConstants.ZOOKEEPER_QUORUM + "":"" + HConstants.ZOOKEEPER_CLIENT_PORT + "":""
          + HConstants.ZOOKEEPER_ZNODE_PARENT);
  }","Separate the given key into the three configurations it should contain: hbase.zookeeper.quorum, hbase.zookeeper.client.port and zookeeper.znode.parent",0,394
5639,"public int readVarInt() {
        int b = data[pos];
        if (b >= 0) {
            pos++;
            return b;
        }
        int x = b & 0x7f;
        b = data[pos + 1];
        if (b >= 0) {
            pos += 2;
            return x | (b << 7);
        }
        x |= (b & 0x7f) << 7;
        b = data[pos + 2];
        if (b >= 0) {
            pos += 3;
            return x | (b << 14);
        }
        x |= (b & 0x7f) << 14;
        b = data[pos + 3];
        if (b >= 0) {
            pos += 4;
            return x | b << 21;
        }
        x |= ((b & 0x7f) << 21) | (data[pos + 4] << 28);
        pos += 5;
        return x;
    }",Read a variable size int.,0,336
7419,"private Frame reBalance(final Frame fr, boolean local) {
    final int chunks = (int)Math.min( 4 * H2O.NUMCPUS * (local ? 1 : H2O.CLOUD.size()), fr.numRows());
    if (fr.anyVec().nChunks() > chunks) {
      Log.info(""Dataset already contains "" + fr.anyVec().nChunks() + "" chunks. No need to rebalance."");
      return fr;
    }
    Log.info(""Starting load balancing into (at least) "" + chunks + "" chunks."");
//      return MRUtils.shuffleAndBalance(fr, chunks, seed, local, shuffle_training_data);
    Key newKey = fr._key != null ? Key.make(fr._key.toString() + "".balanced"") : Key.make();
    RebalanceDataSet rb = new RebalanceDataSet(fr, newKey, chunks);
    H2O.submitTask(rb);
    rb.join();
    Frame rebalanced = UKV.get(newKey);
    Log.info(""Load balancing done."");
    return rebalanced;
  }",Rebalance a frame for load balancing,0,275
5801,"public static String hexDecode(final char[] data) {
        try {
            final byte[] result = Hex.decodeHex(data);
            return new String(result);
        } catch (final Exception e) {
            return null;
        }
    }",Hex decode string.,0,81
6571,"public static Resource prepareClasspathResourceIfNeeded(final Resource resource) {
        if (resource == null) {
            LOGGER.debug(""No resource defined to prepare. Returning null"");
            return null;
        }
        return prepareClasspathResourceIfNeeded(resource, false, resource.getFilename());
    }",Prepare classpath resource if needed file.,0,73
6423,"public Checkout remove(Serializable primaryKey)
		throws NoSuchCheckoutException, SystemException {
		Session session = null;

		try {
			session = openSession();

			Checkout checkout = (Checkout)session.get(CheckoutImpl.class,
					primaryKey);

			if (checkout == null) {
				if (_log.isWarnEnabled()) {
					_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
				}

				throw new NoSuchCheckoutException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					primaryKey);
			}

			return remove(checkout);
		}
		catch (NoSuchCheckoutException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}",Removes the checkout with the primary key from the database.,0,210
7638,"private TableExportButton getExportButton() {
		if (exportButton == null) {
			exportButton = new TableExportButton(getParamsTable());
		}
		return exportButton;
	}",This method initializes panelCommand,0,51
5456,"public static OAuthRegisteredService getRegisteredOAuthService(final ServicesManager servicesManager, final String clientId) {
        final Collection<RegisteredService> services = servicesManager.getAllServices();
        return (OAuthRegisteredService) services.stream()
                .filter(OAuthRegisteredService.class::isInstance)
                .filter(s -> OAuthRegisteredService.class.cast(s).getClientId().equals(clientId))
                .findFirst()
                .orElse(null);
    }",Locate the requested instance of  OAuthRegisteredService by the given clientId.,0,113
5828,"public boolean isHoleTransparent() {
        return mDrawHoleTransparent;
    }","Returns true if the hole in the center of the PieChart is transparent, false if not.",0,19
5955,"public Subscription onSubscribe(final Observer<? super List<T>> observer) {
                TimeBasedChunks<T, List<T>> buffers = new TimeBasedChunks<T, List<T>>(observer, OperationBuffer.<T> bufferMaker(), timespan, unit, scheduler);
                ChunkCreator creator = new TimeBasedChunkCreator<T, List<T>>(buffers, timeshift, unit, scheduler);
                return new CompositeSubscription(
                        buffers,
                        new ChunkToSubscription(creator),
                        source.subscribe(new ChunkObserver<T, List<T>>(buffers, observer, creator))
                );
            }",This method creates a  Func1 object which represents the buffer operation.,0,167
6587,"public String[] getArmorHeaders()
    {
        if (headerList.size() <= 1)
        {
            return null;
        }

        return headerList.toStringArray(1, headerList.size());
    }","Return the armor headers (the lines after the armor header line),",0,63
5857,"private SyncedFolderDisplayItem createSyncedFolder(@NonNull SyncedFolder syncedFolder, @NonNull MediaFolder mediaFolder) {
        return new SyncedFolderDisplayItem(
                syncedFolder.getId(),
                syncedFolder.getLocalPath(),
                syncedFolder.getRemotePath(),
                syncedFolder.isWifiOnly(),
                syncedFolder.isChargingOnly(),
                syncedFolder.isSubfolderByDate(),
                syncedFolder.getAccount(),
                syncedFolder.getUploadAction(),
                syncedFolder.isEnabled(),
                clock.getCurrentTime(),
                mediaFolder.filePaths,
                mediaFolder.folderName,
                mediaFolder.numberOfFiles,
                mediaFolder.type,
                syncedFolder.isHidden());
    }",creates a SyncedFolderDisplayItem merging a  SyncedFolder and a  MediaFolder object instance.,0,146
5785,"public Component getVisualComponent()
    {
        MediaDeviceSession deviceSession = getDeviceSession();

        return
            (deviceSession instanceof VideoMediaDeviceSession)
                ? ((VideoMediaDeviceSession) deviceSession).getVisualComponent()
                : null;
    }",Returns a reference to the visual Component where video from the remote peer is being rendered or null if no video is currently rendered.,0,60
5569,"static boolean isInPeriod(long timestamp, Date startDate, Date endDate)
    {
        if(startDate == null)
        {
            if(endDate == null)
                return true;
            else
                return timestamp < endDate.getTime();
        }
        else
        {
            if(endDate == null)
                return timestamp > startDate.getTime();
            else
                return
                    timestamp > startDate.getTime()
                        && timestamp < endDate.getTime();
        }
    }",Evaluetes does timestamp is in the given time period.,0,144
5871,"public int ls(String[] argv) throws IOException {
    if (argv.length != 2) {
      System.out.println(""Usage: tfs ls <path>"");
      return -1;
    }
    TachyonURI path = new TachyonURI(argv[1]);
    TachyonFS tachyonClient = createFS(path);
    List<ClientFileInfo> files = tachyonClient.listStatus(path);
    Collections.sort(files);
    String format = ""%-10s%-25s%-15s%-5s%n"";
    for (ClientFileInfo file : files) {
      String inMemory = """";
      if (!file.isFolder) {
        if (100 == file.inMemoryPercentage) {
          inMemory = ""In Memory"";
        } else {
          inMemory = ""Not In Memory"";
        }
      }
      System.out.format(format, FormatUtils.getSizeFromBytes(file.getLength()),
          convertMsToDate(file.getCreationTimeMs()), inMemory, file.getPath());
    }
    return 0;
  }",Displays information for all directories and files directly under the path specified in argv.,0,271
7556,"private IgniteInternalFuture<Long> internalUpdateAsync(long l, @Nullable Callable<Long> updateCall, boolean updated)
        throws IgniteCheckedException {
        checkRemoved();

        A.ensure(l > 0, "" Parameter mustn't be less then 1: "" + l);

        lock.lock();

        try {
            // If reserved range isn't exhausted.
            if (locVal + l <= upBound) {
                long curVal = locVal;

                locVal += l;

                return new GridFinishedFuture<>(updated ? locVal : curVal);
            }
        }
        finally {
            lock.unlock();
        }

        if (updateCall == null)
            updateCall = internalUpdate(l, updated);

        while (true) {
            if (updateGuard.compareAndSet(false, true)) {
                try {
                    // This call must be outside lock.
                    return ctx.closures().callLocalSafe(updateCall, true);
                }
                finally {
                    lock.lock();

                    try {
                        updateGuard.set(false);

                        cond.signalAll();
                    }
                    finally {
                        lock.unlock();
                    }
                }
            }
            else {
                lock.lock();

                try {
                    while (locVal >= upBound && updateGuard.get())
                        U.await(cond, 500, MILLISECONDS);

                    checkRemoved();

                    // If reserved range isn't exhausted.
                    if (locVal + l <= upBound) {
                        long curVal = locVal;

                        locVal += l;

                        return new GridFinishedFuture<>(updated ? locVal : curVal);
                    }
                }
                finally {
                    lock.unlock();
                }
            }
        }
    }",Asynchronous sequence update operation.,0,467
6590,"private boolean illegalForRest(Object v) {
        if (v instanceof String && StringUtils.isNotEmpty((String) v)) {
            return ((String) v).contains("","") || ((String) v).contains(""="");
        }
        return false;
    }","If a string value illegal for rest protocol(',' and '=' is illegal for rest protocol).",0,89
5310,"public StudentAttributes getStudentForGoogleId(String courseId, String googleId) {
        Assumption.assertNotNull(Const.StatusCodes.DBLEVEL_NULL_INPUT, googleId);
        Assumption.assertNotNull(Const.StatusCodes.DBLEVEL_NULL_INPUT, courseId);
        
        // Return CourseStudent if it exists. Otherwise, fall back on Student.
        Query q = getPm().newQuery(CourseStudent.class);
        q.declareParameters(""String googleIdParam, String courseIdParam"");
        q.setFilter(""googleId == googleIdParam && courseId == courseIdParam"");
        
        @SuppressWarnings(""unchecked"")
        List<CourseStudent> courseStudentList = (List<CourseStudent>) q.execute(googleId, courseId);
        
        if (!courseStudentList.isEmpty() && !JDOHelper.isDeleted(courseStudentList.get(0))) {
            return new StudentAttributes(courseStudentList.get(0));
        }
        
        q = getPm().newQuery(Student.class);
        q.declareParameters(""String googleIdParam, String courseIdParam"");
        q.setFilter(""ID == googleIdParam && courseID == courseIdParam"");
        
        @SuppressWarnings(""unchecked"")
        List<Student> studentList = (List<Student>) q.execute(googleId, courseId);
        
        if (studentList.isEmpty() || JDOHelper.isDeleted(studentList.get(0))) {
            return null;
        }
        return new StudentAttributes(studentList.get(0));
    }",Preconditions:  All parameters are non-null.,0,322
5850,"public static ValueNode readArrayLength(StructuredGraph graph, ValueNode array, ConstantReflectionProvider constantReflection) {
        if (array instanceof ArrayLengthProvider) {
            ValueNode length = ((ArrayLengthProvider) array).length();
            if (length != null) {
                return length;
            }
        }
        if (constantReflection != null && array.isConstant() && !array.isNullConstant()) {
            Constant constantValue = array.asConstant();
            if (constantValue != null && constantValue.isNonNull()) {
                Integer constantLength = constantReflection.lookupArrayLength(constantValue);
                if (constantLength != null) {
                    return ConstantNode.forInt(constantLength, graph);
                }
            }
        }
        return null;
    }",Gets the length of an array if possible.,0,215
7223,"public static Resource getIcon(String fileName) {
        return getIconByMineType(getMIMEType(fileName));
    }","Gets the descriptive icon representing file, based on the filename.",0,30
5465,"public byte[] take() throws KeeperException, InterruptedException {
    // Same as for element. Should refactor this.
    TimerContext timer = stats.time(dir + ""_take"");
    try {
      TreeMap<Long, String> orderedChildren = getChildren(Long.MAX_VALUE);
      for (String headNode : orderedChildren.values()) {
        String path = dir + ""/"" + headNode;
        try {
          byte[] data = zookeeper.getData(path, null, null, true);
          zookeeper.delete(path, -1, true);
          return data;
        } catch (KeeperException.NoNodeException e) {
          // Another client deleted the node first.
        }
      }
      return null; // shouldn't really reach here..
    } finally {
      timer.stop();
    }
  }","Removes the head of the queue and returns it, blocks until it succeeds.",0,214
5757,"public FormatControl[] getFormatControls()
    {
        return AbstractFormatControl.getFormatControls(this);
    }",Gets an array of FormatControl instances each one of which can be used before  #connect() to get and set the capture Format of each one of the capture streams.,0,27
6318,"public ResourceIterable<Label> getAllLabels()
    {
        assertInTransaction();
        return new ResourceIterable<Label>()
        {
            @Override
            public ResourceIterator<Label> iterator()
            {
                Statement statement = statementCtxProvider.statement();
                return cleanupService.resourceIterator( map( new Function<Token, Label>()
                {

                    @Override
                    public Label apply( Token labelToken )
                    {
                        return label( labelToken.name() );
                    }
                }, statement.readOperations().labelsGetAllTokens() ), statement );
            }
        };
    }",Returns all labels currently in the underlying store.,0,164
6059,"public static boolean quietlyInvokeMethodsWithAnnotation(final Class<? extends Annotation> annotation, final Object instance, final Object... args) {
        for (final Method method : instance.getClass().getMethods()) {
            if (method.isAnnotationPresent(annotation)) {
                final boolean isAccessible = method.isAccessible();
                method.setAccessible(true);

                try {
                    final Class<?>[] argumentTypes = method.getParameterTypes();
                    if (argumentTypes.length > args.length) {
                        LOG.error(""Unable to invoke method {} on {} because method expects {} parameters but only {} were given"",
                                new Object[]{method.getName(), instance, argumentTypes.length, args.length});
                        return false;
                    }

                    for (int i = 0; i < argumentTypes.length; i++) {
                        final Class<?> argType = argumentTypes[i];
                        if (!argType.isAssignableFrom(args[i].getClass())) {
                            LOG.error(""Unable to invoke method {} on {} because method parameter {} is expected to be of type {} but argument passed was of type {}"",
                                    new Object[]{method.getName(), instance, i, argType, args[i].getClass()});
                            return false;
                        }
                    }

                    try {
                        if (argumentTypes.length == args.length) {
                            method.invoke(instance, args);
                        } else {
                            final Object[] argsToPass = new Object[argumentTypes.length];
                            for (int i = 0; i < argsToPass.length; i++) {
                                argsToPass[i] = args[i];
                            }

                            method.invoke(instance, argsToPass);
                        }
                    } catch (final IllegalAccessException | IllegalArgumentException | InvocationTargetException t) {
                        LOG.error(""Unable to invoke method {} on {} due to {}"", new Object[]{method.getName(), instance, t});
                        LOG.error("""", t);
                        return false;
                    }
                } finally {
                    if (!isAccessible) {
                        method.setAccessible(false);
                    }
                }
            }
        }
        return true;
    }",Invokes all methods on the given instance that have been annotated with the given Annotation.,0,573
7366,"public static String leftPad(String str, int size, String delim) {
        if (delim.length() == 1 && size - str.length() <= PAD_LIMIT)
           return leftPad(str, size, delim.charAt(0));
        size = (size - str.length()) / delim.length();
        if (size > 0) {
            str = repeat(delim, size) + str;
        }
        return str;
    }",Left pad a String with a specified string.,0,148
7841,"private ZapTextField getTxtReverseProxyIp() {
		if (txtReverseProxyIp == null) {
			txtReverseProxyIp = new ZapTextField();
		}
		return txtReverseProxyIp;
	}",This method initializes txtProxyIpSSL,0,48
6066,"public void createMatrix(MatrixContext matrixContext, long timeOutMs)
      throws AngelException {
    try {
      PSAgentContext.get().getMasterClient().createMatrix(matrixContext, timeOutMs);
    } catch (Throwable x) {
      throw new AngelException(x);
    }
  }",Create a new matrix,0,78
6110,"private static StateStrategy stateStrategy(final State state) {
        return STRATEGY_MAP.get(state);
    }",Returns the  StateStrategy object responsible for the given state.,0,31
5418,"public static LeaderRetrievalService createLeaderRetrievalService(Configuration configuration)
		throws Exception {
		return createLeaderRetrievalService(configuration, false);
	}",Creates a  LeaderRetrievalService based on the provided  Configuration object.,0,35
6800,"public boolean updateCellValue(RowData row, DBDAttributeBinding attr, @Nullable Object value)
    {
        return updateCellValue(row, attr, value, true);
    }",Updates cell value.,0,47
5792,"public boolean sameHost(final String hostName) {
        String hostToUse = hostName;
        final int idx = hostToUse.indexOf("":"");
        int portToUse = defaultPort();
        if (idx > 0) {
            portToUse = Integer.parseInt(hostToUse.substring(idx + 1));
            hostToUse = hostToUse.substring(0, idx);
        }

        return this.port == portToUse && host.equalsIgnoreCase(hostToUse);
    }",Determines whether this address is the same as a given host.,0,137
6835,"public static String getValue(Object obj, String field, final String defaultValue) {
        String valueToReturn = defaultValue;
        
        if (TranslationConsiderationContext.hasTranslation()) {
            TranslationService translationService = TranslationConsiderationContext.getTranslationService();
            Locale locale = BroadleafRequestContext.getBroadleafRequestContext().getJavaLocale();
            String translatedValue = translationService.getTranslatedValue(obj, field, locale);
            
            if (StringUtils.isNotBlank(translatedValue)) {
                valueToReturn = translatedValue;
            }
        }
            
        return valueToReturn;
    }","If translations are enabled, this method will look for a translation for the specified field.",0,146
6171,"public Type updateType(Type type, boolean merge) throws SystemException {
		type.setNew(false);

		return typePersistence.update(type, merge);
	}",Updates the type in the database or adds it if it does not yet exist.,0,49
6281,"public int addAndGet(int delta) {
		return commands.incrBy(key, delta);
	}",Atomically add the given value to current value.,0,30
5515,"public static AlluxioStatusException from(Status status) {
    Preconditions.checkNotNull(status, ""status"");
    Preconditions.checkArgument(status != Status.OK, ""OK is not an error status"");
    String message = status.getDescription();
    Throwable cause = status.getCause();
    switch (status.getCode()) {
      case CANCELLED:
        return new CancelledException(message, cause);
      case INVALID_ARGUMENT:
        return new InvalidArgumentException(message, cause);
      case DEADLINE_EXCEEDED:
        return new DeadlineExceededException(message, cause);
      case NOT_FOUND:
        return new NotFoundException(message, cause);
      case ALREADY_EXISTS:
        return new AlreadyExistsException(message, cause);
      case PERMISSION_DENIED:
        return new PermissionDeniedException(message, cause);
      case UNAUTHENTICATED:
        return new UnauthenticatedException(message, cause);
      case RESOURCE_EXHAUSTED:
        return new ResourceExhaustedException(message, cause);
      case FAILED_PRECONDITION:
        return new FailedPreconditionException(message, cause);
      case ABORTED:
        return new AbortedException(message, cause);
      case OUT_OF_RANGE:
        return new OutOfRangeException(message, cause);
      case UNIMPLEMENTED:
        return new UnimplementedException(message, cause);
      case INTERNAL:
        return new InternalException(message, cause);
      case UNAVAILABLE:
        return new UnavailableException(message, cause);
      case DATA_LOSS:
        return new DataLossException(message, cause);
      default:
        return new UnknownException(message, cause);
    }
  }",Converts an Alluxio exception from status and message representation to native representation.,0,415
5772,"public Promise<MachineImpl> show() {
    final WorkspaceImpl workspace = appContext.getWorkspace();
    final RuntimeImpl runtime = workspace.getRuntime();

    if (runtime != null) {
      final List<? extends MachineImpl> machines = new ArrayList<>(runtime.getMachines().values());

      if (machines.size() == 1) {
        return promiseProvider.resolve(machines.get(0));
      }

      view.setMachines(machines);
    }

    view.show();

    return promiseProvider.create(
        Executor.create(
            (ExecutorBody<MachineImpl>)
                (resolve, reject) -> {
                  resolveFunction = resolve;
                  rejectFunction = reject;
                }));
  }",Pops up a dialog for choosing a machine.,0,215
5648,"public static String getTypeClassName(int type, boolean forResultSet) {
        switch (type) {
        case Value.BOOLEAN:
            // ""java.lang.Boolean"";
            return Boolean.class.getName();
        case Value.BYTE:
            if (forResultSet && !SysProperties.OLD_RESULT_SET_GET_OBJECT) {
                // ""java.lang.Integer"";
                return Integer.class.getName();
            }
            // ""java.lang.Byte"";
            return Byte.class.getName();
        case Value.SHORT:
            if (forResultSet && !SysProperties.OLD_RESULT_SET_GET_OBJECT) {
                // ""java.lang.Integer"";
                return Integer.class.getName();
            }
            // ""java.lang.Short"";
            return Short.class.getName();
        case Value.INT:
            // ""java.lang.Integer"";
            return Integer.class.getName();
        case Value.LONG:
            // ""java.lang.Long"";
            return Long.class.getName();
        case Value.DECIMAL:
            // ""java.math.BigDecimal"";
            return BigDecimal.class.getName();
        case Value.TIME:
            // ""java.sql.Time"";
            return Time.class.getName();
        case Value.DATE:
            // ""java.sql.Date"";
            return Date.class.getName();
        case Value.TIMESTAMP:
            // ""java.sql.Timestamp"";
            return Timestamp.class.getName();
        case Value.TIMESTAMP_TZ:
            if (SysProperties.RETURN_OFFSET_DATE_TIME && LocalDateTimeUtils.isJava8DateApiPresent()) {
                // ""java.time.OffsetDateTime"";
                return LocalDateTimeUtils.OFFSET_DATE_TIME.getName();
            }
            // ""org.h2.api.TimestampWithTimeZone"";
            return TimestampWithTimeZone.class.getName();
        case Value.BYTES:
        case Value.UUID:
            // ""[B"", not ""byte[]"";
            return byte[].class.getName();
        case Value.STRING:
        case Value.STRING_IGNORECASE:
        case Value.STRING_FIXED:
        case Value.ENUM:
            // ""java.lang.String"";
            return String.class.getName();
        case Value.BLOB:
            // ""java.sql.Blob"";
            return java.sql.Blob.class.getName();
        case Value.CLOB:
            // ""java.sql.Clob"";
            return java.sql.Clob.class.getName();
        case Value.DOUBLE:
            // ""java.lang.Double"";
            return Double.class.getName();
        case Value.FLOAT:
            // ""java.lang.Float"";
            return Float.class.getName();
        case Value.NULL:
            return null;
        case Value.JAVA_OBJECT:
            // ""java.lang.Object"";
            return Object.class.getName();
        case Value.UNKNOWN:
            // anything
            return Object.class.getName();
        case Value.ARRAY:
            return Array.class.getName();
        case Value.RESULT_SET:
            return ResultSet.class.getName();
        case Value.GEOMETRY:
            return GEOMETRY_CLASS_NAME;
        case Value.INTERVAL_YEAR:
        case Value.INTERVAL_MONTH:
        case Value.INTERVAL_DAY:
        case Value.INTERVAL_HOUR:
        case Value.INTERVAL_MINUTE:
        case Value.INTERVAL_SECOND:
        case Value.INTERVAL_YEAR_TO_MONTH:
        case Value.INTERVAL_DAY_TO_HOUR:
        case Value.INTERVAL_DAY_TO_MINUTE:
        case Value.INTERVAL_DAY_TO_SECOND:
        case Value.INTERVAL_HOUR_TO_MINUTE:
        case Value.INTERVAL_HOUR_TO_SECOND:
        case Value.INTERVAL_MINUTE_TO_SECOND:
            // ""org.h2.api.Interval""
            return Interval.class.getName();
        default:
            if (JdbcUtils.customDataTypesHandler != null) {
                return JdbcUtils.customDataTypesHandler.getDataTypeClassName(type);
            }
            throw DbException.throwInternalError(""type=""+type);
        }
    }",Get the name of the Java class for the given value type.,0,837
7701,"public double getMatchRatio(String strA, String strB) {
        if (strA == null && strB == null) {
            return MAX_RATIO;
            
        } else if (strA == null || strB == null) {
            return MIN_RATIO;
        }
        
        if (strA.isEmpty() && strB.isEmpty()) {
            return MAX_RATIO;
            
        } else if (strA.isEmpty() || strB.isEmpty()) {
            return MIN_RATIO;
        }
                
        //get the percentage match against the longer of the 2 strings
        return (double)getLCS(strA, strB).length() / Math.max(strA.length(), strB.length());
    }",Calculate the ratio of similarity between 2 strings using LCS,0,201
6232,"private boolean isIfJustReturnsBoolean(ASTIfStatement ifNode) {
        Node node = ifNode.getChild(1);
        return node.getNumChildren() == 1
                && (hasOneBlockStmt(node) || terminatesInBooleanLiteral(node.getChild(0)));
    }",Checks whether the given ifstatement just returns a boolean in the if clause.,0,70
7634,"public String appendIdentitySelectToInsert(String insertString) {
		return getIdentityColumnSupport().appendIdentitySelectToInsert( insertString );
	}","Provided we  #supportsInsertSelectIdentity, then attach the ""select identity"" clause to the insert statement.",0,31
7566,"public boolean comparePermissionString(String userAccessLevel, String fullPermissionName) {
        int userAccessLevelLength;
        if (userAccessLevel == null || fullPermissionName == null
                || (userAccessLevelLength = userAccessLevel.length()) == 0 || fullPermissionName.length() == 0) {
            return false;
        }

        int userAccessLevelOffset;
        if (userAccessLevel.charAt(0) == '+' || userAccessLevel.charAt(0) == '-') {
            userAccessLevelOffset = 1;
        } else {
            userAccessLevelOffset = 0;
        }
        if (""*"".regionMatches(0, userAccessLevel, userAccessLevelOffset, userAccessLevelLength - userAccessLevelOffset)) {
            return true;
        }
        int fullPermissionNameOffset;
        if (fullPermissionName.charAt(0) == '+' || fullPermissionName.charAt(0) == '-') {
            fullPermissionNameOffset = 1;
        } else {
            fullPermissionNameOffset = 0;
        }

        if (userAccessLevel.charAt(userAccessLevel.length() - 1) == '*') {
            userAccessLevelLength--;
        }
        return userAccessLevel.regionMatches(true, userAccessLevelOffset, fullPermissionName, fullPermissionNameOffset, userAccessLevelLength - userAccessLevelOffset);
    }","Compare a user permission like 'myplugin.' against a full plugin permission name, like 'myplugin.dosomething'.",0,330
6258,"private Optional<CategoryScoreData> calculateCategoryScore(final String studentUuid, final Long categoryId, final List<AssignmentGradeRecord> gradeRecords) {

		//validate
		if(gradeRecords == null) {
			log.debug(""No grade records for student: {}. Nothing to do."", studentUuid);
			return Optional.empty();
		}

		if (categoryId == null) {
			log.debug(""No category supplied, nothing to do."");
			return Optional.empty();
		}

		//setup
		int numScored = 0;
		int numOfAssignments = 0;
		BigDecimal totalEarned = new BigDecimal(""0"");
		BigDecimal totalPossible = new BigDecimal(""0"");

		// apply any drop/keep settings for this category
		applyDropScores(gradeRecords);

		// find the records marked as dropped (highest/lowest) before continuing,
		// as gradeRecords will be modified in place after this and these records will be removed
		List<Long> droppedItemIds = gradeRecords.stream()
				.filter(AssignmentGradeRecord::getDroppedFromGrade)
				.map(agr -> agr.getAssignment().getId())
				.collect(Collectors.toList());

		// Since all gradeRecords for the student are passed in, not just for this category,
		// plus they may not meet the criteria for including in the calculation,
		// this list is filtered down according to the following rules:
		// Rule 1. remove gradeRecords that don't match the given category
		// Rule 2. the assignment must have points to be assigned
		// Rule 3. there is a non blank grade for the student
		// Rule 4. the assignment is included in course grade calculations
		// Rule 5. the assignment is  released to the student (safety check against condition 3)
		// Rule 6. the grade is not dropped from the calc
		// Rule 7. extra credit items have their grade value counted only. Their total points possible does not apply to the calculations
		log.debug(""categoryId: {}"", categoryId);

		gradeRecords.removeIf(gradeRecord -> {
			final GradebookAssignment assignment = gradeRecord.getAssignment();

			// remove if not for this category (rule 1)
			if(assignment.getCategory() == null){
				return true;
			}
			if(categoryId.longValue() != assignment.getCategory().getId().longValue()){
				return true;
			}

			//remove if the assignment/graderecord doesn't meet the criteria for the calculation (rule 2-6)
			if(assignment.getPointsPossible() == null || gradeRecord.getPointsEarned() == null || !assignment.isCounted() || !assignment.isReleased() || gradeRecord.getDroppedFromGrade()) {
				return true;
			}

			return false;
		});

		log.debug(""gradeRecords.size(): {}"", gradeRecords.size());

		// pre-calculation
		// Rule 1. If category only has a single EC item, don't try to calculate category total.
		if(gradeRecords.size() == 1 && gradeRecords.get(0).getAssignment().isExtraCredit()) {
			return Optional.empty();
		}

		//iterate the filtered list and set the variables for the calculation
		for(final AssignmentGradeRecord gradeRecord: gradeRecords) {

			final GradebookAssignment assignment = gradeRecord.getAssignment();

			// EC item, don't count points possible
			if(!assignment.isExtraCredit()) {
				totalPossible = totalPossible.add(new BigDecimal(assignment.getPointsPossible().toString()));
				numOfAssignments++;
				numScored++;
			}

			//sanitise grade, null values to ""0"";
			final String grade = (gradeRecord.getPointsEarned() != null) ? String.valueOf(gradeRecord.getPointsEarned()) : ""0"";

			//update total points earned
			totalEarned = totalEarned.add(new BigDecimal(grade));

		}

		if (numScored == 0 || numOfAssignments == 0 || totalPossible.doubleValue() == 0) {
    		return Optional.empty();
    	}

    	final BigDecimal mean = totalEarned.divide(new BigDecimal(numScored), GradebookService.MATH_CONTEXT).divide((totalPossible.divide(new BigDecimal(numOfAssignments), GradebookService.MATH_CONTEXT)), GradebookService.MATH_CONTEXT).multiply(new BigDecimal(""100""));
    	return Optional.of(new CategoryScoreData(mean.doubleValue(), droppedItemIds));
	}",Does the heavy lifting for the category calculations.,0,862
6383,"public BigDecimal optBigDecimal(String key, BigDecimal defaultValue) {
        Object object = this.opt(key);
        if (NULL.equals(object)) {
            return defaultValue;
        }
        try {
            return new BigDecimal(object.toString());
        } catch (Exception e) {
            return defaultValue;
        }
    }","Get an optional BigDecimal associated with a key, or the defaultValue if there is no such key or if its value is not a number.",0,101
7830,"protected boolean parse(String data) throws Exception {
        if(data == null || data.isEmpty()) {
            return true;
        }

        // ZAP: Replace all ""\n"" with ""\r\n"" to parse correctly
        String newData = data.replaceAll(""(?<!\r)\n"", CRLF);
        // ZAP: always use CRLF to comply with HTTP specification
        // even if the data it's not directly used.
        mLineDelimiter = CRLF;
        
		String[] split = patternCRLF.split(newData);
		mStartLine = split[0];
		
        String 	token = null,
				name = null,
				value = null;
        int pos = 0;
        
        StringBuilder sb = new StringBuilder(2048);
		for (int i=1; i<split.length; i++)
		{
			token = split[i];
			if (token.equals("""")) {
				continue;
			}
			
            if((pos = token.indexOf("":"")) < 0) {
				mMalformedHeader = true;
                return false;
            }
            name  = token.substring(0, pos).trim();
            value = token.substring(pos +1).trim();

            if(name.equalsIgnoreCase(CONTENT_LENGTH)) {
            	try {
                	mContentLength = Integer.parseInt(value);
            	} catch (NumberFormatException nfe){}
            }
			
            /*
            if (name.equalsIgnoreCase(PROXY_CONNECTION)) {
            	sb.append(name + "": "" + _CLOSE + mLineDelimiter);
            } else if (name.equalsIgnoreCase(CONNECTION)) {
            	sb.append(name + "": "" + _CLOSE + mLineDelimiter);
            } else {
            */
			sb.append(name + "": "" + value + mLineDelimiter);
			//}
			
			addInternalHeaderFields(name, value);
		}

        mMsgHeader = sb.toString();
		return true;
	}",Parse this Http header using the String given.,0,434
7177,"public String decryptValue(final String value) {
        try {
            initializeJasyptInstanceIfNecessary();
            return this.jasyptInstance.decrypt(value);
        } catch (final Exception e) {
            LOGGER.error(""Could not decrypt value [{}]"", e);
        }
        return null;
    }",Decrypt value string.,0,80
5270,"public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {
    SolrParams params = req.getParams();
    if (!isHighlightingEnabled(params)) // also returns early if no unique key field
      return null;

    SolrIndexSearcher searcher = req.getSearcher();
    IndexSchema schema = searcher.getSchema();

    // fetch unique key if one exists.
    SchemaField keyField = schema.getUniqueKeyField();
    if (keyField == null) {
      return null;//exit early; we need a unique key field to populate the response
    }

    String[] fieldNames = getHighlightFields(query, req, defaultFields);

    Set<String> preFetchFieldNames = getDocPrefetchFieldNames(fieldNames, req);
    if (preFetchFieldNames != null) {
      preFetchFieldNames.add(keyField.getName());
    }

    FastVectorHighlighter fvh = null; // lazy
    FieldQuery fvhFieldQuery = null; // lazy

    // Highlight each document
    NamedList fragments = new SimpleOrderedMap();
    DocIterator iterator = docs.iterator();
    for (int i = 0; i < docs.size(); i++) {
      int docId = iterator.nextDoc();
      StoredDocument doc = searcher.doc(docId, preFetchFieldNames);

      NamedList docSummaries = new SimpleOrderedMap();
      for (String fieldName : fieldNames) {
        if (useFastVectorHighlighter(params, schema, fieldName)) {
          if (fvhFieldQuery == null) {
            fvh = new FastVectorHighlighter(
                // FVH cannot process hl.usePhraseHighlighter parameter per-field basis
                params.getBool(HighlightParams.USE_PHRASE_HIGHLIGHTER, true),
                // FVH cannot process hl.requireFieldMatch parameter per-field basis
                params.getBool(HighlightParams.FIELD_MATCH, false));
            fvh.setPhraseLimit(params.getInt(HighlightParams.PHRASE_LIMIT, SolrHighlighter.DEFAULT_PHRASE_LIMIT));
            fvhFieldQuery = fvh.getFieldQuery(query, searcher.getIndexReader());
          }
          doHighlightingByFastVectorHighlighter(fvh, fvhFieldQuery, req, docSummaries, docId, doc, fieldName);
        } else {
          doHighlightingByHighlighter(query, req, docSummaries, docId, doc, fieldName);
        }
      } // for each field
      fragments.add(schema.printableUniqueKey(doc), docSummaries);
    } // for each doc
    return fragments;
  }","Generates a list of Highlighted query fragments for each item in a list of documents, or returns null if highlighting is disabled.",0,577
6801,"public Buffer toBuffer() {
    return JsonCodec.INSTANCE.toBuffer(map, false);
  }",Encode this JSON object as buffer.,0,29
5703,"public StampedRecord poll() {
        final StampedRecord recordToReturn = headRecord;
        headRecord = null;

        maybeUpdateTimestamp();

        return recordToReturn;
    }",Get the next  StampedRecord from the queue,0,47
6452,"PublishSubscriber<T>[] terminate(Object event) {
            if (compareAndSet(null, event)) {
                return subscribers.getAndSet(TERMINATED);
            }
            return TERMINATED;
        }",Atomically swaps in the terminal state with a completion indicator and returns the last array of subscribers.,0,54
5643,"public OptionalMethodInterception withImplementing(Iterable<? extends Type> types) {
        return withImplementing(new GenericTypeList.ForLoadedTypes(toList(types)));
    }",Defines all dynamic types that are created by this configuration to implement the given interfaces.,0,42
6735,"private ConcurrentHashSet<T> getByFieldInternal(FieldIndex<T> index, Object value) {
    return mIndexMap.get(index).get(value);
  }",Gets the set of objects with the specified field value - internal function.,0,43
6640,"Page readPage(BtreeMap<?, ?> map, long pos) {
        if (pos < 0) {
            return temp.get(pos);
        }
        Page p = cache.get(pos);
        if (p == null) {
            long filePos = getFilePosition(pos);
            p = Page.read(file, map, filePos, pos);
            cache.put(pos, p);
        }
        return p;
    }",Read a page.,0,137
5804,"@Override protected Frame predictScoreImpl(Frame orig, Frame adaptedFr, String destination_key) {
    if (!get_params()._autoencoder) {
      return super.predictScoreImpl(orig, adaptedFr, destination_key);
    } else {
      // Reconstruction
      final int len = model_info().data_info().fullN();
      String prefix = ""reconstr_"";
      assert(model_info().data_info()._responses == 0);
      String[] coefnames = model_info().data_info().coefNames();
      assert(len == coefnames.length);
      Frame adaptFrm = new Frame(adaptedFr);
      for( int c=0; c<len; c++ )
        adaptFrm.add(prefix+coefnames[c],adaptFrm.anyVec().makeZero());
      new MRTask() {
        @Override public void map( Chunk chks[] ) {
          double tmp [] = new double[_output._names.length];
          float preds[] = new float [len];
          final Neurons[] neurons = DeepLearningTask.makeNeuronsForTesting(model_info);
          for( int row=0; row<chks[0]._len; row++ ) {
            float p[] = score_autoencoder(chks, row, tmp, preds, neurons);
            for( int c=0; c<preds.length; c++ )
              chks[_output._names.length+c].set(row,p[c]);
          }
        }
      }.doAll(adaptFrm);

      // Return the predicted columns
      int x=_output._names.length, y=adaptFrm.numCols();
      Frame f = adaptFrm.extractFrame(x, y); //this will call vec_impl() and we cannot call the delete() below just yet

      f = new Frame((null == destination_key ? Key.make() : Key.make(destination_key)), f.names(), f.vecs());
      DKV.put(f);
      makeMetricBuilder(null).makeModelMetrics(this, orig);
      return f;
    }
  }",Make either a prediction or a reconstruction.,0,556
6741,"protected SystemMessages getSystemMessages() {
        return ServletPortletHelper.DEFAULT_SYSTEM_MESSAGES;
    }",Get system messages from the current application class,0,21
7086,"public boolean hasRetriesLeft() {
		if(this.retries < 0){
			return false;
		}
		return true;
	}",Returns the task represented by this vertex has a retry attempt left in case of an execution failure.,0,41
5335,"public Node controller() {
        return getControllerNode(data.controllerId(), brokers());
    }",The controller node returned in metadata response,0,31
6253,"public HstsSpec hsts() {
			return new HstsSpec();
		}",Configures the Strict Transport Security response headers,0,23
7469,"public Object invoke(String currentPath, PathRef parent, Object model, EvaluationContext ctx, List<Parameter> parameters) {
        int count = 0;
        if(ctx.configuration().jsonProvider().isArray(model)){

            Iterable<?> objects = ctx.configuration().jsonProvider().toIterable(model);
            for (Object obj : objects) {
                if (obj instanceof Number) {
                    Number value = (Number) obj;
                    count++;
                    next(value);
                }
            }
        }
        if (parameters != null) {
            for (Parameter param : parameters) {
                if (param.getCachedValue() instanceof Number) {
                    Number value = (Number)param.getCachedValue();
                    count++;
                    next(value);
                }
            }
        }
        if (count != 0) {
            return getValue();
        }
        throw new JsonPathException(""Aggregation function attempted to calculate value using empty array"");
    }",Obtains the value generated via the series of next value calls,0,283
6574,"public RealmQuery<E> equalTo(String fieldName, Double value) {
        realm.checkIfValid();

        return equalToWithoutThreadValidation(fieldName, value);
    }",Equal-to comparison.,0,45
6692,"public static int getMonthLength(int year, int month) {
		return getMonthLength(year, month, isLeapYear(year));
	}",Returns the length of the specified month in days.,0,41
6162,"public boolean hasDefaultCondition() {
    return conditions.containsKey(SelectorKey.DEFAULT)
        || nullConditions.contains(SelectorKey.DEFAULT);
  }",Returns the default value - value to use when none of the conditions match.,0,39
6877,"public static ValueTimestampTimeZone timestampTimeZoneFromMillis(long ms) {
        int offset = getTimeZoneOffsetMillis(ms);
        ms += offset;
        long absoluteDay = ms / MILLIS_PER_DAY;
        // Round toward negative infinity
        if (ms < 0 && (absoluteDay * MILLIS_PER_DAY != ms)) {
            absoluteDay--;
        }
        return ValueTimestampTimeZone.fromDateValueAndNanos(
                dateValueFromAbsoluteDay(absoluteDay),
                (ms - absoluteDay * MILLIS_PER_DAY) * 1_000_000,
                offset / 1_000);
    }",Creates the instance of the  ValueTimestampTimeZone from milliseconds.,0,137
6872,"public String processAddGroup () {

    	// reset the warning messages
    	resetTargettedMessageList();
    	
        Group group;
        
        id = StringUtils.trimToNull(id);
        
    	title = StringUtils.trimToNull(title);
    	if (title == null)
    	{
    		//we need something in the title field SAK-21517
    		messages.addMessage(new TargettedMessage(""editgroup.titlemissing"",new Object[]{}, TargettedMessage.SEVERITY_ERROR));
    		return null;
    	}
    	else if (title.length() > SiteConstants.SITE_GROUP_TITLE_LIMIT)
    	{
    		messages.addMessage(new TargettedMessage(""site_group_title_length_limit"",new Object[] { String.valueOf(SiteConstants.SITE_GROUP_TITLE_LIMIT) }, TargettedMessage.SEVERITY_ERROR));
    		return null;
    	}
    	else
    	{
            String sameTitleGroupId = GroupHelper.getSiteGroupByTitle(site, title);
            // ""id"" will be null if adding a new group, otherwise it will be the id of the group being edited
            if (!sameTitleGroupId.isEmpty() && (id == null || !sameTitleGroupId.equals(id)))
            {
                messages.addMessage(new TargettedMessage(""group.title.same"", null, TargettedMessage.SEVERITY_ERROR));
                return null;
            }
    	}

		if (id != null)
		{
			// editing existing group
			group = site.getGroup(id);
		}
		else
		{
			// adding a new group
	        group= site.addGroup();
	        group.getProperties().addProperty(Group.GROUP_PROP_WSETUP_CREATED, Boolean.TRUE.toString());
		}
		
		if (group != null)
		{
			group.setTitle(title);
            group.setDescription(description);   
            
            boolean found;
            // remove those no longer included in the group
			Set members = group.getMembers();
			String[] membersSelected = memberList.split(""##"");
			for (Iterator iMembers = members.iterator(); iMembers
					.hasNext();) {
				found = false;
				String mId = ((Member) iMembers.next()).getUserId();
				for (int i = 0; !found && i < membersSelected.length; i++)
				{
					if (mId.equals(membersSelected[i])) {
						found = true;
					}

				}
				if (!found) {
					group.removeMember(mId);
				}
			}

            // add those seleted members
            for( String memberId : membersSelected )
            {
                memberId = StringUtils.trimToNull(memberId);
                if (memberId != null && group.getUserRole(memberId) == null) {
                    Role r = site.getUserRole(memberId);
                    Member m = site.getMember(memberId);
                    Role memberRole = m != null ? m.getRole() : null;
                    // for every member added through the ""Manage
                    // Groups"" interface, he should be defined as
                    // non-provided
                    // get role first from site definition.
                    // However, if the user is inactive, getUserRole would return null; then use member role instead
                    group.addMember(memberId, r != null ? r.getId()
                                              : memberRole != null? memberRole.getId() : """", m != null ? m.isActive() : true,
                                              false);
                }
            }
	            
    		// save the changes
    		try
    		{
    			siteService.save(site);
    			// reset the form params
    			resetParams();
	        } 
	        catch (IdUnusedException | PermissionException e) {
	        	M_log.warn(this + "".processAddGroup: cannot find site "" + site.getId(), e);
	            return null;
	        }
    	}
        
        return ""success"";
    }","Adds a new group to the current site, or edits an existing group",0,914
7293,"public HColumnDescriptor[] getColumnFamilies() {
    return delegatee.getColumnFamilies();
  }",Returns an array all the  HColumnDescriptor of the column families of the table.,0,25
6166,"public HttpEntity encodeJSON( Object contentType, Object model ) throws UnsupportedEncodingException {

        Object json;
        if ( model instanceof Map || model instanceof Collection) {
            json = new JsonBuilder(model);
        } else if ( model instanceof Closure ) {
            Closure closure = (Closure)model;
            closure.setDelegate( new JsonBuilder() );
            json = closure.call();
        } else if ( model instanceof String || model instanceof GString ) {
            json = model; // assume string is valid JSON already.
        } else {
            throw new UnsupportedOperationException(""Internal error: Can't encode ""+model+"" to JSON."");
        }

        return this.createEntity( useContentTypeIfDefinedOrElseUse(contentType, ContentType.JSON), json.toString() );
    }",Accepts a Collection or a JavaBean object which is converted to JSON.,0,225
5530,"public long getMemoryForMapTask() {
    long value = getDeprecatedMemoryValue();
    if (value < 0) {
      return getLong(JobConf.MAPRED_JOB_MAP_MEMORY_MB_PROPERTY,
          JobContext.DEFAULT_MAP_MEMORY_MB);
    }
    return value;
  }","Get memory required to run a map task of the job, in MB.",0,64
6917,"public Merge begin() {
        for (Node n : predecessors()) {
            if (n instanceof Merge) {
                return (Merge) n;
            }
        }
        return null;
    }",Gets the block begin associated with this block end.,0,65
6513,"public KaleoNode updateKaleoNode(KaleoNode kaleoNode, boolean merge)
		throws SystemException {
		kaleoNode.setNew(false);

		kaleoNode = kaleoNodePersistence.update(kaleoNode, merge);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.reindex(kaleoNode);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}

		return kaleoNode;
	}",Updates the kaleo node in the database.,0,154
7454,"protected boolean equals( Object tokenCredentials, Object accountCredentials ) {
        if ( (tokenCredentials instanceof byte[] || tokenCredentials instanceof char[] || tokenCredentials instanceof String ) &&
             (accountCredentials instanceof byte[] || accountCredentials instanceof char[] || tokenCredentials instanceof String ) ) {
            byte[] tokenBytes = toBytes(tokenCredentials);
            byte[] accountBytes = toBytes(accountCredentials);
            return Arrays.equals( tokenBytes, accountBytes );
        } else {
            return accountCredentials.equals( tokenCredentials );
        }
    }",Returns true if the tokenCredentials are equal to the accountCredentials.,0,167
7671,"protected int[] JavaToPdeOffsets(int line, int offset) {

    return new int[] { 0, 0 }; // TODO

    /*
    int codeIndex = 0;

    int x = line - mainClassOffset;
    if (x < 0) {
      // log(""Negative line number ""
      // + problem.getSourceLineNumber() + "" , offset ""
      // + mainClassOffset);
      x = line - 2; // Another -1 for 0 index
      if (x < programImports.size() && x >= 0) {
        ImportStatement is = programImports.get(x);
        // log(is.importName + "", "" + is.tab + "", ""
        // + is.lineNumber);
        return new int[] { 0, 0 }; // TODO
      } else {

        // Some seriously ugly stray error, just can't find the source
        // line! Simply return first line for first tab.
        return  new int[] { 0, 1 };
      }

    }

    try {
      for (SketchCode sc : editor.getSketch().getCode()) {
        if (sc.isExtension(""pde"")) {
          int len;
          if (editor.getSketch().getCurrentCode().equals(sc)) {
            len = Util.countLines(sc.getDocumentText()) + 1;
          } else {
            len = Util.countLines(sc.getProgram()) + 1;
          }

          // log(""x,len, CI: "" + x + "","" + len + "",""
          // + codeIndex);

          if (x >= len) {

            // We're in the last tab and the line count is greater
            // than the no.
            // of lines in the tab,
            if (codeIndex >= editor.getSketch().getCodeCount() - 1) {
              // log(""Exceeds lc "" + x + "","" + len
              // + problem.toString());
              // x = len
              x = editor.getSketch().getCode(codeIndex)
                  .getLineCount();
              // TODO: Obtain line having last non-white space
              // character in the code.
              break;
            } else {
              x -= len;
              codeIndex++;
            }
          } else {

            if (codeIndex >= editor.getSketch().getCodeCount()) {
              codeIndex = editor.getSketch().getCodeCount() - 1;
            }
            break;
          }

        }
      }
    } catch (Exception e) {
      System.err.println(""Error inside ErrorCheckerService.JavaToPdeOffset()"");
      e.printStackTrace();
    }
    return new int[] { codeIndex, x };
    */
  }",Maps offset from java code to pde code.,0,49
6256,"public Builder truststore(File truststore, String truststorePassword) {

            LettuceAssert.notNull(truststore, ""Truststore must not be null"");
            LettuceAssert.isTrue(truststore.exists(), () -> String.format(""Truststore file %s does not exist"", truststore));
            LettuceAssert.isTrue(truststore.isFile(), () -> String.format(""Truststore file %s is not a file"", truststore));

            return truststore(Resource.from(truststore), getPassword(truststorePassword));
        }",Sets the Truststore file to load trusted certificates.,0,121
7020,"public static Collection<BibtexEntry> fromString(String bibtexString){
		StringReader reader = new StringReader(bibtexString);
		BibtexParser parser = new BibtexParser(reader); 
		try {
			return parser.parse().getDatabase().getEntries();
		} catch (Exception e){
			return null;
		}
	}",Parses BibtexEntries from the given string and returns the collection of all entries found.,0,95
6573,"private AttributeType getTypeOf(XSDElementDeclaration elemDecl, CoordinateReferenceSystem crs) {
        XSDTypeDefinition typeDefinition;

        // TODO REVISIT, I'm not sure this is the way to find out if the
        // element's type is defined in line (an thus no need to register it
        // as a global type)
        if (elemDecl.isElementDeclarationReference()) {
            elemDecl = elemDecl.getResolvedElementDeclaration();
        }
        boolean hasToBeRegistered = false;
        typeDefinition = elemDecl.getAnonymousTypeDefinition();
        if (typeDefinition == null) {
        	// anonymous types already has type definition inline in the element
        	// so the handling is different
        	hasToBeRegistered = true;
            typeDefinition = elemDecl.getTypeDefinition();
        }
        
        if (typeDefinition == null) {
            // last resort.. look in the lazy schemas
            QName qname = Types.toQName(Types.typeName(elemDecl.getTargetNamespace(),
                    elemDecl.getName()));
            for (SchemaIndex schemaIndex : schemas) {
                elemDecl = schemaIndex.getElementDeclaration(qname);
                if (elemDecl != null) {
                    break;
                }
            }
            if (elemDecl != null) {
                if (elemDecl.isElementDeclarationReference()) {
                    elemDecl = elemDecl.getResolvedElementDeclaration();
                }
                typeDefinition = elemDecl.getAnonymousTypeDefinition();
                if (typeDefinition == null) {
                    typeDefinition = elemDecl.getTypeDefinition();
                }
            }
        }

        if (typeDefinition == null) {
            String msg = ""The element declaration ""
                    + elemDecl.getTargetNamespace() + ""#"" + elemDecl.getName()
                    + "" has a null type definition, can't continue, fix it on the schema"";
            LOGGER.warning(msg);
            throw new NoSuchElementException(msg);
        }

        AttributeType type;
        if (hasToBeRegistered) {
            String targetNamespace = typeDefinition.getTargetNamespace();
            String name = typeDefinition.getName();
            Name typeName = Types.typeName(targetNamespace, name);
            type = getAttributeType(typeName, typeDefinition, crs);
            if (type == null) {
                type = createType(typeName, typeDefinition, crs, false);
            }
        } else {
            String name = elemDecl.getName();
            String targetNamespace = elemDecl.getTargetNamespace();
            Name overrideName = Types.typeName(targetNamespace, name);
            type = createType(overrideName, typeDefinition, crs, true);
        }
        
        return type;
        
    }",If the type of elemDecl is annonymous creates a new type with the same name than the atrribute and returns it.,0,604
7211,"public Promise<List<ProjectConfigDto>> getProjects() {
        final String url = getBaseUrl();

        return reqFactory.createGetRequest(url)
                         .header(ACCEPT, APPLICATION_JSON)
                         .loader(loaderFactory.newLoader(""Getting projects...""))
                         .send(unmarshaller.newListUnmarshaller(ProjectConfigDto.class));
    }",Returns the projects list.,0,83
5692,"public KBTemplate fetchByPrimaryKey(long kbTemplateId)
		throws SystemException {
		KBTemplate kbTemplate = (KBTemplate)EntityCacheUtil.getResult(KBTemplateModelImpl.ENTITY_CACHE_ENABLED,
				KBTemplateImpl.class, kbTemplateId, this);

		if (kbTemplate == _nullKBTemplate) {
			return null;
		}

		if (kbTemplate == null) {
			Session session = null;

			boolean hasException = false;

			try {
				session = openSession();

				kbTemplate = (KBTemplate)session.get(KBTemplateImpl.class,
						Long.valueOf(kbTemplateId));
			}
			catch (Exception e) {
				hasException = true;

				throw processException(e);
			}
			finally {
				if (kbTemplate != null) {
					cacheResult(kbTemplate);
				}
				else if (!hasException) {
					EntityCacheUtil.putResult(KBTemplateModelImpl.ENTITY_CACHE_ENABLED,
						KBTemplateImpl.class, kbTemplateId, _nullKBTemplate);
				}

				closeSession(session);
			}
		}

		return kbTemplate;
	}",Returns the k b template with the primary key or returns null if it could not be found.,0,280
6549,"public List<Node> runXPathQuery(String query) throws XPathEvaluationException {
        return sourceEditorController.getCompilationUnit()
                                     .map(n -> xpathPanelController.runXPathQuery(n, getLanguageVersion(), query))
                                     .orElseGet(Collections::emptyList);
    }",Runs an XPath (2.0) query on the current AST.,0,68
7597,"public DistributedQueue<T>      buildQueue()
    {
        return new DistributedQueue<T>
        (
            client,
            consumer,
            serializer,
            queuePath,
            factory,
            executor,
            Integer.MAX_VALUE,
            false,
            lockPath
        );
    }",Build a  DistributedQueue from the current builder values,0,71
6477,"public Set<Object> getProviderInstances()
   {
      if(initialized) {
         return providerInstances;
      }

      Set<Object> set = new HashSet<Object>();
      if (parent != null)
         set.addAll(parent.getProviderInstances());
      set.addAll(providerInstances);
      return set;
   }",Gets provider instances.,0,95
7608,"public HttpImageGetter bind(final TextView view, final String html, final Object id) {
        view.setText(Html.encode(html, loading));
        view.setTag(id);
        new RoboAsyncTask<CharSequence>(context) {

            public CharSequence call() throws Exception {
                if (html.indexOf(""<img"") != -1)
                    return Html.encode(html, HttpImageGetter.this);
                else
                    return null;
            }

            protected void onSuccess(CharSequence html) throws Exception {
                if (html == null)
                    return;
                if (!id.equals(view.getTag()))
                    return;
                view.setText(html);
            }
        }.execute();
        return this;
    }",Bind text view to HTML string,0,217
5722,"public Config oauthSecConfig() {
        final CasClient oauthCasClient = new CasClient(this.casLoginUrl);
        oauthCasClient.setName(""CasOAuthClient"");

        final DirectBasicAuthClient basicAuthClient = new DirectBasicAuthClient(this.oAuthClientAuthenticator);
        basicAuthClient.setName(""clientBasicAuth"");

        final DirectFormClient directFormClient = new DirectFormClient(this.oAuthClientAuthenticator);
        basicAuthClient.setName(""clientForm"");
        directFormClient.setUsernameParameter(""client_id"");
        directFormClient.setPasswordParameter(""client_secret"");

        final DirectFormClient userFormClient = new DirectFormClient(this.oAuthClientAuthenticator);
        basicAuthClient.setName(""userForm"");

        return new Config(this.callbackUrl, oauthCasClient, basicAuthClient, directFormClient, userFormClient);
    }",Oauth sec config config.,0,184
7769,"protected Object convertUnsignedBigint(Column column, Field fieldDefn, Object data){
        return convertValue(column, fieldDefn, data, 0L, (r) -> {
            if (data instanceof BigDecimal) {
                r.deliver(MySqlUnsignedIntegerConverter.convertUnsignedBigint((BigDecimal)data));
            }
            else if (data instanceof Number) {
                r.deliver(MySqlUnsignedIntegerConverter.convertUnsignedBigint(new BigDecimal(((Number)data).toString())));
            }
            else if (data instanceof String) {
                r.deliver(MySqlUnsignedIntegerConverter.convertUnsignedBigint(new BigDecimal((String)data)));
            }
            else {
                r.deliver(convertNumeric(column, fieldDefn, data));
            }
        });
    }",Convert the a value representing a Unsigned BIGINT value to the correct Unsigned INT representation.,0,202
6207,"public static String toOctalString(long l) {
      return IntegralToString.longToOctalString(l);
    }",Converts the specified long value into its octal string representation.,0,29
5330,"public ExtendedUser getAuthenticatedUser() throws TwitterException {
        return new ExtendedUser(get(baseURL + ""account/verify_credentials.xml"", true),this);
    }",Returns extended information of the authenticated user.,0,42
7843,"public TopicPublisher createPublisher(Topic topic) throws JMSException {
        checkClosed();
        
        if (topic instanceof CustomDestination)  {
            CustomDestination customDestination = (CustomDestination) topic;
            return customDestination.createPublisher(this);
        }
        return new ActiveMQTopicPublisher(this, ActiveMQMessageTransformation.transformDestination(topic));
    }",Creates a publisher for the specified topic.,0,88
6586,"protected boolean isWsAgentRequest(String url) {
    if (appContext.getWorkspace() == null
        || !RUNNING.equals(appContext.getWorkspace().getStatus())) {
      return false; // ws-agent not started
    }
    if (isNullOrEmpty(wsAgentBaseUrl)) {
      final DevMachine devMachine = appContext.getDevMachine();
      if (devMachine != null) {
        wsAgentBaseUrl = devMachine.getWsAgentBaseUrl();
      } else {
        return false;
      }
    }
    return url.contains(nullToEmpty(wsAgentBaseUrl));
  }",Going to check is this request goes to WsAgent,0,152
5283,"public long getAllocationByteCount() {
        long byteCount = getAllocationByteCount(mNativeInfoHandle.gifInfoPtr);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)
            byteCount += mBuffer.getAllocationByteCount();
        else
            byteCount += mBuffer.getRowBytes() * mBuffer.getWidth();
        return byteCount;
    }",Returns size of the allocated memory used to store pixels of this object.,0,91
6186,"protected List<GrantedAuthority> loadUserAuthorities(String username) {
        return getJdbcTemplate().query(authoritiesByUsernameQuery, new String[] {username}, new RowMapper<GrantedAuthority>() {
            public GrantedAuthority mapRow(ResultSet rs, int rowNum) throws SQLException {
                String roleName = rolePrefix + rs.getString(2);
                GrantedAuthorityImpl authority = new GrantedAuthorityImpl(roleName);

                return authority;
            }
        });
    }",Loads authorities by executing the SQL from authoritiesByUsernameQuery.,0,125
6457,"public static Properties makeZKProps(Configuration conf) {
    Properties zkProperties = makeZKPropsFromZooCfg(conf);

    if (zkProperties == null) {
      // Otherwise, use the configuration options from HBase's XML files.
      zkProperties = makeZKPropsFromHbaseConfig(conf);
    }
    return zkProperties;
  }",Make a Properties object holding ZooKeeper config.,0,69
6529,"public int getId(I thing)
    {
        return getIDForObjectBypass(thing);
    }",Get the id for the specified object.,0,26
7898,"public Tree transformTree(Tree t) {
    if (VERBOSE) {
      System.err.println(""Input to CoordinationTransformer: "" + t);
    }
    Tree tx = tn.transformTree(t);
    if (VERBOSE) {
      System.err.println(""After DependencyTreeTransformer:  "" + tx);
    }
    if (tx == null) {
      return tx;
    }
    Tree tt = UCPtransform(tx);
    if (VERBOSE) {
      System.err.println(""After UCPTransformer:             "" + t);
    }
    Tree ttt = CCtransform(tt);
    if (VERBOSE) {
      System.err.println(""After CCTransformer:              "" + t);
    }
    Tree tttt = qp.transformTree(ttt);
    if (VERBOSE) {
      System.err.println(""After QPTreeTransformer:          "" + t);
    }
    Tree ret = dates.transformTree(tttt);
    if (VERBOSE) {
      System.err.println(""After DateTreeTransformer:        "" + t);
    }
    return ret;
  }",Transforms t if it contains a coordination in a flat structure (CCtransform) and transforms UCP (UCPtransform).,0,290
5642,"private QueueSize getQueueSize() {
        final QueueSize unacknowledged = unacknowledgedSizeRef.get();

        return new QueueSize(activeQueue.size() + swappedRecordCount + unacknowledged.getObjectCount(),
            activeQueueContentSize + swappedContentSize + unacknowledged.getByteCount());
    }",MUST be called with lock held,0,73
6850,"public FrameOptionsConfig frameOptions() {
		return frameOptions.enable();
	}",Allows customizing the  XFrameOptionsHeaderWriter.,0,23
5484,"public String apply(Path path) {
      return pathToUriString(path.getPathString());
    }",Creates a  ImmutableSet of  BuildEventTransport based on the specified,0,29
6753,"public KaleoCondition findByPrimaryKey(Serializable primaryKey)
		throws NoSuchConditionException, SystemException {
		KaleoCondition kaleoCondition = fetchByPrimaryKey(primaryKey);

		if (kaleoCondition == null) {
			if (_log.isWarnEnabled()) {
				_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
			}

			throw new NoSuchConditionException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
				primaryKey);
		}

		return kaleoCondition;
	}",Returns the kaleo condition with the primary key or throws a  com.liferay.portal.NoSuchModelException if it could not be found.,0,108
6566,"boolean rewrite(Set<Integer> set) {
        // read from old version, to avoid concurrent reads
        long previousVersion = store.getCurrentVersion() - 1;
        if (previousVersion < createVersion) {
            // a new map
            return true;
        }
        MVMap<K, V> readMap;
        try {
            readMap = openVersion(previousVersion);
        } catch (IllegalArgumentException e) {
            // unknown version: ok
            // TODO should not rely on exception handling
            return true;
        }
        try {
            rewrite(readMap.root, set);
            return true;
        } catch (IllegalStateException e) {
            // TODO should not rely on exception handling
            if (DataUtils.getErrorCode(e.getMessage()) == DataUtils.ERROR_CHUNK_NOT_FOUND) {
                // ignore
                return false;
            }
            throw e;
        }
    }",Re-write any pages that belong to one of the chunks in the given set.,0,204
5987,"public static int countMatches(String str, String sub) {
        if (sub.equals("""")) {
            return 0;
        }
        if (str == null) {
            return 0;
        }
        int count = 0;
        int idx = 0;
        while ((idx = str.indexOf(sub, idx)) != -1) {
            count++;
            idx += sub.length();
        }
        return count;
    }",How many times is the substring in the larger String. null returns 0.,0,147
7147,"private long write(long offset, ByteBuffer inputBuf) throws IOException {
    int inputBufLength = inputBuf.limit();
    ByteBuffer outputBuf =
        mLocalFileChannel.map(FileChannel.MapMode.READ_WRITE, offset, inputBufLength);
    outputBuf.put(inputBuf);
    CommonUtils.cleanDirectBuffer(outputBuf);
    return outputBuf.limit();
  }",Writes data to the block from an input ByteBuffer.,0,93
5956,"private List<AppliedMigration> findAppliedMigrations(MigrationType... migrationTypes) {
        if (!table.exists()) {
            return new ArrayList<AppliedMigration>();
        }

        createIfNotExists();

        int minInstalledRank = cache.isEmpty() ? -1 : cache.getLast().getInstalledRank();

        String query = ""SELECT "" + dbSupport.quote(""installed_rank"")
                + "","" + dbSupport.quote(""version"")
                + "","" + dbSupport.quote(""description"")
                + "","" + dbSupport.quote(""type"")
                + "","" + dbSupport.quote(""script"")
                + "","" + dbSupport.quote(""checksum"")
                + "","" + dbSupport.quote(""installed_on"")
                + "","" + dbSupport.quote(""installed_by"")
                + "","" + dbSupport.quote(""execution_time"")
                + "","" + dbSupport.quote(""success"")
                + "" FROM "" + table
                + "" WHERE "" + dbSupport.quote(""installed_rank"") + "" > "" + minInstalledRank;

        if (migrationTypes.length > 0) {
            query += "" AND "" + dbSupport.quote(""type"") + "" IN ("";
            for (int i = 0; i < migrationTypes.length; i++) {
                if (i > 0) {
                    query += "","";
                }
                query += ""'"" + migrationTypes[i] + ""'"";
            }
            query += "")"";
        }

        query += "" ORDER BY "" + dbSupport.quote(""installed_rank"");

        try {
            cache.addAll(jdbcTemplate.query(query, new RowMapper<AppliedMigration>() {
                public AppliedMigration mapRow(final ResultSet rs) throws SQLException {
                    Integer checksum = rs.getInt(""checksum"");
                    if (rs.wasNull()) {
                        checksum = null;
                    }

                    return new AppliedMigration(
                            rs.getInt(""installed_rank""),
                            rs.getString(""version"") != null ? MigrationVersion.fromVersion(rs.getString(""version"")) : null,
                            rs.getString(""description""),
                            MigrationType.valueOf(rs.getString(""type"")),
                            rs.getString(""script""),
                            checksum,
                            rs.getTimestamp(""installed_on""),
                            rs.getString(""installed_by""),
                            rs.getInt(""execution_time""),
                            rs.getBoolean(""success"")
                    );
                }
            }));
            return cache;
        } catch (SQLException e) {
            throw new FlywayException(""Error while retrieving the list of applied migrations from metadata table ""
                    + table, e);
        }
    }",Retrieve the applied migrations from the metadata table.,0,767
7532,"public boolean isValid() {
        if (grantType==null) {
            return false;
        }
        switch (grantType) {
            case CLIENT_CREDENTIALS:
                return !hasAnyNullValues(
                    Arrays.asList(
                        tokenEndpoint,
                        clientId,
                        clientSecret
                    )
                );
            case PASSWORD:
                return !hasAnyNullValues(
                    Arrays.asList(
                        tokenEndpoint,
                        clientId,
                        clientSecret,
                        username,
                        password
                    )
                );
            case PASSWORD_WITH_PASSCODE:
                return !hasAnyNullValues(
                    Arrays.asList(
                        tokenEndpoint,
                        clientId,
                        clientSecret,
                        username,
                        passcode
                    )
                );
            case AUTHORIZATION_CODE:
                return !hasAnyNullValues(
                    Arrays.asList(
                        tokenEndpoint,
                        authorizationEndpoint,
                        clientId,
                        clientSecret,
                        username,
                        password,
                        redirectUri,
                        state
                    )
                );
            case AUTHORIZATION_CODE_WITH_TOKEN:
                return !hasAnyNullValues(
                    Arrays.asList(
                        tokenEndpoint,
                        authorizationEndpoint,
                        clientId,
                        clientSecret,
                        redirectUri,
                        authCodeAPIToken,
                        state
                    )
                );
            case FETCH_TOKEN_FROM_CODE:
                return !hasAnyNullValues(
                    Arrays.asList(
                        tokenEndpoint,
                        clientId,
                        clientSecret,
                        redirectUri,
                        authorizationCode
                    )
                );
            case SAML2_BEARER:
                return !hasAnyNullValues(
                        Arrays.asList(
                            tokenEndpoint,
                            clientId,
                            clientSecret,
                            authCodeAPIToken
                        )
                    );
            default: return false;
        }
    }",Returns true if this object contains enough information to retrieve a token,0,378
6921,"public MethodCall on(Object target) {
            return on(target, (Class) target.getClass());
        }",Invokes the specified method on the given instance.,0,36
5566,"public Response post(URI uri, Map<String, String> formData) {
        // convert the form data
        final MultivaluedHashMap<String, String> entity = new MultivaluedHashMap();
        for (String key : formData.keySet()) {
            entity.add(key, formData.get(key));
        }

        // get the resource
        Invocation.Builder builder = client.target(uri).request().accept(MediaType.APPLICATION_JSON);

        // get the resource
        return builder.post(Entity.form(entity));
    }",Performs a POST using the specified url and form data.,0,143
5467,"public List<ModelProblem> getProblems()
    {
        if ( result == null )
        {
            return Collections.emptyList();
        }
        return result.getProblems();
    }",Gets the problems that caused this exception.,0,57
7098,"public static String getDate() {
    return Version.date;
  }",The date that hbase was compiled.,0,23
7895,"public Mono<BigDecimal> fakeOuterNumberSerialize(BigDecimal body) throws RestClientException {
        Object postBody = body;
        
        String path = UriComponentsBuilder.fromPath(""/fake/outer/number"").build().toUriString();

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] accepts = { 
            ""*/*""
        };
        final List<MediaType> accept = apiClient.selectHeaderAccept(accepts);
        final String[] contentTypes = { };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<BigDecimal> returnType = new ParameterizedTypeReference<BigDecimal>() {};
        return apiClient.invokeAPI(path, HttpMethod.POST, queryParams, postBody, headerParams, cookieParams, formParams, accept, contentType, authNames, returnType);
    }",Test serialization of outer number types 200 - Output number,0,326
6435,"private boolean isCarbonSupported()
    {
        try
        {
            return CarbonManager.getInstanceFor(jabberProvider.getConnection())
                .isSupportedByServer();
        }
        catch (XMPPException
            | InterruptedException
            | NoResponseException
            | NotConnectedException e)
        {
           logger.warn(""Failed to retrieve carbon support"", e);
        }

        return false;
    }",Checks whether the carbon is supported by the server or not.,0,95
6165,"public boolean uninstallAccount(AccountID accountID)
    {
        // Unregister the protocol provider.
        ServiceReference serRef = getProviderForAccount(accountID);

        // If the protocol provider service is registered, first unregister the
        // service.
        if (serRef != null)
        {
            BundleContext bundleContext = getBundleContext();
            ProtocolProviderService protocolProvider =
                (ProtocolProviderService) bundleContext.getService(serRef);

            try
            {
                protocolProvider.unregister();
            }
            catch (OperationFailedException ex)
            {
                logger
                    .error(""Failed to unregister protocol provider for account : ""
                        + accountID + "" caused by: "" + ex);
            }

            ServiceRegistration registration;

            synchronized (registeredAccounts)
            {
                registration = registeredAccounts.remove(accountID);
            }

            if (registration != null)
            {
                // Kill the service.
                registration.unregister();
            }
        }

        return removeStoredAccount(accountID);
    }",Removes the specified account from the list of accounts that this provider factory is handling.,0,225
6508,"Query makeEquals(Rectangle bbox) {

    // docMinX = queryExtent.getMinX() AND docMinY = queryExtent.getMinY() AND docMaxX = queryExtent.getMaxX() AND docMaxY = queryExtent.getMaxY()
    Query qMinX = makeNumberTermQuery(field_minX, bbox.getMinX());
    Query qMinY = makeNumberTermQuery(field_minY, bbox.getMinY());
    Query qMaxX = makeNumberTermQuery(field_maxX, bbox.getMaxX());
    Query qMaxY = makeNumberTermQuery(field_maxY, bbox.getMaxY());
    return makeQuery(BooleanClause.Occur.MUST, qMinX, qMinY, qMaxX, qMaxY);
  }",Constructs a query to retrieve documents that equal the input envelope.,0,123
6926,"public int read(char[] cbuf, int off, int len) {
      int toRead = Math.min(len, buf.remaining());
      if (toRead > 0){
        buf.get(cbuf, off, toRead);
        return toRead;
      } else {
        return -1;
      }
    }",Reads characters into a portion of an array.,0,100
7485,"public static byte not(byte first) {
        return MOCKING_PROGRESS.getArgumentMatcherStorage().reportNot().returnZero();
    }",byte argument that does not match the given argument matcher.,0,36
5448,"public LIRInstruction instructionForId(int opId) {
        assert isEven(opId) : ""opId not even"";
        LIRInstruction instr = opIdToInstructionMap[opIdToIndex(opId)];
        assert instr.id() == opId;
        return instr;
    }",Retrieves the  LIRInstruction based on its plain LIRInstruction#id id.,0,68
7845,"public boolean addFile(File sourceFile) {
    String filename = sourceFile.getName();
    File destFile = null;
    String codeExtension = null;
    boolean replacement = false;

    // if the file appears to be code related, drop it
    // into the code folder, instead of the data folder
    if (filename.toLowerCase().endsWith("".class"") ||
        filename.toLowerCase().endsWith("".jar"") ||
        filename.toLowerCase().endsWith("".dll"") ||
        filename.toLowerCase().endsWith("".jnilib"") ||
        filename.toLowerCase().endsWith("".so"")) {

      //if (!codeFolder.exists()) codeFolder.mkdirs();
      prepareCodeFolder();
      destFile = new File(codeFolder, filename);

    } else {
      for (String extension : mode.getExtensions()) {
        String lower = filename.toLowerCase();
        if (lower.endsWith(""."" + extension)) {
          destFile = new File(this.folder, filename);
          codeExtension = extension;
        }
      }
      if (codeExtension == null) {
        prepareDataFolder();
        destFile = new File(dataFolder, filename);
      }
    }

    // check whether this file already exists
    if (destFile.exists()) {
      Object[] options = { Language.text(""prompt.ok""), Language.text(""prompt.cancel"") };
      String prompt = Language.interpolate(""add_file.messages.confirm_replace"", 
                                           filename);
      int result = JOptionPane.showOptionDialog(editor,
                                                prompt,
                                                ""Replace"",
                                                JOptionPane.YES_NO_OPTION,
                                                JOptionPane.QUESTION_MESSAGE,
                                                null,
                                                options,
                                                options[0]);
      if (result == JOptionPane.YES_OPTION) {
        replacement = true;
      } else {
        return false;
      }
    }

    // If it's a replacement, delete the old file first,
    // otherwise case changes will not be preserved.
    // http://dev.processing.org/bugs/show_bug.cgi?id=969
    if (replacement) {
      boolean muchSuccess = destFile.delete();
      if (!muchSuccess) {
        Base.showWarning(Language.text(""add_file.messages.error_adding""),
                         Language.interpolate(""add_file.messages.cannot_delete.description"",
                          filename),
                         null);
        return false;
      }
    }

    // make sure they aren't the same file
    if ((codeExtension == null) && sourceFile.equals(destFile)) {
      Base.showWarning(Language.text(""add_file.messages.same_file""),
                       Language.text(""add_file.messages.same_file.description""),
                       null);
      return false;
    }

    // Handles ""Add File"" when a .pde is used. For beta 1, this no longer runs
    // on a separate thread because it's totally unnecessary (a .pde file is
    // not going to be so large that it's ever required) and otherwise we have
    // to introduce a threading block here.
    // https://github.com/processing/processing/issues/3383
    if (!sourceFile.equals(destFile)) {
      try {
        Base.copyFile(sourceFile, destFile);

      } catch (IOException e) {
        Base.showWarning(Language.text(""add_file.messages.error_adding""),
                         Language.interpolate(""add_file.messages.cannot_add.description"",
                          filename),
                         e);
        return false;
      }
    }

    if (codeExtension != null) {
      SketchCode newCode = new SketchCode(destFile, codeExtension);

      if (replacement) {
        replaceCode(newCode);

      } else {
        insertCode(newCode);
        sortCode();
      }
      setCurrentCode(filename);
      editor.header.repaint();
      if (isUntitled()) {  // TODO probably not necessary? problematic?
        // Mark the new code as modified so that the sketch is saved
        current.setModified(true);
      }

    } else {
      if (isUntitled()) {  // TODO probably not necessary? problematic?
        // If a file has been added, mark the main code as modified so
        // that the sketch is properly saved.
        code[0].setModified(true);
      }
    }
    return true;
  }",Add a file to the sketch.,0,922
5748,"public WindowedDataStream<OUT> groupBy(String... fields) {
		return groupBy(new Keys.ExpressionKeys<OUT>(fields, getType()));
	}",Groups the elements of the  WindowedDataStream by the given field expressions.,0,46
6195,"static RoundingInfo[] buildRoundings(ZoneId timeZone, String minimumInterval) {

        int indexToSliceFrom = 0;

        RoundingInfo[] roundings = new RoundingInfo[6];
        roundings[0] = new RoundingInfo(Rounding.DateTimeUnit.SECOND_OF_MINUTE,
            timeZone, 1000L, ""s"",1, 5, 10, 30);
        roundings[1] = new RoundingInfo(Rounding.DateTimeUnit.MINUTES_OF_HOUR, timeZone,
            60 * 1000L, ""m"", 1, 5, 10, 30);
        roundings[2] = new RoundingInfo(Rounding.DateTimeUnit.HOUR_OF_DAY, timeZone,
            60 * 60 * 1000L, ""h"", 1, 3, 12);
        roundings[3] = new RoundingInfo(Rounding.DateTimeUnit.DAY_OF_MONTH, timeZone,
            24 * 60 * 60 * 1000L, ""d"", 1, 7);
        roundings[4] = new RoundingInfo(Rounding.DateTimeUnit.MONTH_OF_YEAR, timeZone,
            30 * 24 * 60 * 60 * 1000L, ""M"", 1, 3);
        roundings[5] = new RoundingInfo(Rounding.DateTimeUnit.YEAR_OF_CENTURY, timeZone,
            365 * 24 * 60 * 60 * 1000L, ""y"", 1, 5, 10, 20, 50, 100);

        for (int i = 0; i < roundings.length; i++) {
            RoundingInfo roundingInfo = roundings[i];
            if (roundingInfo.getDateTimeUnit().equals(minimumInterval)) {
                indexToSliceFrom = i;
                break;
            }
        }
        return Arrays.copyOfRange(roundings, indexToSliceFrom, roundings.length);
    }","Build roundings, computed dynamically as roundings are time zone dependent.",0,460
5538,"public ECPair transform(ECPair cipherText)
    {
        if (key == null)
        {
            throw new IllegalStateException(""ECFixedTransform not initialised"");
        }

        ECPoint  g = key.getParameters().getG();
        ECPoint  gamma = g.multiply(k);
        ECPoint  phi = key.getQ().multiply(k).add(cipherText.getY());

        return new ECPair(cipherText.getX().add(gamma).normalize(), phi.normalize());
    }",Transform an existing cipher test pair using the ElGamal algorithm.,0,142
6268,"public static int encodeLength(int len) {
        if (len <= 32) {
            return 0;
        }
        int code = Integer.numberOfLeadingZeros(len);
        int remaining = len << (code + 1);
        code += code;
        if ((remaining & (1 << 31)) != 0) {
            code--;
        }
        if ((remaining << 1) != 0) {
            code--;
        }
        code = Math.min(31, 52 - code);
        // alternative code (slower):
        // int x = len;
        // int shift = 0;
        // while (x > 3) {
        //    shift++;
        //    x = (x >>> 1) + (x & 1);
        // }
        // shift = Math.max(0,  shift - 4);
        // int code = (shift << 1) + (x & 1);
        // code = Math.min(31, code);
        return code;
    }",Convert the length to a length code 0..31.,0,208
6375,"private UnderFileStatus[] getChildrenInUFS(AlluxioURI alluxioUri)
      throws InvalidPathException, IOException {
    MountTable.Resolution resolution = mMountTable.resolve(alluxioUri);
    AlluxioURI ufsUri = resolution.getUri();
    UnderFileSystem ufs = resolution.getUfs();

    AlluxioURI curUri = ufsUri;
    while (curUri != null) {
      if (mListedDirectories.containsKey(curUri.toString())) {
        List<UnderFileStatus> childrenList = new LinkedList<>();
        for (UnderFileStatus child : mListedDirectories.get(curUri.toString())) {
          String childPath = PathUtils.concatPath(curUri, child.getName());
          String prefix = PathUtils.normalizePath(ufsUri.toString(), AlluxioURI.SEPARATOR);
          if (childPath.startsWith(prefix) && childPath.length() > prefix.length()) {
            childrenList.add(new UnderFileStatus(childPath.substring(prefix.length()),
                child.isDirectory()));
          }
        }
        return trimIndirect(childrenList.toArray(new UnderFileStatus[childrenList.size()]));
      }
      curUri = curUri.getParent();
    }
    UnderFileStatus[] children =
        ufs.listStatus(ufsUri.toString(), ListOptions.defaults().setRecursive(true));
    // Assumption: multiple mounted UFSs cannot have the same ufsUri
    if (children != null) {
      mListedDirectories.put(ufsUri.toString(), children);
    }
    return trimIndirect(children);
  }",Get the children in under storage for given alluxio path.,0,391
7894,"public Actions sendKeys(CharSequence... keys) {
    if (isBuildingActions()) {
      action.addAction(new SendKeysAction(jsonKeyboard, jsonMouse, null, keys));
      return this;
    }

    for (CharSequence key : keys) {
      key.codePoints().forEach(codePoint -> {
        tick(defaultKeyboard.createKeyDown(codePoint));
        tick(defaultKeyboard.createKeyUp(codePoint));
      });
    }

    return this;
  }",Sends keys to the active element.,0,133
5838,"public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing) {
        Object object = getFieldValue(path, Object.class, ignoreMissing);
        if (object == null) {
            return null;
        } else if (object instanceof byte[]) {
            return (byte[]) object;
        } else if (object instanceof String) {
            return Base64.getDecoder().decode(object.toString());
        } else {
            throw new IllegalArgumentException(""Content field ["" + path + ""] of unknown type ["" + object.getClass().getName() +
                ""], must be string or byte array"");
        }
    }",Returns the value contained in the document for the provided path as a byte array.,0,183
6273,"public String format(final ZonedDateTime dt) {
        return format(DateTimeUtils.dateOf(dt));
    }",Format the datetime given.,0,32
5852,"private Node getSwitchParent(Node parentNode, Node lastNode) {
        int allChildren = parentNode.jjtGetNumChildren();
        Node result = parentNode;
        ASTSwitchLabel label = null;
        for (int ix = 0; ix < allChildren; ix++) {
            Node n = result.jjtGetChild(ix);
            if (n instanceof ASTSwitchLabel) {
                label = (ASTSwitchLabel) n;
            } else if (n.equals(lastNode)) {
                result = label;
                break;
            }
        }
        return result;
    }",Determine which SwitchLabel we belong to inside a switch,0,164
7345,"public FileInfo generateClientFileInfo(String path) {
    FileInfo ret = new FileInfo();

    ret.fileId = getId();
    ret.name = getName();
    ret.path = path;
    ret.ufsPath = """";
    ret.length = 0;
    ret.blockSizeByte = 0;
    ret.creationTimeMs = getCreationTimeMs();
    ret.isComplete = true;
    ret.isFolder = true;
    ret.isPinned = isPinned();
    ret.isCache = false;
    ret.blockIds = null;
    ret.dependencyId = -1;
    ret.lastModificationTimeMs = getLastModificationTimeMs();

    return ret;
  }",Generates client file info for the folder.,0,190
7911,"public static Schema unaliasSchema(OpenAPI openAPI, Schema schema) {
        Map<String, Schema> allSchemas = getSchemas(openAPI);
        if (allSchemas == null || allSchemas.isEmpty()) {
            // skip the warning as the spec can have no model defined
            //LOGGER.warn(""allSchemas cannot be null/empty in unaliasSchema. Returned 'schema'"");
            return schema;
        }

        if (schema != null && StringUtils.isNotEmpty(schema.get$ref())) {
            Schema ref = allSchemas.get(ModelUtils.getSimpleRef(schema.get$ref()));
            if (ref == null) {
                LOGGER.warn(""{} is not defined"", schema.get$ref());
                return schema;
            } else if (ref.getEnum() != null && !ref.getEnum().isEmpty()) {
                // top-level enum class
                return schema;
            } else if (isArraySchema(ref)) {
                if (generateAliasAsModel) {
                    return schema; // generate a model extending array
                } else {
                    return unaliasSchema(openAPI, allSchemas.get(ModelUtils.getSimpleRef(schema.get$ref())));
                }
            } else if (isComposedSchema(ref)) {
                return schema;
            } else if (isMapSchema(ref)) {
                if (ref.getProperties() != null && !ref.getProperties().isEmpty()) // has at least one property
                    return schema; // treat it as model
                else {
                    if (generateAliasAsModel) {
                        return schema; // generate a model extending map
                    } else {
                        // treat it as a typical map
                        return unaliasSchema(openAPI, allSchemas.get(ModelUtils.getSimpleRef(schema.get$ref())));
                    }
                }
            } else if (isObjectSchema(ref)) { // model
                if (ref.getProperties() != null && !ref.getProperties().isEmpty()) { // has at least one property
                    return schema;
                } else { // free form object (type: object)
                    return unaliasSchema(openAPI, allSchemas.get(ModelUtils.getSimpleRef(schema.get$ref())));
                }
            } else {
                return unaliasSchema(openAPI, allSchemas.get(ModelUtils.getSimpleRef(schema.get$ref())));
            }
        }
        return schema;
    }",Get the actual schema from aliases.,0,568
6808,"public Collection findByKeyword(MetaContact contact, String keyword)
        throws RuntimeException
    {
        return findByKeyword(contact, keyword, false);
    }",Returns all the messages exchanged by all the contacts in the supplied metacontact having the given keyword,0,42
5943,"private static EJBClientContext setupEJBClientContextSelector() throws IOException {
        // setup the selector
        final String clientPropertiesFile = ""jboss-ejb-client.properties"";
        final InputStream inputStream = EJBClientReconnectionTestCase.class.getResourceAsStream(clientPropertiesFile);
        if (inputStream == null) {
            throw new IllegalStateException(""Could not find "" + clientPropertiesFile + "" in classpath"");
        }
        final Properties properties = new Properties();
        properties.load(inputStream);
        // TODO Elytron: Once support for legacy EJB properties has been added back, actually set the EJB properties
        // that should be used for this test using properties
        return null;
    }",Sets up the EJB client context to use a selector which processes and sets up EJB receivers based on this testcase specific jboss-ejb-client.properties file,0,132
7681,"public ApiResponse uploadFile (Long petId, String additionalMetadata, File file) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'petId' is set
    if (petId == null) {
      VolleyError error = new VolleyError(""Missing the required parameter 'petId' when calling uploadFile"",
        new ApiException(400, ""Missing the required parameter 'petId' when calling uploadFile""));
    }

    // create path and map variables
    String path = ""/pet/{petId}/uploadImage"".replaceAll(""\\{"" + ""petId"" + ""\\}"", apiInvoker.escapeString(petId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      ""multipart/form-data""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : ""application/json"";

    if (contentType.startsWith(""multipart/form-data"")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (additionalMetadata != null) {
        localVarBuilder.addTextBody(""additionalMetadata"", ApiInvoker.parameterToString(additionalMetadata), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (file != null) {
        localVarBuilder.addBinaryBody(""file"", file);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put(""additionalMetadata"", ApiInvoker.parameterToString(additionalMetadata));
    }

    String[] authNames = new String[] { ""petstore_auth"" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, ""POST"", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ApiResponse) ApiInvoker.deserialize(localVarResponse, """", ApiResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }",uploads an image,0,725
6134,"public Instant getTimestamp() {
		return raw != null && raw.getClusterTime() != null ? Instant.ofEpochMilli(raw.getClusterTime().getValue()) : null;
	}",Get the  ChangeStreamDocument#getClusterTime() cluster time as  Instant the event was emitted at.,0,59
5711,"static Link of(String uri) {
        return new DefaultLink(URI.create(uri));
    }",Create a link from the given URI.,0,32
6350,"public static TreeSet<Integer> ofAll(int[] array) {
        Objects.requireNonNull(array, ""array is null"");
        return TreeSet.ofAll(Iterator.ofAll(array));
    }",Creates a TreeSet based on the elements of an int array.,0,53
6532,"public static String join(List<String> list, String separator)
    {
        StringBuilder result = new StringBuilder();
        for (String entry : list)
        {
            if (result.length() > 0)
            {
                result.append(separator);
            }

            result.append(entry);
        }

        return result.toString();
    }",Joins each element present in a list with a separator,0,111
7159,"public InputStream execute(List<String> args, InputStream stdin) throws IOException {
        file = exeFile.extract();
        List<String> allArgs = new ArrayList<>();
        allArgs.add(file.getAbsolutePath());
        allArgs.addAll(args);

        ProcessBuilder processBuilder = new ProcessBuilder().command(allArgs);
        stderrFile = File.createTempFile(""stderr-"", "".log"");
        stderrFile.deleteOnExit();
        processBuilder.redirectError(stderrFile);
        process = processBuilder.start();
        if (stdin != null) {
            OutputStream processStdin = process.getOutputStream();
            copy(stdin, processStdin);
            processStdin.flush();
            processStdin.close();
        }
        return process.getInputStream();
    }",Executes the executable.,0,217
7631,"public static CodegenConfig forName(String name) {
        ServiceLoader<CodegenConfig> loader = load(CodegenConfig.class);

        StringBuilder availableConfigs = new StringBuilder();

        for (CodegenConfig config : loader) {
            if (config.getName().equals(name)) {
                return config;
            }

            availableConfigs.append(config.getName()).append(""\n"");
        }

        // else try to load directly
        try {
            return (CodegenConfig) Class.forName(name).getDeclaredConstructor().newInstance();
        } catch (Exception e) {
            throw new GeneratorNotFoundException(""Can't load config class with name '"".concat(name) + ""'\nAvailable:\n"" + availableConfigs.toString(), e);
        }
    }","Tries to load config class with SPI first, then with class name directly from classpath",0,206
5555,"public ExecutionVertex getInputVertex(int stage, int index) {

		if (stage >= this.stages.size()) {
			return null;
		}

		return this.stages.get(stage).getInputExecutionVertex(index);
	}",Returns the input vertex with the specified index for the given stage,0,70
5855,"public static AuthCredentials createApplicationDefaults() throws IOException {
    return new ApplicationDefaultAuthCredentials();
  }",Returns the Application Default Credentials.,0,29
6353,"public DataFrame sortedBy(String... seriesNames) {
    return this.sortedBy(Arrays.asList(seriesNames));
  }",Returns a copy of the DataFrame sorted by series values referenced by  seriesNames.,0,35
7197,"private static long extractLValue(final short qualifier, final KeyValue kv) {
    final byte[] value = kv.value();
    if ((qualifier & Const.FLAG_FLOAT) != 0) {
      if ((qualifier & 0x3) != 0x3) {
        throw new AssertionError(""Float value qualifier size != 4: "" + kv);
      } else if (value.length != 8) {
        throw new AssertionError(""Float value not on 8 bytes: "" + kv);
      } else if (value[0] != 0 || value[1] != 0
                 || value[2] != 0 || value[3] != 0) {
        throw new AssertionError(""Float value with nonzero byte MSBs: "" + kv);
      }
      return Bytes.getInt(value, 4);
    } else {
      if ((qualifier & 0x7) != 0x7) {
        throw new AssertionError(""Integer value qualifier size != 4: "" + kv);
      } else if (value.length != 8) {
        throw new AssertionError(""Integer value not on 8 bytes: "" + kv);
      }
      return Bytes.getLong(value);
    }
  }",Extracts the value of a cell containing a data point.,0,334
6355,"private RequestCache getRequestCache(H http) {
        RequestCache result = http.getSharedObject(RequestCache.class);
        if(result != null) {
            return result;
        }
        HttpSessionRequestCache defaultCache = new HttpSessionRequestCache();
        defaultCache.setRequestMatcher(new AntPathRequestMatcher(""/**"", ""GET""));
        return defaultCache;
    }",Gets the  RequestCache to use.,0,96
7595,"public static long gt(long value) {
        reportMatcher(new GreaterThan<Long>(value));
        return 0;
    }",long argument greater than the given value.,0,39
5688,"public DataStream<T> partitionByHash(int... fields) {
		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {
			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()));
		} else {
			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()));
		}
	}",Sets the partitioning of the  DataStream so that the output is partitioned hashing on the given fields.,0,101
5800,"public PubSubSource<OUT> build() throws IOException {
			if (credentials == null) {
				credentials = defaultCredentialsProviderBuilder().build().getCredentials();
			}

			if (pubSubSubscriberFactory == null) {
				pubSubSubscriberFactory = new DefaultPubSubSubscriberFactory(ProjectSubscriptionName.format(projectName, subscriptionName),
																			3,
																			Duration.ofSeconds(15),
																			100);
			}

			return new PubSubSource<>(deserializationSchema, pubSubSubscriberFactory, credentials, new AcknowledgeOnCheckpointFactory(), new GuavaFlinkConnectorRateLimiter(), messagePerSecondRateLimit);
		}",Actually build the desired instance of the PubSubSourceBuilder.,0,148
6336,"public Boolean deletePhysicalPlan(String topologyName) {
    return awaitResult(delegate.deletePhysicalPlan(topologyName));
  }",Delete the physical plan for the given topology,0,30
6678,"public boolean apply(File pathname) {
        return !filesToRemove.contains(pathname.getAbsoluteFile());
      }","Given a list of paths of available drawables, and a target screen density, returns a  com.google.common.base.Predicate that fails for drawables of a different density, whenever they can be safely removed.",0,32
7477,"protected String sendQuery(String query) throws IhcExecption {
		try {
			return sendQ(query);
		} catch (NoHttpResponseException e) {
			try {
				logger.debug(""No response received, resend query"");
				return sendQ(query);
			} catch (IOException ee) {
				throw new IhcExecption(ee);
			}
		} catch (IOException e) {
			throw new IhcExecption(e);
		} 
	}",Send HTTP request and wait response from the server.,0,127
6737,"private boolean retryForException(Throwable ex) {
		return !fatalClassifier.classify(ex) && retryableClassifier.classify(ex);
	}",Delegates to an exception classifier.,0,38
7190,"public Optional<TestIdentifier> getParent(TestIdentifier child) {
		Preconditions.notNull(child, ""child must not be null"");
		return child.getParentId().map(this::getTestIdentifier);
	}",Get the parent of the supplied  TestIdentifier.,0,51
7832,"protected Object convertBoolean(Column column, Field fieldDefn, Object data) {
        if (data == null) {
            data = fieldDefn.schema().defaultValue();
        }
        if (data == null) {
            if (column.isOptional()) return null;
            return false;
        }
        if (data instanceof Boolean) return data;
        if (data instanceof Short) return ((Short) data).intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;
        if (data instanceof Integer) return ((Integer) data).intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;
        if (data instanceof Long) return ((Long) data).intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;
        return handleUnknownData(column, fieldDefn, data);
    }",Converts a value object for an expected JDBC type of  Types#BOOLEAN.,0,258
6647,"public int calculateMaximumMessageSize(final Contact contact)
    {
        return calculateMaximumMessageSize(SAFETY_NET, contact.getAddress());
    }",Calculate maximum message size that can be transmitted.,0,35
6900,"public Collection<Node> getSubCells(Shape shapeFilter) {
    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.
    if (shapeFilter instanceof Point) {
      Node subCell = getSubCell((Point) shapeFilter);
      subCell.shapeRel = SpatialRelation.CONTAINS;
      return Collections.singletonList(subCell);
    }
    Collection<Node> cells = getSubCells();

    if (shapeFilter == null) {
      return cells;
    }

    //TODO change API to return a filtering iterator
    List<Node> copy = new ArrayList<Node>(cells.size());
    for (Node cell : cells) {
      SpatialRelation rel = cell.getShape().relate(shapeFilter);
      if (rel == SpatialRelation.DISJOINT)
        continue;
      cell.shapeRel = rel;
      if (rel == SpatialRelation.WITHIN)
        cell.setLeaf();
      copy.add(cell);
    }
    return copy;
  }",Like  #getSubCells() but with the results filtered by a shape.,0,248
7618,"public DecoderResult decode(boolean[][] image) throws ReaderException {
    int dimension = image.length;
    BitMatrix bits = new BitMatrix(dimension);
    for (int i = 0; i < dimension; i++) {
      for (int j = 0; j < dimension; j++) {
        if (image[i][j]) {
          bits.set(i, j);
        }
      }
    }
    return decode(bits);
  }",Convenience method that can decode a QR Code represented as a 2D array of booleans.,0,150
7902,"public Boolean fakeOuterBooleanSerialize(Boolean body) throws ApiException {
    Object localVarPostBody = body;
    
    // create path and map variables
    String localVarPath = ""/fake/outer/boolean"";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<Boolean> localVarReturnType = new GenericType<Boolean>() {};
    return apiClient.invokeAPI(localVarPath, ""POST"", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }",Test serialization of outer boolean types,0,310
5823,"protected AsyncTaskExecutor determineAsyncExecutor(Method method) {
		AsyncTaskExecutor executor = this.executors.get(method);
		if (executor == null) {
			Executor executorToUse = this.defaultExecutor;
			String qualifier = getExecutorQualifier(method);
			if (StringUtils.hasLength(qualifier)) {
				Assert.notNull(this.beanFactory, ""BeanFactory must be set on "" + getClass().getSimpleName() +
						"" to access qualified executor '"" + qualifier + ""'"");
				executorToUse = BeanFactoryAnnotationUtils.qualifiedBeanOfType(
						this.beanFactory, Executor.class, qualifier);
			}
			else if (executorToUse == null) {
				throw new IllegalStateException(""No executor qualifier specified and no default executor set on "" +
						getClass().getSimpleName() + "" either"");
			}
			executor = (executorToUse instanceof AsyncTaskExecutor ?
					(AsyncTaskExecutor) executorToUse : new TaskExecutorAdapter(executorToUse));
			this.executors.put(method, executor);
		}
		return executor;
	}",Determine the specific executor to use when executing the given method.,0,261
7658,"public Mono<Client> testClientModel(Client body) throws RestClientException {
        Object postBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, ""Missing the required parameter 'body' when calling testClientModel"");
        }
        
        String path = UriComponentsBuilder.fromPath(""/fake"").build().toUriString();

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] accepts = { 
            ""application/json""
        };
        final List<MediaType> accept = apiClient.selectHeaderAccept(accepts);
        final String[] contentTypes = { 
            ""application/json""
        };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<Client> returnType = new ParameterizedTypeReference<Client>() {};
        return apiClient.invokeAPI(path, HttpMethod.PATCH, queryParams, postBody, headerParams, cookieParams, formParams, accept, contentType, authNames, returnType);
    }",To test \&quot;client\&quot; model,0,373
6514,"public AndroidResourcesProvider toProvider(Label label) {
    if (neverlink) {
      return ResourceDependencies.empty().toProvider(label);
    }
    return AndroidResourcesProvider.create(label, transitiveResources, directResources);
  }",Create a new AndroidResourcesProvider from the dependencies of this library.,0,60
7635,"public Field withDefault(boolean defaultValue) {
        return new Field(name(), displayName(), type(), width, description(), importance(), dependents,
                () -> Boolean.valueOf(defaultValue), validator, recommender);
    }",Create and return a new Field instance that is a copy of this field but with the given default value.,0,76
5837,"protected MockEndpoint getMockEndpoint(String uri, boolean create) throws NoSuchEndpointException {
        // look for existing mock endpoints that has the same queue name, and to do that we need to
        // normalize uri and strip out query parameters and whatnot
        String n;
        try {
            n = URISupport.normalizeUri(uri);
        } catch (Exception e) {
            throw RuntimeCamelException.wrapRuntimeException(e);
        }
        // strip query
        int idx = n.indexOf('?');
        if (idx != -1) {
            n = n.substring(0, idx);
        }
        final String target = n;

        // lookup endpoints in registry and try to find it
        MockEndpoint found = (MockEndpoint) context.getEndpointRegistry().values().stream()
                .filter(e -> e instanceof MockEndpoint)
                .filter(e -> {
                    String t = e.getEndpointUri();
                    // strip query
                    int idx2 = t.indexOf('?');
                    if (idx2 != -1) {
                        t = t.substring(0, idx2);
                    }
                    return t.startsWith(target);
                }).findFirst().orElse(null);

        if (found != null) {
            return found;
        }

        if (create) {
            return resolveMandatoryEndpoint(uri, MockEndpoint.class);
        } else {
            throw new NoSuchEndpointException(String.format(""MockEndpoint %s does not exist."", uri));
        }
    }","Resolves the  MockEndpoint using a URI of the form mock:someName, optionally creating it if it does not exist.",0,372
5614,"public static String sliceFirst(String str, String separator) {
        if (str == null || separator == null || str.length() == 0) {
            return str;
        }
        if (separator.length() == 0) {
            return """";
        }
        int pos = str.indexOf(separator);
        if (pos == -1) {
            return str;
        }
        return str.substring(0, pos);
    }","Finds the first occurence of a separator String, returning everything before it.",0,151
5343,"public MemorySize convert(String value) {
        if (value.isEmpty()) {
            return null;
        }
        Matcher matcher = MEMORY_SIZE_PATTERN.matcher(value);
        if (matcher.find()) {
            BigInteger number = new BigInteger(matcher.group(1));
            String scale = matcher.group(2).toUpperCase();
            BigInteger multiplier = MEMORY_SIZE_MULTIPLIERS.get(scale);
            return multiplier == null ? new MemorySize(number) : new MemorySize(number.multiply(multiplier));
        }

        throw new IllegalArgumentException(
                String.format(""value %s not in correct format (regular expression): [0-9]+[BbKkMmGgTtPpEeZzYy]?"", value));
    }","Convert data size configuration value respecting the following format (shown in regular expression) ""[0-9]+[BbKkMmGgTtPpEeZzYy]?""",0,181
7505,"public boolean  trySetCount(VersionedValue<Integer> previous, int newCount) throws Exception
    {
        VersionedValue<byte[]> previousCopy = new VersionedValue<byte[]>(previous.getVersion(), toBytes(previous.getValue()));
        return sharedValue.trySetValue(previousCopy, toBytes(newCount));
    }",Changes the shared count only if its value has not changed since the version specified by newCount.,0,85
7584,"public PluginResult execute(String action, JSONArray args, String callbackId) {
        this.callback = callbackId;

        if (action.equals(""encode"")) {
            JSONObject obj = args.optJSONObject(0);
            if (obj != null) {
                String type = obj.optString(""type"");
                String data = obj.optString(""data"");
                
                // If the type is null then force the type to text
                if (type == null) {
                    type = TEXT_TYPE;
                }
                
                if (data == null) {
                    return new PluginResult(PluginResult.Status.ERROR, ""User did not specify data to encode"");                                            
                }
                
                encode(type, data);                    
            } else {
                return new PluginResult(PluginResult.Status.ERROR, ""User did not specify data to encode"");                    
            }
        }
        else if (action.equals(""scan"")) {
            scan();
        } else {
            return new PluginResult(PluginResult.Status.INVALID_ACTION);
        }
        PluginResult r = new PluginResult(PluginResult.Status.NO_RESULT);
        r.setKeepCallback(true);
        return r;
    }",Executes the request and returns PluginResult.,0,316
6668,"protected boolean sendPasswordResetEmailToAccount(final String to, final String url) {
        val reset = casProperties.getAuthn().getPm().getReset().getMail();
        val text = String.format(reset.getText(), url);
        return this.communicationsManager.email(reset, to, text);
    }",Send password reset email to account.,0,92
7303,"public int ls(TachyonURI path) throws IOException {
    TachyonFS tachyonClient = createFS(path);
    List<ClientFileInfo> files = tachyonClient.listStatus(path);
    Collections.sort(files);
    String format = ""%-10s%-25s%-15s%-5s%n"";
    for (ClientFileInfo file : files) {
      String inMemory = """";
      if (!file.isFolder) {
        if (100 == file.inMemoryPercentage) {
          inMemory = ""In Memory"";
        } else {
          inMemory = ""Not In Memory"";
        }
      }
      System.out.format(format, FormatUtils.getSizeFromBytes(file.getLength()),
          convertMsToDate(file.getCreationTimeMs()), inMemory, file.getPath());
    }
    return 0;
  }",Displays information for all directories and files directly under the path specified in argv.,0,212
7346,"public AsyncReadOperation<BsonDocument> asExplainableOperationAsync(final ExplainVerbosity explainVerbosity) {
        return new AggregateExplainOperation(getNamespace(), getPipeline())
                .retryReads(getRetryReads())
                .allowDiskUse(getAllowDiskUse())
                .maxTime(getMaxAwaitTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS)
                .hint(wrapped.getHint());
    }",Gets an operation whose execution explains this operation.,0,85
7479,"public static boolean isValid(final GithubEvent event) {
        if (event == null)
            return false;

        if (event.payload == null)
            return false;

        Gson gson = new Gson();
        final String json = gson.toJson(event.payload);

        final String type = event.type.toString();
        if (TextUtils.isEmpty(type))
            return false;

        return TYPE_COMMIT_COMMENT.equals(type) //
                || (TYPE_CREATE.equals(type) //
                && (gson.fromJson(json, CreatedEventPayload.class)).ref_type != null) //
                || TYPE_DELETE.equals(type) //
                || TYPE_DOWNLOAD.equals(type) //
                || TYPE_FOLLOW.equals(type) //
                || TYPE_FORK.equals(type) //
                || TYPE_FORK_APPLY.equals(type) //
                || (TYPE_GIST.equals(type)
                && (gson.fromJson(json, GistEventPayload.class)).gist != null)
                || TYPE_GOLLUM.equals(type) //
                || (TYPE_ISSUE_COMMENT.equals(type) //
                && (gson.fromJson(json, IssueCommentEventPayload.class)).issue != null) //
                || (TYPE_ISSUES.equals(type) //
                && (gson.fromJson(json, IssueEventPayload.class)).issue != null) //
                || TYPE_MEMBER.equals(type) //
                || TYPE_PUBLIC.equals(type) //
                || TYPE_PULL_REQUEST.equals(type) //
                || TYPE_PULL_REQUEST_REVIEW_COMMENT.equals(type) //
                || TYPE_PUSH.equals(type) //
                || TYPE_TEAM_ADD.equals(type) //
                || TYPE_WATCH.equals(type);
    }",Can the given event be rendered by this view holder?,0,475
5610,"public static int calcOptimalChunkSize(long totalSize, int numCols, long maxLineLength, int cores, int cloudsize, boolean oldHeuristic) {
    long localParseSize = (long) (double) totalSize / cloudsize;
    long chunkSize = (localParseSize / (cores * 4));

    if (oldHeuristic) {
      // Super small data check - less than 64K/thread
      if (chunkSize <= (1 << 16)) {
        return DFLT_CHUNK_SIZE;
      }
      // Small data check
      chunkSize = 1L << MathUtils.log2(chunkSize); //closest power of 2
      if (chunkSize < DFLT_CHUNK_SIZE
              && (localParseSize/chunkSize)*numCols < (1 << 21)) { // ignore if col cnt is high
        return (int)chunkSize;
      }
      // Big data check
      long tmp = (localParseSize * numCols / (1 << 21)); // ~ 2M keys per node
      if (tmp > (1 << 30)) return (1 << 30); // Max limit is 1G
      if (tmp > DFLT_CHUNK_SIZE) {
        chunkSize = 1 << MathUtils.log2((int) tmp); //closest power of 2
        return (int)chunkSize;
      } else return DFLT_CHUNK_SIZE;
    }
    else {
      // New Heuristic
      final int minNumberRows = 10; // need at least 10 rows (lines) per chunk (core)
      final int perNodeChunkCountLimit = 1<<21; // don't create more than 2M Chunk POJOs per node
      final int maxParseChunkSize = 1<<30; // don't read more than this many bytes

      // Super small data check - file size is smaller than 64kB
      if (totalSize <= 1<<16)
        return Math.max(DFLT_CHUNK_SIZE, (int)(minNumberRows*maxLineLength));

      chunkSize = 1L << MathUtils.log2(chunkSize); //round down to closest power of 2

      // Small data check
      if (chunkSize < DFLT_CHUNK_SIZE && (localParseSize/chunkSize)*numCols < perNodeChunkCountLimit) //not too many locally created chunks
        return Math.max((int)chunkSize, (int)(minNumberRows*maxLineLength));

      // Not too many chunks
      int chunkCount = cores * 4 * numCols;
      if (chunkCount > perNodeChunkCountLimit) {
        double ratio = 1 << Math.max(2,MathUtils.log2((int)(double)chunkCount / perNodeChunkCountLimit)); //this times too many chunks globally on the cluster
        chunkSize *= ratio; //need to bite off larger chunks
      }

      chunkSize=Math.min(maxParseChunkSize, chunkSize); // Don't ever read more than 1GB
      long POJOLimit = (long)numCols*(long)Value.MAX >> 4;

      // if we can read at least minNumberRows and we don't create too large Chunk POJOs, we're done
      if (chunkSize > minNumberRows*maxLineLength && chunkSize < POJOLimit) return (int)chunkSize;

      // might be more than default, if the max line length needs it, but no more than the 1GB limit
      // also, don't ever create too large chunks
      return (int)Math.min(
          (numCols*(long)Value.MAX/10), //conservative max of Chunk POJO size
          Math.max(
              DFLT_CHUNK_SIZE,  //default chunk size is a good lower limit for big data
              Math.min(maxParseChunkSize, minNumberRows*maxLineLength)) //don't read more than 1GB, but enough to read the minimum number of rows
      );
    }
  }",Calculates safe and hopefully optimal chunk sizes.,0,733
6711,"protected boolean isHealthy(Channel channel) {
    if (POOL_DISABLED) {
      // If we always returns false here, channels acquired by acquire will always be a newly
      // created channel. With this feature turned on, 1.3.0 client will be backward compatible
      // with 1.2.0 server.
      return false;
    }
    return channel.isActive();
  }",Checks whether a channel is healthy.,0,53
7301,"public static Permission toPermission(AccessControlProtos.Permission proto) {
    if (proto.getType() == AccessControlProtos.Permission.Type.Global) {
      AccessControlProtos.GlobalPermission perm = proto.getGlobalPermission();
      Permission.Action[] actions = toPermissionActions(perm.getActionList());
      return Permission.newBuilder().withActions(actions).build();
    }
    if (proto.getType() == AccessControlProtos.Permission.Type.Namespace) {
      AccessControlProtos.NamespacePermission perm = proto.getNamespacePermission();
      Permission.Action[] actions = toPermissionActions(perm.getActionList());
      if (!proto.hasNamespacePermission()) {
        throw new IllegalStateException(""Namespace must not be empty in NamespacePermission"");
      }
      return Permission.newBuilder(perm.getNamespaceName().toStringUtf8()).withActions(actions)
          .build();
    }
    if (proto.getType() == AccessControlProtos.Permission.Type.Table) {
      AccessControlProtos.TablePermission perm = proto.getTablePermission();
      Permission.Action[] actions = toPermissionActions(perm.getActionList());
      byte[] qualifier = null;
      byte[] family = null;
      TableName table = null;
      if (!perm.hasTableName()) {
        throw new IllegalStateException(""TableName cannot be empty"");
      }
      table = ProtobufUtil.toTableName(perm.getTableName());
      if (perm.hasFamily()) {
        family = perm.getFamily().toByteArray();
      }
      if (perm.hasQualifier()) {
        qualifier = perm.getQualifier().toByteArray();
      }
      return Permission.newBuilder(table).withFamily(family).withQualifier(qualifier)
          .withActions(actions).build();
    }
    throw new IllegalStateException(""Unrecognize Perm Type: "" + proto.getType());
  }",Converts a Permission proto to a client Permission object.,0,489
7598,"public boolean validate(Document signedDocument, KeyLocator keyLocator) throws ProcessingException {
        try {
            configureIdAttribute(signedDocument);
            return XMLSignatureUtil.validate(signedDocument, keyLocator);
        } catch (MarshalException | XMLSignatureException me) {
            throw new ProcessingException(logger.signatureError(me));
        }
    }",Validate the SAML2 Document,0,87
6626,"public boolean isFocusable() {
        if (scrollBody != null && enabled) {
            return !(!hasHorizontalScrollbar() && !hasVerticalScrollbar() && selectMode == SELECT_MODE_NONE);
        }
        return false;
    }",Can the Table be focused?,0,71
7525,"public boolean softKill(final long time, final TimeUnit unit)
      throws InterruptedException {
    checkStarted();
    if (this.processId != 0 && isStarted()) {
      try {
        if (this.isExecuteAsUser) {
          final String cmd =
              String.format(""%s %s %s %d"", this.executeAsUserBinary,
                  this.effectiveUser, KILL_COMMAND, this.processId);
          Runtime.getRuntime().exec(cmd);
        } else {
          final String cmd = String.format(""%s %d"", KILL_COMMAND, this.processId);
          Runtime.getRuntime().exec(cmd);
        }
        return this.completeLatch.await(time, unit);
      } catch (final IOException e) {
        this.logger.error(""Kill attempt failed."", e);
      }
      return false;
    }
    return false;
  }","Attempt to kill the process, waiting up to the given time for it to die",0,242
7780,"public static Method getGetterFor(Field field) {
		String name = field.getName().substring(0, 1).toUpperCase()
				+ field.getName().substring(1);

		String methodName;
		if (boolean.class.isAssignableFrom(field.getType()) ||
			Boolean.class.isAssignableFrom(field.getType())) {
			methodName = ""is"" + name;
		} else {
			methodName = ""get"" + name;
		}

		try {
			return field.getDeclaringClass().getMethod(methodName);
		} catch (NoSuchMethodException e) {
			if (methodName.startsWith(""is"")) {
				methodName = ""get"" + name;
				try {
					return field.getDeclaringClass().getMethod(methodName);
				} catch (NoSuchMethodException e2) {
				}
			}
			LOG.info(""No getter {}() for field {}[{}]"", methodName,
					field.getDeclaringClass().getName(), field.getName());
			return null;
		}
	}",It returns the getter for the given field.,0,285
7766,"private Context getContext(JSONObject params) throws ApiException {
        return ApiUtils.getContextByName(params, CONTEXT_NAME);
    }",Returns the  Context with the given name.,0,34
7874,"public MessageConsumer createConsumer(Destination destination, String messageSelector, boolean noLocal, MessageListener messageListener) throws JMSException {
        checkClosed();

        if (destination instanceof CustomDestination) {
            CustomDestination customDestination = (CustomDestination)destination;
            return customDestination.createConsumer(this, messageSelector, noLocal);
        }

        ActiveMQPrefetchPolicy prefetchPolicy = connection.getPrefetchPolicy();
        int prefetch = 0;
        if (destination instanceof Topic) {
            prefetch = prefetchPolicy.getTopicPrefetch();
        } else {
            prefetch = prefetchPolicy.getQueuePrefetch();
        }
        ActiveMQDestination activemqDestination = ActiveMQMessageTransformation.transformDestination(destination);
        return new ActiveMQMessageConsumer(this, getNextConsumerId(), activemqDestination, null, messageSelector,
                prefetch, prefetchPolicy.getMaximumPendingMessageLimit(), noLocal, false, asyncDispatch, messageListener);
    }","Creates MessageConsumer for the specified destination, using a message selector.",0,223
5717,"public WorkspaceImpl updateWorkspace(String id, Workspace update) throws ConflictException,
                                                                             ServerException,
                                                                             NotFoundException,
                                                                             BadRequestException {
        requireNonNull(id, ""Required non-null workspace id"");
        requireNonNull(update, ""Required non-null workspace update"");
        validator.validateConfig(update.getConfig());
        final WorkspaceImpl workspace = workspaceDao.get(id);
        workspace.setConfig(new WorkspaceConfigImpl(update.getConfig()));
        update.getAttributes().put(UPDATED_ATTRIBUTE_NAME, Long.toString(currentTimeMillis()));
        workspace.setAttributes(update.getAttributes());
        workspace.setTemporary(update.isTemporary());
        return normalizeState(workspaceDao.update(workspace), true);
    }",Updates an existing workspace with a new configuration.,0,175
6193,"public float getFloat(String fieldName) {
        long columnIndex = proxyState.getRow$realm().getColumnIndex(fieldName);
        return proxyState.getRow$realm().getFloat(columnIndex);
    }",Returns the  float value for a given field.,0,50
6680,"public static boolean any(Object self, Closure predicate) {
        return any(InvokerHelper.asIterator(self), predicate);
    }","Iterates over the contents of an object or collection, and checks whether a predicate is valid for at least one element.",0,40
5288,"public static FluidActionResult tryEmptyContainer(@Nonnull ItemStack container, IFluidHandler fluidDestination, int maxAmount, @Nullable EntityPlayer player, boolean doDrain)
    {
        ItemStack containerCopy = ItemHandlerHelper.copyStackWithSize(container, 1); // do not modify the input
        IFluidHandlerItem containerFluidHandler = getFluidHandler(containerCopy);
        if (containerFluidHandler != null)
        {
            if (doDrain)
            {
                FluidStack transfer = tryFluidTransfer(fluidDestination, containerFluidHandler, maxAmount, true);
                if (transfer != null)
                {
                    if (player != null)
                    {
                        SoundEvent soundevent = transfer.getFluid().getEmptySound(transfer);
                        player.playSound(soundevent, 1f, 1f);
                    }
                    ItemStack resultContainer = containerFluidHandler.getContainer();
                    return new FluidActionResult(resultContainer);
                }
            }
            else
            {
                FluidStack simulatedTransfer = tryFluidTransfer(fluidDestination, containerFluidHandler, maxAmount, false);
                if (simulatedTransfer != null)
                {
                    containerFluidHandler.drain(simulatedTransfer, true);
                    ItemStack resultContainer = containerFluidHandler.getContainer();
                    return new FluidActionResult(resultContainer);
                }
            }
        }
        return FluidActionResult.FAILURE;
    }",Takes a filled container and tries to empty it into the given tank.,0,318
6254,"public static ValueTimestampTimeZone offsetDateTimeToValue(Object offsetDateTime) {
        return offsetDateTimeToValue(offsetDateTime, false);
    }",Converts a OffsetDateTime to a Value.,0,30
7180,"private Double calculateCategoryScore(String studentUuid, Long categoryId, List<AssignmentGradeRecord> gradeRecords) {
				
		//validate
		if(gradeRecords == null) {
			log.debug(""No grade records for student: "" + studentUuid + "". Nothing to do."");
			return null;
		}
		
		//setup
		int numScored = 0;
		int numOfAssignments = 0;
		BigDecimal totalEarned = new BigDecimal(""0"");
		BigDecimal totalPossible = new BigDecimal(""0"");
				
		//apply any drop/keep settings for this category
		this.applyDropScores(gradeRecords);
				
		//iterate every grade record, check it's for the category we want, otherwise discard
		for(AssignmentGradeRecord gradeRecord: gradeRecords) {
			
			Assignment assignment = gradeRecord.getAssignment();
						
			//check category match otherwise skip
			if(assignment.getCategory() != null && categoryId != assignment.getCategory().getId()){
				continue;
			}
						
			//only update the variables for the calculation if:
			// 1. the assignment has points to be assigned
			// 2. there is a grade for the student
			// 3. the assignment is included in course grade calculations
			// 4. the assignment is  released to the student (safety check against condition 3)
			// 5. the grade is not dropped from the calc
			if(assignment.getPointsPossible() != null && gradeRecord.getPointsEarned() != null && assignment.isCounted() && assignment.isReleased() && !gradeRecord.getDroppedFromGrade()) {
				totalPossible = totalPossible.add(new BigDecimal(assignment.getPointsPossible().toString()));
				numOfAssignments++;
				numScored++;
				
				//sanitise grade, null values to ""0"";
				String grade = (gradeRecord.getPointsEarned() != null) ? String.valueOf(gradeRecord.getPointsEarned()) : ""0"";
				
				//update total points earned
				totalEarned = totalEarned.add(new BigDecimal(grade));
			}
			
		}
		
		if (numScored == 0 || numOfAssignments == 0 || totalPossible.doubleValue() == 0) {
    		return null;
    	}
	
    	BigDecimal mean = totalEarned.divide(new BigDecimal(numScored), GradebookService.MATH_CONTEXT).divide((totalPossible.divide(new BigDecimal(numOfAssignments), GradebookService.MATH_CONTEXT)), GradebookService.MATH_CONTEXT).multiply(new BigDecimal(""100""));    	
    	return Double.valueOf(mean.doubleValue());
	}",Does the heavy lifting for the category calculations.,0,554
6755,"public static Tag outcome(ServerWebExchange exchange) {
		HttpStatus status = exchange.getResponse().getStatusCode();
		if (status != null) {
			if (status.is1xxInformational()) {
				return OUTCOME_INFORMATIONAL;
			}
			if (status.is2xxSuccessful()) {
				return OUTCOME_SUCCESS;
			}
			if (status.is3xxRedirection()) {
				return OUTCOME_REDIRECTION;
			}
			if (status.is4xxClientError()) {
				return OUTCOME_CLIENT_ERROR;
			}
			return OUTCOME_SERVER_ERROR;
		}
		return OUTCOME_UNKNOWN;
	}",Creates an  outcome tag based on the response status of the given  exchange.,0,153
5290,"public IndentLevel getLevelImpl()
    {
        DetailAST parentAST = getMainAst().getParent();
        int type = parentAST.getType();
        if (type == TokenTypes.LITERAL_NEW || type == TokenTypes.ASSIGN) {
            // note: assumes new or assignment is line to align with
            return new IndentLevel(getLineStart(parentAST));
        }
        else if (getParent() instanceof ArrayInitHandler) {
            return ((ArrayInitHandler) getParent()).getChildrenExpectedLevel();
        }
        else {
            return getParent().getLevel();
        }
    }",Compute the indentation amount for this handler.,0,150
7691,"public String getResultKey() {
        return resultKey;
    }",Returns the key of this MergedField for the overall result.,0,19
5425,"public Node sample( String file ) throws IOException, KettleFileException {
    try {
      return sample( KettleVFS.getInputStream( file ) );
    } catch ( KettleFileException kfe ) {
      throw kfe;
    }
  }",Sample a json file by name,0,72
7213,"protected WebApplicationContext findWebApplicationContext() {
		if (this.webApplicationContext != null) {
			// The user has injected a context at construction time -> use it...
			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {
				ConfigurableApplicationContext cac = (ConfigurableApplicationContext) this.webApplicationContext;
				if (!cac.isActive()) {
					// The context has not yet been refreshed -> do so before returning it...
					cac.refresh();
				}
			}
			return this.webApplicationContext;
		}
		String attrName = getContextAttribute();
		if (attrName != null) {
			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName);
		}
		else {
			return WebApplicationContextUtils.findWebApplicationContext(getServletContext());
		}
	}","Return the  WebApplicationContext passed in at construction time, if available.",0,171
6445,"public TaskSubmissionResult startTask() {

		if (this.allocatedResource == null) {
			final TaskSubmissionResult result = new TaskSubmissionResult(getID(),
				AbstractTaskResult.ReturnCode.NO_INSTANCE);
			result.setDescription(""Assigned instance of vertex "" + this.toString() + "" is null!"");
			return result;
		}

		final SerializableHashSet<ChannelID> activeOutputChannels = constructInitialActiveOutputChannelsSet();

		final List<TaskSubmissionWrapper> tasks = new SerializableArrayList<TaskSubmissionWrapper>();
		final TaskSubmissionWrapper tsw = new TaskSubmissionWrapper(this.vertexID, this.environment,
			this.executionGraph.getJobConfiguration(), this.checkpointState.get(), activeOutputChannels);
		tasks.add(tsw);

		try {
			final List<TaskSubmissionResult> results = this.allocatedResource.getInstance().submitTasks(tasks);

			return results.get(0);

		} catch (IOException e) {
			final TaskSubmissionResult result = new TaskSubmissionResult(getID(),
				AbstractTaskResult.ReturnCode.IPC_ERROR);
			result.setDescription(StringUtils.stringifyException(e));
			return result;
		}
	}",Deploys and starts the task represented by this vertex on the assigned instance.,0,295
6701,"public static String getPropertyValue(String username, String propertyName) throws UserNotFoundException {
        return UserManager.getUserPropertyProvider().loadProperty( username, propertyName );
    }",Returns the value of the specified property for the given username.,0,47
5903,"private State<T> createSingletonState(final State<T> sinkState) {
			return createSingletonState(sinkState, currentPattern instanceof FollowedByPattern,
					currentPattern.getQuantifier().hasProperty(QuantifierProperty.OPTIONAL));
		}",Creates a simple single state.,0,55
7871,"protected Object convertSmallInt(Column column, Field fieldDefn, Object data) {
        return convertValue(column, fieldDefn, data, SHORT_FALSE, (r) -> {
            if (data instanceof Short) {
                r.deliver(data);
            }
            else if (data instanceof Number) {
                Number value = (Number) data;
                r.deliver(new Short(value.shortValue()));
            }
            else if (data instanceof Boolean) {
                r.deliver(NumberConversions.getShort((Boolean)data));
            }
            else if (data instanceof String) {
                r.deliver(Short.parseShort((String)data));
            }
        });
    }",Converts a value object for an expected JDBC type of  Types#SMALLINT.,0,202
5846,"public String getMetadata(String value){
        DCValue[] dcvalues = getMetadataByMetadataString(value);

        if(dcvalues.length>0) {
            return dcvalues[0].toString();
        }
        return null;
    }",Get the value of a metadata field,0,65
6946,"public static OptimizeEngine newInstance(final ShardingRule shardingRule, final SQLStatement sqlStatement, final List<Object> parameters, final GeneratedKey generatedKey) {
        if (sqlStatement instanceof InsertStatement) {
            return new InsertOptimizeEngine(shardingRule, (InsertStatement) sqlStatement, parameters, generatedKey);
        }
        if (sqlStatement instanceof SelectStatement || sqlStatement instanceof DMLStatement) {
            return new QueryOptimizeEngine(sqlStatement.getRouteConditions().getOrCondition(), parameters);
        }
        // TODO do with DDL and DAL
        return new QueryOptimizeEngine(sqlStatement.getRouteConditions().getOrCondition(), parameters);
    }",Create optimize engine instance.,0,156
6172,"public static String getTypeClassName(int type, boolean forResultSet) {
        switch (type) {
        case Value.BOOLEAN:
            // ""java.lang.Boolean"";
            return Boolean.class.getName();
        case Value.BYTE:
            if (forResultSet && !SysProperties.OLD_RESULT_SET_GET_OBJECT) {
                // ""java.lang.Integer"";
                return Integer.class.getName();
            }
            // ""java.lang.Byte"";
            return Byte.class.getName();
        case Value.SHORT:
            if (forResultSet && !SysProperties.OLD_RESULT_SET_GET_OBJECT) {
                // ""java.lang.Integer"";
                return Integer.class.getName();
            }
            // ""java.lang.Short"";
            return Short.class.getName();
        case Value.INT:
            // ""java.lang.Integer"";
            return Integer.class.getName();
        case Value.LONG:
            // ""java.lang.Long"";
            return Long.class.getName();
        case Value.DECIMAL:
            // ""java.math.BigDecimal"";
            return BigDecimal.class.getName();
        case Value.TIME:
            // ""java.sql.Time"";
            return Time.class.getName();
        case Value.TIME_TZ:
            // ""java.time.OffsetTime"";
            return OffsetTime.class.getName();
        case Value.DATE:
            // ""java.sql.Date"";
            return Date.class.getName();
        case Value.TIMESTAMP:
            // ""java.sql.Timestamp"";
            return Timestamp.class.getName();
        case Value.TIMESTAMP_TZ:
            if (SysProperties.RETURN_OFFSET_DATE_TIME) {
                // ""java.time.OffsetDateTime"";
                return OffsetDateTime.class.getName();
            }
            // ""org.h2.api.TimestampWithTimeZone"";
            return TimestampWithTimeZone.class.getName();
        case Value.BYTES:
        case Value.UUID:
        case Value.JSON:
            // ""[B"", not ""byte[]"";
            return byte[].class.getName();
        case Value.STRING:
        case Value.STRING_IGNORECASE:
        case Value.STRING_FIXED:
        case Value.ENUM:
            // ""java.lang.String"";
            return String.class.getName();
        case Value.BLOB:
            // ""java.sql.Blob"";
            return java.sql.Blob.class.getName();
        case Value.CLOB:
            // ""java.sql.Clob"";
            return java.sql.Clob.class.getName();
        case Value.DOUBLE:
            // ""java.lang.Double"";
            return Double.class.getName();
        case Value.FLOAT:
            // ""java.lang.Float"";
            return Float.class.getName();
        case Value.NULL:
            return null;
        case Value.JAVA_OBJECT:
            // ""java.lang.Object"";
            return Object.class.getName();
        case Value.UNKNOWN:
            // anything
            return Object.class.getName();
        case Value.ARRAY:
            return Array.class.getName();
        case Value.RESULT_SET:
            return ResultSet.class.getName();
        case Value.GEOMETRY:
            return GEOMETRY_CLASS != null ? GEOMETRY_CLASS_NAME : String.class.getName();
        case Value.INTERVAL_YEAR:
        case Value.INTERVAL_MONTH:
        case Value.INTERVAL_DAY:
        case Value.INTERVAL_HOUR:
        case Value.INTERVAL_MINUTE:
        case Value.INTERVAL_SECOND:
        case Value.INTERVAL_YEAR_TO_MONTH:
        case Value.INTERVAL_DAY_TO_HOUR:
        case Value.INTERVAL_DAY_TO_MINUTE:
        case Value.INTERVAL_DAY_TO_SECOND:
        case Value.INTERVAL_HOUR_TO_MINUTE:
        case Value.INTERVAL_HOUR_TO_SECOND:
        case Value.INTERVAL_MINUTE_TO_SECOND:
            // ""org.h2.api.Interval""
            return Interval.class.getName();
        default:
            if (JdbcUtils.customDataTypesHandler != null) {
                return JdbcUtils.customDataTypesHandler.getDataTypeClassName(type);
            }
            throw DbException.throwInternalError(""type=""+type);
        }
    }",Get the name of the Java class for the given value type.,0,878
6054,"public String getVersion(URI uri) throws IOException
  {
    try {
      final FileObject object = buildFileObject(uri, s3Client);
      return StringUtils.format(""%d"", object.getLastModified());
    }
    catch (ServiceException e) {
      if (S3Utils.isServiceExceptionRecoverable(e)) {
        // The recoverable logic is always true for IOException, so we want to only pass IOException if it is recoverable
        throw new IOE(e, ""Could not fetch last modified timestamp from URI [%s]"", uri);
      } else {
        throw Throwables.propagate(e);
      }
    }
  }","Returns the ""version"" (aka last modified timestamp) of the URI",0,138
5415,"public static int readVariableInt(byte[] buff, int pos) {
        int x = buff[pos++] & 0xff;
        if (x < 0x80) {
            return x;
        }
        if (x < 0xc0) {
            return ((x & 0x3f) << 8) + (buff[pos] & 0xff);
        }
        if (x < 0xe0) {
            return ((x & 0x1f) << 16) +
                    ((buff[pos++] & 0xff) << 8) +
                    (buff[pos] & 0xff);
        }
        if (x < 0xf0) {
            return ((x & 0xf) << 24) +
                    ((buff[pos++] & 0xff) << 16) +
                    ((buff[pos++] & 0xff) << 8) +
                    (buff[pos] & 0xff);
        }
        return Bits.readInt(buff, pos);
    }",Read a variable size integer using Rice coding.,0,295
7409,"public boolean dispatchCommand(CommandSender sender, String commandLine)
    {
        String[] split = argsSplit.split( commandLine );
        String commandName = split[0].toLowerCase();
        if ( proxy.getDisabledCommands().contains( commandName ) )
        {
            return false;
        }
        Command command = commandMap.get( commandName );
        if ( command == null )
        {
            return false;
        }

        String permission = command.getPermission();
        if ( permission != null && !permission.isEmpty() && !sender.hasPermission( permission ) )
        {
            sender.sendMessage( proxy.getTranslation( ""no_permission"" ) );
            return true;
        }

        String[] args = Arrays.copyOfRange( split, 1, split.length );
        try
        {
            command.execute( sender, args );
        } catch ( Exception ex )
        {
            sender.sendMessage( ChatColor.RED + ""An internal error occurred whilst executing this command, please check the console log for details."" );
            ProxyServer.getInstance().getLogger().log( Level.WARNING, ""Error in dispatching command"", ex );
        }
        return true;
    }","Execute a command if it is registered, else return false.",0,338
7128,"public List<MediaType> getAcceptableMediaTypes() {
        final List<Object> values = headers.get(HttpHeaders.ACCEPT);

        if (values == null || values.isEmpty()) {
            return WILDCARD_ACCEPTABLE_TYPE_SINGLETON_LIST;
        }
        final List<MediaType> result = new ArrayList<>(values.size());
        final RuntimeDelegate rd = RuntimeDelegate.getInstance();
        boolean conversionApplied = false;
        for (final Object value : values) {
            try {
                if (value instanceof MediaType) {
                    final AcceptableMediaType _value = AcceptableMediaType.valueOf((MediaType) value);
                    conversionApplied = _value != value; // true if value was not an instance of AcceptableMediaType already
                    result.add(_value);
                } else {
                    conversionApplied = true;
                    result.addAll(HttpHeaderReader.readAcceptMediaType(HeaderUtils.asString(value, rd)));
                }
            } catch (java.text.ParseException e) {
                throw exception(HttpHeaders.ACCEPT, value, e);
            }
        }

        if (conversionApplied) {
            // cache converted
            headers.put(HttpHeaders.ACCEPT,
                        result.stream()
                              .map((Function<MediaType, Object>) mediaType -> mediaType)
                              .collect(Collectors.toList()));
        }

        return Collections.unmodifiableList(result);
    }",Get a list of media types that are acceptable for the message.,0,363
5312,"public SessionId getSessionId(boolean create) {
        if ( ! create) return getSessionId();

        if (requestId == null)
            requestId = UniqueRequestId.next();
        return new SessionId(requestId, getRanking().getProfile());
    }",Returns the unique and stable session id of this query.,0,78
6128,"public ArrayList getPoolsAvailable()
  {
    ArrayList resultPoolList= new ArrayList();  

    AssessmentBean assessmentBean = (AssessmentBean) ContextUtil.lookupBean(""assessmentBean"");

    QuestionPoolService delegate = new QuestionPoolService();
    
    String agentId = AgentFacade.getAgentString();
    
    ArrayList allpoollist = delegate.getBasicInfoOfAllPools(agentId);

    HashMap allPoolsMap= new HashMap();
    for (int i=0; i<allpoollist.size();i++){
      QuestionPoolFacade apool = (QuestionPoolFacade) allpoollist.get(i);
      allPoolsMap.put(apool.getQuestionPoolId().toString(), apool);
    }

    AssessmentService assessdelegate = null;
	  AuthorBean author = (AuthorBean) ContextUtil.lookupBean(""author"");
	  boolean isEditPendingAssessmentFlow =  author.getIsEditPendingAssessmentFlow();

    if (isEditPendingAssessmentFlow) {
    	assessdelegate = new AssessmentService();
    }
    else {
    	assessdelegate = new PublishedAssessmentService();
    }

    
    List sectionList = assessmentBean.getSectionList();
    for (int i=0; i<sectionList.size();i++){
      SelectItem s = (SelectItem) sectionList.get(i);

      // need to remove the pools already used by random draw parts

      SectionDataIfc section= assessdelegate.getSection(s.getValue().toString());
      if( (section !=null) && (section.getSectionMetaDataByLabel(SectionDataIfc.AUTHOR_TYPE)!=null) &&
 (section.getSectionMetaDataByLabel(SectionDataIfc.AUTHOR_TYPE).equals(SectionDataIfc.RANDOM_DRAW_FROM_QUESTIONPOOL.toString()))) {
	String poolid = section.getSectionMetaDataByLabel(SectionDataIfc.POOLID_FOR_RANDOM_DRAW);
	if (allPoolsMap.containsKey(poolid) ) {
	  allPoolsMap.remove(poolid);
	}
      }
    }
    
    // SAM-2463: Fetch the count of questions for each pool in one query instead of hundreds
    HashMap<Long, Integer> poolQuestionCounts = delegate.getCountItemsForUser(agentId);

    Iterator pooliter = allPoolsMap.keySet().iterator();
    while (pooliter.hasNext()) {
      QuestionPoolFacade pool = (QuestionPoolFacade) allPoolsMap.get(pooliter.next());
      Long poolId = pool.getQuestionPoolId();
      int items = poolQuestionCounts.containsKey(poolId) ? poolQuestionCounts.get(poolId) : 0;
      if(items>0){
    	  resultPoolList.add(new SelectItem((poolId.toString()), getPoolTitleValueForRandomDrawDropDown(pool, items, allpoollist, delegate)));
      }
    }
    //  add pool which is currently used in current Part for modify part
    if (!("""".equals(this.getSelectedPool())) && (this.getSelectedPool() !=null)){

    //now we need to get the poolid and displayName
     
	QuestionPoolFacade currPool= delegate.getPool(new Long(this.getSelectedPool()), AgentFacade.getAgentString());
    // now add the current pool used  to the list, so it's available in the pulldown 
        if (currPool!=null) {
          // if the pool still exists, it's possible that the pool has been deleted  
          int currItems = delegate.getCountItems(currPool.getQuestionPoolId());
          if(currItems>0){
              resultPoolList.add(new SelectItem((currPool.getQuestionPoolId().toString()), getPoolTitleValueForRandomDrawDropDown(currPool, currItems, allpoollist, delegate)));  
          }
        }
        else {
          // the pool has been deleted, 
        } 
    }

    Collections.sort(resultPoolList, new ItemComparator());
    return resultPoolList;
  }",List of available question pools for random draw.,0,844
6958,"private static ValueSource buildDateSource(IndexSchema schema, String expressionString) {
    int paren = expressionString.indexOf('(');
    String[] arguments;
    if (paren<0) {
      return buildFieldSource(schema, expressionString, DATE_TYPE);
    } else {
      arguments = ExpressionFactory.getArguments(expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim());
    }
    String operands = arguments[0];
    String operation = expressionString.substring(0, paren).trim();
    if (operation.equals(AnalyticsParams.CONSTANT_DATE)) {
      if (arguments.length!=1) {
        throw new SolrException(ErrorCode.BAD_REQUEST,""The constant date declaration [""+expressionString+""] does not have exactly 1 argument."");
      }
      return new ConstDateSource(DateMathParser.parseMath(null, operands));
    } else if (operation.equals(AnalyticsParams.FILTER)) {
      return buildFilterSource(schema, operands, DATE_TYPE);
    }
    if (operation.equals(AnalyticsParams.DATE_MATH)) {
      List<ValueSource> subExpressions = new ArrayList<>();
      boolean first = true;
      for (String argument : arguments) {
        ValueSource argSource;
        if (first) {
          first = false;
          argSource = buildDateSource(schema, argument);
          if (argSource == null) {
            throw new SolrException(ErrorCode.BAD_REQUEST,""\""""+AnalyticsParams.DATE_MATH+""\"" requires the first argument be a date operation or field. [""+argument+""] is not a date operation or field."");
          }
        } else {
          argSource = buildStringSource(schema, argument);
          if (argSource == null) {
            throw new SolrException(ErrorCode.BAD_REQUEST,""\""""+AnalyticsParams.DATE_MATH+""\"" requires that all arguments except the first be string operations. [""+argument+""] is not a string operation."");
          }
        }
        subExpressions.add(argSource);
      }
      return new DateMathFunction(subExpressions.toArray(new ValueSource[0]));
    }
    if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {
      return null;
    }
    throw new SolrException(ErrorCode.BAD_REQUEST,""The operation [""+expressionString+""] is not supported."");
  }",Recursively parses and breaks down the expression string to build a date ValueSource.,0,575
7823,"protected Object convertTimestampToEpochMillis(Column column, Field fieldDefn, Object data) {
        // epoch is the fallback value
        return convertValue(column, fieldDefn, data, 0L, (r) -> {
            try {
                r.deliver(Timestamp.toEpochMillis(data, adjuster));
            } catch (IllegalArgumentException e) {
            }
        });
    }","Converts a value object for an expected JDBC type of  Types#TIMESTAMP to  Timestamp values, or milliseconds past epoch.",0,99
6325,"public boolean isLocationAvailable(ZooKeeperWatcher zkw) {
    return getMetaRegionLocation(zkw) != null;
  }",Checks if the meta region location is available.,0,30
7676,"protected Object convertDateToEpochDays(Column column, Field fieldDefn, Object data) {
        // epoch is the fallback value
        return convertValue(column, fieldDefn, data, 0, (r) -> {
            try {
                r.deliver(Date.toEpochDay(data, adjuster));
            } catch (IllegalArgumentException e) {
                logger.warn(""Unexpected JDBC DATE value for field {} with schema {}: class={}, value={}"", fieldDefn.name(),
                            fieldDefn.schema(), data.getClass(), data);
            }
        });
    }",Converts a value object for an expected JDBC type of  Types#DATE to the number of days past epoch.,0,134
7437,"public String getCookieName() {
        return getCookieAttribute().getName();
    }",Passthrough JavaBeans property that will get the underyling rememberMe cookie's name.,0,25
6352,"public String getFirstString() {
        return CommandArgsAccessor.getFirstString(this);
    }",Returns the first string argument.,0,24
5304,"public static NamespaceContextSelector getCurrentSelector() {
        NamespaceContextSelector selector = currentSelector.peek();
        if(selector != null) {
            return selector;
        }
        return defaultSelector;
    }",Get the current context selector for the current thread.,0,57
6960,"public FileInfo findNameFile(String name) {
        return files.get(name);
    }",Finds reference to a snapshotted file by its snapshot name,0,27
5771,"static boolean isInterfaceWithAnnotatedMethods(Class<?> ifc) {
		if (ClassUtils.isJavaLanguageInterface(ifc)) {
			return false;
		}

		Boolean found = annotatedInterfaceCache.get(ifc);
		if (found != null) {
			return found;
		}
		found = Boolean.FALSE;
		for (Method ifcMethod : ifc.getMethods()) {
			try {
				Annotation[] anns = ifcMethod.getAnnotations();
				if (anns.length > 1 || (anns.length == 1 && anns[0].annotationType() != Nullable.class)) {
					found = Boolean.TRUE;
					break;
				}
			}
			catch (Throwable ex) {
				handleIntrospectionFailure(ifcMethod, ex);
			}
		}
		annotatedInterfaceCache.put(ifc, found);
		return found;
	}","Find a single  Annotation of  annotationType on the supplied  Method, traversing its super methods (i.e., from superclasses and interfaces) if the annotation is not directly present on the given method itself.",0,244
6024,"public K floorKey(K key) {
        Iterator<K> it = keyIteratorReverse(key);
        return it.hasNext() ? it.next() : null;
    }","Get the largest key that is smaller than or equal to this key, or null if no such key exists.",0,54
6769,"public static String getLastUploadPath(Context context) {
        return getDefaultSharedPreferences(context).getString(AUTO_PREF__LAST_UPLOAD_PATH, """");
    }",Gets the path where the user selected to do the last upload of a file shared from other app.,0,36
6819,"private static long getSizeOfPhysicalMemory() {
		switch (OperatingSystem.getCurrentOperatingSystem()) {
			case LINUX:
				return getSizeOfPhysicalMemoryForLinux();
				
			case WINDOWS:
				return getSizeOfPhysicalMemoryForWindows();
				
			case MAC_OS:
				return getSizeOfPhysicalMemoryForMac();
				
			case FREE_BSD:
				return getSizeOfPhysicalMemoryForFreeBSD();
				
			case UNKNOWN:
				LOG.error(""Cannot determine size of physical memory for unknown operating system"");
				return -1;
				
			default:
				LOG.error(""Unrecognized OS"");
				return -1;
		}
	}",Returns the size of the physical memory in bytes.,0,143
6783,"public WebEndpointResponse<Health> map(Health health, SecurityContext securityContext, ShowDetails showDetails) {
		if (!canSeeDetails(securityContext, showDetails)) {
			health = Health.status(health.getStatus()).build();
		}
		return createWebEndpointResponse(health);
	}","Maps the given  health to a  WebEndpointResponse, honouring the given  showDetails using the given  securityContext.",0,78
7137,"public static List<WsGetGroupsResult> getGroupsForSubjectId(final String subjectId) {
        try {
            final GcGetGroups groupsClient = new GcGetGroups().addSubjectId(subjectId);
            final WsGetGroupsResult[] results = groupsClient.execute().getResults();

            if (results == null || results.length == 0) {
                LOGGER.warn(""Subject id [{}] could not be located."", subjectId);
                return new ArrayList<>();
            }
            LOGGER.debug(""Found [{}] groups for [{}]"", results.length, subjectId);
            return Arrays.asList(results);
        } catch (final Exception e) {
            LOGGER.warn(""Grouper WS did not respond successfully. Ensure your credentials are correct ""
                    + "", the url endpoint for Grouper WS is correctly configured and the subject [{}]""
                    + ""  exists in Grouper."", subjectId, e);
        }
        return new ArrayList<>(0);
    }",Gets groups for subject id.,0,219
7915,"public HBaseResponse getHTableInfo(String tableName) throws IOException, ExecutionException {
        return htableInfoCache.get(tableName);
    }",Calculate size of each region for given table and other info of the table.,0,34
7443,"public int predict(int[] x, double[] posteriori) {
        if (!isGoodInstance(x)) {
            return Integer.MIN_VALUE;
        }

        for (int i = 0; i < k; i++) {
            double logprob;

            switch (model) {
                case MULTINOMIAL:
                case POLYAURN:
                    logprob = Math.log(priori[i]);
                    for (int j = 0; j < p; j++) {
                        if (x[j] > 0) {
                            logprob += x[j] * logcondprob[i][j];
                        }
                    }
                    break;

                case BERNOULLI:
                    logprob = Math.log(priori[i]);
                    for (int j = 0; j < p; j++) {
                        if (x[j] > 0) {
                            logprob += logcondprob[i][j];
                        } else {
                            logprob += Math.log(1.0 - Math.exp(logcondprob[i][j]));
                        }
                    }
                    break;

                case CNB:
                case WCNB:
                case TWCNB:
                    logprob = 0.0;
                    for (int j = 0; j < p; j++) {
                        if (x[j] > 0) {
                            logprob -= x[j] * logcondprob[i][j];
                        }
                    }
                    break;

                default:
                    // we should never reach here
                    throw new IllegalStateException(""Unknown model: "" + model);
            }

            posteriori[i] = logprob;
        }

        MathEx.softmax(posteriori);
        return MathEx.whichMax(posteriori);
    }",Predict the class of an instance.,0,488
6045,"public int sendPendingNak()
    {
        return nakInfo.sendPending(sendNakFunc);
    }",Called from the  Receiver to send a pending NAK.,0,25
7748,"protected static String getTargetText(Target target) {
		if (target != null) {
			if (target.getStartNode() != null) {
				return getNodeText(target.getStartNode());
			} else if (target.getContext() != null) {
				return Constant.messages.getString(""context.prefixName"", target.getContext().getName());
			} else if (target.isInScopeOnly()) {
				return Constant.messages.getString(""context.allInScope"");
			}
		}
		return null;
	}",Returns the text representation of the given  target.,0,155
7640,"private HttpSession getMatchingHttpSession(List<HttpCookie> cookies, final HttpSessionTokensSet siteTokens) {
		Collection<HttpSession> sessionsCopy;
		synchronized (sessions) {
			sessionsCopy = new ArrayList<>(sessions);
		}
		return CookieBasedSessionManagementHelper.getMatchingHttpSession(sessionsCopy, cookies, siteTokens);
	}",Gets the matching http session for a particular message containing a list of cookies.,0,79
6367,"private static boolean isVowel(char c) {
    char lc = Character.toLowerCase(c);
    return lc == 'a' || lc == 'e' || lc == 'i' || lc == 'o' || lc == 'u';
  }","Adds ""a"" or ""an"" to the English noun.",0,84
7373,"public static DbException getInvalidValueException(String param, Object value) {
        return get(ErrorCode.INVALID_VALUE_2, value == null ? ""null"" : value.toString(), param);
    }",Gets a SQL exception meaning this value is invalid.,0,59
7847,"public static String asString(Struct struct) {
        return new RecordWriter().append(struct).toString();
    }",Obtain a JSON string representation of the specified  Struct.,0,37
6517,"public ProjectionOperationBuilder log10() {
			return this.operation.and(ArithmeticOperators.Log10.log10ValueOf(getRequiredName()));
		}",Generates a  $log10 expression that takes the number of the previously mentioned field and calculates the log base 10.,0,35
6675,"public JSDocInfo build(Node associatedNode) {
    JSDocInfo info = build(false);
    if (info != null) {
      info.setAssociatedNode(associatedNode);
    }

    // TODO(johnlenz): let this be null.
    currentInfo = new JSDocInfo(this.parseDocumentation);
    populated = false;

    return info;
  }",Builds a  JSDocInfo object based on the populated information and returns it.,0,89
6541,"public static Presence parsePresence(XmlPullParser parser, XmlEnvironment outerXmlEnvironment) throws XmlPullParserException, IOException, SmackParsingException {
        ParserUtils.assertAtStartTag(parser);
        final int initialDepth = parser.getDepth();
        XmlEnvironment presenceXmlEnvironment = XmlEnvironment.from(parser, outerXmlEnvironment);

        PresenceBuilder presence = parseCommonStanzaAttributes(
                        stanzaId -> StanzaBuilder.buildPresence(stanzaId), parser, outerXmlEnvironment);

        Presence.Type type = Presence.Type.available;
        String typeString = parser.getAttributeValue("""", ""type"");
        if (typeString != null && !typeString.equals("""")) {
            type = Presence.Type.fromString(typeString);
        }

        presence.ofType(type);

        // Parse sub-elements
        outerloop: while (true) {
            XmlPullParser.Event eventType = parser.next();
            switch (eventType) {
            case START_ELEMENT:
                String elementName = parser.getName();
                String namespace = parser.getNamespace();
                switch (elementName) {
                case ""status"":
                    presence.setStatus(parser.nextText());
                    break;
                case ""priority"":
                    Byte priority = ParserUtils.getByteAttributeFromNextText(parser);
                    presence.setPriority(priority);
                    break;
                case ""show"":
                    String modeText = parser.nextText();
                    if (StringUtils.isNotEmpty(modeText)) {
                        presence.setMode(Presence.Mode.fromString(modeText));
                    } else {
                        // Some implementations send presence stanzas with a
                        // '<show />' element, which is a invalid XMPP presence
                        // stanza according to RFC 6121 4.7.2.1
                        LOGGER.warning(""Empty or null mode text in presence show element form ""
                                        + presence
                                        + ""' which is invalid according to RFC6121 4.7.2.1"");
                    }
                    break;
                case ""error"":
                    presence.setError(parseError(parser, presenceXmlEnvironment));
                    break;
                default:
                // Otherwise, it must be a packet extension.
                    // Be extra robust: Skip PacketExtensions that cause Exceptions, instead of
                    // failing completely here. See SMACK-390 for more information.
                    try {
                        ExtensionElement extensionElement = parseExtensionElement(elementName, namespace, parser, presenceXmlEnvironment);
                        presence.addExtension(extensionElement);
                    } catch (Exception e) {
                        LOGGER.log(Level.WARNING, ""Failed to parse extension element in Presence stanza: "" + presence, e);
                    }
                    break;
                }
                break;
            case END_ELEMENT:
                if (parser.getDepth() == initialDepth) {
                    break outerloop;
                }
                break;
            default:
                // Catch all for incomplete switch (MissingCasesInEnumSwitch) statement.
                break;
            }
        }

        return presence.build();
    }",Parses a presence packet.,0,634
7106,"protected ResourceBundle getResourceBundle(String basename, Locale locale) {
		if (this.cacheMillis >= 0) {
			// Fresh ResourceBundle.getBundle call in order to let ResourceBundle
			// do its native caching, at the expense of more extensive lookup steps.
			return doGetBundle(basename, locale);
		}
		else {
			// Cache forever: prefer locale cache over repeated getBundle calls.
			synchronized (this.cachedResourceBundles) {
				Map<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename);
				if (localeMap != null) {
					ResourceBundle bundle = localeMap.get(locale);
					if (bundle != null) {
						return bundle;
					}
				}
				try {
					ResourceBundle bundle = doGetBundle(basename, locale);
					if (localeMap == null) {
						localeMap = new HashMap<Locale, ResourceBundle>();
						this.cachedResourceBundles.put(basename, localeMap);
					}
					localeMap.put(locale, bundle);
					return bundle;
				}
				catch (MissingResourceException ex) {
					if (logger.isWarnEnabled()) {
						logger.warn(""ResourceBundle ["" + basename + ""] not found for MessageSource: "" + ex.getMessage());
					}
					// Assume bundle not found
					// -> do NOT throw the exception to allow for checking parent message source.
					return null;
				}
			}
		}
	}","Return a ResourceBundle for the given basename and code, fetching already generated MessageFormats from the cache.",0,323
6243,"public boolean deleteFile(String path, String hash) {
        if (hash == null) {
            return mDb.delete(DATABASE_TABLE, KEY_FILEPATH + ""='"" + path + ""'"", null) > 0;
        } else if (path == null) {
            return mDb.delete(DATABASE_TABLE, KEY_HASH + ""='"" + hash + ""'"", null) > 0;
        } else {
            return mDb.delete(DATABASE_TABLE, KEY_FILEPATH + ""='"" + path + ""'"" + "" and "" + KEY_HASH
                    + ""='"" + hash + ""'"", null) > 0;
        }
    }",Remove the file from the database.,0,201
6875,"protected Object waitForResponse(final EmbeddedChannel channel)
      throws TimeoutException, InterruptedException {
    return CommonUtils.waitForResult(""response from the channel."", () -> channel.readOutbound(),
        WaitForOptions.defaults().setTimeoutMs(Constants.MINUTE_MS));
  }",Waits for a response.,0,67
5660,"public static Trade adaptTrade(BitcurexTrade bitcurexTrade, String currency, String tradableIdentifier) {

    BigDecimal amount = bitcurexTrade.getAmount();
    BigMoney price = MoneyUtils.parse(currency + "" "" + bitcurexTrade.getPrice());
    Date date = DateUtils.fromMillisUtc(bitcurexTrade.getDate() * 1000L);

    final String tradeId = String.valueOf(bitcurexTrade.getTid());
    return new Trade(null, amount, tradableIdentifier, currency, price, date, tradeId, null);
  }",Adapts a BitcurexTrade to a Trade Object,0,149
5851,"public String getShortName() {
        if (shortName == null) {
            XmlRootElement root = getClass().getAnnotation(XmlRootElement.class);
            if (root != null) {
                shortName = root.name();
            }
            if (shortName == null) {
                XmlType type = getClass().getAnnotation(XmlType.class);
                if (type != null) {
                    shortName = type.name();
                }
            }
        }
        return shortName;
    }",Returns a short name for this node which can be useful for ID generation or referring to related resources like images,0,149
6228,"int maxTotalAttempts() {
        return maxTotalAttempts;
    }",Sets the maximum number of total attempts.,0,17
5976,"public int typeExchange(Element element) {
        TypeMirror typeMirror = element.asType();

        // Primitive
        if (typeMirror.getKind().isPrimitive()) {
            return element.asType().getKind().ordinal();
        }

        switch (typeMirror.toString()) {
            case BYTE:
                return TypeKind.BYTE.ordinal();
            case SHORT:
                return TypeKind.SHORT.ordinal();
            case INTEGER:
                return TypeKind.INT.ordinal();
            case LONG:
                return TypeKind.LONG.ordinal();
            case FLOAT:
                return TypeKind.FLOAT.ordinal();
            case DOUBEL:
                return TypeKind.DOUBLE.ordinal();
            case BOOLEAN:
                return TypeKind.BOOLEAN.ordinal();
            case CHAR:
                return TypeKind.CHAR.ordinal();
            case STRING:
                return TypeKind.STRING.ordinal();
            default:    // Other side, maybe the PARCELABLE or SERIALIZABLE or OBJECT.
                if (types.isSubtype(typeMirror, parcelableType)) {  // PARCELABLE
                    return TypeKind.PARCELABLE.ordinal();
                } else if (types.isSubtype(typeMirror, serializableType)) {  // PARCELABLE
                    return TypeKind.SERIALIZABLE.ordinal();
                } else {    // For others
                    return TypeKind.OBJECT.ordinal();
                }
        }
    }",Diagnostics out the true java type,0,347
5694,"public static UnderFileSystem get(String path, Object conf) {
    Preconditions.checkArgument(path != null, ""path may not be null"");

    if (isHadoopUnderFS(path)) {
      return UnderFileSystemHdfs.getClient(path, conf);
    } else if (path.startsWith(TachyonURI.SEPARATOR) || path.startsWith(""file://"")) {
      return UnderFileSystemSingleLocal.getClient();
    }
    throw new IllegalArgumentException(""Unknown under file system scheme "" + path);
  }",Get the UnderFileSystem instance according to its scheme and configuration.,0,131
5553,"public Collection<CallRecord> findByEndDate(Date endDate) throws RuntimeException
    {
        TreeSet<CallRecord> result = new TreeSet<CallRecord>(new CallRecordComparator());
        try
        {
            // the default ones
            History history = this.getHistory(null, null);
            HistoryReader reader = history.getReader();
            addHistorySearchProgressListeners(reader, 1);
            QueryResultSet rs = reader.findByEndDate(endDate);
            while (rs.hasNext())
            {
                HistoryRecord hr = (HistoryRecord) rs.next();
                result.add(convertHistoryRecordToCallRecord(hr));
            }
            removeHistorySearchProgressListeners(reader);
        }
        catch (IOException ex)
        {
            logger.error(""Could not read history"", ex);
        }

        return result;
    }",Returns all the calls made before the given date,0,208
7302,"public ListIterator<Message> getReverseMessageHistory(){
        LinkedList<Message> list = new LinkedList<Message>(history);
        return list.listIterator(list.size());
    }",Obtain the current history to be iterated in reverse mode.,0,51
7059,"public static Integer getClientPort(final Configuration configuration) {
        Preconditions.checkNotNull(configuration);
        String clientPortString = configuration.get(HBASE_ZOOKEEPER_CLIENT_PORT);
        return clientPortString==null ? null : Integer.parseInt(clientPortString);
    }",Returns the HBase Client Port,0,66
7452,"static public TransformationService getTransformationService(BundleContext context, String transformationType) {
		
		if (StringUtils.isBlank(transformationType)) {
			return null;
		}
		
		if (cachedServices.containsKey(transformationType)) {
			return cachedServices.get(transformationType);
		}
		
		if(context!=null) {
			String filter = ""(openhab.transform="" + transformationType + "")"";
			try {
				Collection<ServiceReference<TransformationService>> refs = context.getServiceReferences(TransformationService.class, filter);
				if(refs!=null && refs.size() > 0) {
					TransformationService service = (TransformationService) context.getService(refs.iterator().next());
					cachedServices.put(transformationType, service);
					return service;
				} else {
					logger.warn(""Cannot get service reference for transformation service of type "" + transformationType);
				}
			} catch (InvalidSyntaxException e) {
				logger.warn(""Cannot get service reference for transformation service of type "" + transformationType, e);
			}
		}
		return null;
	}",Queries the OSGi service registry for a service that provides a transformation service of a given transformation type (e.g.,0,281
5251,"public PrivacyList loadPrivacyList(String username, String listName) {
        // If there are no privacy lists stored, this method is a no-op.
        if (privacyListCount.get() == 0) {
            return null;
        }

        boolean isDefault = false;
        String listValue = null;

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            con = DbConnectionManager.getConnection();
            pstmt = con.prepareStatement(LOAD_PRIVACY_LIST);
            pstmt.setString(1, username);
            pstmt.setString(2, listName);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                isDefault = rs.getInt(1) == 1;
                listValue = rs.getString(2);
            }
            else {
                return null;
            }
        }
        catch (Exception e) {
            Log.error(""Error loading privacy list: "" + listName + "" of username: "" + username, e);
            return null;
        }
        finally {
            DbConnectionManager.closeConnection(rs, pstmt, con);
        }

        PrivacyList privacyList = null;
        SAXReader xmlReader = null;
        try {
            // Get a sax reader from the pool
            xmlReader = xmlReaders.take();
            Element listElement = xmlReader.read(new StringReader(listValue)).getRootElement();
            privacyList = new PrivacyList(username, listName, isDefault, listElement);
        }
        catch (Exception e) {
            Log.error(e);
        }
        finally {
            // Return the sax reader to the pool
            if (xmlReader != null) {
                xmlReaders.add(xmlReader);
            }
        }


        return privacyList;
    }",Loads the requested privacy list from the database.,0,463
5843,"protected Collector<OT> createSolutionSetUpdateOutputCollector(Collector<OT> delegate) {
		Broker<CompactingHashTable<?>> solutionSetBroker = SolutionSetBroker.instance();

		/*if (config.getIsSolutionSetUpdateWithoutReprobe()) {
			@SuppressWarnings(""unchecked"")
			MutableHashTable<OT, ?> solutionSet = (MutableHashTable<OT, ?>) solutionSetBroker.get(brokerKey());

			return new SolutionSetFastUpdateOutputCollector<OT>(solutionSet, delegate);
		} else {*/
			@SuppressWarnings(""unchecked"")
			CompactingHashTable<OT> solutionSet = (CompactingHashTable<OT>) solutionSetBroker.get(brokerKey());
			TypeSerializer<OT> serializer = getOutputSerializer();
			TypePairComparatorFactory<OT, OT> factory = this.config.getSolutionSetPairComparatorFactory(getUserCodeClassLoader());
			TypePairComparator<OT, OT> pairComparator = factory.createComparator12(solutionSet.getBuildSideComparator(), solutionSet.getBuildSideComparator());
			return new SolutionSetUpdateOutputCollector<OT>(solutionSet, serializer, pairComparator, delegate);
		//}
	}",Creates a new solution set update output collector.,0,179
7234,"public Notification build() {
        int smallIcon = options.getSmallIcon();
        NotificationCompat.Builder builder;

        if (options.isSilent()) {
            return new Notification(context, options);
        }

        builder = new NotificationCompat.Builder(context, ""channel"")
                .setDefaults(options.getDefaults())
                .setContentTitle(options.getTitle())
                .setContentText(options.getText())
                .setTicker(options.getText())
                .setNumber(options.getBadgeNumber())
                .setAutoCancel(options.isAutoClear())
                .setOngoing(options.isSticky())
                .setColor(options.getColor())
                .setSound(options.getSound())
                .setVisibility(options.getVisibility())
                .setPriority(options.getPriority())
                .setShowWhen(options.getShowWhen())
                .setUsesChronometer(options.isWithProgressBar())
                .setGroup(options.getGroup())
                .setGroupSummary(options.getGroupSummary())
                .setLights(options.getLedColor(), options.getLedOn(), options.getLedOff());

        if (options.isWithProgressBar()) {
            builder.setProgress(
                    options.getProgressMaxValue(),
                    options.getProgressValue(),
                    options.isIndeterminateProgress());
        }

        if (smallIcon != 0) {
            builder.setSmallIcon(smallIcon);
            builder.setLargeIcon(options.getLargeIcon());
        } else {
            builder.setSmallIcon(options.getIcon());
        }

        applyStyle(builder);
        applyDeleteReceiver(builder);
        applyContentReceiver(builder);

        return new Notification(context, options, builder);
    }",Creates the notification with all its options passed through JS.,0,425
5601,"private Chunk readChunkHeaderAndFooter(long block, int expectedId) {
        Chunk header = readChunkHeader(block, expectedId);
        if (header != null) {
            Chunk footer = readChunkFooter((block + header.len) * BLOCK_SIZE);
            if (footer == null || footer.id != expectedId || footer.block != header.block) {
                return null;
            }
        }
        return header;
    }","Read a chunk header and footer, and verify the stored data is consistent.",0,134
6472,"public ArrayCreationLevel setDimension(final Expression dimension) {
        if (dimension == this.dimension) {
            return (ArrayCreationLevel) this;
        }
        notifyPropertyChange(ObservableProperty.DIMENSION, this.dimension, dimension);
        if (this.dimension != null)
            this.dimension.setParentNode(null);
        this.dimension = dimension;
        setAsParentNodeOf(dimension);
        return this;
    }",Sets the dimension,0,112
6205,"public Vector computeCentroid() {
    if (centroid != null)
      return centroid;
    if (pointProbSum == 0) {
      return weightedPointTotal;
    } else if (centroid == null) {
      // lazy compute new centroid
      centroid = weightedPointTotal.divide(pointProbSum);
    }
    return centroid;
  }",Compute the centroid,0,94
5525,"public static Logger getLogger(final String suffix) {
        notNull(""suffix"", suffix);
        if (suffix.startsWith(""."") || suffix.endsWith(""."")) {
            throw new IllegalArgumentException(""The suffix can not start or end with a '.'"");
        }

        String name = PREFIX + ""."" + suffix;

        if (USE_SLF4J) {
            return new SLF4JLogger(name);
        } else {
            return new JULLogger(name);
        }
    }","Gets a logger with the given suffix appended on to  PREFIX, separated by a '.'.",0,139
5638,"public int getAggregationDistinctColumnIndex(final int derivedSumIndex) {
        return Collections2.filter(aggregationDistinctColumnMetaDataList, new Predicate<AggregationDistinctColumnMetaData>() {
            
            @Override
            public boolean apply(final AggregationDistinctColumnMetaData input) {
                return derivedSumIndex == input.derivedSumIndex;
            }
        }).iterator().next().columnIndex;
    }",Get aggregation distinct column index.,0,91
5531,"public static Object use(Class categoryClass, Closure closure) {
       return threadInfo.get().use(categoryClass, closure);
	}",Create a scope based on given categoryClass and invoke closure within that scope.,0,41
5967,"private boolean doCopy(String fileName, String toFile, NamedCompound edits) {

        List<String> dirs = panel.getBibDatabaseContext()
                .getFileDirectories(Globals.prefs.getFileDirectoryPreferences());
        int found = -1;
        for (int i = 0; i < dirs.size(); i++) {
            if (new File(dirs.get(i)).exists()) {
                found = i;
                break;
            }
        }
        if (found < 0) {
            // OOps, we don't know which directory to put it in, or the given
            // dir doesn't exist....
            // This should not happen!!
            LOGGER.warn(""Cannot determine destination directory or destination directory does not exist"");
            return false;
        }

        Path destFile = Paths.get(dirs.get(found)).resolve(toFile);
        if (destFile.toString().equals(fileName)) {
            // File is already in the correct position. Don't override!
            return true;
        }

        if (Files.exists(destFile)) {
            int answer = JOptionPane.showConfirmDialog(frame,
                    Localization.lang(""'%0' exists. Overwrite file?"", destFile.toString()),
                    Localization.lang(""File exists""), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (answer == JOptionPane.NO_OPTION) {
                return false;
            }
        }
        try {
            //copy does not create directories, therefore we have to create them manually
            if (!Files.exists(destFile)) {
                Files.createDirectories(destFile);
            }
            FileUtil.copyFile(Paths.get(fileName), destFile, true);
        } catch (IOException e) {
            LOGGER.error(""Problem copying file"", e);
            return false;
        }
        return true;
    }","Copy the given file to the base directory for its file type, and give it the given name.",0,432
7041,"public ParseResult<Statement> parseStatement(final String statement) {
        return parse(STATEMENT, provider(statement));
    }",Parses the Java statement contained in a  String and returns a  Statement that represents it.,0,36
5502,"public ChannelEvent readEvent(long timeout, TimeUnit unit) throws InterruptedException, BlockingReadTimeoutException {
        detectDeadLock();
        if (isClosed()) {
            if (getQueue().isEmpty()) {
                return null;
            }
        }

        ChannelEvent e = getQueue().poll(timeout, unit);
        if (e == null) {
            throw new BlockingReadTimeoutException();
        } else if (e instanceof ChannelStateEvent) {
            // channelClosed has been triggered.
            assert closed;
            return null;
        } else {
            return e;
        }
    }",Waits until a new  ChannelEvent is received or the associated  Channel is closed.,0,165
7913,"public static PsiFile findLayoutResource(PsiElement element) {
        if (element == null) {
            return null; // nothing to be used
        }
        if (!(element instanceof PsiIdentifier)) {
            return null; // nothing to be used
        }

        PsiElement layout = element.getParent().getFirstChild();
        if (layout == null) {
            return null; // no file to process
        }
        if (!""R.layout"".equals(layout.getText())) {
            return null; // not layout file
        }

        Project project = element.getProject();
        String name = String.format(""%s.xml"", element.getText());
        return resolveLayoutResourceFile(element, project, name);


    }",Try to find layout XML file in selected element,0,202
5740,"public int streamId()
    {
        return buffer.getInt(offset + STREAM_ID_FIELD_OFFSET, LITTLE_ENDIAN);
    }",return stream id field,0,32
6551,"public Object getProperty(String property) {
        try {
            Object value = result.get(property);
            if (value != null)
                return value;
            // if property exists and value is null, return null
            if (result.containsKey(property))
                return null;
            // with some databases/drivers, the columns names are stored uppercase.
            String propertyUpper = property.toUpperCase();
            value = result.get(propertyUpper);
            if (value != null)
                return value;
            // if property exists and value is null, return null
            if (result.containsKey(propertyUpper)) 
                return null;
            throw new MissingPropertyException(property, GroovyRowResult.class);
        }
        catch (Exception e) {
            throw new MissingPropertyException(property, GroovyRowResult.class, e);
        }
    }",Retrieve the value of the property by its name,0,197
6569,"public Double getDeactivationDelay() {
        return getStateValue(STATE_DEACTIVATION_DELAY);
    }","Get the time remaining to the switch off, in seconds",0,22
6665,"public String format(String content, String fieldName)
            throws IllegalArgumentException {

        if (content == null) {
            return valueDelimiterStartOfValue + String.valueOf(valueDelimiterEndOfValue);
        }

        boolean shouldWrapWithBraces = Globals.prefs.putBracesAroundCapitals(fieldName) && !BIBTEX_STRING.equals(fieldName);
        if (shouldWrapWithBraces) {
            content = StringUtil.putBracesAroundCapitals(content);
        }

        // normalize newlines
        boolean shouldNormalizeNewlines = !content.contains(Globals.NEWLINE) && content.contains(""\n"");
        if (shouldNormalizeNewlines) {
            // if we don't have real new lines, but pseudo newlines, we replace them
            // On Win 8.1, this is always true for multiline fields
            content = content.replaceAll(""\n"", Globals.NEWLINE);
        }

        // If the field is non-standard, we will just append braces,
        // wrap and write.
        boolean resolveStrings = shouldResolveStrings(fieldName);

        if (!resolveStrings) {
            return formatWithoutResolvingStrings(content, fieldName);
        }

        return formatAndResolveStrings(content, fieldName);
    }",Formats the content of a field.,0,246
6927,"public SQLUnit toSQL(final Map<String, String> logicAndActualTableMap, final ShardingRule shardingRule, final ShardingDataSourceMetaData shardingDataSourceMetaData) {
        StringBuilder result = new StringBuilder();
        List<Object> insertParameters = new LinkedList<>();
        for (Object each : segments) {
            if (!(each instanceof ShardingPlaceholder)) {
                result.append(each);
                continue;
            }
            if (each instanceof InsertValuesPlaceholder) {
                appendInsertValuesPlaceholder(tableUnit, (InsertValuesPlaceholder) each, insertParameters, result);
            } else {
                result.append(each);
            }
        }
        List<List<Object>> parameterSets = insertParameters.isEmpty() ? new ArrayList<>(Collections.singleton(parameters)) : new ArrayList<>(Collections.singleton(insertParameters));
        return new SQLUnit(result.toString(), parameterSets);
    }",Convert to SQL unit.,0,243
6724,"public List<AlertCurrentEntity> findCurrent() {
    TypedQuery<AlertCurrentEntity> query = m_entityManagerProvider.get().createNamedQuery(
        ""AlertCurrentEntity.findAll"", AlertCurrentEntity.class);

    return m_daoUtils.selectList(query);
  }",Gets the current alerts.,0,59
6682,"protected Set<E> parseData(Parser<E> parser, URL url, Bundle bundle) {
        InputStreamReader reader = null;
        InputStream is = null;
        try {
            is = url.openStream();
            reader = new InputStreamReader(is);
            return parser.parse(reader);
        } catch (ParsingException e) {
            logger.error(e.getLocalizedMessage(), e);
        } catch (IOException e) {
            logger.error(""Can't read from resource of bundle with ID {}"", bundle.getBundleId(), e);
            processAutomationProviderUninstalled(bundle);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ignore) {
                }
            }
            if (is != null) {
                try {
                    is.close();
                } catch (IOException ignore) {
                }
            }
        }
        return null;
    }",This method is called from  #processAutomationProvider(Bundle) to process the loading of the provided objects.,0,271
5508,"public static GlobalProperties getGlobalPropertiesAfterConnection(OptimizerNode source, OptimizerNode target, int targetInputNum, ShipStrategyType shipMode) {
//		GlobalProperties gp = source.getGlobalPropertiesForParent(target);
//
//		switch (shipMode.type()) {
//		case BROADCAST:
//			gp.reset();
//			break;
//		case PARTITION_RANGE:
//			gp.setPartitioning(PartitionProperty.RANGE_PARTITIONED, ((PartitionShipStrategy)shipMode).getPartitionFields());
//			gp.setOrdering(null);
//			break;
//		case PARTITION_HASH:
//			gp.setPartitioning(PartitionProperty.HASH_PARTITIONED, ((PartitionShipStrategy)shipMode).getPartitionFields());
//			gp.setOrdering(null);
//			break;
//		case FORWARD:
//			if (source.getDegreeOfParallelism() > target.getDegreeOfParallelism()) {
//				gp.setOrdering(null);
//			}
//			
//			if (gp.getPartitioning() == PartitionProperty.NONE) {
//				if (source.getUniqueFields().size() > 0) {
//					FieldList partitionedFields = new FieldList();
//					//TODO maintain a list of partitioned fields in global properties
//					//Up to now: only add first unique fieldset
//					for (Integer field : source.getUniqueFields().iterator().next()) {
//						partitionedFields.add(field);
//					}
//					gp.setPartitioning(PartitionProperty.ANY, partitionedFields);
//				}
//			}
//			
//			// nothing else changes
//			break;
//		case NONE:
//			throw new CompilerException(
//				""Cannot determine properties after connection, id shipping strategy is not set."");
//		case SFR:
//		default:
			throw new CompilerException(""Unsupported shipping strategy: "" + shipMode.name());
//		}
//
//		return gp;
	}",Gets the global properties of the source's output after it crossed a pact connection with the given shipping strategy.,0,136
5676,"public Observable<Integer> createObservable() {
        return asRxObservable();
    }","Creates ""Hot""  Observable which will be subscribed to changes of tables from query and will emit result each time change occurs.",0,24
7130,"public int getModelCount() {
    return _hyperSpaceWalker.getHyperSpaceSize();
  }",Returns expected number of models in resulting Grid object.,0,23
7172,"public static Calendar parse(String dateString, final int timezoneOffset) throws ParseException {
        Calendar cal = null;
        dateString = dateString.replaceAll(""_"", "" "").trim();
        // special cases for small time numbers
        if (dateString.endsWith(""h"") || dateString.endsWith(""m"") || dateString.endsWith(""s"")) {
            try {
                int nn = Integer.parseInt(dateString.substring(0, dateString.length() - 1));
                cal = Calendar.getInstance(UTCtimeZone);
                if (dateString.endsWith(""h"")) {
                    cal.add(Calendar.HOUR, nn);
                    return cal;
                }
                if (dateString.endsWith(""m"")) {
                    cal.add(Calendar.MINUTE, nn);
                    return cal;
                }
                if (dateString.endsWith(""s"")) {
                    cal.add(Calendar.SECOND, nn);
                    return cal;
                }
            } catch (NumberFormatException e) {}
        }

        // parse a full date format
        for (DateFormat df: tryFormats) {
            synchronized (df) {
                try {
                    Date td = df.parse(dateString);
                    cal = Calendar.getInstance(UTCtimeZone);
                    cal.setTime(td);
                    break;
                } catch (ParseException e) {
                    continue;
                }
            }
        }
        if (cal == null) throw new ParseException(""cannot find parser for time format of "" + dateString, 0);
        cal.add(Calendar.MINUTE, -timezoneOffset); // add a correction; i.e. for UTC+1 -60 minutes is added to patch a time given in UTC+1 to the actual time at UTC

        // fix partially given date
        if (cal.get(Calendar.YEAR) == 1970) {
            Calendar now = Calendar.getInstance(UTCtimeZone);
            cal.set(Calendar.YEAR, now.get(Calendar.YEAR));
            cal.set(Calendar.MONTH, now.get(Calendar.MONTH));
            cal.set(Calendar.DAY_OF_MONTH, now.get(Calendar.DAY_OF_MONTH));
        }
        return cal;
    }",parse a date string for a given time zone,0,548
5571,"private RuleImpl getPathDone() throws IntrospectionException,
                              InvalidRuleException {
        final RuleImpl rule = new RuleImpl( ""pathDone"" );

        // -----------
        // context : Context( state == Context.MAKE_PATH )
        // -----------
        final Pattern contextPattern = new Pattern( 0,
                                                    this.contextType,
                                                    ""context"" );

        contextPattern.addConstraint( getLiteralConstraint( contextPattern,
                                                            ""state"",
                                                            Context.MAKE_PATH ) );

        rule.addPattern( contextPattern );
        final Declaration contextDeclaration = rule.getDeclaration( ""context"" );

        // ---------------
        // seating : Seating( pathDone == false )
        // ---------------
        final Pattern seatingPattern = new Pattern( 1,
                                                    this.seatingType,
                                                    ""seating"" );

        seatingPattern.addConstraint( getLiteralConstraint( seatingPattern,
                                                            ""pathDone"",
                                                            false ) );

        rule.addPattern( seatingPattern );

        final Declaration seatingDeclaration = rule.getDeclaration( ""seating"" );

        // ------------
        // context.setName( Context.CHECK_DONE );
        // seating.setPathDone( true );
        // ------------
        final Consequence consequence = new Consequence() {

            public void evaluate(KnowledgeHelper drools,
                                 WorkingMemory workingMemory) throws ConsequenceException {
                try {
                    RuleImpl rule = drools.getRule();
                    Tuple tuple = drools.getTuple();

                    Context context = (Context) drools.get( contextDeclaration );
                    Seating seating = (Seating) drools.get( seatingDeclaration );

                    seating.setPathDone( true );

                    //                    if ( seating.getId() == 6 ) {
                    //                        System.err.println( ""pause"" );
                    //                    }
                    drools.update( tuple.get( seatingDeclaration ) );

                    context.setState( Context.CHECK_DONE );
                    drools.update( tuple.get( contextDeclaration ),
                                   context );
                    //System.err.println( ""path done"" + seating );
                } catch ( Exception e ) {
                    e.printStackTrace();
                    throw new ConsequenceException( e );
                }
            }

            public void readExternal(ObjectInput in) throws IOException,
                                                    ClassNotFoundException {

            }

            public void writeExternal(ObjectOutput out) throws IOException {

            }
            
            public String getName() {
                return ""default"";
            }
        };

        rule.setConsequence( consequence );

        return rule;
    }",rule pathDone(),0,596
6173,"public boolean foldCondition(Constant lt, Constant rt, ConstantReflectionProvider constantReflection, boolean unorderedIsTrue) {
        if (lt instanceof PrimitiveConstant) {
            PrimitiveConstant lp = (PrimitiveConstant) lt;
            PrimitiveConstant rp = (PrimitiveConstant) rt;
            return foldCondition(lp, rp, unorderedIsTrue);
        } else {
            Boolean equal = constantReflection.constantEquals(lt, rt);
            if (equal == null) {
                throw new GraalError(""could not fold %s %s %s"", lt, this, rt);
            }
            switch (this) {
                case EQ:
                    return equal.booleanValue();
                case NE:
                    return !equal.booleanValue();
                default:
                    throw new GraalError(""expected condition: %s"", this);
            }
        }
    }",Attempts to fold a comparison between two constants and return the result.,0,219
6417,"protected boolean accept(Field field) {
        if (field.getName().indexOf(ClassUtils.INNER_CLASS_SEPARATOR_CHAR) != -1) {
            // Reject field from inner class.
            return false;
        }
        if (Modifier.isTransient(field.getModifiers()) && !this.isAppendTransients()) {
            // Reject transient fields.
            return false;
        }
        if (Modifier.isStatic(field.getModifiers()) && !this.isAppendStatics()) {
            // Rject static fields.
            return false;
        }
        if (this.getExcludeFieldNames() != null
            && Arrays.binarySearch(this.getExcludeFieldNames(), field.getName()) >= 0) {
            // Reject fields from the getExcludeFieldNames list.
            return false;
        }
        return true;
    }",Returns whether or not to append the given Field.,0,197
7836,"public String getAsText(long instant, Locale locale) {
        return getAsText(get(instant));
    }","Get the human-readable, text value of this field from the milliseconds.",0,33
5264,"protected boolean doFilterContainer(boolean hasFilters) {
        if (!hasFilters) {
            filteredItemIds = null;
            if (filters != null) {
                filters = null;
                return true;
            }

            return false;
        }
        // Reset filtered list
        if (filteredItemIds == null) {
            filteredItemIds = new LinkedHashSet<Object>();
        } else {
            filteredItemIds.clear();
        }

        // Filter
        for (final Iterator<?> i = itemIds.iterator(); i.hasNext();) {
            final Object id = i.next();
            if (passesFilters(id)) {
                filteredItemIds.add(id);
            }
        }

        return true;

    }",Filters the data in the container and updates internal data structures.,0,212
5993,"public List getExpandoMethods() {
        synchronized (expandoMethods) {
            return Collections.unmodifiableList(DefaultGroovyMethods.toList(expandoMethods));
        }
    }",Returns a list of expando MetaMethod instances added to this ExpandoMetaClass,0,41
7594,"public static String getLogin(final Context context) {
        final Account account = getAccount(context);
        return account != null ? account.name : null;
    }",Get login name of configured account,0,56
6261,"public static INDArray averageAndPropagate(INDArray target, INDArray[] arrays) {
        return  INSTANCE.average(target, arrays);
    }","This method averages input arrays, and returns averaged array.",0,39
7817,"private boolean selectFirstItemIfNoneSelected() {
    if (selectedItem == null) {
      for (MenuItem nextItem : items) {
        if (nextItem.isEnabled() && nextItem.isVisible()) {
          selectItem(nextItem);
          return true;
        }
      }
      for (MenuItem nextItem : items) {
        if (nextItem.isVisible()) {
          selectItem(nextItem);
          return true;
        }
      }
      return true;
    }
    return false;
 }",Selects the first item in the menu if no items are currently selected.,0,145
7402,"public int getValueAtPercentile(double percentile) {
        int permyriad = (int) percentile * 100;
        switch (permyriad) {
            case 0: return p0;
            case 500: return p5;
            case 1000: return p10;
            case 1500: return p15;
            case 2000: return p20;
            case 2500: return p25;
            case 3000: return p30;
            case 3500: return p35;
            case 4000: return p40;
            case 4500: return p45;
            case 5000: return p50;
            case 5500: return p55;
            case 6000: return p60;
            case 6500: return p65;
            case 7000: return p70;
            case 7500: return p75;
            case 8000: return p80;
            case 8500: return p85;
            case 9000: return p90;
            case 9500: return p95;
            case 9900: return p99;
            case 9950: return p99_5;
            case 9990: return p99_9;
            case 9995: return p99_95;
            case 9999: return p99_99;
            case 10000: return p100;
            default: throw new IllegalArgumentException(""Percentile ("" + percentile + "") is not currently cached"");
        }
    }",Return the cached value if available.,0,358
5625,"private Type toSchema(String name, Field field, Type.Repetition rep, List<String> currentFieldPath) {
    if (field.isList()) {
      final Field listElemField = field.getListElemField();
      Type nestedType = toSchema(name + ""_tuple"", listElemField, REPEATED, currentFieldPath);
      if (nestedType == null) {
        return null;
      }
      return ConversionPatterns.listType(rep, name, nestedType);
    } else if (field.isSet()) {
      final Field setElemField = field.getSetElemField();
      Type nestedType = toSchema(name + ""_tuple"", setElemField, REPEATED, currentFieldPath);
      if (nestedType == null) {
        return null;
      }
      return ConversionPatterns.listType(rep, name, nestedType);
    } else if (field.isStruct()) {
      Type[] fields = toSchema(field.gettStructDescriptor(), currentFieldPath);//if all child nodes dont exist, simply return null for current layer
      if (fields.length == 0) {
        return null;
      }
      return new GroupType(rep, name, fields);

    } else if (field.isMap()) {
      final Field mapKeyField = field.getMapKeyField();
      final Field mapValueField = field.getMapValueField();

      currentFieldPath.add(""key"");
      Type keyType = toSchema(""key"", mapKeyField, REQUIRED, currentFieldPath);
      currentFieldPath.remove(currentFieldPath.size() - 1);

      currentFieldPath.add(""value"");
      Type valueType = toSchema(""value"", mapValueField, OPTIONAL, currentFieldPath);
      currentFieldPath.remove(currentFieldPath.size() - 1);

      if (keyType == null && valueType == null)
        return null;
      if (keyType == null)
        throw new ThriftProjectionException(""key of map is not specified in projection: "" + currentFieldPath);
      if (valueType == null)
        throw new ThriftProjectionException(""value of map is not specified in projection: "" + currentFieldPath);
      return ConversionPatterns.mapType(rep, name,
              keyType,
              valueType);
    } else {
      //following for leaves
      if (!fieldProjectionFilter.isMatched(currentFieldPath))
        return null;

      if (field.isBuffer()) {
        return new PrimitiveType(rep, BINARY, name);
      } else if (field.isEnum()) {
        return new PrimitiveType(rep, BINARY, name, ENUM);
      } else {
        switch (field.getType()) {
          case TType.I64:
            return new PrimitiveType(rep, INT64, name);
          case TType.STRING:
            return new PrimitiveType(rep, BINARY, name, UTF8);
          case TType.BOOL:
            return new PrimitiveType(rep, BOOLEAN, name);
          case TType.I32:
            return new PrimitiveType(rep, INT32, name);
          case TType.BYTE:
            return new PrimitiveType(rep, INT32, name);
          case TType.DOUBLE:
            return new PrimitiveType(rep, DOUBLE, name);
          case TType.I16:
            return new PrimitiveType(rep, INT32, name);
          case TType.MAP:
          case TType.ENUM:
          case TType.SET:
          case TType.LIST:
          case TType.STRUCT:
          case TType.STOP:
          case TType.VOID:
          default:
            throw new RuntimeException(""unsupported type "" + field.getType() + "" "" + field.getName());
        }
      }
    }
  }",by default we can make everything optional,0,980
7441,"public boolean putFilter(File file) throws Exception
    {
        try {
            String sName = file.getAbsolutePath();
            if (filterClassLastModified.get(sName) != null && (file.lastModified() != filterClassLastModified.get(sName))) {
                LOG.debug(""reloading filter "" + sName);
                filterRegistry.remove(sName);
            }
            ZuulFilter filter = filterRegistry.get(sName);
            if (filter == null) {
                Class clazz = compiler.compile(file);
                if (!Modifier.isAbstract(clazz.getModifiers())) {
                    filter = FILTER_FACTORY.newInstance(clazz);
                    putFilter(sName, filter, file.lastModified());
                    return true;
                }
            }
        }
        catch (Exception e) {
            LOG.error(""Error loading filter! Continuing. file="" + String.valueOf(file), e);
            return false;
        }

        return false;
    }","From a file this will read the ZuulFilter source code, compile it, and add it to the list of current filters a true response means that it was successful.",0,265
5438,"protected WriteConcern prepareWriteConcern(MongoAction mongoAction) {

		WriteConcern wc = writeConcernResolver.resolve(mongoAction);
		return potentiallyForceAcknowledgedWrite(wc);
	}",Prepare the WriteConcern before any processing is done using it.,0,41
6265,"public boolean hasWrittenAllDataBefore( Date date )
    {
        final boolean localNode = hasLocalNodeWrittenAllDataBefore( date );
        if ( !localNode )
        {
            return false;
        }

        // Check all other cluster nodes.
        final Collection<Object> objects = CacheFactory.doSynchronousClusterTask( new HasWrittenAllDataTask( date ), false );
        for ( final Object object : objects )
        {
            if ( !( (Boolean) object ) ) {
                return false;
            }
        }
        return true;
    }",Returns true if none of the queues hold data that was delivered before the provided argument.,0,152
6779,"private SpearmanRankedVectors rankedVectors(final Frame originalUnsortedFrame, final int vecIdX, final int vecIdY) {
    Frame sortedX = new Frame(originalUnsortedFrame.vec(vecIdX).makeCopy());
    Scope.track(sortedX);
    Frame sortedY = new Frame(originalUnsortedFrame.vec(vecIdY).makeCopy());
    Scope.track(sortedY);

    final boolean xIsOrdered = needsOrdering(sortedX.vec(0));
    final boolean yIsOrdered = needsOrdering(sortedY.vec(0));
    if (xIsOrdered) {
      FrameUtils.labelRows(sortedX, ""label"");
      sortedX = sortedX.sort(new int[]{0});
      Scope.track(sortedX);

    }

    if (yIsOrdered) {
      FrameUtils.labelRows(sortedY, ""label"");
      sortedY = sortedY.sort(new int[]{0});
      Scope.track(sortedY);
    }

    assert sortedX.numRows() == sortedY.numRows();
    // H2O does not count mean on categorical columns
    final Vec orderX = needsOrdering(sortedX.vec(0)) ? Vec.makeZero(sortedX.numRows()) : originalUnsortedFrame.vec(vecIdX).makeCopy(null, Vec.T_NUM);
    final Vec orderY = needsOrdering(sortedY.vec(0)) ? Vec.makeZero(sortedY.numRows()) : originalUnsortedFrame.vec(vecIdY).makeCopy(null, Vec.T_NUM);

    final Vec xLabel = sortedX.vec(""label"") == null ? sortedX.vec(0) : sortedX.vec(""label"");
    final Vec xValue = sortedX.vec(0);
    final Vec yLabel = sortedY.vec(""label"") == null ? sortedY.vec(0) : sortedY.vec(""label"");
    final Vec yValue = sortedY.vec(0);
    Scope.track(xLabel);
    Scope.track(yLabel);

    final Vec.Writer orderXWriter = orderX.open();
    final Vec.Writer orderYWriter = orderY.open();
    final Vec.Reader xValueReader = xValue.new Reader();
    final Vec.Reader yValueReader = yValue.new Reader();
    final Vec.Reader xLabelReader = xLabel.new Reader();
    final Vec.Reader yLabelReader = yLabel.new Reader();

    // Put the actual rank into the vectors with ranks. Ensure equal values share the same rank.
    double lastX = Double.NaN;
    double lastY = Double.NaN;
    long skippedX = 0;
    long skippedY = 0;
    for (int i = 0; i < orderX.length(); i++) {
      if (xIsOrdered) {
        if (lastX == xValueReader.at(i)) {
          skippedX++;
        } else {
          skippedX = 0;
        }
        lastX = xValueReader.at(i);
        orderXWriter.set(xLabelReader.at8(i) - 1, i - skippedX);
      }
      if (yIsOrdered) {
        if (lastY == yValueReader.at(i)) {
          skippedY++;
        } else {
          skippedY = 0;
        }
        lastY = yValueReader.at(i);
        orderYWriter.set(yLabelReader.at8(i) - 1, i - skippedY);
      }
    }
    orderXWriter.close();
    orderYWriter.close();

    return new SpearmanRankedVectors(orderX, orderY);
  }",Sorts and ranks the vectors of which SCC is calculated.,0,935
6601,"public Set<OsRealmObjectSchema> getAll() {
        long[] ptrs = nativeGetAll(nativePtr);
        Set<OsRealmObjectSchema> schemas = new LinkedHashSet<>(ptrs.length);
        for (int i = 0; i < ptrs.length; i++) {
            schemas.add(new OsRealmObjectSchema(ptrs[i]));
        }
        return schemas;
    }",Returns the  RealmObjectSchema for all RealmObject classes that can be saved in this Realm.,0,108
6891,"public int collapseAll(int level) {
		hashItems = new LinkedHashSet<>(mItems);
		int collapsed = recursiveCollapse(0, mItems, level);
		mItems = new ArrayList<>(hashItems);
		hashItems = null;
		return collapsed;
	}",Collapses all expandable items with the level equals-higher than the specified level.,0,79
6406,"public MongoCursor<Document> execute(final Session session) {
        CommandResult result = executeWrappedCommandProtocol(namespace, asCommandDocument(), new DocumentCodec(), new DocumentCodec(),
                                                             readPreference, session);
        return transformResult(result, transform());
    }",Will return a cursor of Documents containing the results of the group operation.,0,74
5443,"protected UriRoute buildRoute(HttpMethod httpMethod, String uri, Class<?> type, String method, Class... parameterTypes) {
        Optional<MethodExecutionHandle<Object>> executionHandle = executionHandleLocator.findExecutionHandle(type, method, parameterTypes);

        MethodExecutionHandle<Object> executableHandle = executionHandle.orElseThrow(() ->
            new RoutingException(""No such route: "" + type.getName() + ""."" + method)
        );

        return buildRoute(httpMethod, uri, executableHandle);
    }",Build a route.,0,138
5886,"boolean expectCanAssignTo(Node n, JSType rightType, JSType leftType, String msg) {
    if (leftType.isTemplateType()) {
      TemplateType left = leftType.toMaybeTemplateType();
      if (rightType.containsReferenceAncestor(left)
          || rightType.isUnknownType()
          || left.isUnknownType()) {
        // The only time we can assign to a variable with a template type is if the value assigned
        // has a type that explicitly has it as a supertype.
        // Otherwise, the template type is existential and it is unknown whether or not it is a
        // proper super type.
        return true;
      } else {
        registerMismatchAndReport(
            n, TYPE_MISMATCH_WARNING, msg, rightType, leftType, new HashSet<>(), new HashSet<>());
        return false;
      }
    }
    if (!rightType.isSubtypeOf(leftType)) {
      mismatch(n, msg, rightType, leftType);
      return false;
    } else if (!rightType.isSubtypeWithoutStructuralTyping(leftType)) {
      TypeMismatch.recordImplicitInterfaceUses(this.implicitInterfaceUses, n, rightType, leftType);
      TypeMismatch.recordImplicitUseOfNativeObject(this.mismatches, n, rightType, leftType);
    }
    return true;
  }",Expect that the first type can be assigned to a symbol of the second type.,0,271
6491,"public static Vec numericToCategorical(Vec src) {
    if (src.isInt()) {
      int min = (int) src.min(), max = (int) src.max();
      // try to do the fast domain collection
      long dom[] = (min >= 0 && max < Integer.MAX_VALUE - 4) ? new CollectDomainFast(max).doAll(src).domain() : new CollectIntegerDomain().doAll(src).domain();
      if (dom.length > Categorical.MAX_CATEGORICAL_COUNT)
        throw new H2OIllegalArgumentException(""Column domain is too large to be represented as an categorical: "" + dom.length + "" > "" + Categorical.MAX_CATEGORICAL_COUNT);
      return copyOver(src, Vec.T_CAT, dom);
    } else if(src.isNumeric()){
      final double [] dom = new CollectDoubleDomain(null,10000).doAll(src).domain();
      String [] strDom = new String[dom.length];
      for(int i = 0; i < dom.length; ++i)
        strDom[i] = String.valueOf(dom[i]);
      Vec dst = src.makeZero(strDom);
      new MRTask(){
        @Override public void map(Chunk c0, Chunk c1){
          for(int r = 0; r < c0._len; ++r){
            double d = c0.atd(r);
            if(Double.isNaN(d))
              c1.setNA(r);
            else
              c1.set(r,Arrays.binarySearch(dom,d));
          }
        }
      }.doAll(new Vec[]{src,dst});
      assert dst.min() == 0;
      assert dst.max() == dom.length-1;
      return dst;
    } else throw new IllegalArgumentException(""calling numericToCategorical conversion on a non numeric column"");
  }",Create a new  Vec of categorical values from a numeric  Vec.,0,517
6462,"static String valueToString(Object value, int indentFactor, int indent)
            throws JSONException {
        if (value == null || value.equals(null)) {
            return ""null"";
        }
        if (value instanceof Number) {
            return numberToString((Number) value);
        }
        if (value instanceof Boolean) {
            return value.toString();
        }
        if (value instanceof JSONObject) {
            return ((JSONObject) value).toString(indentFactor, indent);
        }
        if (value instanceof JSONArray) {
            return ((JSONArray) value).toString(indentFactor, indent);
        }
        if (value instanceof Map) {
            return new JSONObject((Map) value).toString(indentFactor, indent);
        }
        if (value instanceof Collection) {
            return new JSONArray((Collection) value).toString(indentFactor, indent);
        }
        if (value.getClass().isArray()) {
            return new JSONArray(value).toString(indentFactor, indent);
        }
        return quote(value.toString());
    }",Make a prettyprinted JSON text of an object value.,0,323
6854,"public Type getType() {
        if (type == null) {
            return Type.text_single;
        }
        return type;
    }",Returns an indicative of the format for the data to answer.,0,44
5881,"public EnricherSpec requestSubFlow(IntegrationFlow subFlow) {
		return requestChannel(obtainInputChannelFromFlow(subFlow));
	}",The request sub-flow.,0,28
6906,"boolean recache(int blockIndex) throws IOException {
    boolean succeed = true;
    String path = getUfsPath();
    UnderFileSystem underFsClient = UnderFileSystem.get(path, mTachyonConf);

    try {
      InputStream inputStream = underFsClient.open(path);

      long length = getBlockSizeByte();
      long offset = blockIndex * length;
      inputStream.skip(offset);

      int bufferBytes = mTachyonConf.getInt(Constants.USER_FILE_BUFFER_BYTES, Constants.MB) * 4;
      byte[] buffer = new byte[bufferBytes];

      BlockOutStream bos = new BlockOutStream(this, WriteType.TRY_CACHE, blockIndex, mTachyonConf);
      try {
        int limit;
        while (length > 0 && ((limit = inputStream.read(buffer)) >= 0)) {
          if (limit != 0) {
            try {
              if (length >= limit) {
                bos.write(buffer, 0, limit);
                length -= limit;
              } else {
                bos.write(buffer, 0, (int) length);
                length = 0;
              }
            } catch (IOException e) {
              LOG.warn(e.getMessage(), e);
              succeed = false;
              break;
            }
          }
        }
      } finally {
        if (succeed) {
          bos.close();
        } else {
          bos.cancel();
        }
      }
    } catch (IOException e) {
      LOG.warn(e.getMessage(), e);
      return false;
    }

    return succeed;
  }",Re-cache the block into memory,0,467
6274,"public Vector3 div (float value) {
		return this.mul(1/value);
	}",Divides all components of this vector by the given value,0,30
6214,"public Buffer toBuffer() {
    return Json.encodeToBuffer(list);
  }",Encode this JSON object as buffer.,0,24
5633,"public static BigInteger createBigInteger(String str) {
        if (str == null) {
            return null;
        }
        return new BigInteger(str);
    }",Convert a String to a BigInteger. Returns null if the string is null.,0,52
6860,"protected KernelServices installInController(String subsystemXml) throws Exception {
        return delegate.installInController(subsystemXml);
    }",Initializes the controller and populates the subsystem model from the passed in xml.,0,31
5860,"public static RequestPredicate path(String pattern) {
		Assert.notNull(pattern, ""'pattern' must not be null"");
		return new PathPatternPredicate(DEFAULT_PATTERN_PARSER.parse(pattern));
	}",Return a  RequestPredicate that tests against the given path pattern.,0,48
5998,"public Object getValue() {
        try {
            Object object = instance;
            for (Method m : getMethods) {
                object = m.invoke(object);
            }
            return object;
        } catch (final Throwable e) {
            throw new MethodException(this, e);
        }
    }",Gets the value stored in the Property.,0,97
7292,"public AccountAttributes getAccount(String googleId, boolean retrieveStudentProfile) {
        Assumption.assertNotNull(Const.StatusCodes.DBLEVEL_NULL_INPUT, googleId);
        return googleId.isEmpty() ? null : makeAttributesOrNull(getAccountEntity(googleId, retrieveStudentProfile));
    }",Gets the data transfer version of the account.,0,64
5957,"public String validateErrorUpdate(String xml) throws SAXException {
    try {
      return checkUpdateStatus(xml, ""1"");
    } catch (SolrException e) {
      // return ((SolrException)e).getMessage();
      return null;  // success
    }
  }","Validates that an ""update"" (add, commit or optimize) results in success.",0,66
7504,"private FetchBufferPart fetch(long pos, int size) {
            long remaining = limit - pos;

            size = (int)Math.min(size, remaining);

            return size <= 0 ? null :
                new FetchBufferPart(delegate.hadoop().readData(delegate, pos, size, null, 0, 0), pos, size);
        }",Starts asynchronous fetch for given region.,0,111
5389,"public Observable<T> observable() {
        return Observable.create(
                subscriber -> {
                    try {
                        subscriber.onNext(send());
                        subscriber.onCompleted();
                    } catch (Exception e) {
                        subscriber.onError(e);
                    }
                }
        );
    }",Provide an observable to emit result from our function.,0,88
5897,"public List<StreamHost> getLocalStreamHost() {
        List<StreamHost> streamHosts = new ArrayList<>();

        XMPPConnection connection = connection();
        EntityFullJid myJid = connection.getUser();

        for (Socks5Proxy socks5Server : Socks5Proxy.getRunningProxies()) {
            List<String> addresses = socks5Server.getLocalAddresses();
            if (addresses.isEmpty()) {
                // local address could not be determined
                return null;
            }
            final int port = socks5Server.getPort();

            outerloop: for (String address : addresses) {
                // Prevent loopback addresses from appearing as streamhost
                final String[] loopbackAddresses = { ""127.0.0.1"", ""0:0:0:0:0:0:0:1"", ""::1"" };
                for (String loopbackAddress : loopbackAddresses) {
                    // Use 'startsWith' here since IPv6 addresses may have scope ID,
                    // ie. the part after the '%' sign.
                    if (address.startsWith(loopbackAddress)) {
                        continue outerloop;
                    }
                }
                streamHosts.add(new StreamHost(myJid, address, port));
            }
        }

        return streamHosts;
    }",Returns the stream host information of the local SOCKS5 proxy containing the IP address and the port or null if local SOCKS5 proxy is not running.,0,271
5596,"public static AggregationFunction getAggregationFunction(String functionName) {
    AggregationFunction function;
    switch (functionName.toLowerCase()) {
      case COUNT_AGGREGATION_FUNCTION:
        function = new CountAggregationFunction();
        break;

      case MIN_AGGREGATION_FUNCTION:
        function = new MinAggregationFunction();
        break;

      case MAX_AGGREGATION_FUNCTION:
        function = new MaxAggregationFunction();
        break;

      case SUM_AGGREGATION_FUNCTION:
        function = new SumAggregationFunction();
        break;

      case AVG_AGGREGATION_FUNCTION:
        function = new AvgAggregationFunction();
        break;

      case MINMAXRANGE_AGGREGATION_FUNCTION:
        function = new MinMaxRangeAggregationFunction();
        break;

      case DISTINCTCOUNT_AGGREGATION_FUNCTION:
        function = new DistinctCountAggregationFunction();
        break;

      case DISTINCTCOUNTHLL_AGGREGATION_FUNCTION:
        function = new DistinctCountHLLAggregationFunction();
        break;

      case FASTHLL_AGGREGATION_FUNCTION:
        function = new FastHllAggregationFunction();
        break;

      case PERCENTILE50_AGGREGATION_FUNCTION:
        function = new PercentileAggregationFunction(50);
        break;

      case PERCENTILE90_AGGREGATION_FUNCTION:
        function = new PercentileAggregationFunction(90);
        break;

      case PERCENTILE95_AGGREGATION_FUNCTION:
        function = new PercentileAggregationFunction(95);
        break;

      case PERCENTILE99_AGGREGATION_FUNCTION:
        function = new PercentileAggregationFunction(99);
        break;

      case PERCENTILEEST50_AGGREGATION_FUNCTION:
        function = new PercentileestAggregationFunction(50);
        break;

      case PERCENTILEEST90_AGGREGATION_FUNCTION:
        function = new PercentileestAggregationFunction(90);
        break;

      case PERCENTILEEST95_AGGREGATION_FUNCTION:
        function = new PercentileestAggregationFunction(95);
        break;

      case PERCENTILEEST99_AGGREGATION_FUNCTION:
        function = new PercentileestAggregationFunction(99);
        break;

      case COUNT_MV_AGGREGATION_FUNCTION:
        function = new CountMVAggregationFunction();
        break;

      case MIN_MV_AGGREGATION_FUNCTION:
        function = new MinMVAggregationFunction();
        break;

      case MAX_MV_AGGREGATION_FUNCTION:
        function = new MaxMVAggregationFunction();
        break;

      case SUM_MV_AGGREGATION_FUNCTION:
        function = new SumMVAggregationFunction();
        break;

      case AVG_MV_AGGREGATION_FUNCTION:
        function = new AvgMVAggregationFunction();
        break;

      case MINMAXRANGE_MV_AGGREGATION_FUNCTION:
        function = new MinMaxRangeMVAggregationFunction();
        break;

      case DISTINCTCOUNT_MV_AGGREGATION_FUNCTION:
        function = new DistinctCountMVAggregationFunction();
        break;

      case DISTINCTCOUNTHLL_MV_AGGREGATION_FUNCTION:
        function = new DistinctCountHLLMVAggregationFunction();
        break;

      case PERCENTILE50_MV_AGGREGATION_FUNCTION:
        function = new PercentileMVAggregationFunction(50);
        break;

      case PERCENTILE90_MV_AGGREGATION_FUNCTION:
        function = new PercentileMVAggregationFunction(90);
        break;

      case PERCENTILE95_MV_AGGREGATION_FUNCTION:
        function = new PercentileMVAggregationFunction(95);
        break;

      case PERCENTILE99_MV_AGGREGATION_FUNCTION:
        function = new PercentileMVAggregationFunction(99);
        break;

      case PERCENTILEEST50_MV_AGGREGATION_FUNCTION:
        function = new PercentileestMVAggregationFunction(50);
        break;

      case PERCENTILEEST90_MV_AGGREGATION_FUNCTION:
        function = new PercentileestMVAggregationFunction(90);
        break;

      case PERCENTILEEST95_MV_AGGREGATION_FUNCTION:
        function = new PercentileestMVAggregationFunction(95);
        break;

      case PERCENTILEEST99_MV_AGGREGATION_FUNCTION:
        function = new PercentileestMVAggregationFunction(99);
        break;

      default:
        throw new RuntimeException(""Unsupported aggregation function: "" + functionName);
    }
    return function;
  }","Given the name of aggregation function, create and return a new instance of the corresponding aggregation function and return.",0,841
7192,"public boolean isMute()
    {
        MediaDevice device = getDevice();

        return
            (device instanceof MediaDeviceImpl)
                ? ((MediaDeviceImpl) device).isMute()
                : false;
    }","Determines whether this MediaStream is set to transmit ""silence"" instead of the media being fed from its MediaDevice.",0,60
7721,"protected String determineValueColumnName(Properties params, Dialect dialect) {
		ObjectNameNormalizer normalizer = ( ObjectNameNormalizer ) params.get( IDENTIFIER_NORMALIZER );
		String name = PropertiesHelper.getString( VALUE_COLUMN_PARAM, params, DEF_VALUE_COLUMN );
		return dialect.quote( normalizer.normalizeIdentifierQuoting( name ) );
	}",Determine the name of the column used to store the generator value in the db.,0,87
6392,"public static InputStream getInputStreamFromUriString(String uriString, CordovaInterface cordova) throws IOException {
        if (uriString.startsWith(""content:"")) {
            Uri uri = Uri.parse(uriString);
            return cordova.getActivity().getContentResolver().openInputStream(uri);
        } else if (uriString.startsWith(""file:///android_asset/"")) {
            Uri uri = Uri.parse(uriString);
            String relativePath = uri.getPath().substring(15);
            return cordova.getActivity().getAssets().open(relativePath);
        } else if (uriString.startsWith(""file://"")) {
            return new FileInputStream(getRealPath(uriString, cordova));
        } else {
            return null;
        }
    }",Returns an input stream based on given URI string.,0,203
6577,"public boolean wouldFit(WorkerSlot ws, ExecutorDetails exec, TopologyDetails td) {
        assert nodeId.equals(ws.getNodeId()) : ""Slot "" + ws + "" is not a part of this node "" + nodeId;
        if (!isAlive || !cluster.wouldFit(
                ws,
                exec,
                td,
                getTotalAvailableResources(),
                td.getTopologyWorkerMaxHeapSize())) {
            return false;
        }

        boolean oneExecutorPerWorker = (Boolean) td.getConf().get(Config.TOPOLOGY_RAS_ONE_EXECUTOR_PER_WORKER);
        boolean oneComponentPerWorker = (Boolean) td.getConf().get(Config.TOPOLOGY_RAS_ONE_COMPONENT_PER_WORKER);

        if (oneExecutorPerWorker) {
            return !getUsedSlots(td.getId()).contains(ws);
        }

        if (oneComponentPerWorker) {
            Set<String> components = new HashSet<>();
            Map<String, Collection<ExecutorDetails>> topologyExecutors = topIdToUsedSlots.get(td.getId());
            if (topologyExecutors != null) {
                Collection<ExecutorDetails> slotExecs = topologyExecutors.get(ws.getId());
                if (slotExecs != null) {
                    // components from WorkerSlot
                    for (ExecutorDetails slotExec : slotExecs) {
                        components.add(td.getComponentFromExecutor(slotExec));
                    }
                    // component from exec
                    components.add(td.getComponentFromExecutor(exec));
                }
            }
            return components.size() <= 1;
        }

        return true;
    }",Would scheduling exec in ws fit with the current resource constraints.,0,388
7229,"public static Vec makeCon(double x, long len, int log_rows_per_chunk) {
    int nchunks = (int)Math.max(1,len >> log_rows_per_chunk);
    long[] espc = new long[nchunks+1];
    for( int i=0; i<nchunks; i++ )
      espc[i] = ((long)i)<<log_rows_per_chunk;
    espc[nchunks] = len;
    Vec v0 = makeCon(x,VectorGroup.VG_LEN1,espc);
    int chunks = (int)Math.min( 4 * H2O.NUMCPUS * H2O.CLOUD.size(), v0.length());
    if( v0.nChunks() < chunks && v0.length() > 10*chunks ) { // Rebalance
      Key newKey = Key.make("".makeConRebalance"" + chunks);
      Frame f = new Frame(v0);
      RebalanceDataSet rb = new RebalanceDataSet(f, newKey, chunks);
      H2O.submitTask(rb);
      rb.join();
      Keyed.remove(v0._key);
      v0 = (((Frame)DKV.getGet(newKey)).anyVec()).makeCopy(null); // this is gross.
      Keyed.remove(newKey);
    }
    return v0;
  }",Make a new constant vector with the given row count.,0,354
5982,"public static byte[] decodeFromString(String src) {
		if (src == null) {
			return null;
		}
		if (src.length() == 0) {
			return new byte[0];
		}
		return decode(src.getBytes(DEFAULT_CHARSET));
	}",Base64-decode the given byte array from an UTF-8 String.,0,89
6320,"public AppPage verifyHtmlMainContent(String filePath) throws IOException {
        return verifyHtmlPart(By.id(""mainContent""), filePath);
    }","Verifies that main content specified id ""mainContent"" in currently loaded page has the same HTML content as the content given in the file at  filePath.",0,39
6914,"public Resolution resolve(AlluxioURI uri) throws InvalidPathException {
    try (LockResource r = new LockResource(mReadLock)) {
      String path = uri.getPath();
      LOG.debug(""Resolving {}"", path);
      // This will re-acquire the read lock, but that is allowed.
      String mountPoint = getMountPoint(uri);
      if (mountPoint != null) {
        MountInfo info = mMountTable.get(mountPoint);
        AlluxioURI ufsUri = info.getUfsUri();
        UnderFileSystem ufs = mUfsManager.getByMountId(info.getMountId());
        AlluxioURI resolvedUri = ufs.resolveUri(ufsUri, path.substring(mountPoint.length()));
        return new Resolution(resolvedUri, ufs, info.getOptions().isShared(), info.getMountId());
      }
      // TODO(binfan): throw exception as we should never reach here
      return new Resolution(uri, null, false, IdUtils.INVALID_MOUNT_ID);
    }
  }",Resolves the given Alluxio path.,0,236
7810,"public ApiResponse<Void> createUsersWithListInputWithHttpInfo(List<User> body) throws ApiException {
        okhttp3.Call localVarCall = createUsersWithListInputValidateBeforeCall(body, null, null);
        return localVarApiClient.execute(localVarCall);
    }",Creates list of users with given input array,0,58
7707,"public static Socket socket(URI uri, Options opts) {
        if (opts == null) {
            opts = new Options();
        }

        URL parsed = Url.parse(uri);
        URI source;
        try {
            source = parsed.toURI();
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
        String id = Url.extractId(parsed);
        String path = parsed.getPath();
        boolean sameNamespace = managers.containsKey(id)
                && managers.get(id).nsps.containsKey(path);
        boolean newConnection = opts.forceNew || !opts.multiplex || sameNamespace;
        Manager io;

        if (newConnection) {
            logger.fine(String.format(""ignoring socket cache for %s"", source));
            io = new Manager(source, opts);
        } else {
            if (!managers.containsKey(id)) {
                logger.fine(String.format(""new io instance for %s"", source));
                managers.putIfAbsent(id, new Manager(source, opts));
            }
            io = managers.get(id);
        }

        String query = parsed.getQuery();
        if (query != null && (opts.query == null || opts.query.isEmpty())) {
            opts.query = query;
        }

        return io.socket(parsed.getPath(), opts);
    }",Initializes a  Socket from an existing  Manager for multiplexing.,0,422
6395,"public boolean writeChunkToDisk() {
        // Don't save fresh chunks
        if (_fresh) {
            return false;
        }

        if (Game.getInstance().isSandboxed()) {
            return false;
        }

        ByteBuffer output = BufferUtils.createByteBuffer(_blocks.getSize() + _sunlight.getPackedSize() + _light.getPackedSize() + 1);
        File f = new File(String.format(""%s/%d.bc"", getParent().getWorldSavePath(), getChunkId()));

        // Save flags...
        byte flags = 0x0;
        if (_lightDirty) {
            flags = Helper.setFlag(flags, (short) 0);
        }

        // The flags are stored within the first byte of the file...
        output.put(flags);


        for (int i = 0; i < _blocks.getSize(); i++)
            output.put(_blocks.getRawByte(i));

        for (int i = 0; i < _sunlight.getPackedSize(); i++)
            output.put(_sunlight.getRawByte(i));

        for (int i = 0; i < _light.getPackedSize(); i++)
            output.put(_light.getRawByte(i));

        output.rewind();

        try {
            FileOutputStream oS = new FileOutputStream(f);
            FileChannel c = oS.getChannel();
            c.write(output);
            Game.getInstance().getLogger().log(Level.FINE, ""Wrote chunk {0} to disk."", this);
            oS.close();
        } catch (FileNotFoundException ex) {
            Game.getInstance().getLogger().log(Level.SEVERE, null, ex);
            return false;
        } catch (IOException ex) {
            Game.getInstance().getLogger().log(Level.SEVERE, null, ex);
            return false;
        }

        return true;
    }",Saves this chunk to disk.,0,515
5729,"public ModelAndView handleRequestInternal(final HttpServletRequest request, final HttpServletResponse response) throws Exception {

        final J2EContext context = new J2EContext(request, response);
        final ProfileManager manager = new ProfileManager(context);

        if (!verifyAuthorizeRequest(request) || !isRequestAuthenticated(manager, context)) {
            LOGGER.error(""Authorize request verification failed"");
            final Map model = new HashMap<>();
            model.put(""rootCauseException"", new UnauthorizedServiceException(UnauthorizedServiceException.CODE_UNAUTHZ_SERVICE, StringUtils.EMPTY));
            return new ModelAndView(OAuthConstants.ERROR_VIEW, model);
        }

        final String clientId = context.getRequestParameter(OAuthConstants.CLIENT_ID);
        final OAuthRegisteredService registeredService = OAuthUtils.getRegisteredOAuthService(getServicesManager(), clientId);
        try {
            RegisteredServiceAccessStrategyUtils.ensureServiceAccessIsAllowed(clientId, registeredService);
        } catch (final Exception e) {
            LOGGER.error(e.getMessage(), e);
            final Map model = new HashMap<>();
            model.put(""rootCauseException"", new UnauthorizedServiceException(UnauthorizedServiceException.CODE_UNAUTHZ_SERVICE, StringUtils.EMPTY));
            return new ModelAndView(OAuthConstants.ERROR_VIEW, model);
        }

        final ModelAndView mv = this.consentApprovalViewResolver.resolve(context, registeredService);
        if (!mv.isEmpty() && mv.hasView()) {
            return mv;
        }

        return redirectToCallbackRedirectUrl(manager, registeredService, context, clientId);

    }",Handle request internal model and view.,0,395
6511,"Set<SourceName> sourcesWithField(final ColumnName columnName) {

    final Optional<String> maybeSourceName = SchemaUtil.getFieldNameAlias(columnName.name());
    if (!maybeSourceName.isPresent()) {
      return sourceSchemas.entrySet().stream()
          .filter(e -> e.getValue().findColumn(columnName).isPresent())
          .map(Entry::getKey)
          .collect(Collectors.toSet());
    }

    final SourceName sourceName = SourceName.of(maybeSourceName.get());
    final ColumnName baseColumnName = ColumnName
        .of(SchemaUtil.getFieldNameWithNoAlias(columnName.name()));

    final LogicalSchema sourceSchema = sourceSchemas.get(sourceName);
    if (sourceSchema == null) {
      return ImmutableSet.of();
    }

    return sourceSchema.findColumn(baseColumnName).isPresent()
        ? ImmutableSet.of(sourceName)
        : ImmutableSet.of();
  }",Find the name of any sources containing the supplied  columnName.,0,251
6747,"public String toVisibilityString(){
        return Sanitizer.sanitizeForHtml(displayNameVisibility);
    }",Formats the participant type for display to user in the response visibility section.,0,23
7888,"public boolean equals(Object obj)
    {
        return this == obj
            || (obj instanceof Pair)
            && Util.equal(this.left, ((Pair) obj).left)
            && Util.equal(this.right, ((Pair) obj).right);
    }",Creates a Pair of appropriate type.,0,88
7304,"public static boolean isDistributedLogReplay(Configuration conf) {
    boolean dlr = conf.getBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,
      HConstants.DEFAULT_DISTRIBUTED_LOG_REPLAY_CONFIG);
    int version = conf.getInt(HFile.FORMAT_VERSION_KEY, HFile.MAX_FORMAT_VERSION);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""Distributed log replay="" + dlr + "", "" + HFile.FORMAT_VERSION_KEY + ""="" + version);
    }
    // For distributed log replay, hfile version must be 3 at least; we need tag support.
    return dlr && (version >= 3);
  }",Returns if distributed log replay is turned on or not,0,137
6387,"public boolean removeBody(String language) {
        language = determineLanguage(language);
        for (Body body : getBodies()) {
            String bodyLanguage = body.getLanguage();
            if (Objects.equals(bodyLanguage, language)) {
                removeExtension(body);
                return true;
            }
        }
        return false;
    }",Removes the body with the given language from the message.,0,100
6778,"public boolean execute() throws SQLException {
        final boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();
        final Map<String, Object> dataMap = ExecutorDataMap.getDataMap();
        List<Boolean> result = executorEngine.execute(preparedStatementUnits, new ExecuteCallback<Boolean>() {
            
            @Override
            public Boolean execute(final BaseStatementUnit baseStatementUnit) throws Exception {
                return ((PreparedStatement) baseStatementUnit.getStatement()).execute();
            }
            
            @Override
            public SQLType getSQLType() {
                return sqlType;
            }
            
            @Override
            public boolean isExceptionThrown() {
                return isExceptionThrown;
            }
            
            @Override
            public Map<String, Object> getDataMap() {
                return dataMap;
            }
        });
        if (null == result || result.isEmpty() || null == result.get(0)) {
            return false;
        }
        return result.get(0);
    }",Execute SQL.,0,275
5600,"public Pod deploy(Pod pod) throws InfrastructureException {
    putLabel(pod, CHE_WORKSPACE_ID_LABEL, workspaceId);

    ObjectMeta metadata = pod.getMetadata();
    // Note: metadata.name will be changed as for pods it is set by the deployment.
    String originalName = metadata.getName();
    putLabel(pod, CHE_DEPLOYMENT_NAME_LABEL, originalName);

    PodSpec podSpec = pod.getSpec();
    podSpec.setRestartPolicy(""Always""); // Only allowable value
    final CompletableFuture<Pod> createFuture = new CompletableFuture<>();
    final Watch createWatch =
        clientFactory
            .create(workspaceId)
            .pods()
            .inNamespace(namespace)
            .watch(new CreateWatcher(createFuture, workspaceId, originalName));
    try {
      clientFactory
          .create(workspaceId)
          .extensions()
          .deployments()
          .inNamespace(namespace)
          .createNew()
          .withMetadata(metadata)
          .withNewSpec()
          .withReplicas(1)
          .withNewTemplate()
          .withMetadata(metadata)
          .withSpec(podSpec)
          .endTemplate()
          .endSpec()
          .done();
      return createFuture.get(POD_CREATION_TIMEOUT_MIN, TimeUnit.MINUTES);
    } catch (KubernetesClientException e) {
      throw new KubernetesInfrastructureException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new InfrastructureException(
          String.format(
              ""Interrupted while waiting for Pod creation. -id: %s -message: %s"",
              metadata.getName(), e.getMessage()));
    } catch (ExecutionException e) {
      throw new InfrastructureException(
          String.format(
              ""Error occured while waiting for Pod creation. -id: %s -message: %s"",
              metadata.getName(), e.getCause().getMessage()));
    } catch (TimeoutException e) {
      throw new InfrastructureException(
          String.format(
              ""Pod creation timeout exceeded. -id: %s -message: %s"",
              metadata.getName(), e.getMessage()));
    } finally {
      createWatch.close();
    }
  }",Starts the specified Pod via a Deployment.,0,501
7370,"public Cell maybeCloneWithAllocator(Cell cell) {
    if (this.memStoreLAB == null) {
      return cell;
    }

    Cell cellFromMslab = this.memStoreLAB.copyCellInto(cell);
    return (cellFromMslab != null) ? cellFromMslab : cell;
  }","If the segment has a memory allocator the cell is being cloned to this space, and returned; otherwise the given cell is returned",0,80
7912,"public static DateTimeFormatter tTimeNoMillis() {
        return Constants.ttx;
    }","Returns a formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, and time zone offset prefixed by 'T' ('T'HH:mm:ssZZ).",0,23
6654,"public static MediaType getMediaType(ContentPacketExtension content)
    {
        if (content == null)
            return null;

        // We will use content name for determining media type
        // if no RTP description is present(SCTP connection case)
        String mediaTypeName = content.getName();

        RtpDescriptionPacketExtension desc = getRtpDescription(content);
        if (desc != null)
        {
            String rtpMedia = desc.getMedia().toLowerCase();
            if (!StringUtils.isNullOrEmpty(rtpMedia))
            {
                mediaTypeName = rtpMedia;
            }
        }
        if (""application"".equals(mediaTypeName))
        {
            return MediaType.DATA;
        }
        return MediaType.parseString(mediaTypeName);
    }","Returns the MediaType for content by looking for it in the content's description, if any.",0,174
6543,"public static FileText fromLines(File file, List<String> lines) {
        if (lines instanceof FileText) {
            return (FileText) lines;
        }
        else {
            return new FileText(file, lines);
        }
    }",Compatibility conversion.,0,74
7495,"public Response logout() {
        URI redirect = AdminRoot.adminConsoleUrl(session.getContext().getUri()).build(realm.getName());

        return Response.status(302).location(
                OIDCLoginProtocolService.logoutUrl(session.getContext().getUri()).queryParam(""redirect_uri"", redirect.toString()).build(realm.getName())
        ).build();
    }",Logout from the admin console,0,106
6092,"public int read (byte[] b, int off, int len) throws IOException {

        if (advanceChunk()) return -1;
        len = Math.min(len, chunkSize - pos);
        int count = in.read(b, off, len);
        pos += count;
        return count;
    }",Read some bytes from the stream.,0,105
6349,"public static double abs(double a) {
        return Math.abs(a);
    }",Returns the absolute value of a  double value.,0,29
5535,"public static Completable defer(final Supplier<? extends CompletableConsumable> completableSupplier) {
        Objects.requireNonNull(completableSupplier, ""completableSupplier"");
        return create(new CompletableConsumable() {
            @Override
            public void subscribe(CompletableSubscriber s) {
                CompletableConsumable c;
                
                try {
                    c = completableSupplier.get();
                } catch (Throwable e) {
                    s.onSubscribe(EmptyDisposable.INSTANCE);
                    s.onError(e);
                    return;
                }
                
                if (c == null) {
                    s.onSubscribe(EmptyDisposable.INSTANCE);
                    s.onError(new NullPointerException(""The completable returned is null""));
                    return;
                }
                
                c.subscribe(s);
            }
        });
    }",Defers the subscription to a Completable instance returned by a supplier.,0,205
7134,"int doWork() throws IOException {
    // print hbase server version
    errors.print(""Version: "" + status.getHBaseVersion());

    // Make sure regionInfo is empty before starting
    regionInfo.clear();
    tablesInfo.clear();

    // get a list of all regions from the master. This involves
    // scanning the META table
    if (!recordRootRegion()) {
      // Will remove later if we can fix it
      errors.reportError(""Encountered fatal error. Exitting..."");
      return -1;
    }
    getMetaEntries();

    // Check if .META. is found only once and on the right place
    if (!checkMetaEntries()) {
      // Will remove later if we can fix it
      errors.reportError(""Encountered fatal error. Exitting..."");
      return -1;
    }

    // get a list of all tables that have not changed recently.
    AtomicInteger numSkipped = new AtomicInteger(0);
    HTableDescriptor[] allTables = getTables(numSkipped);
    errors.print(""Number of Tables: "" + allTables.length);
    if (details) {
      if (numSkipped.get() > 0) {
        errors.detail(""Number of Tables in flux: "" + numSkipped.get());
      }
      for (HTableDescriptor td : allTables) {
        String tableName = td.getNameAsString();
        errors.detail(""  Table: "" + tableName + ""\t"" +
                           (td.isReadOnly() ? ""ro"" : ""rw"") + ""\t"" +
                           (td.isRootRegion() ? ""ROOT"" :
                            (td.isMetaRegion() ? ""META"" : ""    "")) + ""\t"" +
                           "" families: "" + td.getFamilies().size());
      }
    }

    // From the master, get a list of all known live region servers
    Collection<HServerInfo> regionServers = status.getServerInfo();
    errors.print(""Number of live region servers: "" + 
                       regionServers.size());
    if (details) {
      for (HServerInfo rsinfo: regionServers) {
        errors.print(""  "" + rsinfo.getServerName());
      }
    }

    // From the master, get a list of all dead region servers
    Collection<String> deadRegionServers = status.getDeadServerNames();
    errors.print(""Number of dead region servers: "" + 
                       deadRegionServers.size());
    if (details) {
      for (String name: deadRegionServers) {
        errors.print(""  "" + name);
      }
    }

    // Determine what's deployed
    processRegionServers(regionServers);

    // Determine what's on HDFS
    checkHdfs();

    // Check consistency
    checkConsistency();

    // Check integrity
    checkIntegrity();

    // Print table summary
    printTableSummary();

    return errors.summarize();
  }",Contacts the master and prints out cluster-wide information,0,636
6144,"public List<GlobalSession> readSession(GlobalStatus[] statuses) {
        int[] states = new int[statuses.length];
        for (int i = 0; i < statuses.length; i++) {
            states[i] = statuses[i].getCode();
        }
        //global transaction
        List<GlobalTransactionDO> globalTransactionDOs = logStore.queryGlobalTransactionDO(states, logQueryLimit);
        if (CollectionUtils.isEmpty(globalTransactionDOs)) {
            return null;
        }
        List<String> xids = globalTransactionDOs.stream().map(GlobalTransactionDO::getXid).collect(Collectors.toList());
        List<BranchTransactionDO> branchTransactionDOs = logStore.queryBranchTransactionDO(xids);
        Map<String, List<BranchTransactionDO>> branchTransactionDOsMap = branchTransactionDOs.stream()
            .collect(Collectors.groupingBy(BranchTransactionDO::getXid, LinkedHashMap::new, Collectors.toList()));
        return globalTransactionDOs.stream().map(globalTransactionDO ->
            getGlobalSession(globalTransactionDO, branchTransactionDOsMap.get(globalTransactionDO.getXid())))
            .collect(Collectors.toList());
    }",Read session list.,0,287
5353,"public int getConstantValueIndex() {
		return constantValueIndex & 0xffff;
	}","The const_value_index item is used if the tag item is one of 'B', 'C', 'D', 'F', 'I', 'J', 'S', 'Z', 's'.",0,23
6955,"private T call(URL url) throws IOException, RegistryException {
    String serverUrl = registryEndpointRequestProperties.getServerUrl();
    String imageName = registryEndpointRequestProperties.getImageName();

    Request.Builder requestBuilder =
        Request.builder()
            .setUserAgent(userAgent)
            .setHttpTimeout(JibSystemProperties.getHttpTimeout())
            .setAccept(registryEndpointProvider.getAccept())
            .setBody(registryEndpointProvider.getContent())
            .setAuthorization(authorization);

    try (Response response =
        httpClient.call(registryEndpointProvider.getHttpMethod(), url, requestBuilder.build())) {

      return registryEndpointProvider.handleResponse(response);

    } catch (ResponseException ex) {
      // First, see if the endpoint provider handles an exception as an expected response.
      try {
        return registryEndpointProvider.handleHttpResponseException(ex);

      } catch (ResponseException responseException) {
        if (responseException.getStatusCode() == HttpStatusCodes.STATUS_CODE_BAD_REQUEST
            || responseException.getStatusCode() == HttpStatusCodes.STATUS_CODE_NOT_FOUND
            || responseException.getStatusCode()
                == HttpStatusCodes.STATUS_CODE_METHOD_NOT_ALLOWED) {
          // The name or reference was invalid.
          throw newRegistryErrorException(responseException);

        } else if (responseException.getStatusCode() == HttpStatusCodes.STATUS_CODE_FORBIDDEN) {
          throw new RegistryUnauthorizedException(serverUrl, imageName, responseException);

        } else if (responseException.getStatusCode() == HttpStatusCodes.STATUS_CODE_UNAUTHORIZED) {
          if (responseException.requestAuthorizationCleared()) {
            throw new RegistryCredentialsNotSentException(serverUrl, imageName);
          } else {
            // Credentials are either missing or wrong.
            throw new RegistryUnauthorizedException(serverUrl, imageName, responseException);
          }

        } else {
          // Unknown
          throw responseException;
        }
      }

    } catch (IOException ex) {
      logError(""I/O error for image ["" + serverUrl + ""/"" + imageName + ""]:"");
      logError(""    "" + ex.getMessage());
      logErrorIfBrokenPipe(ex);

      if (ex instanceof SSLException) {
        throw new InsecureRegistryException(url, ex);
      }
      throw ex;
    }
  }",Calls the registry endpoint with a certain  URL.,0,532
5359,"private ResolvedTypeDeclaration checkAncestorsForType(String name, ResolvedReferenceTypeDeclaration declaration) {
        for (ResolvedReferenceType ancestor : declaration.getAncestors()) {
            try {
                for (ResolvedTypeDeclaration internalTypeDeclaration : ancestor.getTypeDeclaration().internalTypes()) {
                    boolean visible = true;
                    if (internalTypeDeclaration instanceof ResolvedReferenceTypeDeclaration) {
                        ResolvedReferenceTypeDeclaration resolvedReferenceTypeDeclaration = internalTypeDeclaration.asReferenceType();
                        if (resolvedReferenceTypeDeclaration instanceof HasAccessSpecifier) {
                            visible = ((HasAccessSpecifier) resolvedReferenceTypeDeclaration).accessSpecifier() != AccessSpecifier.PRIVATE;
                        }
                    }
                    if (internalTypeDeclaration.getName().equals(name)) {
                        if (visible) {
                            return internalTypeDeclaration;
                        } else {
                            return null;
                        }
                    }
                }
                // check recursively the ancestors of this ancestor
                ResolvedTypeDeclaration ancestorDeclaration = checkAncestorsForType(name, ancestor.getTypeDeclaration());
                if (ancestorDeclaration != null) {
                    return ancestorDeclaration;
                }
            } catch (UnsupportedOperationException e) {
                // just continue using the next ancestor
            }
        }
        return null;
    }",Recursively checks the ancestors of the @param declaration if an internal type is declared with a name equal to @param name.,0,278
7906,"public JSONObject getJSONObject(String key) {
    Object object = this.get(key);
    if (object == null) {
      return null;
    }
    if (object instanceof JSONObject) {
      return (JSONObject)object;
    }
    throw new RuntimeException(""JSONObject["" + quote(key) + ""] is not a JSONObject."");
  }",Get the JSONObject value associated with a key.,0,105
7740,"public ArrayList<EditText> getCurrentEditTexts() {
		return getCurrentViews(EditText.class);
	}",Returns a  List of the  EditTexts contained in the current  Activity.,0,27
6772,"public static boolean isFragmentOnBackStack(Fragment fragment) {
      try {
          return fragment.isInBackStack();
      } catch (IllegalAccessError e) {
          return isInBackStackAndroidX(fragment);
      }
  }",Checks whether or not a given fragment is on the backstack of the fragment manager (could also be on top of the backstack and hence visible),0,58
6648,"public static List<Call> getCalls(Call call)
    {
        CallConference conference = call.getConference();
        List<Call> calls;

        if (conference == null)
            calls = Collections.emptyList();
        else
            calls = conference.getCalls();
        return calls;
    }",Gets the list of Calls participating in the telephony conference in which a specific Call is participating.,0,91
7032,"public Object unmarshal( Object o ) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(file));
        try {
            // TODO: expose XStream the driver from XStream
            return xs.unmarshal(DEFAULT_DRIVER.createReader(in), o);
        } catch (StreamException e) {
            throw new IOException2(""Unable to read ""+file,e);
        } catch(ConversionException e) {
            throw new IOException2(""Unable to read ""+file,e);
        } catch(Error e) {// mostly reflection errors
            throw new IOException2(""Unable to read ""+file,e);
        } finally {
            in.close();
        }
    }",Loads the contents of this file into an existing object.,0,176
7150,"public static Vector<Integer> range(int from, int toExclusive) {
        return ofAll(ArrayType.<int[]> asPrimitives(int.class, Iterator.range(from, toExclusive)));
    }","Creates a Vector of int numbers starting from  from, extending to  toExclusive - 1.",0,59
7294,"public GsonBuilder registerTypeAdapter(Type type, Object typeAdapter) {
    return registerTypeAdapter(type, typeAdapter, false);
  }",Configures Gson for custom serialization or deserialization.,0,36
7410,"public File parse(Class cls) throws IOException, Parser.Exception {
        return new Parser(properties).parse(outputDirectory, cls);
    }","Calls  Parser#parse(File, Class) after creating an instance of the",0,44
6905,"public List<ReplicaInfo> simGetReplicaInfos(String node) {
    final List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent
      (node, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);
    // make a defensive copy to avoid ConcurrentModificationException
    return Arrays.asList(replicas.toArray(new ReplicaInfo[replicas.size()]));
  }",Return all replica infos for a node.,0,74
5984,"public String getAsString() {
    if (isNumber()) {
      return getAsNumber().toString();
    } else if (isBoolean()) {
      return getAsBooleanWrapper().toString();
    } else {
      return (String) value;
    }
  }",convenience method to get this element as a String.,0,83
5324,"public SectionHeader getSectionHeader(int index) {
		if (index >= 0 && index < sectionHeaders.length) {
    		return sectionHeaders[index];
    	}
    	return null;
    }",Returns the section header at the specified position in the array.,0,59
7497,"private VisorGgfsProfilerParsedLine parseLine(String s) {
            String[] ss = s.split(DELIM_FIELD);

            long streamId = parseLong(ss, LOG_COL_STREAM_ID, -1);

            if (streamId >= 0) {
                int entryType = parseInt(ss, LOG_COL_ENTRY_TYPE, -1);

                // Parse only needed types.
                if (LOG_TYPES.contains(entryType))
                    return new VisorGgfsProfilerParsedLine(
                        parseLong(ss, LOG_COL_TIMESTAMP, 0),
                        entryType,
                        parseString(ss, LOG_COL_PATH, """"),
                        GridGgfsMode.valueOf(parseString(ss, LOG_COL_GGFS_MODE, """")),
                        streamId,
                        parseLong(ss, LOG_COL_DATA_LEN, 0),
                        parseBoolean(ss, LOG_COL_APPEND, false),
                        parseBoolean(ss, LOG_COL_OVERWRITE, false),
                        parseLong(ss, LOG_COL_POS, 0),
                        parseInt(ss, LOG_COL_READ_LEN, 0),
                        parseLong(ss, LOG_COL_USER_TIME, 0),
                        parseLong(ss, LOG_COL_SYSTEM_TIME, 0),
                        parseLong(ss, LOG_COL_TOTAL_BYTES, 0)
                    );
            }

            return null;
        }",Parse line from log.,0,284
7816,"public Mono<Order> getOrderById(Long orderId) throws RestClientException {
        Object postBody = null;
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, ""Missing the required parameter 'orderId' when calling getOrderById"");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put(""order_id"", orderId);
        String path = UriComponentsBuilder.fromPath(""/store/order/{order_id}"").buildAndExpand(uriVariables).toUriString();

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] accepts = { 
            ""application/xml"", ""application/json""
        };
        final List<MediaType> accept = apiClient.selectHeaderAccept(accepts);
        final String[] contentTypes = { };
        final MediaType contentType = apiClient.selectHeaderContentType(contentTypes);

        String[] authNames = new String[] {  };

        ParameterizedTypeReference<Order> returnType = new ParameterizedTypeReference<Order>() {};
        return apiClient.invokeAPI(path, HttpMethod.GET, queryParams, postBody, headerParams, cookieParams, formParams, accept, contentType, authNames, returnType);
    }",Find purchase order by ID,0,417
5746,"private boolean startXmpp(Socket socket) throws Exception {
		if (Thread.currentThread().isInterrupted()) {
			throw new InterruptedException();
		}
		this.socket = socket;
		tagWriter.setOutputStream(socket.getOutputStream());
		tagReader.setInputStream(socket.getInputStream());
		tagWriter.beginDocument();
		sendStartStream();
		final Tag tag = tagReader.readTag();
		return tag != null && tag.isStart(""stream"");
	}","Starts xmpp protocol, call after connecting to socket",0,139
7697,"protected Object getComponentValue(ComponentType type, Object component, String propertyPath) {
		final int loc = propertyPath.indexOf( '.' );
		final String basePropertyName = loc > 0
				? propertyPath.substring( 0, loc )
				: propertyPath;
		final int index = findSubPropertyIndex( type, basePropertyName );
		final Object baseValue = type.getPropertyValue( component, index, getEntityMode() );
		if ( loc > 0 ) {
			if ( baseValue == null ) {
				return null;
			}
			return getComponentValue(
					(ComponentType) type.getSubtypes()[index],
					baseValue,
					propertyPath.substring(loc+1)
			);
		}
		else {
			return baseValue;
		}
		
	}",Extract a component property value.,0,226
6879,"public static ColumnDefinition extractColumnDefinition(final ParserRuleContext columnDefinitionNode) {
        Optional<ParserRuleContext> columnNameNode = ASTUtils.findFirstChildNode(columnDefinitionNode, RuleName.COLUMN_NAME);
        Preconditions.checkState(columnNameNode.isPresent());
        Optional<ParserRuleContext> dataTypeNode = ASTUtils.findFirstChildNode(columnDefinitionNode, RuleName.DATA_TYPE);
        Optional<String> dataTypeText = dataTypeNode.isPresent() ? Optional.of(dataTypeNode.get().getChild(0).getText()) : Optional.<String>absent();
        Optional<Integer> dataTypeLength = dataTypeNode.isPresent() ? getDataTypeLength(dataTypeNode.get()) : Optional.<Integer>absent();
        boolean isPrimaryKey = ASTUtils.findFirstChildNode(columnDefinitionNode, RuleName.PRIMARY_KEY).isPresent();
        return new ColumnDefinition(columnNameNode.get().getText(), dataTypeText.orNull(), dataTypeLength.orNull(), isPrimaryKey);
    }",Extract column definition.,0,228
6458,"public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {
        if (execResult == null) {
            LOG.warn(""Received a null ExecResult instance to convert!"");
            return null;
        }
        // prefer generic file conversion
        if (execResult.getCommand().getOutFile() != null) {
            return new FileInputStream(execResult.getCommand().getOutFile());
        } else {
            if (execResult.getStdout() == null) {
                LOG.warn(""Received null stdout of the ExecResult for conversion!"");
            }
            return execResult.getStdout();
        }
    }","If the ExecResult contains out file, InputStream with the output of the execResult.",0,152
7431,"public double length() {
        return Math.sqrt(NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z));
    }","Gets the magnitude of the vector, defined as sqrt(x^2+y^2+z^2).",0,47
6834,"public X getProxy() {
		if (proxy != null) {
			return proxy;
		}

		ProxyFactory factory = new ProxyFactory();
		factory.setSuperclass(obj.getClass());
		factory.setInterfaces(new Class[]{ReferentProxy.class});

		// create the class and instantiate an instance without calling a constructor
		Class<? extends X> proxyClass = factory.createClass(new MethodFilter() {
			@Override
			public boolean isHandled(Method method) {
				return true;
			}
		});
		proxy = new ObjenesisStd().newInstance(proxyClass);

		// create and set a handler to invoke all method calls on the delegated object
		((ProxyObject) proxy).setHandler(new MethodHandler() {
			@Override
			public Object invoke(Object self, Method thisMethod, Method proceed, Object[] args) throws Throwable {
				if (thisMethod.getName().equals(""getProxiedObject"")) {
					// this method is provided by the ReferentProxy interface
					return obj;
				} else {
					// method visibility may be restricted
					thisMethod.setAccessible(true);
					return thisMethod.invoke(obj, args);
				}
			}
		});

		return proxy;
	}",Instantiates and returns a proxy object which subclasses the delegated object.,0,301
5668,"public Column getColumn(String columnName, boolean ifExists) {
        HashMap<Column, String> map = derivedColumnMap;
        if (map != null) {
            Database database = session.getDatabase();
            for (Entry<Column, String> entry : map.entrySet()) {
                if (database.equalsIdentifiers(columnName, entry.getValue())) {
                    return entry.getKey();
                }
            }
            if (ifExists) {
                return null;
            } else {
                throw DbException.get(ErrorCode.COLUMN_NOT_FOUND_1, columnName);
            }
        }
        return table.getColumn(columnName, ifExists);
    }",Get the column with the given name.,0,185
6029,"public Optional<BlockMeta> addBlockMeta(BlockMeta block) {
    long blockId = block.getBlockId();
    long blockSize = block.getBlockSize();

    if (getAvailableBytes() < blockSize) {
      LOG.error(""Fail to create blockId {} in dir {}: {} bytes required, but {} bytes available"",
          blockId, toString(), blockSize, getAvailableBytes());
      return Optional.absent();
    }
    if (hasBlockMeta(blockId)) {
      LOG.error(""Fail to create blockId {} in dir {}: blockId exists"", blockId, toString());
      return Optional.absent();
    }
    mBlockIdToBlockMap.put(blockId, block);
    mAvailableBytes -= blockSize;
    Preconditions.checkState(mAvailableBytes >= 0, ""Available bytes should always be non-negative"");
    return Optional.of(block);
  }",Add the metadata of a new block into this storage dir.,0,199
7026,"public boolean isDown() {
        return !isFolder() && existsOnDevice();
    }",Use this to check if this file is available locally,0,29
7043,"private InlineInfo getInlineInfo(Invoke invoke) {
        final String failureMessage = InliningUtil.checkInvokeConditions(invoke);
        if (failureMessage != null) {
            InliningUtil.logNotInlinedMethod(invoke, failureMessage);
            return null;
        }
        MethodCallTargetNode callTarget = (MethodCallTargetNode) invoke.callTarget();
        ResolvedJavaMethod targetMethod = callTarget.targetMethod();

        if (callTarget.invokeKind() == CallTargetNode.InvokeKind.Special || targetMethod.canBeStaticallyBound()) {
            return getExactInlineInfo(invoke, targetMethod);
        }

        assert callTarget.invokeKind().isIndirect();

        ResolvedJavaType holder = targetMethod.getDeclaringClass();
        if (!(callTarget.receiver().stamp(NodeView.DEFAULT) instanceof ObjectStamp)) {
            return null;
        }
        ObjectStamp receiverStamp = (ObjectStamp) callTarget.receiver().stamp(NodeView.DEFAULT);
        if (receiverStamp.alwaysNull()) {
            // Don't inline if receiver is known to be null
            return null;
        }
        ResolvedJavaType contextType = invoke.getContextType();
        if (receiverStamp.type() != null) {
            // the invoke target might be more specific than the holder (happens after inlining:
            // parameters lose their declared type...)
            ResolvedJavaType receiverType = receiverStamp.type();
            if (receiverType != null && holder.isAssignableFrom(receiverType)) {
                holder = receiverType;
                if (receiverStamp.isExactType()) {
                    assert targetMethod.getDeclaringClass().isAssignableFrom(holder) : holder + "" subtype of "" + targetMethod.getDeclaringClass() + "" for "" + targetMethod;
                    ResolvedJavaMethod resolvedMethod = holder.resolveConcreteMethod(targetMethod, contextType);
                    if (resolvedMethod != null) {
                        return getExactInlineInfo(invoke, resolvedMethod);
                    }
                }
            }
        }

        if (holder.isArray()) {
            // arrays can be treated as Objects
            ResolvedJavaMethod resolvedMethod = holder.resolveConcreteMethod(targetMethod, contextType);
            if (resolvedMethod != null) {
                return getExactInlineInfo(invoke, resolvedMethod);
            }
        }

        AssumptionResult<ResolvedJavaType> leafConcreteSubtype = holder.findLeafConcreteSubtype();
        if (leafConcreteSubtype != null) {
            ResolvedJavaMethod resolvedMethod = leafConcreteSubtype.getResult().resolveConcreteMethod(targetMethod, contextType);
            if (resolvedMethod != null && leafConcreteSubtype.canRecordTo(callTarget.graph().getAssumptions())) {
                return getAssumptionInlineInfo(invoke, resolvedMethod, leafConcreteSubtype);
            }
        }

        AssumptionResult<ResolvedJavaMethod> concrete = holder.findUniqueConcreteMethod(targetMethod);
        if (concrete != null && concrete.canRecordTo(callTarget.graph().getAssumptions())) {
            return getAssumptionInlineInfo(invoke, concrete.getResult(), concrete);
        }

        // type check based inlining
        return getTypeCheckedInlineInfo(invoke, targetMethod);
    }",Determines if inlining is possible at the given invoke node.,0,722
6688,"public boolean equals(Object oth) {
                
        if (this == oth) {
            return true;
        }

        if (oth instanceof FeatureTypeStyleImpl) {
            FeatureTypeStyleImpl other = (FeatureTypeStyleImpl) oth;

            return Utilities.equals(name, other.name)
            && Utilities.equals(description, other.description)
            && Utilities.equals(rules, other.rules)
            && Utilities.equals(featureTypeNames, other.featureTypeNames)
                    && Utilities.equals(semantics, other.semantics)
                    && Utilities.equals(getOptions(), other.getOptions())
                    && Utilities.equals(getTransformation(), other.getTransformation())
                    && Utilities.equals(getOnlineResource(), other.getOnlineResource());
        }

        return false;
    }",Compares this FeatureTypeStyleImpl with another.,0,220
7210,"public boolean removeDetail(GenericDetail detail)
            throws OperationFailedException
    {
        return removeDetail(detail, true);
    }",Removes the specified detail from the list of details stored online for this account.,0,34
7687,"protected static CodecFactory getCompressionCodec(TaskAttemptContext context) {
    if (FileOutputFormat.getCompressOutput(context)) {
      // Default to deflate compression.
      String outputCodec = context.getConfiguration()
        .get(AvroJob.CONF_OUTPUT_CODEC, DataFileConstants.DEFLATE_CODEC);
      if (DataFileConstants.DEFLATE_CODEC.equals(outputCodec)) {
        int compressionLevel = context.getConfiguration().getInt(
            org.apache.avro.mapred.AvroOutputFormat.DEFLATE_LEVEL_KEY,
            org.apache.avro.mapred.AvroOutputFormat.DEFAULT_DEFLATE_LEVEL);
        return CodecFactory.deflateCodec(compressionLevel);
      } else {
        return CodecFactory.fromString(outputCodec);
      }
    }

    // No compression.
    return CodecFactory.nullCodec();
  }",Gets the configured compression codec from the task context.,0,173
6015,"public boolean isBlockLocked(long blockId) {
    int index = BlockLockManager.blockHashIndex(blockId);
    if (index < mInUseLocks.length()) {
      return mInUseLocks.get(index);
    } else {
      return false;
    }
  }",Test if the block is locked.,0,75
6081,"public Class parseClass(final String text, final String fileName) throws CompilationFailedException {
        GroovyCodeSource gcs = (GroovyCodeSource) AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                return new GroovyCodeSource(text, fileName, ""/groovy/script"");
            }
        });
        return parseClass(gcs);
    }",Parses the given text into a Java class capable of being run,0,99
7717,"public static String getPrefix() {
		if (PropertiesComponent.getInstance().isValueSet(Settings.PREFIX)) {
			return PropertiesComponent.getInstance().getValue(Settings.PREFIX);
		} else {
			CodeStyleSettingsManager manager = CodeStyleSettingsManager.getInstance();
			CodeStyleSettings settings = manager.getCurrentSettings();
			return settings.FIELD_NAME_PREFIX;
		}
	}",Load field name prefix from code style,0,98
6700,"private boolean verifyAccessTokenRequest(final HttpServletRequest request, final HttpServletResponse response) {
        if (accessTokenGrantRequestValidators.isEmpty()) {
            LOGGER.warn(""No validators are defined to examine the access token request for eligibility"");
            return false;
        }
        final J2EContext context = new J2EContext(request, response);
        return this.accessTokenGrantRequestValidators.stream()
            .filter(ext -> ext.supports(context))
            .findFirst()
            .orElseThrow((Supplier<RuntimeException>) () -> new UnsupportedOperationException(""Access token request is not supported""))
            .validate(context);
    }",Verify the access token request.,0,147
7350,"public Response getActions(@Context HttpHeaders headers, @Context UriInfo ui) {
    return handleRequest(headers, null, ui, Request.Type.GET,
        createActionResource(m_clusterName, m_serviceName, null));
  }",Handles URL: /clusters/clusterId/services/serviceName/actions,0,60
6833,"public Get setTimeStamp(long timestamp) throws IOException {
    return this.setTimestamp(timestamp);
  }",Get versions of columns with the specified timestamp.,0,31
5402,"protected X509Certificate getEncryptionCertificate() throws Exception {
        final SamlIdPProperties idp = casProperties.getAuthn().getSamlIdp();
        logger.debug(""Locating encryption certificate file from [{}]"", idp.getMetadata().getEncryptionCertFile());
        return SamlUtils.readCertificate(idp.getMetadata().getEncryptionCertFile());
    }",Gets encryption certificate.,0,78
6604,"public static String toSRS(final CoordinateReferenceSystem crs) {
        boolean forcedLonLat = false;
        try {
            forcedLonLat = Boolean.getBoolean(""org.geotools.referencing.forceXY"") || 
                Boolean.TRUE.equals(Hints.getSystemDefault(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER));
        } catch(Exception e) {
            // all right it was a best effort attempt
            LOGGER.log(Level.FINE, ""Failed to determine if we are in forced lon/lat mode"", e);
        }
        if (forcedLonLat && CRS.getAxisOrder(crs, false) == AxisOrder.NORTH_EAST) {
            try {
                // not usual axis order, check if we can have a EPSG code
                Integer code = CRS.lookupEpsgCode(crs, false);
                if (code != null) {
                    return ""urn:ogc:def:crs:EPSG::"" + code;
                }
            } catch (Exception e) {
                // all right it was a best effort attempt
                LOGGER.log(Level.FINE, ""Failed to determine EPSG code"", e);
            }
        }
        
        // fall back on simple lookups
        if( crs == null ){
            return null;
        }
        final Set<ReferenceIdentifier> identifiers = crs.getIdentifiers();
        if (identifiers.isEmpty()) {
            // fallback unfortunately this often does not work
            final ReferenceIdentifier name = crs.getName();
            if (name != null) {
                return name.toString();
            }
        } else {
            return identifiers.iterator().next().toString();
        }
        return null;
    }","Returns the Spatial Reference System identifier, or  null if none.",0,373
7422,"public T getWindowValue(long time) {
        if (time < 0) {
            return null;
        }
        long timeId = time / windowLengthInMs;
        int idx = (int)(timeId % array.length());

        WindowWrap<T> old = array.get(idx);
        if (old == null || isWindowDeprecated(old)) {
            return null;
        }

        return old.value();
    }",Get statistic value from bucket for provided timestamp.,0,136
5962,"public Object processInvocation(InterceptorContext context) throws Exception {
        final TransactionManager transactionManager = this.ejbRemoteTransactionsRepository.getTransactionManager();
        Transaction originatingRemoteTx = null;
        // get the transaction id attachment
        final TransactionID transactionID = (TransactionID) context.getPrivateData(AttachmentKeys.TRANSACTION_ID_KEY);
        if (transactionID != null) {
            // if it's UserTransaction then create or resume the UserTransaction corresponding to the ID
            if (transactionID instanceof UserTransactionID) {
                this.createOrResumeUserTransaction((UserTransactionID) transactionID);
            } else if (transactionID instanceof XidTransactionID) {
                this.createOrResumeXidTransaction((XidTransactionID) transactionID);
            }
            // the invocation was associated with a remote tx, so keep a flag so that we can
            // suspend (on this thread) the originating tx when returning from the invocation
            originatingRemoteTx = transactionManager.getTransaction();
        }
        try {
            // we are done with any tx propagation setup, let's move on
            return context.proceed();
        } finally {
            // suspend the originating remote tx on this thread now that the invocation has been done
            if (originatingRemoteTx != null) {
                transactionManager.suspend();
            }
        }
    }",Processes an incoming invocation and checks for the presence of a remote transaction associated with the invocation context.,0,227
6094,"public boolean cancel(int jobId) {
        // call both methods
        boolean result = cancelInner(getJobRequest(jobId)) | cancelInner(getJob(jobId));
        JobProxy.Common.cleanUpOrphanedJob(mContext, jobId); // do this as well, just in case
        return result;
    }",Cancel either the pending  JobRequest or the running  Job.,0,67
7669,"public String loginUser(String username, String password) throws ApiException {
    Object postBody = null;
    
    // create path and map variables
    String path = ""/user/login"".replaceAll(""\\{format\\}"",""json"");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    
    queryParams.addAll(apiClient.parameterToPairs("""", ""username"", username));
    
    queryParams.addAll(apiClient.parameterToPairs("""", ""password"", password));
    

    

    

    final String[] accepts = {
      ""application/json"", ""application/xml""
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    
    GenericType<String> returnType = new GenericType<String>() {};
    return apiClient.invokeAPI(path, ""GET"", queryParams, postBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
  }",Logs user into the system,0,372
6842,"public static JibContainerBuilder from(String baseImageReference)
      throws InvalidImageReferenceException {
    if (baseImageReference.startsWith(DOCKER_DAEMON_IMAGE_PREFIX)) {
      return from(
          DockerDaemonImage.named(baseImageReference.replaceFirst(DOCKER_DAEMON_IMAGE_PREFIX, """")));
    }
    if (baseImageReference.startsWith(TAR_IMAGE_PREFIX)) {
      return from(TarImage.at(Paths.get(baseImageReference.replaceFirst(TAR_IMAGE_PREFIX, """"))));
    }
    return from(RegistryImage.named(baseImageReference.replaceFirst(REGISTRY_IMAGE_PREFIX, """")));
  }",Starts building the container from a base image.,0,133
7149,"public RestDefinition endRest() {
        ProcessorDefinition<?> def = this;

        RouteDefinition route = ProcessorDefinitionHelper.getRoute(def);
        if (route != null) {
            return route.getRestDefinition();
        }

        throw new IllegalArgumentException(""Cannot find RouteDefinition to allow endRest"");
    }",Ends the current block and returns back to the  org.apache.camel.model.rest.RestDefinition rest() DSL.,0,83
5973,"private DocIdSet getDocIdSet(IndexReader reader, int[] logic, int[] index)
    throws IOException
    {
        if (logic.length != chain.length)
            throw new IllegalArgumentException(""Invalid number of elements in logic array"");

        OpenBitSetDISI result = initialResult(reader, logic[0], index);
        for (; index[0] < chain.length; index[0]++)
        {
            doChain(result, logic[index[0]], chain[index[0]].getDocIdSet(reader));
        }
        return result;
    }",Delegates to each filter in the chain.,0,156
7617,"public static String validateAuthToken(Context c, String token) throws GoogleTasksException {
        GoogleAccountManager accountManager = new GoogleAccountManager(ContextManager.getContext());

        GtasksService testService = new GtasksService(token);
        try {
            testService.ping();
            return token;
        } catch (IOException i) { //If fail, token may have expired -- get a new one and return that
            String accountName = Preferences.getStringValue(GtasksPreferenceService.PREF_USER_NAME);
            Account a = accountManager.getAccountByName(accountName);
            if (a == null) {
                throw new GoogleTasksException(c.getString(R.string.gtasks_error_accountNotFound, accountName));
            }

            accountManager.invalidateAuthToken(token);
            AccountManagerFuture<Bundle> future = accountManager.manager.getAuthToken(a, GtasksService.AUTH_TOKEN_TYPE, false, null, null);

            try {
                if (future.getResult().containsKey(AccountManager.KEY_AUTHTOKEN)) {
                    Bundle result = future.getResult();
                    token = result.getString(AccountManager.KEY_AUTHTOKEN);
                    testService = new GtasksService(token);
                    try { //Make sure the new token works--if not, we may have network problems
                        testService.ping();
                        return token;
                    } catch (IOException i2) {
                        i2.printStackTrace();
                        String manufacturer = android.os.Build.MANUFACTURER.toLowerCase();
                        if (!manufacturer.contains(""samsung"")) { // Try with the notifyAuthFailure set to true in case it was that that broke things
                            accountManager.invalidateAuthToken(token);
                            future = accountManager.manager.getAuthToken(a, GtasksService.AUTH_TOKEN_TYPE, true, null, null);
                            try {
                                if (future.getResult().containsKey(AccountManager.KEY_AUTHTOKEN)) {
                                    result = future.getResult();
                                    token = result.getString(AccountManager.KEY_AUTHTOKEN);
                                    testService = new GtasksService(token);
                                    try {
                                        testService.ping();
                                        return token;
                                    } catch (IOException i3) {
                                        i3.printStackTrace();
                                        throw new GoogleTasksException(c.getString(R.string.gtasks_error_authRefresh));
                                    }
                                } else {
                                    throw new GoogleTasksException(c.getString(R.string.gtasks_error_accountManager));
                                }
                            } catch (Exception e) {
                                throw new GoogleTasksException(e.getLocalizedMessage());
                            }
                        } else {
                            throw new GoogleTasksException(c.getString(R.string.gtasks_error_authRefresh));
                        }
                    }
                } else {
                    throw new GoogleTasksException(c.getString(R.string.gtasks_error_accountManager));
                }
            } catch (Exception e) {
                throw new GoogleTasksException(e.getLocalizedMessage());
            }

        }
    }",Invalidates and then revalidates the auth token for the currently logged in user,0,686
6201,"public static PointerBuffer memPointerBuffer(long address, int capacity) {
        return PointerBuffer.create(checkAlignment(address, POINTER_SIZE - 1), capacity);
    }",Creates a new PointerBuffer that starts at the specified memory address and has the specified capacity.,0,47
6185,"public String processPvtMsgSend() {
          
    LOG.debug(""processPvtMsgSend()"");
    
    if(!hasValue(getComposeSubject()))
    {
      FacesContext.getCurrentInstance().addMessage(null,
          new FacesMessage(""Please enter subject for this compose message.""));
      return null ;
    }
    if(!hasValue(getComposeBody()) )
    {
      FacesContext.getCurrentInstance().addMessage(null,
          new FacesMessage(""Please enter body for this compose message.""));
      return null ;
    }
    if(getSelectedComposeToList().size()<1)
    {
      FacesContext.getCurrentInstance().addMessage(null,
          new FacesMessage(""Please select recipiants list for this compose message.""));
      return null ;
    }
    
    PrivateMessage pMsg= constructMessage() ;
    
    if((SET_AS_YES).equals(getComposeSendAsPvtMsg()))
    {
      prtMsgManager.sendPrivateMessage(pMsg, getRecipients()); 
    }

    //reset contents
    resetComposeContents();
    if(getMsgNavMode().equals(""""))
    {
      return ""main"" ; // if navigation is from main page
    }
    else
    {
      return ""pvtMsg"";
    }
  }",process from Compose screen,0,288
5718,"public static DataSource createDataSource(final Map<String, DataSource> dataSourceMap, final byte[] yamlBytes) throws SQLException, IOException {
        YamlMasterSlaveConfiguration config = YamlMasterSlaveConfiguration.unmarshal(yamlBytes);
        return MasterSlaveDataSourceFactory.createDataSource(dataSourceMap, new MasterSlaveRuleConfigurationYamlSwapper().swap(config.getMasterSlaveRule()), config.getConfigMap(), config.getProps());
    }",Create master-slave data source.,0,98
6888,"public static String getExactlyExpression(final String value) {
        return null == value ? null : CharMatcher.anyOf("" "").removeFrom(value);
    }",Get exactly SQL expression.,0,51
7790,"private File createNewFile() {
    String filename = ""image-"" + UUID.randomUUID().toString() + "".jpg"";
    File path;
    if (tmpImage) {
      path = mReactContext.getExternalCacheDir();
    } else {
      path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
    }

    File f = new File(path, filename);
    try {
      path.mkdirs();
      f.createNewFile();
    } catch (IOException e) {
      e.printStackTrace();
    }

    return f;
  }",Create a new file,0,166
6919,"public List<Object[]> getFirstRows(String table_name, int limit, IProgressMonitor monitor) throws KettleDatabaseException
	{
		String sql = ""SELECT * FROM ""+table_name;
		
        if (limit>0)
		{
		    sql+=databaseMeta.getLimitClause(limit);
		}
		
		return getRows(sql, limit, monitor);
	}",Get the first rows from a table (for preview),0,96
5423,"static Block getBlockFromMap(Type mapType, Map<?, ?> map)
    {
        Type keyType = mapType.getTypeParameters().get(0);
        Type valueType = mapType.getTypeParameters().get(1);

        BlockBuilder mapBlockBuilder = mapType.createBlockBuilder(new BlockBuilderStatus(), 1);
        BlockBuilder builder = mapBlockBuilder.beginBlockEntry();

        for (Entry<?, ?> entry : map.entrySet()) {
            writeObject(builder, keyType, entry.getKey());
            writeObject(builder, valueType, entry.getValue());
        }

        mapBlockBuilder.closeEntry();
        return (Block) mapType.getObject(mapBlockBuilder, 0);
    }",Encodes the given map into a Block.,0,193
6002,"public String getNameAsString() {
    return name.getNameAsString();
  }",Get the name of the table as a String,0,23
7733,"public YearMonth addWrapFieldToCopy(int valueToAdd) {
            int[] newValues = iBase.getValues();
            newValues = getField().addWrapField(iBase, iFieldIndex, newValues, valueToAdd);
            return new YearMonth(iBase, newValues);
        }",Adds to the value of this field in a copy of this YearMonth wrapping within this field if the maximum value is reached.,0,70
5276,"public static ImplicitInclude fromConfigurationString(String configurationString) {
    // Double colons are used so that if someone uses an absolute windows path, their error
    // messages will not be confusing. e.g. C:\foo.bzl:bar would lead to a file named
    // 'C', and symbols '\foo.bzl' and 'bar'. This just makes things explicit.
    ImmutableList<String> parts =
        Arrays.stream(configurationString.split(""::""))
            .map(String::trim)
            .collect(ImmutableList.toImmutableList());
    if (parts.size() < 2) {
      throw new HumanReadableException(
          String.format(
              ""Configuration setting '%s' did not list any symbols to load. Setting should be of ""
                  + ""the format <path>::<symbol1>::<symbol2>..."",
              configurationString));
    }
    int i = 0;
    ImmutableMap.Builder<String, String> symbolBuilder = ImmutableMap.builder();
    for (String part : parts) {
      if (part.isEmpty()) {
        throw new HumanReadableException(
            String.format(
                ""Provided configuration %s specifies an empty path/symbols"", configurationString));
      }
      // Path is the first component, symbols are each subsequent one
      if (i > 0) {
        parseSymbolsFromConfiguration(part, symbolBuilder, configurationString);
      }
      i++;
    }

    Path loadPath;
    try {
      loadPath = Paths.get(parts.get(0));
      if (loadPath.isAbsolute()) {
        throw new HumanReadableException(String.format(""Path %s may not be absolute"", loadPath));
      }
    } catch (InvalidPathException e) {
      throw new HumanReadableException(
          String.format(""Provided path %s is not a valid path"", parts.get(0)), e);
    }

    return ImplicitInclude.of(loadPath, symbolBuilder.build());
  }",Constructs a  AbstractImplicitInclude from a configuration string in the form of path/to/bzl_file.bzl::symbol_to_import::second_symbol_to_import,0,389
6730,"public Iterator<ChatTransport> getChatTransports()
    {
        return chatTransports.iterator();
    }",Returns all available chat transports for this chat session.,0,27
6931,"public int removeByField(FieldIndex<T> index, Object value) {
    int removed = 0;
    if(index.isUnique()){
      T toRemove = getByFieldInternal(index, value);
      if (toRemove == null) {
        return 0;
      }
      if (remove(toRemove)) {
        removed++;
      }
    } else {
      ConcurrentHashSet<T> toRemove = getByFieldInternalDup(index, value);
      if (toRemove == null) {
        return 0;
      }
      for (T o : toRemove) {
        if (remove(o)) {
          removed++;
        }
      }
    }

    return removed;
  }",Removes the subset of objects with the specified field value.,0,203
6277,"public BigDecimal optBigDecimal(int index, BigDecimal defaultValue) {
        Object val = this.opt(index);
        if (JSONObject.NULL.equals(val)) {
            return defaultValue;
        }
        if (val instanceof BigDecimal){
            return (BigDecimal) val;
        }
        if (val instanceof BigInteger){
            return new BigDecimal((BigInteger) val);
        }
        if (val instanceof Double || val instanceof Float){
            return new BigDecimal(((Number) val).doubleValue());
        }
        if (val instanceof Long || val instanceof Integer
                || val instanceof Short || val instanceof Byte){
            return new BigDecimal(((Number) val).longValue());
        }
        try {
            return new BigDecimal(val.toString());
        } catch (Exception e) {
            return defaultValue;
        }
    }",Get the optional BigDecimal value associated with an index.,0,267
6463,"public Subscription call(Observer<T> observer) {
                    observer.onError(exception);
                    return new NoOpObservableSubscription();
                }",Accepts a Observer and calls its onError method.,0,38
6321,"public LogicalSchema withoutAlias() {
    if (!isAliased()) {
      throw new IllegalStateException(""Not aliased"");
    }

    return new LogicalSchema(
        removeAlias(metadata),
        removeAlias(key),
        removeAlias(value)
    );
  }",Strip any alias from the field name.,0,74
7044,"public MethodCall on(Object target) {
            return new MethodCall(methodLocator,
                    new TargetHandler.ForStaticField(nonNull(target)),
                    argumentLoaders,
                    new MethodInvoker.ForVirtualInvocation(new TypeDescription.ForLoadedType(target.getClass())),
                    TerminationHandler.ForMethodReturn.INSTANCE,
                    assigner,
                    typing);
        }",Invokes the specified method on the given instance.,0,83
7607,"public static Ignite start() throws IgniteCheckedException {
        return GridGainEx.start();
    }",Starts grid with default configuration.,0,29
7340,"protected TypeDescription resolveReturnType(TypeDescription instrumentedType) {
                    return TargetType.resolve(returnType, instrumentedType, TargetType.MATCHER);
                }",Resolves the return type for the method which could be represented by the  net.bytebuddy.dynamic.TargetType placeholder type.,0,35
5292,"public Tuple<String> invoke(String self, String sep, Location loc, Environment env)
        throws EvalException {
      return partitionWrapper(self, sep, true, loc);
    }","Splits the given string into a list of words, using  separator as a delimiter.",0,57
6621,"public void createBlueprint(Blueprint blueprint) throws Exception {
        Blueprints.getInstance().addBlueprint(blueprint);
    }",Creates a new blueprint.,0,33
7051,"public static DataType createInputDataType(Object obj, int type, String schema) {
        return createInputDataType(obj, type, schema, null);
    }","Creates a DataType input object from the given object, schema and type (complex or literal).",0,46
7138,"public Object getMetricRegistry()
   {
      return metricRegistry;
   }","Get the Codahale MetricRegistry, could be null.",0,20
7175,"public static Vec makeCon(double x, long len) {
    int nchunks = (int)Math.max(1,len >> DFLT_LOG2_CHUNK_SIZE);
    long[] espc = new long[nchunks+1];
    for( int i=0; i<nchunks; i++ )
      espc[i] = ((long)i)<< DFLT_LOG2_CHUNK_SIZE;
    espc[nchunks] = len;
    return makeCon(x,VectorGroup.VG_LEN1,espc);
  }",Make a new constant vector with the given row count.,0,135
6807,"public boolean isPartialStreaming(Call call)
    {
        MediaAwareCall<?,?,?> callImpl = (MediaAwareCall<?,?,?>) call;
        MediaDevice device = callImpl.getDefaultDevice(MediaType.VIDEO);

        return
            (device == null)
                ? false
                : JabberActivator.getMediaService().isPartialStreaming(device);
    }",If the streaming is partial (not the full desktop).,0,96
5876,"public String getAuthorsFirstFirstAnds() {
        // Check if we've computed this before:
        if (authorsFirstFirstAnds != null)
            return authorsFirstFirstAnds;

        StringBuilder res = new StringBuilder();
        if (size()>0) {
            res.append(getAuthor(0).getFirstLast(false));
            for (int i=1; i<size(); i++) {
                res.append("" and "");
                res.append(getAuthor(i).getFirstLast(false));
            }
        }
        authorsFirstFirstAnds = res.toString();
        return authorsFirstFirstAnds;
    }","Returns the list of authors separated by ""and""s with first names before last name; first names are not abbreviated.",0,156
6418,"public boolean inCache(URL url) {
        return entryStillValid(getEntry(url.toString(), null));
    }","Check the cache, if the entry has an expires header and the entry has not expired, return true",0,35
5279,"long calculateStartTime() {
        Calendar calendar = Calendar.getInstance();
        long nowMill = calendar.getTimeInMillis();
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        long subtract = calendar.getTimeInMillis() + ONE_DAY_IN_MIll - nowMill;
        return subtract + (FOUR_HOURS_IN_MIll / 2) + ThreadLocalRandom.current().nextInt(FOUR_HOURS_IN_MIll);
    }","between 2:00 am to 6:00 am, the time is random.",0,146
5705,"static public TargetPackage getTargetPackage(String packageName) {
    return packages.get(packageName);
  }",Returns a specific TargetPackage,0,29
6739,"public ASN1Encodable get(int i)
    {
        if (i >= elementCount)
        {
            throw new ArrayIndexOutOfBoundsException(i + "" >= "" + elementCount);
        }

        return elements[i];
    }",Return the object at position i in this vector.,0,66
7680,"public String toModelName(final String name) {
        String result = camelize(sanitizeName(name));

        if (!StringUtils.isEmpty(modelNamePrefix)) {
            result = modelNamePrefix + ""_"" + result;
        }

        // model name cannot use reserved keyword, e.g. return
        if (isReservedWord(name)) {
            String modelName = ""Model_"" + result;
            LOGGER.warn(name + "" (reserved word) cannot be used as model name. Renamed to "" + modelName);
            return modelName;
        }

        // model name starts with number
        if (result.matches(""^\\d.*"")) {
            String modelName = ""Model_"" + result; // e.g. 200Response => Model_200Response (after camelize)
            LOGGER.warn(name + "" (model name starts with number) cannot be used as model name. Renamed to "" + modelName);
            return modelName;
        }

        if (languageSpecificPrimitives.contains(result)) {
            String modelName = ""Model_"" + result;
            LOGGER.warn(name + "" (model name matches existing language type) cannot be used as a model name. Renamed to "" + modelName);
            return modelName;
        }

        if (!StringUtils.isEmpty(modelNameSuffix)) {
            result = result + ""_"" + modelNameSuffix;
        }

        return result;
    }",Output the proper model name (capitalized).,0,302
5759,"public static RegionState getMetaRegionState(ZooKeeperWatcher zkw, int replicaId)
      throws KeeperException {
    RegionState.State state = RegionState.State.OPEN;
    ServerName serverName = null;
    try {
      byte[] data = ZKUtil.getData(zkw, zkw.znodePaths.getZNodeForReplica(replicaId));
      if (data != null && data.length > 0 && ProtobufUtil.isPBMagicPrefix(data)) {
        try {
          int prefixLen = ProtobufUtil.lengthOfPBMagic();
          ZooKeeperProtos.MetaRegionServer rl =
            ZooKeeperProtos.MetaRegionServer.PARSER.parseFrom
              (data, prefixLen, data.length - prefixLen);
          if (rl.hasState()) {
            state = RegionState.State.convert(rl.getState());
          }
          HBaseProtos.ServerName sn = rl.getServer();
          serverName = ServerName.valueOf(
            sn.getHostName(), sn.getPort(), sn.getStartCode());
        } catch (InvalidProtocolBufferException e) {
          throw new DeserializationException(""Unable to parse meta region location"");
        }
      } else {
        // old style of meta region location?
        serverName = ProtobufUtil.parseServerNameFrom(data);
      }
    } catch (DeserializationException e) {
      throw ZKUtil.convert(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    if (serverName == null) {
      state = RegionState.State.OFFLINE;
    }
    return new RegionState(
        RegionReplicaUtil.getRegionInfoForReplica(RegionInfoBuilder.FIRST_META_REGIONINFO, replicaId),
      state, serverName);
  }",Load the meta region state from the meta server ZNode.,0,426
6546,"public static Scheduler io() {
        return executor(IO_EXECUTOR);
    }",Scheduler intended for IO-bound work.,0,24
6589,"public static long[] toPrimitive(Long[] array) {
        if (array == null) {
            return null;
        }
        long[] results = new long[array.length];
        for (int i = 0; i < array.length; i++) {
            results[i] = array[i];
        }
        return results;
    }",Take an array of Long and return an array of long,0,116
7333,"public Future<Integer> read(ByteBuffer dst) {
        if (!handshakeComplete) {
            throw new IllegalStateException(sm.getString(""channel.nio.ssl.incompleteHandshake""));
        }
        if (readPending) {
            throw new ReadPendingException();
        } else {
            readPending = true;
        }
        return new FutureRead(dst);
    }",Reads a sequence of bytes from this channel into the given buffer.,0,98
6592,"private InterpreterResult processGet(String[] urlItems, InterpreterContext interpreterContext) {

    final String[] indexTypeId = getIndexTypeId(urlItems);

    if (indexTypeId == null) {
      return new InterpreterResult(InterpreterResult.Code.ERROR,
          ""Bad URL (it should be /index/type/id)"");
    }

    final ActionResponse response = elsClient.get(indexTypeId[0], indexTypeId[1], indexTypeId[2]);

    if (response.isSucceeded()) {
      final JsonObject json = response.getHit().getSourceAsJsonObject();
      final String jsonStr = gson.toJson(json);

      addAngularObject(interpreterContext, ""get"", json);

      return new InterpreterResult(
          InterpreterResult.Code.SUCCESS,
          InterpreterResult.Type.TEXT,
          jsonStr);
    }

    return new InterpreterResult(InterpreterResult.Code.ERROR, ""Document not found"");
  }","Processes a ""get"" request.",0,234
5494,"private String[] listInternal(String path, boolean recursive) throws IOException {
    path = stripPrefixIfPresent(path);
    path = PathUtils.normalizePath(path, PATH_SEPARATOR);
    path = path.equals(PATH_SEPARATOR) ? """" : path;
    String delimiter = recursive ? """" : PATH_SEPARATOR;
    String priorLastKey = null;
    Set<String> listResult = new HashSet<>();
    try {
      boolean done = false;
      while (!done) {
        // Files/dirs in S3 UFS can be possibly encoded differently:
        // (1) files are encoded as objects,
        // (2) directories are encoded as objects with FOLDER_SUFFIX by Alluxio and
        // (3) directories can also be encoded as prefixes by direct access to S3 not by Alluxio.
        //
        // We iterate over chunk.getObjects() for (1) and (2) and chunk.getCommonPrefixes() for (3).
        // As an example, we list objects with prefix=""ufs"" and delimiter=""/"" (non-recursive):
        // - objects.key = ufs/, child =
        // - objects.key = ufs/default_tests_files_$folder$, child = default_tests_files
        // - objects.key = ufs/shakespare_test, child = shakespare_test
        // - commonPrefix: commonPrefix = ufs/default_tests_files/, child = default_tests_files
        // - commonPrefix: commonPrefix = ufs/test1/, child = test1
        StorageObjectsChunk chunk = mClient.listObjectsChunked(mBucketName, path, delimiter,
            LISTING_LENGTH, priorLastKey);

        // Handle (1) and (2)
        for (StorageObject obj : chunk.getObjects()) {
          // Remove parent portion of the key
          String child = getChildName(obj.getKey(), path);
          // Prune the special folder suffix
          child = stripFolderSuffixIfPresent(child);
          // Only add if the path is not empty (removes results equal to the path)
          if (!child.isEmpty()) {
            listResult.add(child);
          }
        }
        // Handle (3)
        for (String commonPrefix : chunk.getCommonPrefixes()) {
          // Remove parent portion of the key
          String child = getChildName(commonPrefix, path);
          // Remove any portion after the path delimiter
          int childNameIndex = child.indexOf(PATH_SEPARATOR);
          child = childNameIndex != -1 ? child.substring(0, childNameIndex) : child;
          if (!child.isEmpty() && !listResult.contains(child)) {
            // This directory has not been created through Alluxio.
            mkdirsInternal(commonPrefix);
            listResult.add(child);
          }
        }
        done = chunk.isListingComplete();
        priorLastKey = chunk.getPriorLastKey();
      }
    } catch (ServiceException e) {
      LOG.error(""Failed to list path {}"", path, e);
      return null;
    }
    return listResult.toArray(new String[listResult.size()]);
  }","Lists the files in the given path, the paths will be their logical names and not contain the folder suffix.",0,530
5818,"protected Processor createUnitOfWorkProcessor(RouteContext routeContext, Processor processor, Exchange exchange) {
        String routeId = routeContext != null ? routeContext.getRoute().idOrCreate(routeContext.getCamelContext().getNodeIdFactory()) : null;
        CamelInternalProcessor internal = new CamelInternalProcessor(processor);

        UnitOfWork parent = exchange.getProperty(Exchange.PARENT_UNIT_OF_WORK, UnitOfWork.class);
        if (parent != null) {
            internal.addTask(new CamelInternalProcessor.ChildUnitOfWorkProcessorTask(routeId, parent));
        } else {
            internal.addTask(new CamelInternalProcessor.UnitOfWorkProcessorTask(routeId));
        }
        return internal;
    }",Strategy to create the  UnitOfWorkProcessor to be used for the sub route,0,169
5786,"public static String toString(final byte [] b, int off, int len) {
    if (b == null) {
      return null;
    }
    if (len == 0) {
      return """";
    }
    return new String(b, off, len, HConstants.UTF8_CHARSET);
  }",This method will convert utf8 encoded bytes into a string.,0,102
7512,"public List<String> hvals(final String key) {
        runChecks();
        client.hvals(key);
        final List<String> lresult = client.getMultiBulkReply();
        return lresult;
    }",Return all the values in a hash.,0,61
6520,"public static boolean authenticateDomain(String domain, String hostname) {
        if (hostname == null || hostname.length() == 0) {
            // Do nothing if the target hostname is empty or null
            return false;
        }
        try {
            // TODO Check if the remote hostname is in the blacklist
            // TODO Keep a list of ports to connect to for each hostname or use the default
            // if none was defined

            // Check if a session already exists to the desired hostname (i.e. remote server). If
            // no one exists then create a new session. The same session will be used for the same
            // hostname for all the domains to authenticate
            SessionManager sessionManager = SessionManager.getInstance();
            OutgoingServerSession session = sessionManager.getOutgoingServerSession(hostname);
            if (session == null) {
                // Try locating if the remote server has previously authenticated with this server
                IncomingServerSession incomingSession = sessionManager.getIncomingServerSession(
                        hostname);
                if (incomingSession != null) {
                    for (String otherHostname : incomingSession.getValidatedDomains()) {
                        session = sessionManager.getOutgoingServerSession(otherHostname);
                        if (session != null) {
                            // A session to the same remote server but with different hostname
                            // was found. Use this session and add the new hostname to the session
                            session.addHostname(hostname);
                            break;
                        }
                    }
                }
            }
            if (session == null) {
                int port = JiveGlobals.getIntProperty(""xmpp.server.socket.remotePort"",
                        SocketAcceptThread.DEFAULT_SERVER_PORT);
                // No session was found to the remote server so make sure that only one is created
                synchronized (hostname.intern()) {
                    session = sessionManager.getOutgoingServerSession(hostname);
                    if (session == null) {
                        session =
                                new ServerDialback().createOutgoingSession(domain, hostname, port);
                        if (session != null) {
                            // Add the new hostname to the list of names that the server may have
                            session.addHostname(hostname);
                            // Add the validated domain as an authenticated domain
                            session.addAuthenticatedDomain(domain);
                            // Notify the SessionManager that a new session has been created
                            sessionManager.outgoingServerSessionCreated(session);
                            return true;
                        }
                        else {
                            // Check if hostname is a subdomain of an existing outgoing session
                            for (String otherHost : sessionManager.getOutgoingServers()) {
                                if (hostname.contains(otherHost)) {
                                    session = sessionManager.getOutgoingServerSession(otherHost);
                                    // Add the new hostname to the found session
                                    session.addHostname(hostname);
                                    return true;
                                }
                            }
                            return false;
                        }
                    }
                }
            }
            if (session.getAuthenticatedDomains().contains(domain)) {
                // Do nothing since the domain has already been authenticated
                return true;
            }
            // A session already exists so authenticate the domain using that session
            ServerDialback method = new ServerDialback(session.getConnection(), domain);
            if (method.authenticateDomain(session.reader, domain, hostname,
                    session.getStreamID().getID())) {
                // Add the validated domain as an authenticated domain
                session.addAuthenticatedDomain(domain);
                return true;
            }
        }
        catch (Exception e) {
            Log.error(""Error authenticating domain with remote server: "" + hostname, e);
        }
        return false;
    }",Creates a new outgoing connection to the specified hostname if no one exists.,0,651
6424,"public ViewConfig getViewConfigFromExtractedArchive(String archivePath, boolean validate)
      throws JAXBException, IOException, SAXException {
    ViewConfig res = null;
    InputStream  configStream = null;
    try {
    File configFile = new File(archivePath + File.separator + VIEW_XML);

    if (!configFile.exists()) {
      configFile = new File(archivePath + File.separator + WEB_INF_VIEW_XML);
    }

    if (validate) {
      validateConfig(new FileInputStream(configFile));
    }

    configStream     = new FileInputStream(configFile);
    JAXBContext  jaxbContext      = JAXBContext.newInstance(ViewConfig.class);
    Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
    res = (ViewConfig) jaxbUnmarshaller.unmarshal(configStream);
    } finally {
      if (configStream != null) {
        configStream.close();
      }
    }

    return res;
  }",Get the view configuration from the extracted archive file.,0,252
5992,"public Timestamp getTimestamp(String columnLabel, Calendar calendar) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode(""getTimestamp("" + StringUtils.quoteJavaString(columnLabel) + "", calendar)"");
            }
            return LegacyDateTimeUtils.toTimestamp(conn, calendar != null ? calendar.getTimeZone() : null,
                    get(columnLabel));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }",Returns the value of the specified column as a java.sql.Timestamp.,0,131
7362,"static Mode mapIntToValue(final int modeInt) {
			for (Mode value : Mode.values()) {
				if (modeInt == value.getIntValue()) {
					return value;
				}
			}

			// If not, return default
			return getDefault();
		}",Maps an int to a specific mode.,0,79
7612,"public int getTotalTimePercentile(double percentile) {
        if (rollingLatencyDistribution.hasValue()) {
            return (int) rollingLatencyDistribution.getValue().getTotalLatencyPercentile(percentile);
        } else {
            return 0;
        }
        //return percentileTotal.getPercentile(percentile);
    }",Retrieve the total end-to-end execution time (in milliseconds) for  HystrixCommand#execute() or  HystrixCommand#queue() at a given percentile.,0,67
5309,"public int getClockrate()
    {
        return getAttributeAsInt(CLOCKRATE_ARG_NAME);
    }",Returns the sampling frequency in Hertz used by this encoding.,0,23
5900,"private Format getCaptureOutputFormat()
    {
        NSDictionary pixelBufferAttributes
            = captureOutput.pixelBufferAttributes();

        if (pixelBufferAttributes != null)
        {
            int pixelFormatType
                = pixelBufferAttributes
                    .intForKey(
                        CVPixelBufferAttributeKey
                            .kCVPixelBufferPixelFormatTypeKey);
            int width
                = pixelBufferAttributes
                    .intForKey(
                        CVPixelBufferAttributeKey.kCVPixelBufferWidthKey);
            int height
                = pixelBufferAttributes
                    .intForKey(
                        CVPixelBufferAttributeKey.kCVPixelBufferHeightKey);

            switch (pixelFormatType)
            {
            case CVPixelFormatType.kCVPixelFormatType_32ARGB:
                if (captureOutputFormat instanceof AVFrameFormat)
                    return
                        new AVFrameFormat(
                                ((width == 0) && (height == 0)
                                    ? null
                                    : new Dimension(width, height)),
                                Format.NOT_SPECIFIED,
                                FFmpeg.PIX_FMT_ARGB);
                else
                    return
                        new RGBFormat(
                                ((width == 0) && (height == 0)
                                    ? null
                                    : new Dimension(width, height)),
                                Format.NOT_SPECIFIED,
                                Format.byteArray,
                                Format.NOT_SPECIFIED,
                                32,
                                2, 3, 4);
            case CVPixelFormatType.kCVPixelFormatType_420YpCbCr8Planar:
                if ((width == 0) && (height == 0))
                {
                    if (captureOutputFormat instanceof AVFrameFormat)
                        return new AVFrameFormat(FFmpeg.PIX_FMT_YUV420P);
                    else
                        return new YUVFormat(YUVFormat.YUV_420);
                }
                else if (captureOutputFormat instanceof AVFrameFormat)
                {
                    return
                        new AVFrameFormat(
                                new Dimension(width, height),
                                Format.NOT_SPECIFIED,
                                FFmpeg.PIX_FMT_YUV420P);
                }
                else
                {
                    int strideY = width;
                    int strideUV = strideY / 2;
                    int offsetY = 0;
                    int offsetU = strideY * height;
                    int offsetV = offsetU + strideUV * height / 2;

                    return
                        new YUVFormat(
                                new Dimension(width, height),
                                Format.NOT_SPECIFIED,
                                Format.byteArray,
                                Format.NOT_SPECIFIED,
                                YUVFormat.YUV_420,
                                strideY, strideUV,
                                offsetY, offsetU, offsetV);
                }
            }
        }
        return null;
    }",Gets the Format of the media data made available by this PushBufferStream as indicated by  #captureOutput.,0,584
6468,"public Optional<Column> resolveLatest(final LogicalSchema schema) {
    return keyField
        .map(colRef -> schema.findValueColumn(colRef)
            .orElseThrow(() -> new IllegalArgumentException(
                ""Invalid key field, not found in schema: ""
                    + colRef.toString(FormatOptions.noEscape()))));
  }",Resolve the _latest_ keyfield in the supplied  schema.,0,80
7070,"static String metricName(final TSDB tsdb, final byte[] row) {
    try {
      return metricNameAsync(tsdb, row).joinUninterruptibly();
    } catch (RuntimeException e) {
      throw e;
    } catch (Exception e) {
      throw new RuntimeException(""Should never be here"", e);
    }
  }",Extracts the name of the metric ID contained in a row key.,0,99
5859,"private Object getConvertedValue(Object value) {
		return writer.convertToMongoType(value);
	}",Converts the given value with the underlying  MongoWriter.,0,27
6591,"public double getDownloadJitterMs()
    {
        return this.getJitterMs(StreamDirection.DOWNLOAD);
    }",Returns the jitter average of this download stream.,0,27
7580,"public Set<byte[]> smembers(final byte[] key) {
    checkIsInMulti();
    client.smembers(key);
    return SetFromList.of(client.getBinaryMultiBulkReply());
  }",Return all the members (elements) of the set value stored at key.,0,55
6219,"public String getWorkerDirPath(long storageDirId) {
    return mIdToWorkerDirPath.get(storageDirId);
  }",Get path of specified StorageDir,0,27
7735,"public String toString(OutputFormat format) {
    switch(format) {
    case XML:
      return toXMLString();
    case READABLE:
      return toReadableString();
    case LIST:
      return toList();
    case RECURSIVE:
      return toString();
    default:
      throw new IllegalArgumentException(""Unsupported format "" + format);
    }
  }",Returns a String representation of the result of this set of typed dependencies in a user-specified format.,0,104
6537,"public static DataSource createDataSource(final byte[] yamlBytes) {
        YamlRootEncryptRuleConfiguration config = YamlEngine.unmarshal(yamlBytes, YamlRootEncryptRuleConfiguration.class);
        return EncryptDataSourceFactory.createDataSource(config.getDataSource(), new EncryptRuleConfigurationYamlSwapper().swap(config.getEncryptRule()));
    }",Create encrypt data source.,0,73
6184,"public Set<GrantedAuthority> getGroupMembershipRoles(String userDn, String username) {
        if (getGroupSearchBase() == null) {
            return Collections.emptySet();
        }

        Set<GrantedAuthority> authorities = new HashSet<GrantedAuthority>();

        if (logger.isDebugEnabled()) {
            logger.debug(""Searching for roles for user '"" + username + ""', DN = "" + ""'"" + userDn + ""', with filter ""
                    + groupSearchFilter + "" in search base '"" + getGroupSearchBase() + ""'"");
        }

        Set<String> userRoles = ldapTemplate.searchForSingleAttributeValues(getGroupSearchBase(), groupSearchFilter,
                new String[]{userDn, username}, groupRoleAttribute);

        if (logger.isDebugEnabled()) {
            logger.debug(""Roles from search: "" + userRoles);
        }

        for (String role : userRoles) {

            if (convertToUpperCase) {
                role = role.toUpperCase();
            }

            authorities.add(new GrantedAuthorityImpl(rolePrefix + role));
        }

        return authorities;
    }",Obtains the authorities for the user who's directory entry is represented by the supplied LdapUserDetails object.,0,294
6567,"public static String generateStagingSessionToken(String sessionId, String basePath)
      throws Exception {
    StagingSessionToken stagingSessionToken = new StagingSessionToken();
    stagingSessionToken.setSessionId(sessionId);
    stagingSessionToken.setBasePath(basePath);
    return stagingSessionToken.encode();
  }",Generate a stagingSessionToken compatible with  BeamFileSystemArtifactStagingService.,0,70
7383,"public boolean offer(final AtomicBuffer buffer, final int offset, final int length)
    {
        // TODO: must update the logAppender header with new termId!
        final LogAppender logAppender = logAppenders[currentBufferIndex];
        if (isPausedDueToFlowControl(logAppender))
        {
            return false;
        }

        final AppendStatus status = logAppender.append(buffer, offset, length);

        if (status == TRIPPED)
        {
            currentBufferIndex = rotateId(currentBufferIndex);
            final long currentTermId = this.currentTermId.get();
            this.currentTermId.lazySet(currentTermId + 1);

            requestTermClean(currentTermId);

            return offer(buffer, offset, length);
        }

        return status == SUCCESS;
    }",Non-blocking publish of a partial buffer containing a message.,0,196
7809,"public TimeOnly roundHalfCeilingCopy() {
        TimeOnly instant = iInstant;
        return (TimeOnly)instant.withMillis(iField.roundHalfCeiling(instant.getMillis()));
    }","Rounds to the nearest whole unit of this field on a copy of this TimeOnly, favoring the ceiling if halfway.",0,46
6956,"public int migrate() throws FlywayException {
        StopWatch stopWatch = new StopWatch();
        stopWatch.start();

        int migrationSuccessCount = 0;
        while (true) {
            final boolean firstRun = migrationSuccessCount == 0;
            MigrationVersion result = new TransactionTemplate(connectionMetaDataTable, false).execute(new TransactionCallback<MigrationVersion>() {
                public MigrationVersion doInTransaction() {
                    metaDataTable.lock();

                    MigrationInfoServiceImpl infoService =
                            new MigrationInfoServiceImpl(migrationResolver, metaDataTable, target, outOfOrder);
                    infoService.refresh();

                    MigrationVersion currentSchemaVersion = MigrationVersion.EMPTY;
                    if (infoService.current() != null) {
                        currentSchemaVersion = infoService.current().getVersion();
                    }
                    if (firstRun) {
                        LOG.info(""Current version of schema "" + schema + "": "" + currentSchemaVersion);

                        if (outOfOrder) {
                            LOG.warn(""outOfOrder mode is active. Migration of schema "" + schema + "" may not be reproducible."");
                        }
                    }

                    MigrationInfo[] future = infoService.future();
                    if (future.length > 0) {
                        MigrationInfo[] resolved = infoService.resolved();
                        if (resolved.length == 0) {
                            LOG.warn(""Schema "" + schema + "" has version "" + currentSchemaVersion
                                    + "", but no migration could be resolved in the configured locations !"");
                        } else {
                            LOG.warn(""Schema "" + schema + "" has a version ("" + currentSchemaVersion
                                    + "") that is newer than the latest available migration (""
                                    + resolved[resolved.length - 1].getVersion() + "") !"");
                        }
                    }

                    MigrationInfo[] failed = infoService.failed();
                    if (failed.length > 0) {
                        if ((failed.length == 1)
                                && (failed[0].getState() == MigrationState.FUTURE_FAILED)
                                && ignoreFailedFutureMigration) {
                            LOG.warn(""Schema "" + schema + "" contains a failed future migration to version "" + failed[0].getVersion() + "" !"");
                        } else {
                            throw new FlywayException(""Schema "" + schema + "" contains a failed migration to version "" + failed[0].getVersion() + "" !"");
                        }
                    }

                    MigrationInfoImpl[] pendingMigrations = infoService.pending();

                    if (pendingMigrations.length == 0) {
                        return null;
                    }

                    boolean isOutOfOrder = pendingMigrations[0].getVersion().compareTo(currentSchemaVersion) < 0;
                    return applyMigration(pendingMigrations[0].getResolvedMigration(), isOutOfOrder);
                }
            });
            if (result == null) {
                // No further migrations available
                break;
            }

            migrationSuccessCount++;
        }

        stopWatch.stop();

        logSummary(migrationSuccessCount, stopWatch.getTotalTimeMillis());
        return migrationSuccessCount;
    }",Starts the actual migration.,0,775
7022,"public Message updateMessage(Message message) throws SystemException {
		return messagePersistence.update(message);
	}",Updates the message in the database or adds it if it does not yet exist.,0,31
7307,"public UserThread remove(Serializable primaryKey)
		throws NoSuchUserThreadException, SystemException {
		Session session = null;

		try {
			session = openSession();

			UserThread userThread = (UserThread)session.get(UserThreadImpl.class,
					primaryKey);

			if (userThread == null) {
				if (_log.isWarnEnabled()) {
					_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
				}

				throw new NoSuchUserThreadException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					primaryKey);
			}

			return remove(userThread);
		}
		catch (NoSuchUserThreadException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}",Removes the user thread with the primary key from the database.,0,210
7692,"public boolean isTextPresent(String pattern) {
    return (Boolean) seleneseMethods.get(""isTextPresent"").apply(driver, pattern);
  }",Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.,0,41
5978,"public Timestamp getTimestamp(String columnLabel, Calendar calendar) throws SQLException {
        try {
            if (isDebugEnabled()) {
                debugCode(""getTimestamp("" + StringUtils.quoteJavaString(columnLabel) + "", calendar)"");
            }
            return get(columnLabel).getTimestamp(calendar != null ? calendar.getTimeZone() : null);
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }",Returns the value of the specified column as a java.sql.Timestamp.,0,124
6302,"private static Response createResponse(Object object) {
    if (object == null) {
      return Response.ok().build();
    }

    if (object instanceof Response) {
      return (Response) object;
    }

    if (object instanceof Response.Status) {
      Response.Status s = (Response.Status) object;
      switch (s) {
        case OK:
          return Response.ok().build();
        case ACCEPTED:
          return Response.accepted().build();
        case NO_CONTENT:
          return Response.noContent().build();
        default:
          return createErrorResponse(
              new S3Exception(""Response status is invalid"", S3ErrorCode.INTERNAL_ERROR));
      }
    }

    return Response.ok(object).build();
  }",Creates a response using the given object.,0,228
6017,"public static Optional<Class> resolveSingleTypeArgument(Type genericType) {
        if(genericType instanceof ParameterizedType) {
            ParameterizedType pt = (ParameterizedType) genericType;
            Type[] actualTypeArguments = pt.getActualTypeArguments();
            if(actualTypeArguments.length == 1) {
                Type actualTypeArgument = actualTypeArguments[0];
                return resolveParameterizedTypeArgument(actualTypeArgument);
            }
        }
        return Optional.empty();
    }",Resolve a single type from the given generic type,0,116
7278,"public boolean isController() {
        return DEVICE_TYPE_SHC.equals(type) || DEVICE_TYPE_SHCA.equals(type);
    }",Returns true if the device is a controller (SHC).,0,34
6825,"public TableView getSortedView(long columnIndex){
        return new TableView(nativeGetSortedView(nativePtr, columnIndex, true), immutable);

    }",Returns a view sorted by the specified column by the default order,0,39
5779,"public boolean storeUpload(UploadDbObject uploadObject) {
        Log_OC.e(TAG, ""Inserting ""+uploadObject.getLocalPath()+"" with uploadStatus=""+uploadObject.getUploadStatus());
        
        ContentValues cv = new ContentValues();
        cv.put(""path"", uploadObject.getLocalPath());
        cv.put(""uploadStatus"", uploadObject.getUploadStatus().value);
        cv.put(""uploadObject"", uploadObject.toString());

        long result = getDB().insert(TABLE_UPLOAD, null, cv);
        
        Log_OC.d(TAG, ""putFileForLater returns with: "" + result + "" for file: "" + uploadObject.getLocalPath());
        if (result == -1) {
            Log_OC.e(TAG, ""Failed to insert item "" + uploadObject.getLocalPath() + "" into upload db."");
            return false;
        } else {
            notifyObserversNow();
            return true;
        }
    }",Stores an upload object in DB.,0,247
5333,"public ActionBar getSupportActionBar() {
        initActionBar();
        return mActionBar;
    }",Retrieve a reference to this activity's action bar handler.,0,25
7621,"public static boolean and(boolean first, boolean second) {
        MOCKING_PROGRESS.getArgumentMatcherStorage().reportAnd(); 
        return false;
    }",boolean argument that matches both given matchers.,0,42
6596,"public static TruffleObject sendKeys(Node keysNode, TruffleObject receiver, boolean includeInternal) throws UnsupportedMessageException {
        try {
            if (LEGACY_TO_LIBRARY_BRIDGE) {
                return ((LegacyToLibraryNode) keysNode).sendKeys(receiver, includeInternal);
            } else {
                return (TruffleObject) send(keysNode, receiver, includeInternal);
            }
        } catch (UnsupportedMessageException ex) {
            CompilerDirectives.transferToInterpreter();
            throw ex;
        } catch (InteropException e) {
            CompilerDirectives.transferToInterpreter();
            throw new AssertionError(""Unexpected exception caught."", e);
        }
    }","Sends a  Message#KEYS message to the foreign receiver object, with a specification of whether internal keys should be included in the result, or not.",0,162
6194,"public static Scope scope(Object name, Object... context) {
        if (ENABLED) {
            return DebugScope.getInstance().scope(convertFormatArg(name).toString(), null, context);
        } else {
            return null;
        }
    }",Creates and enters a new debug scope which will be a child of the current debug scope.,0,79
7710,"public static DateTimeFormatter dateHourMinute() {
        return Constants.dhm;
    }","Returns a formatter that combines a full date, two digit hour of day, and two digit minute of hour.",0,23
7264,"public AnnotationMetadata build(T element) {
        final AnnotationMetadata existing = MUTATED_ANNOTATION_METADATA.get(element);
        if (existing != null) {
            return existing;
        } else {

            DefaultAnnotationMetadata annotationMetadata = new DefaultAnnotationMetadata();

            try {
                AnnotationMetadata metadata = buildInternal(null, element, annotationMetadata, true);
                if (metadata.isEmpty()) {
                    return AnnotationMetadata.EMPTY_METADATA;
                }
                return metadata;
            } catch (RuntimeException e) {
                if (""org.eclipse.jdt.internal.compiler.problem.AbortCompilation"".equals(e.getClass().getName())) {
                    // workaround for a bug in the Eclipse APT implementation. See bug 541466 on their Bugzilla.
                    return AnnotationMetadata.EMPTY_METADATA;
                } else {
                    throw e;
                }
            }
        }
    }",Build the meta data for the given element.,0,203
5404,"private JSONObject transferTo(String fileName, String newParent, String newName, boolean move) throws JSONException, NoModificationAllowedException, IOException, InvalidModificationException, EncodingException, FileExistsException {
        String newFileName = getRealPathFromURI(Uri.parse(fileName), cordova);
        newParent = getRealPathFromURI(Uri.parse(newParent), cordova);

        // Check for invalid file name
        if (newName != null && newName.contains("":"")) {
            throw new EncodingException(""Bad file name"");
        }

        File source = new File(newFileName);

        if (!source.exists()) {
            // The file/directory we are copying doesn't exist so we should fail.
            throw new FileNotFoundException(""The source does not exist"");
        }

        File destinationDir = new File(newParent);
        if (!destinationDir.exists()) {
            // The destination does not exist so we should fail.
            throw new FileNotFoundException(""The source does not exist"");
        }

        // Figure out where we should be copying to
        File destination = createDestination(newName, source, destinationDir);

        //Log.d(LOG_TAG, ""Source: "" + source.getAbsolutePath());
        //Log.d(LOG_TAG, ""Destin: "" + destination.getAbsolutePath());

        // Check to see if source and destination are the same file
        if (source.getAbsolutePath().equals(destination.getAbsolutePath())) {
            throw new InvalidModificationException(""Can't copy a file onto itself"");
        }

        if (source.isDirectory()) {
            if (move) {
                return moveDirectory(source, destination);
            } else {
                return copyDirectory(source, destination);
            }
        } else {
            if (move) {
            	JSONObject newFileEntry = moveFile(source, destination);

            	// If we've moved a file given its content URI, we need to clean up.
            	if (fileName.startsWith(""content://"")) {
            		notifyDelete(fileName);
            	}

            	return newFileEntry;
            } else {
                return copyFile(source, destination);
            }
        }
    }",A setup method that handles the move/copy of files/directories,0,458
6048,"public boolean addNoChecksumAnchor() {
    if (slot == null) {
      return false;
    }
    boolean result = slot.addAnchor();
    if (LOG.isTraceEnabled()) {
      if (result) {
        LOG.trace(this + "": added no-checksum anchor to slot "" + slot);
      } else {
        LOG.trace(this + "": could not add no-checksum anchor to slot "" + slot);
      }
    }
    return result;
  }",Try to add a no-checksum anchor to our shared memory slot.,0,129
5591,"public Object get() {
            return get(true);
        }",Obtains the object represented by this symbol.,0,22
5255,"public static TextProtocolBackendHandler newInstance(final DatabaseType databaseType, final String sql, final BackendConnection backendConnection) {
        if (sql.toUpperCase().startsWith(ShardingCTLBackendHandlerFactory.SCTL)) {
            return ShardingCTLBackendHandlerFactory.newInstance(sql, backendConnection);
        }
        SQLStatement sqlStatement = new SQLParseEngine(MasterSlaveParseRuleRegistry.getInstance(), databaseType, sql, null, null).parse();
        if (sqlStatement instanceof TCLStatement) {
            return createTCLBackendHandler((TCLStatement) sqlStatement, backendConnection);
        }
        if (sqlStatement instanceof DALStatement) {
            return createDALBackendHandler((DALStatement) sqlStatement, sql, backendConnection);
        }
        return new QueryBackendHandler(sql, backendConnection);
    }",Create new instance of text protocol backend handler.,0,187
6223,"public static byte[] executePost(String url, byte[] data, Map<String, String> requestProperties)
      throws IOException {
    HttpURLConnection urlConnection = null;
    try {
      urlConnection = (HttpURLConnection) new URL(url).openConnection();
      urlConnection.setRequestMethod(""POST"");
      urlConnection.setDoOutput(data != null);
      urlConnection.setDoInput(true);
      if (requestProperties != null) {
        for (Map.Entry<String, String> requestProperty : requestProperties.entrySet()) {
          urlConnection.setRequestProperty(requestProperty.getKey(), requestProperty.getValue());
        }
      }
      // Write the request body, if there is one.
      if (data != null) {
        OutputStream out = urlConnection.getOutputStream();
        try {
          out.write(data);
        } finally {
          out.close();
        }
      }
      // Read and return the response body.
      InputStream inputStream = urlConnection.getInputStream();
      try {
        return toByteArray(inputStream);
      } finally {
        inputStream.close();
      }
    } finally {
      if (urlConnection != null) {
        urlConnection.disconnect();
      }
    }
  }",Executes a post request using  HttpURLConnection.,0,330
7013,"public DiscretizedStream<OUT> reduceWindow(ReduceFunction<OUT> reduceFunction) {

		// We check whether we should apply parallel time discretization, which
		// is a more complex exploiting the monotonic properties of time
		// policies
		if (WindowUtils.isTimeOnly(getTrigger(), getEviction()) && discretizerKey == null
				&& dataStream.getParallelism() > 1) {
			return timeReduce(reduceFunction);
		} else {
			WindowTransformation transformation = WindowTransformation.REDUCEWINDOW
					.with(clean(reduceFunction));

			WindowBuffer<OUT> windowBuffer = getWindowBuffer(transformation);

			DiscretizedStream<OUT> discretized = discretize(transformation, windowBuffer);

			if (windowBuffer instanceof PreAggregator) {
				return discretized;
			} else {
				return discretized.reduceWindow(reduceFunction);
			}
		}
	}",Applies a reduce transformation on the windowed data stream by reducing the current window at every trigger.The user can also extend the  RichReduceFunction to gain access to other features provided by the  org.apache.flink.api.common.functions.RichFunction interface.,0,196
6006,"public static TypeDescriptor forObject(Object object) {
		if (object == null) {
			return NULL;
		}
		if (object instanceof Collection<?>) {
			return new TypeDescriptor(object.getClass(), findCommonElement((Collection<?>) object));
		}
		else if (object instanceof Map<?, ?>) {
			Map<?, ?> map = (Map<?, ?>) object;
			return new TypeDescriptor(map.getClass(), findCommonElement(map.keySet()), findCommonElement(map.values()));
		}
		else {
			return valueOf(object.getClass());
		}
	}",Create a new type descriptor for an object.,0,194
6189,"Router getRouter(final ResourceMethod resourceMethod) {
        return new SubResourceLocatorRouter(createServiceFunction, valueSuppliers, resourceMethod, resourceContext, this);
    }",Obtain a sub-resource locator router for given resource method.,0,39
5732,"public static Object convert(final Object iValue, final Class<?> iTargetClass) {
		if (iValue == null)
			return null;

		if (iValue.getClass().equals(iTargetClass))
			// SAME TYPE: DON'T CONVERT IT
			return iValue;

		if (iTargetClass.isAssignableFrom(iValue.getClass()))
			// COMPATIBLE TYPES: DON'T CONVERT IT
			return iValue;

		if (iTargetClass.isEnum()) {
			if (iValue instanceof Number)
				return ((Class<Enum>) iTargetClass).getEnumConstants()[((Number) iValue).intValue()];

			return Enum.valueOf((Class<Enum>) iTargetClass, iValue.toString());
		}

		if (iTargetClass.equals(Byte.TYPE) || iTargetClass.equals(Byte.class)) {
			if (iValue instanceof Byte)
				return iValue;
			return ((Number) iValue).byteValue();

		} else if (iTargetClass.equals(Short.TYPE) || iTargetClass.equals(Short.class)) {
			if (iValue instanceof Short)
				return iValue;
			return ((Number) iValue).shortValue();

		} else if (iTargetClass.equals(Integer.TYPE) || iTargetClass.equals(Integer.class)) {
			if (iValue instanceof Integer)
				return iValue;
			return ((Number) iValue).intValue();

		} else if (iTargetClass.equals(Long.TYPE) || iTargetClass.equals(Long.class)) {
			if (iValue instanceof Long)
				return iValue;
			return ((Number) iValue).longValue();

		} else if (iTargetClass.equals(Float.TYPE) || iTargetClass.equals(Float.class)) {
			if (iValue instanceof Float)
				return iValue;
			return ((Number) iValue).floatValue();

		} else if (iTargetClass.equals(Double.TYPE) || iTargetClass.equals(Double.class)) {
			if (iValue instanceof Double)
				return iValue;
			return ((Number) iValue).doubleValue();

		} else if (iTargetClass.equals(Boolean.TYPE) || iTargetClass.equals(Boolean.class)) {
			if (iValue instanceof Boolean)
				return ((Boolean) iValue).booleanValue();
			else if (iValue instanceof Number)
				return ((Number) iValue).intValue() != 0;

		} else if (iValue instanceof Collection<?> && Set.class.isAssignableFrom(iTargetClass)) {
			final Set<Object> set = new HashSet<Object>();
			set.addAll((Collection<? extends Object>) iValue);
			return set;

		}

		return null;
	}",Convert types between numbers based on the iTargetClass parameter.,0,764
5437,"public Feature findFeature(FeatureId id, Hints hints) throws IOException {
        for (Entry<Name, FeatureTypeMapping> mapping : mappings.entrySet()) {
            if (Thread.currentThread().isInterrupted()) {
                return null;
            }
            Filter filter = filterFac.id(id);
            FeatureCollection<FeatureType, Feature> fCollection = new MappingFeatureSource(this,
                    mapping.getValue()).getFeatures(filter, hints);
            FeatureIterator<Feature> iterator = fCollection.features();
            try {
                if (iterator.hasNext()) {
                    return iterator.next();
                }
            } finally {
                iterator.close();
            }
        }
        return null;
    }",Return a feature source that can be used to obtain features of a particular name.,0,203
5420,"public String getDisplayName()
    {
        String displayName = getPeerAddress().getDisplayName();
        return (displayName == null)
                    ? getPeerAddress().getURI().toString()
                    : displayName;
    }",Returns a human readable name representing this peer.,0,63
5715,"public String getOfflineCauseReason() {
        if (offlineCause == null) {
            return new String("""");
        }
        else {
            String newString = offlineCause.toString().replaceAll(
                    ""^Disconnected by [\\w]* \\: "","""");
            return newString.toString().replaceAll(
                    ""^Disconnected by [\\w]*"","""");
        }
    }","If the computer was offline (either temporarily or not), this method will return the cause as a string (without user info).",0,104
5756,"private RenderedImage createBlankResponse() {
        // if we get here that means that we do not have anything to load
        // but still we are inside the definition area for the mosaic,
        // therefore we create a fake coverage using the background values,
        // if provided (defaulting to 0), as well as the compute raster
        // bounds, envelope and grid to world.
        LOGGER.fine(""Creating constant image for area with no data"");
        final Number[] values = ImageUtilities.getBackgroundValues(rasterManager.defaultSM, backgroundValues);
        // create a constant image with a proper layout
        RenderedImage finalImage = ConstantDescriptor.create(
                Float.valueOf(rasterBounds.width),
                Float.valueOf(rasterBounds.height),
                values,
                null);
        if (rasterBounds.x != 0 || rasterBounds.y != 0) {
            finalImage = TranslateDescriptor.create(finalImage, Float.valueOf(rasterBounds.x), Float.valueOf(rasterBounds.y), Interpolation.getInstance(Interpolation.INTERP_NEAREST), null);
        }
        if (rasterManager.defaultCM != null) {
            final ImageLayout2 il= new ImageLayout2();
            il.setColorModel(rasterManager.defaultCM);
            Dimension tileSize= request.getTileDimensions();
            if(tileSize==null){
                tileSize=JAI.getDefaultTileSize();
            } 
            il.setSampleModel(rasterManager.defaultCM.createCompatibleSampleModel(tileSize.width, tileSize.height));
            il.setTileGridXOffset(0).setTileGridYOffset(0).setTileWidth((int)tileSize.getWidth()).setTileHeight((int)tileSize.getHeight());
            finalImage = FormatDescriptor.create(
                    finalImage,
                    Integer.valueOf(il.getSampleModel(null).getDataType()),
                    new RenderingHints(JAI.KEY_IMAGE_LAYOUT,il));
        }
        
        if(footprintBehavior != null) {
            finalImage = footprintBehavior.postProcessBlankResponse(finalImage);
        }
        
        return finalImage;
    }",This method is responsible for creating a blank image as a reponse to the query as it seems we got a no data area.,0,414
7738,"public Table removeTable(TableId tableId) {
        return lock.write(() -> {
            changes.add(tableId);
            return tablesByTableId.remove(tableId);
        });
    }",Remove the definition of the identified table.,0,56
6429,"public static String get(String key, String def) {
        if (key == null) {
            throw new NullPointerException(""key"");
        }

        String value = props.getProperty(key);
        if (value == null) {
            return def;
        }

        return value;
    }","Returns the value of the Java system property with the specified  key, while falling back to the specified default value if the property access fails.",0,99
6599,"public Cell next() throws IOException {
        seekToNextUnfilteredKeyValue();
        return delegate.next();
    }",Same a  KeyValueScanner#next() except that we filter out the next  KeyValue until we find one that passes the filter.,0,33
7466,"public TodorooCursor<Task> getLocallyCreated(Property<?>[] properties) {
        return taskDao.query(Query.select(properties).where(Criterion.and(TaskCriteria.isActive(),
                Task.REMOTE_ID.isNull())));
    }","Currently, this method does nothing, there is an alternate method to create tasks",0,64
6394,"public boolean addIfAbsent(T element) {
    // COMPATIBILITY: We need to cast mMap to ConcurrentHashMapV8 to make sure the code can compile
    // on Java 7 because the Map#putIfAbsent() method has only been introduced in Java 8.
    return ((ConcurrentHashMapV8<T, Boolean>) mMap).putIfAbsent(element, Boolean.TRUE) == null;
  }","Adds an element into the set, if and only if it is not already a part of the set.",0,55
7791,"public Button getButton(int index) {
		Button button = soloView.getButton(index);
		return button;
	}",This method returns a button with a certain index.,0,37
6695,"private boolean isCommon() {
    return commonWords != null && commonWords.contains(termAttribute.buffer(), 0, termAttribute.length());
  }",Determines if the current token is a common term,0,48
6890,"public AbstractObjectList<T> partFromTo(int from, int to) {
    if (size == 0) {
      return new ObjectArrayList<T>(0);
    }

    checkRangeFromTo(from, to, size);

    Object[] part = new Object[to - from + 1];
    System.arraycopy(elements, from, part, 0, to - from + 1);
    return new ObjectArrayList<T>((T[]) part);
  }","Returns a new list of the part of the receiver between from, inclusive, and to, inclusive.",0,144
7317,"public InstructorHomePage loadInstructorHomeTab() {
        instructorHomeTab.click();
        waitForPageToLoad();
        return changePageType(InstructorHomePage.class);
    }",Equivalent to clicking the 'Home' tab on the top menu of the page.,0,38
6884,"public Tab loadUrl(String url, Map<String, String> headers, PageLoadHandler handler) {
        PageData pageData = new PageData(url, headers, handler);
        return load(pageData);
    }",Use this method to control browser from outer world.,0,62
6922,"public boolean call(Context context, String dataName, Parcelable data) {
        if(intent == null){
            initializeIntent();
        }
        boolean success = false;
        if (intent != null) {
            LogManager.d(TAG, ""attempting callback via intent: %s"", intent.getComponent());
            intent.putExtra(dataName, data);
            try {
                context.startService(intent);
                success = true;
            } catch (Exception e) {
                LogManager.e(
                        TAG,
                        ""Failed attempting to start service: "" + intent.getComponent().flattenToString(),
                        e
                );
            }
        }
        return success;
    }","Tries making the callback, first via messenger, then via intent",0,186
7712,"public int start() {
        FileDownloadLog.d(this, ""begin call start url[%s], savePath[%s], listener[%s], isNeedNotification[%B], notificationTitle[%s], notificationDesc[%s],"" +
                "" tag[%s]"", url, savePath, listener, isNeedNotification, notificationTitle, notificationDesc, tag);

        if (savePath == null) {
            savePath = FileDownloadUtils.getDefaultSaveFilePath(url);
            FileDownloadLog.e(this, ""save path is null to %s"", savePath);
        }


        addEventListener();

        if (isNeedNotification) {
            // TODO æ¿æ¢app name
            notificationTitle = notificationTitle == null ? ""app name"" : notificationTitle;
        }


        try {
            checkFile(savePath);

            // æå¡æ¯å¦å¯å¨
            if (!checkCanStart()) {
                // æ²¡æåå¤å¥½
                return getDownloadId();
            }

            FileDownloadList.getImpl().add(this);

            // æ¯å¦æ­£å¨ä¸è½½
            if (checkDownloading(getUrl(), getSavePath())) {
                // æ­£å¨ä¸è½½
                // è¿éå°±ç´æ¥ç»æäº
                FileDownloadLog.d(this, ""Current is downloading %d"", getDownloadId());

                setStatus(FileDownloadStatus.warn);
                FileDownloadList.getImpl().removeByWarn(this);

                return getDownloadId();
            }

            if (checkCanReuse()) {
                FileDownloadLog.d(this, ""reuse downloaded file %s"", getUrl());
                this.isReusedOldFile = true;


                setStatus(FileDownloadStatus.completed);
                FileDownloadList.getImpl().removeByCompleted(this);

            } else {
                FileDownloadLog.d(this, ""start downloaded by ui process %s"", getUrl());
                this.isReusedOldFile = false;

                if (startExecute() == 0) {
                    setEx(new RuntimeException(""not run download, not got download id""));
                    FileDownloadList.getImpl().removeByError(this);
                }
            }

        } catch (Throwable e) {
            e.printStackTrace();

            setEx(e);
            FileDownloadList.getImpl().removeByError(this);
        }

        FileDownloadLog.d(this, ""end call start url[%s], savePath[%s], listener[%s], isNeedNotification[%B], notificationTitle[%s], notificationDesc[%s],"" +
                        ""tag[%s]"", url, savePath, listener, isNeedNotification, notificationTitle, notificationDesc,
                tag);

        return getDownloadId();

    }",start download,0,543
7168,"public boolean execute(String action, JSONArray args, CallbackContext callbackContext) {
        if (this.locationManager == null) {
            this.locationManager = (LocationManager) this.cordova.getActivity().getSystemService(Context.LOCATION_SERVICE);
            this.networkListener = new NetworkListener(this.locationManager, this);
            this.gpsListener = new GPSListener(this.locationManager, this);
        }

        PluginResult.Status status = PluginResult.Status.NO_RESULT;
        String message = ""Location API is not available for this device."";
        PluginResult result = new PluginResult(status, message);

        if ( locationManager.isProviderEnabled( LocationManager.GPS_PROVIDER ) ||
                locationManager.isProviderEnabled( LocationManager.NETWORK_PROVIDER )) {

            result.setKeepCallback(true);

            try {
                if (action.equals(""getLocation"")) {
                    boolean enableHighAccuracy = args.getBoolean(0);
                    int maximumAge = args.getInt(1);
                    Location last = this.locationManager.getLastKnownLocation((enableHighAccuracy ? LocationManager.GPS_PROVIDER : LocationManager.NETWORK_PROVIDER));
                    // Check if we can use lastKnownLocation to get a quick reading and use less battery
                    if (last != null && (System.currentTimeMillis() - last.getTime()) <= maximumAge) {
                        result = new PluginResult(PluginResult.Status.OK, this.returnLocationJSON(last));
                    } else {
                        this.getCurrentLocation(callbackContext, enableHighAccuracy);
                    }
                }
                else if (action.equals(""addWatch"")) {
                    String id = args.getString(0);
                    boolean enableHighAccuracy = args.getBoolean(1);
                    this.addWatch(id, callbackContext, enableHighAccuracy);
                }
                else if (action.equals(""clearWatch"")) {
                    String id = args.getString(0);
                    this.clearWatch(id);
                }
                else {
                    return false;
                }
            } catch (JSONException e) {
                result = new PluginResult(PluginResult.Status.JSON_EXCEPTION, e.getMessage());
            }
        }
        callbackContext.sendPluginResult(result);
        return true;

    }",Executes the request and returns PluginResult.,0,562
7236,"public String downloadToString() throws IOException {
        return downloadToString(Globals.prefs.getDefaultEncoding());
    }",Encoding will be determined from JabRefPreferences.DEFAULT_ENCODING,0,32
5589,"public static Expression compile(String sourceText) throws ParseException {
    return new JavascriptCompiler().compileExpression(sourceText);
  }",Compiles the given expression.,0,37
5706,"public boolean exists( String name ) {
    return getNames().stream().anyMatch( name::equalsIgnoreCase );
  }",Find out if a named connection exists,0,40
7011,"private DBDecoder getDecoder() {
        return getDBDecoderFactory() != null ? getDBDecoderFactory().create() : null;
    }",Returns a single object from this collection matching the query.,0,40
7761,"private Expression translate0(RexNode expr, RexImpTable.NullAs nullAs) {
    if (nullAs == RexImpTable.NullAs.NULL && !expr.getType().isNullable()) {
      nullAs = RexImpTable.NullAs.NOT_POSSIBLE;
    }
    switch (expr.getKind()) {
    case INPUT_REF:
      final int index = ((RexInputRef) expr).getIndex();
      Expression x = inputGetter.field(list, index);
      return list.append(
          ""v"",
          nullAs.handle(
              list.append(""v"", x)));
    case LOCAL_REF:
      return translate(
          program.getExprList().get(((RexLocalRef) expr).getIndex()),
          nullAs);
    case LITERAL:
      return translateLiteral(
          expr,
          nullifyType(
              expr.getType(),
              isNullable(expr)
                  && nullAs != RexImpTable.NullAs.NOT_POSSIBLE),
          typeFactory,
          nullAs);
    case DYNAMIC_PARAM:
      return translateParameter((RexDynamicParam) expr, nullAs);
    default:
      if (expr instanceof RexCall) {
        return translateCall((RexCall) expr, nullAs);
      }
      throw new RuntimeException(
          ""cannot translate expression "" + expr);
    }
  }",Translates an expression that is not in the cache.,0,345
6111,"private String constructSamlResponse() {
        final DateTime currentDateTime = DateTime.parse(new ISOStandardDateFormat().getCurrentDateAndTime());
        final RegisteredService svc = this.servicesManager.findServiceBy(this);
        final String userId = svc.getUsernameAttributeProvider().resolveUsername(getPrincipal(), this);

        final org.opensaml.saml2.core.Response response = this.builder.newResponse(
                this.builder.generateSecureRandomId(),
                currentDateTime,
                getId(), this);
        response.setStatus(builder.newStatus(StatusCode.SUCCESS_URI, null));

        final AuthnStatement authnStatement = this.builder.newAuthnStatement(
                AuthnContext.PASSWORD_AUTHN_CTX, currentDateTime);
        final Assertion assertion = this.builder.newAssertion(authnStatement,
                ""https://www.opensaml.org/IDP"",
                currentDateTime.minusYears(3), this.builder.generateSecureRandomId());

        final Conditions conditions = builder.newConditions(currentDateTime.minusYears(3),
                currentDateTime, getId());
        assertion.setConditions(conditions);

        final Subject subject = this.builder.newSubject(NameID.EMAIL, userId,
                getId(), currentDateTime, this.requestId);
        assertion.setSubject(subject);

        response.getAssertions().add(assertion);

        final StringWriter writer = new StringWriter();
        this.builder.marshalSamlXmlObject(response, writer);
        return writer.toString();
    }",Construct SAML response.,0,365
7772,"public Object next() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return tokenFactory.makeToken(yytext(), yychar, yylength());
            }
          case 4: break;
          case 2: 
            { return tokenFactory.makeToken(NEWLINE, yychar, yylength());
            }
          case 5: break;
          case 3: 
            { 
            }
          case 6: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }","Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error occurs.",0,829
7482,"private AsyncResourceRequest<V> getNextUnexpiredResourceRequest(Queue<AsyncResourceRequest<V>> requestQueue) {
        AsyncResourceRequest<V> resourceRequest = requestQueue.poll();
        while(resourceRequest != null) {
            if(resourceRequest.getDeadlineNs() < System.nanoTime()) {
                resourceRequest.handleTimeout();
                resourceRequest = requestQueue.poll();
            } else {
                break;
            }
        }
        return resourceRequest;
    }",Pops resource requests off the queue until queue is empty or an unexpired resource request is found.,0,118
7344,"public Path makeIntermediatePath()
  {
    return new Path(
        StringUtils.format(
            ""%s/%s/%s_%s"",
            getWorkingPath(),
            schema.getDataSchema().getDataSource(),
            schema.getTuningConfig().getVersion().replace("":"", """"),
            schema.getUniqueId()
        )
    );
  }",Make the intermediate path for this job run.,0,89
6693,"public static List<String> jvmNameToJavaName(String[] jvmNameArray) {
        if (jvmNameArray == null) {
            return Collections.emptyList();
        }
        List<String> list = new ArrayList<String>(jvmNameArray.length);
        for (String jvmName : jvmNameArray) {
            list.add(jvmNameToJavaName(jvmName));
        }
        return list;
    }",java/lang/String -> java.lang.String,0,109
5338,"public static NBTTagCompound readTag(ByteBuf from)
    {
        PacketBuffer pb = new PacketBuffer(from);
        try
        {
            return pb.readNBTTagCompoundFromBuffer();
        } catch (IOException e)
        {
            // Unpossible?
            throw Throwables.propagate(e);
        }
    }",Read an  NBTTagCompound from the byte buffer.,0,81
7854,"public static DateTimeFormatter hourMinuteSecondMillis() {
        return Constants.hmsl;
    }","Returns a formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, and three digit fraction of second (HH:mm:ss.SSS).",0,23
6051,"public Matrix4 setToRotation (float axisX, float axisY, float axisZ, float angle) {
		if (angle == 0) {
			idt();
			return this;
		}
		return this.set(quat.setFromAxis(axisX, axisY, axisZ, angle));
	}",Sets the matrix to a rotation matrix around the given axis.,0,86
6901,"public String getUserFormatDescription()
    {
        return bRow.getStringColumn(""user_type_description"");
    }",Get the user's format description.,0,27
5305,"public String getSecondPhaseRankingString() {
        if (secondPhaseRanking != null) return secondPhaseRanking.getRoot().toString();
        if (getInherited() != null) return getInherited().getSecondPhaseRankingString();
        return null;
    }",Returns the string form of the second phase ranking expression.,0,69
7327,"public Resolution resolve(AlluxioURI uri) throws InvalidPathException {
    try (LockResource r = new LockResource(mReadLock)) {
      String path = uri.getPath();
      LOG.debug(""Resolving {}"", path);
      // This will re-acquire the read lock, but that is allowed.
      String mountPoint = getMountPoint(uri);
      if (mountPoint != null) {
        MountInfo info = mMountTable.get(mountPoint);
        AlluxioURI ufsUri = info.getUfsUri();
        // TODO(gpang): this ufs should probably be cached.
        UnderFileSystem ufs = UnderFileSystem.Factory.get(ufsUri.toString());
        ufs.setProperties(info.getOptions().getProperties());
        AlluxioURI resolvedUri = ufs.resolveUri(ufsUri, path.substring(mountPoint.length()));
        return new Resolution(resolvedUri, ufs, info.getOptions().isShared());
      }
      return new Resolution(uri, null, false);
    }
  }",Resolves the given Alluxio path.,0,243
6575,"public List<Migration> history() {
        return metaDataTable.allAppliedMigrations();
    }",Returns the history (all applied migrations) of the database.,0,26
7116,"public static boolean resetCrypto() {
    HawkUtils.validateBuild();
    return HAWK.encryption.reset();
  }",Clears all saved data that is used for the crypto,0,35
6992,"public RootReference flushAppendBuffer() {
        return flushAppendBuffer(null);
    }","If map was used in append mode, this method will ensure that append buffer is flushed - emptied with all entries inserted into map as a new leaf.",0,22
6533,"final static int getPingInterval(Configuration conf) {
    return conf.getInt(CommonConfigurationKeys.IPC_PING_INTERVAL_KEY,
        CommonConfigurationKeys.IPC_PING_INTERVAL_DEFAULT);
  }",Get the ping interval from configuration;,0,37
5365,"protected Highlight getHighlight(double xPosition, double yPosition) {

        int setCount = mData.getDataSetCount();
        int valCount = mData.getXValCount();

        // only one dataset exists
        if (!mData.isGrouped()) {

            int dataSetIndex = 0;
            int xIndex = (int) Math.round(xPosition);

         // check bounds
            if (xIndex < 0) {
                xIndex = 0;
                dataSetIndex = 0;
            } else if (xIndex >= valCount) {
                xIndex = valCount - 1;
                dataSetIndex = setCount - 1;
            }

            // check bounds
            if (dataSetIndex < 0)
                dataSetIndex = 0;
            else if (dataSetIndex >= setCount)
                dataSetIndex = setCount - 1;

            if (!mData.getDataSetByIndex(dataSetIndex).isStacked())
                return new Highlight(xIndex, dataSetIndex);
            else
                return getStackedHighlight(xIndex, dataSetIndex, yPosition);

            // if this bardata is grouped into more datasets
        } else {

            // calculate how often the group-space appears
            int steps = (int) ((float) xPosition / ((float) setCount + mData.getGroupSpace()));

            float groupSpaceSum = mData.getGroupSpace() * (float) steps;

            float baseNoSpace = (float) xPosition - groupSpaceSum;

            if (mLogEnabled)
                Log.i(LOG_TAG, ""base: "" + xPosition + "", steps: "" + steps + "", groupSpaceSum: ""
                        + groupSpaceSum
                        + "", baseNoSpace: "" + baseNoSpace);

            int dataSetIndex = (int) baseNoSpace % setCount;
            int xIndex = (int) baseNoSpace / setCount;

            if (mLogEnabled)
                Log.i(LOG_TAG, ""xIndex: "" + xIndex + "", dataSet: "" + dataSetIndex);

         // check bounds
            if (xIndex < 0) {
                xIndex = 0;
                dataSetIndex = 0;
            } else if (xIndex >= valCount) {
                xIndex = valCount - 1;
                dataSetIndex = setCount - 1;
            }

            // check bounds
            if (dataSetIndex < 0)
                dataSetIndex = 0;
            else if (dataSetIndex >= setCount)
                dataSetIndex = setCount - 1;

            if (!mData.getDataSetByIndex(dataSetIndex).isStacked())
                return new Highlight(xIndex, dataSetIndex);
            else
                return getStackedHighlight(xIndex, dataSetIndex, yPosition);
        }
    }",Returns the correct Highlight object (including xIndex and dataSet-index) for the specified touch position.,0,681
7751,"public int getDays() {
        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);
    }",Gets the days field part of the period.,0,31
6267,"protected boolean isInputStreamNeeded(Exchange exchange) {
        Object body = exchange.getIn().getBody();
        if (body == null) {
            return false;
        }

        if (body instanceof InputStream) {
            return true;
        } else if (body instanceof Source) {
            return false;
        } else if (body instanceof String) {
            return false;
        } else if (body instanceof byte[]) {
            return false;
        } else if (body instanceof Node) {
            return false;
        } else if (exchange.getContext().getTypeConverterRegistry().lookup(Source.class, body.getClass()) != null) {
            //there is a direct and hopefully optimized converter to Source 
            return false;
        }
        // yes an input stream is needed
        return true;
    }",Checks whether we need an  InputStream to access the message body.,0,232
7336,"private boolean doCopy(String fileName, String toFile, NamedCompound edits) {

        List<String> dirs = panel.getBibDatabaseContext().getFileDirectory(Globals.prefs.getFileDirectoryPreferences());
        int found = -1;
        for (int i = 0; i < dirs.size(); i++) {
            if (new File(dirs.get(i)).exists()) {
                found = i;
                break;
            }
        }
        if (found < 0) {
            // OOps, we don't know which directory to put it in, or the given
            // dir doesn't exist....
            // This should not happen!!
            LOGGER.warn(""Cannot determine destination directory or destination directory does not exist"");
            return false;
        }
        String destinationFileName = new File(toFile).getName();

        File destFile = new File(dirs.get(found) + OS.FILE_SEPARATOR + destinationFileName);
        if (destFile.equals(new File(fileName))) {
            // File is already in the correct position. Don't override!
            return true;
        }

        if (destFile.exists()) {
            int answer = JOptionPane.showConfirmDialog(frame,
                    Localization.lang(""'%0' exists. Overwrite file?"", destFile.getPath()),
                    Localization.lang(""File exists""), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (answer == JOptionPane.NO_OPTION) {
                return false;
            }
        }
        FileUtil.copyFile(Paths.get(fileName), destFile.toPath(), true);

        return true;
    }","Copy the given file to the base directory for its file type, and give it the given name.",0,388
7014,"private static String prettyPrint(final String printable, final String indentation) {
        return prettyPrint(printable, indentation, Integer.MAX_VALUE);
    }",Makes the JSON string more easily human readable using indentation of the caller's choice.,0,44
6289,"public String getFullName()
    {
        // FIXME: make this work.  ;-)
        String t = myRow.getStringColumn(""firstname"") + "" "" + myRow.getStringColumn(""lastname"");
        
        return t;
    }","Get the e-person's full name, combining first and last name in a displayable string.",0,59
6485,"public static boolean hasFaultMessage(Exchange exchange) {
        return exchange.hasOut() && exchange.getOut().isFault() && exchange.getOut().getBody() != null;
    }",Tests whether the exchange has a fault message set and that its not null.,0,59
6683,"public boolean equals(Object other) {
    if (this == other) {
      return true;
    }

    if (other instanceof PwsResult) {
      return compareTo((PwsResult) other) == 0;
    }
    return false;
  }",Check if two PwsResults are equal.,0,80
5856,"public TypeInformation<T> getType() {
		if (type instanceof MissingTypeInfo) {
			MissingTypeInfo typeInfo = (MissingTypeInfo) type;
			throw new InvalidTypesException(""The return type of function '"" + typeInfo.getFunctionName()
					+ ""' could not be determined automatically, due to type erasure. ""
					+ ""You can give type information hints by using the returns(...) method on the result of ""
					+ ""the transformation call, or by letting your function implement the 'ResultTypeQueryable' ""
					+ ""interface."", typeInfo.getTypeException());
		}
		typeUsed = true;
		return this.type;
	}",Returns the  TypeInformation for the type of this DataSet.,0,118
6042,"public ZonedDateTime getObservationTime() {
        return WeatherUndergroundJsonUtils.convertToZonedDateTime(observation_epoch);
    }",Get the observation date and time,0,24
5266,"public JID createJID(String username, String resource) {
        return new JID(username, xmppServerInfo.getXMPPDomain(), resource);
    }",Creates an XMPPAddress local to this server.,0,42
6323,"public List<ParameterPacketExtension> getParameters()
    {
        return getChildExtensionsOfType(ParameterPacketExtension.class);
    }",Returns a reference to the the list of parameters currently registered for this payload type.,0,28
7440,"protected Object getColumnValue(ResultSet rs, int colIdx, Class<?> type) throws SQLException {
        if (type == int.class)
            return rs.getInt(colIdx);

        if (type == long.class)
            return rs.getLong(colIdx);

        if (type == double.class)
            return rs.getDouble(colIdx);

        if (type == boolean.class)
            return rs.getBoolean(colIdx);

        if (type == byte.class)
            return rs.getByte(colIdx);

        if (type == short.class)
            return rs.getShort(colIdx);

        if (type == float.class)
            return rs.getFloat(colIdx);

        if (type == Integer.class || type == Long.class || type == Double.class ||
            type == Byte.class || type == Short.class ||  type == Float.class) {
            Object val = rs.getObject(colIdx);

            if (val != null) {
                Number num = (Number)val;

                if (type == Integer.class)
                    return num.intValue();
                else if (type == Long.class)
                    return num.longValue();
                else if (type == Double.class)
                    return num.doubleValue();
                else if (type == Byte.class)
                    return num.byteValue();
                else if (type == Short.class)
                    return num.shortValue();
                else if (type == Float.class)
                    return num.floatValue();
            }
            else
                return EMPTY_COLUMN_VALUE;
        }

        Object val = rs.getObject(colIdx);

        if (type == UUID.class && val != null) {
            if (val instanceof UUID)
                return val;

            if (val instanceof byte[]) {
                ByteBuffer bb = ByteBuffer.wrap((byte[])val);

                long most = bb.getLong();
                long least = bb.getLong();

                return new UUID(most, least);
            }

            if (val instanceof String)
                return UUID.fromString((String)val);
        }

        return val;
    }",Retrieves the value of the designated column in the current row of this ResultSet object and will convert to the requested Java data type.,0,684
5546,"public static DoubleBuffer memDoubleBuffer(long address, int capacity) {
        return ACCESSOR.memDoubleBuffer(checkAlignment(address, 8 - 1), capacity);
    }",Creates a new direct DoubleBuffer that starts at the specified memory address and has the specified capacity.,0,47
5691,"public int compareTo(AddressPreference o)
    {
        return this.preference - o.preference;
    }",Compares this address preference with the specified object for order.,0,31
6616,"public TypeDescriptor narrow(Object value) {
		if (value == null) {
			return this;
		}
		ResolvableType narrowed = ResolvableType.forType(value.getClass(), getResolvableType());
		return new TypeDescriptor(narrowed, null, getAnnotations());
	}",Narrows this  TypeDescriptor by setting its type to the class of the provided value.,0,82
6796,"public static Zone getDefaultQiniuZone() {
        // Get zone from setting
        String qiniuZone = OPTIONS.get(""qiniu_zone"");

        if (StrUtil.isBlank(qiniuZone)) {
            return Zone.autoZone();
        }

        Zone zone;

        switch (qiniuZone) {
            case ""z0"":
                zone = Zone.zone0();
                break;
            case ""z1"":
                zone = Zone.zone1();
                break;
            case ""z2"":
                zone = Zone.zone2();
                break;
            case ""na0"":
                zone = Zone.zoneNa0();
                break;
            case ""as0"":
                zone = Zone.zoneAs0();
                break;
            default:
                // Default is detecting zone automatically
                zone = Zone.autoZone();
        }

        return zone;
    }",Gets default qiniuyun zone.,0,229
5938,"public double deviance(double w, double y, double f) {
    return _dist.deviance(w, y, f);
  }",Deviance of given distribution function at predicted value f,0,43
5282,"public TransactionInfoViewModel transactionInfo(@RequestParam(""traceId"") String traceIdParam,
                                        @RequestParam(value = ""focusTimestamp"", required = false, defaultValue = ""0"") long focusTimestamp,
                                        @RequestParam(value = ""v"", required = false, defaultValue = ""0"") int viewVersion,
                                        HttpServletResponse response) {
        logger.debug(""traceId:{}"", traceIdParam);

        final TransactionId traceId = new TransactionId(traceIdParam);

        // select spans
        final SpanResult spanResult = this.spanService.selectSpan(traceId, focusTimestamp);
        final CallTreeIterator callTreeIterator = spanResult.getCallTree();

//        if (callTreeIterator.isEmpty()) {
//            // TODO fix error page.
//            final ModelAndView error = new ModelAndView();
//            // redefine errorCode.???
//            error.addObject(""errorCode"", 9);
//            error.addObject(""message"", ""Trace not found. traceId:"" + traceId);
//            error.setViewName(""error"");
//            return error;
//        }

        // application map
        ApplicationMap map = filteredMapService.selectApplicationMap(traceId);
        RecordSet recordSet = this.transactionInfoService.createRecordSet(callTreeIterator, focusTimestamp);

        TransactionInfoViewModel result = new TransactionInfoViewModel(traceId, map.getNodes(), map.getLinks(), recordSet, spanResult.getCompleteTypeString(), logLinkEnable, logButtonName, logPageUrl, disableButtonMessage);
        return result;

//
//
//
//        final ModelAndView mv = new ModelAndView();
//        // debug
//        mv.addObject(""spanList"", callTreeIterator.values());
//
//        mv.addObject(""traceId"", traceId);
//
//        mv.addObject(""nodes"", map.getNodes());
//        mv.addObject(""links"", map.getLinks());
//
//        // call stacks
//        mv.addObject(""recordSet"", recordSet);
//
//        mv.addObject(""applicationName"", recordSet.getApplicationName());
//        mv.addObject(""callstack"", recordSet.getRecordList());
//        mv.addObject(""timeline"", recordSet.getRecordList());
//        mv.addObject(""callstackStart"", recordSet.getStartTime());
//        mv.addObject(""callstackEnd"", recordSet.getEndTime());
//        mv.addObject(""completeState"", spanResult.getCompleteTypeString());
//
//        mv.addObject(""logLinkEnable"", logLinkEnable);
//        mv.addObject(""loggingTransactionInfo"", recordSet.isLoggingTransactionInfo());
//        mv.addObject(""logButtonName"", logButtonName);
//        mv.addObject(""logPageUrl"", logPageUrl);
//        mv.addObject(""disableButtonMessage"", disableButtonMessage);
//
//        if (viewVersion == 2) {
//            // TODO remove hashformat
//            mv.setViewName(""transactionInfoJsonHash"");
//        } else {
//            mv.setViewName(""transactionInfoJson"");
//        }
//        return mv;
    }",info lookup for a selected transaction,0,356
6629,"public boolean isMetBy(GlobalProperties other) {
//		if (this.partitioning != PartitionProperty.NONE) {
//			if (this.partitioning == PartitionProperty.ANY) {
//				if (other.partitioning == PartitionProperty.NONE) {
//					return false;
//				}
//			} else if (other.partitioning != this.partitioning) {
//				return false;
//			}
//		}
//
//		FieldList otherPartitionedFields = other.getPartitionedFields();
//		if (this.partitionedFields != null) {
//			if (other.partitionedFields == null) {
//				return false;
//			}
//			if(!otherPartitionedFields.containsAll(this.partitionedFields)) {
//				return false;
//			}
//		}
//
//		if (this.ordering != null && this.ordering.isMetBy(other.getOrdering()) == false) {
//			return false;
//		}
//
//		return true;
		return false;
	}","Checks, if this set of properties, as interesting properties, is met by the given properties.",0,72
5994,"public String toString() {
        return String.join("","",
                getServers().stream().map(LdapServer::getUrl).collect(Collectors.toList()));
    }",Process the incoming LDAP result.,0,53
6231,"public List<String> getFileDirectory(String fieldName) {
        List<String> fileDirs = new ArrayList<>();

        // 1. metadata user-specific directory
        String key = Globals.prefs.get(JabRefPreferences.USER_FILE_DIR_INDIVIDUAL); // USER_SPECIFIC_FILE_DIR_FOR_DB
        List<String> metaData = getData(key);
        if (metaData == null) {
            key = Globals.prefs.get(JabRefPreferences.USER_FILE_DIR); // FILE_DIR_FOR_DIR
            metaData = getData(key);
        }

        // 2. metadata general directory
        if ((metaData != null) && !metaData.isEmpty()) {
            String dir;
            dir = metaData.get(0);
            // If this directory is relative, we try to interpret it as relative to
            // the file path of this bib file:
            if (!new File(dir).isAbsolute() && (file != null)) {
                String relDir;
                if (""."".equals(dir)) {
                    // if dir is only ""current"" directory, just use its parent (== real current directory) as path
                    relDir = file.getParent();
                } else {
                    relDir = file.getParent() + File.separator + dir;
                }
                // If this directory actually exists, it is very likely that the
                // user wants us to use it:
                if (new File(relDir).exists()) {
                    dir = relDir;
                }
            }
            fileDirs.add(dir);
        } else {
            // 3. preferences directory?
            String dir = Globals.prefs.get(fieldName + Globals.DIR_SUFFIX); // FILE_DIR
            if (dir != null) {
                fileDirs.add(dir);
            }
        }

        // 4. bib file directory TODO: remove these options?
        if (Globals.prefs.getBoolean(JabRefPreferences.BIB_LOCATION_AS_FILE_DIR) && (getFile() != null)) {
            // Check if we should add it as primary file dir (first in the list) or not:
            if (Globals.prefs.getBoolean(JabRefPreferences.BIB_LOC_AS_PRIMARY_DIR)) {
                fileDirs.add(0, getFile().getParent());
            } else {
                fileDirs.add(getFile().getParent());
            }
        }

        return fileDirs;
    }",Look up the directory set up for the given field type for this database.,0,502
7471,"public static WebView showSource(WebView view, String name, final Object provider) {
        view.setWebViewClient(new WebViewClient() {

            public boolean shouldOverrideUrlLoading(WebView view, String url) {
                view.loadUrl(url);
                return true;
            }

        });
        int suffix = name.lastIndexOf('.');
        final String brush;
        if (suffix != -1 && suffix + 2 < name.length())
            brush = ""brush: "" + name.substring(suffix + 1) + "";"";
        else
            brush = """";
        view.getSettings().setJavaScriptEnabled(true);
        view.getSettings().setBuiltInZoomControls(true);
        view.addJavascriptInterface(new Object() {
            public String toString() {
                return ""<script type=\""syntaxhighlighter\"" class=\""toolbar:false;"" + brush + ""\""><![CDATA[\n""
                        + provider.toString() + ""\n]]></script>"";
            }

        }, ""SourceProvider"");
        view.loadUrl(""file:///android_asset/source-editor.html"");
        return view;
    }",Bind  Object#toString() to given  WebView,0,305
5472,"protected DBCollection doCreateCollection(final String collectionName, final DBObject collectionOptions) {
    return execute(new DbCallback<DBCollection>() {
      public DBCollection doInDB(DB db) throws MongoException, DataAccessException {
        DBCollection coll = db.createCollection(collectionName, collectionOptions);
        if (null != applicationContext) {
          eventQueue.add(new CollectionCreatedEvent(collectionName, collectionOptions));
        }
        return coll;
      }
    });
  }",Create the specified collection using the provided options,0,128
7657,"protected String getChromeFile() throws IOException {
    if (!isChromeBinaryLocationKnown()) {
      chromeBinaryLocation = System.getProperty(""webdriver.chrome.bin"");
      if (chromeBinaryLocation == null) {
        if (Platform.getCurrent().is(Platform.WINDOWS)) {
          chromeBinaryLocation = getWindowsBinaryLocation();
        } else if (Platform.getCurrent().is(Platform.UNIX)) {
          chromeBinaryLocation = ""/usr/bin/google-chrome"";
        } else if (Platform.getCurrent().is(Platform.MAC)) {
          String[] paths = new String[] {
            ""/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"",
            ""/Users/"" + System.getProperty(""user.name"") +
                ""/Applications/Google Chrome.app/Contents/MacOS/Google Chrome""};
          for (String path : paths) {
            File binary = new File(path);
            if (binary.exists()) {
              chromeBinaryLocation = binary.getCanonicalFile().getAbsoluteFile().toString();
              break;
            }
          }
        } else {
          throw new WebDriverException(""Unsupported operating system.  "" +
              ""Could not locate Chrome.  Set webdriver.chrome.bin"");
        }
      }
      if (!isChromeBinaryLocationKnown()) {
        throw new WebDriverException(""Couldn't locate Chrome.  "" +
            ""Set webdriver.chrome.bin"");
      }
    }
    return chromeBinaryLocation;
  }",Locates the Chrome executable on the current platform.,0,344
6451,"public KaleoNotificationRecipient remove(long kaleoNotificationRecipientId)
		throws NoSuchNotificationRecipientException, SystemException {
		Session session = null;

		try {
			session = openSession();

			KaleoNotificationRecipient kaleoNotificationRecipient = (KaleoNotificationRecipient)session.get(KaleoNotificationRecipientImpl.class,
					new Long(kaleoNotificationRecipientId));

			if (kaleoNotificationRecipient == null) {
				if (_log.isWarnEnabled()) {
					_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
						kaleoNotificationRecipientId);
				}

				throw new NoSuchNotificationRecipientException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					kaleoNotificationRecipientId);
			}

			return kaleoNotificationRecipientPersistence.remove(kaleoNotificationRecipient);
		}
		catch (NoSuchNotificationRecipientException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}",Removes the kaleo notification recipient with the primary key from the database.,0,218
5588,"private boolean addAndCheckOSSCredentials(Configuration configuration) {
    String accessKeyConf = Constants.OSS_ACCESS_KEY;
    if (System.getProperty(accessKeyConf) != null && configuration.get(accessKeyConf) == null) {
      configuration.set(accessKeyConf, System.getProperty(accessKeyConf));
    }
    String secretKeyConf = Constants.OSS_SECRET_KEY;
    if (System.getProperty(secretKeyConf) != null && configuration.get(secretKeyConf) == null) {
      configuration.set(secretKeyConf, System.getProperty(secretKeyConf));
    }
    String endPointConf = Constants.OSS_ENDPOINT_KEY;
    if (System.getProperty(endPointConf) != null && configuration.get(endPointConf) == null) {
      configuration.set(endPointConf, System.getProperty(endPointConf));
    }
    return configuration.get(accessKeyConf) != null
        && configuration.get(secretKeyConf) != null
        && configuration.get(endPointConf) != null;
  }",Adds OSS credentials from system properties to the Tachyon configuration if they are not already present.,0,262
5827,"public static StreamError parseStreamError(XmlPullParser parser) throws IOException,
            XmlPullParserException {
    final int depth = parser.getDepth();
    boolean done = false;
    String code = null;
    String text = null;
    while (!done) {
        int eventType = parser.next();

        if (eventType == XmlPullParser.START_TAG) {
            String namespace = parser.getNamespace();
            if (StreamError.NAMESPACE.equals(namespace)) {
                String name = parser.getName();
                if (name.equals(""text"") && !parser.isEmptyElementTag()) {
                    parser.next();
                    text = parser.getText();
                }
                else {
                    // If it's not a text element, that is qualified by the StreamError.NAMESPACE,
                    // then it has to be the stream error code
                    code = name;
                }
            }
        }
        else if (eventType == XmlPullParser.END_TAG && depth == parser.getDepth()) {
            done = true;
        }
    }
    return new StreamError(code, text);
}",Parses stream error packets.,0,293
6671,"private ThriftType convertClassToThriftType(String name, Requirement requirement, Manifest<?> typeManifest) {
    Class typeClass = typeManifest.runtimeClass();
    if (typeManifest.runtimeClass() == boolean.class) {
      return new ThriftType.BoolType();
    } else if (typeClass == byte.class) {
      return new ThriftType.ByteType();
    } else if (typeClass == double.class) {
      return new ThriftType.DoubleType();
    } else if (typeClass == short.class) {
      return new ThriftType.I16Type();
    } else if (typeClass == int.class) {
      return new ThriftType.I32Type();
    } else if (typeClass == long.class) {
      return new ThriftType.I64Type();
    } else if (typeClass == String.class) {
      return new ThriftType.StringType();
    } else if (typeClass == scala.collection.Seq.class) {
      Manifest<?> a = typeManifest.typeArguments().apply(0);
      return convertListTypeField(name, a, requirement);
    } else if (typeClass == scala.collection.Set.class) {
      Manifest<?> setElementManifest = typeManifest.typeArguments().apply(0);
      return convertSetTypeField(name, setElementManifest, requirement);
    } else if (typeClass == scala.collection.Map.class) {
      List<Manifest<?>> ms = JavaConversions.seqAsJavaList(typeManifest.typeArguments());
      Manifest keyManifest = ms.get(0);
      Manifest valueManifest = ms.get(1);
      return convertMapTypeField(name, keyManifest, valueManifest, requirement);
    } else if (com.twitter.scrooge.ThriftEnum.class.isAssignableFrom(typeClass)) {
      return convertEnumTypeField(typeClass, name);
    } else {
      return convertStructFromClass(typeClass);
    }
  }","In composite types, such as the type of the key in a map, since we use reflection to get the type class, this method does conversion based on the class provided.",0,543
6368,"public static Result createFailingResult(String output, String error) {
    return new Result(GENERAL_FAILURE, output, error);
  }",Static constructor for an unsuccessful call.,0,40
7279,"public static String parse(String text)
    {
        if (text == null)
            return null;
        
        StringBuilder builder = new StringBuilder(text);

        // TODO support IRC control codes for formatting (now only removes them)

        for (int i = 0; i < builder.length(); )
        {
            if (builder.charAt(i) < START_OF_HTML_ENTITIES)
            {
                builder.deleteCharAt(i);
            }
            else
            {
                // nothing to do here, go to next char
                i++;
            }
        }
        return builder.toString();
    }",Parse IRC text message and process possible control codes.,0,150
5603,"public List<GroupTreeNode> getPath() {
        if (parent == null) {
            List<GroupTreeNode> pathToMe = new ArrayList<>();
            pathToMe.add((GroupTreeNode) this);
            return pathToMe;
        }

        List<GroupTreeNode> path = parent.getPath();
        path.add((GroupTreeNode) this);
        return path;
    }","Returns the path from the root, to get to this node.",0,108
5401,"private RequestFuture<ByteBuffer> sendJoinGroupRequest() {
        if (coordinatorUnknown())
            return RequestFuture.coordinatorNotAvailable();

        // send a join group request to the coordinator
        log.info(""(Re-)joining group {}"", groupId);
        JoinGroupRequest.Builder requestBuilder = new JoinGroupRequest.Builder(
                groupId,
                this.sessionTimeoutMs,
                this.generation.memberId,
                protocolType(),
                metadata()).setRebalanceTimeout(this.rebalanceTimeoutMs);

        log.debug(""Sending JoinGroup ({}) to coordinator {}"", requestBuilder, this.coordinator);
        return client.send(coordinator, requestBuilder)
                .compose(new JoinGroupResponseHandler());
    }",Join the group and return the assignment for the next generation.,0,152
7290,"public Optional<JComponent> getExtra(final FieldEditor editor) {
        final String fieldName = editor.getFieldName();

        final Set<FieldProperties> fieldExtras = InternalBibtexFields.getFieldExtras(fieldName);

        // timestamp or a other field with datepicker command
        if (Globals.prefs.get(JabRefPreferences.TIME_STAMP_FIELD).equals(fieldName)
                || fieldExtras.contains(FieldProperties.DATE)) {
            // double click AND datefield => insert the current date (today)
            return FieldExtraComponents.getDateTimeExtraComponent(editor,
                    fieldExtras.contains(FieldProperties.DATE));
        } else if (fieldExtras.contains(FieldProperties.EXTERNAL)) {
            return FieldExtraComponents.getExternalExtraComponent(panel, editor);
        } else if (fieldExtras.contains(FieldProperties.JOURNAL_NAME)) {
            // Add controls for switching between abbreviated and full journal names.
            // If this field also has a FieldContentSelector, we need to combine these.
            return FieldExtraComponents.getJournalExtraComponent(frame, panel, editor, entry, contentSelectors,
                    getStoreFieldAction());
        } else if (panel.getBibDatabaseContext().getMetaData().getData(Globals.SELECTOR_META_PREFIX + fieldName) != null) {
            return FieldExtraComponents.getSelectorExtraComponent(frame, panel, editor, contentSelectors,
                    getStoreFieldAction());
        } else if (fieldExtras.contains(FieldProperties.URL)) {
            return FieldExtraComponents.getURLExtraComponent(editor, getStoreFieldAction());
        } else if (fieldExtras.contains(FieldProperties.DOI)) {
            return FieldExtraComponents.getDoiExtraComponent(panel, editor);
        } else if (fieldExtras.contains(FieldProperties.OWNER)) {
            return FieldExtraComponents.getSetOwnerExtraComponent(editor, getStoreFieldAction());
        } else if (fieldExtras.contains(FieldProperties.YES_NO)) {
            return FieldExtraComponents.getYesNoExtraComponent(editor, this);
        } else if (fieldExtras.contains(FieldProperties.MONTH)) {
            return FieldExtraComponents.getMonthExtraComponent(editor, this, frame.getCurrentBasePanel().getBibDatabaseContext().getMode());
        } else if (fieldExtras.contains(FieldProperties.GENDER)) {
            return FieldExtraComponents.getGenderExtraComponent(editor, this);
        }
        return Optional.empty();
    }",getExtra checks the field name against InternalBibtexFields.getFieldExtras(name).,0,511
7421,"public DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException {
    // Fetch the 1 bit matrix once up front.
    BitMatrix matrix = image.getBlackMatrix();

    // Try to find the vertices assuming the image is upright.
    int rowStep = 8;
    ResultPoint[] vertices = findVertices(matrix, rowStep);
    if (vertices == null) {
      // Maybe the image is rotated 180 degrees?
      vertices = findVertices180(matrix, rowStep);
      if (vertices != null) {
        correctVertices(matrix, vertices, true);
      }
    } else {
      correctVertices(matrix, vertices, false);
    }

    if (vertices == null) {
      throw NotFoundException.getNotFoundInstance();
    }

    float moduleWidth = computeModuleWidth(vertices);
    if (moduleWidth < 1.0f) {
      throw NotFoundException.getNotFoundInstance();
    }

    int dimension = computeDimension(vertices[12], vertices[14],
        vertices[13], vertices[15], moduleWidth);
    if (dimension < 1) {
      throw NotFoundException.getNotFoundInstance();
    }

    int yDimension = Math.max(computeYDimension(vertices[12], vertices[14],
        vertices[13], vertices[15], moduleWidth), dimension);

    // Deskew and over-sample image.
    BitMatrix linesMatrix = sampleLines(vertices, dimension, yDimension);
    BitMatrix linesGrid = new LinesSampler(linesMatrix, dimension).sample();

    //TODO: verify vertex indices.
    return new DetectorResult(linesGrid, new ResultPoint[]{ 
        vertices[5], vertices[4], vertices[6], vertices[7]});
  }",Detects a PDF417 Code in an image.,0,432
6390,"public long get()
    {
        return value;
    }",Perform a volatile read of this sequence's value.,0,20
6127,"public static OptimizeEngine newInstance(final ShardingRule shardingRule, final SQLStatement sqlStatement, final List<Object> parameters, final ShardingTableMetaData shardingTableMetaData) {
        if (sqlStatement instanceof InsertStatement) {
            return new ShardingInsertOptimizeEngine(shardingRule, (InsertStatement) sqlStatement, parameters);
        }
        if (sqlStatement instanceof DMLStatement) {
            return new QueryOptimizeEngine(sqlStatement, parameters, ((DMLStatement) sqlStatement).getShardingConditions());
        }
        if (sqlStatement instanceof DDLStatement) {
            return new DDLOptimizeEngine((DDLStatement) sqlStatement, shardingTableMetaData);
        }
        // TODO do with DAL
        return new QueryOptimizeEngine(sqlStatement, parameters, new Conditions());
    }",Create sharding optimize engine instance.,0,182
6246,"public int compare(Value v, boolean caseInsensitive)
	{
		boolean n1 =   isNull() || (  isString() && (   getString()==null ||   getString().length()==0 )) || (  isDate() &&   getDate()==null) || (  isBigNumber() &&   getBigNumber()==null);
		boolean n2 = v.isNull() || (v.isString() && ( v.getString()==null || v.getString().length()==0 )) || (v.isDate() && v.getDate()==null) || (v.isBigNumber() && v.getBigNumber()==null);
		
		// null is always smaller! 
		if ( n1 && !n2) return -1; 
		if (!n1 &&  n2) return  1; 
		if ( n1 &&  n2) return  0; 
		
		switch(getType())
		{
		case VALUE_TYPE_BOOLEAN:
		    {
    			if ( getBoolean() &&  v.getBoolean() || 
    			    !getBoolean() && !v.getBoolean()) return  0;  // true == true, false == false
    			if ( getBoolean() && !v.getBoolean()) return  1;  // true  > false
    			return -1;  // false < true
            }

		case VALUE_TYPE_DATE   :
            {
			    return Double.compare(getNumber(), v.getNumber());
            }
			
		case VALUE_TYPE_NUMBER :
            {
			    int cmp = Double.compare(getNumber(), v.getNumber());
			    if (cmp!=0)
			    {
			    	System.out.println(""Different!"");
			    }
			    return cmp;
            }

		case VALUE_TYPE_STRING:
            {
    			String one = Const.rtrim(getString());
    			String two = Const.rtrim(v.getString());
                
    			int cmp=0;
                if (caseInsensitive) 
                {
                    cmp = one.compareToIgnoreCase(two);
                }
                else
                {
                    cmp = one.compareTo(two);
                }
                
                return cmp;
            }
            
		case VALUE_TYPE_INTEGER:
            {
			    return Double.compare(getNumber(), v.getNumber());
            }

        case VALUE_TYPE_BIGNUMBER:
            {
                return getBigNumber().compareTo(v.getBigNumber());
            }
		}
		
		// Still here?  Not possible!  But hey, give back 0, mkay?
		
		return 0;
	}",Compare 2 values of the same or different type!,0,690
6354,"public boolean recordBackPressure(Integer taskId) {
        return tasks.get(taskId).backpressure.getAndSet(true);
    }",Record BP for a task.,0,34
5409,"private long loadDirectoryMetadata(AlluxioURI path, boolean recursive)
      throws IOException, FileAlreadyExistsException, InvalidPathException, AccessControlException,
      FileDoesNotExistException {
    CreateDirectoryOptions options =
        CreateDirectoryOptions.defaults().setMountPoint(mMountTable.isMountPoint(path))
            .setPersisted(true).setRecursive(recursive).setMetadataLoad(true);
    InodeTree.CreatePathResult result = createDirectory(path, options);
    List<Inode<?>> inodes = null;
    if (result.getCreated().size() > 0) {
      inodes = result.getCreated();
    } else if (result.getPersisted().size() > 0) {
      inodes = result.getPersisted();
    } else if (result.getModified().size() > 0) {
      inodes = result.getModified();
    }
    if (inodes == null) {
      throw new FileAlreadyExistsException(ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path));
    }
    return inodes.get(inodes.size() - 1).getId();
  }",Loads metadata for the directory identified by the given path from UFS into Alluxio.,0,283
7092,"public static Object getNamedPlugin(Class intfc, String name)
         throws PluginInstantiationException
    {
        try
        {
            String iname = intfc.getName();
            configureNamedPlugin(iname);
            String key = iname + SEP + name;
            String cname = (String)namedPluginClasses.get(key);
            if (cname == null)
                log.warn(""Cannot find named plugin for interface=""+iname+"", name=\""""+name+""\"""");
            else
            {
                Class pluginClass = Class.forName(cname);
                if (cacheMe(pluginClass))
                {
                    String nkey = pluginClass.getName() + SEP + name;
                    Object cached = namedInstanceCache.get(nkey);
                    if (cached == null)
                    {
                    	log.debug(""Creating cached instance of: "" + cname + 
                    			  "" for interface="" + iname + 
                    			  "" pluginName="" + name );
                        cached = pluginClass.newInstance();
                        if (cached instanceof SelfNamedPlugin)
                            ((SelfNamedPlugin)cached).setPluginInstanceName(name);
                        namedInstanceCache.put(nkey, cached);
                    }
                    return cached;
                }
                else
                {
                	log.debug(""Creating UNcached instance of: "" + cname + 
              			  "" for interface="" + iname + 
              			  "" pluginName="" + name );
                    Object result = pluginClass.newInstance();
                    if (result instanceof SelfNamedPlugin)
                        ((SelfNamedPlugin)result).setPluginInstanceName(name);
                    return result;
                }
            }
        }
        catch (ClassNotFoundException e)
        {
            throw new PluginInstantiationException(""Cannot load plugin class: "" +
            		                               e.toString(), e);
        }
        catch (InstantiationException e)
        {
            throw new PluginInstantiationException(e);
        }
        catch (IllegalAccessException e)
        {
            throw new PluginInstantiationException(e);
        }

        return null;
    }",Returns an instance of a plugin that implements the interface intface and is bound to a name matching name.,0,514
7025,"public Connection getConnection(final String dataSourceName) throws SQLException {
        return dataSourceMap.get(dataSourceName).getConnection();
    }",Get connection.,0,37
6282,"public static String nullSafeToString(double[] array) {
		if (array == null) {
			return NULL_STRING;
		}
		int length = array.length;
		if (length == 0) {
			return EMPTY_ARRAY;
		}
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < length; i++) {
			if (i == 0) {
				sb.append(ARRAY_START);
			}
			else {
				sb.append(ARRAY_ELEMENT_SEPARATOR);
			}

			sb.append(array[i]);
		}
		sb.append(ARRAY_END);
		return sb.toString();
	}",Return a String representation of the contents of the specified array.,0,197
7776,"public User getUserByName(String username) throws ApiException {
    return getUserByNameWithHttpInfo(username).getData();
      }",Get user by user name,0,33
7489,"protected boolean executeLogin(ServletRequest request, ServletResponse response) {
        boolean isLoggedIn = false;

        HttpServletRequest httpRequest = toHttp(request);
        String authorizationHeader = httpRequest.getHeader(AUTHORIZATION_HEADER);

        if (authorizationHeader != null && authorizationHeader.length() > 0) {
            if (log.isDebugEnabled()) {
                log.debug(""Executing login with headers ["" + authorizationHeader + ""]"");
            }

            String[] authTokens = authorizationHeader.split("" "");

            if (authTokens[0].trim().equalsIgnoreCase(HttpServletRequest.BASIC_AUTH)) {
                String encodedCredentials = authTokens[1];

                byte[] decodedCredentialByteArray = Base64.decodeBase64(encodedCredentials);
                String decodedCredentials = new String(decodedCredentialByteArray);

                String[] credentials = decodedCredentials.split("":"");

                if (credentials != null && credentials.length > 1) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Processing login request ["" + credentials[0] + ""]"");
                    }
                    Subject subject = getSubject(request, response);
                    UsernamePasswordToken usernamePasswordToken = new UsernamePasswordToken(credentials[0], credentials[1]);
                    try {
                        subject.login(usernamePasswordToken);
                        if (log.isDebugEnabled()) {
                            log.debug(""Successfully logged in user ["" + credentials[0] + ""]"");
                        }
                        isLoggedIn = true;
                    } catch (AuthenticationException ae) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Unable to log in subject ["" + credentials[0] + ""]"", ae);
                        }

                        return sendChallenge(request, response);
                    }
                }
            }
        }

        if (log.isDebugEnabled()) {
            log.debug(""Returning ["" + isLoggedIn + ""] from executeLogin()"");
        }

        return isLoggedIn;
    }",Initiates a login attempt with the provided credentials in the http header.,0,529
7299,"protected AcceptStatus accept(BytesRef term) {
    // validate value is in range
    while (currentUpperBound == null || term.compareTo(currentUpperBound) > 0) {
      if (rangeBounds.isEmpty()) {
        return AcceptStatus.END;
      }
      // peek next sub-range, only seek if the current term is smaller than next lower bound
      if (term.compareTo(rangeBounds.get(0).lower) < 0) {
        return AcceptStatus.NO_AND_SEEK;
      }
      // step forward to next range without seeking, as next lower range bound is less or equal current term
      nextRange();
    }

    if (currentRange.boundary) {
      return postFilterBoundary(term);
    }

    return AcceptStatus.YES;
  }",The two-phase query approach.,0,155
7614,"public boolean isStarted() {
        return mCameraController.getState() >= CameraController.STATE_STARTED;
    }",Returns whether the camera has started showing its preview.,0,30
7876,"public DateTime withFields(ReadablePartial partial) {
        if (partial == null) {
            return this;
        }
        return withMillis(getChronology().set(partial, getMillis()));
    }",Gets a copy of this datetime with the partial set of fields replacing those from this instance.,0,60
6490,"public DateTime getRevocationDate() {
        return this.revocationDate == null ? null : new DateTime(this.revocationDate);
    }",Gets the revocation date.,0,41
7057,"public List<Address> getAddressesOfType(String type) {
        List<Address> answer = new ArrayList<Address>(addresses.size());
        for (Iterator<Address> it = addresses.iterator(); it.hasNext();) {
            Address address = (Address) it.next();
            if (address.getType().equals(type)) {
                answer.add(address);
            }
        }

        return answer;
    }",Returns the list of addresses that matches the specified type.,0,132
7755,"public SQLInsertClause populate(Object bean) {
        return populate(bean, DefaultMapper.DEFAULT);
    }",Populate the INSERT clause with the properties of the given bean.,0,30
7047,"public static MethodDelegation to(Object delegate, Type type, String fieldName, MethodGraph.Compiler methodGraphCompiler) {
        TypeDescription.Generic typeDescription = TypeDefinition.Sort.describe(type);
        if (!typeDescription.asErasure().isInstance(delegate)) {
            throw new IllegalArgumentException(delegate + "" is not an instance of "" + type);
        }
        return new MethodDelegation(new ImplementationDelegate.ForInstance(delegate, fieldName, typeDescription, methodGraphCompiler),
                TargetMethodAnnotationDrivenBinder.ParameterBinder.DEFAULTS,
                Argument.NextUnboundAsDefaultsProvider.INSTANCE,
                TargetMethodAnnotationDrivenBinder.TerminationHandler.Returning.INSTANCE,
                MethodDelegationBinder.AmbiguityResolver.DEFAULT,
                Assigner.DEFAULT);
    }",Creates an implementation where only instance methods of the given object are considered as binding targets.,0,164
7861,"public String getTitle() {
    return (String) seleneseMethods.get(""getTitle"").apply(driver);
  }",Gets the title of the current page.,0,35
7231,"public byte[] getBodyPartBytes() {
        return ByteBufUtils.byteBuf2Bytes(buf.duplicate());
    }",Return the response body's part bytes received.,0,30
6154,"private String validateReadRequest(Protocol.ReadRequest request) {
    if (request.getId() < 0) {
      return String.format(""Invalid blockId (%d) in read request."", request.getId());
    }
    if (mRequest == null) {
      if (request.getOffset() < 0 || request.getLength() <= 0) {
        return String.format(""Invalid read bounds in read request %s."", request.toString());
      }
      return """";
    }

    if (request.getCancel()) {
      if (request.getId() != mRequest.mId) {
        return String.format(""The IDs do not match: [actual: %d, expected: %d]."", mRequest.mId,
            request.getId());
      }
      return """";
    }
    return String
        .format(""Received a read request %s on a busy channel (used by block %d)."", request,
            mRequest.mId);
  }",Returns true if the block read request is valid.,0,233
7649,"public static Token seek(String path, Parser parser) {
        // return current token if no path is given
        if (!StringUtils.hasText(path)) {
            return null;
        }

        List<String> tokens = StringUtils.tokenize(path, ""/"");
        return seek(parser, tokens.toArray(new String[tokens.size()]));
    }",Seeks the field with the given name in the stream and positions (and returns) the parser to the next available token (value or not).,0,100
6218,"public String submit(ExecuteRequest request, boolean synchronous) throws ProcessException {
        Name processName = request.getProcessName();
        ProcessManager processManager = getProcessManager(processName);
        LazyInputMap inputs = request.getProcessInputs(this);
        String executionId = resourceManager.getExecutionId(synchronous);
        final AsynchronousProcessContext context = new AsynchronousProcessContext(request,
                executionId, inputs, processManager, applicationContext);
        contexts.put(executionId, context);
        if(!synchronous) {
            LOGGER.log(Level.INFO, ""Submitting new asynch process "" + processName.getURI() + "" with execution id "" + executionId);
        }
        processManager.submit(executionId, processName, inputs, request.isAsynchronous());
        if (request.isAsynchronous()) {
            // ah, we need to store the output at the end, schedule a thread that will
            // do as soon as the process is done executing
            storedResponseWriters.submit(new Runnable() {

                @Override
                public void run() {
                    
                    context.writeResponseFile();
                }
            });
        }

        return executionId;
    }","Process submission, not blocking.",0,267
7651,"private JXTable getTableExtension() {
		if (tableExt == null) {
			tableExt = new JXTable();
			tableExt.setModel(getExtensionModel());
			tableExt.setRowHeight(DisplayUtils.getScaledSize(18));
			tableExt.getColumnModel().getColumn(0).setPreferredWidth(DisplayUtils.getScaledSize(70));
			tableExt.getColumnModel().getColumn(1).setPreferredWidth(DisplayUtils.getScaledSize(70));
			tableExt.getColumnModel().getColumn(2).setPreferredWidth(DisplayUtils.getScaledSize(120));
			tableExt.getColumnModel().getColumn(3).setPreferredWidth(DisplayUtils.getScaledSize(220));
			tableExt.setSortOrder(3, SortOrder.ASCENDING);
			
			ListSelectionListener sl = new ListSelectionListener() {

				@Override
				public void valueChanged(ListSelectionEvent arg0) {
	        		int selectedRow = tableExt.getSelectedRow();
	        		if (selectedRow > -1) {
	        			Extension ext = getExtensionModel().getExtension(tableExt.convertRowIndexToModel(selectedRow));
	        			if (ext != null) {
	        				try {
								extName.setText(ext.getUIName());
								extDescription.setText(ext.getDescription());
								if (ext.getAuthor() != null) {
									extAuthor.setText(ext.getAuthor());
								} else {
									extAuthor.setText("""");
								}
								if (ext.getURL() != null) {
									extURL.setText(ext.getURL().toString());
									getUrlLaunchButton().setEnabled(true);
								} else {
									extURL.setText("""");
									getUrlLaunchButton().setEnabled(false);
								}
							} catch (Exception e) {
								// Just to be safe
								log.error(e.getMessage(), e);
							}
	        			}
	        		}
				}};
			
			tableExt.getSelectionModel().addListSelectionListener(sl);
			tableExt.setColumnControlVisible(true);
		}
		return tableExt;
	}",This method initializes tableAuth,0,507
5608,"public InputStream getInputStream() throws IOException, ServerException {
        return getContentStream();
    }",Gets content of file as stream.,0,28
7480,"public ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey, HystrixProperty<Integer> corePoolSize, HystrixProperty<Integer> maximumPoolSize, HystrixProperty<Integer> keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue) {
        ThreadFactory threadFactory = null;
        if (!PlatformSpecific.isAppEngine()) {
            threadFactory = new ThreadFactory() {
                protected final AtomicInteger threadNumber = new AtomicInteger(0);

                @Override
                public Thread newThread(Runnable r) {
                    Thread thread = new Thread(r, ""hystrix-"" + threadPoolKey.name() + ""-"" + threadNumber.incrementAndGet());
                    thread.setDaemon(true);
                    return thread;
                }

            };
        } else {
            threadFactory = PlatformSpecific.getAppEngineThreadFactory();
        }

        return new ThreadPoolExecutor(corePoolSize.get(), maximumPoolSize.get(), keepAliveTime.get(), unit, workQueue, threadFactory);
    }",Factory method to provide  ThreadPoolExecutor instances as desired.,0,255
7892,"public Object readObject() throws JMSException {
        initializeReading();
        try {
            this.dataIn.mark(65);
            int type = this.dataIn.read();
            if (type == -1) {
                throw new MessageEOFException(""reached end of data"");
            }
            if (type == MarshallingSupport.NULL) {
                return null;
            }
            if (type == MarshallingSupport.BIG_STRING_TYPE) {
                return MarshallingSupport.readUTF8(dataIn);
            }
            if (type == MarshallingSupport.STRING_TYPE) {
                return this.dataIn.readUTF();
            }
            if (type == MarshallingSupport.LONG_TYPE) {
                return Long.valueOf(this.dataIn.readLong());
            }
            if (type == MarshallingSupport.INTEGER_TYPE) {
                return Integer.valueOf(this.dataIn.readInt());
            }
            if (type == MarshallingSupport.SHORT_TYPE) {
                return Short.valueOf(this.dataIn.readShort());
            }
            if (type == MarshallingSupport.BYTE_TYPE) {
                return Byte.valueOf(this.dataIn.readByte());
            }
            if (type == MarshallingSupport.FLOAT_TYPE) {
                return new Float(this.dataIn.readFloat());
            }
            if (type == MarshallingSupport.DOUBLE_TYPE) {
                return new Double(this.dataIn.readDouble());
            }
            if (type == MarshallingSupport.BOOLEAN_TYPE) {
                return this.dataIn.readBoolean() ? Boolean.TRUE : Boolean.FALSE;
            }
            if (type == MarshallingSupport.CHAR_TYPE) {
                return Character.valueOf(this.dataIn.readChar());
            }
            if (type == MarshallingSupport.BYTE_ARRAY_TYPE) {
                int len = this.dataIn.readInt();
                byte[] value = new byte[len];
                this.dataIn.readFully(value);
                return value;
            } else {
                this.dataIn.reset();
                throw new MessageFormatException(""unknown type"");
            }
        } catch (NumberFormatException mfe) {
            try {
                this.dataIn.reset();
            } catch (IOException ioe) {
                throw JMSExceptionSupport.create(ioe);
            }
            throw mfe;

        } catch (EOFException e) {
            JMSException jmsEx = new MessageEOFException(e.getMessage());
            jmsEx.setLinkedException(e);
            throw jmsEx;
        } catch (IOException e) {
            JMSException jmsEx = new MessageFormatException(e.getMessage());
            jmsEx.setLinkedException(e);
            throw jmsEx;
        }
    }",Reads an object from the stream message.,0,725
7827,"public static ExpectedCondition<Boolean> and(final ExpectedCondition<?>... conditions) {
    return new ExpectedCondition<Boolean>() {
      @Override
      public Boolean apply(WebDriver driver) {
        for (ExpectedCondition<?> condition : conditions) {
          Object result = condition.apply(driver);

          if (result instanceof Boolean) {
            if (Boolean.FALSE.equals(result)) {
              return false;
            }
          }

          if (result == null) {
            return false;
          }
        }
        return true;
      }

      @Override
      public String toString() {
        StringBuilder message = new StringBuilder(""all conditions to be valid: "");
        Joiner.on("" && "").appendTo(message, conditions);
        return message.toString();
      }
    };
  }",An expectation with the logical and condition of the given list of conditions.,0,239
5647,"public String getMimeType(File f) {
    try {
      return tika.detect(f);
    } catch (Exception e) {
      LOG.error(""Exception getting mime type for file: ["" + f.getPath()
          + ""]: Message: "" + e.getMessage());
      return null;
    }
  }",Facade interface to Tika's underlying  MimeTypes#getMimeType(File) method.,0,88
6999,"private String processSmilies(String message) {

		ArrayList smiliesList = ImageLoader.getDefaultSmiliesPack();

        String regexp = """";
        
		for (int i = 0; i < smiliesList.size(); i++) {

			Smily smily = (Smily) smiliesList.get(i);

			String[] smilyStrings = smily.getSmilyStrings();

			for (int j = 0; j < smilyStrings.length; j++) {
                regexp += StringUtils
                    .replaceSpecialRegExpChars(smilyStrings[j]) + ""|"";                
			}
		}
		regexp = regexp.substring(0, regexp.length()-1);
        
        Pattern p = Pattern.compile(regexp);
        
        Matcher m = p.matcher(message);
                
        StringBuffer msgBuffer = new StringBuffer();
        
        boolean matchSuccessfull = false;
        
        while (m.find()) {
            if(!matchSuccessfull)
                matchSuccessfull = true;
            
            String matchGroup = m.group().trim();
            
            String replacement 
                = ""<IMG SRC='"" 
                    + ImageLoader.getSmily(matchGroup).getImagePath() 
                    + ""' ALT='"" + matchGroup +""'></IMG>"";
                        
            m.appendReplacement(msgBuffer, replacement);                        
        }        
        m.appendTail(msgBuffer);
        
        return msgBuffer.toString();
	}",Format message smilies.,0,397
7061,"public DatagramSocket createDatagramSocket() throws SocketException {
        return socketBindings.createDatagramSocket(name, getSocketAddress());
    }",Create and bind a datagram socket.,0,33
5501,"public MockMvcConfig automaticallyApplySpringSecurityMockMvcConfigurer() {
        return new MockMvcConfig(true, automaticallyApplySpringRestDocsMockMvcSupport, true);
    }",Instruct REST Assured Mock Mvc to automatically apply the SpringSecurityMockMvcConfigurer if it's available in the classpath.,0,30
6897,"public SQLAST parse() {
        ParseTree parseTree = SQLParserFactory.newInstance(databaseType, sql).execute().getChild(0);
        if (parseTree instanceof ErrorNode) {
            throw new SQLParsingException(String.format(""Unsupported SQL of `%s`"", sql));
        }
        SQLStatementRule sqlStatementRule = parseRuleRegistry.getSQLStatementRule(databaseType, parseTree.getClass().getSimpleName());
        if (null == sqlStatementRule) {
            throw new SQLParsingException(String.format(""Unsupported SQL of `%s`"", sql));
        }
        return new SQLAST((ParserRuleContext) parseTree, sqlStatementRule);
    }",Parse SQL to abstract syntax tree.,0,159
6216,"public TypePair getTypesUnderInequality(JSType that) {
    // unions types
    if (that.isUnionType()) {
      TypePair p = that.toMaybeUnionType().getTypesUnderInequality(this);
      return new TypePair(p.typeB, p.typeA);
    }

    // other types
    switch (testForEquality(that)) {
      case TRUE:
        JSType noType = getNativeType(JSTypeNative.NO_TYPE);
        return new TypePair(noType, noType);

      case FALSE:
      case UNKNOWN:
        // This function is for the coercing inequality ({@code !=}), so checking either
        // {@code != null} or {@code != undefined} should remove both types.
        if (this.isNullType() || this.isVoidType()) {
          return new TypePair(this, that.restrictByNotNullOrUndefined());
        } else if (that.isNullType() || that.isVoidType()) {
          return new TypePair(this.restrictByNotNullOrUndefined(), that);
        }
        return new TypePair(this, that);
    }

    // switch case is exhaustive
    throw new IllegalStateException();
  }",Computes the subset of  this and  that types if inequality is observed.,0,260
7547,"public static boolean isWindows() {
        return win7 || win8 || win81 || winXp || win95 || win98 || winNt || win2k ||
            win2003 || win2008 || winVista || unknownWin;
    }",Indicates whether current OS is Windows.,0,77
5573,"public boolean askYesNo(String title, String question) {

		String key = join(title, question);
		Boolean existingValue = loadAskValue(this::parseBoolean, key);
		if (isRunningHeadless()) {
			return existingValue;
		}

		return OptionDialog.showYesNoDialog(null, title, question) == OptionDialog.OPTION_ONE;
	}","Returns a boolean value, using the String parameters for guidance.",0,102
6749,"public Matrix getV() {
    if (transpositionNeeded) { //case numRows() < numCols()
      int numCols = Math.min(m + 1, n);
      Matrix r = new DenseMatrix(m, numCols);
      for (int i = 0; i < m; i++) {
        for (int j = 0; j < numCols; j++) {
          r.set(i, j, U[i][j]);
        }
      }

      return r;
    } else {
      return new DenseMatrix(V);
    }
  }",Returns the right singular vectors V.,0,173
7853,"public boolean addFile(File sourceFile) {
    String filename = sourceFile.getName();
    File destFile = null;
    String codeExtension = null;
    boolean replacement = false;

    // if the file appears to be code related, drop it
    // into the code folder, instead of the data folder
    if (filename.toLowerCase().endsWith("".class"") ||
        filename.toLowerCase().endsWith("".jar"") ||
        filename.toLowerCase().endsWith("".dll"") ||
        filename.toLowerCase().endsWith("".jnilib"") ||
        filename.toLowerCase().endsWith("".so"")) {

      //if (!codeFolder.exists()) codeFolder.mkdirs();
      prepareCodeFolder();
      destFile = new File(codeFolder, filename);

    } else {
      for (String extension : mode.getExtensions()) {
        String lower = filename.toLowerCase();
        if (lower.endsWith(""."" + extension)) {
          destFile = new File(this.folder, filename);
          codeExtension = extension;
        }
      }
      if (codeExtension == null) {
        prepareDataFolder();
        destFile = new File(dataFolder, filename);
      }
    }

    // check whether this file already exists
    if (destFile.exists()) {
      Object[] options = { Language.text(""prompt.ok""), Language.text(""prompt.cancel"") };
      String prompt = ""Replace the existing version of "" + filename + ""?"";
      int result = JOptionPane.showOptionDialog(editor,
                                                prompt,
                                                ""Replace"",
                                                JOptionPane.YES_NO_OPTION,
                                                JOptionPane.QUESTION_MESSAGE,
                                                null,
                                                options,
                                                options[0]);
      if (result == JOptionPane.YES_OPTION) {
        replacement = true;
      } else {
        return false;
      }
    }

    // If it's a replacement, delete the old file first,
    // otherwise case changes will not be preserved.
    // http://dev.processing.org/bugs/show_bug.cgi?id=969
    if (replacement) {
      boolean muchSuccess = destFile.delete();
      if (!muchSuccess) {
        Base.showWarning(""Error adding file"",
                         ""Could not delete the existing '"" +
                         filename + ""' file."", null);
        return false;
      }
    }

    // make sure they aren't the same file
    if ((codeExtension == null) && sourceFile.equals(destFile)) {
      Base.showWarning(""You can't fool me"",
                       ""This file has already been copied to the\n"" +
                       ""location from which where you're trying to add it.\n"" +
                       ""I ain't not doin nuthin'."", null);
      return false;
    }

    // Handles ""Add File"" when a .pde is used. For beta 1, this no longer runs
    // on a separate thread because it's totally unnecessary (a .pde file is
    // not going to be so large that it's ever required) and otherwise we have
    // to introduce a threading block here.
    // https://github.com/processing/processing/issues/3383
    if (!sourceFile.equals(destFile)) {
      try {
        Base.copyFile(sourceFile, destFile);

      } catch (IOException e) {
        Base.showWarning(""Error adding file"",
                         ""Could not add '"" + filename + ""' to the sketch."", e);
        return false;
      }
    }

    if (codeExtension != null) {
      SketchCode newCode = new SketchCode(destFile, codeExtension);

      if (replacement) {
        replaceCode(newCode);

      } else {
        insertCode(newCode);
        sortCode();
      }
      setCurrentCode(filename);
      editor.header.repaint();
      if (isUntitled()) {  // TODO probably not necessary? problematic?
        // Mark the new code as modified so that the sketch is saved
        current.setModified(true);
      }

    } else {
      if (isUntitled()) {  // TODO probably not necessary? problematic?
        // If a file has been added, mark the main code as modified so
        // that the sketch is properly saved.
        code[0].setModified(true);
      }
    }
    return true;
  }",Add a file to the sketch.,0,920
7287,"public long readRawData(long oldVal) throws IOException {
        long newVal = oldVal;
        long chunkRemaining = newVal & MASK_COUNT;
        Pooled<ByteBuffer> buffer = this.rawData;
        if (buffer == null) {
            buffer = this.rawData = bufferPool.allocate();
            buffer.getResource().clear();
        }
        ByteBuffer buf = buffer.getResource();
        buf.compact();

        if (allAreClear(newVal, FLAG_READING_LENGTH | FLAG_READING_TILL_END_OF_LINE) && chunkRemaining == 0) {
            newVal |= FLAG_FINISHED;
            return newVal;
        }
        while (anyAreSet(newVal, FLAG_READING_NEWLINE)) {
            while (buf.hasRemaining()) {
                byte b = buf.get();
                if (b == '\n') {
                    newVal = newVal & ~FLAG_READING_NEWLINE | FLAG_READING_LENGTH;
                    break;
                }
            }
            if (anyAreSet(newVal, FLAG_READING_NEWLINE)) {
                int c = delegate.read(buf);
                buf.flip();
                if (c == -1) {
                    newVal |= FLAG_FINISHED;
                    return newVal;
                } else if (c == 0) {
                    return newVal;
                }
            }
        }

        while (anyAreSet(newVal, FLAG_READING_LENGTH)) {
            while (buf.hasRemaining()) {
                byte b = buf.get();
                if ((b >= '0' && b <= '9') || (b >= 'a' && b <= 'f') || (b >= 'A' && b < 'F')) {
                    chunkRemaining <<= 4; //shift it 4 bytes and then add the next value to the end
                    chunkRemaining += Integer.parseInt("""" + (char) b, 16);
                } else {
                    newVal = newVal & ~FLAG_READING_LENGTH | FLAG_READING_TILL_END_OF_LINE;
                    break;
                }
            }
            if (anyAreSet(newVal, FLAG_READING_LENGTH)) {
                buf.compact();
                int c = delegate.read(buf);
                buf.flip();
                if (c == -1) {
                    newVal |= FLAG_FINISHED;
                    return newVal;
                } else if (c == 0) {
                    return newVal;
                }
            }
        }
        while (anyAreSet(newVal, FLAG_READING_TILL_END_OF_LINE)) {
            while (buf.hasRemaining()) {
                if (buffer.getResource().get() == '\n') {
                    newVal = newVal & ~FLAG_READING_TILL_END_OF_LINE;
                    break;
                }
            }
            if (anyAreSet(newVal, FLAG_READING_TILL_END_OF_LINE)) {
                int c = delegate.read(buf);
                buf.flip();
                if (c == -1) {
                    newVal |= FLAG_FINISHED;
                    return newVal;
                } else if (c == 0) {
                    return newVal;
                }
            }
        }
        //we have our chunk size, check to make sure it was not the last chunk
        if (allAreClear(newVal, FLAG_READING_NEWLINE | FLAG_READING_LENGTH | FLAG_READING_TILL_END_OF_LINE) && chunkRemaining == 0) {
            newVal |= FLAG_FINISHED;
            //we may have read to far
            if (buf.hasRemaining()) {
                delegate.unget(buffer);
                buffer = null;
            }
        }
        //ok, we are done, return the state so the real read method can handle the chunked data
        //however it feels like
        return (newVal & ~MASK_COUNT) | chunkRemaining;
    }","Reads raw data from the stream, dealing with chunking as nessesary.",0,934
6620,"public static Buffer encodeToBuffer(Object obj) throws EncodeException {
    try {
      return Buffer.buffer(mapper.writeValueAsBytes(obj));
    } catch (Exception e) {
      throw new EncodeException(""Failed to encode as JSON: "" + e.getMessage());
    }
  }",Encode a POJO to JSON using the underlying Jackson mapper.,0,80
6248,"public List<Action> getActions() {
        synchronized (this) {
            if(actions == null) {
                actions = new CopyOnWriteArrayList<Action>();
            }
            return actions;
        }
    }",Gets actions contributed to this object.,0,65
6743,"public List<AttributeInfo> getAttributes() {
        if (attribute == null)
            attribute = new ArrayList<AttributeInfo>();

        return attribute;
    }",Returns all the attributes.,0,50
5929,"static PatchingContext createForRollback(final Patch patch, final PatchInfo current, final DirectoryStructure structure, final boolean overrideAll, final File workDir) {
        // backup is just a temp dir
        final File backup = workDir;
        //
        final ContentVerificationPolicy policy = overrideAll ? ContentVerificationPolicy.OVERRIDE_ALL : ContentVerificationPolicy.STRICT;
        return new PatchingContext(patch, current, structure, backup, policy);
    }",Create a patching context for rollback actions.,0,111
6215,"public static IJavaClassType findClassFromTemplate(IResource template, TapestryProject project) {
    String resourcePath = template.getFile().getAbsolutePath();
    String templateFilename = LocalizationUtils.unlocalizeFileName(template.getName());

    Library applicationLibrary = null;
    try {
      applicationLibrary = project.getApplicationLibrary();
    }
    catch (NotFoundException e) {
      return null;
    }

    resourcePath = PathUtils.removeLastFilePathElement(resourcePath, false) + File.separator + templateFilename;

    IJavaClassType type = checkFirstResourceForEach(resourcePath, applicationLibrary.getComponents().values());
    if(type != null) return type;
    return checkFirstResourceForEach(resourcePath, applicationLibrary.getPages().values());
  }",Finds the component class from it's template.,0,199
5632,"public ImageIcon getMetaContactStatusIcon(MetaContact contact)
    {
        BufferedImage statusImage = Constants.getStatusIcon(this
                .getMetaContactStatus(contact));
     
        WritableRaster raster = statusImage.copyData( null );
        BufferedImage statusImageCopy = new BufferedImage(
                statusImage.getColorModel(),
                raster,
                statusImage.isAlphaPremultiplied(), null );
        
        Graphics g = statusImageCopy.getGraphics();
        
        g.drawImage(statusImage, 0, 0, null);
        
        if(activeContacts.contains(contact))
        {   
            Image msgReceivedImage
                = ImageLoader.getImage(ImageLoader.MESSAGE_RECEIVED_ICON);
            
            g.drawImage(msgReceivedImage, 0,
                5,
                null);
        }
        
        ImageIcon statusIcon = new ImageIcon(statusImageCopy);
        
        return statusIcon;
    }",Returns the status icon for this MetaContact.,0,216
5833,"public Date getDate(int columnIndex) throws SQLException {
        try {
            debugCodeCall(""getDate"", columnIndex);
            return LegacyDateTimeUtils.toDate(conn, null, get(columnIndex));
        } catch (Exception e) {
            throw logAndConvert(e);
        }
    }",Returns the value of the specified column as a java.sql.Date.,0,82
6304,"public static String getWin32ErrorMessage(Throwable e) {
        String msg = e.getMessage();
        if(msg!=null) {
            Matcher m = errorCodeParser.matcher(msg);
            if(m.matches()) {
                try {
                    ResourceBundle rb = ResourceBundle.getBundle(""/hudson/win32errors"");
                    return rb.getString(""error""+m.group(1));
                } catch (Exception _) {
                    // silently recover from resource related failures
                }
            }
        }

        if(e.getCause()!=null)
            return getWin32ErrorMessage(e.getCause());
        return null; // no message
    }",Extracts the Win32 error message from  Throwable if possible.,0,172
6101,"public static INDArray averageAndPropagate(Collection<INDArray> arrays) {
        return  INSTANCE.average(arrays);
    }","This method averages input arrays, and returns averaged array.",0,32
6262,"public CommandResult command(final DBObject cmd) {
        return command(cmd, 0, getReadPreference());
    }",Executes a database command.,0,35
7406,"public static double and(double first, double second) {
        return MOCKING_PROGRESS.getArgumentMatcherStorage().reportAnd().returnZero();
    }",double argument that matches both given argument matchers.,0,41
6873,"public Value getStack(final int i) throws IndexOutOfBoundsException {
        if ( i >= this.top ) {
            throw new IndexOutOfBoundsException( ""Trying to access an inexistant stack element"" );
        }
        return this.values[i + this.locals];
    }",Returns the value of the given operand stack slot.,0,75
7550,"private static CacheConfiguration atomicsSystemCache(AtomicConfiguration cfg, boolean client) {
            CacheConfiguration ccfg = new CacheConfiguration();

            ccfg.setName(CU.ATOMICS_CACHE_NAME);
            ccfg.setAtomicityMode(TRANSACTIONAL);
            ccfg.setSwapEnabled(false);
            ccfg.setQueryIndexEnabled(false);
            ccfg.setRebalanceMode(SYNC);
            ccfg.setWriteSynchronizationMode(FULL_SYNC);
            ccfg.setCacheMode(cfg.getCacheMode());

            if (cfg.getCacheMode() == PARTITIONED) {
                ccfg.setBackups(cfg.getBackups());

                ccfg.setDistributionMode(client ? NEAR_ONLY : NEAR_PARTITIONED);
            }
            else
                ccfg.setDistributionMode(client ? NEAR_ONLY : PARTITIONED_ONLY);

            return ccfg;
        }",Creates cache configuration for atomic data structures.,0,187
7139,"protected Factory resolveFactory(Object name, Map attributes, Object value) {
        getProxyBuilder().getContext().put(CHILD_BUILDER, getProxyBuilder());
        return getProxyBuilder().factories.get(name);
    }",This is a hook for subclasses to plugin a custom strategy for mapping names to factories.,0,61
6089,"public List<Connection> getConnections(final ConnectionMode connectionMode, final String dataSourceName, final int connectionSize) throws SQLException {
        DataSource dataSource = getDataSourceMap().get(dataSourceName);
        if (1 == connectionSize) {
            return Collections.singletonList(dataSource.getConnection());
        }
        if (ConnectionMode.CONNECTION_STRICTLY == connectionMode) {
            return createConnections(dataSource, connectionSize);
        }
        synchronized (dataSource) {
            return createConnections(dataSource, connectionSize);
        }
    }",Get connections.,0,143
6719,"public static Bitstream findDepositLicense(Context context, Item item)
            throws SQLException, IOException, AuthorizeException
    {
        // get license format ID
        int licenseFormatId = -1;
        BitstreamFormat bf = bitstreamFormatService.findByShortDescription(context,
                ""License"");
        if (bf != null)
        {
            licenseFormatId = bf.getID();
        }

        List<Bundle> bundles = itemService.getBundles(item, Constants.LICENSE_BUNDLE_NAME);
        for (Bundle bundle : bundles)
        {
            // Assume license will be in its own bundle
            List<Bitstream> bitstreams = bundle.getBitstreams();

            for (Bitstream bitstream : bitstreams)
            {
                // The License should have a file format of ""License""
                if (bitstream.getFormat(context).getID() == licenseFormatId) {
                    //found a bitstream with format ""License"" -- return it
                    return bitstream;
                }
            }

            // If we couldn't find a bitstream with format = ""License"",
            // we will just assume the first bitstream is the deposit license
            // (usually a safe assumption as it is in the LICENSE bundle)
            if (bitstreams.size() > 0) {
                return bitstreams.get(0);
            }
        }

        // Oops! No license!
        return null;
    }",Utility to find the license bitstream from an item,0,272
6052,"public static String quoteIdentifier(String s) {
        if (s == null || s.length() == 0) {
            return ""\""\"""";
        }
        char c = s.charAt(0);
        // lowercase a-z is quoted as well
        if ((!Character.isLetter(c) && c != '_') || Character.isLowerCase(c)) {
            return StringUtils.quoteIdentifier(s);
        }
        for (int i = 1, length = s.length(); i < length; i++) {
            c = s.charAt(i);
            if ((!Character.isLetterOrDigit(c) && c != '_') ||
                    Character.isLowerCase(c)) {
                return StringUtils.quoteIdentifier(s);
            }
        }
        if (isKeyword(s, true)) {
            return StringUtils.quoteIdentifier(s);
        }
        return s;
    }",Add double quotes around an identifier if required.,0,268
6608,"public static String[] tokenizeToStringArray(String str, String delimiters) {
        if (str == null) {
            return null;
        }
        Collection<String> tokens = tokenizeToStringCollection(str, delimiters);
        return tokens.toArray(new String[tokens.size()]);
    }",Splits this string into an array using these delimiters.,0,87
6940,"public static List<Boolean> getAt(boolean[] array, IntRange range) {
        return primitiveArrayGet(array, range);
    }",Support the subscript operator with an IntRange for a boolean array,0,40
7804,"public List<Pet> findPetsByTags(List<String> tags) throws ApiException {
    Call call = findPetsByTagsCall(tags);
    Type returnType = new TypeToken<List<Pet>>(){}.getType();
    return apiClient.execute(call, returnType);
  }",Finds Pets by tags,0,79
6334,"private SampleResult sampleWithListener() {
        SampleResult result = new SampleResult();
        result.setDataType(SampleResult.TEXT);
        StringBuffer buffer = new StringBuffer();
        StringBuffer propBuffer = new StringBuffer();
        int cnt;
        int loop = this.getIterationCount();

        
        result.setSampleLabel(getName());
        result.sampleStart();
        try {
            initListenerClient();
        } catch (JMSException ex) {
            log.warn("""",ex);
            result.sampleEnd();
            result.setResponseCode(""000"");
            result.setResponseMessage(ex.getMessage());
            return result;
        }

        
        while (queue.size() < loop && interrupted == false) {
            try {
                Thread.sleep(0, 50);
            } catch (InterruptedException e) {
                log.debug(e.getMessage());
            }
        }
        result.sampleEnd();
       
        int read = 0;
        for(cnt = 0; cnt < loop ; cnt++) {
            TextMessage msg = queue.poll();
            if (msg != null) {
                read++;
                try {
                    buffer.append(msg.getText());
                    Enumeration<?> props = msg.getPropertyNames();
                    while(props.hasMoreElements()) {
                        String name = (String) props.nextElement();
                        propBuffer.append(""PROPERTY: "");
                        propBuffer.append(name);
                        propBuffer.append(""="");
                        propBuffer.append(msg.getObjectProperty(name));
                        propBuffer.append(""\n"");
                    }
                } catch (JMSException e) {
                    log.error(e.getMessage());
                }
            }
        }
        if (this.getReadResponseAsBoolean()) {
            result.setResponseData(buffer.toString().getBytes());
        } else {
            result.setBytes(buffer.toString().getBytes().length);
        }
        result.setResponseHeaders(propBuffer.toString());
        result.setDataType(SampleResult.TEXT);
        result.setSuccessful(true);
        result.setResponseCodeOK();
        result.setResponseMessage(read + "" messages received"");
        result.setSamplerData(loop + "" messages expected"");
        result.setSampleCount(read);

        return result;
    }",sample will block until messages are received,0,649
7259,"private static boolean autoSave(BasePanel panel) {
        File backupFile = AutoSaveManager.getAutoSaveFile(panel.getDatabaseFile());
        try {
            SaveSession ss = FileActions.saveDatabase(panel.database(), panel.metaData(),
                    backupFile, Globals.prefs,
                    false, false, panel.getEncoding(), true);
            ss.commit();
        } catch (SaveException e) {
            LOGGER.error(""Problem with automatic save"", e);
            return false;
        }
        return true;
    }",Perform an autosave.,0,144
6293,"public OpenForReadResult openForRead(Uri uri, boolean skipThreadCheck) throws IOException {
        if (!skipThreadCheck) {
            assertBackgroundThread();
        }
        switch (getUriType(uri)) {
            case URI_TYPE_FILE: {
                FileInputStream inputStream = new FileInputStream(uri.getPath());
                String mimeType = getMimeTypeFromPath(uri.getPath());
                long length = inputStream.getChannel().size();
                return new OpenForReadResult(uri, inputStream, mimeType, length, null);
            }
            case URI_TYPE_ASSET: {
                String assetPath = uri.getPath().substring(15);
                AssetFileDescriptor assetFd = null;
                InputStream inputStream;
                long length = -1;
                try {
                    assetFd = assetManager.openFd(assetPath);
                    inputStream = assetFd.createInputStream();
                    length = assetFd.getLength();
                } catch (FileNotFoundException e) {
                    // Will occur if the file is compressed.
                    inputStream = assetManager.open(assetPath);
                }
                String mimeType = getMimeTypeFromPath(assetPath);
                return new OpenForReadResult(uri, inputStream, mimeType, length, assetFd);
            }
            case URI_TYPE_CONTENT:
            case URI_TYPE_RESOURCE: {
                String mimeType = contentResolver.getType(uri);
                AssetFileDescriptor assetFd = contentResolver.openAssetFileDescriptor(uri, ""r"");
                InputStream inputStream = assetFd.createInputStream();
                long length = assetFd.getLength();
                return new OpenForReadResult(uri, inputStream, mimeType, length, assetFd);
            }
            case URI_TYPE_DATA: {
                OpenForReadResult ret = readDataUri(uri);
                if (ret == null) {
                    break;
                }
                return ret;
            }
            case URI_TYPE_HTTP:
            case URI_TYPE_HTTPS: {
                HttpURLConnection conn = (HttpURLConnection)new URL(uri.toString()).openConnection();
                conn.setDoInput(true);
                String mimeType = conn.getHeaderField(""Content-Type"");
                int length = conn.getContentLength();
                InputStream inputStream = conn.getInputStream();
                return new OpenForReadResult(uri, inputStream, mimeType, length, null);
            }
            case URI_TYPE_PLUGIN: {
                String pluginId = uri.getHost();
                CordovaPlugin plugin = pluginManager.getPlugin(pluginId);
                if (plugin == null) {
                    throw new FileNotFoundException(""Invalid plugin ID in URI: "" + uri);
                }
                return plugin.handleOpenForRead(uri);
            }
        }
        throw new FileNotFoundException(""URI not supported by CordovaResourceApi: "" + uri);
    }","Opens a stream to the given URI, also providing the MIME type & length.",0,690
6690,"public FilePath[] list(final String includes, final String excludes, final boolean defaultExcludes) throws IOException, InterruptedException {
        return act(new FileCallable<FilePath[]>() {
            private static final long serialVersionUID = 1L;
            public FilePath[] invoke(File f, VirtualChannel channel) throws IOException {
                String[] files = glob(f, includes, excludes, defaultExcludes);

                FilePath[] r = new FilePath[files.length];
                for( int i=0; i<r.length; i++ )
                    r[i] = new FilePath(new File(f,files[i]));

                return r;
            }
        });
    }",List up files in this directory that matches the given Ant-style filter.,0,209
7142,"public static String formatCluster(Cluster cluster) {
    return cluster.getIdentifier() + "": ""
        + cluster.computeCentroid().asFormatString();
  }",Format the cluster for output,0,47
7467,"public HystrixEventNotifier getEventNotifier() {
        if (notifier != null) {
            // we have a global override so use it
            return notifier;
        } else {
            // we don't have an injected default nor an override so construct a default
            return HystrixEventNotifierDefault.getInstance();
        }
    }",Retrieve instance of  HystrixEventNotifier to use based on order of precedence as defined in  HystrixPlugins class header.,0,59
7403,"public GridFuture<GridHadoopJobId> submit(GridHadoopJobId jobId, GridHadoopJobInfo info) {
        if (!busyLock.tryReadLock()) {
            return new GridFinishedFutureEx<>(new GridException(""Failed to execute map-reduce job "" +
                ""(grid is stopping): "" + info));
        }

        try {
            GridHadoopJob job = ctx.jobFactory().createJob(jobId, info);

            Collection<GridHadoopFileBlock> blocks = job.input();

            GridHadoopMapReducePlan mrPlan = mrPlanner.preparePlan(blocks, ctx.nodes(), job, null);

            GridHadoopJobMetadata meta = new GridHadoopJobMetadata(jobId, info);

            meta.mapReducePlan(mrPlan);

            meta.pendingBlocks(allBlocks(mrPlan));
            meta.pendingReducers(allReducers(job));

            GridFutureAdapter<GridHadoopJobId> completeFut = new GridFutureAdapter<>();

            GridFutureAdapter<GridHadoopJobId> old = activeFinishFuts.put(jobId, completeFut);

            assert old == null : ""Duplicate completion future [jobId="" + jobId + "", old="" + old + ']';

            if (log.isDebugEnabled())
                log.debug(""Submitting job metadata [jobId="" + jobId + "", meta="" + meta + ']');

            jobMetaPrj.put(jobId, meta);

            return completeFut;
        }
        catch (GridException e) {
            return new GridFinishedFutureEx<>(e);
        }
        finally {
            busyLock.readUnlock();
        }
    }",Submits execution of Hadoop job to grid.,0,386
5379,"protected Pool<Jedis> createRedisPool() {

		return new JedisPool(getPoolConfig(), getShardInfo().getHost(), getShardInfo().getPort(),
				getTimeoutFrom(getShardInfo()), getShardInfo().getPassword(), Protocol.DEFAULT_DATABASE, clientName, useSsl);
	}",Creates  JedisPool.,0,77
6167,"public boolean isUpToDate(File file) throws HistoryException {
        if (file.isDirectory()) {
            Repository repos = HistoryGuru.getInstance().getRepository(file);
            if (repos == null) {
                return true;
            }
            File dir = RuntimeEnvironment.getInstance().getDataRootFile();
            dir = new File(dir, ""historycache"");
            dir = new File(dir, repos.getDirectoryName().substring(RuntimeEnvironment.getInstance().getSourceRootPath().length()));
            return dir.exists();
        } else {
            return isUpToDate(file, getCachedFile(file));
        }
    }",Check if the cache is up to date for the specified file.,0,183
7435,"@Nullable protected CacheObject unswap(boolean needVal, boolean checkExpire)
        throws IgniteCheckedException, GridCacheEntryRemovedException {
        if (!cctx.isSwapOrOffheapEnabled())
            return null;

        assert !detached() : this;

        boolean obsolete = false;
        boolean deferred = false;
        GridCacheVersion ver0 = null;

        synchronized (this) {
            checkObsolete();

            if (isStartVersion() && ((flags & IS_UNSWAPPED_MASK) == 0)) {
                GridCacheSwapEntry e;

                if (cctx.offheapTiered()) {
                    e = cctx.swap().readOffheapPointer(this);

                    if (log.isTraceEnabled()) {
                        if (e != null) {
                            log.trace(""Read offheap pointer [key="" + key +
                                "", entry="" + System.identityHashCode(this) +
                                "", ptr="" + e.offheapPointer() +
                                ']');
                        }
                        else {
                            log.trace(""Read offheap pointer [key="" + key +
                                "", entry="" + System.identityHashCode(this) +
                                "", val="" + null +
                                ']');
                        }
                    }

                    if (e != null) {
                        if (e.offheapPointer() > 0) {
                            offHeapPointer(e.offheapPointer());

                            flags |= IS_OFFHEAP_PTR_MASK;

                            if (needVal) {
                                CacheObject val = cctx.fromOffheap(e.offheapPointer(), false);

                                e.value(val);
                            }
                        }
                        else // Read from swap.
                            offHeapPointer(0);
                    }
                }
                else {
                    e = cctx.swap().readAndRemove(this);

                    if (log.isTraceEnabled()) {
                        log.trace(""unswap readAndRemove [key="" + key +
                            "", entry="" + System.identityHashCode(this) +
                            "", found="" + (e != null) +
                            ']');
                    }
                }

                flags |= IS_UNSWAPPED_MASK;

                // If there is a value.
                if (e != null) {
                    long delta = checkExpire ? (e.expireTime() == 0 ? 0 : e.expireTime() - U.currentTimeMillis()) : 0;

                    CacheObject val = e.value();

                    val = cctx.kernalContext().cacheObjects().prepareForCache(val, cctx);

                    // Set unswapped value.
                    update(val, e.expireTime(), e.ttl(), e.version(), false);

                    // Must update valPtr again since update() will reset it.
                    if (cctx.offheapTiered() && e.offheapPointer() > 0)
                        offHeapPointer(e.offheapPointer());

                    if (delta >= 0)
                        return val;
                    else {
                        CacheObject expiredVal = rawGetOrUnmarshal(false);

                        if (onExpired(expiredVal, null)) {
                            if (cctx.deferredDelete()) {
                                deferred = true;
                                ver0 = ver;
                            }
                            else
                                obsolete = true;
                        }
                    }
                }
            }
        }

        if (obsolete) {
            onMarkedObsolete();

            cctx.cache().removeEntry(this);
        }

        if (deferred) {
            assert ver0 != null;

            cctx.onDeferredDelete(this, ver0);
        }

        return null;
    }",Unswaps an entry.,0,911
6635,"private boolean isDistributedLogReplay(Configuration conf) {
    boolean dlr =
        conf.getBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,
          HConstants.DEFAULT_DISTRIBUTED_LOG_REPLAY_CONFIG);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""Distributed log replay="" + dlr);
    }
    return dlr;
  }",Returns if distributed log replay is turned on or not,0,77
6287,"public boolean contains(String user) {
        return getEntry(user) != null;
    }",Returns true if the specified XMPP address is an entry in the roster.,0,30
5617,"public static boolean delete(File directory) throws IOException {
        return emptyDirectory(directory, false);
    }","Recursively deletes the contents of the specified directory, and finally wipes out the directory itself.",0,34
6283,"public static Expression getterThisX(ClassNode annotatedNode, PropertyNode pNode) {
        ClassNode owner = pNode.getDeclaringClass();
        if (annotatedNode.equals(owner)) {
            return callThisX(getterName(annotatedNode, pNode));
        }
        return propX(new VariableExpression(""this""), pNode.getName());
    }","This method is similar to  #propX(Expression, Expression) but will make sure that if the property being accessed is defined inside the classnode provided as a parameter, then a getter call is generated instead of a field access.",0,92
6775,"public static HRegionInfo getHRegionInfo(Result data) {
    return HRegionInfo.getHRegionInfo(data);
  }",Returns HRegionInfo object from the column,0,29
5952,"public String getAncestry() {
        String result = """";
        for (JsrScope s = this; s != null; s = s.parent) {
            if (!s.isEmpty()) {
                result = s.returnAddress + result;
            }
        }
        return result;
    }",Gets the ancestry of this scope starting with the  #returnAddress of this scope's most distant ancestor and ending with the  #returnAddress of this object.,0,96
6104,"public int getFileVersion(String revision) {
        return fileVersions.getOrDefault(revision, 0);
    }",Translates repository revision number into file version.,0,30
7781,"public CubeInstance disableCube(CubeInstance cube) throws IOException {
        aclEvaluate.hasProjectWritePermission(cube.getProjectInstance());
        Message msg = MsgPicker.getMsg();

        String cubeName = cube.getName();

        RealizationStatusEnum ostatus = cube.getStatus();
        if (null != ostatus && !RealizationStatusEnum.READY.equals(ostatus)) {
            throw new BadRequestException(String.format(msg.getDISABLE_NOT_READY_CUBE(), cubeName, ostatus));
        }

        return getCubeManager().updateCubeStatus(cube, RealizationStatusEnum.DISABLED);
    }",Update a cube status from ready to disabled.,0,152
6264,"protected Mono<ServerResponse> renderErrorView(ServerRequest request) {
		boolean includeStackTrace = isIncludeStackTrace(request, MediaType.TEXT_HTML);
		Map<String, Object> error = getErrorAttributes(request, includeStackTrace);
		HttpStatus errorStatus = getHttpStatus(error);
		ServerResponse.BodyBuilder responseBody = ServerResponse.status(errorStatus)
				.contentType(MediaType.TEXT_HTML);
		return Flux
				.just(""error/"" + errorStatus.toString(),
						""error/"" + SERIES_VIEWS.get(errorStatus.series()), ""error/error"")
				.flatMap((viewName) -> renderErrorView(viewName, responseBody, error))
				.switchIfEmpty(this.errorProperties.getWhitelabel().isEnabled()
						? renderDefaultErrorView(responseBody, error)
						: Mono.error(getError(request)))
				.next().doOnNext((response) -> logError(request, errorStatus));
	}",Render the error information as an HTML view.,0,233
6521,"public static FormatStep textFormatStep(final String string) {
        return new FormatStep() {
            public void render(final StringBuilder builder, final ExtLogRecord record) {
                builder.append(string);
            }

            public int estimateLength() {
                return string.length();
            }

            public ItemType getItemType() {
                return ItemType.TEXT;
            }
        };
    }",Create a format step which simply emits the given string.,0,118
7682,"private boolean propertyHasBreakingCharacters(String str) {
        final String regex = ""^.*[+*:;,.()-]+.*$"";
        final Pattern pattern = Pattern.compile(regex);
        final Matcher matcher = pattern.matcher(str);
        return matcher.matches();
    }","Checks whether property names have breaking characters like ':', '-'.",0,74
5393,"public static MetricRegistryConfiguration fromConfiguration(Configuration configuration) {
		ScopeFormats scopeFormats;
		try {
			scopeFormats = ScopeFormats.fromConfig(configuration);
		} catch (Exception e) {
			LOG.warn(""Failed to parse scope format, using default scope formats"", e);
			scopeFormats = ScopeFormats.fromConfig(new Configuration());
		}

		char delim;
		try {
			delim = configuration.getString(MetricOptions.SCOPE_DELIMITER).charAt(0);
		} catch (Exception e) {
			LOG.warn(""Failed to parse delimiter, using default delimiter."", e);
			delim = '.';
		}

		String includedReportersString = configuration.getString(MetricOptions.REPORTERS_LIST, """");
		Set<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)
			.collect(Collectors.toSet());

		// use a TreeSet to make the reporter order deterministic, which is useful for testing
		Set<String> namedReporters = new TreeSet<>(String::compareTo);
		// scan entire configuration for ""metric.reporter"" keys and parse individual reporter configurations
		for (String key : configuration.keySet()) {
			if (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {
				Matcher matcher = reporterClassPattern.matcher(key);
				if (matcher.matches()) {
					String reporterName = matcher.group(1);
					if (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {
						if (namedReporters.contains(reporterName)) {
							LOG.warn(""Duplicate class configuration detected for reporter {}."", reporterName);
						} else {
							namedReporters.add(reporterName);
						}
					} else {
						LOG.info(""Excluding reporter {}, not configured in reporter list ({})."", reporterName, includedReportersString);
					}
				}
			}
		}

		List<Tuple2<String, Configuration>> reporterConfigurations;

		if (namedReporters.isEmpty()) {
			reporterConfigurations = Collections.emptyList();
		} else {
			reporterConfigurations = new ArrayList<>(namedReporters.size());

			for (String namedReporter: namedReporters) {
				DelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(
					configuration,
					ConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');

				reporterConfigurations.add(Tuple2.of(namedReporter, (Configuration) delegatingConfiguration));
			}
		}

		final String maxFrameSizeStr = configuration.getString(AkkaOptions.FRAMESIZE);
		final String akkaConfigStr = String.format(""akka {remote {netty.tcp {maximum-frame-size = %s}}}"", maxFrameSizeStr);
		final Config akkaConfig = ConfigFactory.parseString(akkaConfigStr);
		final long maximumFrameSize = akkaConfig.getBytes(""akka.remote.netty.tcp.maximum-frame-size"");

		// padding to account for serialization overhead
		final long messageSizeLimitPadding = 256;

		return new MetricRegistryConfiguration(scopeFormats, delim, reporterConfigurations, maximumFrameSize - messageSizeLimitPadding);
	}",Create a metric registry configuration object from the given  Configuration.,0,685
5475,"public CountersReader countersReader()
    {
        if (conductor.status() != ClientConductor.Status.ACTIVE)
        {
            throw new IllegalStateException(""Client is closed"");
        }

        final Context ctx = conductor.context();
        return new CountersReader(ctx.countersMetaDataBuffer(), ctx.countersValuesBuffer());
    }",Create and return a  CountersReader for the Aeron media driver counters.,0,92
7442,"protected boolean executeLogin(ServletRequest request, ServletResponse response) {
        if (log.isDebugEnabled()) {
            log.debug(""Attempting to authenticate Subject based on Http BASIC Authentication request..."");
        }

        HttpServletRequest httpRequest = toHttp(request);
        String authorizationHeader = httpRequest.getHeader(AUTHORIZATION_HEADER);

        if (authorizationHeader != null && authorizationHeader.length() > 0) {
            if (log.isDebugEnabled()) {
                log.debug(""Executing login with headers ["" + authorizationHeader + ""]"");
            }

            String[] authTokens = authorizationHeader.split("" "");

            if (authTokens[0].trim().equalsIgnoreCase(HttpServletRequest.BASIC_AUTH)) {
                String encodedCredentials = authTokens[1];

                String decodedCredentials = Base64.decodeToString(encodedCredentials);

                String[] credentials = decodedCredentials.split("":"");

                if (credentials != null && credentials.length > 1) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Processing login request ["" + credentials[0] + ""]"");
                    }
                    Subject subject = getSubject(request, response);
                    UsernamePasswordToken usernamePasswordToken = new UsernamePasswordToken(credentials[0], credentials[1]);
                    try {
                        subject.login(usernamePasswordToken);
                        if (log.isDebugEnabled()) {
                            log.debug(""Successfully logged in user ["" + credentials[0] + ""]"");
                        }
                        return true;
                    } catch (AuthenticationException ae) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Unable to log in subject ["" + credentials[0] + ""]"", ae);
                        }
                    }
                }
            }
        }

        //always default to sending the challenge.  If we've made it to this point in the code, that
        //means the authentication attempt either never occured, or wasn't successful:
        return sendChallenge(request, response);
    }",Initiates a login attempt with the provided credentials in the http header.,0,488
7082,"public static InstallState getInstallState() {
        // Support a simple state override. Useful for testing.
        String stateOverride = System.getenv(""jenkins.install.state"");
        if (stateOverride != null) {
            try {
                return InstallState.valueOf(stateOverride.toUpperCase());
            } catch (RuntimeException e) {
                throw new IllegalStateException(""Unknown install state override specified on the commandline: '"" + stateOverride + ""'."");
            }
        }

        // install wizard will always run if environment specified
        if (!Boolean.getBoolean(""jenkins.install.runSetupWizard"")) {
            if (Functions.getIsUnitTest()) {
                return InstallState.TEST;
            }
            
            if (Boolean.getBoolean(""hudson.Main.development"")) {
                return InstallState.DEVELOPMENT;
            }
        }

        VersionNumber lastRunVersion = new VersionNumber(getLastExecVersion());

        // Neither the top level config or the lastExecVersionFile have a version
        // stored in them, which means it's a new install.
        if (lastRunVersion.compareTo(NEW_INSTALL_VERSION) == 0) {
            // Edge case: used Jenkins 1 but did not save the system config page,
            // the version is not persisted and returns 1.0, so try to check if
            // they actually did anything
            if (!Jenkins.getInstance().getItemMap().isEmpty()) {
                return InstallState.UPGRADE;
            }
            return InstallState.NEW;
        }

        // We have a last version.

        VersionNumber currentRunVersion = new VersionNumber(getCurrentExecVersion());
        if (lastRunVersion.isOlderThan(currentRunVersion)) {
            return InstallState.UPGRADE;
        } else if (lastRunVersion.isNewerThan(currentRunVersion)) {
            return InstallState.DOWNGRADE;
        } else {
            // Last running version was the same as ""this"" running version.
            return InstallState.RESTART;
        }
    }",Get the current installation state.,0,376
7624,"public static List<RelDataType> getFieldTypeList(final RelDataType type) {
    return Lists.transform(type.getFieldList(), GET_TYPE);
  }",Returns a list of the types of the fields in a given struct type.,0,41
7305,"private Pattern createPattern(final String pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException(""Pattern cannot be null."");
        }
        
        if (!this.caseSensitive) {
            return Pattern.compile(pattern, Pattern.CASE_INSENSITIVE);
        }
        return Pattern.compile(pattern);
    }",Creates the pattern.,0,92
6853,"public List<HRegionInfo> processServerShutdown(final ServerName sn) {
    // Clean out any existing assignment plans for this server
    synchronized (this.regionPlans) {
      for (Iterator <Map.Entry<String, RegionPlan>> i =
          this.regionPlans.entrySet().iterator(); i.hasNext();) {
        Map.Entry<String, RegionPlan> e = i.next();
        ServerName otherSn = e.getValue().getDestination();
        // The name will be null if the region is planned for a random assign.
        if (otherSn != null && otherSn.equals(sn)) {
          // Use iterator's remove else we'll get CME
          i.remove();
        }
      }
    }
    List<HRegionInfo> regions = regionStates.serverOffline(sn);
    for (Iterator<HRegionInfo> it = regions.iterator(); it.hasNext(); ) {
      HRegionInfo hri = it.next();
      String encodedName = hri.getEncodedName();

      // We need a lock on the region as we could update it
      Lock lock = locker.acquireLock(encodedName);
      try {
        RegionState regionState =
          regionStates.getRegionTransitionState(encodedName);
        if (regionState == null
            || !regionState.isPendingOpenOrOpeningOnServer(sn)) {
          LOG.info(""Skip region "" + hri
            + "" since it is not opening on the dead server any more: "" + sn);
          it.remove();
        } else {
          // Mark the region closed and assign it again by SSH
          regionStates.updateRegionState(hri, RegionState.State.CLOSED);
        }
      } finally {
        lock.unlock();
      }
    }
    return regions;
  }",Process shutdown server removing any assignments.,0,401
5272,"public static ClassInjector ofSystemClassLoader(AccessControlContext accessControlContext) {
            return new UsingReflection(SystemClassLoaderAction.apply(accessControlContext), accessControlContext);
        }",Creates a class injector for the system class loader.,0,37
5983,"public int getRTPPayloadType()
    {
        return MediaUtils.jmfEncodingToRtpPayloadType(getJMFEncoding());
    }","Gets the RTP payload type (number) of this MediaFormat as it is known in RFC 3551 ""RTP Profile for Audio and Video Conferences with",0,27
6443,"public NotifyBuilder from(final String endpointUri) {
        stack.add(new EventPredicateSupport() {

            @Override
            public boolean isAbstract() {
                // is abstract as its a filter
                return true;
            }

            @Override
            public boolean onExchange(Exchange exchange) {
                // filter non matching exchanges
                return EndpointHelper.matchEndpoint(exchange.getFromEndpoint().getEndpointUri(), endpointUri);
            }

            public boolean matches() {
                // should be true as we use the onExchange to filter
                return true;
            }

            @Override
            public String toString() {
                return ""from("" + endpointUri + "")"";
            }
        });
        return this;
    }",Optionally a from endpoint which means that this expression should only be based on  Exchange which is originated from the particular endpoint(s).,0,175
7246,"public static String convertGroupToServiceName(String group) {
        return group;
    }",convert group to service name,0,24
6150,"public static String lowerCase(CharSequence seq) {
        if (seq == null) {
            return null;
        }
        return seq.toString().toLowerCase();
    }",Converts a String to lower case as per  String#toLowerCase(). A  null input String returns  null.,0,55
6863,"public Tab getTab(int position) {
        if (position >= 0 && position < getComponentCount()) {
            return getTab(components.get(position));
        } else {
            return null;
        }
    }",Returns the  Tab (metadata) for a component.,0,71
5259,"public static DataSource createDataSource(final DataSource dataSource, final byte[] yamlBytes) {
        YamlRootEncryptRuleConfigurationBak config = YamlEngine.unmarshal(yamlBytes, YamlRootEncryptRuleConfigurationBak.class);
        return EncryptDataSourceFactory.createDataSource(dataSource, new EncryptRuleConfigurationYamlSwapperBak().swap(config.getEncryptRule()));
    }",Create encrypt data source.,0,76
7179,"public boolean mkdirs(Path cPath, FsPermission permission) throws IOException {
    LOG.info(""mkdirs({}, {})"", cPath, permission);
    if (mStatistics != null) {
      mStatistics.incrementWriteOps(1);
    }
    TachyonURI path = new TachyonURI(Utils.getPathWithoutScheme(cPath));
    CreateDirectoryOptions options =
        CreateDirectoryOptions.defaults().setRecursive(true).setAllowExists(true);
    try {
      mTFS.createDirectory(path, options);
      return true;
    } catch (TachyonException e) {
      throw new IOException(e);
    }
  }",Attempts to create a folder with the specified path.,0,163
7767,"public static Optional<Add> create(String statement) {
            Matcher argumentMatcher = ARGUMENT_TOKENIZER.matcher(statement.trim());

            if (!argumentMatcher.find()) {
                return Optional.absent();
            }

            String commandName = argumentMatcher.group();
            if (!(StringUtils.equals(commandName, ""ADD"") || StringUtils.equals(commandName, ""COPY""))) {
                return Optional.absent();
            }

            String lastToken = null;
            Collection<String> sources = new ArrayList<>();

            while (argumentMatcher.find()) {
                if (lastToken != null) {
                    sources.add(lastToken);
                }
                lastToken = argumentMatcher.group().replaceAll(""(^\"")|(\""$)"", """");
            }

            if (sources.isEmpty()) {
                throw new DockerClientException(""Wrong ADD or COPY format"");
            }

            return Optional.of(new Add(sources, lastToken));
        }","Createa an Add if it matches, or missing if not.",0,283
7126,"private static DetectionAlertFilterRecipients retainWhitelisted(DetectionAlertFilterRecipients recipients, Collection<String> whitelist) {
    if (recipients == null) {
      return null;
    }

    recipients.setTo(retainWhitelisted(recipients.getTo(), whitelist));
    recipients.setCc(retainWhitelisted(recipients.getCc(), whitelist));
    recipients.setBcc(retainWhitelisted(recipients.getBcc(), whitelist));

    return recipients;
  }",Retain whitelisted email addresses for email recipient string only.,0,114
6603,"public long getWorkerId(NetAddress workerNetAddress) {
    // TODO(gene): This NetAddress cloned in case thrift re-uses the object. Does thrift re-use it?
    NetAddress workerAddress = new NetAddress(workerNetAddress);

    synchronized (mWorkers) {
      if (mWorkers.contains(mAddressIndex, workerAddress)) {
        // This worker address is already mapped to a worker id.
        long oldWorkerId = mWorkers.getFirstByField(mAddressIndex, workerAddress).getId();
        LOG.warn(""The worker {} already exists as id {}."", workerAddress, oldWorkerId);
        return oldWorkerId;
      }

      if (mLostWorkers.contains(mAddressIndex, workerAddress)) { // this is one of the lost workers
        final MasterWorkerInfo lostWorkerInfo = mLostWorkers.getFirstByField(mAddressIndex,
            workerAddress);
        final long lostWorkerId = lostWorkerInfo.getId();
        LOG.warn(""A lost worker {} has requested its old id {}."", workerAddress, lostWorkerId);

        mWorkers.add(lostWorkerInfo);
        mLostWorkers.remove(lostWorkerInfo);
        return lostWorkerId;
      }

      // Generate a new worker id.
      long workerId = mNextWorkerId.getAndIncrement();
      mWorkers.add(new MasterWorkerInfo(workerId, workerNetAddress));

      LOG.info(""getWorkerId(): WorkerNetAddress: {} id: {}"", workerAddress, workerId);
      return workerId;
    }
  }",Returns a worker id for the given worker.,0,276
6026,"public static Alternate nonIgnorable() {
			return NON_IGNORABLE;
		}",Consider Whitespace and punctuation as base characters.,0,21
5895,"static Arbitrary<Integer> integer() {
        return size -> Gen.choose(-size, size);
    }",Generates arbitrary integer values.,0,36
7546,"protected AuthenticationInfo queryForLdapAuthenticationInfo(AuthenticationToken token, LdapContextFactory ldapContextFactory) throws NamingException {

        UsernamePasswordToken upToken = (UsernamePasswordToken) token;

        // Binds using the username and password provided by the user.
        LdapContext ctx = null;
        try {
            ctx = ldapContextFactory.getLdapContext( upToken.getUsername(), String.valueOf( upToken.getPassword() ) );
        } finally {
            LdapUtils.closeContext( ctx );
        }

        return new SimpleAuthenticationInfo( upToken.getUsername(), upToken.getPassword() );
    }",Builds an  AuthenticationInfo object by querying the active directory LDAP context for the specified username.,0,138
6866,"public String getXML()
	{
		StringBuffer xml= new StringBuffer();
		
        xml.append(""<""+XML_TAG+"">"");
        
        for (int i=0;i<size();i++)
		{
			xml.append(getValue(i).getXML());
		}
        
		xml.append(""</""+XML_TAG+"">"");

		return xml.toString();
	}",Return the XML representation of a row.,0,121
5382,"private Expression decisionGreaterEqualThan() {
        // validate the arg list
        if (json.size() != 3) {
            throwUnexpectedArgumentCount(GREATER_THAN_EQUALS, 2);
        }
        Expression firstArgument = parse.string(json, 1);
        Expression secondArgument = parse.string(json, 2);
        return ff.function(""greaterEqualThan"", firstArgument, secondArgument);
    }","Returns true if the first input is greater than or equal to the second, false otherwise.",0,102
6122,"public String getImagePath() 
    {
        URL url = GuiActivator.getResources().
            getImageURL(this.getImageID().getId());
        
        if(url == null)
            return null;
        
        return url.toString();
    }",Returns the path of the image corresponding to this smily.,0,75
5585,"public static String fixKey(String key) {

        String resultingKey = key;
        if (resultingKey.toLowerCase().startsWith(""arxiv:"")) {
            resultingKey = resultingKey.substring(6);
        }

        int dot = resultingKey.indexOf('.');
        int slash = resultingKey.indexOf('/');

        if ((dot > -1) && (dot < slash)) {
            resultingKey = resultingKey.substring(0, dot) + resultingKey.substring(slash, resultingKey.length());
        }

        return resultingKey;
    }",Strip subcategories from ArXiv key.,0,166
7610,"public static boolean isTag(final Reference ref) {
        return ref != null && isTag(ref.getRef());
    }",Is reference a tag?,0,43
6848,"private static String toHexColor(final Color color) {
            Utilities.ensureNonNull(""color"", color);
            try {
                return COLOR_CONVERTER.convert(color, String.class);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }",Return an HEX representation of a Color,0,82
6572,"byte[] getFile(String file) throws IOException {
        trace(""getFile <"" + file + "">"");
        if (file.startsWith(TRANSFER + ""/"") && new File(TRANSFER).exists()) {
            file = file.substring(TRANSFER.length() + 1);
            if (!isSimpleName(file)) {
                return null;
            }
            File f = new File(TRANSFER, file);
            if (!f.exists()) {
                return null;
            }
            return IOUtils.readBytesAndClose(new FileInputStream(f), -1);
        }
        byte[] data = Utils.getResource(""/org/h2/server/web/res/"" + file);
        if (data == null) {
            trace("" null"");
        } else {
            trace("" size="" + data.length);
        }
        return data;
    }",Read the given file from the file system or from the resources.,0,257
7835,"public Tree transformTree(Tree t) {
    if (VERBOSE) {
      System.err.println(""Input to CoordinationTransformer: "" + t);
    }
    Tree tx = tn.transformTree(t);
    if (VERBOSE) {
      System.err.println(""After DependencyTreeTransformer:  "" + tx);
    }
    if (tx == null) {
      return tx;
    }
    Tree tt = UCPtransform(tx);
    if (VERBOSE) {
      System.err.println(""After UCPTransformer:             "" + tt);
    }
    Tree ttt = CCtransform(tt);
    if (VERBOSE) {
      System.err.println(""After CCTransformer:              "" + ttt);
    }
    Tree tttt = qp.transformTree(ttt);
    if (VERBOSE) {
      System.err.println(""After QPTreeTransformer:          "" + tttt);
    }
    Tree flatSQ = SQflatten(tttt);
    if (VERBOSE) {
      System.err.println(""After SQ flattening:              "" + flatSQ);
    }
    Tree fixedDates = dates.transformTree(flatSQ);
    if (VERBOSE) {
      System.err.println(""After DateTreeTransformer:        "" + fixedDates);
    }
    Tree removedXX = removeXOverX(fixedDates);
    if (VERBOSE) {
      System.err.println(""After removeXoverX:               "" + removedXX);
    }
    Tree conjp = combineConjp(removedXX);
    if (VERBOSE) {
      System.err.println(""After combineConjp:               "" + conjp);
    }
    return conjp;
  }",Transforms t if it contains a coordination in a flat structure (CCtransform) and transforms UCP (UCPtransform).,0,416
5263,"public float dst2 (float x, float y, float z) {
		final float a = x - this.x;
		final float b = y - this.y;
		final float c = z - this.z;

		return a * a + b * b + c * b;
	}",Returns the squared distance between this point and the given point,0,108
6227,"public static int getCharType(char ch) {
    if (isSurrogate(ch))
      return CharType.SURROGATE;
    // Most (but not all!) of these are Han Ideographic Characters
    if (ch >= 0x4E00 && ch <= 0x9FA5)
      return CharType.HANZI;
    if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))
      return CharType.LETTER;
    if (ch >= 0x0030 && ch <= 0x0039)
      return CharType.DIGIT;
    if (ch == ' ' || ch == '\t' || ch == '\r' || ch == '\n' || ch == 'ã')
      return CharType.SPACE_LIKE;
    // Punctuation Marks
    if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)
        || (ch >= 0x3001 && ch <= 0x301E))
      return CharType.DELIMITER;

    // Full-Width range
    if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))
      return CharType.FULLWIDTH_LETTER;
    if (ch >= 0xFF10 && ch <= 0xFF19)
      return CharType.FULLWIDTH_DIGIT;
    if (ch >= 0xFE30 && ch <= 0xFF63)
      return CharType.DELIMITER;
    return CharType.OTHER;

  }",Return the internal  CharType constant of a given character.,0,424
5473,"public static Writable copyWritable(final Writable src, final Writable tgt)
  throws IOException {
    return copyWritable(getBytes(src), tgt);
  }",Copy one Writable to another.,0,47
7049,"public Resolution resolve(AlluxioURI uri) throws InvalidPathException {
    try (LockResource r = new LockResource(mReadLock)) {
      String path = uri.getPath();
      LOG.debug(""Resolving {}"", path);
      // This will re-acquire the read lock, but that is allowed.
      String mountPoint = getMountPoint(uri);
      if (mountPoint != null) {
        MountInfo info = mMountTable.get(mountPoint);
        AlluxioURI ufsUri = info.getUfsUri();
        // TODO(gpang): this ufs should probably be cached.
        UnderFileSystem ufs = UnderFileSystem.Factory.get(ufsUri.toString());
        ufs.setProperties(info.getOptions().getProperties());
        AlluxioURI resolvedUri = ufs.resolveUri(ufsUri, path.substring(mountPoint.length()));
        return new Resolution(resolvedUri, ufs, info.getOptions().isShared());
      }
      return new Resolution(uri, null, false);
    }
  }",Resolves the given Alluxio path.,0,243
7834,"public static GtidNewChannelPosition parse(String value, String defaultValue) {
            GtidNewChannelPosition mode = parse(value);
            if (mode == null && defaultValue != null) {
                mode = parse(defaultValue);
            }
            return mode;
        }",Determine if the supplied value is one of the predefined options.,0,80
6469,"public JIRAChangeItem remove(Serializable primaryKey)
		throws NoSuchJIRAChangeItemException, SystemException {
		Session session = null;

		try {
			session = openSession();

			JIRAChangeItem jiraChangeItem = (JIRAChangeItem)session.get(JIRAChangeItemImpl.class,
					primaryKey);

			if (jiraChangeItem == null) {
				if (_log.isWarnEnabled()) {
					_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
				}

				throw new NoSuchJIRAChangeItemException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					primaryKey);
			}

			return remove(jiraChangeItem);
		}
		catch (NoSuchJIRAChangeItemException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}",Removes the j i r a change item with the primary key from the database.,0,210
